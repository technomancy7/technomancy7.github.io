{
    "classes": {
        "BorderWindow.uc": {
            "body": "//=============================================================================\n// BorderWindow.\n//=============================================================================\nclass BorderWindow extends Window\n\tnative\n\tnoexport;\n\n// ----------------------------------------------------------------------\n// Variables\n\n// Border textures\nvar const texture borderLeft;\nvar const texture borderTopLeft;\nvar const texture borderTop;\nvar const texture borderTopRight;\nvar const texture borderRight;\nvar const texture borderBottomRight;\nvar const texture borderBottom;\nvar const texture borderBottomLeft;\n\nvar const texture center;\n\n// Cursors\nvar const texture moveCursor;\nvar const texture hMoveCursor;\nvar const texture vMoveCursor;\nvar const texture tlMoveCursor;\nvar const texture trMoveCursor;\n\n// Drawing options\nvar EDrawStyle    borderStyle;     // Solid, translucent or masked\nvar bool          bSmoothBorder;   // TRUE if the borders should be smoothed\nvar bool          bStretchBorder;  // TRUE=stretched, FALSE=repeated tile\n\n// Window options\nvar const bool    bResizeable;     // TRUE if the user can resize by dragging\nvar const bool    bMarginsFromBorder; // TRUE if child margins are based on borders\n\n// Margins for child windows\nvar float         childLeftMargin;\nvar float         childRightMargin;\nvar float         childTopMargin;\nvar float         childBottomMargin;\n\n// Private\nvar private float leftMargin;\nvar private float rightMargin;\nvar private float topMargin;\nvar private float bottomMargin;\n\nvar private bool  bLeftDrag;\nvar private bool  bRightDrag;\nvar private bool  bUpDrag;\nvar private bool  bDownDrag;\n\nvar private float lastMouseX;\nvar private float lastMouseY;\nvar private float dragX;\nvar private float dragY;\nvar private float dragWidth;\nvar private float dragHeight;\n\n\n// ----------------------------------------------------------------------\n// Intrinsics\n\nnative(1530) function final SetBorders(optional texture bordTL,\n                                       optional texture bordTR,\n                                       optional texture bordBL,\n                                       optional texture bordBR,\n                                       optional texture bordL,\n                                       optional texture bordR,\n                                       optional texture bordT,\n                                       optional texture bordB,\n                                       optional texture center);\nnative(1531) function final SetBorderMargins(optional float newLeft,\n                                             optional float newRight,\n                                             optional float newTop,\n                                             optional float newBottom);\nnative(1532) function final BaseMarginsFromBorder(optional bool bBorder);\nnative(1533) function final EnableResizing(optional bool bResize);\nnative(1534) function final SetMoveCursors(optional texture move,\n                                           optional texture hMove,\n                                           optional texture vMove,\n                                           optional texture tlMove,\n                                           optional texture trMove);\n\n\n// ----------------------------------------------------------------------\n// SetBorderStyle() : Makes the border solid, translucent or masked\n\nfunction SetBorderStyle(EDrawStyle newBorderStyle)\n{\n\tborderStyle = newBorderStyle;\n}\n\n\n// ----------------------------------------------------------------------\n// SmoothBorder() : Draws the border smoothly, or not\n\nfunction SmoothBorder(bool bNewSmoothBorder)\n{\n\tbSmoothBorder = bNewSmoothBorder;\n}\n\n\n// ----------------------------------------------------------------------\n// StretchBorder() : Draws the border sides as stretched images (if TRUE)\n//                   or repeating patterns (if FALSE)\n\nfunction StretchBorder(bool bNewStretchBorder)\n{\n\tbStretchBorder = bNewStretchBorder;\n}\n\ndefaultproperties\n{\n}\n",
            "name": "BorderWindow.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "Window",
                "functions": {
                    "BaseMarginsFromBorder": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "BaseMarginsFromBorder",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "bool",
                                "bBorder"
                            ]
                        ],
                        "return": ""
                    },
                    "EnableResizing": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "EnableResizing",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "bool",
                                "bResize"
                            ]
                        ],
                        "return": ""
                    },
                    "SetBorderStyle": {
                        "body": "{\n\tborderStyle = newBorderStyle;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetBorderStyle",
                        "native": false,
                        "param": [
                            [
                                "EDrawStyle",
                                "newBorderStyle"
                            ]
                        ],
                        "return": ""
                    },
                    "SmoothBorder": {
                        "body": "{\n\tbSmoothBorder = bNewSmoothBorder;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "SmoothBorder",
                        "native": false,
                        "param": [
                            [
                                "bool",
                                "bNewSmoothBorder"
                            ]
                        ],
                        "return": ""
                    },
                    "StretchBorder": {
                        "body": "{\n\tbStretchBorder = bNewStretchBorder;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "StretchBorder",
                        "native": false,
                        "param": [
                            [
                                "bool",
                                "bNewStretchBorder"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 119,
                "replication": "",
                "states": [],
                "variables": [
                    "var const texture borderLeft;",
                    "var const texture borderTopLeft;",
                    "var const texture borderTop;",
                    "var const texture borderTopRight;",
                    "var const texture borderRight;",
                    "var const texture borderBottomRight;",
                    "var const texture borderBottom;",
                    "var const texture borderBottomLeft;",
                    "var const texture center;",
                    "var const texture moveCursor;",
                    "var const texture hMoveCursor;",
                    "var const texture vMoveCursor;",
                    "var const texture tlMoveCursor;",
                    "var const texture trMoveCursor;",
                    "var EDrawStyle    borderStyle;     // Solid, translucent or masked",
                    "var bool          bSmoothBorder;   // TRUE if the borders should be smoothed",
                    "var bool          bStretchBorder;  // TRUE=stretched, FALSE=repeated tile",
                    "var const bool    bResizeable;     // TRUE if the user can resize by dragging",
                    "var const bool    bMarginsFromBorder; // TRUE if child margins are based on borders",
                    "var float         childLeftMargin;",
                    "var float         childRightMargin;",
                    "var float         childTopMargin;",
                    "var float         childBottomMargin;",
                    "var private float leftMargin;",
                    "var private float rightMargin;",
                    "var private float topMargin;",
                    "var private float bottomMargin;",
                    "var private bool  bLeftDrag;",
                    "var private bool  bRightDrag;",
                    "var private bool  bUpDrag;",
                    "var private bool  bDownDrag;",
                    "var private float lastMouseX;",
                    "var private float lastMouseY;",
                    "var private float dragX;",
                    "var private float dragY;",
                    "var private float dragWidth;",
                    "var private float dragHeight;"
                ]
            }
        },
        "ButtonWindow.uc": {
            "body": "//=============================================================================\n// ButtonWindow.\n//=============================================================================\nclass ButtonWindow extends TextWindow\n\tnative\n\tnoexport;\n\n// ----------------------------------------------------------------------\n\nstruct ButtonDisplayInfo\n{\n\tvar texture tx;\n\tvar color   tlColor;\n\tvar color   txColor;\n};\n\n\n// ----------------------------------------------------------------------\n// Variables\n\nvar const bool                bButtonPressed;\nvar const bool                bMousePressed;\nvar const bool                bAutoRepeat;\nvar const bool                bEnableRightMouseClick;\n\nvar const float               activateDelay;\nvar const float               initialDelay;\nvar const float               repeatRate;\n\nvar const texture             curTexture;\nvar const color               curTileColor;\nvar const color               curTextColor;\n\nvar private sound             pressSound;\nvar private sound             clickSound;\n\nvar private int               activateTimer;\nvar private float             repeatTime;\nvar private EInputKey         lastInputKey;\n\nvar private ButtonDisplayInfo info[6];\n\n// ----------------------------------------------------------------------\n// Intrinsics\n\nnative(1590) final function ActivateButton(EInputKey key);\n\nnative(1591) final function SetActivateDelay(optional float newDelay);\n\nnative(1592) final function SetButtonTextures(optional texture normal,\n                                              optional texture pressed,\n                                              optional texture normalFocus,\n                                              optional texture pressedFocus,\n                                              optional texture normalInsensitive,\n                                              optional texture pressedInsensitive);\n\nnative(1593) final function SetButtonColors(optional color normal,\n                                            optional color pressed,\n                                            optional color normalFocus,\n                                            optional color pressedFocus,\n                                            optional color normalInsensitive,\n                                            optional color pressedInsensitive);\n\nnative(1594) final function SetTextColors(optional color normal,\n                                          optional color pressed,\n                                          optional color normalFocus,\n                                          optional color pressedFocus,\n                                          optional color normalInsensitive,\n                                          optional color pressedInsensitive);\n\nnative(1595) final function EnableAutoRepeat(optional bool bEnable,\n                                             optional float initialDelay,\n                                             optional float repeatRate);\n\nnative(1596) final function EnableRightMouseClick(optional bool bEnable);\n\nnative(1597) final function SetButtonSounds(optional sound pressSound,\n                                            optional sound clickSound);\n\nnative(1598) final function PressButton(optional EInputKey key);\n\n\n\n// ----------------------------------------------------------------------\n\nevent bool AcceleratorKeyPressed(string key)\n{\n\tlocal bool retval;\n\n\tretval = Super.AcceleratorKeyPressed(key);\n\n\tif (!retval)\n\t{\n\t\tPressButton();\n\n\t\tretval = true;\n\t}\n\n\treturn retval;\n}\n\n\n// ----------------------------------------------------------------------\n\nevent bool VirtualKeyPressed(EInputKey key, bool bRepeat)\n{\n\tlocal bool retval;\n\n\tretval = Super.VirtualKeyPressed(key, bRepeat);\n\n\tif ((key == IK_Enter) || (key == IK_Space))\n\t{\n\t\tPressButton(key);\n\n\t\tretval = TRUE;\n\t}\n\n\treturn retval;\n}\n\ndefaultproperties\n{\n}\n",
            "name": "ButtonWindow.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "TextWindow",
                "functions": {
                    "AcceleratorKeyPressed": {
                        "body": "{\n\n\tretval = Super.AcceleratorKeyPressed(key);\n\n\tif (!retval)\n\t{\n\t\tPressButton();\n\n\t\tretval = true;\n\t}\n\n\treturn retval;\n}",
                        "locals": [
                            "local bool retval;"
                        ],
                        "modifiers": [],
                        "name": "AcceleratorKeyPressed",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "key"
                            ]
                        ],
                        "return": "bool"
                    },
                    "ActivateButton": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "ActivateButton",
                        "native": true,
                        "param": [
                            [
                                "EInputKey",
                                "key"
                            ]
                        ],
                        "return": ""
                    },
                    "EnableRightMouseClick": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "EnableRightMouseClick",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "bool",
                                "bEnable"
                            ]
                        ],
                        "return": ""
                    },
                    "PressButton": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "PressButton",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "EInputKey",
                                "key"
                            ]
                        ],
                        "return": ""
                    },
                    "SetActivateDelay": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetActivateDelay",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "float",
                                "newDelay"
                            ]
                        ],
                        "return": ""
                    },
                    "VirtualKeyPressed": {
                        "body": "{\n\n\tretval = Super.VirtualKeyPressed(key, bRepeat);\n\n\tif ((key == IK_Enter) || (key == IK_Space))\n\t{\n\t\tPressButton(key);\n\n\t\tretval = TRUE;\n\t}\n\n\treturn retval;\n}",
                        "locals": [
                            "local bool retval;"
                        ],
                        "modifiers": [],
                        "name": "VirtualKeyPressed",
                        "native": false,
                        "param": [
                            [
                                "EInputKey",
                                "key"
                            ],
                            [
                                "bool",
                                "bRepeat"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 124,
                "replication": "",
                "states": [],
                "variables": [
                    "var texture tx;",
                    "var color   tlColor;",
                    "var color   txColor;",
                    "var const bool                bButtonPressed;",
                    "var const bool                bMousePressed;",
                    "var const bool                bAutoRepeat;",
                    "var const bool                bEnableRightMouseClick;",
                    "var const float               activateDelay;",
                    "var const float               initialDelay;",
                    "var const float               repeatRate;",
                    "var const texture             curTexture;",
                    "var const color               curTileColor;",
                    "var const color               curTextColor;",
                    "var private sound             pressSound;",
                    "var private sound             clickSound;",
                    "var private int               activateTimer;",
                    "var private float             repeatTime;",
                    "var private EInputKey         lastInputKey;",
                    "var private ButtonDisplayInfo info[6];"
                ]
            }
        },
        "CheckboxWindow.uc": {
            "body": "//=============================================================================\n// CheckboxWindow.\n//=============================================================================\nclass CheckboxWindow extends ToggleWindow\n\tnative\n\tnoexport;\n\n// ----------------------------------------------------------------------\n// Execs\n\n#exec TEXTURE IMPORT FILE=Textures\\CheckboxOn.pcx  NAME=CheckboxOn\n#exec TEXTURE IMPORT FILE=Textures\\CheckboxOff.pcx NAME=CheckboxOff\n\n\n// ----------------------------------------------------------------------\n// Variables\n\nvar const texture    toggleOff;\nvar const texture    toggleOn;\n\nvar const float      textureWidth;\nvar const float      textureHeight;\n\nvar const float      checkboxSpacing;\nvar const bool       bRightSide;\n\nvar const EDrawStyle checkboxStyle;\nvar const Color      checkboxColor;\n\n\n// ----------------------------------------------------------------------\n// Intrinsics\n\nnative(1840) final function SetCheckboxTextures(optional texture toggleOff,\n                                                optional texture toggleOn,\n                                                optional float   textureWidth,\n                                                optional float   textureHeight);\nnative(1841) final function SetCheckboxSpacing(float newSpacing);\nnative(1842) final function ShowCheckboxOnRightSide(optional bool bRight);\nnative(1843) final function SetCheckboxStyle(EDrawStyle newStyle);\nnative(1844) final function SetCheckboxColor(Color newColor);\n\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// SetCheckboxColorRGB() : RGB version of SetCheckboxColor()\n\nfunction SetCheckboxColorRGB(INT red, INT green, INT blue)\n{\n\tlocal color newColor;\n\tnewColor.r = red;\n\tnewColor.g = green;\n\tnewColor.b = blue;\n\tSetCheckboxColor(newColor);\n}\n\ndefaultproperties\n{\n     toggleOff=Texture'Extension.CheckboxOff'\n     toggleOn=Texture'Extension.CheckboxOn'\n}\n",
            "name": "CheckboxWindow.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "toggleOff=Texture'Extension.CheckboxOff'",
                    "toggleOn=Texture'Extension.CheckboxOn'"
                ],
                "exec": [
                    "#exec TEXTURE IMPORT FILE=Textures\\CheckboxOn.pcx  NAME=CheckboxOn",
                    "#exec TEXTURE IMPORT FILE=Textures\\CheckboxOff.pcx NAME=CheckboxOff"
                ],
                "extends": "ToggleWindow",
                "functions": {
                    "SetCheckboxColor": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetCheckboxColor",
                        "native": true,
                        "param": [
                            [
                                "Color",
                                "newColor"
                            ]
                        ],
                        "return": ""
                    },
                    "SetCheckboxColorRGB": {
                        "body": "{\n\tnewColor.r = red;\n\tnewColor.g = green;\n\tnewColor.b = blue;\n\tSetCheckboxColor(newColor);\n}",
                        "locals": [
                            "local color newColor;"
                        ],
                        "modifiers": [],
                        "name": "SetCheckboxColorRGB",
                        "native": false,
                        "param": [
                            [
                                "INT",
                                "red"
                            ],
                            [
                                "INT",
                                "green"
                            ],
                            [
                                "INT",
                                "blue"
                            ]
                        ],
                        "return": ""
                    },
                    "SetCheckboxSpacing": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetCheckboxSpacing",
                        "native": true,
                        "param": [
                            [
                                "float",
                                "newSpacing"
                            ]
                        ],
                        "return": ""
                    },
                    "SetCheckboxStyle": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetCheckboxStyle",
                        "native": true,
                        "param": [
                            [
                                "EDrawStyle",
                                "newStyle"
                            ]
                        ],
                        "return": ""
                    },
                    "ShowCheckboxOnRightSide": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "ShowCheckboxOnRightSide",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "bool",
                                "bRight"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 62,
                "replication": "",
                "states": [],
                "variables": [
                    "var const texture    toggleOff;",
                    "var const texture    toggleOn;",
                    "var const float      textureWidth;",
                    "var const float      textureHeight;",
                    "var const float      checkboxSpacing;",
                    "var const bool       bRightSide;",
                    "var const EDrawStyle checkboxStyle;",
                    "var const Color      checkboxColor;"
                ]
            }
        },
        "ClipWindow.uc": {
            "body": "//=============================================================================\n// ClipWindow.\n//=============================================================================\nclass ClipWindow extends TabGroupWindow\n\tnative\n\tnoexport;\n\n// ----------------------------------------------------------------------\n// Variables\n\nvar const int childH;\nvar const int childV;\n\nvar const int prefHUnits;\nvar const int prefVUnits;\n\nvar const bool bForceChildWidth;\nvar const bool bForceChildHeight;\n\nvar const bool bSnapToUnits;\nvar const bool bFillWindow;\n\nvar private int areaHSize;\nvar private int areaVSize;\nvar private int childHSize;\nvar private int childVSize;\n\nvar private float hMult;\nvar private float vMult;\n\n\n// ----------------------------------------------------------------------\n// Intrinsics\n\nnative(1680) final function SetChildPosition(int newX, int newY);\nnative(1681) final function GetChildPosition(out int pNewX, out int pNewY);\n\nnative(1682) final function SetUnitSize(int hUnits, int vUnits);\nnative(1683) final function SetUnitWidth(int hUnits);\nnative(1684) final function SetUnitHeight(int vUnits);\nnative(1685) final function ResetUnitSize();\nnative(1686) final function ResetUnitWidth();\nnative(1687) final function ResetUnitHeight();\nnative(1688) final function GetUnitSize(out int pAreaHSize,  out int pAreaVSize,\n                                        out int pChildHSize, out int ChildVSize);\n\nnative(1689) final function ForceChildSize(optional bool bNewForceChildWidth,\n                                           optional bool bNewForceChildHeight);\n\nnative(1690) final function EnableSnapToUnits(optional bool bNewSnapToUnits);\n\nnative(1691) final function window GetChild();\n\ndefaultproperties\n{\n}\n",
            "name": "ClipWindow.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "TabGroupWindow",
                "functions": {
                    "EnableSnapToUnits": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "EnableSnapToUnits",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "bool",
                                "bNewSnapToUnits"
                            ]
                        ],
                        "return": ""
                    },
                    "GetChild": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetChild",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "GetChildPosition": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetChildPosition",
                        "native": true,
                        "param": [
                            [
                                "out",
                                "int",
                                "pNewX"
                            ],
                            [
                                "out",
                                "int",
                                "pNewY"
                            ]
                        ],
                        "return": ""
                    },
                    "ResetUnitHeight": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "ResetUnitHeight",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "ResetUnitSize": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "ResetUnitSize",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "ResetUnitWidth": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "ResetUnitWidth",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "SetChildPosition": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetChildPosition",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "newX"
                            ],
                            [
                                "int",
                                "newY"
                            ]
                        ],
                        "return": ""
                    },
                    "SetUnitHeight": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetUnitHeight",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "vUnits"
                            ]
                        ],
                        "return": ""
                    },
                    "SetUnitSize": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetUnitSize",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "hUnits"
                            ],
                            [
                                "int",
                                "vUnits"
                            ]
                        ],
                        "return": ""
                    },
                    "SetUnitWidth": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetUnitWidth",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "hUnits"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 57,
                "replication": "",
                "states": [],
                "variables": [
                    "var const int childH;",
                    "var const int childV;",
                    "var const int prefHUnits;",
                    "var const int prefVUnits;",
                    "var const bool bForceChildWidth;",
                    "var const bool bForceChildHeight;",
                    "var const bool bSnapToUnits;",
                    "var const bool bFillWindow;",
                    "var private int areaHSize;",
                    "var private int areaVSize;",
                    "var private int childHSize;",
                    "var private int childVSize;",
                    "var private float hMult;",
                    "var private float vMult;"
                ]
            }
        },
        "ComputerWindow.uc": {
            "body": "//=============================================================================\n// ComputerWindow\n//\n// Interface that allows computer-like displays (computer screens, terminals,\n// ATMs, etc.)\n//=============================================================================\n\nclass ComputerWindow extends Window\n\tnative\n\tnoexport;\n\nvar Float\teventTimeInterval;\t\t\t// Timing between each event displayed\nvar Float\ttimeNextEvent;\t\t\t\t// Time of next event\nvar Float\ttimeLastEvent;\t\t\t\t// Time of last event added\nvar Float\ttimeCurrent;\t\t\t\t// Current event time\nvar Float\tfadeSpeed;\t\t\t\t\t// Fade Speed\nvar Float\tthrottle;\t\t\t\t\t// Throttle (speed modifier)\nvar Float   fadeOutTimer;\t\t\t\t// Used to fade the entire screen out\nvar Float   fadeOutStart;\t\t\t\t// Starting fade out value\nvar int\t\ttextCols;\t\t\t\t\t// Number of text cols (for example, 80)\nvar int\t\ttextRows;\t\t\t\t\t// Number of text rows (for example, 25)\nvar Font\ttextFont;\t\t\t\t\t// Font used to display text\nvar int     fontWidth;\t\t\t\nvar int\t\tfontHeight;\nvar Color\tfontColor;\t\t\t\t\t// Current Font Color, used when adding text events\nvar Sound\ttextSound;\t\t\t\t\t// Sound to play for each character\nvar Sound   typingSound;\t\t\t\t// Sound when user types\nvar Float\tcomputerSoundVolume;\t\t// Sound Volume\nvar Bool\tbWordWrap;\t\t\t\t\t// True if Word Wrap is enabled\nvar Bool\tbLastLineWrapped;\t\t\t// True if the last line was wrapped\nvar Bool\tbInvokeComputerStart;\t\t// True if we need to invoke ComputerStart\nvar Bool\tbComputerStartInvoked;\t\t// True if we've invoked ComputerStart event\nvar Bool\tbFirstTick;\t\t\t\t\t// True until we've had our first Tick event\n\nvar Texture backgroundTextures[6];\t\t// Background textures\n\nvar Texture cursorTexture;\t\t\t\t// Cursor texture, drawn ahead of text\nvar Color\tcursorColor;\t\t\t\t// Cursor Color\nvar int     cursorWidth;\t\t\t\t// Cursor Width\nvar int     cursorHeight;\t\t\t\t// Cursor Height\nvar Float\tcursorBlinkSpeed;\t\t\t// Cursor Blink Speed\nvar Bool    bCursorVisible;\t\t\t\t// True if Cursor Visible\nvar Bool\tbShowCursor;\t\t\t\t// Set to False to hide cursor\nvar Float   cursorNextEvent;\t\t\t// Countdown until 0 for next cursor blink change\nvar Color\tcolGraphicTile;\t\t\t\t// Color used to draw graphics\n\nvar Window  textWindow;\t\t\t\t\t// Window that text is displayed in\nvar PlayerPawnExt player;\t\t\t\t// Pointer to player pawn\n\nvar const native DynamicArray displayBuffer;\t\t\t\t// Pointer to display info\nvar const native DynamicArray queuedBuffer;\t\t\t\t// Queued characters\n\nvar int\t\tqueuedBufferStart;\t\t\t// Start of QueuedBuffer we're interested in\nvar int\t\ttextX;\t\t\t\t\t\t// Current text X position\nvar int\t\ttextY;\t\t\t\t\t\t// Current text Y position\n\n// Input related stuff\nvar\tString\t\tinputKey;\t\t\t\t// Input Key\nvar String\t\tinputMask;\t\t\t\t// Input Mask Character\nvar EditWindow  inputWindow;\t\t\t// Input Window\nvar Bool\t\tbWaitingForKey;\t\t\t// True if we're waiting for a single key\nvar Bool\t\tbEchoKey;\t\t\t\t// True if echo keypress\nvar Bool\t\tbPauseProcessing;\t\t// True if we're pausing processing\nvar Bool\t\tbIgnoreTick;\t\t\t// True if ignoring TICK event\nvar Bool\t\tbGamePaused;\t\t\t// True if the Game is paused\nvar Bool\t\tbIgnoreGamePaused;\t\t// True if we're going to ignore the game being paused\n\n// native functions\nnative(1970) final function SetBackgroundTextures(\n\tTexture backTexture1, Texture backTexture2, Texture backTexture3, \n\tTexture backTexture4, Texture backTexture5, Texture backTexture6);\nnative(1971) final function SetTextSize( int newCols, int newRows);\nnative(1972) final function SetTextWindowPosition( int newX, int newY );\nnative(1973) final function SetTextFont( Font newFont, int newFontWidth, int newFontHeight,\tColor newFontColor);\nnative(1974) final function SetFontColor( Color newFontColor );\nnative(1975) final function SetTextTiming( Float newTiming );\nnative(1976) final function SetFadeSpeed( Float fadeSpeed );\nnative(1977) final function SetCursorTexture( \n\tTexture newCursorTexture, \n\toptional int newCursorWidth, \n\toptional int newCursorHeight);\nnative(1978) final function SetCursorColor( Color newCursorColor );\nnative(1979) final function SetCursorBlinkSpeed( Float newBlinkSpeed );\nnative(1980) final function ShowTextCursor( optional Bool bShow );\nnative(1981) final function SetTextSound( Sound newTextSound );\nnative(1982) final function SetTypingSound( Sound newTypingSound );\nnative(1983) final function SetComputerSoundVolume( Float newSoundVolume );\nnative(1984) final function SetTypingSoundVolume( Float newSoundVolume );\nnative(1985) final function ClearScreen();\nnative(1986) final function ClearLine( int rowToClear );\nnative(1987) final function Print( String printText, optional bool bNewLine );\nnative(1988) final function PrintLn();\n\nnative(1989) final function GetInput( \n\tint maxLength, \n\tString inputKey, \n\toptional String defaultInputString,\n\toptional String inputMask );\n\nnative(1990) final function GetChar(String inputKey, optional bool bEcho);\n\nnative(1991) final function PrintGraphic( \n\tTexture graphic, \n\tint width, \n\tint height, \n\toptional int posX, \n\toptional int posY, \n\toptional Bool bStatic, \n\toptional Bool bPixelPos);\n\nnative(1992) final function PlaySoundLater( Sound newSound );\nnative(1993) final function SetTextPosition( int posX, int posY );\nnative(1994) final function Bool IsBufferFlushed();\nnative(1995) final function Pause( optional Float pauseLength );\nnative(1996) final function Resume();\nnative(1997) final function Bool IsPaused();\nnative(1998) final function SetThrottle(float throttleModifier);\nnative(1999) final function float GetThrottle();\nnative(2000) final function ResetThrottle();\nnative(2001) final function EnableWordWrap( optional Bool bNewWordWrap );\nnative(2002) final function FadeOutText( optional Float fadeDuration );\n\n// ----------------------------------------------------------------------\n// ComputerStart()\n// ----------------------------------------------------------------------\n\nevent Bool ComputerStart()\n{\n\treturn False;\n}\n\n// ----------------------------------------------------------------------\n// ComputerInputFinished()\n// ----------------------------------------------------------------------\n\nevent Bool ComputerInputFinished( String inputKey, String inputValue )\n{\n\treturn False;\n}\n\n// ----------------------------------------------------------------------\n// ComputerFadeOutCompleted()\n// ----------------------------------------------------------------------\n\nevent ComputerFadeOutCompleted()\n{\n}\n\n// ----------------------------------------------------------------------\n// SetGraphicTileColor()\n// ----------------------------------------------------------------------\n\nfunction SetGraphicTileColor(Color newColor)\n{\n\tcolGraphicTile = newColor;\n}\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n\ndefaultproperties\n{\n     throttle=1.000000\n     textCols=80\n     textRows=24\n     fontWidth=8\n     fontHeight=20\n     FontColor=(R=255,G=255,B=255)\n     computerSoundVolume=0.500000\n     bWordWrap=True\n     bFirstTick=True\n     cursorTexture=Texture'Extension.Solid'\n     cursorColor=(R=255,G=255,B=255)\n     cursorWidth=8\n     cursorHeight=2\n     cursorBlinkSpeed=0.500000\n     bShowCursor=True\n     colGraphicTile=(R=255,G=255,B=255)\n}\n",
            "name": "ComputerWindow.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "throttle=1.000000",
                    "textCols=80",
                    "textRows=24",
                    "fontWidth=8",
                    "fontHeight=20",
                    "FontColor=(R=255,G=255,B=255)",
                    "computerSoundVolume=0.500000",
                    "bWordWrap=True",
                    "bFirstTick=True",
                    "cursorTexture=Texture'Extension.Solid'",
                    "cursorColor=(R=255,G=255,B=255)",
                    "cursorWidth=8",
                    "cursorHeight=2",
                    "cursorBlinkSpeed=0.500000",
                    "bShowCursor=True",
                    "colGraphicTile=(R=255,G=255,B=255)"
                ],
                "exec": [],
                "extends": "Window",
                "functions": {
                    "ClearLine": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "ClearLine",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "rowToClear"
                            ]
                        ],
                        "return": ""
                    },
                    "ClearScreen": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "ClearScreen",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "ComputerFadeOutCompleted": {
                        "body": "{\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "ComputerFadeOutCompleted",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ComputerInputFinished": {
                        "body": "{\n\treturn False;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "ComputerInputFinished",
                        "native": false,
                        "param": [
                            [
                                "String",
                                "inputKey"
                            ],
                            [
                                "String",
                                "inputValue"
                            ]
                        ],
                        "return": "Bool"
                    },
                    "ComputerStart": {
                        "body": "{\n\treturn False;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "ComputerStart",
                        "native": false,
                        "param": [],
                        "return": "Bool"
                    },
                    "EnableWordWrap": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "EnableWordWrap",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "Bool",
                                "bNewWordWrap"
                            ]
                        ],
                        "return": ""
                    },
                    "FadeOutText": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "FadeOutText",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "Float",
                                "fadeDuration"
                            ]
                        ],
                        "return": ""
                    },
                    "GetChar": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetChar",
                        "native": true,
                        "param": [
                            [
                                "String",
                                "inputKey"
                            ],
                            [
                                "optional",
                                "bool",
                                "bEcho"
                            ]
                        ],
                        "return": ""
                    },
                    "GetThrottle": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetThrottle",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "IsBufferFlushed": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "IsBufferFlushed",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "IsPaused": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "IsPaused",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "Pause": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "Pause",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "Float",
                                "pauseLength"
                            ]
                        ],
                        "return": ""
                    },
                    "PlaySoundLater": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "PlaySoundLater",
                        "native": true,
                        "param": [
                            [
                                "Sound",
                                "newSound"
                            ]
                        ],
                        "return": ""
                    },
                    "Print": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "Print",
                        "native": true,
                        "param": [
                            [
                                "String",
                                "printText"
                            ],
                            [
                                "optional",
                                "bool",
                                "bNewLine"
                            ]
                        ],
                        "return": ""
                    },
                    "PrintLn": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "PrintLn",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "ResetThrottle": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "ResetThrottle",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "Resume": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "Resume",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "SetComputerSoundVolume": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetComputerSoundVolume",
                        "native": true,
                        "param": [
                            [
                                "Float",
                                "newSoundVolume"
                            ]
                        ],
                        "return": ""
                    },
                    "SetCursorBlinkSpeed": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetCursorBlinkSpeed",
                        "native": true,
                        "param": [
                            [
                                "Float",
                                "newBlinkSpeed"
                            ]
                        ],
                        "return": ""
                    },
                    "SetCursorColor": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetCursorColor",
                        "native": true,
                        "param": [
                            [
                                "Color",
                                "newCursorColor"
                            ]
                        ],
                        "return": ""
                    },
                    "SetFadeSpeed": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetFadeSpeed",
                        "native": true,
                        "param": [
                            [
                                "Float",
                                "fadeSpeed"
                            ]
                        ],
                        "return": ""
                    },
                    "SetFontColor": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetFontColor",
                        "native": true,
                        "param": [
                            [
                                "Color",
                                "newFontColor"
                            ]
                        ],
                        "return": ""
                    },
                    "SetGraphicTileColor": {
                        "body": "{\n\tcolGraphicTile = newColor;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetGraphicTileColor",
                        "native": false,
                        "param": [
                            [
                                "Color",
                                "newColor"
                            ]
                        ],
                        "return": ""
                    },
                    "SetTextFont": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetTextFont",
                        "native": true,
                        "param": [
                            [
                                "Font",
                                "newFont"
                            ],
                            [
                                "int",
                                "newFontWidth"
                            ],
                            [
                                "int",
                                "newFontHeight"
                            ],
                            [
                                "Color",
                                "newFontColor"
                            ]
                        ],
                        "return": ""
                    },
                    "SetTextPosition": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetTextPosition",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "posX"
                            ],
                            [
                                "int",
                                "posY"
                            ]
                        ],
                        "return": ""
                    },
                    "SetTextSize": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetTextSize",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "newCols"
                            ],
                            [
                                "int",
                                "newRows"
                            ]
                        ],
                        "return": ""
                    },
                    "SetTextSound": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetTextSound",
                        "native": true,
                        "param": [
                            [
                                "Sound",
                                "newTextSound"
                            ]
                        ],
                        "return": ""
                    },
                    "SetTextTiming": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetTextTiming",
                        "native": true,
                        "param": [
                            [
                                "Float",
                                "newTiming"
                            ]
                        ],
                        "return": ""
                    },
                    "SetTextWindowPosition": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetTextWindowPosition",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "newX"
                            ],
                            [
                                "int",
                                "newY"
                            ]
                        ],
                        "return": ""
                    },
                    "SetThrottle": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetThrottle",
                        "native": true,
                        "param": [
                            [
                                "float",
                                "throttleModifier"
                            ]
                        ],
                        "return": ""
                    },
                    "SetTypingSound": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetTypingSound",
                        "native": true,
                        "param": [
                            [
                                "Sound",
                                "newTypingSound"
                            ]
                        ],
                        "return": ""
                    },
                    "SetTypingSoundVolume": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetTypingSoundVolume",
                        "native": true,
                        "param": [
                            [
                                "Float",
                                "newSoundVolume"
                            ]
                        ],
                        "return": ""
                    },
                    "ShowTextCursor": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "ShowTextCursor",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "Bool",
                                "bShow"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 180,
                "replication": "",
                "states": [],
                "variables": [
                    "var Float\teventTimeInterval;\t\t\t// Timing between each event displayed",
                    "var Float\ttimeNextEvent;\t\t\t\t// Time of next event",
                    "var Float\ttimeLastEvent;\t\t\t\t// Time of last event added",
                    "var Float\ttimeCurrent;\t\t\t\t// Current event time",
                    "var Float\tfadeSpeed;\t\t\t\t\t// Fade Speed",
                    "var Float\tthrottle;\t\t\t\t\t// Throttle (speed modifier)",
                    "var Float   fadeOutTimer;\t\t\t\t// Used to fade the entire screen out",
                    "var Float   fadeOutStart;\t\t\t\t// Starting fade out value",
                    "var int\t\ttextCols;\t\t\t\t\t// Number of text cols (for example, 80)",
                    "var int\t\ttextRows;\t\t\t\t\t// Number of text rows (for example, 25)",
                    "var Font\ttextFont;\t\t\t\t\t// Font used to display text",
                    "var int     fontWidth;",
                    "var int\t\tfontHeight;",
                    "var Color\tfontColor;\t\t\t\t\t// Current Font Color, used when adding text events",
                    "var Sound\ttextSound;\t\t\t\t\t// Sound to play for each character",
                    "var Sound   typingSound;\t\t\t\t// Sound when user types",
                    "var Float\tcomputerSoundVolume;\t\t// Sound Volume",
                    "var Bool\tbWordWrap;\t\t\t\t\t// True if Word Wrap is enabled",
                    "var Bool\tbLastLineWrapped;\t\t\t// True if the last line was wrapped",
                    "var Bool\tbInvokeComputerStart;\t\t// True if we need to invoke ComputerStart",
                    "var Bool\tbComputerStartInvoked;\t\t// True if we've invoked ComputerStart event",
                    "var Bool\tbFirstTick;\t\t\t\t\t// True until we've had our first Tick event",
                    "var Texture backgroundTextures[6];\t\t// Background textures",
                    "var Texture cursorTexture;\t\t\t\t// Cursor texture, drawn ahead of text",
                    "var Color\tcursorColor;\t\t\t\t// Cursor Color",
                    "var int     cursorWidth;\t\t\t\t// Cursor Width",
                    "var int     cursorHeight;\t\t\t\t// Cursor Height",
                    "var Float\tcursorBlinkSpeed;\t\t\t// Cursor Blink Speed",
                    "var Bool    bCursorVisible;\t\t\t\t// True if Cursor Visible",
                    "var Bool\tbShowCursor;\t\t\t\t// Set to False to hide cursor",
                    "var Float   cursorNextEvent;\t\t\t// Countdown until 0 for next cursor blink change",
                    "var Color\tcolGraphicTile;\t\t\t\t// Color used to draw graphics",
                    "var Window  textWindow;\t\t\t\t\t// Window that text is displayed in",
                    "var PlayerPawnExt player;\t\t\t\t// Pointer to player pawn",
                    "var const native DynamicArray displayBuffer;\t\t\t\t// Pointer to display info",
                    "var const native DynamicArray queuedBuffer;\t\t\t\t// Queued characters",
                    "var int\t\tqueuedBufferStart;\t\t\t// Start of QueuedBuffer we're interested in",
                    "var int\t\ttextX;\t\t\t\t\t\t// Current text X position",
                    "var int\t\ttextY;\t\t\t\t\t\t// Current text Y position",
                    "var String\t\tinputMask;\t\t\t\t// Input Mask Character",
                    "var EditWindow  inputWindow;\t\t\t// Input Window",
                    "var Bool\t\tbWaitingForKey;\t\t\t// True if we're waiting for a single key",
                    "var Bool\t\tbEchoKey;\t\t\t\t// True if echo keypress",
                    "var Bool\t\tbPauseProcessing;\t\t// True if we're pausing processing",
                    "var Bool\t\tbIgnoreTick;\t\t\t// True if ignoring TICK event",
                    "var Bool\t\tbGamePaused;\t\t\t// True if the Game is paused",
                    "var Bool\t\tbIgnoreGamePaused;\t\t// True if we're going to ignore the game being paused"
                ]
            }
        },
        "EditWindow.uc": {
            "body": "//=============================================================================\n// EditWindow.\n//=============================================================================\nclass EditWindow extends LargeTextWindow\n\tnative\n\tnoexport;\n\n\n// ----------------------------------------------------------------------\n// Variables\n\nvar const bool bEditable;\nvar const bool bSingleLine;\nvar const bool bUppercaseOnly;\n\nvar const int                 insertPos;\nvar const int                 insertHookPos;\nvar const EInsertionPointType insertType;\n\nvar const int  selectStart;\nvar const int  selectEnd;\n\nvar const int  maxSize;\n\nvar const texture insertTexture;\nvar const color   insertColor;\nvar const texture selectTexture;\nvar const color   selectColor;\nvar const color   inverseColor;\n\nvar const texture editCursor;\nvar const texture editCursorShadow;\nvar const color   editCursorColor;\n\nvar const sound   typeSound;\nvar const sound   deleteSound;\nvar const sound   enterSound;\nvar const sound   moveSound;\n\nvar private DynamicArray bufferList;\nvar private int          currentUndo;\nvar private int          maxUndos;\nvar private int          unchangedUndo;\n\nvar private float dragDelay;\nvar private float blinkDelay;\nvar private float blinkStart;\nvar private float blinkPeriod;\nvar private bool  bCursorShowing;\n\nvar private bool  bDragging;\nvar private bool  bSelectWords;\n\nvar private float insertX;\nvar private float insertY;\nvar private float insertWidth;\nvar private float insertHeight;\nvar private float insertPrefWidth;\nvar private float insertPrefHeight;\nvar private float showAreaX;\nvar private float showAreaY;\nvar private float showAreaWidth;\nvar private float showAreaHeight;\n\nvar private float insertPreferredCol;\n\nvar private float lastConfigWidth;\nvar private float lastConfigHeight;\n\nvar private int   selectStartRow;\nvar private int   selectEndRow;\nvar private float selectStartX;\nvar private float selectEndX;\n\n\n// ----------------------------------------------------------------------\n// Intrinsics\n\nnative(1880) final function MoveInsertionPoint(EMoveInsert moveInsert, optional bool bDrag);\nnative(1881) final function SetInsertionPoint(int newPos, optional bool bDrag);\nnative(1882) final function int GetInsertionPoint();\nnative(1883) final function SetSelectedArea(int startPos, int count);\nnative(1884) final function GetSelectedArea(out int startPos, out int count);\n\nnative(1885) final function EnableEditing(optional bool bEdit);\nnative(1886) final function bool IsEditingEnabled();\n\nnative(1887) final function EnableSingleLineEditing(optional bool bSingle);\nnative(1888) final function bool IsSingleLineEditingEnabled();\n\nnative(1889) final function EnableUppercaseOnly(optional bool bUppercase);\n\nnative(1890) final function ClearTextChangedFlag();\nnative(1891) final function SetTextChangedFlag(optional bool bSet);\nnative(1892) final function bool HasTextChanged();\n\nnative(1895) final function SetMaxSize(int newMaxSize);\nnative(1896) final function SetMaxUndos(int newMaxUndos);\n\nnative(1900) final function bool InsertText(optional coerce string insertText,\n                                            optional bool bUndo, optional bool bSelect);\nnative(1901) final function DeleteChar(optional bool bBefore, optional bool bUndo);\n\nnative(1902) final function SetInsertionPointBlinkRate(optional float blinkStart,\n                                                       optional float blinkPeriod);\n\nnative(1905) final function SetInsertionPointTexture(optional texture newTexture,\n                                                     optional color newColor);\nnative(1906) final function SetInsertionPointType(EInsertionPointType newType,\n                                                  optional float prefWidth,\n                                                  optional float prefHeight);\nnative(1907) final function SetSelectedAreaTexture(optional texture newTexture,\n                                                   optional color newColor);\nnative(1908) final function SetSelectedAreaTextColor(optional color newColor);\n\nnative(1909) final function SetEditCursor(optional texture newCursor, \n                                          optional texture newCursorShadow, \n\t\t\t\t\t\t\t\t\t\t  optional color newColor);\n\nnative(1910) final function Undo();\nnative(1911) final function Redo();\nnative(1912) final function ClearUndo();\n\nnative(1915) final function Copy();\nnative(1916) final function Cut();\nnative(1917) final function Paste();\n\nnative(1920) final function SetEditSounds(optional sound typeSound,\n                                          optional sound deleteSound,\n                                          optional sound enterSound,\n                                          optional sound moveSound);\nnative(1921) final function PlayEditSound(sound playSound,\n                                          optional float volume, optional float pitch);\n\n\n// ----------------------------------------------------------------------\n// VirtualKeyPressed() : Handles virtual keypresses\n\nevent bool VirtualKeyPressed(EInputKey key, bool bRepeat)\n{\n\tlocal bool retval;\n\tlocal bool bShift;\n\tlocal bool bCtrl;\n\tlocal bool bDrag;\n\tlocal bool bWord;\n\n\tretval = Super.VirtualKeyPressed(key, bRepeat);\n\n\tif (!bEditable)\n\t\treturn (retval);\n\n\tbShift = IsKeyDown(IK_Shift);\n\tbCtrl  = IsKeyDown(IK_Ctrl);\n\tbDrag  = bShift;\n\tbWord  = bCtrl;\n\n\t// Movement\n\tif (key == IK_Left)\n\t{\n\t\tif (bWord)\n\t\t\tMoveInsertionPoint(MOVEINSERT_WordLeft, bDrag);\n\t\telse\n\t\t\tMoveInsertionPoint(MOVEINSERT_Left, bDrag);\n\t\tPlayEditSound(moveSound);\n\t\tretval = true;\n\t}\n\telse if (key == IK_Right)\n\t{\n\t\tif (bWord)\n\t\t\tMoveInsertionPoint(MOVEINSERT_WordRight, bDrag);\n\t\telse\n\t\t\tMoveInsertionPoint(MOVEINSERT_Right, bDrag);\n\t\tPlayEditSound(moveSound);\n\t\tretval = true;\n\t}\n\telse if (key == IK_Up)\n\t{\n\t\tMoveInsertionPoint(MOVEINSERT_Up, bDrag);\n\t\tPlayEditSound(moveSound);\n\t\tretval = true;\n\t}\n\telse if (key == IK_Down)\n\t{\n\t\tMoveInsertionPoint(MOVEINSERT_Down, bDrag);\n\t\tPlayEditSound(moveSound);\n\t\tretval = true;\n\t}\n\telse if (key == IK_PageUp)\n\t{\n\t\tMoveInsertionPoint(MOVEINSERT_PageUp, bDrag);\n\t\tPlayEditSound(moveSound);\n\t\tretval = true;\n\t}\n\telse if (key == IK_PageDown)\n\t{\n\t\tMoveInsertionPoint(MOVEINSERT_PageDown, bDrag);\n\t\tPlayEditSound(moveSound);\n\t\tretval = true;\n\t}\n\telse if (key == IK_Home)\n\t{\n\t\tif (bWord)\n\t\t\tMoveInsertionPoint(MOVEINSERT_Home, bDrag);\n\t\telse\n\t\t\tMoveInsertionPoint(MOVEINSERT_StartOfLine, bDrag);\n\t\tPlayEditSound(moveSound);\n\t\tretval = true;\n\t}\n\telse if (key == IK_End)\n\t{\n\t\tif (bWord)\n\t\t\tMoveInsertionPoint(MOVEINSERT_End, bDrag);\n\t\telse\n\t\t\tMoveInsertionPoint(MOVEINSERT_EndOfLine, bDrag);\n\t\tPlayEditSound(moveSound);\n\t\tretval = true;\n\t}\n\n\t// Editing\n\telse if (key == IK_Backspace)\n\t{\n\t\tPlayEditSound(deleteSound);\n\t\tDeleteChar(true, true);\n\t\tretval = true;\n\t}\n\telse if (key == IK_Delete)\n\t{\n\t\tPlayEditSound(deleteSound);\n\t\tDeleteChar(false, true);\n\t\tretval = true;\n\t}\n\telse if (key == IK_Enter)\n\t{\n\t\tInsertText(\"|n\", true);\n\t\tretval = true;\n\t}\n\telse if (key == IK_C)\n\t{\n\t\tPlayEditSound(moveSound);\n\t\tif (bCtrl)\n\t\t{\n\t\t\tCopy();\n\t\t\tretval = true;\n\t\t}\n\t}\n\telse if (key == IK_X)\n\t{\n\t\tPlayEditSound(moveSound);\n\t\tif (bCtrl)\n\t\t{\n\t\t\tCut();\n\t\t\tretval = true;\n\t\t}\n\t}\n\telse if (key == IK_V)\n\t{\n\t\tPlayEditSound(moveSound);\n\t\tif (bCtrl)\n\t\t{\n\t\t\tPaste();\n\t\t\tretval = true;\n\t\t}\n\t}\n\telse if (key == IK_Z)\n\t{\n\t\tPlayEditSound(moveSound);\n\t\tif (bCtrl)\n\t\t{\n\t\t\tUndo();\n\t\t\tretval = true;\n\t\t}\n\t}\n\telse if (key == IK_Y)\n\t{\n\t\tPlayEditSound(moveSound);\n\t\tif (bCtrl)\n\t\t{\n\t\t\tRedo();\n\t\t\tretval = true;\n\t\t}\n\t}\n\n\treturn (retval);\n\n}\n\n\n// ----------------------------------------------------------------------\n// SetInsertionPointTextureRGB() : Sets the texture and color for the\n//                                 insertion point cursor\n\nfunction SetInsertionPointTextureRGB(texture newTexture, byte red, byte green, byte blue)\n{\n\tlocal color newColor;\n\n\tnewColor.R = red;\n\tnewColor.G = green;\n\tnewColor.B = blue;\n\n\tSetInsertionPointTexture(newTexture, newColor);\n}\n\n\n// ----------------------------------------------------------------------\n// SetSelectedAreaTextureRGB() : Sets the texture and color for the\n//                               selected area\n\nfunction SetSelectedAreaTextureRGB(texture newTexture, byte red, byte green, byte blue)\n{\n\tlocal color newColor;\n\n\tnewColor.R = red;\n\tnewColor.G = green;\n\tnewColor.B = blue;\n\n\tSetSelectedAreaTexture(newTexture, newColor);\n}\n\n\n// ----------------------------------------------------------------------\n// SetSelectedAreaTextColorRGB() : Sets the color of selected text\n\nfunction SetSelectedAreaTextColorRGB(byte red, byte green, byte blue)\n{\n\tlocal color newColor;\n\n\tnewColor.R = red;\n\tnewColor.G = green;\n\tnewColor.B = blue;\n\n\tSetSelectedAreaTextColor(newColor);\n}\n\n\n/* FOR PROTOTYPE ONLY\nfunction bool FilterChar(out string chStr)\n{\n\treturn true;\n}\n*/\n\ndefaultproperties\n{\n     insertTexture=Texture'Extension.Solid'\n     selectTexture=Texture'Extension.Solid'\n}\n",
            "name": "EditWindow.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "insertTexture=Texture'Extension.Solid'",
                    "selectTexture=Texture'Extension.Solid'"
                ],
                "exec": [],
                "extends": "LargeTextWindow",
                "functions": {
                    "ClearTextChangedFlag": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "ClearTextChangedFlag",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "ClearUndo": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "ClearUndo",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "Copy": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "Copy",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "Cut": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "Cut",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "DeleteChar": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "DeleteChar",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "bool",
                                "bBefore"
                            ],
                            [
                                "optional",
                                "bool",
                                "bUndo"
                            ]
                        ],
                        "return": ""
                    },
                    "EnableEditing": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "EnableEditing",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "bool",
                                "bEdit"
                            ]
                        ],
                        "return": ""
                    },
                    "EnableSingleLineEditing": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "EnableSingleLineEditing",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "bool",
                                "bSingle"
                            ]
                        ],
                        "return": ""
                    },
                    "EnableUppercaseOnly": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "EnableUppercaseOnly",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "bool",
                                "bUppercase"
                            ]
                        ],
                        "return": ""
                    },
                    "FilterChar": {
                        "body": "{\n\treturn true;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "FilterChar",
                        "native": false,
                        "param": [
                            [
                                "out",
                                "string",
                                "chStr"
                            ]
                        ],
                        "return": "bool"
                    },
                    "GetInsertionPoint": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetInsertionPoint",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "GetSelectedArea": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetSelectedArea",
                        "native": true,
                        "param": [
                            [
                                "out",
                                "int",
                                "startPos"
                            ],
                            [
                                "out",
                                "int",
                                "count"
                            ]
                        ],
                        "return": ""
                    },
                    "HasTextChanged": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "HasTextChanged",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "IsEditingEnabled": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "IsEditingEnabled",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "IsSingleLineEditingEnabled": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "IsSingleLineEditingEnabled",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "MoveInsertionPoint": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "MoveInsertionPoint",
                        "native": true,
                        "param": [
                            [
                                "EMoveInsert",
                                "moveInsert"
                            ],
                            [
                                "optional",
                                "bool",
                                "bDrag"
                            ]
                        ],
                        "return": ""
                    },
                    "Paste": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "Paste",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "Redo": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "Redo",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "SetInsertionPoint": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetInsertionPoint",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "newPos"
                            ],
                            [
                                "optional",
                                "bool",
                                "bDrag"
                            ]
                        ],
                        "return": ""
                    },
                    "SetInsertionPointTextureRGB": {
                        "body": "{\n\n\tnewColor.R = red;\n\tnewColor.G = green;\n\tnewColor.B = blue;\n\n\tSetInsertionPointTexture(newTexture, newColor);\n}",
                        "locals": [
                            "local color newColor;"
                        ],
                        "modifiers": [],
                        "name": "SetInsertionPointTextureRGB",
                        "native": false,
                        "param": [
                            [
                                "texture",
                                "newTexture"
                            ],
                            [
                                "byte",
                                "red"
                            ],
                            [
                                "byte",
                                "green"
                            ],
                            [
                                "byte",
                                "blue"
                            ]
                        ],
                        "return": ""
                    },
                    "SetMaxSize": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetMaxSize",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "newMaxSize"
                            ]
                        ],
                        "return": ""
                    },
                    "SetMaxUndos": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetMaxUndos",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "newMaxUndos"
                            ]
                        ],
                        "return": ""
                    },
                    "SetSelectedArea": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetSelectedArea",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "startPos"
                            ],
                            [
                                "int",
                                "count"
                            ]
                        ],
                        "return": ""
                    },
                    "SetSelectedAreaTextColor": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetSelectedAreaTextColor",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "color",
                                "newColor"
                            ]
                        ],
                        "return": ""
                    },
                    "SetSelectedAreaTextColorRGB": {
                        "body": "{\n\n\tnewColor.R = red;\n\tnewColor.G = green;\n\tnewColor.B = blue;\n\n\tSetSelectedAreaTextColor(newColor);\n}",
                        "locals": [
                            "local color newColor;"
                        ],
                        "modifiers": [],
                        "name": "SetSelectedAreaTextColorRGB",
                        "native": false,
                        "param": [
                            [
                                "byte",
                                "red"
                            ],
                            [
                                "byte",
                                "green"
                            ],
                            [
                                "byte",
                                "blue"
                            ]
                        ],
                        "return": ""
                    },
                    "SetSelectedAreaTextureRGB": {
                        "body": "{\n\n\tnewColor.R = red;\n\tnewColor.G = green;\n\tnewColor.B = blue;\n\n\tSetSelectedAreaTexture(newTexture, newColor);\n}",
                        "locals": [
                            "local color newColor;"
                        ],
                        "modifiers": [],
                        "name": "SetSelectedAreaTextureRGB",
                        "native": false,
                        "param": [
                            [
                                "texture",
                                "newTexture"
                            ],
                            [
                                "byte",
                                "red"
                            ],
                            [
                                "byte",
                                "green"
                            ],
                            [
                                "byte",
                                "blue"
                            ]
                        ],
                        "return": ""
                    },
                    "SetTextChangedFlag": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetTextChangedFlag",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "bool",
                                "bSet"
                            ]
                        ],
                        "return": ""
                    },
                    "Undo": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "Undo",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "VirtualKeyPressed": {
                        "body": "{\n\n\tretval = Super.VirtualKeyPressed(key, bRepeat);\n\n\tif (!bEditable)\n\t\treturn (retval);\n\n\tbShift = IsKeyDown(IK_Shift);\n\tbCtrl  = IsKeyDown(IK_Ctrl);\n\tbDrag  = bShift;\n\tbWord  = bCtrl;\n\n\t// Movement\n\tif (key == IK_Left)\n\t{\n\t\tif (bWord)\n\t\t\tMoveInsertionPoint(MOVEINSERT_WordLeft, bDrag);\n\t\telse\n\t\t\tMoveInsertionPoint(MOVEINSERT_Left, bDrag);\n\t\tPlayEditSound(moveSound);\n\t\tretval = true;\n\t}\n\telse if (key == IK_Right)\n\t{\n\t\tif (bWord)\n\t\t\tMoveInsertionPoint(MOVEINSERT_WordRight, bDrag);\n\t\telse\n\t\t\tMoveInsertionPoint(MOVEINSERT_Right, bDrag);\n\t\tPlayEditSound(moveSound);\n\t\tretval = true;\n\t}\n\telse if (key == IK_Up)\n\t{\n\t\tMoveInsertionPoint(MOVEINSERT_Up, bDrag);\n\t\tPlayEditSound(moveSound);\n\t\tretval = true;\n\t}\n\telse if (key == IK_Down)\n\t{\n\t\tMoveInsertionPoint(MOVEINSERT_Down, bDrag);\n\t\tPlayEditSound(moveSound);\n\t\tretval = true;\n\t}\n\telse if (key == IK_PageUp)\n\t{\n\t\tMoveInsertionPoint(MOVEINSERT_PageUp, bDrag);\n\t\tPlayEditSound(moveSound);\n\t\tretval = true;\n\t}\n\telse if (key == IK_PageDown)\n\t{\n\t\tMoveInsertionPoint(MOVEINSERT_PageDown, bDrag);\n\t\tPlayEditSound(moveSound);\n\t\tretval = true;\n\t}\n\telse if (key == IK_Home)\n\t{\n\t\tif (bWord)\n\t\t\tMoveInsertionPoint(MOVEINSERT_Home, bDrag);\n\t\telse\n\t\t\tMoveInsertionPoint(MOVEINSERT_StartOfLine, bDrag);\n\t\tPlayEditSound(moveSound);\n\t\tretval = true;\n\t}\n\telse if (key == IK_End)\n\t{\n\t\tif (bWord)\n\t\t\tMoveInsertionPoint(MOVEINSERT_End, bDrag);\n\t\telse\n\t\t\tMoveInsertionPoint(MOVEINSERT_EndOfLine, bDrag);\n\t\tPlayEditSound(moveSound);\n\t\tretval = true;\n\t}\n\n\t// Editing\n\telse if (key == IK_Backspace)\n\t{\n\t\tPlayEditSound(deleteSound);\n\t\tDeleteChar(true, true);\n\t\tretval = true;\n\t}\n\telse if (key == IK_Delete)\n\t{\n\t\tPlayEditSound(deleteSound);\n\t\tDeleteChar(false, true);\n\t\tretval = true;\n\t}\n\telse if (key == IK_Enter)\n\t{\n\t\tInsertText(\"|n\", true);\n\t\tretval = true;\n\t}\n\telse if (key == IK_C)\n\t{\n\t\tPlayEditSound(moveSound);\n\t\tif (bCtrl)\n\t\t{\n\t\t\tCopy();\n\t\t\tretval = true;\n\t\t}\n\t}\n\telse if (key == IK_X)\n\t{\n\t\tPlayEditSound(moveSound);\n\t\tif (bCtrl)\n\t\t{\n\t\t\tCut();\n\t\t\tretval = true;\n\t\t}\n\t}\n\telse if (key == IK_V)\n\t{\n\t\tPlayEditSound(moveSound);\n\t\tif (bCtrl)\n\t\t{\n\t\t\tPaste();\n\t\t\tretval = true;\n\t\t}\n\t}\n\telse if (key == IK_Z)\n\t{\n\t\tPlayEditSound(moveSound);\n\t\tif (bCtrl)\n\t\t{\n\t\t\tUndo();\n\t\t\tretval = true;\n\t\t}\n\t}\n\telse if (key == IK_Y)\n\t{\n\t\tPlayEditSound(moveSound);\n\t\tif (bCtrl)\n\t\t{\n\t\t\tRedo();\n\t\t\tretval = true;\n\t\t}\n\t}\n\n\treturn (retval);\n\n}",
                        "locals": [
                            "local bool retval;",
                            "local bool bShift;",
                            "local bool bCtrl;",
                            "local bool bDrag;",
                            "local bool bWord;"
                        ],
                        "modifiers": [],
                        "name": "VirtualKeyPressed",
                        "native": false,
                        "param": [
                            [
                                "EInputKey",
                                "key"
                            ],
                            [
                                "bool",
                                "bRepeat"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 347,
                "replication": "",
                "states": [],
                "variables": [
                    "var const bool bEditable;",
                    "var const bool bSingleLine;",
                    "var const bool bUppercaseOnly;",
                    "var const int                 insertPos;",
                    "var const int                 insertHookPos;",
                    "var const EInsertionPointType insertType;",
                    "var const int  selectStart;",
                    "var const int  selectEnd;",
                    "var const int  maxSize;",
                    "var const texture insertTexture;",
                    "var const color   insertColor;",
                    "var const texture selectTexture;",
                    "var const color   selectColor;",
                    "var const color   inverseColor;",
                    "var const texture editCursor;",
                    "var const texture editCursorShadow;",
                    "var const color   editCursorColor;",
                    "var const sound   typeSound;",
                    "var const sound   deleteSound;",
                    "var const sound   enterSound;",
                    "var const sound   moveSound;",
                    "var private DynamicArray bufferList;",
                    "var private int          currentUndo;",
                    "var private int          maxUndos;",
                    "var private int          unchangedUndo;",
                    "var private float dragDelay;",
                    "var private float blinkDelay;",
                    "var private float blinkStart;",
                    "var private float blinkPeriod;",
                    "var private bool  bCursorShowing;",
                    "var private bool  bDragging;",
                    "var private bool  bSelectWords;",
                    "var private float insertX;",
                    "var private float insertY;",
                    "var private float insertWidth;",
                    "var private float insertHeight;",
                    "var private float insertPrefWidth;",
                    "var private float insertPrefHeight;",
                    "var private float showAreaX;",
                    "var private float showAreaY;",
                    "var private float showAreaWidth;",
                    "var private float showAreaHeight;",
                    "var private float insertPreferredCol;",
                    "var private float lastConfigWidth;",
                    "var private float lastConfigHeight;",
                    "var private int   selectStartRow;",
                    "var private int   selectEndRow;",
                    "var private float selectStartX;",
                    "var private float selectEndX;"
                ]
            }
        },
        "ExtString.uc": {
            "body": "//=============================================================================\n// ExtString\n//=============================================================================\nclass ExtString extends Object\n\tnative\n\tnoexport;\n\n// ----------------------------------------------------------------------\n// Variables\n\nvar native private int speechPage;\nvar native private string text;\n\n\n// ----------------------------------------------------------------------\n// natives\n\nnative(1140) final function SetText(coerce string newText);\nnative(1141) final function AppendText(coerce string newText);\nnative(1142) final function string GetText();\nnative(1143) final function int GetTextLength();\nnative(1144) final function int GetTextPart(int startPos, int count, out string outText);\nnative(1145) final function int GetFirstTextPart(out string outText);\nnative(1146) final function int GetNextTextPart(out string outText);\n\ndefaultproperties\n{\n}\n",
            "name": "ExtString.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "Object",
                "functions": {
                    "AppendText": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "AppendText",
                        "native": true,
                        "param": [
                            [
                                "coerce",
                                "string",
                                "newText"
                            ]
                        ],
                        "return": ""
                    },
                    "GetFirstTextPart": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetFirstTextPart",
                        "native": true,
                        "param": [
                            [
                                "out",
                                "string",
                                "outText"
                            ]
                        ],
                        "return": ""
                    },
                    "GetNextTextPart": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetNextTextPart",
                        "native": true,
                        "param": [
                            [
                                "out",
                                "string",
                                "outText"
                            ]
                        ],
                        "return": ""
                    },
                    "GetText": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetText",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "GetTextLength": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetTextLength",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "GetTextPart": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetTextPart",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "startPos"
                            ],
                            [
                                "int",
                                "count"
                            ],
                            [
                                "out",
                                "string",
                                "outText"
                            ]
                        ],
                        "return": ""
                    },
                    "SetText": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetText",
                        "native": true,
                        "param": [
                            [
                                "coerce",
                                "string",
                                "newText"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 29,
                "replication": "",
                "states": [],
                "variables": [
                    "var native private int speechPage;",
                    "var native private string text;"
                ]
            }
        },
        "ExtensionObject.uc": {
            "body": "//=============================================================================\n// ExtensionObject.\n//=============================================================================\nclass ExtensionObject extends Object\n\tnative\n\tnoexport;\n\n// ----------------------------------------------------------------------\n// Enumerations\n// ----------------------------------------------------------------------\n\n// ----------------------------------------------------------------------\n// EFlagType - Flag types\n\nenum EFlagType\n{\n\tFLAG_Bool,\n\tFLAG_Byte,\n\tFLAG_Int,\n\tFLAG_Float,\n\tFLAG_Name,\n\tFLAG_Vector,\n\tFLAG_Rotator,\n};\n\n\n// ----------------------------------------------------------------------\n// EHAlign - Horizontal alignments\n\nenum EHAlign\n{\n\tHALIGN_Left,\n\tHALIGN_Center,\n\tHALIGN_Right,\n\tHALIGN_Full\n};\n\n\n// ----------------------------------------------------------------------\n// EVAlign - Vertical alignments\n\nenum EVAlign\n{\n\tVALIGN_Top,\n\tVALIGN_Center,\n\tVALIGN_Bottom,\n\tVALIGN_Full\n};\n\n\n// ----------------------------------------------------------------------\n// EHDirection - Horizontal directions\n\nenum EHDirection\n{\n\tHDIR_LeftToRight,\n\tHDIR_RightToLeft\n};\n\n\n// ----------------------------------------------------------------------\n// EVDirection - Vertical directions\n\nenum EVDirection\n{\n\tVDIR_TopToBottom,\n\tVDIR_BottomToTop\n};\n\n\n// ----------------------------------------------------------------------\n// EOrder - Horizontal and vertical order\n\nenum EOrder\n{\n\tORDER_Right,\n\tORDER_Left,\n\tORDER_Down,\n\tORDER_Up,\n\tORDER_RightThenDown,\n\tORDER_RightThenUp,\n\tORDER_LeftThenDown,\n\tORDER_LeftThenUp,\n\tORDER_DownThenRight,\n\tORDER_DownThenLeft,\n\tORDER_UpThenRight,\n\tORDER_UpThenLeft\n};\n\n\n// ----------------------------------------------------------------------\n// EMouseFocusMode - How mouse actions affect focus\n\nenum EMouseFocusMode\n{\n\tMFOCUS_None,\n\tMFOCUS_Click,\n\tMFOCUS_Enter,\n\tMFOCUS_EnterLeave\n};\n\n\n// ----------------------------------------------------------------------\n// EMove - Movement direction\n\nenum EMove\n{\n\tMOVE_Left,\n\tMOVE_Right,\n\tMOVE_Up,\n\tMOVE_Down\n};\n\n\n// ----------------------------------------------------------------------\n// EOrientation - Orientation (duh)\n\nenum EOrientation\n{\n\tORIENT_Horizontal,\n\tORIENT_Vertical\n};\n\n\n// ----------------------------------------------------------------------\n// EMoveList - List window movement enumeration\n\nenum EMoveList\n{\n\tMOVELIST_Up,\n\tMOVELIST_Down,\n\tMOVELIST_PageUp,\n\tMOVELIST_PageDown,\n\tMOVELIST_Home,\n\tMOVELIST_End\n};\n\n\n// ----------------------------------------------------------------------\n// EMoveInsert - Insertion point movement enumeration\n\nenum EMoveInsert\n{\n\tMOVEINSERT_Up,\n\tMOVEINSERT_Down,\n\tMOVEINSERT_Left,\n\tMOVEINSERT_Right,\n\tMOVEINSERT_WordLeft,\n\tMOVEINSERT_WordRight,\n\tMOVEINSERT_StartOfLine,\n\tMOVEINSERT_EndOfLine,\n\tMOVEINSERT_PageUp,\n\tMOVEINSERT_PageDown,\n\tMOVEINSERT_Home,\n\tMOVEINSERT_End\n};\n\n\n// ----------------------------------------------------------------------\n// EInsertionPointType - Insertion point cursor type\n\nenum EInsertionPointType\n{\n\tINSTYPE_Insert,\n\tINSTYPE_Underscore,\n\tINSTYPE_Block,\n\tINSTYPE_RawInsert,\n\tINSTYPE_RawOverlay\n};\n\n\n// ----------------------------------------------------------------------\n// EColumnType - Type of data contained in a column\n\nenum EColumnType\n{\n\tCOLTYPE_String,\n\tCOLTYPE_Float,\n\tCOLTYPE_Time\n};\n\n\n// ----------------------------------------------------------------------\n// EMoveThumb - Enumeration for thumb movement in a scrollbar\n\nenum EMoveThumb\n{\n\tMOVETHUMB_Home,\n\tMOVETHUMB_End,\n\tMOVETHUMB_Prev,\n\tMOVETHUMB_Next,\n\tMOVETHUMB_StepUp,\n\tMOVETHUMB_StepDown,\n\tMOVETHUMB_PageUp,\n\tMOVETHUMB_PageDown\n};\n\n\n// ----------------------------------------------------------------------\n// EDrawStyle - Types of drawing modes\n\nenum EDrawStyle\n{\n\tDSTY_None,\n\tDSTY_Normal,\n\tDSTY_Masked,\n\tDSTY_Translucent,\n\tDSTY_Modulated\n};\n\n\n// ----------------------------------------------------------------------\n// EInputState - Different types of input\n\nenum EInputState\n{\n\tIST_None,\n\tIST_Press,\n\tIST_Hold,\n\tIST_Release,\n\tIST_Axis\n};\n\n\n// ----------------------------------------------------------------------\n// EInputKey - Virtual keypress enumeration\n\nenum EInputKey\n{\n/*00*/\tIK_None\t\t\t,IK_LeftMouse\t,IK_RightMouse\t,IK_Cancel\t\t,\n/*04*/\tIK_MiddleMouse\t,IK_Unknown05\t,IK_Unknown06\t,IK_Unknown07\t,\n/*08*/\tIK_Backspace\t,IK_Tab         ,IK_Unknown0A\t,IK_Unknown0B\t,\n/*0C*/\tIK_Unknown0C\t,IK_Enter\t    ,IK_Unknown0E\t,IK_Unknown0F\t,\n/*10*/\tIK_Shift\t\t,IK_Ctrl\t    ,IK_Alt\t\t\t,IK_Pause       ,\n/*14*/\tIK_CapsLock\t\t,IK_Unknown15\t,IK_Unknown16\t,IK_Unknown17\t,\n/*18*/\tIK_Unknown18\t,IK_Unknown19\t,IK_Unknown1A\t,IK_Escape\t\t,\n/*1C*/\tIK_Unknown1C\t,IK_Unknown1D\t,IK_Unknown1E\t,IK_Unknown1F\t,\n/*20*/\tIK_Space\t\t,IK_PageUp      ,IK_PageDown    ,IK_End         ,\n/*24*/\tIK_Home\t\t\t,IK_Left        ,IK_Up          ,IK_Right       ,\n/*28*/\tIK_Down\t\t\t,IK_Select      ,IK_Print       ,IK_Execute     ,\n/*2C*/\tIK_PrintScrn\t,IK_Insert      ,IK_Delete      ,IK_Help\t\t,\n/*30*/\tIK_0\t\t\t,IK_1\t\t\t,IK_2\t\t\t,IK_3\t\t\t,\n/*34*/\tIK_4\t\t\t,IK_5\t\t\t,IK_6\t\t\t,IK_7\t\t\t,\n/*38*/\tIK_8\t\t\t,IK_9\t\t\t,IK_Unknown3A\t,IK_Unknown3B\t,\n/*3C*/\tIK_Unknown3C\t,IK_Unknown3D\t,IK_Unknown3E\t,IK_Unknown3F\t,\n/*40*/\tIK_Unknown40\t,IK_A\t\t\t,IK_B\t\t\t,IK_C\t\t\t,\n/*44*/\tIK_D\t\t\t,IK_E\t\t\t,IK_F\t\t\t,IK_G\t\t\t,\n/*48*/\tIK_H\t\t\t,IK_I\t\t\t,IK_J\t\t\t,IK_K\t\t\t,\n/*4C*/\tIK_L\t\t\t,IK_M\t\t\t,IK_N\t\t\t,IK_O\t\t\t,\n/*50*/\tIK_P\t\t\t,IK_Q\t\t\t,IK_R\t\t\t,IK_S\t\t\t,\n/*54*/\tIK_T\t\t\t,IK_U\t\t\t,IK_V\t\t\t,IK_W\t\t\t,\n/*58*/\tIK_X\t\t\t,IK_Y\t\t\t,IK_Z\t\t\t,IK_Unknown5B\t,\n/*5C*/\tIK_Unknown5C\t,IK_Unknown5D\t,IK_Unknown5E\t,IK_Unknown5F\t,\n/*60*/\tIK_NumPad0\t\t,IK_NumPad1     ,IK_NumPad2     ,IK_NumPad3     ,\n/*64*/\tIK_NumPad4\t\t,IK_NumPad5     ,IK_NumPad6     ,IK_NumPad7     ,\n/*68*/\tIK_NumPad8\t\t,IK_NumPad9     ,IK_GreyStar    ,IK_GreyPlus    ,\n/*6C*/\tIK_Separator\t,IK_GreyMinus\t,IK_NumPadPeriod,IK_GreySlash   ,\n/*70*/\tIK_F1\t\t\t,IK_F2          ,IK_F3          ,IK_F4          ,\n/*74*/\tIK_F5\t\t\t,IK_F6          ,IK_F7          ,IK_F8          ,\n/*78*/\tIK_F9           ,IK_F10         ,IK_F11         ,IK_F12         ,\n/*7C*/\tIK_F13\t\t\t,IK_F14         ,IK_F15         ,IK_F16         ,\n/*80*/\tIK_F17\t\t\t,IK_F18         ,IK_F19         ,IK_F20         ,\n/*84*/\tIK_F21\t\t\t,IK_F22         ,IK_F23         ,IK_F24         ,\n/*88*/\tIK_Unknown88\t,IK_Unknown89\t,IK_Unknown8A\t,IK_Unknown8B\t,\n/*8C*/\tIK_Unknown8C\t,IK_Unknown8D\t,IK_Unknown8E\t,IK_Unknown8F\t,\n/*90*/\tIK_NumLock\t\t,IK_ScrollLock  ,IK_Unknown92\t,IK_Unknown93\t,\n/*94*/\tIK_Unknown94\t,IK_Unknown95\t,IK_Unknown96\t,IK_Unknown97\t,\n/*98*/\tIK_Unknown98\t,IK_Unknown99\t,IK_Unknown9A\t,IK_Unknown9B\t,\n/*9C*/\tIK_Unknown9C\t,IK_Unknown9D\t,IK_Unknown9E\t,IK_Unknown9F\t,\n/*A0*/\tIK_LShift\t\t,IK_RShift      ,IK_LControl    ,IK_RControl    ,\n/*A4*/\tIK_UnknownA4\t,IK_UnknownA5\t,IK_UnknownA6\t,IK_UnknownA7\t,\n/*A8*/\tIK_UnknownA8\t,IK_UnknownA9\t,IK_UnknownAA\t,IK_UnknownAB\t,\n/*AC*/\tIK_UnknownAC\t,IK_UnknownAD\t,IK_UnknownAE\t,IK_UnknownAF\t,\n/*B0*/\tIK_UnknownB0\t,IK_UnknownB1\t,IK_UnknownB2\t,IK_UnknownB3\t,\n/*B4*/\tIK_UnknownB4\t,IK_UnknownB5\t,IK_UnknownB6\t,IK_UnknownB7\t,\n/*B8*/\tIK_UnknownB8\t,IK_UnknownB9\t,IK_Semicolon\t,IK_Equals\t\t,\n/*BC*/\tIK_Comma\t\t,IK_Minus\t\t,IK_Period\t\t,IK_Slash\t\t,\n/*C0*/\tIK_Tilde\t\t,IK_UnknownC1\t,IK_UnknownC2\t,IK_UnknownC3\t,\n/*C4*/\tIK_UnknownC4\t,IK_UnknownC5\t,IK_UnknownC6\t,IK_UnknownC7\t,\n/*C8*/\tIK_Joy1\t        ,IK_Joy2\t    ,IK_Joy3\t    ,IK_Joy4\t    ,\n/*CC*/\tIK_Joy5\t        ,IK_Joy6\t    ,IK_Joy7\t    ,IK_Joy8\t    ,\n/*D0*/\tIK_Joy9\t        ,IK_Joy10\t    ,IK_Joy11\t    ,IK_Joy12\t\t,\n/*D4*/\tIK_Joy13\t\t,IK_Joy14\t    ,IK_Joy15\t    ,IK_Joy16\t    ,\n/*D8*/\tIK_UnknownD8\t,IK_UnknownD9\t,IK_UnknownDA\t,IK_LeftBracket\t,\n/*DC*/\tIK_Backslash\t,IK_RightBracket,IK_SingleQuote\t,IK_UnknownDF\t,\n/*E0*/  IK_JoyX\t\t\t,IK_JoyY\t\t,IK_JoyZ\t\t,IK_JoyR\t\t,\n/*E4*/\tIK_MouseX\t\t,IK_MouseY\t\t,IK_MouseZ\t\t,IK_MouseW\t\t,\n/*E8*/\tIK_JoyU\t\t\t,IK_JoyV\t\t,IK_UnknownEA\t,IK_UnknownEB\t,\n/*EC*/\tIK_MouseWheelUp ,IK_MouseWheelDown,IK_Unknown10E,UK_Unknown10F  ,\n/*F0*/\tIK_JoyPovUp     ,IK_JoyPovDown\t,IK_JoyPovLeft\t,IK_JoyPovRight\t,\n/*F4*/\tIK_UnknownF4\t,IK_UnknownF5\t,IK_Attn\t\t,IK_CrSel\t\t,\n/*F8*/\tIK_ExSel\t\t,IK_ErEof\t\t,IK_Play\t\t,IK_Zoom\t\t,\n/*FC*/\tIK_NoName\t\t,IK_PA1\t\t\t,IK_OEMClear\n};\n\n\n// ----------------------------------------------------------------------\n// Structures\n// ----------------------------------------------------------------------\n\n// ----------------------------------------------------------------------\n// UnrealScript version of TArray/FArray (originally in Object.uc; moved\n// here after removal in version 224)\n\nstruct DynamicArray\n{\n\tvar const int Num, Max, Ptr;\n};\n\n\n// ----------------------------------------------------------------------\n// Clip rectangle\n\nstruct ClipRect\n{\n\tvar float originX,   originY;\n\tvar float clipX,     clipY;\n\tvar float clipWidth, clipHeight;\n};\n\n\n// ----------------------------------------------------------------------\n// Intrinsics\n\nnative(1024) final function Name StringToName(coerce string str);\n\ndefaultproperties\n{\n}\n",
            "name": "ExtensionObject.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "Object",
                "functions": {
                    "StringToName": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "StringToName",
                        "native": true,
                        "param": [
                            [
                                "coerce",
                                "string",
                                "str"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 330,
                "replication": "",
                "states": [],
                "variables": [
                    "var const int Num, Max, Ptr;",
                    "var float originX,   originY;",
                    "var float clipX,     clipY;",
                    "var float clipWidth, clipHeight;"
                ]
            }
        },
        "Flag.uc": {
            "body": "//=============================================================================\n// Flag.\n//=============================================================================\nclass Flag extends ExtensionObject\n\tnative\n\tnoexport;\n\nvar private travel name      flagName;\nvar private travel int       flagHash;\nvar private travel FlagBase  flagBase;\nvar private travel Flag      nextFlag;\nvar private travel EFlagType flagType;\nvar private travel int       expiration;\n\ndefaultproperties\n{\n}\n",
            "name": "Flag.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "ExtensionObject",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 18,
                "replication": "",
                "states": [],
                "variables": [
                    "var private travel name      flagName;",
                    "var private travel int       flagHash;",
                    "var private travel FlagBase  flagBase;",
                    "var private travel Flag      nextFlag;",
                    "var private travel EFlagType flagType;",
                    "var private travel int       expiration;"
                ]
            }
        },
        "FlagBase.uc": {
            "body": "//=============================================================================\n// FlagBase.\n//=============================================================================\nclass FlagBase extends ExtensionObject\n\tnative\n\tnoexport;\n\n// ----------------------------------------------------------------------\n// Variables\n\n// Quick class reference\nvar private travel flag hashTable[64];\t\t\t\t\t// Hash table containing all flags\nvar private travel int  defaultFlagExpiration;          // Default flag expiration\n\n\n// ----------------------------------------------------------------------\n\nfunction FubarCheat()\n{\n\tlocal FlagBool    flag1;\n\tlocal FlagByte    flag2;\n\tlocal FlagInt     flag3;\n\tlocal FlagFloat   flag4;\n\tlocal FlagName    flag5;\n\tlocal FlagVector  flag6;\n\tlocal FlagRotator flag7;\n\n\t// Do absolutely nothing -- the above variables are only included so\n\t// UnrealScript will load the associated class information from the\n\t// Extension package.  Mega-Barf.\n}\n\n\n// ----------------------------------------------------------------------\n// Intrinsics\n\nnative(1100) final function bool SetBool(Name flagName, bool newValue, optional bool bAdd, optional int expiration);\nnative(1101) final function bool SetByte(Name flagName, byte newValue, optional bool bAdd, optional int expiration);\nnative(1102) final function bool SetInt(Name flagName, int newValue, optional bool bAdd, optional int expiration);\nnative(1103) final function bool SetFloat(Name flagName, float newValue, optional bool bAdd, optional int expiration);\nnative(1104) final function bool SetName(Name flagName, name newValue, optional bool bAdd, optional int expiration);\nnative(1105) final function bool SetVector(Name flagName, vector newValue, optional bool bAdd, optional int expiration);\nnative(1106) final function bool SetRotator(Name flagName, rotator newValue, optional bool bAdd, optional int expiration);\n\nnative(1110) final function bool    GetBool(Name flagName);\nnative(1111) final function byte    GetByte(Name flagName);\nnative(1112) final function int     GetInt(Name flagName);\nnative(1113) final function float   GetFloat(Name flagName);\nnative(1114) final function name    GetName(Name flagName);\nnative(1115) final function vector  GetVector(Name flagName);\nnative(1116) final function rotator GetRotator(Name flagName);\n\nnative(1120) final function bool CheckFlag(Name flagName, EFlagType flagType);\nnative(1121) final function bool DeleteFlag(Name flagName, EFlagType flagType);\nnative(1122) final function      SetExpiration(Name flagName, EFlagType flagType, int expiration);\nnative(1123) final function int  GetExpiration(Name flagName, EFlagType flagType);\nnative(1124) final function      DeleteExpiredFlags(int criteria);\nnative(1125) final function      SetDefaultExpiration(int expiration);\n\nnative(1126) final function int  CreateIterator(optional EFlagType flagType);\nnative(1127) final function bool GetNextFlagName(int iterator, out name flagName);\nnative(1128) final function bool GetNextFlag(int iterator,\n                                             out name flagName, out EFlagType flagType);\nnative(1129) final function      DestroyIterator(int iterator);\n\nnative(1130) final function      DeleteAllFlags();\n\ndefaultproperties\n{\n}\n",
            "name": "FlagBase.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "ExtensionObject",
                "functions": {
                    "CheckFlag": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "CheckFlag",
                        "native": true,
                        "param": [
                            [
                                "Name",
                                "flagName"
                            ],
                            [
                                "EFlagType",
                                "flagType"
                            ]
                        ],
                        "return": ""
                    },
                    "CreateIterator": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "CreateIterator",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "EFlagType",
                                "flagType"
                            ]
                        ],
                        "return": ""
                    },
                    "DeleteAllFlags": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "DeleteAllFlags",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "DeleteExpiredFlags": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "DeleteExpiredFlags",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "criteria"
                            ]
                        ],
                        "return": ""
                    },
                    "DeleteFlag": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "DeleteFlag",
                        "native": true,
                        "param": [
                            [
                                "Name",
                                "flagName"
                            ],
                            [
                                "EFlagType",
                                "flagType"
                            ]
                        ],
                        "return": ""
                    },
                    "DestroyIterator": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "DestroyIterator",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "iterator"
                            ]
                        ],
                        "return": ""
                    },
                    "FubarCheat": {
                        "body": "{\n\n\t// Do absolutely nothing -- the above variables are only included so\n\t// UnrealScript will load the associated class information from the\n\t// Extension package.  Mega-Barf.\n}",
                        "locals": [
                            "local FlagBool    flag1;",
                            "local FlagByte    flag2;",
                            "local FlagInt     flag3;",
                            "local FlagFloat   flag4;",
                            "local FlagName    flag5;",
                            "local FlagVector  flag6;",
                            "local FlagRotator flag7;"
                        ],
                        "modifiers": [],
                        "name": "FubarCheat",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "GetBool": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetBool",
                        "native": true,
                        "param": [
                            [
                                "Name",
                                "flagName"
                            ]
                        ],
                        "return": ""
                    },
                    "GetByte": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetByte",
                        "native": true,
                        "param": [
                            [
                                "Name",
                                "flagName"
                            ]
                        ],
                        "return": ""
                    },
                    "GetExpiration": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetExpiration",
                        "native": true,
                        "param": [
                            [
                                "Name",
                                "flagName"
                            ],
                            [
                                "EFlagType",
                                "flagType"
                            ]
                        ],
                        "return": ""
                    },
                    "GetFloat": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetFloat",
                        "native": true,
                        "param": [
                            [
                                "Name",
                                "flagName"
                            ]
                        ],
                        "return": ""
                    },
                    "GetInt": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetInt",
                        "native": true,
                        "param": [
                            [
                                "Name",
                                "flagName"
                            ]
                        ],
                        "return": ""
                    },
                    "GetName": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetName",
                        "native": true,
                        "param": [
                            [
                                "Name",
                                "flagName"
                            ]
                        ],
                        "return": ""
                    },
                    "GetNextFlagName": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetNextFlagName",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "iterator"
                            ],
                            [
                                "out",
                                "name",
                                "flagName"
                            ]
                        ],
                        "return": ""
                    },
                    "GetRotator": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetRotator",
                        "native": true,
                        "param": [
                            [
                                "Name",
                                "flagName"
                            ]
                        ],
                        "return": ""
                    },
                    "GetVector": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetVector",
                        "native": true,
                        "param": [
                            [
                                "Name",
                                "flagName"
                            ]
                        ],
                        "return": ""
                    },
                    "SetBool": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetBool",
                        "native": true,
                        "param": [
                            [
                                "Name",
                                "flagName"
                            ],
                            [
                                "bool",
                                "newValue"
                            ],
                            [
                                "optional",
                                "bool",
                                "bAdd"
                            ],
                            [
                                "optional",
                                "int",
                                "expiration"
                            ]
                        ],
                        "return": ""
                    },
                    "SetByte": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetByte",
                        "native": true,
                        "param": [
                            [
                                "Name",
                                "flagName"
                            ],
                            [
                                "byte",
                                "newValue"
                            ],
                            [
                                "optional",
                                "bool",
                                "bAdd"
                            ],
                            [
                                "optional",
                                "int",
                                "expiration"
                            ]
                        ],
                        "return": ""
                    },
                    "SetDefaultExpiration": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetDefaultExpiration",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "expiration"
                            ]
                        ],
                        "return": ""
                    },
                    "SetExpiration": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetExpiration",
                        "native": true,
                        "param": [
                            [
                                "Name",
                                "flagName"
                            ],
                            [
                                "EFlagType",
                                "flagType"
                            ],
                            [
                                "int",
                                "expiration"
                            ]
                        ],
                        "return": ""
                    },
                    "SetFloat": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetFloat",
                        "native": true,
                        "param": [
                            [
                                "Name",
                                "flagName"
                            ],
                            [
                                "float",
                                "newValue"
                            ],
                            [
                                "optional",
                                "bool",
                                "bAdd"
                            ],
                            [
                                "optional",
                                "int",
                                "expiration"
                            ]
                        ],
                        "return": ""
                    },
                    "SetInt": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetInt",
                        "native": true,
                        "param": [
                            [
                                "Name",
                                "flagName"
                            ],
                            [
                                "int",
                                "newValue"
                            ],
                            [
                                "optional",
                                "bool",
                                "bAdd"
                            ],
                            [
                                "optional",
                                "int",
                                "expiration"
                            ]
                        ],
                        "return": ""
                    },
                    "SetName": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetName",
                        "native": true,
                        "param": [
                            [
                                "Name",
                                "flagName"
                            ],
                            [
                                "name",
                                "newValue"
                            ],
                            [
                                "optional",
                                "bool",
                                "bAdd"
                            ],
                            [
                                "optional",
                                "int",
                                "expiration"
                            ]
                        ],
                        "return": ""
                    },
                    "SetRotator": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetRotator",
                        "native": true,
                        "param": [
                            [
                                "Name",
                                "flagName"
                            ],
                            [
                                "rotator",
                                "newValue"
                            ],
                            [
                                "optional",
                                "bool",
                                "bAdd"
                            ],
                            [
                                "optional",
                                "int",
                                "expiration"
                            ]
                        ],
                        "return": ""
                    },
                    "SetVector": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetVector",
                        "native": true,
                        "param": [
                            [
                                "Name",
                                "flagName"
                            ],
                            [
                                "vector",
                                "newValue"
                            ],
                            [
                                "optional",
                                "bool",
                                "bAdd"
                            ],
                            [
                                "optional",
                                "int",
                                "expiration"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 71,
                "replication": "",
                "states": [],
                "variables": [
                    "var private travel flag hashTable[64];\t\t\t\t\t// Hash table containing all flags",
                    "var private travel int  defaultFlagExpiration;          // Default flag expiration"
                ]
            }
        },
        "FlagBool.uc": {
            "body": "//=============================================================================\n// FlagBool.\n//=============================================================================\nclass FlagBool extends Flag\n\tnative\n\tnoexport;\n\nvar private travel bool bValue;\n\ndefaultproperties\n{\n}\n",
            "name": "FlagBool.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "Flag",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 13,
                "replication": "",
                "states": [],
                "variables": [
                    "var private travel bool bValue;"
                ]
            }
        },
        "FlagByte.uc": {
            "body": "//=============================================================================\n// FlagByte.\n//=============================================================================\nclass FlagByte extends Flag\n\tnative\n\tnoexport;\n\nvar private travel byte      byteValue;\n\ndefaultproperties\n{\n}\n",
            "name": "FlagByte.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "Flag",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 13,
                "replication": "",
                "states": [],
                "variables": [
                    "var private travel byte      byteValue;"
                ]
            }
        },
        "FlagFloat.uc": {
            "body": "//=============================================================================\n// FlagFloat.\n//=============================================================================\nclass FlagFloat extends Flag\n\tnative\n\tnoexport;\n\nvar private travel float floatValue;\n\ndefaultproperties\n{\n}\n",
            "name": "FlagFloat.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "Flag",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 13,
                "replication": "",
                "states": [],
                "variables": [
                    "var private travel float floatValue;"
                ]
            }
        },
        "FlagInt.uc": {
            "body": "//=============================================================================\n// FlagInt.\n//=============================================================================\nclass FlagInt extends Flag\n\tnative\n\tnoexport;\n\nvar private travel int intValue;\n\ndefaultproperties\n{\n}\n",
            "name": "FlagInt.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "Flag",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 13,
                "replication": "",
                "states": [],
                "variables": [
                    "var private travel int intValue;"
                ]
            }
        },
        "FlagName.uc": {
            "body": "//=============================================================================\n// FlagName.\n//=============================================================================\nclass FlagName extends Flag\n\tnative\n\tnoexport;\n\nvar private travel name nameValue;\n\ndefaultproperties\n{\n}\n",
            "name": "FlagName.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "Flag",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 13,
                "replication": "",
                "states": [],
                "variables": [
                    "var private travel name nameValue;"
                ]
            }
        },
        "FlagRotator.uc": {
            "body": "//=============================================================================\n// FlagRotator.\n//=============================================================================\nclass FlagRotator extends Flag\n\tnative\n\tnoexport;\n\nvar private travel rotator rotatorValue;\n\ndefaultproperties\n{\n}\n",
            "name": "FlagRotator.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "Flag",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 13,
                "replication": "",
                "states": [],
                "variables": [
                    "var private travel rotator rotatorValue;"
                ]
            }
        },
        "FlagVector.uc": {
            "body": "//=============================================================================\n// FlagVector.\n//=============================================================================\nclass FlagVector extends Flag\n\tnative\n\tnoexport;\n\nvar private travel vector vectorValue;\n\ndefaultproperties\n{\n}\n",
            "name": "FlagVector.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "Flag",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 13,
                "replication": "",
                "states": [],
                "variables": [
                    "var private travel vector vectorValue;"
                ]
            }
        },
        "GC.uc": {
            "body": "//=============================================================================\n// GC.\n//=============================================================================\nclass GC extends ExtensionObject\n\tnative\n\tnoexport;\n\n// ----------------------------------------------------------------------\n// Variables\n\nvar private native Canvas canvas;\n\nvar private ClipRect  gcClipRect;\n\nvar private byte      style;\nvar private bool      bSmoothed;\nvar private bool      bDrawEnabled;\nvar private bool      bMasked;\nvar private bool      bTranslucent;\nvar private bool      bModulated;\nvar private bool      bTextTranslucent;\nvar private int       polyFlags;\nvar private int       textPolyFlags;\n\nvar private color     tileColor;\nvar private plane     tilePlane;\n\nvar private color     textColor;\nvar private plane     textPlane;\nvar private font      normalFont;\nvar private font      boldFont;\nvar private texture   underlineTexture;\nvar private float     underlineHeight;\nvar private float     baselineOffset;\nvar private float     textVSpacing;\nvar private EHAlign   hAlign;\nvar private EVAlign   vAlign;\nvar private bool      bWordWrap;\nvar private bool      bParseMetachars;\n\nvar private int       hMultiplier;\nvar private int       vMultiplier;\n\nvar private bool      bFree;\nvar private int       gcCount;\nvar private GC        gcStack;\nvar private GC        gcFree;\nvar private GC        gcOwner;\n\n\n// ----------------------------------------------------------------------\n// Intrinsics\n\nnative(1200) final function Intersect(float clipX, float clipY,\n                                      float clipWidth, float clipHeight);\n\nnative(1210) final function EnableSmoothing(bool bNewSmoothing);\nnative(1211) final function bool IsSmoothingEnabled();\nnative(1212) final function SetStyle(EDrawStyle newStyle);\nnative(1213) final function EDrawStyle GetStyle();\nnative(1214) final function EnableDrawing(bool bDrawEnabled);\nnative(1215) final function bool IsDrawingEnabled();\nnative(1216) final function EnableMasking(bool bNewMasking);\nnative(1217) final function bool IsMaskingEnabled();\nnative(1218) final function EnableTranslucency(bool bNewTranslucency);\nnative(1219) final function bool IsTranslucencyEnabled();\nnative(1220) final function EnableModulation(bool bNewModulation);\nnative(1221) final function bool IsModulationEnabled();\n\nnative(1230) final function SetTileColor(color newTileColor);\nnative(1231) final function GetTileColor(out color tileColor);\n\nnative(1240) final function SetTextColor(color newTextColor);\nnative(1241) final function GetTextColor(out color textColor);\nnative(1242) final function SetFont(font newFont);\nnative(1243) final function SetNormalFont(font newNormalFont);\nnative(1244) final function SetBoldFont(font newBoldFont);\nnative(1245) final function SetFonts(font newNormalFont, font newBoldFont);\nnative(1246) final function GetFonts(out font normalFont, out font boldFont);\nnative(1247) final function EnableTranslucentText(bool bNewTranslucency);\nnative(1248) final function bool IsTranslucentTextEnabled();\n\nnative(1250) final function SetTextVSpacing(float newVSpacing);\nnative(1251) final function float GetTextVSpacing();\nnative(1252) final function SetHorizontalAlignment(EHAlign newHAlign);\nnative(1253) final function EHAlign GetHorizontalAlignment();\nnative(1254) final function SetVerticalAlignment(EVAlign newVAlign);\nnative(1255) final function EVAlign GetVerticalAlignment();\nnative(1256) final function SetAlignments(EHAlign newHAlign, EVAlign newVAlign);\nnative(1257) final function GetAlignments(out EHAlign hAlign, out EVAlign vAlign);\nnative(1258) final function EnableWordWrap(bool bNewWordWrap);\nnative(1259) final function bool IsWordWrapEnabled();\nnative(1260) final function EnableSpecialText(bool bNewSpecialText);\nnative(1261) final function bool IsSpecialTextEnabled();\nnative(1262) final function SetBaselineData(optional float newBaselineOffset,\n                                            optional float newUnderlineHeight);\n\nnative(1270) final function CopyGC(gc copy);\nnative(1271) final function int PushGC();\nnative(1272) final function PopGC(optional int gcNum);\n\nnative(1280) final function GetTextExtent(float destWidth,\n                                          out float xExtent, out float yExtent,\n                                          coerce string textStr);\n\nnative(1281) final function float GetFontHeight(optional bool bIncludeSpace);\n\nnative(1282) final function DrawText(float destX, float destY,\n                                     float destWidth, float destHeight,\n                                     coerce string textStr);\n\nnative(1283) final function DrawIcon(float destX, float destY,\n                                     texture tx);\nnative(1284) final function DrawTexture(float destX, float destY,\n                                        float destWidth, float destHeight,\n                                        float srcX, float srcY,\n                                        texture tx);\nnative(1285) final function DrawPattern(float destX, float destY,\n                                        float destWidth, float destHeight,\n                                        float orgX, float orgY,\n                                        texture tx);\n\nnative(1286) final function DrawBox(float destX, float destY,\n                                    float destWidth, float destHeight,\n                                    float orgX, float orgY,\n                                    float boxThickness,\n                                    texture tx);\n\nnative(1287) final function DrawStretchedTexture(float destX, float destY,\n                                                 float destWidth, float destHeight,\n                                                 float srcX, float srcY,\n                                                 float srcWidth, float srcHeight,\n                                                 texture tx);\n\nnative(1288) final function DrawActor(Actor actor, optional bool bClearZ,\n                                      optional bool bConstrain, optional bool bUnlit,\n                                      optional float drawScale, optional float scaleGlow,\n                                      optional texture skin);\n\nnative(1289) final function DrawBorders(float destX, float destY, float destWidth, float destHeight,\n                                        float leftMargin, float rightMargin,\n                                        float topMargin, float bottomMargin,\n                                        texture borders[9],\n                                        optional bool bStretchHorizontally, optional bool bStretchVertically);\n// Order of border textures (0-8):\n// top left, top right, bottom left, bottom right,\n// left, right, top, bottom, center\n\nnative(1295) final function ClearZ();\n\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// SetTextColorRGB() : Sets the color of text based on individual RGB\n//                     values\n\nfunction SetTextColorRGB(INT red, INT green, INT blue)\n{\n\tlocal color newColor;\n\tnewColor.r = red;\n\tnewColor.g = green;\n\tnewColor.b = blue;\n\tSetTextColor(newColor);\n}\n\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// SetTileColorRGB() : Sets the color of a tile based on individual RGB\n//                     values\n\nfunction SetTileColorRGB(INT red, INT green, INT blue)\n{\n\tlocal color newColor;\n\tnewColor.r = red;\n\tnewColor.g = green;\n\tnewColor.b = blue;\n\tSetTileColor(newColor);\n}\n\ndefaultproperties\n{\n     underlineTexture=Texture'Extension.Solid'\n}\n",
            "name": "GC.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "underlineTexture=Texture'Extension.Solid'"
                ],
                "exec": [],
                "extends": "ExtensionObject",
                "functions": {
                    "ClearZ": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "ClearZ",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "CopyGC": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "CopyGC",
                        "native": true,
                        "param": [
                            [
                                "gc",
                                "copy"
                            ]
                        ],
                        "return": ""
                    },
                    "EnableDrawing": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "EnableDrawing",
                        "native": true,
                        "param": [
                            [
                                "bool",
                                "bDrawEnabled"
                            ]
                        ],
                        "return": ""
                    },
                    "EnableMasking": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "EnableMasking",
                        "native": true,
                        "param": [
                            [
                                "bool",
                                "bNewMasking"
                            ]
                        ],
                        "return": ""
                    },
                    "EnableModulation": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "EnableModulation",
                        "native": true,
                        "param": [
                            [
                                "bool",
                                "bNewModulation"
                            ]
                        ],
                        "return": ""
                    },
                    "EnableSmoothing": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "EnableSmoothing",
                        "native": true,
                        "param": [
                            [
                                "bool",
                                "bNewSmoothing"
                            ]
                        ],
                        "return": ""
                    },
                    "EnableSpecialText": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "EnableSpecialText",
                        "native": true,
                        "param": [
                            [
                                "bool",
                                "bNewSpecialText"
                            ]
                        ],
                        "return": ""
                    },
                    "EnableTranslucency": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "EnableTranslucency",
                        "native": true,
                        "param": [
                            [
                                "bool",
                                "bNewTranslucency"
                            ]
                        ],
                        "return": ""
                    },
                    "EnableTranslucentText": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "EnableTranslucentText",
                        "native": true,
                        "param": [
                            [
                                "bool",
                                "bNewTranslucency"
                            ]
                        ],
                        "return": ""
                    },
                    "EnableWordWrap": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "EnableWordWrap",
                        "native": true,
                        "param": [
                            [
                                "bool",
                                "bNewWordWrap"
                            ]
                        ],
                        "return": ""
                    },
                    "GetAlignments": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetAlignments",
                        "native": true,
                        "param": [
                            [
                                "out",
                                "EHAlign",
                                "hAlign"
                            ],
                            [
                                "out",
                                "EVAlign",
                                "vAlign"
                            ]
                        ],
                        "return": ""
                    },
                    "GetFontHeight": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetFontHeight",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "bool",
                                "bIncludeSpace"
                            ]
                        ],
                        "return": ""
                    },
                    "GetFonts": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetFonts",
                        "native": true,
                        "param": [
                            [
                                "out",
                                "font",
                                "normalFont"
                            ],
                            [
                                "out",
                                "font",
                                "boldFont"
                            ]
                        ],
                        "return": ""
                    },
                    "GetHorizontalAlignment": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetHorizontalAlignment",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "GetStyle": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetStyle",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "GetTextColor": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetTextColor",
                        "native": true,
                        "param": [
                            [
                                "out",
                                "color",
                                "textColor"
                            ]
                        ],
                        "return": ""
                    },
                    "GetTextVSpacing": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetTextVSpacing",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "GetTileColor": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetTileColor",
                        "native": true,
                        "param": [
                            [
                                "out",
                                "color",
                                "tileColor"
                            ]
                        ],
                        "return": ""
                    },
                    "GetVerticalAlignment": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetVerticalAlignment",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "IsDrawingEnabled": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "IsDrawingEnabled",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "IsMaskingEnabled": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "IsMaskingEnabled",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "IsModulationEnabled": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "IsModulationEnabled",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "IsSmoothingEnabled": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "IsSmoothingEnabled",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "IsSpecialTextEnabled": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "IsSpecialTextEnabled",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "IsTranslucencyEnabled": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "IsTranslucencyEnabled",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "IsTranslucentTextEnabled": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "IsTranslucentTextEnabled",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "IsWordWrapEnabled": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "IsWordWrapEnabled",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "PopGC": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "PopGC",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "int",
                                "gcNum"
                            ]
                        ],
                        "return": ""
                    },
                    "PushGC": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "PushGC",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "SetAlignments": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetAlignments",
                        "native": true,
                        "param": [
                            [
                                "EHAlign",
                                "newHAlign"
                            ],
                            [
                                "EVAlign",
                                "newVAlign"
                            ]
                        ],
                        "return": ""
                    },
                    "SetBoldFont": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetBoldFont",
                        "native": true,
                        "param": [
                            [
                                "font",
                                "newBoldFont"
                            ]
                        ],
                        "return": ""
                    },
                    "SetFont": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetFont",
                        "native": true,
                        "param": [
                            [
                                "font",
                                "newFont"
                            ]
                        ],
                        "return": ""
                    },
                    "SetFonts": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetFonts",
                        "native": true,
                        "param": [
                            [
                                "font",
                                "newNormalFont"
                            ],
                            [
                                "font",
                                "newBoldFont"
                            ]
                        ],
                        "return": ""
                    },
                    "SetHorizontalAlignment": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetHorizontalAlignment",
                        "native": true,
                        "param": [
                            [
                                "EHAlign",
                                "newHAlign"
                            ]
                        ],
                        "return": ""
                    },
                    "SetNormalFont": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetNormalFont",
                        "native": true,
                        "param": [
                            [
                                "font",
                                "newNormalFont"
                            ]
                        ],
                        "return": ""
                    },
                    "SetStyle": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetStyle",
                        "native": true,
                        "param": [
                            [
                                "EDrawStyle",
                                "newStyle"
                            ]
                        ],
                        "return": ""
                    },
                    "SetTextColor": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetTextColor",
                        "native": true,
                        "param": [
                            [
                                "color",
                                "newTextColor"
                            ]
                        ],
                        "return": ""
                    },
                    "SetTextColorRGB": {
                        "body": "{\n\tnewColor.r = red;\n\tnewColor.g = green;\n\tnewColor.b = blue;\n\tSetTextColor(newColor);\n}",
                        "locals": [
                            "local color newColor;"
                        ],
                        "modifiers": [],
                        "name": "SetTextColorRGB",
                        "native": false,
                        "param": [
                            [
                                "INT",
                                "red"
                            ],
                            [
                                "INT",
                                "green"
                            ],
                            [
                                "INT",
                                "blue"
                            ]
                        ],
                        "return": ""
                    },
                    "SetTextVSpacing": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetTextVSpacing",
                        "native": true,
                        "param": [
                            [
                                "float",
                                "newVSpacing"
                            ]
                        ],
                        "return": ""
                    },
                    "SetTileColor": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetTileColor",
                        "native": true,
                        "param": [
                            [
                                "color",
                                "newTileColor"
                            ]
                        ],
                        "return": ""
                    },
                    "SetTileColorRGB": {
                        "body": "{\n\tnewColor.r = red;\n\tnewColor.g = green;\n\tnewColor.b = blue;\n\tSetTileColor(newColor);\n}",
                        "locals": [
                            "local color newColor;"
                        ],
                        "modifiers": [],
                        "name": "SetTileColorRGB",
                        "native": false,
                        "param": [
                            [
                                "INT",
                                "red"
                            ],
                            [
                                "INT",
                                "green"
                            ],
                            [
                                "INT",
                                "blue"
                            ]
                        ],
                        "return": ""
                    },
                    "SetVerticalAlignment": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetVerticalAlignment",
                        "native": true,
                        "param": [
                            [
                                "EVAlign",
                                "newVAlign"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 185,
                "replication": "",
                "states": [],
                "variables": [
                    "var private native Canvas canvas;",
                    "var private ClipRect  gcClipRect;",
                    "var private byte      style;",
                    "var private bool      bSmoothed;",
                    "var private bool      bDrawEnabled;",
                    "var private bool      bMasked;",
                    "var private bool      bTranslucent;",
                    "var private bool      bModulated;",
                    "var private bool      bTextTranslucent;",
                    "var private int       polyFlags;",
                    "var private int       textPolyFlags;",
                    "var private color     tileColor;",
                    "var private plane     tilePlane;",
                    "var private color     textColor;",
                    "var private plane     textPlane;",
                    "var private font      normalFont;",
                    "var private font      boldFont;",
                    "var private texture   underlineTexture;",
                    "var private float     underlineHeight;",
                    "var private float     baselineOffset;",
                    "var private float     textVSpacing;",
                    "var private EHAlign   hAlign;",
                    "var private EVAlign   vAlign;",
                    "var private bool      bWordWrap;",
                    "var private bool      bParseMetachars;",
                    "var private int       hMultiplier;",
                    "var private int       vMultiplier;",
                    "var private bool      bFree;",
                    "var private int       gcCount;",
                    "var private GC        gcStack;",
                    "var private GC        gcFree;",
                    "var private GC        gcOwner;"
                ]
            }
        },
        "LargeTextWindow.uc": {
            "body": "//=============================================================================\n// LargeTextWindow.\n//=============================================================================\nclass LargeTextWindow extends TextWindow\n\tnative\n\tnoexport;\n\n// ----------------------------------------------------------------------\n// Structures\n\nstruct XTextParams\n{\n\tvar bool  bDirty;\n\tvar bool  bSpecialText;\n\tvar int   dirtyStart;\n\tvar int   dirtyCount;\n\tvar font  normalFont;\n\tvar font  boldFont;\n\tvar float destWidth;\n};\n\n\n// ----------------------------------------------------------------------\n// Variables\n\nvar const float vSpace;\n\nvar const float lineHeight;\n\nvar private XTextParams textParams;\nvar native private DynamicArray rowData;\n\nvar private XTextParams queryTextParams;\nvar native private DynamicArray queryRowData;\n\nvar native private DynamicArray tempRowData;\n\n\n// ----------------------------------------------------------------------\n// Intrinsics\n\nnative(1860) final function SetVerticalSpacing(optional float newVSpace);\n\ndefaultproperties\n{\n}\n",
            "name": "LargeTextWindow.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "TextWindow",
                "functions": {
                    "SetVerticalSpacing": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetVerticalSpacing",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "float",
                                "newVSpace"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 47,
                "replication": "",
                "states": [],
                "variables": [
                    "var bool  bDirty;",
                    "var bool  bSpecialText;",
                    "var int   dirtyStart;",
                    "var int   dirtyCount;",
                    "var font  normalFont;",
                    "var font  boldFont;",
                    "var float destWidth;",
                    "var const float vSpace;",
                    "var const float lineHeight;",
                    "var private XTextParams textParams;",
                    "var native private DynamicArray rowData;",
                    "var private XTextParams queryTextParams;",
                    "var native private DynamicArray queryRowData;",
                    "var native private DynamicArray tempRowData;"
                ]
            }
        },
        "ListWindow.uc": {
            "body": "//=============================================================================\n// ListWindow.\n//=============================================================================\nclass ListWindow extends Window\n\tnative\n\tnoexport;\n\n\n// ----------------------------------------------------------------------\n// Variables\n\nvar const string            delimiter;\nvar const color             inverseColor;\nvar const texture           highlightTexture;\nvar const texture           focusTexture;\nvar const color             highlightColor;\nvar const color             focusColor;\nvar const float             focusThickness;\n\nvar const native DynamicArray rows;\nvar const native DynamicArray cols;\n\nvar const bool              bAutoSort;\nvar const bool              bAutoExpandColumns;\nvar const bool              bMultiSelect;\nvar const float             colMargin;\nvar const float             rowMargin;\n\nvar const bool              bHotKeys;\nvar const int               hotKeyCol;\n\nvar const float             lineSize;\n\nvar const sound             activateSound;\nvar const sound             moveSound;\n\nvar private int             numSelected;\nvar private native int      focusLine;\nvar private native int      anchorLine;\nvar private bool            bDragging;\nvar private int             lastIndex;\nvar private float           remainingDelay;\n\nvar private string          hotKeyString;\nvar private float           hotKeyTimer;\n\n\n// ----------------------------------------------------------------------\n// Intrinsics\n\nnative(1720) final function int IndexToRowId(int index);\nnative(1721) final function int RowIdToIndex(int rowId);\nnative(1722) final function SetRowClientInt(int rowId, int clientInt);\nnative(1723) final function int GetRowClientInt(int rowId);\nnative(1724) final function SetRowClientObject(int rowId, object clientObj);\nnative(1725) final function object GetRowClientObject(int rowId);\n\nnative(1730) final function int AddRow(coerce string rowStr, optional int clientData);\nnative(1731) final function DeleteRow(int rowId);\nnative(1732) final function ModifyRow(int rowId, coerce string rowStr);\nnative(1733) final function DeleteAllRows();\nnative(1734) final function SetField(int rowId, int colIndex, coerce string fieldStr);\nnative(1735) final function string GetField(int rowId, int colIndex);\nnative(1736) final function SetFieldValue(int rowId, int colIndex, float newValue);\nnative(1737) final function float GetFieldValue(int rowId, int colIndex);\n\nnative(1740) final function int GetNumRows();\nnative(1741) final function int GetNumSelectedRows();\nnative(1742) final function SelectRow(int rowId, optional bool bSelect);\nnative(1743) final function SelectAllRows(optional bool bSelect);\nnative(1744) final function SelectToRow(int rowId, optional bool bClearRows,\n                                        optional bool bInvert, optional bool bSpanRows);\nnative(1745) final function ToggleRowSelection(int rowId);\nnative(1746) final function bool IsRowSelected(int rowId);\nnative(1747) final function int GetSelectedRow();\n\nnative(1750) final function MoveRow(EMoveList move, optional bool bSelect,\n                                    optional bool bClearRows, optional bool bDrag);\nnative(1751) final function SetRow(int rowId, optional bool bSelect,\n                                   optional bool bClearRows, optional bool bDrag);\n\nnative(1755) final function SetFocusRow(int rowId, optional bool bMoveTo, optional bool bAnchor);\nnative(1756) final function int GetFocusRow();\n\nnative(1760) final function SetNumColumns(int newCols);\nnative(1761) final function int GetNumColumns();\nnative(1762) final function ResizeColumns(optional bool bExpandOnly);\n\nnative(1765) final function SetColumnTitle(int colIndex, coerce string title);\nnative(1766) final function string GetColumnTitle(int colIndex);\nnative(1767) final function SetColumnWidth(int colIndex, float newWidth);\nnative(1768) final function float GetColumnWidth(int colIndex);\nnative(1769) final function SetColumnAlignment(int colIndex, EHAlign newAlign);\nnative(1770) final function EHAlign GetColumnAlignment(int colIndex);\nnative(1771) final function SetColumnColor(int colIndex, color newColor);\nnative(1772) final function GetColumnColor(int colIndex, out color colColor);\nnative(1773) final function SetColumnFont(int colIndex, font newFont);\nnative(1774) final function font GetColumnFont(int colIndex);\nnative(1775) final function SetColumnType(int colIndex, EColumnType newType, optional coerce string newFmt);\nnative(1776) final function EColumnType GetColumnType(int colIndex);\nnative(1777) final function HideColumn(int colIndex, optional bool bHide);\nnative(1778) final function bool IsColumnHidden(int colIndex);\n\nnative(1780) final function SetSortColumn(int colIndex, optional bool bReverse,\n                                          optional bool bCaseSensitive);\nnative(1781) final function AddSortColumn(int colIndex, optional bool bReverse,\n                                          optional bool bCaseSensitive);\nnative(1782) final function RemoveSortColumn(int colIndex);\nnative(1783) final function ResetSortColumns(optional bool bSort);\nnative(1784) final function Sort();\n\nnative(1785) final function EnableHotKeys(optional bool bEnable);\nnative(1786) final function SetHotKeyColumn(int colIndex);\n\nnative(1790) final function EnableAutoSort(optional bool bAutoSort);\nnative(1791) final function bool IsAutoSortEnabled();\nnative(1792) final function EnableAutoExpandColumns(optional bool bAutoExpand);\nnative(1793) final function bool IsAutoExpandColumnsEnabled();\nnative(1794) final function EnableMultiSelect(optional bool bEnableMultiSelect);\nnative(1795) final function bool IsMultiSelectEnabled();\n\nnative(1800) final function SetFieldMargins(float newMarginWidth, float newMarginHeight);\nnative(1801) final function GetFieldMargins(out float marginWidth, out float marginHeight);\nnative(1802) final function int GetPageSize();\nnative(1803) final function SetDelimiter(string newDelimiter);\nnative(1804) final function SetHighlightTextColor(color newColor);\nnative(1805) final function SetHighlightTexture(texture newTexture);\nnative(1806) final function SetHighlightColor(color newColor);\nnative(1807) final function SetFocusTexture(texture newTexture);\nnative(1808) final function SetFocusColor(color newColor);\nnative(1809) final function SetFocusThickness(float newThickness);\n\nnative(1810) final function ShowFocusRow();\n\nnative(1811) final function SetListSounds(optional sound activateSound,\n                                          optional sound moveSound);\nnative(1812) final function PlayListSound(sound listSound,\n                                          optional float volume,\n                                          optional float pitch);\n\n\n// ----------------------------------------------------------------------\n\nfunction SetColumnColorRGB(INT colIndex, INT red, INT green, INT blue)\n{\n\tlocal color newColor;\n\tnewColor.r = red;\n\tnewColor.g = green;\n\tnewColor.b = blue;\n\tSetColumnColor(colIndex, newColor);\n}\n\n\n// ----------------------------------------------------------------------\n\nfunction SetHighlightTextColorRGB(INT red, INT green, INT blue)\n{\n\tlocal color newColor;\n\tnewColor.r = red;\n\tnewColor.g = green;\n\tnewColor.b = blue;\n\tSetHighlightTextColor(newColor);\n}\n\n\n// ----------------------------------------------------------------------\n\nfunction SetHighlightColorRGB(INT red, INT green, INT blue)\n{\n\tlocal color newColor;\n\tnewColor.r = red;\n\tnewColor.g = green;\n\tnewColor.b = blue;\n\tSetHighlightColor(newColor);\n}\n\n\n// ----------------------------------------------------------------------\n\nfunction SetFocusColorRGB(INT red, INT green, INT blue)\n{\n\tlocal color newColor;\n\tnewColor.r = red;\n\tnewColor.g = green;\n\tnewColor.b = blue;\n\tSetFocusColor(newColor);\n}\n\n\n// ----------------------------------------------------------------------\n// VirtualKeyPressed() : Handles virtual keypresses\n\nevent bool VirtualKeyPressed(EInputKey key, bool bRepeat)\n{\n\tlocal bool retval;\n\tlocal bool bDrag;\n\tlocal bool bSelect;\n\tlocal bool bClear;\n\n\tretval = Super.VirtualKeyPressed(key, bRepeat);\n\n\tbDrag   = IsKeyDown(IK_Shift);\n\tbSelect = !IsKeyDown(IK_Ctrl);\n\tbClear  = !IsKeyDown(IK_Ctrl);\n\n\t// Handle keys\n\tswitch (key)\n\t{\n\t\tcase IK_Up:\n\t\t\tMoveRow(MOVELIST_Up, bSelect, bClear, bDrag);\n\t\t\tretval = true;\n\t\t\tbreak;\n\t\tcase IK_Down:\n\t\t\tMoveRow(MOVELIST_Down, bSelect, bClear, bDrag);\n\t\t\tretval = true;\n\t\t\tbreak;\n\t\tcase IK_PageUp:\n\t\t\tMoveRow(MOVELIST_PageUp, bSelect, bClear, bDrag);\n\t\t\tretval = true;\n\t\t\tbreak;\n\t\tcase IK_PageDown:\n\t\t\tMoveRow(MOVELIST_PageDown, bSelect, bClear, bDrag);\n\t\t\tretval = true;\n\t\t\tbreak;\n\t\tcase IK_Home:\n\t\t\tMoveRow(MOVELIST_Home, bSelect, bClear, bDrag);\n\t\t\tretval = true;\n\t\t\tbreak;\n\t\tcase IK_End:\n\t\t\tMoveRow(MOVELIST_End, bSelect, bClear, bDrag);\n\t\t\tretval = true;\n\t\t\tbreak;\n\n\t\tcase IK_Space:  // toggle selection\n\t\t\tToggleRowSelection(GetFocusRow());\n\t\t\tretval = true;\n\t\t\tbreak;\n\n\t}\n\n\t// Return TRUE if we handled this\n\treturn (retval);\n\n}\n\ndefaultproperties\n{\n     highlightTexture=Texture'Extension.Solid'\n     focusTexture=Texture'Extension.Dithered'\n}\n",
            "name": "ListWindow.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "highlightTexture=Texture'Extension.Solid'",
                    "focusTexture=Texture'Extension.Dithered'"
                ],
                "exec": [],
                "extends": "Window",
                "functions": {
                    "AddRow": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "AddRow",
                        "native": true,
                        "param": [
                            [
                                "coerce",
                                "string",
                                "rowStr"
                            ],
                            [
                                "optional",
                                "int",
                                "clientData"
                            ]
                        ],
                        "return": ""
                    },
                    "DeleteAllRows": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "DeleteAllRows",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "DeleteRow": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "DeleteRow",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "rowId"
                            ]
                        ],
                        "return": ""
                    },
                    "EnableAutoExpandColumns": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "EnableAutoExpandColumns",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "bool",
                                "bAutoExpand"
                            ]
                        ],
                        "return": ""
                    },
                    "EnableAutoSort": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "EnableAutoSort",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "bool",
                                "bAutoSort"
                            ]
                        ],
                        "return": ""
                    },
                    "EnableHotKeys": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "EnableHotKeys",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "bool",
                                "bEnable"
                            ]
                        ],
                        "return": ""
                    },
                    "EnableMultiSelect": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "EnableMultiSelect",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "bool",
                                "bEnableMultiSelect"
                            ]
                        ],
                        "return": ""
                    },
                    "GetColumnAlignment": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetColumnAlignment",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "colIndex"
                            ]
                        ],
                        "return": ""
                    },
                    "GetColumnColor": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetColumnColor",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "colIndex"
                            ],
                            [
                                "out",
                                "color",
                                "colColor"
                            ]
                        ],
                        "return": ""
                    },
                    "GetColumnFont": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetColumnFont",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "colIndex"
                            ]
                        ],
                        "return": ""
                    },
                    "GetColumnTitle": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetColumnTitle",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "colIndex"
                            ]
                        ],
                        "return": ""
                    },
                    "GetColumnType": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetColumnType",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "colIndex"
                            ]
                        ],
                        "return": ""
                    },
                    "GetColumnWidth": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetColumnWidth",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "colIndex"
                            ]
                        ],
                        "return": ""
                    },
                    "GetField": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetField",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "rowId"
                            ],
                            [
                                "int",
                                "colIndex"
                            ]
                        ],
                        "return": ""
                    },
                    "GetFieldMargins": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetFieldMargins",
                        "native": true,
                        "param": [
                            [
                                "out",
                                "float",
                                "marginWidth"
                            ],
                            [
                                "out",
                                "float",
                                "marginHeight"
                            ]
                        ],
                        "return": ""
                    },
                    "GetFieldValue": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetFieldValue",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "rowId"
                            ],
                            [
                                "int",
                                "colIndex"
                            ]
                        ],
                        "return": ""
                    },
                    "GetFocusRow": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetFocusRow",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "GetNumColumns": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetNumColumns",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "GetNumRows": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetNumRows",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "GetNumSelectedRows": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetNumSelectedRows",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "GetPageSize": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetPageSize",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "GetRowClientInt": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetRowClientInt",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "rowId"
                            ]
                        ],
                        "return": ""
                    },
                    "GetRowClientObject": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetRowClientObject",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "rowId"
                            ]
                        ],
                        "return": ""
                    },
                    "GetSelectedRow": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetSelectedRow",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "HideColumn": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "HideColumn",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "colIndex"
                            ],
                            [
                                "optional",
                                "bool",
                                "bHide"
                            ]
                        ],
                        "return": ""
                    },
                    "IndexToRowId": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "IndexToRowId",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "index"
                            ]
                        ],
                        "return": ""
                    },
                    "IsAutoExpandColumnsEnabled": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "IsAutoExpandColumnsEnabled",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "IsAutoSortEnabled": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "IsAutoSortEnabled",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "IsColumnHidden": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "IsColumnHidden",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "colIndex"
                            ]
                        ],
                        "return": ""
                    },
                    "IsMultiSelectEnabled": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "IsMultiSelectEnabled",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "IsRowSelected": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "IsRowSelected",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "rowId"
                            ]
                        ],
                        "return": ""
                    },
                    "ModifyRow": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "ModifyRow",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "rowId"
                            ],
                            [
                                "coerce",
                                "string",
                                "rowStr"
                            ]
                        ],
                        "return": ""
                    },
                    "RemoveSortColumn": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "RemoveSortColumn",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "colIndex"
                            ]
                        ],
                        "return": ""
                    },
                    "ResetSortColumns": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "ResetSortColumns",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "bool",
                                "bSort"
                            ]
                        ],
                        "return": ""
                    },
                    "ResizeColumns": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "ResizeColumns",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "bool",
                                "bExpandOnly"
                            ]
                        ],
                        "return": ""
                    },
                    "RowIdToIndex": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "RowIdToIndex",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "rowId"
                            ]
                        ],
                        "return": ""
                    },
                    "SelectAllRows": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SelectAllRows",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "bool",
                                "bSelect"
                            ]
                        ],
                        "return": ""
                    },
                    "SelectRow": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SelectRow",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "rowId"
                            ],
                            [
                                "optional",
                                "bool",
                                "bSelect"
                            ]
                        ],
                        "return": ""
                    },
                    "SetColumnAlignment": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetColumnAlignment",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "colIndex"
                            ],
                            [
                                "EHAlign",
                                "newAlign"
                            ]
                        ],
                        "return": ""
                    },
                    "SetColumnColor": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetColumnColor",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "colIndex"
                            ],
                            [
                                "color",
                                "newColor"
                            ]
                        ],
                        "return": ""
                    },
                    "SetColumnColorRGB": {
                        "body": "{\n\tnewColor.r = red;\n\tnewColor.g = green;\n\tnewColor.b = blue;\n\tSetColumnColor(colIndex, newColor);\n}",
                        "locals": [
                            "local color newColor;"
                        ],
                        "modifiers": [],
                        "name": "SetColumnColorRGB",
                        "native": false,
                        "param": [
                            [
                                "INT",
                                "colIndex"
                            ],
                            [
                                "INT",
                                "red"
                            ],
                            [
                                "INT",
                                "green"
                            ],
                            [
                                "INT",
                                "blue"
                            ]
                        ],
                        "return": ""
                    },
                    "SetColumnFont": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetColumnFont",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "colIndex"
                            ],
                            [
                                "font",
                                "newFont"
                            ]
                        ],
                        "return": ""
                    },
                    "SetColumnTitle": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetColumnTitle",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "colIndex"
                            ],
                            [
                                "coerce",
                                "string",
                                "title"
                            ]
                        ],
                        "return": ""
                    },
                    "SetColumnType": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetColumnType",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "colIndex"
                            ],
                            [
                                "EColumnType",
                                "newType"
                            ],
                            [
                                "optional",
                                "coerce",
                                "string",
                                "newFmt"
                            ]
                        ],
                        "return": ""
                    },
                    "SetColumnWidth": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetColumnWidth",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "colIndex"
                            ],
                            [
                                "float",
                                "newWidth"
                            ]
                        ],
                        "return": ""
                    },
                    "SetDelimiter": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetDelimiter",
                        "native": true,
                        "param": [
                            [
                                "string",
                                "newDelimiter"
                            ]
                        ],
                        "return": ""
                    },
                    "SetField": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetField",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "rowId"
                            ],
                            [
                                "int",
                                "colIndex"
                            ],
                            [
                                "coerce",
                                "string",
                                "fieldStr"
                            ]
                        ],
                        "return": ""
                    },
                    "SetFieldMargins": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetFieldMargins",
                        "native": true,
                        "param": [
                            [
                                "float",
                                "newMarginWidth"
                            ],
                            [
                                "float",
                                "newMarginHeight"
                            ]
                        ],
                        "return": ""
                    },
                    "SetFieldValue": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetFieldValue",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "rowId"
                            ],
                            [
                                "int",
                                "colIndex"
                            ],
                            [
                                "float",
                                "newValue"
                            ]
                        ],
                        "return": ""
                    },
                    "SetFocusColor": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetFocusColor",
                        "native": true,
                        "param": [
                            [
                                "color",
                                "newColor"
                            ]
                        ],
                        "return": ""
                    },
                    "SetFocusColorRGB": {
                        "body": "{\n\tnewColor.r = red;\n\tnewColor.g = green;\n\tnewColor.b = blue;\n\tSetFocusColor(newColor);\n}",
                        "locals": [
                            "local color newColor;"
                        ],
                        "modifiers": [],
                        "name": "SetFocusColorRGB",
                        "native": false,
                        "param": [
                            [
                                "INT",
                                "red"
                            ],
                            [
                                "INT",
                                "green"
                            ],
                            [
                                "INT",
                                "blue"
                            ]
                        ],
                        "return": ""
                    },
                    "SetFocusRow": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetFocusRow",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "rowId"
                            ],
                            [
                                "optional",
                                "bool",
                                "bMoveTo"
                            ],
                            [
                                "optional",
                                "bool",
                                "bAnchor"
                            ]
                        ],
                        "return": ""
                    },
                    "SetFocusTexture": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetFocusTexture",
                        "native": true,
                        "param": [
                            [
                                "texture",
                                "newTexture"
                            ]
                        ],
                        "return": ""
                    },
                    "SetFocusThickness": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetFocusThickness",
                        "native": true,
                        "param": [
                            [
                                "float",
                                "newThickness"
                            ]
                        ],
                        "return": ""
                    },
                    "SetHighlightColor": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetHighlightColor",
                        "native": true,
                        "param": [
                            [
                                "color",
                                "newColor"
                            ]
                        ],
                        "return": ""
                    },
                    "SetHighlightColorRGB": {
                        "body": "{\n\tnewColor.r = red;\n\tnewColor.g = green;\n\tnewColor.b = blue;\n\tSetHighlightColor(newColor);\n}",
                        "locals": [
                            "local color newColor;"
                        ],
                        "modifiers": [],
                        "name": "SetHighlightColorRGB",
                        "native": false,
                        "param": [
                            [
                                "INT",
                                "red"
                            ],
                            [
                                "INT",
                                "green"
                            ],
                            [
                                "INT",
                                "blue"
                            ]
                        ],
                        "return": ""
                    },
                    "SetHighlightTextColor": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetHighlightTextColor",
                        "native": true,
                        "param": [
                            [
                                "color",
                                "newColor"
                            ]
                        ],
                        "return": ""
                    },
                    "SetHighlightTextColorRGB": {
                        "body": "{\n\tnewColor.r = red;\n\tnewColor.g = green;\n\tnewColor.b = blue;\n\tSetHighlightTextColor(newColor);\n}",
                        "locals": [
                            "local color newColor;"
                        ],
                        "modifiers": [],
                        "name": "SetHighlightTextColorRGB",
                        "native": false,
                        "param": [
                            [
                                "INT",
                                "red"
                            ],
                            [
                                "INT",
                                "green"
                            ],
                            [
                                "INT",
                                "blue"
                            ]
                        ],
                        "return": ""
                    },
                    "SetHighlightTexture": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetHighlightTexture",
                        "native": true,
                        "param": [
                            [
                                "texture",
                                "newTexture"
                            ]
                        ],
                        "return": ""
                    },
                    "SetHotKeyColumn": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetHotKeyColumn",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "colIndex"
                            ]
                        ],
                        "return": ""
                    },
                    "SetNumColumns": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetNumColumns",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "newCols"
                            ]
                        ],
                        "return": ""
                    },
                    "SetRowClientInt": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetRowClientInt",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "rowId"
                            ],
                            [
                                "int",
                                "clientInt"
                            ]
                        ],
                        "return": ""
                    },
                    "SetRowClientObject": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetRowClientObject",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "rowId"
                            ],
                            [
                                "object",
                                "clientObj"
                            ]
                        ],
                        "return": ""
                    },
                    "ShowFocusRow": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "ShowFocusRow",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "Sort": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "Sort",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "ToggleRowSelection": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "ToggleRowSelection",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "rowId"
                            ]
                        ],
                        "return": ""
                    },
                    "VirtualKeyPressed": {
                        "body": "{\n\n\tretval = Super.VirtualKeyPressed(key, bRepeat);\n\n\tbDrag   = IsKeyDown(IK_Shift);\n\tbSelect = !IsKeyDown(IK_Ctrl);\n\tbClear  = !IsKeyDown(IK_Ctrl);\n\n\t// Handle keys\n\tswitch (key)\n\t{\n\t\tcase IK_Up:\n\t\t\tMoveRow(MOVELIST_Up, bSelect, bClear, bDrag);\n\t\t\tretval = true;\n\t\t\tbreak;\n\t\tcase IK_Down:\n\t\t\tMoveRow(MOVELIST_Down, bSelect, bClear, bDrag);\n\t\t\tretval = true;\n\t\t\tbreak;\n\t\tcase IK_PageUp:\n\t\t\tMoveRow(MOVELIST_PageUp, bSelect, bClear, bDrag);\n\t\t\tretval = true;\n\t\t\tbreak;\n\t\tcase IK_PageDown:\n\t\t\tMoveRow(MOVELIST_PageDown, bSelect, bClear, bDrag);\n\t\t\tretval = true;\n\t\t\tbreak;\n\t\tcase IK_Home:\n\t\t\tMoveRow(MOVELIST_Home, bSelect, bClear, bDrag);\n\t\t\tretval = true;\n\t\t\tbreak;\n\t\tcase IK_End:\n\t\t\tMoveRow(MOVELIST_End, bSelect, bClear, bDrag);\n\t\t\tretval = true;\n\t\t\tbreak;\n\n\t\tcase IK_Space:  // toggle selection\n\t\t\tToggleRowSelection(GetFocusRow());\n\t\t\tretval = true;\n\t\t\tbreak;\n\n\t}\n\n\t// Return TRUE if we handled this\n\treturn (retval);\n\n}",
                        "locals": [
                            "local bool retval;",
                            "local bool bDrag;",
                            "local bool bSelect;",
                            "local bool bClear;"
                        ],
                        "modifiers": [],
                        "name": "VirtualKeyPressed",
                        "native": false,
                        "param": [
                            [
                                "EInputKey",
                                "key"
                            ],
                            [
                                "bool",
                                "bRepeat"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 251,
                "replication": "",
                "states": [],
                "variables": [
                    "var const string            delimiter;",
                    "var const color             inverseColor;",
                    "var const texture           highlightTexture;",
                    "var const texture           focusTexture;",
                    "var const color             highlightColor;",
                    "var const color             focusColor;",
                    "var const float             focusThickness;",
                    "var const native DynamicArray rows;",
                    "var const native DynamicArray cols;",
                    "var const bool              bAutoSort;",
                    "var const bool              bAutoExpandColumns;",
                    "var const bool              bMultiSelect;",
                    "var const float             colMargin;",
                    "var const float             rowMargin;",
                    "var const bool              bHotKeys;",
                    "var const int               hotKeyCol;",
                    "var const float             lineSize;",
                    "var const sound             activateSound;",
                    "var const sound             moveSound;",
                    "var private int             numSelected;",
                    "var private native int      focusLine;",
                    "var private native int      anchorLine;",
                    "var private bool            bDragging;",
                    "var private int             lastIndex;",
                    "var private float           remainingDelay;",
                    "var private string          hotKeyString;",
                    "var private float           hotKeyTimer;"
                ]
            }
        },
        "ModalWindow.uc": {
            "body": "//=============================================================================\n// ModalWindow.\n//=============================================================================\nclass ModalWindow extends TabGroupWindow\n\tnative\n\tnoexport;\n\n// ----------------------------------------------------------------------\n// Variables\n\n// Mouse focus mode\nvar EMouseFocusMode             focusMode;\n\n// List of tab groups\nvar private Window              preferredFocus;\nvar native private DynamicArray tabGroupWindowList;\n\nvar private Window              acceleratorTable[0xFF];\nvar private bool                bDirtyAccelerators;\n\n// Intrinsics\nnative(1500) final function SetMouseFocusMode(EMouseFocusMode newFocusMode);\nnative(1501) final function bool IsCurrentModal();\n\ndefaultproperties\n{\n}\n",
            "name": "ModalWindow.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "TabGroupWindow",
                "functions": {
                    "IsCurrentModal": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "IsCurrentModal",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "SetMouseFocusMode": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetMouseFocusMode",
                        "native": true,
                        "param": [
                            [
                                "EMouseFocusMode",
                                "newFocusMode"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 28,
                "replication": "",
                "states": [],
                "variables": [
                    "var EMouseFocusMode             focusMode;",
                    "var private Window              preferredFocus;",
                    "var native private DynamicArray tabGroupWindowList;",
                    "var private Window              acceleratorTable[0xFF];",
                    "var private bool                bDirtyAccelerators;"
                ]
            }
        },
        "PlayerPawnExt.uc": {
            "body": "//=============================================================================\n// PlayerPawnExt.\n//=============================================================================\nclass PlayerPawnExt extends PlayerPawn\n\tnative\n\tconfig\n\tnoexport;\n\n// ----------------------------------------------------------------------\n// Structure used for actor references (PRIVATE!)\n\nstruct ActorRef\n{\n\tvar Actor actor;\n\tvar int   refCount;\n};\n\n\n// ----------------------------------------------------------------------\n// Variables\n\nvar const travel FlagBase flagBase;     // Knowledge base for the player\n\nvar const transient RootWindow rootWindow; // Root window for window manager\n\nvar private ActorRef actorList[32];  // List of valid actors\nvar private int      actorCount;     // Count of valid actors\n\n\n// ----------------------------------------------------------------------\n// Intrinsics\n\nnative(1050) final function PreRenderWindows(canvas Canvas);\nnative(1051) final function PostRenderWindows(canvas Canvas);\nnative(1052) final function InitRootWindow();\n\n// ----------------------------------------------------------------------\n// Network replication\n\nreplication\n{\n\t\n}\n\n// ----------------------------------------------------------------------\n// PreRender() : Called before all 3D rendering is done for the\n//               specified canvas\n\nsimulated event PreRender(canvas Canvas)\n{\n\tSuper.PreRender(Canvas);\n\tPreRenderWindows(Canvas);\n}\n\n\n// ----------------------------------------------------------------------\n// RenderOverlays() : Called when weapons and other items must be drawn\n\nsimulated event RenderOverlays(canvas Canvas)\n{\n\tSuper.RenderOverlays(Canvas);\n}\n\n\n// ----------------------------------------------------------------------\n// PostRenderFlash() : Called when after the 3D rendering is done for the\n//                     specified canvas, but before the screen flash is\n//                     completed\n\nsimulated event PostRenderFlash(canvas Canvas)\n{\n\tPostRenderWindows(Canvas);\n\tSuper.PostRenderFlash(Canvas);\n}\n\n\n// ----------------------------------------------------------------------\n// PostRender() : Called after all 3D rendering has been done for the\n//                specified canvas\n\nsimulated event PostRender(canvas Canvas)\n{\n\tSuper.PostRender(Canvas);\n}\n\n\n// ----------------------------------------------------------------------\n// Possess() : Called when a player possesses a pawn\n\nfunction Possess()\n{\n\tSuper.Possess();\n\tInitRootWindow();\n}\n\n\n// ----------------------------------------------------------------------\n// Destroyed() : Called when the PlayerPawn has been destroyed\n\nsimulated event Destroyed()\n{\n\tSuper.Destroyed();\n}\n\n\n// ----------------------------------------------------------------------\n// ClientMessage() : Handles log messages for the client\n\nfunction ClientMessage(coerce string msg, optional Name type, optional bool bBeep)\n{\n\tlocal bool bHandled;\n\n\t// See if the root window can use this event\n\tbHandled = false;\n\tif (rootWindow != None)\n\t\tif (rootWindow.ClientMessage(msg, type, bBeep))\n\t\t\tbHandled = true;\n\n\t// If not, call the superclass\n\tif (!bHandled)\n\t\tSuper.ClientMessage(msg, type, bBeep);\n}\n\n// The player wants to switch to weapon group numer I.\nexec function SwitchWeapon (byte F )\n{\n\tlocal weapon newWeapon;\n\n\tif ( Inventory == None )\n\t\treturn;\n\tif ( (Weapon != None) && (Weapon.Inventory != None) )\n\t\tnewWeapon = Weapon.Inventory.WeaponChange(F);\n\telse\n\t\tnewWeapon = None;\t\n\tif ( newWeapon == None )\n\t\tnewWeapon = Inventory.WeaponChange(F);\n\tif ( newWeapon == None )\n\t\treturn;\n\n\tif ( Weapon == None )\n\t{\n\t\tPendingWeapon = newWeapon;\n\t\tChangedWeapon();\n\t}\n\telse if ( (Weapon != newWeapon) && Weapon.PutDown() )\n\t\tPendingWeapon = newWeapon;\n}\n\ndefaultproperties\n{\n}\n",
            "name": "PlayerPawnExt.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "PlayerPawn",
                "functions": {
                    "ClientMessage": {
                        "body": "{\n\n\t// See if the root window can use this event\n\tbHandled = false;\n\tif (rootWindow != None)\n\t\tif (rootWindow.ClientMessage(msg, type, bBeep))\n\t\t\tbHandled = true;\n\n\t// If not, call the superclass\n\tif (!bHandled)\n\t\tSuper.ClientMessage(msg, type, bBeep);\n}",
                        "locals": [
                            "local bool bHandled;"
                        ],
                        "modifiers": [],
                        "name": "ClientMessage",
                        "native": false,
                        "param": [
                            [
                                "coerce",
                                "string",
                                "msg"
                            ],
                            [
                                "optional",
                                "Name",
                                "type"
                            ],
                            [
                                "optional",
                                "bool",
                                "bBeep"
                            ]
                        ],
                        "return": ""
                    },
                    "Destroyed": {
                        "body": "{\n\tSuper.Destroyed();\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Destroyed",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "InitRootWindow": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "InitRootWindow",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "Possess": {
                        "body": "{\n\tSuper.Possess();\n\tInitRootWindow();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Possess",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PostRender": {
                        "body": "{\n\tSuper.PostRender(Canvas);\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PostRender",
                        "native": false,
                        "param": [
                            [
                                "canvas",
                                "Canvas"
                            ]
                        ],
                        "return": ""
                    },
                    "PostRenderFlash": {
                        "body": "{\n\tPostRenderWindows(Canvas);\n\tSuper.PostRenderFlash(Canvas);\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PostRenderFlash",
                        "native": false,
                        "param": [
                            [
                                "canvas",
                                "Canvas"
                            ]
                        ],
                        "return": ""
                    },
                    "PostRenderWindows": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "PostRenderWindows",
                        "native": true,
                        "param": [
                            [
                                "canvas",
                                "Canvas"
                            ]
                        ],
                        "return": ""
                    },
                    "PreRender": {
                        "body": "{\n\tSuper.PreRender(Canvas);\n\tPreRenderWindows(Canvas);\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreRender",
                        "native": false,
                        "param": [
                            [
                                "canvas",
                                "Canvas"
                            ]
                        ],
                        "return": ""
                    },
                    "PreRenderWindows": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "PreRenderWindows",
                        "native": true,
                        "param": [
                            [
                                "canvas",
                                "Canvas"
                            ]
                        ],
                        "return": ""
                    },
                    "RenderOverlays": {
                        "body": "{\n\tSuper.RenderOverlays(Canvas);\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "RenderOverlays",
                        "native": false,
                        "param": [
                            [
                                "canvas",
                                "Canvas"
                            ]
                        ],
                        "return": ""
                    },
                    "SwitchWeapon": {
                        "body": "{\n\n\tif ( Inventory == None )\n\t\treturn;\n\tif ( (Weapon != None) && (Weapon.Inventory != None) )\n\t\tnewWeapon = Weapon.Inventory.WeaponChange(F);\n\telse\n\t\tnewWeapon = None;\t\n\tif ( newWeapon == None )\n\t\tnewWeapon = Inventory.WeaponChange(F);\n\tif ( newWeapon == None )\n\t\treturn;\n\n\tif ( Weapon == None )\n\t{\n\t\tPendingWeapon = newWeapon;\n\t\tChangedWeapon();\n\t}\n\telse if ( (Weapon != newWeapon) && Weapon.PutDown() )\n\t\tPendingWeapon = newWeapon;\n}",
                        "locals": [
                            "local weapon newWeapon;"
                        ],
                        "modifiers": [
                            "exec"
                        ],
                        "name": "SwitchWeapon",
                        "native": false,
                        "param": [
                            [
                                "byte",
                                "F"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 152,
                "replication": "",
                "states": [],
                "variables": [
                    "var Actor actor;",
                    "var int   refCount;",
                    "var const travel FlagBase flagBase;     // Knowledge base for the player",
                    "var const transient RootWindow rootWindow; // Root window for window manager",
                    "var private ActorRef actorList[32];  // List of valid actors",
                    "var private int      actorCount;     // Count of valid actors"
                ]
            }
        },
        "RadioBoxWindow.uc": {
            "body": "//=============================================================================\n// RadioBoxWindow.\n//=============================================================================\nclass RadioBoxWindow extends TabGroupWindow\n\tnative\n\tnoexport;\n\n// ----------------------------------------------------------------------\n// Variables\n\nvar bool                        bOneCheck;\n\nvar native private DynamicArray toggleButtons;\nvar private ToggleWindow        currentSelection;\n\nnative(1820) final function ToggleWindow GetEnabledToggle();\n\ndefaultproperties\n{\n}\n",
            "name": "RadioBoxWindow.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "TabGroupWindow",
                "functions": {
                    "GetEnabledToggle": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetEnabledToggle",
                        "native": true,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 21,
                "replication": "",
                "states": [],
                "variables": [
                    "var bool                        bOneCheck;",
                    "var native private DynamicArray toggleButtons;",
                    "var private ToggleWindow        currentSelection;"
                ]
            }
        },
        "RootWindow.uc": {
            "body": "//=============================================================================\n// RootWindow.\n//=============================================================================\nclass RootWindow extends ModalWindow\n\tnative\n\tnoexport;\n\n// ----------------------------------------------------------------------\n// Execs\n\n#exec FONT    IMPORT FILE=Textures\\TechMedium.pcx          NAME=TechMedium\n#exec FONT    IMPORT FILE=Textures\\TechMedium_DS.pcx       NAME=TechMedium_DS\n#exec FONT    IMPORT FILE=Textures\\TechMedium_B.pcx        NAME=TechMedium_B\n#exec FONT    IMPORT FILE=Textures\\TechSmall.pcx           NAME=TechSmall\n#exec FONT    IMPORT FILE=Textures\\TechSmall_DS.pcx        NAME=TechSmall_DS\n#exec FONT    IMPORT FILE=Textures\\TechTiny.pcx            NAME=TechTiny\n#exec TEXTURE IMPORT FILE=Textures\\DefaultCursor.pcx       NAME=DefaultCursor\n#exec TEXTURE IMPORT FILE=Textures\\DefaultTextCursor.pcx   NAME=DefaultTextCursor\n#exec TEXTURE IMPORT FILE=Textures\\DefaultMoveCursor.pcx   NAME=DefaultMoveCursor\n#exec TEXTURE IMPORT FILE=Textures\\DefaultHMoveCursor.pcx  NAME=DefaultHMoveCursor\n#exec TEXTURE IMPORT FILE=Textures\\DefaultVMoveCursor.pcx  NAME=DefaultVMoveCursor\n#exec TEXTURE IMPORT FILE=Textures\\DefaultTLMoveCursor.pcx NAME=DefaultTLMoveCursor\n#exec TEXTURE IMPORT FILE=Textures\\DefaultTRMoveCursor.pcx NAME=DefaultTRMoveCursor\n#exec TEXTURE IMPORT FILE=Textures\\Solid.pcx               NAME=Solid\n#exec TEXTURE IMPORT FILE=Textures\\SolidGreen.pcx          NAME=SolidGreen\n#exec TEXTURE IMPORT FILE=Textures\\SolidYellow.pcx         NAME=SolidYellow\n#exec TEXTURE IMPORT FILE=Textures\\SolidRed.pcx            NAME=SolidRed\n#exec TEXTURE IMPORT FILE=Textures\\VisionBlue.pcx          NAME=VisionBlue\n#exec TEXTURE IMPORT FILE=Textures\\Dithered.pcx            NAME=Dithered\n\n\n// ----------------------------------------------------------------------\n// Variables\n\nvar const PlayerPawnExt parentPawn;         // APlayerPawnExt which owns this win\n\nvar private RootWindow  nextRootWindow;     // Next root window in global list\n\n// Cursor position info\nvar private float       mouseX;             // Cursor X pos\nvar private float       mouseY;             // Cursor Y pos\nvar private float       prevMouseX;         // Last cursor X pos\nvar private float       prevMouseY;         // Last cursor Y pos\nvar private window      lastMouseWindow;    // Last window the cursor was in\nvar private bool        bMouseMoved;        // TRUE if the mouse moved\nvar private bool        bMouseMoveLocked;   // TRUE if mouse movement is disabled\nvar private bool        bMouseButtonLocked; // TRUE if mouse buttons are disabled\nvar private bool        bCursorVisible;     // TRUE if the cursor is visible\n\n// Default cursors\nvar private texture     defaultEditCursor;           // Cursor for edit widgets\nvar private texture     defaultMoveCursor;           // General movement cursor\nvar private texture     defaultHorizontalMoveCursor; // Horizontal movement cursor\nvar private texture     defaultVerticalMoveCursor;   // Vertical movement cursor\nvar private texture     defaultTopLeftMoveCursor;    // Upper left to lower right cursor\nvar private texture     defaultTopRightMoveCursor;   // Upper right to lower left cursor\n\n// Sound options\nvar private bool        bPositionalSound;            // TRUE if positional sound is enabled\n\n// Input windows\nvar const window        grabbedWindow;         // Recipient window for all mouse events\nvar const window        focusWindow;           // Recipient window for all keyboard events\n\n// Reference counters\nvar int                 handleMouseRef;        // Should root handle mouse events?\nvar int                 handleKeyboardRef;     // Should root handle keyboard events?\n\n// Initialization reference counter\nvar int                 initCount;             // Number of windows to be initialized this tick\n\n// Rendered area information\nvar private bool        bRender;               // TRUE if 3D areas should be rendered\nvar private bool        bClipRender;           // TRUE if the 3D area is clipped\nvar private bool        bStretchRawBackground; // TRUE if raw background should be stretched\nvar private float       renderX;               // X offset of rendered area\nvar private float       renderY;               // Y offset of rendered area\nvar private float       renderWidth;           // Width of rendered area\nvar private float       renderHeight;          // Height of rendered area\nvar private texture     rawBackground;         // Background graphic drawn in unrendered areas\nvar private float       rawBackgroundWidth;    // Width of background graphic\nvar private float       rawBackgroundHeight;   // Height of background graphic\nvar private color       rawColor;              // Color of raw background texture\n\n// Statistical variables\nvar const int           tickCycles;            // Number of cycles used during windows tick\nvar const int           paintCycles;           // Number of cycles used during PaintWindows call\nvar bool                bShowStats;            // Should statistics be shown on root window?\nvar bool                bShowFrames;           // Should we draw debugging frames around all windows?\nvar texture             debugTexture;          // Debugging texture\nvar float               frameTimer;            // Timer used for frames\n\n\n// Button click information used to determine multiple clicks\nvar float               multiClickTimeout;     // Max amount of time between multiple button clicks\nvar private float       maxMouseDist;          // Maximum mouse distance for multi-click to work\nvar private int         clickCount;            // Current click number (zero-based)\nvar private int         lastButtonType;        // Last mouse button handled\nvar private float       lastButtonPress;       // Time remaining for last button press\nvar private window      lastButtonWindow;      // Last window clicked in\nvar private float       firstButtonMouseX;     // X position of initial button press\nvar private float       firstButtonMouseY;     // Y position of initial button press\n\n// List of all current key states\nvar private byte        keyDownMap[0xFF];      // State is TRUE if key is pressed\n\nvar private int         hMultiplier;           // Horizontal multiplier\nvar private int         vMultiplier;           // Vertical multiplier\n\n// Snapshot-related variables\nvar private int         snapshotWidth;        // Snapshot width\nvar private int         snapshotHeight;       // Snapshot height\n\nvar private transient int rootFrame;           // Transient frame\n\n// ----------------------------------------------------------------------\n// Intrinsics\n\nnative(1510) final function SetDefaultEditCursor(optional texture newEditCursor);\nnative(1511) final function SetDefaultMovementCursors(optional texture newMovementCursor,\n                                                      optional texture newHorizontalMovementCursor,\n                                                      optional texture newVerticalMovementCursor,\n                                                      optional texture newTopLeftMovementCursor,\n                                                      optional texture newTopRightMovementCursor);\nnative(1512) final function EnableRendering(optional bool bRender);\nnative(1513) final function Bool IsRenderingEnabled();\nnative(1514) final function SetRenderViewport(float newX, float newY,\n                                              float newWidth, float newHeight);\nnative(1515) final function ResetRenderViewport();\nnative(1516) final function SetRawBackground(optional texture newTexture,\n                                             optional color newColor);\nnative(1517) final function SetRawBackgroundSize(float newWidth, float newHeight);\nnative(1518) final function StretchRawBackground(optional bool bStretch);\n\nnative(1519) final function EnablePositionalSound(optional bool bEnable);\nnative(1520) final function bool IsPositionalSoundEnabled();\n\nnative(1521) final function LockMouse(optional bool bLockMove, optional bool bLockButton);\nnative(1522) final function ShowCursor(optional bool bShow);\n\nnative(1523) final function SetSnapshotSize(float newWidth, float newHeight);\nnative(1524) final function Texture GenerateSnapshot(optional bool bFilter);\n\n// ----------------------------------------------------------------------\n// InitWindow() : Called when this window is initialized\n\nfunction InitWindow()\n{\n\tSuper.InitWindow();\n\tSetFont(Font'TechMedium');\n\tSetDefaultCursor(Texture'DefaultCursor');\n\tSetDefaultEditCursor(Texture'DefaultTextCursor');\n\tSetDefaultMovementCursors(Texture'DefaultMoveCursor',\n\t                          Texture'DefaultHMoveCursor',\n\t                          Texture'DefaultVMoveCursor',\n\t                          Texture'DefaultTLMoveCursor',\n\t                          Texture'DefaultTRMoveCursor');\n}\n\n\n// ----------------------------------------------------------------------\n// Tick() : Work procedure, called periodically\n\nfunction Tick(float deltaSeconds)\n{\n}\n\n\n// ----------------------------------------------------------------------\n// VirtualKeyPressed() : Default virtual key handler for the root window\n\nfunction bool VirtualKeyPressed(EInputKey key, bool bRepeat)\n{\n\tlocal bool retval;\n\n\t// Try the superclass first\n\tretval = Super.VirtualKeyPressed(key, bRepeat);\n\n\t// Didn't handle it -- do it ourselves\n\tif (!retval)\n\t{\n\t\tretval = true;\n\n\t\t// Handle arrow keys\n\t\tif      (key == IK_Left)\n\t\t\tMoveFocusLeft();\n\t\telse if (key == IK_Right)\n\t\t\tMoveFocusRight();\n\t\telse if (key == IK_Up)\n\t\t\tMoveFocusUp();\n\t\telse if (key == IK_Down)\n\t\t\tMoveFocusDown();\n\n\t\t// Handle tab key\n\t\telse if (key == IK_Tab)\n\t\t{\n\t\t\tif (IsKeyDown(IK_Shift))\n\t\t\t\tMoveTabGroupPrev();\n\t\t\telse\n\t\t\t\tMoveTabGroupNext();\n\t\t}\n\n\t\t// Handle zilch\n\t\telse\n\t\t\tretval = false;\n\t}\n\n\t// Return TRUE if we handled this event\n\treturn (retval);\n}\n\n\n// ----------------------------------------------------------------------\n// ClientMessage() : Called when the game wants to tell the player\n//                   something\n\nevent bool ClientMessage(coerce string msg, optional name type,\n                         optional bool bBeep)\n{\n\treturn (false);  // don't handle this\n}\n\n\n// ----------------------------------------------------------------------\n// GrabKeyboardEvents() : Allows root window to process keyboard events;\n//                        uses reference counting\n\nfunction GrabKeyboardEvents()\n{\n\thandleKeyboardRef++;\n}\n\n\n// ----------------------------------------------------------------------\n// UngrabKeyboardEvents() : Prevents root window from processing\n//                          keyboard events; uses reference counting\n\nfunction UngrabKeyboardEvents()\n{\n\tif (handleKeyboardRef > 0)\n\t\thandleKeyboardRef--;\n}\n\n\n// ----------------------------------------------------------------------\n// GrabMouseEvents() : Allows root window to process mouse events; uses\n//                     reference counting\n\nfunction GrabMouseEvents()\n{\n\thandleMouseRef++;\n}\n\n\n// ----------------------------------------------------------------------\n// UngrabMouseEvents() : Prevents root window from processing mouse\n//                       events; uses reference counting\n\nfunction UngrabMouseEvents()\n{\n\tif (handleMouseRef > 0)\n\t\thandleMouseRef--;\n}\n\n\n// ----------------------------------------------------------------------\n// IsKeyboardGrabbed() : Returns TRUE if the root window can process\n//                       keyboard events\n\nfunction bool IsKeyboardGrabbed()\n{\n\tif (handleKeyboardRef > 0)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\n\n\n// ----------------------------------------------------------------------\n// IsMouseGrabbed() : Returns TRUE if the root window can process mouse\n//                    events\n\nfunction bool IsMouseGrabbed()\n{\n\tif (handleMouseRef > 0)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\n\n\n// ----------------------------------------------------------------------\n// ShowStats() : Turns the status display on or off\n\nfunction ShowStats(bool bNewShowStats)\n{\n\tbShowStats = bNewShowStats;\n}\n\n\n// ----------------------------------------------------------------------\n// ShowFrames() : Turns window frames on or off\n\nfunction ShowFrames(bool bNewShowFrames)\n{\n\tbShowFrames = bNewShowFrames;\n}\n\ndefaultproperties\n{\n     rawBackground=Texture'Extension.Solid'\n     debugTexture=Texture'Extension.Solid'\n}\n",
            "name": "RootWindow.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "rawBackground=Texture'Extension.Solid'",
                    "debugTexture=Texture'Extension.Solid'"
                ],
                "exec": [
                    "#exec FONT    IMPORT FILE=Textures\\TechMedium.pcx          NAME=TechMedium",
                    "#exec FONT    IMPORT FILE=Textures\\TechMedium_DS.pcx       NAME=TechMedium_DS",
                    "#exec FONT    IMPORT FILE=Textures\\TechMedium_B.pcx        NAME=TechMedium_B",
                    "#exec FONT    IMPORT FILE=Textures\\TechSmall.pcx           NAME=TechSmall",
                    "#exec FONT    IMPORT FILE=Textures\\TechSmall_DS.pcx        NAME=TechSmall_DS",
                    "#exec FONT    IMPORT FILE=Textures\\TechTiny.pcx            NAME=TechTiny",
                    "#exec TEXTURE IMPORT FILE=Textures\\DefaultCursor.pcx       NAME=DefaultCursor",
                    "#exec TEXTURE IMPORT FILE=Textures\\DefaultTextCursor.pcx   NAME=DefaultTextCursor",
                    "#exec TEXTURE IMPORT FILE=Textures\\DefaultMoveCursor.pcx   NAME=DefaultMoveCursor",
                    "#exec TEXTURE IMPORT FILE=Textures\\DefaultHMoveCursor.pcx  NAME=DefaultHMoveCursor",
                    "#exec TEXTURE IMPORT FILE=Textures\\DefaultVMoveCursor.pcx  NAME=DefaultVMoveCursor",
                    "#exec TEXTURE IMPORT FILE=Textures\\DefaultTLMoveCursor.pcx NAME=DefaultTLMoveCursor",
                    "#exec TEXTURE IMPORT FILE=Textures\\DefaultTRMoveCursor.pcx NAME=DefaultTRMoveCursor",
                    "#exec TEXTURE IMPORT FILE=Textures\\Solid.pcx               NAME=Solid",
                    "#exec TEXTURE IMPORT FILE=Textures\\SolidGreen.pcx          NAME=SolidGreen",
                    "#exec TEXTURE IMPORT FILE=Textures\\SolidYellow.pcx         NAME=SolidYellow",
                    "#exec TEXTURE IMPORT FILE=Textures\\SolidRed.pcx            NAME=SolidRed",
                    "#exec TEXTURE IMPORT FILE=Textures\\VisionBlue.pcx          NAME=VisionBlue",
                    "#exec TEXTURE IMPORT FILE=Textures\\Dithered.pcx            NAME=Dithered"
                ],
                "extends": "ModalWindow",
                "functions": {
                    "EnablePositionalSound": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "EnablePositionalSound",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "bool",
                                "bEnable"
                            ]
                        ],
                        "return": ""
                    },
                    "EnableRendering": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "EnableRendering",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "bool",
                                "bRender"
                            ]
                        ],
                        "return": ""
                    },
                    "GenerateSnapshot": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GenerateSnapshot",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "bool",
                                "bFilter"
                            ]
                        ],
                        "return": ""
                    },
                    "GrabKeyboardEvents": {
                        "body": "{\n\thandleKeyboardRef++;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "GrabKeyboardEvents",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "GrabMouseEvents": {
                        "body": "{\n\thandleMouseRef++;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "GrabMouseEvents",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "InitWindow": {
                        "body": "{\n\tSuper.InitWindow();\n\tSetFont(Font'TechMedium');\n\tSetDefaultCursor(Texture'DefaultCursor');\n\tSetDefaultEditCursor(Texture'DefaultTextCursor');\n\tSetDefaultMovementCursors(Texture'DefaultMoveCursor',\n\t                          Texture'DefaultHMoveCursor',\n\t                          Texture'DefaultVMoveCursor',\n\t                          Texture'DefaultTLMoveCursor',\n\t                          Texture'DefaultTRMoveCursor');\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "InitWindow",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "IsKeyboardGrabbed": {
                        "body": "{\n\tif (handleKeyboardRef > 0)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "IsKeyboardGrabbed",
                        "native": false,
                        "param": [],
                        "return": "bool"
                    },
                    "IsMouseGrabbed": {
                        "body": "{\n\tif (handleMouseRef > 0)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "IsMouseGrabbed",
                        "native": false,
                        "param": [],
                        "return": "bool"
                    },
                    "IsPositionalSoundEnabled": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "IsPositionalSoundEnabled",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "IsRenderingEnabled": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "IsRenderingEnabled",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "LockMouse": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "LockMouse",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "bool",
                                "bLockMove"
                            ],
                            [
                                "optional",
                                "bool",
                                "bLockButton"
                            ]
                        ],
                        "return": ""
                    },
                    "ResetRenderViewport": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "ResetRenderViewport",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "SetDefaultEditCursor": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetDefaultEditCursor",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "texture",
                                "newEditCursor"
                            ]
                        ],
                        "return": ""
                    },
                    "SetRawBackgroundSize": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetRawBackgroundSize",
                        "native": true,
                        "param": [
                            [
                                "float",
                                "newWidth"
                            ],
                            [
                                "float",
                                "newHeight"
                            ]
                        ],
                        "return": ""
                    },
                    "SetSnapshotSize": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetSnapshotSize",
                        "native": true,
                        "param": [
                            [
                                "float",
                                "newWidth"
                            ],
                            [
                                "float",
                                "newHeight"
                            ]
                        ],
                        "return": ""
                    },
                    "ShowCursor": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "ShowCursor",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "bool",
                                "bShow"
                            ]
                        ],
                        "return": ""
                    },
                    "ShowFrames": {
                        "body": "{\n\tbShowFrames = bNewShowFrames;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "ShowFrames",
                        "native": false,
                        "param": [
                            [
                                "bool",
                                "bNewShowFrames"
                            ]
                        ],
                        "return": ""
                    },
                    "ShowStats": {
                        "body": "{\n\tbShowStats = bNewShowStats;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "ShowStats",
                        "native": false,
                        "param": [
                            [
                                "bool",
                                "bNewShowStats"
                            ]
                        ],
                        "return": ""
                    },
                    "StretchRawBackground": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "StretchRawBackground",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "bool",
                                "bStretch"
                            ]
                        ],
                        "return": ""
                    },
                    "Tick": {
                        "body": "{\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltaSeconds"
                            ]
                        ],
                        "return": ""
                    },
                    "UngrabKeyboardEvents": {
                        "body": "{\n\tif (handleKeyboardRef > 0)\n\t\thandleKeyboardRef--;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "UngrabKeyboardEvents",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "UngrabMouseEvents": {
                        "body": "{\n\tif (handleMouseRef > 0)\n\t\thandleMouseRef--;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "UngrabMouseEvents",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "VirtualKeyPressed": {
                        "body": "{\n\n\t// Try the superclass first\n\tretval = Super.VirtualKeyPressed(key, bRepeat);\n\n\t// Didn't handle it -- do it ourselves\n\tif (!retval)\n\t{\n\t\tretval = true;\n\n\t\t// Handle arrow keys\n\t\tif      (key == IK_Left)\n\t\t\tMoveFocusLeft();\n\t\telse if (key == IK_Right)\n\t\t\tMoveFocusRight();\n\t\telse if (key == IK_Up)\n\t\t\tMoveFocusUp();\n\t\telse if (key == IK_Down)\n\t\t\tMoveFocusDown();\n\n\t\t// Handle tab key\n\t\telse if (key == IK_Tab)\n\t\t{\n\t\t\tif (IsKeyDown(IK_Shift))\n\t\t\t\tMoveTabGroupPrev();\n\t\t\telse\n\t\t\t\tMoveTabGroupNext();\n\t\t}\n\n\t\t// Handle zilch\n\t\telse\n\t\t\tretval = false;\n\t}\n\n\t// Return TRUE if we handled this event\n\treturn (retval);\n}",
                        "locals": [
                            "local bool retval;"
                        ],
                        "modifiers": [],
                        "name": "VirtualKeyPressed",
                        "native": false,
                        "param": [
                            [
                                "EInputKey",
                                "key"
                            ],
                            [
                                "bool",
                                "bRepeat"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 314,
                "replication": "",
                "states": [],
                "variables": [
                    "var const PlayerPawnExt parentPawn;         // APlayerPawnExt which owns this win",
                    "var private RootWindow  nextRootWindow;     // Next root window in global list",
                    "var private float       mouseX;             // Cursor X pos",
                    "var private float       mouseY;             // Cursor Y pos",
                    "var private float       prevMouseX;         // Last cursor X pos",
                    "var private float       prevMouseY;         // Last cursor Y pos",
                    "var private window      lastMouseWindow;    // Last window the cursor was in",
                    "var private bool        bMouseMoved;        // TRUE if the mouse moved",
                    "var private bool        bMouseMoveLocked;   // TRUE if mouse movement is disabled",
                    "var private bool        bMouseButtonLocked; // TRUE if mouse buttons are disabled",
                    "var private bool        bCursorVisible;     // TRUE if the cursor is visible",
                    "var private texture     defaultEditCursor;           // Cursor for edit widgets",
                    "var private texture     defaultMoveCursor;           // General movement cursor",
                    "var private texture     defaultHorizontalMoveCursor; // Horizontal movement cursor",
                    "var private texture     defaultVerticalMoveCursor;   // Vertical movement cursor",
                    "var private texture     defaultTopLeftMoveCursor;    // Upper left to lower right cursor",
                    "var private texture     defaultTopRightMoveCursor;   // Upper right to lower left cursor",
                    "var private bool        bPositionalSound;            // TRUE if positional sound is enabled",
                    "var const window        grabbedWindow;         // Recipient window for all mouse events",
                    "var const window        focusWindow;           // Recipient window for all keyboard events",
                    "var int                 handleMouseRef;        // Should root handle mouse events?",
                    "var int                 handleKeyboardRef;     // Should root handle keyboard events?",
                    "var int                 initCount;             // Number of windows to be initialized this tick",
                    "var private bool        bRender;               // TRUE if 3D areas should be rendered",
                    "var private bool        bClipRender;           // TRUE if the 3D area is clipped",
                    "var private bool        bStretchRawBackground; // TRUE if raw background should be stretched",
                    "var private float       renderX;               // X offset of rendered area",
                    "var private float       renderY;               // Y offset of rendered area",
                    "var private float       renderWidth;           // Width of rendered area",
                    "var private float       renderHeight;          // Height of rendered area",
                    "var private texture     rawBackground;         // Background graphic drawn in unrendered areas",
                    "var private float       rawBackgroundWidth;    // Width of background graphic",
                    "var private float       rawBackgroundHeight;   // Height of background graphic",
                    "var private color       rawColor;              // Color of raw background texture",
                    "var const int           tickCycles;            // Number of cycles used during windows tick",
                    "var const int           paintCycles;           // Number of cycles used during PaintWindows call",
                    "var bool                bShowStats;            // Should statistics be shown on root window?",
                    "var bool                bShowFrames;           // Should we draw debugging frames around all windows?",
                    "var texture             debugTexture;          // Debugging texture",
                    "var float               frameTimer;            // Timer used for frames",
                    "var float               multiClickTimeout;     // Max amount of time between multiple button clicks",
                    "var private float       maxMouseDist;          // Maximum mouse distance for multi-click to work",
                    "var private int         clickCount;            // Current click number (zero-based)",
                    "var private int         lastButtonType;        // Last mouse button handled",
                    "var private float       lastButtonPress;       // Time remaining for last button press",
                    "var private window      lastButtonWindow;      // Last window clicked in",
                    "var private float       firstButtonMouseX;     // X position of initial button press",
                    "var private float       firstButtonMouseY;     // Y position of initial button press",
                    "var private byte        keyDownMap[0xFF];      // State is TRUE if key is pressed",
                    "var private int         hMultiplier;           // Horizontal multiplier",
                    "var private int         vMultiplier;           // Vertical multiplier",
                    "var private int         snapshotWidth;        // Snapshot width",
                    "var private int         snapshotHeight;       // Snapshot height",
                    "var private transient int rootFrame;           // Transient frame"
                ]
            }
        },
        "ScaleManagerWindow.uc": {
            "body": "//=============================================================================\n// ScaleManagerWindow.\n//=============================================================================\nclass ScaleManagerWindow extends Window\n\tnative\n\tnoexport;\n\n// ----------------------------------------------------------------------\n// Variables\n\nvar const buttonwindow decButton;\nvar const buttonwindow incButton;\nvar const textwindow   valueField;\nvar const scalewindow  scale;\n\nvar const EOrientation orientation;\n\nvar const bool         bStretchScaleField;\nvar const bool         bStretchValueField;\n\nvar const float        marginWidth;\nvar const float        marginHeight;\nvar const float        spacing;\n\nvar const EHAlign      childHAlign;\nvar const EVAlign      childVAlign;\n\n\n// ----------------------------------------------------------------------\n// Intrinsics\n\nnative(1660) final function SetScaleButtons(buttonwindow newDecButton,\n                                            buttonwindow newIncButton);\nnative(1661) final function SetValueField(textwindow newValueField);\nnative(1662) final function SetScale(scalewindow newScale);\nnative(1663) final function SetManagerOrientation(EOrientation newOrientation);\nnative(1664) final function StretchScaleField(optional bool bNewStretch);\nnative(1665) final function StretchValueField(optional bool bNewStretch);\nnative(1666) final function SetManagerMargins(optional float newMarginWidth,\n                                              optional float newMarginHeight);\nnative(1667) final function SetMarginSpacing(optional float newSpacing);\nnative(1668) final function SetManagerAlignments(EHAlign newHAlign, EVAlign newVAlign);\n\ndefaultproperties\n{\n}\n",
            "name": "ScaleManagerWindow.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "Window",
                "functions": {
                    "SetManagerAlignments": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetManagerAlignments",
                        "native": true,
                        "param": [
                            [
                                "EHAlign",
                                "newHAlign"
                            ],
                            [
                                "EVAlign",
                                "newVAlign"
                            ]
                        ],
                        "return": ""
                    },
                    "SetManagerOrientation": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetManagerOrientation",
                        "native": true,
                        "param": [
                            [
                                "EOrientation",
                                "newOrientation"
                            ]
                        ],
                        "return": ""
                    },
                    "SetMarginSpacing": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetMarginSpacing",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "float",
                                "newSpacing"
                            ]
                        ],
                        "return": ""
                    },
                    "SetScale": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetScale",
                        "native": true,
                        "param": [
                            [
                                "scalewindow",
                                "newScale"
                            ]
                        ],
                        "return": ""
                    },
                    "SetValueField": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetValueField",
                        "native": true,
                        "param": [
                            [
                                "textwindow",
                                "newValueField"
                            ]
                        ],
                        "return": ""
                    },
                    "StretchScaleField": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "StretchScaleField",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "bool",
                                "bNewStretch"
                            ]
                        ],
                        "return": ""
                    },
                    "StretchValueField": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "StretchValueField",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "bool",
                                "bNewStretch"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 47,
                "replication": "",
                "states": [],
                "variables": [
                    "var const buttonwindow decButton;",
                    "var const buttonwindow incButton;",
                    "var const textwindow   valueField;",
                    "var const scalewindow  scale;",
                    "var const EOrientation orientation;",
                    "var const bool         bStretchScaleField;",
                    "var const bool         bStretchValueField;",
                    "var const float        marginWidth;",
                    "var const float        marginHeight;",
                    "var const float        spacing;",
                    "var const EHAlign      childHAlign;",
                    "var const EVAlign      childVAlign;"
                ]
            }
        },
        "ScaleWindow.uc": {
            "body": "//=============================================================================\n// ScaleWindow.\n//=============================================================================\nclass ScaleWindow extends Window\n\tnative\n\tnoexport;\n\n// ----------------------------------------------------------------------\n// Variables\n\nvar const EOrientation orientation;\n\nvar const texture      scaleTexture;\nvar const texture      thumbTexture;\nvar const texture      tickTexture;\nvar const texture      preCapTexture;\nvar const texture      postCapTexture;\n\nvar const bool         bRepeatScaleTexture;\nvar const bool         bRepeatThumbTexture;\nvar const bool         bDrawEndTicks;\n\nvar const bool         bStretchScale;\nvar const bool         bSpanThumb;\n\nvar const texture      borderPattern;\n\nvar const float        scaleBorderSize;\nvar const float        thumbBorderSize;\n\nvar const color        scaleBorderColor;\nvar const color        thumbBorderColor;\n\nvar const EDrawStyle   scaleStyle;\nvar const EDrawStyle   thumbStyle;\nvar const EDrawStyle   tickStyle;\n\nvar const color        scaleColor;\nvar const color        thumbColor;\nvar const color        tickColor;\n\nvar const float        scaleWidth;\nvar const float        scaleHeight;\n\nvar const float        thumbWidth;\nvar const float        thumbHeight;\n\nvar const float        tickWidth;\nvar const float        tickHeight;\n\nvar const float        preCapWidth;\nvar const float        preCapHeight;\nvar const float        postCapWidth;\nvar const float        postCapHeight;\n\nvar const float        startOffset;\nvar const float        endOffset;\n\nvar const float        marginWidth;\nvar const float        marginHeight;\n\nvar const int          numPositions;\nvar const int          currentPos;\nvar const int          spanRange;\nvar const int          thumbStep;\n\nvar const float        fromValue;\nvar const float        toValue;\nvar const string       valueFmt;\n\nvar const float        initialDelay;\nvar const float        repeatRate;\n\nvar const int          initialPos;\n\nvar const sound        setSound;\nvar const sound        clickSound;\nvar const sound        dragSound;\n\nvar private float      scaleX;\nvar private float      scaleY;\nvar private float      scaleW;\nvar private float      scaleH;\n\nvar private float      thumbX;\nvar private float      thumbY;\nvar private float      thumbW;\nvar private float      thumbH;\n\nvar private float      tickX;\nvar private float      tickY;\nvar private float      tickW;\nvar private float      tickH;\n\nvar private float      preCapXOff;\nvar private float      preCapYOff;\nvar private float      preCapW;\nvar private float      preCapH;\n\nvar private float      postCapXOff;\nvar private float      postCapYOff;\nvar private float      postCapW;\nvar private float      postCapH;\n\nvar private float      absStartScale;\nvar private float      absEndScale;\n\nvar private bool       bDraggingThumb;\nvar private float      mousePos;\nvar private byte       repeatDir;\nvar private float      remainingTime;\n\nvar private native DynamicArray enumStrings;\n\n\n// ----------------------------------------------------------------------\n// Intrinsics\n\nnative(1620) final function SetScaleOrientation(EOrientation newOrientation);\nnative(1621) final function SetScaleTexture(texture newTexture,\n                                            optional float newWidth, optional float newHeight,\n                                            optional float newStart, optional float newEnd);\nnative(1622) final function SetThumbTexture(texture newTexture,\n                                            optional float newWidth, optional float newHeight);\nnative(1623) final function SetTickTexture(texture tickTexture, optional bool bDrawEndTicks,\n                                           optional float newWidth, optional float newHeight);\nnative(1624) final function SetThumbCaps(texture preCap, texture postCap,\n                                         optional float preCapWidth, optional float preCapHeight,\n                                         optional float postCapWidth, optional float postCapHeight);\nnative(1625) final function EnableStretchedScale(optional bool bNewStretch);\nnative(1626) final function SetBorderPattern(texture newTexture);\nnative(1627) final function SetScaleBorder(optional float newBorderSize, optional color newColor);\nnative(1628) final function SetThumbBorder(optional float newBorderSize, optional color newColor);\nnative(1629) final function SetScaleStyle(EDrawStyle newStyle);\nnative(1630) final function SetThumbStyle(EDrawStyle newStyle);\nnative(1631) final function SetTickStyle(EDrawStyle newStyle);\nnative(1632) final function SetScaleColor(color newColor);\nnative(1633) final function SetThumbColor(color newColor);\nnative(1634) final function SetTickColor(color newColor);\nnative(1635) final function SetScaleMargins(optional float marginWidth,\n                                            optional float marginHeight);\nnative(1636) final function SetNumTicks(int newNumTicks);\nnative(1637) final function int GetNumTicks();\nnative(1638) final function SetThumbSpan(optional int newRange);\nnative(1639) final function int GetThumbSpan();\nnative(1640) final function SetTickPosition(int newPosition);\nnative(1641) final function int GetTickPosition();\nnative(1642) final function SetValueRange(float newFrom, float newTo);\nnative(1643) final function SetValue(float newValue);\nnative(1644) final function float GetValue();\nnative(1645) final function GetValues(out float fromValue, out float toValue);\nnative(1646) final function SetValueFormat(coerce string newFmt);\nnative(1647) final function string GetValueString();\nnative(1648) final function SetEnumeration(int tickPos, coerce string newStr);\nnative(1649) final function ClearAllEnumerations();\nnative(1650) final function MoveThumb(EMoveThumb moveThumb);\nnative(1651) final function SetThumbStep(int newStep);\nnative(1652) final function SetScaleSounds(optional sound setSound, optional sound clickSound,\n                                           optional sound dragSound);\nnative(1653) final function PlayScaleSound(sound newSound,\n                                           optional float volume, optional float pitch);\n\n// ----------------------------------------------------------------------\n// SetScaleBorderRGB() : Sets the size and color of the scale border\n\nfunction SetScaleBorderRGB(float borderSize, byte red, byte green, byte blue)\n{\n\tlocal color newColor;\n\n\tnewColor.R = red;\n\tnewColor.G = green;\n\tnewColor.B = blue;\n\n\tSetScaleBorder(borderSize, newColor);\n}\n\n\n// ----------------------------------------------------------------------\n// SetThumbBorderRGB() : Sets the size and color of the thumb border\n\nfunction SetThumbBorderRGB(float borderSize, byte red, byte green, byte blue)\n{\n\tlocal color newColor;\n\n\tnewColor.R = red;\n\tnewColor.G = green;\n\tnewColor.B = blue;\n\n\tSetThumbBorder(borderSize, newColor);\n}\n\n\n// ----------------------------------------------------------------------\n// SetScaleColorRGB() : Sets the color of the scale\n\nfunction SetScaleColorRGB(byte red, byte green, byte blue)\n{\n\tlocal color newColor;\n\n\tnewColor.R = red;\n\tnewColor.G = green;\n\tnewColor.B = blue;\n\n\tSetScaleColor(newColor);\n}\n\n\n// ----------------------------------------------------------------------\n// SetThumbColorRGB() : Sets the color of the thumb\n\nfunction SetThumbColorRGB(byte red, byte green, byte blue)\n{\n\tlocal color newColor;\n\n\tnewColor.R = red;\n\tnewColor.G = green;\n\tnewColor.B = blue;\n\n\tSetThumbColor(newColor);\n}\n\n\n// ----------------------------------------------------------------------\n// SetTickColorRGB() : Sets the color of the thumb\n\nfunction SetTickColorRGB(byte red, byte green, byte blue)\n{\n\tlocal color newColor;\n\n\tnewColor.R = red;\n\tnewColor.G = green;\n\tnewColor.B = blue;\n\n\tSetTickColor(newColor);\n}\n\n\n// ----------------------------------------------------------------------\n// VirtualKeyPressed() : Handles virtual keypresses\n\nevent bool VirtualKeyPressed(EInputKey key, bool bRepeat)\n{\n\tlocal bool retval;\n\n\tretval = Super.VirtualKeyPressed(key, bRepeat);\n\n\tif ((key == IK_Left) || (key == IK_Up))\n\t{\n\t\tMoveThumb(MOVETHUMB_StepUp);\n\t\tPlayScaleSound(setSound);\n\t\tretval = true;\n\t}\n\telse if ((key == IK_Right) || (key == IK_Down))\n\t{\n\t\tMoveThumb(MOVETHUMB_StepDown);\n\t\tPlayScaleSound(setSound);\n\t\tretval = true;\n\t}\n\telse if (key == IK_Home)\n\t{\n\t\tMoveThumb(MOVETHUMB_Home);\n\t\tPlayScaleSound(setSound);\n\t\tretval = true;\n\t}\n\telse if (key == IK_End)\n\t{\n\t\tMoveThumb(MOVETHUMB_End);\n\t\tPlayScaleSound(setSound);\n\t\tretval = true;\n\t}\n\telse if (key == IK_PageUp)\n\t{\n\t\tMoveThumb(MOVETHUMB_PageUp);\n\t\tPlayScaleSound(setSound);\n\t\tretval = true;\n\t}\n\telse if (key == IK_PageDown)\n\t{\n\t\tMoveThumb(MOVETHUMB_PageDown);\n\t\tPlayScaleSound(setSound);\n\t\tretval = true;\n\t}\n\n\treturn (retval);\n\n}\n\ndefaultproperties\n{\n     borderPattern=Texture'Extension.Solid'\n}\n",
            "name": "ScaleWindow.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "borderPattern=Texture'Extension.Solid'"
                ],
                "exec": [],
                "extends": "Window",
                "functions": {
                    "ClearAllEnumerations": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "ClearAllEnumerations",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "EnableStretchedScale": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "EnableStretchedScale",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "bool",
                                "bNewStretch"
                            ]
                        ],
                        "return": ""
                    },
                    "GetNumTicks": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetNumTicks",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "GetThumbSpan": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetThumbSpan",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "GetTickPosition": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetTickPosition",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "GetValue": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetValue",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "GetValueString": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetValueString",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "GetValues": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetValues",
                        "native": true,
                        "param": [
                            [
                                "out",
                                "float",
                                "fromValue"
                            ],
                            [
                                "out",
                                "float",
                                "toValue"
                            ]
                        ],
                        "return": ""
                    },
                    "MoveThumb": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "MoveThumb",
                        "native": true,
                        "param": [
                            [
                                "EMoveThumb",
                                "moveThumb"
                            ]
                        ],
                        "return": ""
                    },
                    "SetBorderPattern": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetBorderPattern",
                        "native": true,
                        "param": [
                            [
                                "texture",
                                "newTexture"
                            ]
                        ],
                        "return": ""
                    },
                    "SetEnumeration": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetEnumeration",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "tickPos"
                            ],
                            [
                                "coerce",
                                "string",
                                "newStr"
                            ]
                        ],
                        "return": ""
                    },
                    "SetNumTicks": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetNumTicks",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "newNumTicks"
                            ]
                        ],
                        "return": ""
                    },
                    "SetScaleBorder": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetScaleBorder",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "float",
                                "newBorderSize"
                            ],
                            [
                                "optional",
                                "color",
                                "newColor"
                            ]
                        ],
                        "return": ""
                    },
                    "SetScaleBorderRGB": {
                        "body": "{\n\n\tnewColor.R = red;\n\tnewColor.G = green;\n\tnewColor.B = blue;\n\n\tSetScaleBorder(borderSize, newColor);\n}",
                        "locals": [
                            "local color newColor;"
                        ],
                        "modifiers": [],
                        "name": "SetScaleBorderRGB",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "borderSize"
                            ],
                            [
                                "byte",
                                "red"
                            ],
                            [
                                "byte",
                                "green"
                            ],
                            [
                                "byte",
                                "blue"
                            ]
                        ],
                        "return": ""
                    },
                    "SetScaleColor": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetScaleColor",
                        "native": true,
                        "param": [
                            [
                                "color",
                                "newColor"
                            ]
                        ],
                        "return": ""
                    },
                    "SetScaleColorRGB": {
                        "body": "{\n\n\tnewColor.R = red;\n\tnewColor.G = green;\n\tnewColor.B = blue;\n\n\tSetScaleColor(newColor);\n}",
                        "locals": [
                            "local color newColor;"
                        ],
                        "modifiers": [],
                        "name": "SetScaleColorRGB",
                        "native": false,
                        "param": [
                            [
                                "byte",
                                "red"
                            ],
                            [
                                "byte",
                                "green"
                            ],
                            [
                                "byte",
                                "blue"
                            ]
                        ],
                        "return": ""
                    },
                    "SetScaleOrientation": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetScaleOrientation",
                        "native": true,
                        "param": [
                            [
                                "EOrientation",
                                "newOrientation"
                            ]
                        ],
                        "return": ""
                    },
                    "SetScaleStyle": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetScaleStyle",
                        "native": true,
                        "param": [
                            [
                                "EDrawStyle",
                                "newStyle"
                            ]
                        ],
                        "return": ""
                    },
                    "SetThumbBorder": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetThumbBorder",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "float",
                                "newBorderSize"
                            ],
                            [
                                "optional",
                                "color",
                                "newColor"
                            ]
                        ],
                        "return": ""
                    },
                    "SetThumbBorderRGB": {
                        "body": "{\n\n\tnewColor.R = red;\n\tnewColor.G = green;\n\tnewColor.B = blue;\n\n\tSetThumbBorder(borderSize, newColor);\n}",
                        "locals": [
                            "local color newColor;"
                        ],
                        "modifiers": [],
                        "name": "SetThumbBorderRGB",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "borderSize"
                            ],
                            [
                                "byte",
                                "red"
                            ],
                            [
                                "byte",
                                "green"
                            ],
                            [
                                "byte",
                                "blue"
                            ]
                        ],
                        "return": ""
                    },
                    "SetThumbColor": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetThumbColor",
                        "native": true,
                        "param": [
                            [
                                "color",
                                "newColor"
                            ]
                        ],
                        "return": ""
                    },
                    "SetThumbColorRGB": {
                        "body": "{\n\n\tnewColor.R = red;\n\tnewColor.G = green;\n\tnewColor.B = blue;\n\n\tSetThumbColor(newColor);\n}",
                        "locals": [
                            "local color newColor;"
                        ],
                        "modifiers": [],
                        "name": "SetThumbColorRGB",
                        "native": false,
                        "param": [
                            [
                                "byte",
                                "red"
                            ],
                            [
                                "byte",
                                "green"
                            ],
                            [
                                "byte",
                                "blue"
                            ]
                        ],
                        "return": ""
                    },
                    "SetThumbSpan": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetThumbSpan",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "int",
                                "newRange"
                            ]
                        ],
                        "return": ""
                    },
                    "SetThumbStep": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetThumbStep",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "newStep"
                            ]
                        ],
                        "return": ""
                    },
                    "SetThumbStyle": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetThumbStyle",
                        "native": true,
                        "param": [
                            [
                                "EDrawStyle",
                                "newStyle"
                            ]
                        ],
                        "return": ""
                    },
                    "SetTickColor": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetTickColor",
                        "native": true,
                        "param": [
                            [
                                "color",
                                "newColor"
                            ]
                        ],
                        "return": ""
                    },
                    "SetTickColorRGB": {
                        "body": "{\n\n\tnewColor.R = red;\n\tnewColor.G = green;\n\tnewColor.B = blue;\n\n\tSetTickColor(newColor);\n}",
                        "locals": [
                            "local color newColor;"
                        ],
                        "modifiers": [],
                        "name": "SetTickColorRGB",
                        "native": false,
                        "param": [
                            [
                                "byte",
                                "red"
                            ],
                            [
                                "byte",
                                "green"
                            ],
                            [
                                "byte",
                                "blue"
                            ]
                        ],
                        "return": ""
                    },
                    "SetTickPosition": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetTickPosition",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "newPosition"
                            ]
                        ],
                        "return": ""
                    },
                    "SetTickStyle": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetTickStyle",
                        "native": true,
                        "param": [
                            [
                                "EDrawStyle",
                                "newStyle"
                            ]
                        ],
                        "return": ""
                    },
                    "SetValue": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetValue",
                        "native": true,
                        "param": [
                            [
                                "float",
                                "newValue"
                            ]
                        ],
                        "return": ""
                    },
                    "SetValueFormat": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetValueFormat",
                        "native": true,
                        "param": [
                            [
                                "coerce",
                                "string",
                                "newFmt"
                            ]
                        ],
                        "return": ""
                    },
                    "SetValueRange": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetValueRange",
                        "native": true,
                        "param": [
                            [
                                "float",
                                "newFrom"
                            ],
                            [
                                "float",
                                "newTo"
                            ]
                        ],
                        "return": ""
                    },
                    "VirtualKeyPressed": {
                        "body": "{\n\n\tretval = Super.VirtualKeyPressed(key, bRepeat);\n\n\tif ((key == IK_Left) || (key == IK_Up))\n\t{\n\t\tMoveThumb(MOVETHUMB_StepUp);\n\t\tPlayScaleSound(setSound);\n\t\tretval = true;\n\t}\n\telse if ((key == IK_Right) || (key == IK_Down))\n\t{\n\t\tMoveThumb(MOVETHUMB_StepDown);\n\t\tPlayScaleSound(setSound);\n\t\tretval = true;\n\t}\n\telse if (key == IK_Home)\n\t{\n\t\tMoveThumb(MOVETHUMB_Home);\n\t\tPlayScaleSound(setSound);\n\t\tretval = true;\n\t}\n\telse if (key == IK_End)\n\t{\n\t\tMoveThumb(MOVETHUMB_End);\n\t\tPlayScaleSound(setSound);\n\t\tretval = true;\n\t}\n\telse if (key == IK_PageUp)\n\t{\n\t\tMoveThumb(MOVETHUMB_PageUp);\n\t\tPlayScaleSound(setSound);\n\t\tretval = true;\n\t}\n\telse if (key == IK_PageDown)\n\t{\n\t\tMoveThumb(MOVETHUMB_PageDown);\n\t\tPlayScaleSound(setSound);\n\t\tretval = true;\n\t}\n\n\treturn (retval);\n\n}",
                        "locals": [
                            "local bool retval;"
                        ],
                        "modifiers": [],
                        "name": "VirtualKeyPressed",
                        "native": false,
                        "param": [
                            [
                                "EInputKey",
                                "key"
                            ],
                            [
                                "bool",
                                "bRepeat"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 292,
                "replication": "",
                "states": [],
                "variables": [
                    "var const EOrientation orientation;",
                    "var const texture      scaleTexture;",
                    "var const texture      thumbTexture;",
                    "var const texture      tickTexture;",
                    "var const texture      preCapTexture;",
                    "var const texture      postCapTexture;",
                    "var const bool         bRepeatScaleTexture;",
                    "var const bool         bRepeatThumbTexture;",
                    "var const bool         bDrawEndTicks;",
                    "var const bool         bStretchScale;",
                    "var const bool         bSpanThumb;",
                    "var const texture      borderPattern;",
                    "var const float        scaleBorderSize;",
                    "var const float        thumbBorderSize;",
                    "var const color        scaleBorderColor;",
                    "var const color        thumbBorderColor;",
                    "var const EDrawStyle   scaleStyle;",
                    "var const EDrawStyle   thumbStyle;",
                    "var const EDrawStyle   tickStyle;",
                    "var const color        scaleColor;",
                    "var const color        thumbColor;",
                    "var const color        tickColor;",
                    "var const float        scaleWidth;",
                    "var const float        scaleHeight;",
                    "var const float        thumbWidth;",
                    "var const float        thumbHeight;",
                    "var const float        tickWidth;",
                    "var const float        tickHeight;",
                    "var const float        preCapWidth;",
                    "var const float        preCapHeight;",
                    "var const float        postCapWidth;",
                    "var const float        postCapHeight;",
                    "var const float        startOffset;",
                    "var const float        endOffset;",
                    "var const float        marginWidth;",
                    "var const float        marginHeight;",
                    "var const int          numPositions;",
                    "var const int          currentPos;",
                    "var const int          spanRange;",
                    "var const int          thumbStep;",
                    "var const float        fromValue;",
                    "var const float        toValue;",
                    "var const string       valueFmt;",
                    "var const float        initialDelay;",
                    "var const float        repeatRate;",
                    "var const int          initialPos;",
                    "var const sound        setSound;",
                    "var const sound        clickSound;",
                    "var const sound        dragSound;",
                    "var private float      scaleX;",
                    "var private float      scaleY;",
                    "var private float      scaleW;",
                    "var private float      scaleH;",
                    "var private float      thumbX;",
                    "var private float      thumbY;",
                    "var private float      thumbW;",
                    "var private float      thumbH;",
                    "var private float      tickX;",
                    "var private float      tickY;",
                    "var private float      tickW;",
                    "var private float      tickH;",
                    "var private float      preCapXOff;",
                    "var private float      preCapYOff;",
                    "var private float      preCapW;",
                    "var private float      preCapH;",
                    "var private float      postCapXOff;",
                    "var private float      postCapYOff;",
                    "var private float      postCapW;",
                    "var private float      postCapH;",
                    "var private float      absStartScale;",
                    "var private float      absEndScale;",
                    "var private bool       bDraggingThumb;",
                    "var private float      mousePos;",
                    "var private byte       repeatDir;",
                    "var private float      remainingTime;",
                    "var private native DynamicArray enumStrings;"
                ]
            }
        },
        "ScrollAreaWindow.uc": {
            "body": "//=============================================================================\n// ScrollAreaWindow.\n//=============================================================================\nclass ScrollAreaWindow extends Window\n\tnative\n\tnoexport;\n\n// ----------------------------------------------------------------------\n// Variables\n\nvar const ScaleManagerWindow hScaleMgr;\nvar const ScaleManagerWindow vScaleMgr;\nvar const ScaleWindow        hScale;\nvar const ScaleWindow        vScale;\nvar const ButtonWindow       leftButton;\nvar const ButtonWindow       rightButton;\nvar const ButtonWindow       upButton;\nvar const ButtonWindow       downButton;\nvar const ClipWindow         clipWindow;\n\nvar const float              marginWidth;\nvar const float              marginHeight;\n\nvar const float              scrollbarDistance;\n\nvar const bool               bHideScrollbars;\nvar const bool               bHLastShow;\nvar const bool               bVLastShow;\n\n\n// ----------------------------------------------------------------------\n// Intrinsics\n\nnative(1700) final function EnableScrolling(optional bool bHScrolling,\n                                            optional bool bVScrolling);\nnative(1701) final function SetScrollbarDistance(float newDistance);\nnative(1702) final function SetAreaMargins(float newMarginWidth,\n                                           float newMarginHeight);\nnative(1703) final function AutoHideScrollbars(optional bool bHide);\n\n\n// ----------------------------------------------------------------------\n// VirtualKeyPressed() : Handles virtual keypresses\n\nevent bool VirtualKeyPressed(EInputKey key, bool bRepeat)\n{\n\tlocal bool retval;\n\n\tretval = Super.VirtualKeyPressed(key, bRepeat);\n\n// I'm commenting this out for now, because I'm not sure we should do this\n// by default...\n/*\n\tif (key == IK_Home)\n\t{\n\t\tif (vScale != None)\n\t\t\tvScale.MoveThumb(MOVETHUMB_Home);\n\t\tretval = true;\n\t}\n\telse if (key == IK_End)\n\t{\n\t\tif (vScale != None)\n\t\t\tvScale.MoveThumb(MOVETHUMB_End);\n\t\tretval = true;\n\t}\n\telse if (key == IK_PageUp)\n\t{\n\t\tif (vScale != None)\n\t\t\tvScale.MoveThumb(MOVETHUMB_PageUp);\n\t\tretval = true;\n\t}\n\telse if (key == IK_PageDown)\n\t{\n\t\tif (vScale != None)\n\t\t\tvScale.MoveThumb(MOVETHUMB_PageDown);\n\t\tretval = true;\n\t}\n\n\tif (hScale != None)\n\t{\n\t\tif (hScale.IsVisible())\n\t\t{\n\t\t\tif (key == IK_Left)\n\t\t\t{\n\t\t\t\thScale.MoveThumb(MOVETHUMB_StepUp);\n\t\t\t\tretval = true;\n\t\t\t}\n\t\t\telse if (key == IK_Right)\n\t\t\t{\n\t\t\t\thScale.MoveThumb(MOVETHUMB_StepDown);\n\t\t\t\tretval = true;\n\t\t\t}\n\t\t}\n\t}\n*/\n\n\treturn (retval);\n\n}\n\ndefaultproperties\n{\n}\n",
            "name": "ScrollAreaWindow.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "Window",
                "functions": {
                    "AutoHideScrollbars": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "AutoHideScrollbars",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "bool",
                                "bHide"
                            ]
                        ],
                        "return": ""
                    },
                    "SetScrollbarDistance": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetScrollbarDistance",
                        "native": true,
                        "param": [
                            [
                                "float",
                                "newDistance"
                            ]
                        ],
                        "return": ""
                    },
                    "VirtualKeyPressed": {
                        "body": "{\n\n\tretval = Super.VirtualKeyPressed(key, bRepeat);\n\n// I'm commenting this out for now, because I'm not sure we should do this\n// by default...\n/*\n\tif (key == IK_Home)\n\t{\n\t\tif (vScale != None)\n\t\t\tvScale.MoveThumb(MOVETHUMB_Home);\n\t\tretval = true;\n\t}\n\telse if (key == IK_End)\n\t{\n\t\tif (vScale != None)\n\t\t\tvScale.MoveThumb(MOVETHUMB_End);\n\t\tretval = true;\n\t}\n\telse if (key == IK_PageUp)\n\t{\n\t\tif (vScale != None)\n\t\t\tvScale.MoveThumb(MOVETHUMB_PageUp);\n\t\tretval = true;\n\t}\n\telse if (key == IK_PageDown)\n\t{\n\t\tif (vScale != None)\n\t\t\tvScale.MoveThumb(MOVETHUMB_PageDown);\n\t\tretval = true;\n\t}\n\n\tif (hScale != None)\n\t{\n\t\tif (hScale.IsVisible())\n\t\t{\n\t\t\tif (key == IK_Left)\n\t\t\t{\n\t\t\t\thScale.MoveThumb(MOVETHUMB_StepUp);\n\t\t\t\tretval = true;\n\t\t\t}\n\t\t\telse if (key == IK_Right)\n\t\t\t{\n\t\t\t\thScale.MoveThumb(MOVETHUMB_StepDown);\n\t\t\t\tretval = true;\n\t\t\t}\n\t\t}\n\t}\n*/\n\n\treturn (retval);\n\n}",
                        "locals": [
                            "local bool retval;"
                        ],
                        "modifiers": [],
                        "name": "VirtualKeyPressed",
                        "native": false,
                        "param": [
                            [
                                "EInputKey",
                                "key"
                            ],
                            [
                                "bool",
                                "bRepeat"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 104,
                "replication": "",
                "states": [],
                "variables": [
                    "var const ScaleManagerWindow hScaleMgr;",
                    "var const ScaleManagerWindow vScaleMgr;",
                    "var const ScaleWindow        hScale;",
                    "var const ScaleWindow        vScale;",
                    "var const ButtonWindow       leftButton;",
                    "var const ButtonWindow       rightButton;",
                    "var const ButtonWindow       upButton;",
                    "var const ButtonWindow       downButton;",
                    "var const ClipWindow         clipWindow;",
                    "var const float              marginWidth;",
                    "var const float              marginHeight;",
                    "var const float              scrollbarDistance;",
                    "var const bool               bHideScrollbars;",
                    "var const bool               bHLastShow;",
                    "var const bool               bVLastShow;"
                ]
            }
        },
        "TabGroupWindow.uc": {
            "body": "//=============================================================================\n// TabGroupWindow.\n//=============================================================================\nclass TabGroupWindow extends Window\n\tnative\n\tnoexport;\n\n// ----------------------------------------------------------------------\n// Variables\n\n// Sorted list of selectable children\nvar native private DynamicArray rowMajorWindowList;\nvar native private DynamicArray colMajorWindowList;\n\n// Variables that control window sizing\nvar bool                 bSizeParentToChildren;\nvar bool                 bSizeChildrenToParent;\n\n// Our index into our modal's list of tab groups\nvar private int          tabGroupIndex;\n\n// Absolute position of first child in tab group\nvar private float        firstAbsX;\nvar private float        firstAbsY;\n\ndefaultproperties\n{\n}\n",
            "name": "TabGroupWindow.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "Window",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 29,
                "replication": "",
                "states": [],
                "variables": [
                    "var native private DynamicArray rowMajorWindowList;",
                    "var native private DynamicArray colMajorWindowList;",
                    "var bool                 bSizeParentToChildren;",
                    "var bool                 bSizeChildrenToParent;",
                    "var private int          tabGroupIndex;",
                    "var private float        firstAbsX;",
                    "var private float        firstAbsY;"
                ]
            }
        },
        "TextLogWindow.uc": {
            "body": "//=============================================================================\n// TextLogWindow.\n//=============================================================================\nclass TextLogWindow extends TextWindow\n\tnative\n\tnoexport;\n\n// ----------------------------------------------------------------------\n// Variables\n\n// Log entry timeout\nvar float                       textTimeout;  // Time before a log entry disappears\n\n// Internal info\nvar native private DynamicArray lines;        // Individual log entries\nvar private bool                bTooTall;     // TRUE if the log won't fit in the window\nvar private bool                bPaused;      // TRUE if the log is currently paused\n\n\n// ----------------------------------------------------------------------\n// Intrinsics\n\nnative(1570) final function AddLog(string newText, color linecol);\nnative(1571) final function ClearLog();\nnative(1572) final function SetTextTimeout(float newTimeout);\nnative(1573) final function PauseLog(bool bNewPauseState);\n\ndefaultproperties\n{\n}\n",
            "name": "TextLogWindow.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "TextWindow",
                "functions": {
                    "AddLog": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "AddLog",
                        "native": true,
                        "param": [
                            [
                                "string",
                                "newText"
                            ],
                            [
                                "color",
                                "linecol"
                            ]
                        ],
                        "return": ""
                    },
                    "ClearLog": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "ClearLog",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "PauseLog": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "PauseLog",
                        "native": true,
                        "param": [
                            [
                                "bool",
                                "bNewPauseState"
                            ]
                        ],
                        "return": ""
                    },
                    "SetTextTimeout": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetTextTimeout",
                        "native": true,
                        "param": [
                            [
                                "float",
                                "newTimeout"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 31,
                "replication": "",
                "states": [],
                "variables": [
                    "var float                       textTimeout;  // Time before a log entry disappears",
                    "var native private DynamicArray lines;        // Individual log entries",
                    "var private bool                bTooTall;     // TRUE if the log won't fit in the window",
                    "var private bool                bPaused;      // TRUE if the log is currently paused"
                ]
            }
        },
        "TextWindow.uc": {
            "body": "//=============================================================================\n// TextWindow.\n//=============================================================================\nclass TextWindow extends Window\n\tnative\n\tnoexport;\n\n// ----------------------------------------------------------------------\n// Variables\n\n// Text drawing options\nvar const  EHAlign                 hAlign;             // Horizontal alignment (left, center, right justified)\nvar const  EVAlign                 vAlign;             // Vertical alignment   (top, center, bottom justified)\nvar const  bool                    bWordWrap;          // Is word wrapping on?\nvar const  bool                    bTextIsAccelerator; // Is our text also used for keyboard acceleration?\n\n// Margins\nvar const  float                   hMargin;   // Horizontal margin between the window and the text\nvar const  float                   vMargin;   // Vertical margin between the window and the text\n\n// Preferred sizes\nvar const  int                     minLines;  // Preferred minimum number of lines\nvar const  int                     maxLines;  // Preferred maximum number of lines\nvar const  float                   minWidth;  // Preferred minimum width\n\nvar native private string          text;      // Text string to draw\n\n\n// ----------------------------------------------------------------------\n// Intrinsics\n\nnative(1550) final function SetText(coerce string newText);\nnative(1551) final function AppendText(coerce string newText);\nnative(1552) final function string GetText();\nnative(1553) final function int GetTextLength();\nnative(1554) final function int GetTextPart(int startPos, int count, out string outText);\nnative(1555) final function SetWordWrap(bool bNewWordWrap);\nnative(1556) final function SetTextAlignments(EHAlign newHAlign, EVAlign newVAlign);\nnative(1557) final function SetTextMargins(float newHMargin, float newVMargin);\nnative(1558) final function SetLines(int newMinLines, int newMaxLines);\nnative(1559) final function SetMinLines(int newMinLines);\nnative(1560) final function SetMaxLines(int newMaxLines);\nnative(1561) final function ResetLines();\nnative(1562) final function SetMinWidth(float newMinWidth);\nnative(1563) final function ResetMinWidth();\nnative(1564) final function EnableTextAsAccelerator(optional bool bEnable);\n\ndefaultproperties\n{\n}\n",
            "name": "TextWindow.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "Window",
                "functions": {
                    "AppendText": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "AppendText",
                        "native": true,
                        "param": [
                            [
                                "coerce",
                                "string",
                                "newText"
                            ]
                        ],
                        "return": ""
                    },
                    "EnableTextAsAccelerator": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "EnableTextAsAccelerator",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "bool",
                                "bEnable"
                            ]
                        ],
                        "return": ""
                    },
                    "GetText": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetText",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "GetTextLength": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetTextLength",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "GetTextPart": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetTextPart",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "startPos"
                            ],
                            [
                                "int",
                                "count"
                            ],
                            [
                                "out",
                                "string",
                                "outText"
                            ]
                        ],
                        "return": ""
                    },
                    "ResetLines": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "ResetLines",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "ResetMinWidth": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "ResetMinWidth",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "SetLines": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetLines",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "newMinLines"
                            ],
                            [
                                "int",
                                "newMaxLines"
                            ]
                        ],
                        "return": ""
                    },
                    "SetMaxLines": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetMaxLines",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "newMaxLines"
                            ]
                        ],
                        "return": ""
                    },
                    "SetMinLines": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetMinLines",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "newMinLines"
                            ]
                        ],
                        "return": ""
                    },
                    "SetMinWidth": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetMinWidth",
                        "native": true,
                        "param": [
                            [
                                "float",
                                "newMinWidth"
                            ]
                        ],
                        "return": ""
                    },
                    "SetText": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetText",
                        "native": true,
                        "param": [
                            [
                                "coerce",
                                "string",
                                "newText"
                            ]
                        ],
                        "return": ""
                    },
                    "SetTextAlignments": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetTextAlignments",
                        "native": true,
                        "param": [
                            [
                                "EHAlign",
                                "newHAlign"
                            ],
                            [
                                "EVAlign",
                                "newVAlign"
                            ]
                        ],
                        "return": ""
                    },
                    "SetTextMargins": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetTextMargins",
                        "native": true,
                        "param": [
                            [
                                "float",
                                "newHMargin"
                            ],
                            [
                                "float",
                                "newVMargin"
                            ]
                        ],
                        "return": ""
                    },
                    "SetWordWrap": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetWordWrap",
                        "native": true,
                        "param": [
                            [
                                "bool",
                                "bNewWordWrap"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 51,
                "replication": "",
                "states": [],
                "variables": [
                    "var const  EHAlign                 hAlign;             // Horizontal alignment (left, center, right justified)",
                    "var const  EVAlign                 vAlign;             // Vertical alignment   (top, center, bottom justified)",
                    "var const  bool                    bWordWrap;          // Is word wrapping on?",
                    "var const  bool                    bTextIsAccelerator; // Is our text also used for keyboard acceleration?",
                    "var const  float                   hMargin;   // Horizontal margin between the window and the text",
                    "var const  float                   vMargin;   // Vertical margin between the window and the text",
                    "var const  int                     minLines;  // Preferred minimum number of lines",
                    "var const  int                     maxLines;  // Preferred maximum number of lines",
                    "var const  float                   minWidth;  // Preferred minimum width",
                    "var native private string          text;      // Text string to draw"
                ]
            }
        },
        "TileWindow.uc": {
            "body": "//=============================================================================\n// TileWindow.\n//=============================================================================\nclass TileWindow extends Window\n\tnative\n\tnoexport;\n\n\n// ----------------------------------------------------------------------\n// Variables\n\n// Order information\nvar const byte  orientation;        // Horizontal or vertical\nvar const byte  hDirection;         // Left-right or right-left\nvar const byte  vDirection;         // Top-bottom or bottom-top\n\n// Margins\nvar const float hMargin;            // Horizontal margin\nvar const float vMargin;            // Vertical margin\n\n// Spacing\nvar const float minorSpacing;       // Child spacing along orientation\nvar const float majorSpacing;       // Child spacing when wrapped\n\n// Child alignment relative to other children in the same row\nvar const byte  hChildAlign;        // Horizontal child alignment\nvar const byte  vChildAlign;        // Vertical child alignment\n\n// Wrapping\nvar const bool  bWrap;              // Wrap windows if not enough space?\n\n// Parent filling\nvar const bool  bFillParent;        // Fill the parent with children?\n\n// Child sizing\nvar const bool  bEqualWidth;        // Make all children equal width?\nvar const bool  bEqualHeight;       // Make all children equal height?\n\n// Internal information\nvar native private DynamicArray rowArray;  // Temporary array of row information\n\n\n// ----------------------------------------------------------------------\n// Intrinsics\n\nnative(1535) final function SetMargins(float newHMargin, float newVMargin);\nnative(1536) final function SetOrientation(EOrientation newOrientation);\nnative(1537) final function SetDirections(EHDirection newHDir, EVDirection newVDir);\nnative(1538) final function SetOrder(EOrder newOrder);\nnative(1539) final function SetMinorSpacing(float newSpacing);\nnative(1540) final function SetMajorSpacing(float newSpacing);\nnative(1541) final function SetChildAlignments(EHAlign newHAlign, EVAlign newVAlign);\nnative(1542) final function EnableWrapping(bool bWrapOn);\nnative(1543) final function FillParent(bool FillParent);\nnative(1544) final function MakeWidthsEqual(bool bEqual);\nnative(1545) final function MakeHeightsEqual(bool bEqual);\n\ndefaultproperties\n{\n}\n",
            "name": "TileWindow.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "Window",
                "functions": {
                    "EnableWrapping": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "EnableWrapping",
                        "native": true,
                        "param": [
                            [
                                "bool",
                                "bWrapOn"
                            ]
                        ],
                        "return": ""
                    },
                    "FillParent": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "FillParent",
                        "native": true,
                        "param": [
                            [
                                "bool",
                                "FillParent"
                            ]
                        ],
                        "return": ""
                    },
                    "MakeHeightsEqual": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "MakeHeightsEqual",
                        "native": true,
                        "param": [
                            [
                                "bool",
                                "bEqual"
                            ]
                        ],
                        "return": ""
                    },
                    "MakeWidthsEqual": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "MakeWidthsEqual",
                        "native": true,
                        "param": [
                            [
                                "bool",
                                "bEqual"
                            ]
                        ],
                        "return": ""
                    },
                    "SetChildAlignments": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetChildAlignments",
                        "native": true,
                        "param": [
                            [
                                "EHAlign",
                                "newHAlign"
                            ],
                            [
                                "EVAlign",
                                "newVAlign"
                            ]
                        ],
                        "return": ""
                    },
                    "SetDirections": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetDirections",
                        "native": true,
                        "param": [
                            [
                                "EHDirection",
                                "newHDir"
                            ],
                            [
                                "EVDirection",
                                "newVDir"
                            ]
                        ],
                        "return": ""
                    },
                    "SetMajorSpacing": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetMajorSpacing",
                        "native": true,
                        "param": [
                            [
                                "float",
                                "newSpacing"
                            ]
                        ],
                        "return": ""
                    },
                    "SetMargins": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetMargins",
                        "native": true,
                        "param": [
                            [
                                "float",
                                "newHMargin"
                            ],
                            [
                                "float",
                                "newVMargin"
                            ]
                        ],
                        "return": ""
                    },
                    "SetMinorSpacing": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetMinorSpacing",
                        "native": true,
                        "param": [
                            [
                                "float",
                                "newSpacing"
                            ]
                        ],
                        "return": ""
                    },
                    "SetOrder": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetOrder",
                        "native": true,
                        "param": [
                            [
                                "EOrder",
                                "newOrder"
                            ]
                        ],
                        "return": ""
                    },
                    "SetOrientation": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetOrientation",
                        "native": true,
                        "param": [
                            [
                                "EOrientation",
                                "newOrientation"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 61,
                "replication": "",
                "states": [],
                "variables": [
                    "var const byte  orientation;        // Horizontal or vertical",
                    "var const byte  hDirection;         // Left-right or right-left",
                    "var const byte  vDirection;         // Top-bottom or bottom-top",
                    "var const float hMargin;            // Horizontal margin",
                    "var const float vMargin;            // Vertical margin",
                    "var const float minorSpacing;       // Child spacing along orientation",
                    "var const float majorSpacing;       // Child spacing when wrapped",
                    "var const byte  hChildAlign;        // Horizontal child alignment",
                    "var const byte  vChildAlign;        // Vertical child alignment",
                    "var const bool  bWrap;              // Wrap windows if not enough space?",
                    "var const bool  bFillParent;        // Fill the parent with children?",
                    "var const bool  bEqualWidth;        // Make all children equal width?",
                    "var const bool  bEqualHeight;       // Make all children equal height?",
                    "var native private DynamicArray rowArray;  // Temporary array of row information"
                ]
            }
        },
        "ToggleWindow.uc": {
            "body": "//=============================================================================\n// ToggleWindow.\n//=============================================================================\nclass ToggleWindow extends ButtonWindow\n\tnative\n\tnoexport;\n\n// ----------------------------------------------------------------------\n// Variables\n\nvar const sound enableSound;\nvar const sound disableSound;\n\n// ----------------------------------------------------------------------\n// Intrinsics\n\nnative(1610) final function ChangeToggle();\nnative(1611) final function SetToggle(bool bNewToggle);\nnative(1612) final function bool GetToggle();\nnative(1613) final function SetToggleSounds(optional sound enableSound,\n                                            optional sound disableSound);\n\ndefaultproperties\n{\n}\n",
            "name": "ToggleWindow.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "ButtonWindow",
                "functions": {
                    "ChangeToggle": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "ChangeToggle",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "GetToggle": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetToggle",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "SetToggle": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetToggle",
                        "native": true,
                        "param": [
                            [
                                "bool",
                                "bNewToggle"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 26,
                "replication": "",
                "states": [],
                "variables": [
                    "var const sound enableSound;",
                    "var const sound disableSound;"
                ]
            }
        },
        "ViewportWindow.uc": {
            "body": "//=============================================================================\n// ViewportWindow.\n//=============================================================================\nclass ViewportWindow extends Window\n\tnative\n\tnoexport;\n\n// ----------------------------------------------------------------------\n// Variables\n\nvar const bool    bEnableViewport;\nvar const bool    bClearZ;\nvar const bool    bShowActor;\nvar const bool    bShowWeapons;\nvar const bool    bUseViewRotation;\nvar const bool    bUseEyeHeight;\nvar const bool    bWatchEyeHeight;\n\nvar const float   fov;\n\nvar const texture defaultTexture;\nvar const color   defaultColor;\n\nvar const actor   originActor;\nvar const actor   watchActor;\nvar const vector  location;\nvar const vector  relLocation;\nvar const rotator rotation;\nvar const rotator relRotation;\n\nvar private bool    bOriginActorDestroyed;\nvar private vector  lastLocation;\nvar private rotator lastRotation;\n\nvar private transient int viewportFrame;\n\n\n// ----------------------------------------------------------------------\n// Intrinsics\n\nnative(1940) final function SetViewportActor(optional actor newOriginActor,\n                                             optional bool bEyeLevel,\n                                             optional bool bEnable);\nnative(1941) final function SetViewportLocation(Vector newLocation,\n                                                optional bool bEnable);\n\nnative(1942) final function SetWatchActor(optional actor newWatchActor,\n                                          optional bool bEyeLevel);\nnative(1943) final function SetRotation(optional rotator newRotation);\n\nnative(1945) final function EnableViewport(optional bool bEnable);\nnative(1946) final function SetFOVAngle(optional float newAngle);\nnative(1947) final function ShowViewportActor(optional bool bShow);\nnative(1948) final function ShowWeapons(optional bool bShow);\n\nnative(1950) final function SetRelativeLocation(optional vector relLoc);\nnative(1951) final function SetRelativeRotation(optional rotator relRot);\n\nnative(1955) final function SetDefaultTexture(optional texture newTexture,\n                                              optional color newColor);\nnative(1956) final function ClearZBuffer(optional bool bClear);\n\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// CalcView() : Overrideable callback used to modify camera position and\n//              rotation\n\nevent CalcView(actor originActor, actor watchActor,\n               out vector frameLocation, out rotator frameRotation)\n{\n}\n\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// SetViewportLocationXYZ() - Convenience function\n\nfunction SetViewportLocationXYZ(float x, float y, float z, bool bEnable)\n{\n\tlocal Vector vector;\n\n\tvector.x = x;\n\tvector.y = y;\n\tvector.z = z;\n\n\tSetViewportLocation(vector, bEnable);\n}\n\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// SetRotationPYR() - Convenience function\n\nfunction SetRotationPYR(int pitch, int yaw, int roll)\n{\n\tlocal rotator rotation;\n\n\trotation.roll  = roll;\n\trotation.pitch = pitch;\n\trotation.yaw   = yaw;\n\n\tSetRotation(rotation);\n}\n\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// SetRelativeLocationXYZ() - Convenience function\n\nfunction SetRelativeLocationXYZ(float x, float y, float z)\n{\n\tlocal Vector vector;\n\n\tvector.x = x;\n\tvector.y = y;\n\tvector.z = z;\n\n\tSetRelativeLocation(vector);\n}\n\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// SetRelativeRotationPYR() - Convenience function\n\nfunction SetRelativeRotationPYR(int pitch, int yaw, int roll)\n{\n\tlocal rotator rotation;\n\n\trotation.roll  = roll;\n\trotation.pitch = pitch;\n\trotation.yaw   = yaw;\n\n\tSetRelativeRotation(rotation);\n}\n\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// SetDefaultTextureRGB() - Convenience function\n\nfunction SetDefaultTextureRGB(texture newTexture, INT red, INT green, INT blue)\n{\n\tlocal color newColor;\n\n\tnewColor.r = red;\n\tnewColor.g = green;\n\tnewColor.b = blue;\n\n\tSetDefaultTexture(newTexture, newColor);\n}\n\ndefaultproperties\n{\n     DefaultTexture=Texture'Extension.Solid'\n}\n",
            "name": "ViewportWindow.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "DefaultTexture=Texture'Extension.Solid'"
                ],
                "exec": [],
                "extends": "Window",
                "functions": {
                    "ClearZBuffer": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "ClearZBuffer",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "bool",
                                "bClear"
                            ]
                        ],
                        "return": ""
                    },
                    "EnableViewport": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "EnableViewport",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "bool",
                                "bEnable"
                            ]
                        ],
                        "return": ""
                    },
                    "SetDefaultTextureRGB": {
                        "body": "{\n\n\tnewColor.r = red;\n\tnewColor.g = green;\n\tnewColor.b = blue;\n\n\tSetDefaultTexture(newTexture, newColor);\n}",
                        "locals": [
                            "local color newColor;"
                        ],
                        "modifiers": [],
                        "name": "SetDefaultTextureRGB",
                        "native": false,
                        "param": [
                            [
                                "texture",
                                "newTexture"
                            ],
                            [
                                "INT",
                                "red"
                            ],
                            [
                                "INT",
                                "green"
                            ],
                            [
                                "INT",
                                "blue"
                            ]
                        ],
                        "return": ""
                    },
                    "SetFOVAngle": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetFOVAngle",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "float",
                                "newAngle"
                            ]
                        ],
                        "return": ""
                    },
                    "SetRelativeLocation": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetRelativeLocation",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "vector",
                                "relLoc"
                            ]
                        ],
                        "return": ""
                    },
                    "SetRelativeLocationXYZ": {
                        "body": "{\n\n\tvector.x = x;\n\tvector.y = y;\n\tvector.z = z;\n\n\tSetRelativeLocation(vector);\n}",
                        "locals": [
                            "local Vector vector;"
                        ],
                        "modifiers": [],
                        "name": "SetRelativeLocationXYZ",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "x"
                            ],
                            [
                                "float",
                                "y"
                            ],
                            [
                                "float",
                                "z"
                            ]
                        ],
                        "return": ""
                    },
                    "SetRelativeRotation": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetRelativeRotation",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "rotator",
                                "relRot"
                            ]
                        ],
                        "return": ""
                    },
                    "SetRelativeRotationPYR": {
                        "body": "{\n\n\trotation.roll  = roll;\n\trotation.pitch = pitch;\n\trotation.yaw   = yaw;\n\n\tSetRelativeRotation(rotation);\n}",
                        "locals": [
                            "local rotator rotation;"
                        ],
                        "modifiers": [],
                        "name": "SetRelativeRotationPYR",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "pitch"
                            ],
                            [
                                "int",
                                "yaw"
                            ],
                            [
                                "int",
                                "roll"
                            ]
                        ],
                        "return": ""
                    },
                    "SetRotation": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetRotation",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "rotator",
                                "newRotation"
                            ]
                        ],
                        "return": ""
                    },
                    "SetRotationPYR": {
                        "body": "{\n\n\trotation.roll  = roll;\n\trotation.pitch = pitch;\n\trotation.yaw   = yaw;\n\n\tSetRotation(rotation);\n}",
                        "locals": [
                            "local rotator rotation;"
                        ],
                        "modifiers": [],
                        "name": "SetRotationPYR",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "pitch"
                            ],
                            [
                                "int",
                                "yaw"
                            ],
                            [
                                "int",
                                "roll"
                            ]
                        ],
                        "return": ""
                    },
                    "SetViewportLocationXYZ": {
                        "body": "{\n\n\tvector.x = x;\n\tvector.y = y;\n\tvector.z = z;\n\n\tSetViewportLocation(vector, bEnable);\n}",
                        "locals": [
                            "local Vector vector;"
                        ],
                        "modifiers": [],
                        "name": "SetViewportLocationXYZ",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "x"
                            ],
                            [
                                "float",
                                "y"
                            ],
                            [
                                "float",
                                "z"
                            ],
                            [
                                "bool",
                                "bEnable"
                            ]
                        ],
                        "return": ""
                    },
                    "ShowViewportActor": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "ShowViewportActor",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "bool",
                                "bShow"
                            ]
                        ],
                        "return": ""
                    },
                    "ShowWeapons": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "ShowWeapons",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "bool",
                                "bShow"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 158,
                "replication": "",
                "states": [],
                "variables": [
                    "var const bool    bEnableViewport;",
                    "var const bool    bClearZ;",
                    "var const bool    bShowActor;",
                    "var const bool    bShowWeapons;",
                    "var const bool    bUseViewRotation;",
                    "var const bool    bUseEyeHeight;",
                    "var const bool    bWatchEyeHeight;",
                    "var const float   fov;",
                    "var const texture defaultTexture;",
                    "var const color   defaultColor;",
                    "var const actor   originActor;",
                    "var const actor   watchActor;",
                    "var const vector  location;",
                    "var const vector  relLocation;",
                    "var const rotator rotation;",
                    "var const rotator relRotation;",
                    "var private bool    bOriginActorDestroyed;",
                    "var private vector  lastLocation;",
                    "var private rotator lastRotation;",
                    "var private transient int viewportFrame;"
                ]
            }
        },
        "Window.uc": {
            "body": "//=============================================================================\n// Window.\n//=============================================================================\nclass Window extends ExtensionObject\n\tnative\n\tnoexport;\n\n// ----------------------------------------------------------------------\n// Variables\n\n// Quick class reference\nvar private byte     windowType;          // Contains window type\n\nvar private window   parentOwner;         // Window that \"owns\" this window\n\n// Booleans\nvar const bool       bIsVisible;          // TRUE if the window is visible\nvar const bool       bIsSensitive;        // TRUE if the window can take input\nvar const bool       bIsSelectable;       // TRUE if the window can have keyboard focus\nvar const bool       bIsInitialized;      // TRUE if the window has been initialized\n\nvar const bool       bBeingDestroyed;     // TRUE if this window is going bye-bye\nvar const int        lockCount;           // Reference count of locks on this window\n\n// Background drawing options\nvar const bool       bDrawRawBackground;  // TRUE if raw backgrounds should be drawn here\nvar const bool       bStretchBackground;  // TRUE=stretch background, FALSE=repeat tile\nvar const bool       bSmoothBackground;   // TRUE if the background should be smoothed\nvar const EDrawStyle backgroundStyle;     // Normal, masked or translucent\n\n// Text/font drawing state variables\nvar const color      textColor;           // Color of text\nvar const plane      textPlane;           // Plane of text; converted from textColor\nvar const font       normalFont;          // Regular font\nvar const font       boldFont;            // Boldface font\nvar const float      textVSpacing;        // Space between lines of text\nvar const color      tileColor;           // Color of tile\nvar const plane      tilePlane;           // Plane of tile; converted from tileColor\nvar const bool       bSpecialText;        // TRUE if special text is enabled\nvar const bool       bTextTranslucent;    // TRUE if translucent text is enabled\n\n// Configuration information\nvar const float      x;                   // X position of window relative to parent\nvar const float      y;                   // Y position of window relative to parent\nvar const float      width;               // Width of window\nvar const float      height;              // Height of window\n\n// User-specified size preferences\nvar const EHAlign    winHAlign;           // User-specified horizontal alignment\nvar const EVAlign    winVAlign;           // User-specified vertical alignment\nvar const float      hMargin0;            // User-specified first horizontal margin\nvar const float      hMargin1;            // User-specified second horizontal margin (FULL only)\nvar const float      vMargin0;            // User-specified first vertical margin\nvar const float      vMargin1;            // User-specified second vertical margin (FULL only)\nvar const float      hardcodedWidth;      // User-specified preferred width\nvar const float      hardcodedHeight;     // User-specified preferred height\n\n// Temporary variables; used by parents to configure children\nvar float            holdX;\nvar float            holdY;\nvar float            holdWidth;\nvar float            holdHeight;\n\n// Accelerator key info\nvar int              acceleratorKey;         // Hotkey, cast to an INT (hack)\n\n// Efficiency variables for geometry negotiation\nvar bool             bNeedsReconfigure;      // TRUE if this window must be reconfigured\nvar bool             bNeedsQuery;            // TRUE if this window must be requeried\nvar bool             bConfigured;            // TRUE if this window was reconfigured\nvar private bool     bLastWidthSpecified;    // Whether width was specified in last size query\nvar private bool     bLastHeightSpecified;   // Whether height was specified in last size query\nvar private float    lastSpecifiedWidth;     // Width specified in last size query\nvar private float    lastSpecifiedHeight;    // Height specified in last size query\nvar private float    lastQueryWidth;         // Width returned by last size query\nvar private float    lastQueryHeight;        // Height returned by last size query\n\n// Callback options\nvar bool             bTickEnabled;        // TRUE if the UnrealScript Tick() is enabled\n\n// Multiple click options\nvar int              maxClicks;           // Number of clicks handled by window; 0=any number\n\n// Clipping rectangle\nvar const ClipRect   winClipRect;         // Clipping rectangle; maintained at all times\n\n// Texture information\nvar const texture    background;          // Background textures\n\n// Cursor information\nvar const texture    defaultCursor;       // Default cursor; can be overridden in CursorRequested\nvar const texture    defaultCursorShadow; // Default cursor shadow; can be overridden in CursorRequested\nvar const float      defaultHotX;         // Default hot X; can be overridden in CursorRequested\nvar const float      defaultHotY;         // Default hot Y; can be overridden in CursorRequested\nvar const color      defaultCursorColor;  // Default cursor color; can be overridden in CursorRequested\n\n// Sound stuff\nvar const sound      focusSound;          // Played when this window obtains focus\nvar const sound      unfocusSound;        // Played when this window loses focus\nvar const sound      visibleSound;        // Played when this window becomes visible\nvar const sound      invisibleSound;      // Played when this window becomes invisible\nvar const float      soundVolume;         // Volume of sound\n\n// Albert variables\nvar const object     clientObject;        // Pointer to an object associated with this window\n\n// Traversal positions (used only when bIsSelectable is TRUE)\nvar private int      rowMajorIndex;       // Index into tab group's row-major sorted list\nvar private int      colMajorIndex;       // Index into tab group's column-major sorted list\n\n// Attribute pointer\nvar native private int      att;                 // Pointer to first attribute; used by parent\n\n// Timer pointers\nvar native private int      firstTimer;          // Pointer to this window's first timer\nvar native private int      freeTimer;           // Free list of timers\n\nvar private gc       wGc;\nvar private gc       gGc;\n\n// Relatives\nvar const window     winParent;           // Parent window; NULL if this is root\nvar const window     firstChild;          // \"Lowest\" child (first one drawn)\nvar const window     lastChild;           // \"Highest\" child (last one drawn)\nvar const window     prevSibling;         // Next \"lowest\" sibling (previous one drawn)\nvar const window     nextSibling;         // Next \"highest\" sibling (next one drawn)\n\n\n// ----------------------------------------------------------------------\n// Intrinsics\n\nnative(1409) final function Destroy();\nnative(1410) final function window NewChild(class newClass, optional bool bShow);\nnative(1411) final function Raise();\nnative(1412) final function Lower();\nnative(1413) final function Show(optional bool bShow);\nnative(1414) final function Hide();\nnative(1415) final function bool IsVisible(optional bool bRecurse);\nnative(1416) final function SetSensitivity(bool newSensitivity);\nnative(1417) final function EnableWindow(optional bool bEnable);\nnative(1418) final function DisableWindow();\nnative(1419) final function bool IsSensitive(optional bool bRecurse);\nnative(1420) final function SetSelectability(bool newSelectability);\nnative(1421) final function SetBackground(texture newBackground);\nnative(1422) final function SetBackgroundStyle(EDrawStyle newStyle);\nnative(1423) final function SetBackgroundSmoothing(bool newSmoothing);\nnative(1424) final function SetBackgroundStretching(bool newStretching);\n\nnative(1425) final function RootWindow     GetRootWindow();\nnative(1426) final function ModalWindow    GetModalWindow();\nnative(1427) final function TabGroupWindow GetTabGroupWindow();\nnative(1428) final function Window         GetParent();\nnative(1429) final function PlayerPawnExt  GetPlayerPawn();\n\nnative(1430) final function SetConfiguration(float newX, float newY,\n                                             float newWidth, float newHeight);\nnative(1431) final function SetSize(float newWidth, float newHeight);\nnative(1432) final function SetPos(float newX, float newY);\nnative(1433) final function SetWidth(float newWidth);\nnative(1434) final function SetHeight(float newHeight);\nnative(1435) final function ResetSize();\nnative(1436) final function ResetWidth();\nnative(1437) final function ResetHeight();\nnative(1438) final function SetWindowAlignments(EHAlign hAlign, EVAlign vAlign,\n                                                optional float hMargin0,\n                                                optional float vMargin0,\n                                                optional float hMargin1,\n                                                optional float vMargin1);\n\nnative(1439) final function SetAcceleratorText(string newStr);\n\nnative(1440) final function bool   SetFocusWindow(window newFocusWindow);\nnative(1441) final function window GetFocusWindow();\nnative(1442) final function window MoveFocusLeft();\nnative(1443) final function window MoveFocusRight();\nnative(1444) final function window MoveFocusUp();\nnative(1445) final function window MoveFocusDown();\nnative(1446) final function window MoveTabGroupNext();\nnative(1447) final function window MoveTabGroupPrev();\nnative(1448) final function bool   IsFocusWindow();\n\nnative(1449) final function ConvertCoordinates(window fromWin, float fromX, float fromY,\n                                               window toWin, out float toX, out float toY);\n\nnative(1450) final function GrabMouse();\nnative(1451) final function UngrabMouse();\n\nnative(1452) final function GetCursorPos(out float mouseX, out float mouseY);\nnative(1453) final function SetCursorPos(float newMouseX, float newMouseY);\n\nnative(1454) final function SetDefaultCursor(Texture tx,\n                                             optional Texture shadowTexture,\n                                             optional float hotX,\n                                             optional float hotY,\n                                             optional color cursorColor);\n\nnative(1455) final function window GetTopChild(optional bool bVisibleOnly);\nnative(1456) final function window GetBottomChild(optional bool bVisibleOnly);\nnative(1457) final function window GetHigherSibling(optional bool bVisibleOnly);\nnative(1458) final function window GetLowerSibling(optional bool bVisibleOnly);\nnative(1459) final function DestroyAllChildren();\n\nnative(1460) final function AskParentForReconfigure();\nnative(1461) final function ConfigureChild(float newX, float newY, float newWidth, float newHeight);\nnative(1462) final function ResizeChild();\nnative(1463) final function float QueryPreferredWidth(float queryHeight);\nnative(1464) final function float QueryPreferredHeight(float queryWidth);\nnative(1465) final function QueryPreferredSize(out float preferredWidth, out float preferredHeight);\nnative(1466) final function QueryGranularity(out float hGranularity, out float vGranularity);\nnative(1467) final function SetChildVisibility(bool bNewVisibility);\n\nnative(1468) final function AskParentToShowArea(optional float areaX, optional float areaY,\n                                                optional float areaWidth, optional float areaHeight);\n\nnative(1469) final function string ConvertScriptString(string oldStr);\n\nnative(1470) final function bool IsKeyDown(EInputKey key);\nnative(1471) final function bool IsPointInWindow(float pointX, float pointY);\nnative(1472) final function window FindWindow(float pointX, float pointY,\n                                              out float relativeX, out float relativeY);\n\nnative(1473) final function PlaySound(Sound newsound,\n                                      optional float volume, optional float pitch,\n                                      optional float posX, optional float posY);\nnative(1474) final function SetSoundVolume(float newVolume);\n\nnative(1475) final function SetTileColor(color newColor);\nnative(1476) final function SetTextColor(color newColor);\nnative(1477) final function SetFont(Font fn);\nnative(1478) final function SetFonts(Font nFont, Font bFont);\nnative(1479) final function SetNormalFont(Font fn);\nnative(1480) final function SetBoldFont(Font fn);\nnative(1481) final function EnableSpecialText(optional bool bEnable);\n\nnative(1482) final function string CarriageReturn();\n\nnative(1483) final function EnableTranslucentText(optional bool bEnable);\n\nnative(1484) final function SetBaselineData(optional float newBaselineOffset,\n                                            optional float newUnderlineHeight);\n\nnative(1485) final function GC GetGC();\nnative(1486) final function ReleaseGC(GC gc);\n\nnative(1487) final function SetClientObject(object newClientObject);\nnative(1488) final function object GetClientObject();\n\nnative(1489) final function bool ConvertVectorToCoordinates(vector location,\n                                                            out float relativeX,\n                                                            out float relativeY);\n\nnative(1490) final function int AddTimer(float timeout, optional bool bLoop, optional int clientData,\n                                         optional name functionName);\nnative(1491) final function RemoveTimer(int timerId);\nnative(1492) final function float GetTickOffset();\n\nnative(1493) final function ChangeStyle();\n\nnative(1495) final function SetFocusSounds(optional sound focusSound, optional sound unfocusSound);\nnative(1496) final function SetVisibilitySounds(optional sound visSound, optional sound invisSound);\n\nnative(1497) final function AddActorRef(actor refActor);\nnative(1498) final function RemoveActorRef(actor refActor);\nnative(1499) final function bool IsActorValid(actor refActor);\n\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// SetTextColorRGB() : Sets the color of text based on individual RGB\n//                     values\n\nfunction SetTextColorRGB(INT red, INT green, INT blue)\n{\n\tlocal color newColor;\n\tnewColor.r = red;\n\tnewColor.g = green;\n\tnewColor.b = blue;\n\tSetTextColor(newColor);\n}\n\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// SetTileColorRGB() : Sets the color of a tile based on individual RGB\n//                     values\n\nfunction SetTileColorRGB(INT red, INT green, INT blue)\n{\n\tlocal color newColor;\n\tnewColor.r = red;\n\tnewColor.g = green;\n\tnewColor.b = blue;\n\tSetTileColor(newColor);\n}\n\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// GetColorScaled() : A useful little routine that generates a scaled\n//                    color, based on a value from 0 to 1\n//                    (Moved to Window.uc and modified slightly because\n//                    it was being copied all over the place :)\n\nfunction Color GetColorScaled(float percent)\n{\n\tlocal float mult;\n\tlocal Color col;\n\n\tif (percent > 0.80)\n\t{\n\t\tcol.r = 0;\n\t\tcol.g = 255;\n\t\tcol.b = 0;\n\t}\n\telse if (percent > 0.40)\n\t{\n\t\tmult = (percent-0.40)/(0.80-0.40);\n\t\tcol.r = 255 + (0-255)*mult;\n\t\tcol.g = 255;\n\t\tcol.b = 0;\n\t}\n\telse if (percent > 0.10)\n\t{\n\t\tmult = (percent-0.10)/(0.40-0.10);\n\t\tcol.r = 255;\n\t\tcol.g = 0 + (255-0)*mult;\n\t\tcol.b = 0;\n\t}\n\telse if (percent > 0)\n\t{\n\t\tcol.r = 255;\n\t\tcol.g = 0;\n\t\tcol.b = 0;\n\t}\n\telse\n\t{\n\t\tcol.r = 0;\n\t\tcol.g = 0;\n\t\tcol.b = 0;\n\t}\n\n\treturn col;\n\n}\n\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// CR() : Shortened form of CarriageReturn()\n\nfunction string CR()\n{\n\treturn CarriageReturn();\n}\n\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// InitWindow() : Window constructor\n\nevent InitWindow()\n{\n}\n\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// DestroyWindow() : Window destructor\n\nevent DestroyWindow()\n{\n}\n\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// WindowReady() : Called just before a window is first drawn\n\nevent WindowReady()\n{\n}\n\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// ParentRequestedPreferredSize() : Called when the parent wants to know\n//                                  this window's preferred size\n\nevent ParentRequestedPreferredSize(bool bWidthSpecified, out float preferredWidth,\n                                   bool bHeightSpecified, out float preferredHeight)\n{\n}\n\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// ParentRequestedGranularity() : Called when the parent wants to know\n//                                this window's granularity\n\nevent ParentRequestedGranularity(out float hGranularity,\n                                 out float vGranularity)\n{\n}\n\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// ChildRequestedVisibilityChange() : Called when a child wants to become\n//                                    visible or invisible\n\nevent ChildRequestedVisibilityChange(window childWin, bool bNewVisibility)\n{\n\tchildWin.SetChildVisibility(bNewVisibility);\n}\n\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// ChildRequestedReconfiguration() : Called when a child wants to change\n//                                   size\n\nevent bool ChildRequestedReconfiguration(window childWin)\n{\n\n\tchildWin.ResizeChild();\n\n\treturn true;\n}\n\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// ChildRequestedShowArea() : Called when a child wants to be seen\n\nevent ChildRequestedShowArea(window child, float showX, float showY,\n                             float showWidth, float showHeight)\n{\n}\n\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// ConfigurationChanged() : Called when the parent changes this window's\n//                          size\n\nevent ConfigurationChanged()\n{\n}\n\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// VisibilityChanged() : Called when the parent shows or hides this\n//                       window\n\nevent VisibilityChanged(bool bNewVisibility)\n{\n}\n\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// SensitivityChanged() : Called when this window becomes sensitive or\n//                        insensitive\n\nevent SensitivityChanged(bool bNewSensitivity)\n{\n}\n\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// MouseMoved() : Called when the mouse cursor moves over a window\n\nevent MouseMoved(float newX, float newY)\n{\n}\n\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// RawMouseButtonPressed() : Raw event called when a mouse button is\n//                           pressed\n\nevent bool RawMouseButtonPressed(float pointX, float pointY,\n                                 EInputKey button, EInputState iState)\n{\n\treturn false;  // don't handle\n}\n\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// RawKeyPressed() : Raw event called when a key is pressed\n\nevent bool RawKeyPressed(EInputKey key, EInputState iState, bool bRepeat)\n{\n\treturn false;  // don't handle\n}\n\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// MouseButtonPressed() : Called when a mouse button is pressed\n\nevent bool MouseButtonPressed(float pointX, float pointY, EInputKey button,\n                              int numClicks)\n{\n\treturn false;  // don't handle\n}\n\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// MouseButtonReleased() : Called when a mouse button is released\n\nevent bool MouseButtonReleased(float pointX, float pointY, EInputKey button,\n                               int numClicks)\n{\n\treturn false;  // don't handle\n}\n\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// KeyPressed() : Called when a key is pressed; proves an ASCII keypress\n//                value in the form of a string\n\nevent bool KeyPressed(string key)\n{\n\treturn false;  // don't handle\n}\n\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// AcceleratorKeyPressed() : Called when this window's accelerator key\n//                           is activated\n\nevent bool AcceleratorKeyPressed(string key)\n{\n\treturn false;  // don't handle\n}\n\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// VirtualKeyPressed() : Called when a key is pressed; provides a virtual\n//                       key value\n\nevent bool VirtualKeyPressed(EInputKey key, bool bRepeat)\n{\n\treturn false;\n}\n\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// MouseEnteredWindow() : Called when the mouse enters a window\n\nevent MouseEnteredWindow()\n{\n}\n\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// MouseLeftWindow() : Called when the mouse leaves a window\n\nevent MouseLeftWindow()\n{\n}\n\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// FocusEnteredWindow() : Called when a window gets focus\n\nevent FocusEnteredWindow()\n{\n}\n\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// FocusLeftWindow() : Called when a window loses focus\n\nevent FocusLeftWindow()\n{\n}\n\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// FocusEnteredDescendant() : Called when a descendant window gets focus\n\nevent FocusEnteredDescendant(Window enterWindow)\n{\n}\n\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// FocusLeftDescendant() : Called when a descendant window loses focus\n\nevent FocusLeftDescendant(Window leaveWindow)\n{\n}\n\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// ButtonActivated() : Called when an ancestor button is activated\n\nevent bool ButtonActivated(Window button)\n{\n\treturn false;\n}\n\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// ToggleChanged() : Called when an ancestor toggle is modified\n\nevent bool ToggleChanged(Window button, bool bNewToggle)\n{\n\treturn false;\n}\n\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// BoxOptionSelected() : Called when an ancestor message box option is\n//                       chosen\n\nevent bool BoxOptionSelected(Window box, int buttonNumber)\n{\n\treturn false;\n}\n\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// ScalePositionChanged() : Called when an ancestor scale window's\n//                          position is moved\n\nevent bool ScalePositionChanged(Window scale, int newTickPosition,\n                                float newValue, bool bFinal)\n{\n\treturn false;\n}\n\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// ScaleRangeChanged() : Called when an ancestor scale window's\n//                       position + span is moved\n\nevent bool ScaleRangeChanged(Window scale, int fromTick, int toTick,\n                             float fromValue, float toValue, bool bFinal)\n{\n\treturn false;\n}\n\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// ScaleAttributesChanged() : Called when an ancestor scale window's\n//                            position, span or range is changed\n\nevent bool ScaleAttributesChanged(Window scale, int tickPosition,\n                                  int tickSpan, int numTicks)\n{\n\treturn false;\n}\n\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// ClipAttributesChanged() : Called when an ancestor clip window's\n//                           attributes have changed\n\nevent bool ClipAttributesChanged(Window scale,\n                                 int newClipWidth,  int newClipHeight,\n                                 int newChildWidth, int newChildHeight)\n{\n\treturn false;\n}\n\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// ListRowActivated() : Called when a list item has been activated\n\nevent bool ListRowActivated(window list, int rowId)\n{\n\treturn false;\n}\n\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// ListSelectionChanged() : Called when list items are selected or\n//                          deselected\n\nevent bool ListSelectionChanged(window list, int numSelections, int focusRowId)\n{\n\treturn false;\n}\n\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// ClipPositionChanged() : Called when the position of a window within\n//                         a clip window is changed\n\nevent bool ClipPositionChanged(window clip, int newCol, int newRow)\n{\n\treturn false;\n}\n\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// TextChanged() : Called when the text in an edit window has changed\n\nevent bool TextChanged(window edit, bool bModified)\n{\n\treturn false;\n}\n\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// EditActivated() : Called when the user hits the ENTER key in a single-\n//                   line edit window\n\nevent bool EditActivated(window edit, bool bModified)\n{\n\treturn false;\n}\n\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// DrawWindow() : Draws the window\n\nevent DrawWindow(GC gc)\n{\n}\n\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// PostDrawWindow() : Draws the window (AFTER all children are drawn)\n\nevent PostDrawWindow(GC gc)\n{\n}\n\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// ChildAdded() : Called when a child window is added\n\nevent ChildAdded(Window child)\n{\n}\n\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// ChildRemoved() : Called when a child window is removed\n\nevent ChildRemoved(Window child)\n{\n}\n\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// DescendantAdded() : Called when a descendant window is added\n\nevent DescendantAdded(Window descendant)\n{\n}\n\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// DescendantRemoved() : Called when a descendant window is removed\n\nevent DescendantRemoved(Window descendant)\n{\n}\n\ndefaultproperties\n{\n}\n",
            "name": "Window.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "ExtensionObject",
                "functions": {
                    "AcceleratorKeyPressed": {
                        "body": "{\n\treturn false;  // don't handle\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "AcceleratorKeyPressed",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "key"
                            ]
                        ],
                        "return": "bool"
                    },
                    "AddActorRef": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "AddActorRef",
                        "native": true,
                        "param": [
                            [
                                "actor",
                                "refActor"
                            ]
                        ],
                        "return": ""
                    },
                    "AskParentForReconfigure": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "AskParentForReconfigure",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "BoxOptionSelected": {
                        "body": "{\n\treturn false;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "BoxOptionSelected",
                        "native": false,
                        "param": [
                            [
                                "Window",
                                "box"
                            ],
                            [
                                "int",
                                "buttonNumber"
                            ]
                        ],
                        "return": "bool"
                    },
                    "ButtonActivated": {
                        "body": "{\n\treturn false;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "ButtonActivated",
                        "native": false,
                        "param": [
                            [
                                "Window",
                                "button"
                            ]
                        ],
                        "return": "bool"
                    },
                    "CR": {
                        "body": "{\n\treturn CarriageReturn();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "CR",
                        "native": false,
                        "param": [],
                        "return": "string"
                    },
                    "CarriageReturn": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "CarriageReturn",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "ChangeStyle": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "ChangeStyle",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "ChildAdded": {
                        "body": "{\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "ChildAdded",
                        "native": false,
                        "param": [
                            [
                                "Window",
                                "child"
                            ]
                        ],
                        "return": ""
                    },
                    "ChildRemoved": {
                        "body": "{\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "ChildRemoved",
                        "native": false,
                        "param": [
                            [
                                "Window",
                                "child"
                            ]
                        ],
                        "return": ""
                    },
                    "ChildRequestedReconfiguration": {
                        "body": "{\n\n\tchildWin.ResizeChild();\n\n\treturn true;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "ChildRequestedReconfiguration",
                        "native": false,
                        "param": [
                            [
                                "window",
                                "childWin"
                            ]
                        ],
                        "return": "bool"
                    },
                    "ChildRequestedVisibilityChange": {
                        "body": "{\n\tchildWin.SetChildVisibility(bNewVisibility);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "ChildRequestedVisibilityChange",
                        "native": false,
                        "param": [
                            [
                                "window",
                                "childWin"
                            ],
                            [
                                "bool",
                                "bNewVisibility"
                            ]
                        ],
                        "return": ""
                    },
                    "ClipPositionChanged": {
                        "body": "{\n\treturn false;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "ClipPositionChanged",
                        "native": false,
                        "param": [
                            [
                                "window",
                                "clip"
                            ],
                            [
                                "int",
                                "newCol"
                            ],
                            [
                                "int",
                                "newRow"
                            ]
                        ],
                        "return": "bool"
                    },
                    "ConfigurationChanged": {
                        "body": "{\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "ConfigurationChanged",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ConfigureChild": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "ConfigureChild",
                        "native": true,
                        "param": [
                            [
                                "float",
                                "newX"
                            ],
                            [
                                "float",
                                "newY"
                            ],
                            [
                                "float",
                                "newWidth"
                            ],
                            [
                                "float",
                                "newHeight"
                            ]
                        ],
                        "return": ""
                    },
                    "ConvertScriptString": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "ConvertScriptString",
                        "native": true,
                        "param": [
                            [
                                "string",
                                "oldStr"
                            ]
                        ],
                        "return": ""
                    },
                    "DescendantAdded": {
                        "body": "{\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "DescendantAdded",
                        "native": false,
                        "param": [
                            [
                                "Window",
                                "descendant"
                            ]
                        ],
                        "return": ""
                    },
                    "DescendantRemoved": {
                        "body": "{\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "DescendantRemoved",
                        "native": false,
                        "param": [
                            [
                                "Window",
                                "descendant"
                            ]
                        ],
                        "return": ""
                    },
                    "Destroy": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "Destroy",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "DestroyAllChildren": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "DestroyAllChildren",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "DestroyWindow": {
                        "body": "{\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "DestroyWindow",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "DisableWindow": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "DisableWindow",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "DrawWindow": {
                        "body": "{\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "DrawWindow",
                        "native": false,
                        "param": [
                            [
                                "GC",
                                "gc"
                            ]
                        ],
                        "return": ""
                    },
                    "EditActivated": {
                        "body": "{\n\treturn false;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "EditActivated",
                        "native": false,
                        "param": [
                            [
                                "window",
                                "edit"
                            ],
                            [
                                "bool",
                                "bModified"
                            ]
                        ],
                        "return": "bool"
                    },
                    "EnableSpecialText": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "EnableSpecialText",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "bool",
                                "bEnable"
                            ]
                        ],
                        "return": ""
                    },
                    "EnableTranslucentText": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "EnableTranslucentText",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "bool",
                                "bEnable"
                            ]
                        ],
                        "return": ""
                    },
                    "EnableWindow": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "EnableWindow",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "bool",
                                "bEnable"
                            ]
                        ],
                        "return": ""
                    },
                    "FocusEnteredDescendant": {
                        "body": "{\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "FocusEnteredDescendant",
                        "native": false,
                        "param": [
                            [
                                "Window",
                                "enterWindow"
                            ]
                        ],
                        "return": ""
                    },
                    "FocusEnteredWindow": {
                        "body": "{\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "FocusEnteredWindow",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "FocusLeftDescendant": {
                        "body": "{\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "FocusLeftDescendant",
                        "native": false,
                        "param": [
                            [
                                "Window",
                                "leaveWindow"
                            ]
                        ],
                        "return": ""
                    },
                    "FocusLeftWindow": {
                        "body": "{\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "FocusLeftWindow",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "GetBottomChild": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetBottomChild",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "bool",
                                "bVisibleOnly"
                            ]
                        ],
                        "return": ""
                    },
                    "GetClientObject": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetClientObject",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "GetColorScaled": {
                        "body": "{\n\n\tif (percent > 0.80)\n\t{\n\t\tcol.r = 0;\n\t\tcol.g = 255;\n\t\tcol.b = 0;\n\t}\n\telse if (percent > 0.40)\n\t{\n\t\tmult = (percent-0.40)/(0.80-0.40);\n\t\tcol.r = 255 + (0-255)*mult;\n\t\tcol.g = 255;\n\t\tcol.b = 0;\n\t}\n\telse if (percent > 0.10)\n\t{\n\t\tmult = (percent-0.10)/(0.40-0.10);\n\t\tcol.r = 255;\n\t\tcol.g = 0 + (255-0)*mult;\n\t\tcol.b = 0;\n\t}\n\telse if (percent > 0)\n\t{\n\t\tcol.r = 255;\n\t\tcol.g = 0;\n\t\tcol.b = 0;\n\t}\n\telse\n\t{\n\t\tcol.r = 0;\n\t\tcol.g = 0;\n\t\tcol.b = 0;\n\t}\n\n\treturn col;\n\n}",
                        "locals": [
                            "local float mult;",
                            "local Color col;"
                        ],
                        "modifiers": [],
                        "name": "GetColorScaled",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "percent"
                            ]
                        ],
                        "return": "Color"
                    },
                    "GetCursorPos": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetCursorPos",
                        "native": true,
                        "param": [
                            [
                                "out",
                                "float",
                                "mouseX"
                            ],
                            [
                                "out",
                                "float",
                                "mouseY"
                            ]
                        ],
                        "return": ""
                    },
                    "GetFocusWindow": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetFocusWindow",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "GetGC": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetGC",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "GetHigherSibling": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetHigherSibling",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "bool",
                                "bVisibleOnly"
                            ]
                        ],
                        "return": ""
                    },
                    "GetLowerSibling": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetLowerSibling",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "bool",
                                "bVisibleOnly"
                            ]
                        ],
                        "return": ""
                    },
                    "GetModalWindow": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetModalWindow",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "GetParent": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetParent",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "GetPlayerPawn": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetPlayerPawn",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "GetRootWindow": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetRootWindow",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "GetTabGroupWindow": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetTabGroupWindow",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "GetTickOffset": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetTickOffset",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "GetTopChild": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetTopChild",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "bool",
                                "bVisibleOnly"
                            ]
                        ],
                        "return": ""
                    },
                    "GrabMouse": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "GrabMouse",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "Hide": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "Hide",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "InitWindow": {
                        "body": "{\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "InitWindow",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "IsActorValid": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "IsActorValid",
                        "native": true,
                        "param": [
                            [
                                "actor",
                                "refActor"
                            ]
                        ],
                        "return": ""
                    },
                    "IsFocusWindow": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "IsFocusWindow",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "IsKeyDown": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "IsKeyDown",
                        "native": true,
                        "param": [
                            [
                                "EInputKey",
                                "key"
                            ]
                        ],
                        "return": ""
                    },
                    "IsPointInWindow": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "IsPointInWindow",
                        "native": true,
                        "param": [
                            [
                                "float",
                                "pointX"
                            ],
                            [
                                "float",
                                "pointY"
                            ]
                        ],
                        "return": ""
                    },
                    "IsSensitive": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "IsSensitive",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "bool",
                                "bRecurse"
                            ]
                        ],
                        "return": ""
                    },
                    "IsVisible": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "IsVisible",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "bool",
                                "bRecurse"
                            ]
                        ],
                        "return": ""
                    },
                    "KeyPressed": {
                        "body": "{\n\treturn false;  // don't handle\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "KeyPressed",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "key"
                            ]
                        ],
                        "return": "bool"
                    },
                    "ListRowActivated": {
                        "body": "{\n\treturn false;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "ListRowActivated",
                        "native": false,
                        "param": [
                            [
                                "window",
                                "list"
                            ],
                            [
                                "int",
                                "rowId"
                            ]
                        ],
                        "return": "bool"
                    },
                    "ListSelectionChanged": {
                        "body": "{\n\treturn false;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "ListSelectionChanged",
                        "native": false,
                        "param": [
                            [
                                "window",
                                "list"
                            ],
                            [
                                "int",
                                "numSelections"
                            ],
                            [
                                "int",
                                "focusRowId"
                            ]
                        ],
                        "return": "bool"
                    },
                    "Lower": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "Lower",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "MouseEnteredWindow": {
                        "body": "{\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "MouseEnteredWindow",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "MouseLeftWindow": {
                        "body": "{\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "MouseLeftWindow",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "MouseMoved": {
                        "body": "{\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "MouseMoved",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "newX"
                            ],
                            [
                                "float",
                                "newY"
                            ]
                        ],
                        "return": ""
                    },
                    "MoveFocusDown": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "MoveFocusDown",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "MoveFocusLeft": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "MoveFocusLeft",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "MoveFocusRight": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "MoveFocusRight",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "MoveFocusUp": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "MoveFocusUp",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "MoveTabGroupNext": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "MoveTabGroupNext",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "MoveTabGroupPrev": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "MoveTabGroupPrev",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "PostDrawWindow": {
                        "body": "{\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PostDrawWindow",
                        "native": false,
                        "param": [
                            [
                                "GC",
                                "gc"
                            ]
                        ],
                        "return": ""
                    },
                    "QueryGranularity": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "QueryGranularity",
                        "native": true,
                        "param": [
                            [
                                "out",
                                "float",
                                "hGranularity"
                            ],
                            [
                                "out",
                                "float",
                                "vGranularity"
                            ]
                        ],
                        "return": ""
                    },
                    "QueryPreferredHeight": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "QueryPreferredHeight",
                        "native": true,
                        "param": [
                            [
                                "float",
                                "queryWidth"
                            ]
                        ],
                        "return": ""
                    },
                    "QueryPreferredSize": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "QueryPreferredSize",
                        "native": true,
                        "param": [
                            [
                                "out",
                                "float",
                                "preferredWidth"
                            ],
                            [
                                "out",
                                "float",
                                "preferredHeight"
                            ]
                        ],
                        "return": ""
                    },
                    "QueryPreferredWidth": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "QueryPreferredWidth",
                        "native": true,
                        "param": [
                            [
                                "float",
                                "queryHeight"
                            ]
                        ],
                        "return": ""
                    },
                    "Raise": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "Raise",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "RawKeyPressed": {
                        "body": "{\n\treturn false;  // don't handle\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "RawKeyPressed",
                        "native": false,
                        "param": [
                            [
                                "EInputKey",
                                "key"
                            ],
                            [
                                "EInputState",
                                "iState"
                            ],
                            [
                                "bool",
                                "bRepeat"
                            ]
                        ],
                        "return": "bool"
                    },
                    "ReleaseGC": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "ReleaseGC",
                        "native": true,
                        "param": [
                            [
                                "GC",
                                "gc"
                            ]
                        ],
                        "return": ""
                    },
                    "RemoveActorRef": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "RemoveActorRef",
                        "native": true,
                        "param": [
                            [
                                "actor",
                                "refActor"
                            ]
                        ],
                        "return": ""
                    },
                    "RemoveTimer": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "RemoveTimer",
                        "native": true,
                        "param": [
                            [
                                "int",
                                "timerId"
                            ]
                        ],
                        "return": ""
                    },
                    "ResetHeight": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "ResetHeight",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "ResetSize": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "ResetSize",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "ResetWidth": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "ResetWidth",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "ResizeChild": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "ResizeChild",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "SensitivityChanged": {
                        "body": "{\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "SensitivityChanged",
                        "native": false,
                        "param": [
                            [
                                "bool",
                                "bNewSensitivity"
                            ]
                        ],
                        "return": ""
                    },
                    "SetAcceleratorText": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetAcceleratorText",
                        "native": true,
                        "param": [
                            [
                                "string",
                                "newStr"
                            ]
                        ],
                        "return": ""
                    },
                    "SetBackground": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetBackground",
                        "native": true,
                        "param": [
                            [
                                "texture",
                                "newBackground"
                            ]
                        ],
                        "return": ""
                    },
                    "SetBackgroundSmoothing": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetBackgroundSmoothing",
                        "native": true,
                        "param": [
                            [
                                "bool",
                                "newSmoothing"
                            ]
                        ],
                        "return": ""
                    },
                    "SetBackgroundStretching": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetBackgroundStretching",
                        "native": true,
                        "param": [
                            [
                                "bool",
                                "newStretching"
                            ]
                        ],
                        "return": ""
                    },
                    "SetBackgroundStyle": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetBackgroundStyle",
                        "native": true,
                        "param": [
                            [
                                "EDrawStyle",
                                "newStyle"
                            ]
                        ],
                        "return": ""
                    },
                    "SetBoldFont": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetBoldFont",
                        "native": true,
                        "param": [
                            [
                                "Font",
                                "fn"
                            ]
                        ],
                        "return": ""
                    },
                    "SetChildVisibility": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetChildVisibility",
                        "native": true,
                        "param": [
                            [
                                "bool",
                                "bNewVisibility"
                            ]
                        ],
                        "return": ""
                    },
                    "SetClientObject": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetClientObject",
                        "native": true,
                        "param": [
                            [
                                "object",
                                "newClientObject"
                            ]
                        ],
                        "return": ""
                    },
                    "SetCursorPos": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetCursorPos",
                        "native": true,
                        "param": [
                            [
                                "float",
                                "newMouseX"
                            ],
                            [
                                "float",
                                "newMouseY"
                            ]
                        ],
                        "return": ""
                    },
                    "SetFocusSounds": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetFocusSounds",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "sound",
                                "focusSound"
                            ],
                            [
                                "optional",
                                "sound",
                                "unfocusSound"
                            ]
                        ],
                        "return": ""
                    },
                    "SetFocusWindow": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetFocusWindow",
                        "native": true,
                        "param": [
                            [
                                "window",
                                "newFocusWindow"
                            ]
                        ],
                        "return": ""
                    },
                    "SetFont": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetFont",
                        "native": true,
                        "param": [
                            [
                                "Font",
                                "fn"
                            ]
                        ],
                        "return": ""
                    },
                    "SetFonts": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetFonts",
                        "native": true,
                        "param": [
                            [
                                "Font",
                                "nFont"
                            ],
                            [
                                "Font",
                                "bFont"
                            ]
                        ],
                        "return": ""
                    },
                    "SetHeight": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetHeight",
                        "native": true,
                        "param": [
                            [
                                "float",
                                "newHeight"
                            ]
                        ],
                        "return": ""
                    },
                    "SetNormalFont": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetNormalFont",
                        "native": true,
                        "param": [
                            [
                                "Font",
                                "fn"
                            ]
                        ],
                        "return": ""
                    },
                    "SetPos": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetPos",
                        "native": true,
                        "param": [
                            [
                                "float",
                                "newX"
                            ],
                            [
                                "float",
                                "newY"
                            ]
                        ],
                        "return": ""
                    },
                    "SetSelectability": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetSelectability",
                        "native": true,
                        "param": [
                            [
                                "bool",
                                "newSelectability"
                            ]
                        ],
                        "return": ""
                    },
                    "SetSensitivity": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetSensitivity",
                        "native": true,
                        "param": [
                            [
                                "bool",
                                "newSensitivity"
                            ]
                        ],
                        "return": ""
                    },
                    "SetSize": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetSize",
                        "native": true,
                        "param": [
                            [
                                "float",
                                "newWidth"
                            ],
                            [
                                "float",
                                "newHeight"
                            ]
                        ],
                        "return": ""
                    },
                    "SetSoundVolume": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetSoundVolume",
                        "native": true,
                        "param": [
                            [
                                "float",
                                "newVolume"
                            ]
                        ],
                        "return": ""
                    },
                    "SetTextColor": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetTextColor",
                        "native": true,
                        "param": [
                            [
                                "color",
                                "newColor"
                            ]
                        ],
                        "return": ""
                    },
                    "SetTextColorRGB": {
                        "body": "{\n\tnewColor.r = red;\n\tnewColor.g = green;\n\tnewColor.b = blue;\n\tSetTextColor(newColor);\n}",
                        "locals": [
                            "local color newColor;"
                        ],
                        "modifiers": [],
                        "name": "SetTextColorRGB",
                        "native": false,
                        "param": [
                            [
                                "INT",
                                "red"
                            ],
                            [
                                "INT",
                                "green"
                            ],
                            [
                                "INT",
                                "blue"
                            ]
                        ],
                        "return": ""
                    },
                    "SetTileColor": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetTileColor",
                        "native": true,
                        "param": [
                            [
                                "color",
                                "newColor"
                            ]
                        ],
                        "return": ""
                    },
                    "SetTileColorRGB": {
                        "body": "{\n\tnewColor.r = red;\n\tnewColor.g = green;\n\tnewColor.b = blue;\n\tSetTileColor(newColor);\n}",
                        "locals": [
                            "local color newColor;"
                        ],
                        "modifiers": [],
                        "name": "SetTileColorRGB",
                        "native": false,
                        "param": [
                            [
                                "INT",
                                "red"
                            ],
                            [
                                "INT",
                                "green"
                            ],
                            [
                                "INT",
                                "blue"
                            ]
                        ],
                        "return": ""
                    },
                    "SetVisibilitySounds": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetVisibilitySounds",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "sound",
                                "visSound"
                            ],
                            [
                                "optional",
                                "sound",
                                "invisSound"
                            ]
                        ],
                        "return": ""
                    },
                    "SetWidth": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetWidth",
                        "native": true,
                        "param": [
                            [
                                "float",
                                "newWidth"
                            ]
                        ],
                        "return": ""
                    },
                    "Show": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "Show",
                        "native": true,
                        "param": [
                            [
                                "optional",
                                "bool",
                                "bShow"
                            ]
                        ],
                        "return": ""
                    },
                    "TextChanged": {
                        "body": "{\n\treturn false;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "TextChanged",
                        "native": false,
                        "param": [
                            [
                                "window",
                                "edit"
                            ],
                            [
                                "bool",
                                "bModified"
                            ]
                        ],
                        "return": "bool"
                    },
                    "ToggleChanged": {
                        "body": "{\n\treturn false;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "ToggleChanged",
                        "native": false,
                        "param": [
                            [
                                "Window",
                                "button"
                            ],
                            [
                                "bool",
                                "bNewToggle"
                            ]
                        ],
                        "return": "bool"
                    },
                    "UngrabMouse": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "UngrabMouse",
                        "native": true,
                        "param": [],
                        "return": ""
                    },
                    "VirtualKeyPressed": {
                        "body": "{\n\treturn false;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "VirtualKeyPressed",
                        "native": false,
                        "param": [
                            [
                                "EInputKey",
                                "key"
                            ],
                            [
                                "bool",
                                "bRepeat"
                            ]
                        ],
                        "return": "bool"
                    },
                    "VisibilityChanged": {
                        "body": "{\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "VisibilityChanged",
                        "native": false,
                        "param": [
                            [
                                "bool",
                                "bNewVisibility"
                            ]
                        ],
                        "return": ""
                    },
                    "WindowReady": {
                        "body": "{\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "WindowReady",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 800,
                "replication": "",
                "states": [],
                "variables": [
                    "var private byte     windowType;          // Contains window type",
                    "var private window   parentOwner;         // Window that \"owns\" this window",
                    "var const bool       bIsVisible;          // TRUE if the window is visible",
                    "var const bool       bIsSensitive;        // TRUE if the window can take input",
                    "var const bool       bIsSelectable;       // TRUE if the window can have keyboard focus",
                    "var const bool       bIsInitialized;      // TRUE if the window has been initialized",
                    "var const bool       bBeingDestroyed;     // TRUE if this window is going bye-bye",
                    "var const int        lockCount;           // Reference count of locks on this window",
                    "var const bool       bDrawRawBackground;  // TRUE if raw backgrounds should be drawn here",
                    "var const bool       bStretchBackground;  // TRUE=stretch background, FALSE=repeat tile",
                    "var const bool       bSmoothBackground;   // TRUE if the background should be smoothed",
                    "var const EDrawStyle backgroundStyle;     // Normal, masked or translucent",
                    "var const color      textColor;           // Color of text",
                    "var const plane      textPlane;           // Plane of text; converted from textColor",
                    "var const font       normalFont;          // Regular font",
                    "var const font       boldFont;            // Boldface font",
                    "var const float      textVSpacing;        // Space between lines of text",
                    "var const color      tileColor;           // Color of tile",
                    "var const plane      tilePlane;           // Plane of tile; converted from tileColor",
                    "var const bool       bSpecialText;        // TRUE if special text is enabled",
                    "var const bool       bTextTranslucent;    // TRUE if translucent text is enabled",
                    "var const float      x;                   // X position of window relative to parent",
                    "var const float      y;                   // Y position of window relative to parent",
                    "var const float      width;               // Width of window",
                    "var const float      height;              // Height of window",
                    "var const EHAlign    winHAlign;           // User-specified horizontal alignment",
                    "var const EVAlign    winVAlign;           // User-specified vertical alignment",
                    "var const float      hMargin0;            // User-specified first horizontal margin",
                    "var const float      hMargin1;            // User-specified second horizontal margin (FULL only)",
                    "var const float      vMargin0;            // User-specified first vertical margin",
                    "var const float      vMargin1;            // User-specified second vertical margin (FULL only)",
                    "var const float      hardcodedWidth;      // User-specified preferred width",
                    "var const float      hardcodedHeight;     // User-specified preferred height",
                    "var float            holdX;",
                    "var float            holdY;",
                    "var float            holdWidth;",
                    "var float            holdHeight;",
                    "var int              acceleratorKey;         // Hotkey, cast to an INT (hack)",
                    "var bool             bNeedsReconfigure;      // TRUE if this window must be reconfigured",
                    "var bool             bNeedsQuery;            // TRUE if this window must be requeried",
                    "var bool             bConfigured;            // TRUE if this window was reconfigured",
                    "var private bool     bLastWidthSpecified;    // Whether width was specified in last size query",
                    "var private bool     bLastHeightSpecified;   // Whether height was specified in last size query",
                    "var private float    lastSpecifiedWidth;     // Width specified in last size query",
                    "var private float    lastSpecifiedHeight;    // Height specified in last size query",
                    "var private float    lastQueryWidth;         // Width returned by last size query",
                    "var private float    lastQueryHeight;        // Height returned by last size query",
                    "var bool             bTickEnabled;        // TRUE if the UnrealScript Tick() is enabled",
                    "var int              maxClicks;           // Number of clicks handled by window; 0=any number",
                    "var const ClipRect   winClipRect;         // Clipping rectangle; maintained at all times",
                    "var const texture    background;          // Background textures",
                    "var const texture    defaultCursor;       // Default cursor; can be overridden in CursorRequested",
                    "var const texture    defaultCursorShadow; // Default cursor shadow; can be overridden in CursorRequested",
                    "var const float      defaultHotX;         // Default hot X; can be overridden in CursorRequested",
                    "var const float      defaultHotY;         // Default hot Y; can be overridden in CursorRequested",
                    "var const color      defaultCursorColor;  // Default cursor color; can be overridden in CursorRequested",
                    "var const sound      focusSound;          // Played when this window obtains focus",
                    "var const sound      unfocusSound;        // Played when this window loses focus",
                    "var const sound      visibleSound;        // Played when this window becomes visible",
                    "var const sound      invisibleSound;      // Played when this window becomes invisible",
                    "var const float      soundVolume;         // Volume of sound",
                    "var const object     clientObject;        // Pointer to an object associated with this window",
                    "var private int      rowMajorIndex;       // Index into tab group's row-major sorted list",
                    "var private int      colMajorIndex;       // Index into tab group's column-major sorted list",
                    "var native private int      att;                 // Pointer to first attribute; used by parent",
                    "var native private int      firstTimer;          // Pointer to this window's first timer",
                    "var native private int      freeTimer;           // Free list of timers",
                    "var private gc       wGc;",
                    "var private gc       gGc;",
                    "var const window     winParent;           // Parent window; NULL if this is root",
                    "var const window     firstChild;          // \"Lowest\" child (first one drawn)",
                    "var const window     lastChild;           // \"Highest\" child (last one drawn)",
                    "var const window     prevSibling;         // Next \"lowest\" sibling (previous one drawn)",
                    "var const window     nextSibling;         // Next \"highest\" sibling (next one drawn)"
                ]
            }
        }
    },
    "models": {},
    "sounds": {},
    "textures": {}
}