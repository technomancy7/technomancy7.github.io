{
    "classes": {
        "ADelay.uc": {
            "body": "class ADelay extends RCONActors;\nvar string msg;\nvar AthenaSpectator spect;\nfunction Timer()\n{\n\tspect.ASay(msg);\n\tDestroy();\n}\n\ndefaultproperties\n{\n}\n",
            "name": "ADelay.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "RCONActors",
                "functions": {
                    "Timer": {
                        "body": "{\n\tspect.ASay(msg);\n\tDestroy();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 13,
                "replication": "",
                "states": [],
                "variables": [
                    "var string msg;",
                    "var AthenaSpectator spect;"
                ]
            }
        },
        "ARClient.uc": {
            "body": "class ARClient extends UBrowserHTTPClient;\n\n//Create TCCore package\n//Updater client class that checks for updates\n//CodeBase class for storing common used functions\n//GenericSiteQuery that takes any URL and returns the page code\nvar IpAddr\t\tServerIpAddr;\nvar string\t\tServerAddress;\nvar string\t\tServerURI;\nvar int\t\t\tServerPort;\nvar int\t\t\tCurrentState;\nvar int\t\t\tErrorCode;\nvar bool\t\tbClosed;\n\nvar globalconfig string\tProxyServerAddress;\nvar globalconfig int\tProxyServerPort;\n\nvar AthenaMutator AM;\n\nfunction Browse(string InAddress, string InURI, optional int InPort, optional int InTimeout)\n{\n\tCurrentState = Connecting;\n\n\tServerAddress = InAddress;\n\tServerURI = InURI;\n\tif(InPort == 0)\n\t\tServerPort = 80;\n\telse\n\t\tServerPort = InPort;\n\t\n\tif(InTimeout > 0 )\n\t\tSetTimer(InTimeout, False);\n\n\tResetBuffer();\n\n\tif(ProxyServerAddress != \"\")\n\t{\n\t\tServerIpAddr.Port = ProxyServerPort;\n\t\tif(ServerIpAddr.Addr == 0)\n\t\t\tResolve( ProxyServerAddress );\n\t\telse\n\t\t\tDoBind();\n\t}\n\telse\n\t{\n\t\tServerIpAddr.Port = ServerPort;\n\t\tif(ServerIpAddr.Addr == 0)\n\t\t\tResolve( ServerAddress );\n\t\telse\n\t\t\tDoBind();\n\t}\n}\n\nfunction Resolved( IpAddr Addr )\n{\n\t// Set the address\n\tServerIpAddr.Addr = Addr.Addr;\n\n\tif( ServerIpAddr.Addr == 0 )\n\t{\n\t\tLog( \"UBrowserHTTPClient: Invalid server address\" );\n\t\tSetError(-1);\n\t\treturn;\n\t}\n\t\n\tDoBind();\n}\n\nfunction DoBind()\n{\n\tif( BindPort() == 0 )\n\t{\n\t\tLog( \"UBrowserHTTPLink: Error binding local port.\" );\n\t\tSetError(-2);\n\t\treturn;\n\t}\n\n\tOpen( ServerIpAddr );\n\tbClosed = False;\n}\n\nevent Timer()\n{\n\tSetError(-3);\t\n}\n\nevent Opened()\n{\n\tEnable('Tick');\n\tLog(\"Connection opened...\", 'AIClient');\n\tif(ProxyServerAddress != \"\")\n\t\tSendBufferedData(\"GET http://\"$ServerAddress$\":\"$string(ServerPort)$ServerURI$\" HTTP/1.1\"$CR$LF);\n\telse\n\t\tSendBufferedData(\"GET \"$ServerURI$\" HTTP/1.1\"$CR$LF);\n\tSendBufferedData(\"User-Agent: Unreal\"$CR$LF);\n\tSendBufferedData(\"Connection: close\"$CR$LF);\n\tSendBufferedData(\"Host: \"$ServerAddress$\":\"$ServerPort$CR$LF$CR$LF);\n\n\tCurrentState = WaitingForHeader;\n}\n\nfunction SetError(int Code)\n{\n\tDisable('Tick');\n\tSetTimer(0, False);\n\tResetBuffer();\n\n\tCurrentState = HadError;\n\tErrorCode = Code;\n\n\tif(!IsConnected() || !Close())\n\t\tHTTPError(ErrorCode);\n}\n\nevent Closed()\n{\n\tbClosed = True;\n}\n\nfunction HTTPReceivedData(string Data)\n{\n\tlocal int iconvidstart, iconvidend, imessagestart, imessageend;\n\tlocal string messagestr, convid;\n\tlocal AthenaSpectator AS;\n\tlocal AthenaMutator AMR;\n\t//<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><response conversation=\"8503425221487211688\" emote=\"NONE\" avatar=\"media/a14097360.mp4\" avatarType=\"video/mp4\" avatarTalk=\"media/a14097365.mp4\" avatarTalkType=\"video/mp4\" avatarBackground=\"media/a14097357.png\"><message>As Edison said, \"What good is a newborn babe?\"</message></response\n\tLog(Data);\n\t//Log(\"Split test, message: \"$Split(Data, \"<message>\", \"</message>\"));\n\tLog(\"xml data: \"$_CodeBase().Split(Data, \"<?\", \"?>\"));\n\t//iconvidstart = InStr(Data, \"<response conversation=\");\n\t//iconvidstart += 24;\n\t//iconvidend = InStr(Data, \" emote=\");\n\t//iconvidend -= 1;\n\t//convid = Mid(Data, iconvidstart, iconvidend-iconvidstart);\n\tconvid = _CodeBase().Split(Data, \"<response conversation=\", \" emote=\", 1,-1);\n\t//Log(\"Split test, convid: \"$Split(Data, \"<response conversation=\", \" emote\", 1,-1));\n\t//Log(\"ConvID \"$convid, 'AIClient');\n\t\n\t//imessagestart = InStr(Data, \"<message>\");\n\t//imessagestart += 9;\n\t//imessageend = InStr(Data, \"</message>\");\t\n\t//messagestr = Mid(Data, imessagestart, imessageend-imessagestart);\n\tmessagestr = _CodeBase().Split(Data, \"<message>\", \"</message>\");\n\tLog(\"Message: \"$messagestr, 'AIClient');\n\t\n\tforeach AllActors(class'AthenaMutator', AMR)\n\t{\n\t\tif(AMR.aConvID == \"\")\n\t\t{\n\t\t\tAMR.aConvID = convid;\n\t\t\tLog(\"New conversation instance created. Recording convid: \"$convid);\n\t\t}\n\t}\n\t\n\tforeach AllActors(class'AthenaSpectator', AS)\n\t{\n\t\tAS.ASay(messagestr);\n\t}\n\tDestroy();\n}\n\nfunction CodeBase _CodeBase()\n{\n\treturn Spawn(class'CodeBase');\n}\n\nfunction HTTPError(int Code)\n{\n\t//-3 is closed normally\n\t//-2 is error binding port\n\t//400 - Error connecting\n\tif(Code == -3)\n\t\tLog(Code$\" - Connection closed by host.\", 'AIClientError');\n\telse if(Code == -2)\n\t\tLog(Code$\" - Port binding error, connection already open?\", 'AIClientError');\n\telse if(Code == 400)\n\t\tLog(Code$\" - Connection denied by host.\", 'AIClientError');\n\telse\n\t\tLog(Code$\" - Undefined error...\", 'AIClientError');\n\tDestroy();\n}\n\nevent Tick(float DeltaTime)\n{\n\tlocal string Line;\n\tlocal bool bGotData;\n\tlocal int NextState;\n\tlocal int i;\n\tlocal int Result;\n\n\tSuper.Tick(DeltaTime);\n\tDoBufferQueueIO();\n\n\tdo\n\t{\n\t\tNextState = CurrentState;\n\t\tswitch(CurrentState)\n\t\t{\n\t\tcase WaitingForHeader:\n\t\t\tbGotData = ReadBufferedLine(Line);\n\t\t\tif(bGotData)\n\t\t\t{\n\t\t\t\ti = InStr(Line, \" \");\n\t\t\t\tResult = Int(Mid(Line, i+1));\n\t\t\t\tif(Result != 200)\n\t\t\t\t{\n\t\t\t\t\tSetError(Result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\tNextState = ReceivingHeader;\n\t\t\t}\t\n\t\t\tbreak;\n\t\tcase ReceivingHeader:\n\t\t\tbGotData = ReadBufferedLine(Line);\n\t\t\tif(bGotData)\n\t\t\t{\n\t\t\t\tif(Line == \"\")\n\t\t\t\t\tNextState = ReceivingData;\n\t\t\t}\t\n\t\t\tbreak;\n\t\tcase ReceivingData:\n\t\t\tbGotData = False;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbGotData = False;\n\t\t\tbreak;\n\t\t}\n\t\tCurrentState = NextState;\n\t} until(!bGotData);\n\n\tif(bClosed)\n\t{\n\t\tLog(\"Client closing.\");\n\t\tDisable('Tick');\n\t\tif(CurrentState == ReceivingData)\n\t\t\tHTTPReceivedData(InputBuffer);\n\n\t\tif(CurrentState == HadError)\n\t\t\tHTTPError(ErrorCode);\n\t}\n}\n\ndefaultproperties\n{\n}\n",
            "name": "ARClient.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "UBrowserHTTPClient",
                "functions": {
                    "Browse": {
                        "body": "{\n\tCurrentState = Connecting;\n\n\tServerAddress = InAddress;\n\tServerURI = InURI;\n\tif(InPort == 0)\n\t\tServerPort = 80;\n\telse\n\t\tServerPort = InPort;\n\t\n\tif(InTimeout > 0 )\n\t\tSetTimer(InTimeout, False);\n\n\tResetBuffer();\n\n\tif(ProxyServerAddress != \"\")\n\t{\n\t\tServerIpAddr.Port = ProxyServerPort;\n\t\tif(ServerIpAddr.Addr == 0)\n\t\t\tResolve( ProxyServerAddress );\n\t\telse\n\t\t\tDoBind();\n\t}\n\telse\n\t{\n\t\tServerIpAddr.Port = ServerPort;\n\t\tif(ServerIpAddr.Addr == 0)\n\t\t\tResolve( ServerAddress );\n\t\telse\n\t\t\tDoBind();\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Browse",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "InAddress"
                            ],
                            [
                                "string",
                                "InURI"
                            ],
                            [
                                "optional",
                                "int",
                                "InPort"
                            ],
                            [
                                "optional",
                                "int",
                                "InTimeout"
                            ]
                        ],
                        "return": ""
                    },
                    "Closed": {
                        "body": "{\n\tbClosed = True;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Closed",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "DoBind": {
                        "body": "{\n\tif( BindPort() == 0 )\n\t{\n\t\tLog( \"UBrowserHTTPLink: Error binding local port.\" );\n\t\tSetError(-2);\n\t\treturn;\n\t}\n\n\tOpen( ServerIpAddr );\n\tbClosed = False;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "DoBind",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "HTTPError": {
                        "body": "{\n\t//-3 is closed normally\n\t//-2 is error binding port\n\t//400 - Error connecting\n\tif(Code == -3)\n\t\tLog(Code$\" - Connection closed by host.\", 'AIClientError');\n\telse if(Code == -2)\n\t\tLog(Code$\" - Port binding error, connection already open?\", 'AIClientError');\n\telse if(Code == 400)\n\t\tLog(Code$\" - Connection denied by host.\", 'AIClientError');\n\telse\n\t\tLog(Code$\" - Undefined error...\", 'AIClientError');\n\tDestroy();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "HTTPError",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "Code"
                            ]
                        ],
                        "return": ""
                    },
                    "HTTPReceivedData": {
                        "body": "{\n\t//<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><response conversation=\"8503425221487211688\" emote=\"NONE\" avatar=\"media/a14097360.mp4\" avatarType=\"video/mp4\" avatarTalk=\"media/a14097365.mp4\" avatarTalkType=\"video/mp4\" avatarBackground=\"media/a14097357.png\"><message>As Edison said, \"What good is a newborn babe?\"</message></response\n\tLog(Data);\n\t//Log(\"Split test, message: \"$Split(Data, \"<message>\", \"</message>\"));\n\tLog(\"xml data: \"$_CodeBase().Split(Data, \"<?\", \"?>\"));\n\t//iconvidstart = InStr(Data, \"<response conversation=\");\n\t//iconvidstart += 24;\n\t//iconvidend = InStr(Data, \" emote=\");\n\t//iconvidend -= 1;\n\t//convid = Mid(Data, iconvidstart, iconvidend-iconvidstart);\n\tconvid = _CodeBase().Split(Data, \"<response conversation=\", \" emote=\", 1,-1);\n\t//Log(\"Split test, convid: \"$Split(Data, \"<response conversation=\", \" emote\", 1,-1));\n\t//Log(\"ConvID \"$convid, 'AIClient');\n\t\n\t//imessagestart = InStr(Data, \"<message>\");\n\t//imessagestart += 9;\n\t//imessageend = InStr(Data, \"</message>\");\t\n\t//messagestr = Mid(Data, imessagestart, imessageend-imessagestart);\n\tmessagestr = _CodeBase().Split(Data, \"<message>\", \"</message>\");\n\tLog(\"Message: \"$messagestr, 'AIClient');\n\t\n\tforeach AllActors(class'AthenaMutator', AMR)\n\t{\n\t\tif(AMR.aConvID == \"\")\n\t\t{\n\t\t\tAMR.aConvID = convid;\n\t\t\tLog(\"New conversation instance created. Recording convid: \"$convid);\n\t\t}\n\t}\n\t\n\tforeach AllActors(class'AthenaSpectator', AS)\n\t{\n\t\tAS.ASay(messagestr);\n\t}\n\tDestroy();\n}",
                        "locals": [
                            "local int iconvidstart, iconvidend, imessagestart, imessageend;",
                            "local string messagestr, convid;",
                            "local AthenaSpectator AS;",
                            "local AthenaMutator AMR;"
                        ],
                        "modifiers": [],
                        "name": "HTTPReceivedData",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "Data"
                            ]
                        ],
                        "return": ""
                    },
                    "Opened": {
                        "body": "{\n\tEnable('Tick');\n\tLog(\"Connection opened...\", 'AIClient');\n\tif(ProxyServerAddress != \"\")\n\t\tSendBufferedData(\"GET http://\"$ServerAddress$\":\"$string(ServerPort)$ServerURI$\" HTTP/1.1\"$CR$LF);\n\telse\n\t\tSendBufferedData(\"GET \"$ServerURI$\" HTTP/1.1\"$CR$LF);\n\tSendBufferedData(\"User-Agent: Unreal\"$CR$LF);\n\tSendBufferedData(\"Connection: close\"$CR$LF);\n\tSendBufferedData(\"Host: \"$ServerAddress$\":\"$ServerPort$CR$LF$CR$LF);\n\n\tCurrentState = WaitingForHeader;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Opened",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Resolved": {
                        "body": "{\n\t// Set the address\n\tServerIpAddr.Addr = Addr.Addr;\n\n\tif( ServerIpAddr.Addr == 0 )\n\t{\n\t\tLog( \"UBrowserHTTPClient: Invalid server address\" );\n\t\tSetError(-1);\n\t\treturn;\n\t}\n\t\n\tDoBind();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Resolved",
                        "native": false,
                        "param": [
                            [
                                "IpAddr",
                                "Addr"
                            ]
                        ],
                        "return": ""
                    },
                    "SetError": {
                        "body": "{\n\tDisable('Tick');\n\tSetTimer(0, False);\n\tResetBuffer();\n\n\tCurrentState = HadError;\n\tErrorCode = Code;\n\n\tif(!IsConnected() || !Close())\n\t\tHTTPError(ErrorCode);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetError",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "Code"
                            ]
                        ],
                        "return": ""
                    },
                    "Tick": {
                        "body": "{\n\n\tSuper.Tick(DeltaTime);\n\tDoBufferQueueIO();\n\n\tdo\n\t{\n\t\tNextState = CurrentState;\n\t\tswitch(CurrentState)\n\t\t{\n\t\tcase WaitingForHeader:\n\t\t\tbGotData = ReadBufferedLine(Line);\n\t\t\tif(bGotData)\n\t\t\t{\n\t\t\t\ti = InStr(Line, \" \");\n\t\t\t\tResult = Int(Mid(Line, i+1));\n\t\t\t\tif(Result != 200)\n\t\t\t\t{\n\t\t\t\t\tSetError(Result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\tNextState = ReceivingHeader;\n\t\t\t}\t\n\t\t\tbreak;\n\t\tcase ReceivingHeader:\n\t\t\tbGotData = ReadBufferedLine(Line);\n\t\t\tif(bGotData)\n\t\t\t{\n\t\t\t\tif(Line == \"\")\n\t\t\t\t\tNextState = ReceivingData;\n\t\t\t}\t\n\t\t\tbreak;\n\t\tcase ReceivingData:\n\t\t\tbGotData = False;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbGotData = False;\n\t\t\tbreak;\n\t\t}\n\t\tCurrentState = NextState;\n\t} until(!bGotData);\n\n\tif(bClosed)\n\t{\n\t\tLog(\"Client closing.\");\n\t\tDisable('Tick');\n\t\tif(CurrentState == ReceivingData)\n\t\t\tHTTPReceivedData(InputBuffer);\n\n\t\tif(CurrentState == HadError)\n\t\t\tHTTPError(ErrorCode);\n\t}\n}",
                        "locals": [
                            "local string Line;",
                            "local bool bGotData;",
                            "local int NextState;",
                            "local int i;",
                            "local int Result;"
                        ],
                        "modifiers": [],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "DeltaTime"
                            ]
                        ],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\tSetError(-3);\t\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "_CodeBase": {
                        "body": "{\n\treturn Spawn(class'CodeBase');\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "_CodeBase",
                        "native": false,
                        "param": [],
                        "return": "CodeBase"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 247,
                "replication": "",
                "states": [],
                "variables": [
                    "var IpAddr\t\tServerIpAddr;",
                    "var string\t\tServerAddress;",
                    "var string\t\tServerURI;",
                    "var int\t\t\tServerPort;",
                    "var int\t\t\tCurrentState;",
                    "var int\t\t\tErrorCode;",
                    "var bool\t\tbClosed;",
                    "var globalconfig string\tProxyServerAddress;",
                    "var globalconfig int\tProxyServerPort;",
                    "var AthenaMutator AM;"
                ]
            }
        },
        "AbuseWatchActor.uc": {
            "body": "class AbuseWatchActor extends RCONActors;\nvar AthenaSpectator Spect;\nvar int aLifespan;\nvar DeusExPlayer Watcher;\nvar int LastKills, LastDeaths, LastStreak;\nvar int CurKills, CurDeaths, CurStreak;\nvar bool bTemporary;\nvar int kDif, dDif, sDif;\nvar int secondsran;\nvar int minutesran;\nvar bool bRan1, bRan2, bRan3, bRan4;\n\nfunction Timer()\n{\n\nlocal DeusExWeapon DEW;\n\n\tif(bTemporary)\n\t\taLifespan--;\n\t\t\n\tsecondsran++;\n\t\n\tCurKills = Watcher.PlayerReplicationInfo.Score;\n\tCurDeaths = Watcher.PlayerReplicationInfo.Deaths;\n\tCurStreak = Watcher.PlayerReplicationInfo.Streak;\n\t\n\twhile(LastKills < CurKills)\n\t{\n\t\tLastKills++;\n\t\tkDif++;\n\t}\n\twhile(LastDeaths < curDeaths)\n\t{\n\t\tLastDeaths++;\n\t\tdDif++;\n\t}\n\twhile(LastStreak < CurStreak)\n\t{\n\t\tLastStreak++;\n\t\tsDif++;\n\t}\t\n\t\n\tif(Spect.AM.bDebug)\n\t\tBroadcastMessage(\"OUT \"$Watcher.PlayerReplicationInfo.playerName$\": LastKills\"$LastKills$\" > kDif\"$kDif);\n\t\t\n\t\tif(kDif >= 5 && kDif <= 10 && !bRan1)\n\t\t{\n\t\t\tbRan1=True;\n\t\t\tSpect.ASay(watcher.Playerreplicationinfo.Playername@\" has been disarmed for killing too much.\");\n\t\t\tforeach AllActors(class'DeusExweapon',DEW)\n\t\t\t{\n\t\t\t\tif(Dew.Owner == Watcher)\n\t\t\t\t{\n\t\t\t\t\tDew.Destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(kDif >= 11 && kDif <= 15 && !bRan2)\n\t\t{\n\t\t\tbRan2=True;\n\t\t\tSpect.ASay(watcher.Playerreplicationinfo.Playername@\"has been killed for killing too much.\");\n\t\t\twatcher.reduceddamagetype = '';\n\t\t\twatcher.TakeDamage(99999,Spect,vect(0,0,0),vect(0,0,1),'Exploded');\n\t\t}\t\n\t\t\t\n\t\tif(kDif >= 16 && !bRan3)\n\t\t{\n\t\t\tbRan3=True;\n\t\t\tSpect.ASay(watcher.Playerreplicationinfo.Playername@\"has been kicked for killing too much.\");\n\t\t\twatcher.Destroy();\n\t\t}\t\t\n\n\t\tif(dDif >= 5 && !bRan4)\n\t\t{\n\t\t\tbRan4=True;\n\t\t\tSpect.ASay(watcher.Playerreplicationinfo.Playername@\"has been protected by the abuse watch system.\");\n\t\t\twatcher.ReducedDamageType = 'all';\n\t\t}\n\t\t\n\tif(Secondsran == 60)\n\t{\n\t\tif(Spect.AM.bDebug)\n\t\t\tBroadcastMessage(\"AW RESET\");\n\t\tbRan1=False;\n\t\tbRan2=False;\n\t\tbRan3=False;\n\t\tbRan4=False;\n\t\tkdif=0;\n\t\tsdif=0;\n\t\tddif=0;\n\t\tsecondsran = 0;\n\t\tminutesran++;\n\t}\n\tif(aLifespan <= 0 && bTemporary)\n\t{\n\t\tSpect.AM.bProtocolA=False;\n\t\tWatcher.ReducedDamagetype = '';\n\t\tDestroy();\n\t}\n\tif(Watcher == None)\n\t\tDestroy();\n}\n\ndefaultproperties\n{\n     bHidden=True\n}\n",
            "name": "AbuseWatchActor.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bHidden=True"
                ],
                "exec": [],
                "extends": "RCONActors",
                "functions": {
                    "Timer": {
                        "body": "{\n\n\n\tif(bTemporary)\n\t\taLifespan--;\n\t\t\n\tsecondsran++;\n\t\n\tCurKills = Watcher.PlayerReplicationInfo.Score;\n\tCurDeaths = Watcher.PlayerReplicationInfo.Deaths;\n\tCurStreak = Watcher.PlayerReplicationInfo.Streak;\n\t\n\twhile(LastKills < CurKills)\n\t{\n\t\tLastKills++;\n\t\tkDif++;\n\t}\n\twhile(LastDeaths < curDeaths)\n\t{\n\t\tLastDeaths++;\n\t\tdDif++;\n\t}\n\twhile(LastStreak < CurStreak)\n\t{\n\t\tLastStreak++;\n\t\tsDif++;\n\t}\t\n\t\n\tif(Spect.AM.bDebug)\n\t\tBroadcastMessage(\"OUT \"$Watcher.PlayerReplicationInfo.playerName$\": LastKills\"$LastKills$\" > kDif\"$kDif);\n\t\t\n\t\tif(kDif >= 5 && kDif <= 10 && !bRan1)\n\t\t{\n\t\t\tbRan1=True;\n\t\t\tSpect.ASay(watcher.Playerreplicationinfo.Playername@\" has been disarmed for killing too much.\");\n\t\t\tforeach AllActors(class'DeusExweapon',DEW)\n\t\t\t{\n\t\t\t\tif(Dew.Owner == Watcher)\n\t\t\t\t{\n\t\t\t\t\tDew.Destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(kDif >= 11 && kDif <= 15 && !bRan2)\n\t\t{\n\t\t\tbRan2=True;\n\t\t\tSpect.ASay(watcher.Playerreplicationinfo.Playername@\"has been killed for killing too much.\");\n\t\t\twatcher.reduceddamagetype = '';\n\t\t\twatcher.TakeDamage(99999,Spect,vect(0,0,0),vect(0,0,1),'Exploded');\n\t\t}\t\n\t\t\t\n\t\tif(kDif >= 16 && !bRan3)\n\t\t{\n\t\t\tbRan3=True;\n\t\t\tSpect.ASay(watcher.Playerreplicationinfo.Playername@\"has been kicked for killing too much.\");\n\t\t\twatcher.Destroy();\n\t\t}\t\t\n\n\t\tif(dDif >= 5 && !bRan4)\n\t\t{\n\t\t\tbRan4=True;\n\t\t\tSpect.ASay(watcher.Playerreplicationinfo.Playername@\"has been protected by the abuse watch system.\");\n\t\t\twatcher.ReducedDamageType = 'all';\n\t\t}\n\t\t\n\tif(Secondsran == 60)\n\t{\n\t\tif(Spect.AM.bDebug)\n\t\t\tBroadcastMessage(\"AW RESET\");\n\t\tbRan1=False;\n\t\tbRan2=False;\n\t\tbRan3=False;\n\t\tbRan4=False;\n\t\tkdif=0;\n\t\tsdif=0;\n\t\tddif=0;\n\t\tsecondsran = 0;\n\t\tminutesran++;\n\t}\n\tif(aLifespan <= 0 && bTemporary)\n\t{\n\t\tSpect.AM.bProtocolA=False;\n\t\tWatcher.ReducedDamagetype = '';\n\t\tDestroy();\n\t}\n\tif(Watcher == None)\n\t\tDestroy();\n}",
                        "locals": [
                            "local DeusExWeapon DEW;"
                        ],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 109,
                "replication": "",
                "states": [],
                "variables": [
                    "var AthenaSpectator Spect;",
                    "var int aLifespan;",
                    "var DeusExPlayer Watcher;",
                    "var int LastKills, LastDeaths, LastStreak;",
                    "var int CurKills, CurDeaths, CurStreak;",
                    "var bool bTemporary;",
                    "var int kDif, dDif, sDif;",
                    "var int secondsran;",
                    "var int minutesran;",
                    "var bool bRan1, bRan2, bRan3, bRan4;"
                ]
            }
        },
        "Anticheat.uc": {
            "body": "class Anticheat extends Mutator config(RCON);\n\nvar PlayerReplicationInfo PRI;\nvar DeusExPlayer p;\nvar config bool AC17GrenadeJump;\nvar config float ACCheckTime;\n\nfunction ModifyPlayer(Pawn P)\n{\n  local TCAC TCAC;\n  local DeusExPlayer _Player;\n  _Player = DeusExPlayer(P);\n  if(_Player != None)\n  {\n    if(!_FindActor(_Player))\n    {\n      TCAC = Spawn(Class'TCAC');\n      if(TCAC != None)\n      {\n\t    TCAC._Player = _Player;\n\t\tTCAC.SetOwner(_Player);\n        TCAC.SetTimer(ACCheckTime,True);\n\t\tLog(\"Attached anticheat to player.\");\n      }\n    }\n  }\n\n\tif( _Player.MaxFrobDistance != _Player.Default.MaxFrobDistance)\n\t{\n\t\t    _Player.MaxFrobDistance = _Player.Default.MaxFrobDistance;\n\t}\n  Super.ModifyPlayer(P);\n}\n\nfunction bool _FindActor(DeusExPlayer _Player)\n{\n  local TCAC TCAC;\n  ForEach AllActors(class'TCAC', TCAC)\n  {\n    if(TCAC != None)\n    {\n      if(TCAC._Player == _Player)\n      {\n        return True;\n      }\n    }\n  }\n  return False;\n}\n\nfunction Tick(float Deltatime)\n{\nlocal ThrownProjectile Proj;\nlocal DeusExPlayer P;\n\t\n\tif(AC17GrenadeJump)\n\t{\n\t\tforeach AllActors(class'ThrownProjectile',proj)\n\t\t{\n\t\t\t//if(proj.IsInState('flying'))\n\t\t\tif(proj.bArmed)\n\t\t\t\tProj.bBlockPlayers=False;\n\t\t\telse\n\t\t\t\tProj.bBlockPlayers=True;\n\t\t}\n\t}\n}\n\ndefaultproperties\n{\n     AC17GrenadeJump=True\n     ACCheckTime=2.000000\n}\n",
            "name": "Anticheat.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "AC17GrenadeJump=True",
                    "ACCheckTime=2.000000"
                ],
                "exec": [],
                "extends": "Mutator",
                "functions": {
                    "ModifyPlayer": {
                        "body": "{\n  _Player = DeusExPlayer(P);\n  if(_Player != None)\n  {\n    if(!_FindActor(_Player))\n    {\n      TCAC = Spawn(Class'TCAC');\n      if(TCAC != None)\n      {\n\t    TCAC._Player = _Player;\n\t\tTCAC.SetOwner(_Player);\n        TCAC.SetTimer(ACCheckTime,True);\n\t\tLog(\"Attached anticheat to player.\");\n      }\n    }\n  }\n\n\tif( _Player.MaxFrobDistance != _Player.Default.MaxFrobDistance)\n\t{\n\t\t    _Player.MaxFrobDistance = _Player.Default.MaxFrobDistance;\n\t}\n  Super.ModifyPlayer(P);\n}",
                        "locals": [
                            "local TCAC TCAC;",
                            "local DeusExPlayer _Player;"
                        ],
                        "modifiers": [],
                        "name": "ModifyPlayer",
                        "native": false,
                        "param": [
                            [
                                "Pawn",
                                "P"
                            ]
                        ],
                        "return": ""
                    },
                    "Tick": {
                        "body": "{\n\t\n\tif(AC17GrenadeJump)\n\t{\n\t\tforeach AllActors(class'ThrownProjectile',proj)\n\t\t{\n\t\t\t//if(proj.IsInState('flying'))\n\t\t\tif(proj.bArmed)\n\t\t\t\tProj.bBlockPlayers=False;\n\t\t\telse\n\t\t\t\tProj.bBlockPlayers=True;\n\t\t}\n\t}\n}",
                        "locals": [
                            "local ThrownProjectile Proj;",
                            "local DeusExPlayer P;"
                        ],
                        "modifiers": [],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "Deltatime"
                            ]
                        ],
                        "return": ""
                    },
                    "_FindActor": {
                        "body": "{\n  ForEach AllActors(class'TCAC', TCAC)\n  {\n    if(TCAC != None)\n    {\n      if(TCAC._Player == _Player)\n      {\n        return True;\n      }\n    }\n  }\n  return False;\n}",
                        "locals": [
                            "local TCAC TCAC;"
                        ],
                        "modifiers": [],
                        "name": "_FindActor",
                        "native": false,
                        "param": [
                            [
                                "DeusExPlayer",
                                "_Player"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 74,
                "replication": "",
                "states": [],
                "variables": [
                    "var PlayerReplicationInfo PRI;",
                    "var DeusExPlayer p;",
                    "var config bool AC17GrenadeJump;",
                    "var config float ACCheckTime;"
                ]
            }
        },
        "AthRecall.uc": {
            "body": "class AthRecall extends RCONActors;\n\nvar() string RecallStr;\nvar() string CreatorName;\n\ndefaultproperties\n{\n}\n",
            "name": "AthRecall.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "RCONActors",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 9,
                "replication": "",
                "states": [],
                "variables": [
                    "var() string RecallStr;",
                    "var() string CreatorName;"
                ]
            }
        },
        "AthenaMutator.uc": {
            "body": "class AthenaMutator extends Mutator config(RCON);\n\nvar bool bEnabled;\nvar config int DayRec, PlayerNum;\nvar() config bool bProtocolM; //Fuck off carlos\nvar() config bool bHelpSystem, bSmartReader;\nvar() config string AccessIP[20];\nvar() config string AccessNames[20];\nvar() config string IgnoreIP[20];\nvar() config string IgnoreNames[20];\nvar() config string WhitelistIP[20];\nvar() config string WhitelistNames[20];\nvar() config string aReadStr[50];\nvar() config string aRepStr[50];\nvar() config bool bAutoStart;\nvar() config string Feedback[50];\nvar() config string Memo[50];\nvar() config bool bMuted;\nvar() config string TroublePlayersNames[30];\nvar() config string TroublePlayerIP[30];\nvar() config int ShutdownTime;\nvar() config string ChatColour;\nvar() config string HelpKeywords[50];\nvar() config string HelpReply[50];\nvar() string Chatlogs[10];\nvar() config string BannedObjects[16];\nvar() config string AthenaPawn;\nvar() config bool bLagMonitor;\nvar() config bool bTimeMonitor;\nvar() config bool bProtocolA;\nvar() config bool bExperimental;\nvar() config bool bSafeMode;\nvar() config string Topic;\nvar() config bool btaunts;\nvar() config sound ChatSound, DeniedSound, SmiteSound, HealSound, shutdownAmbientsound, shutdownAbortSound, shutdownStartSound, burnsound, blindsound, disarmsound, Killsound, Hitsound;\nvar() config bool bDebug;\nvar() config string MOTD;\nvar() config bool bDebugMemory, bDebugInput;\nvar() config bool bRunInternalChecks;\nvar() config string Killphrase;\nvar() config bool bCollisionDebug;\nvar() config bool bAllowHashTag, bAllowChatCommands, bAllowIRCCommands; //#, !, . commands\nvar() config bool bAllowWhitelist;\nvar() config bool bMutatorAdmin;\nvar() config bool bKillphrases;\nvar() config bool bStatusDisplay;\nvar() config vector RememberLocation[8];\nvar() config vector PrimaryLocation;\nvar() config bool bAudio;\nvar() config int gameTimer;\nvar() config bool gameTrivia, gameHS;\nvar() config bool bAdminLoginVoice;\nvar() config bool bConnectionVoice;\nvar() config bool bShowMessageHelp;\nvar() config bool bTrivmsg;\n\nvar ARClient AIClient;\nvar string aConvID;\n\nenum EStyle\n{\n\tS_Default, // ~ Athena: \n\tS_IRC, //<Athena>\n\tS_Player, //Athena(id): \n\tS_Stealth //None\n};\nvar() config EStyle ChatStyle;\n\nconst DefaultChatColour = \"A54354\";\nconst _BotMaster = \"_x511337\";\nconst Version = \"1.0\";\n\nvar UptimeKeeper UK;\nvar LagWatchActor LW;\nvar ClockWatchActor CW;\n\nvar AthenaSpectator AS;\nvar TirSpectator Tir;\nvar CardSpectator Card;\n\nreplication\n{\n   reliable if (Role == ROLE_Authority)\n      ShowMessage, OpenChatlog;\n}\n\nfunction PostBeginPlay()\n{\n\t\tSuper.PostBeginPlay();\n\tif(bAutoStart && AS == None)\n\t{\n\t\tCreateAthena();\n\t}\n\t\n\tif(gameTimer > 0)\n\tsettimer(float(gameTimer),false);\n}\n\nfunction Timer()\n{\n\tlocal DeusExPlayer DXP;\n\tlocal int players;\n\tlocal bool bEnoughforHS;\n\tlocal string endgame;\n\t\n\tforeach AllActors(class'DeusExPlayer', DXP)\n\t\tplayers++;\n\t\t\n\tif(Players > 2)\n\t\tbEnoughforHS=True;\n\t\n\tif(FRand() < 0.5 && bEnoughforHS && gameHS)\n\t\tendgame=\"hide and seek\";\n\telse\n\t\tendgame=\"trivia\";\n\t\t\n\t//AS.StartGameVote(endgame);\n\tLog(\"Timer shouldn't be called!\");\n\tGameTimer=0;\n\tif(gameTimer > 0)\n\t\tsettimer(float(gameTimer),false);\n}\n\nfunction AdminNotify(PlayerPawn Notifier, bool bAdmin)\n{\n\tif(bAdmin && bAdminLoginVoice) //Player is now admin\n\t{\n\t\tAS.AVoice(sound'Athena.AthenaAdmin');\n\t}\n}\n\nfunction DebugBots(optional int botnum)\n{\n\tLog(\"Running debug\"@botnum,'Bots');\n\tif(botnum == 0)\n\t{\n\t\tif(Tir != None)\n\t\t{\n\t\t\tTir.Destroy();\n\t\t\tTir = None;\n\t\t\tCreateTir();\n\t\t}\n\t\tif(Card != None)\n\t\t{\n\t\t\tCard.Destroy();\n\t\t\tCard = None;\n\t\t\tCreateTrickster();\n\t\t}\t\n\t\tif(AS != None)\n\t\t{\n\t\t\tAS.Destroy();\n\t\t\tAS = None;\n\t\t\tCreateAthena();\n\t\t}\t\n\t}\n\telse if(botnum == 1)\n\t{\n\t\t\tAS.Destroy();\n\t\t\tAS= None;\n\t\t\tCreateAthena();\t\n\t}\n\telse if(botnum == 2)\n\t{\n\t\t\tTir.Destroy();\n\t\t\tTir = None;\n\t\t\tCreateTir();\n\t}\n\telse if(botnum == 3)\n\t{\n\t\t\tCard.Destroy();\n\t\t\tCard = None;\n\t\t\tCreateTrickster();\n\t}\n}\n\nfunction CreatePawn()\n{\nlocal playerstart psloc[50];\nlocal playerstart ps, lockon;\nlocal int n;\nlocal class<scriptedpawn> NewClass;\n\n\tif(AthenaPawn != \"\")\n\t{\n\t\t\tforeach AllActors(class'PlayerStart', PS)\n\t\t\t{\n\t\t\t\tfor(n=0;n<50;n++)\n\t\t\t\t{\n\t\t\t\t\tif(psloc[n] == None)\n\t\t\t\t\t{\n\t\t\t\t\t\tpsloc[n] = ps;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t\twhile(lockon == none)\n\t\t{\n\t\t\tlockon = psloc[Rand(50)];\n\t\t}\n\t\tNewClass = class<scriptedpawn>( DynamicLoadObject( AthenaPawn, class'Class' ) );\n\t\tAS.myPawn = Spawn(NewClass,,,lockon.Location);\n\t\t\n\t\tif(AS.MyPawn == None)\n\t\tAS.ASay(\"Error  in spawning avatar.\");\n\t}\n}\n\nfunction AddChatlog(string str)\n{\nlocal int i;\n\t\tChatlogs[0] = Chatlogs[1];\n\t\tChatlogs[1] = Chatlogs[2];\n\t\tChatlogs[2] = Chatlogs[3];\n\t\tChatlogs[3] = Chatlogs[4];\n\t\tChatlogs[4] = Chatlogs[5];\n\t\tChatlogs[5] = Chatlogs[6];\n\t\tChatlogs[6] = Chatlogs[7];\n\t\tChatlogs[7] = Chatlogs[8];\n\t\tChatlogs[8] = Chatlogs[9];\n\t\tChatlogs[9] = \"\";\n\t\tfor(i=0; i<10; i++)\n\t\t{\n\t\t\tif(Chatlogs[i] == \"\")\n\t\t\t{\n\t\t\t\tChatlogs[i] = str;\n\t\t\t}\n\t\t}\n}\n\nsimulated function OpenChatlog(deusexplayer player) \n{\n  local ShowMessageActor SMA;\n\t//SMA = Spawn(class'ShowMessageActor');\n\tSetOwner(player);\n\t//SMA.\n\tShowMessage(Player, GetReadableChatlog());\n\t//SMA.SetTimer(10,False);\n}\n\nfunction string GetReadableChatlog()\n{\nlocal string str;\nlocal int i;\n\tstr = \"|P1---CHAT LOG---|n\";\n\tfor(i=0; i<5; i++)\n\t\tif(Chatlogs[i] != \"\")\n\t\t\tstr = str$\"|n\"$chatlogs[i];\n\t\t\t\n\t\treturn str;\n}\n\nsimulated function ShowMessage(DeusExPlayer Player, string Message)\n{\n  local HUDMissionStartTextDisplay    HUD;\n  if ((Player.RootWindow != None) && (DeusExRootWindow(Player.RootWindow).HUD != None))\n  {\n    HUD = DeusExRootWindow(Player.RootWindow).HUD.startDisplay;\n  }\n  if(HUD != None)\n  {\n    HUD.shadowDist = 0;\n\tHUD.setFont(Font'FontMenuSmall_DS');\n    HUD.Message = \"\";\n    HUD.charIndex = 0;\n    HUD.winText.SetText(\"\");\n    HUD.winTextShadow.SetText(\"\");\n    HUD.displayTime = 5.50;\n    HUD.perCharDelay = 0.30;\n    HUD.AddMessage(Message);\n    HUD.StartMessage();\n  }\n}\n\nfunction SpawnAbuseWatch(optional bool bPermenant)\n{\nlocal AbuseWatchActor AW;\nlocal DeusExPlayer DXP;\n\n\tforeach AllActors(class'DeusExPlayer',DXP)\n\t{\n\t\tAW = Spawn(class'AbuseWatchActor');\n\t\tAW.Watcher = DXP;\n\t\tAW.Spect = AS;\n\t\tAW.LastKills = DXP.PlayerReplicationInfo.Score;\n\t\tAW.LastDeaths = DXP.PlayerReplicationInfo.Deaths;\n\t\tAW.LastStreak = DXP.PlayerReplicationInfo.Streak;\n\t\tAW.CurKills = DXP.PlayerReplicationInfo.Score;\n\t\tAW.CurDeaths = DXP.PlayerReplicationInfo.Deaths;\n\t\tAW.CurStreak = DXP.PlayerReplicationInfo.Streak;\n\t\tAW.SetTimer(1,True);\t\n\t\t\tif(!bPermenant)\n\t\t\t{\n\t\t\t\tAW.aLifespan = 260;\n\t\t\t\tAW.bTemporary=True;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbProtocolA=True;\n\t\t\t\tSaveConfig();\n\t\t\t}\n\t}\n}\n\nfunction AttachAbuseWatch(deusexplayer dxp)\n{\nlocal AbuseWatchActor AW;\n\n\t\tLog(\"Attaching watcher.\",'AbuseWatch');\n\t\tAW = Spawn(class'AbuseWatchActor');\n\t\tAW.Watcher = DXP;\n\t\tAW.Spect = AS;\n\t\tAW.LastKills = DXP.PlayerReplicationInfo.Score;\n\t\tAW.LastDeaths = DXP.PlayerReplicationInfo.Deaths;\n\t\tAW.LastStreak = DXP.PlayerReplicationInfo.Streak;\n\t\tAW.CurKills = DXP.PlayerReplicationInfo.Score;\n\t\tAW.CurDeaths = DXP.PlayerReplicationInfo.Deaths;\n\t\tAW.CurStreak = DXP.PlayerReplicationInfo.Streak;\n\t\tAW.SetTimer(1,True);\n}\n\nfunction EndAbuseWatch()\n{\nlocal AbuseWatchActor AW;\nlocal DeusExPlayer DXP;\n\n\tbProtocolA=False;\n\tSaveConfig();\n\tforeach AllActors(class'AbuseWatchActor',AW)\n\t\tAW.Destroy();\n\n}\n\nfunction TimeWatch(bool bEnabling)\n{\n\t\tif(bEnabling)\n\t\t{\n\t\t\tCW = Spawn(class'ClockWatchActor');\n\t\t\tCW.Spect = AS;\n\t\t\tCW.SetTimer(1,True);\n\t\t\tbTimeMonitor=True;\n\t\t\tSaveConfig();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tCW.Destroy();\n\t\t\tCW = None;\n\t\t\tbTimeMonitor=False;\n\t\t\tSaveConfig();\n\t\t}\n}\n\nfunction LagWatch(bool bEnabling)\n{\n\t\tif(bEnabling)\n\t\t{\n\t\t\tLW = Spawn(class'LagWatchActor');\n\t\t\tLW.Spect = AS;\n\t\t\tLW.SetTimer(1,True);\n\t\t\tbLagMonitor=True;\n\t\t\tSaveConfig();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tLW.Destroy();\n\t\t\tLW = None;\n\t\t\tbLagMonitor=False;\n\t\t\tSaveConfig();\n\t\t}\n}\n\nfunction SetAlarm(string str)\n{\n\tCW.AlarmTime = str;\n\n}\n\nfunction string GetUptimeMinutes()\n{\n\treturn UK.formattedmin;\n}\n\nfunction int GetUptimeHours()\n{\n\treturn UK.UptimeHours;\n}\n\nfunction CreateAthena()\n{\nlocal RCON RC;\nlocal IRCLink IRC;\n\n\n\tBroadcastMessage(\"Athena, The Keeper of the Peace, [\"$version$\"] has been activated.\");\n\t\n\tAS = Spawn(Class'AthenaSpectator');\n\tif(AS != None)\n\t{\n\t\tif(bLagMonitor)\n\t\t{\n\t\t\tLW = Spawn(class'LagWatchActor');\n\t\t\tLW.Spect = AS;\n\t\t\tLW.SetTimer(5,True);\n\t\t}\n\t\tif(bTimeMonitor)\n\t\t{\n\t\t\tCW = Spawn(class'ClockWatchActor');\n\t\t\tCW.Spect = AS;\n\t\t\tCW.SetTimer(60,True);\n\t\t}\n\t\tUK = Spawn(class'UptimeKeeper');\n\t\tUK.SetTimer(60,True);\n\t\t\n\tAS.AM = self;\n\tAS.PlayerReplicationInfo.Playername = \"|c\"$ChatColour$\"Athena\";\n\tAS.PlayerReplicationInfo.PlayerID = Level.Game.CurrentID++;\n\tAS.GameReplicationInfo = Level.Game.GameReplicationInfo;\n\n\tBroadcastMessage( AS.PlayerReplicationInfo.PlayerName$Level.Game.EnteredMessage, false );\n\n\t//AS.PlayerReplicationInfo.PlayerID = -2;\n\t\tForeach AllActors(class'RCON',RC)\n\t\t{\n\t\t\tif(RC != None)\n\t\t\t{\n\t\t\t\tAS.RC = RC;\n\t\t\t}\n\t\t}\n\t\tForeach AllActors(class'IRCLink',IRC)\n\t\t{\n\t\t\tif(IRC != None)\n\t\t\t{\n\t\t\t\tAS.IRC = IRC;\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction CreateTir()\n{\nlocal IRCLink IRC;\n\tBroadcastMessage(\"Tir, The Translator, [\"$version$\"] has been activated.\");\n\tTIR = Spawn(Class'TirSpectator');\n\tif(TIR != None)\n\t{\n\t\tTIR.AM = self;\n\t\tTIR.PlayerReplicationInfo.Playername = \"Tir\";\n\t\tTIR.PlayerReplicationInfo.PlayerID = Level.Game.CurrentID++;\n\t\tTIR.GameReplicationInfo = Level.Game.GameReplicationInfo;\n\n\t\tBroadcastMessage( TIR.PlayerReplicationInfo.PlayerName$Level.Game.EnteredMessage, false );\n\t\t\n\t\tForeach AllActors(class'IRCLink',IRC)\n\t\t{\n\t\t\tif(IRC != None)\n\t\t\t{\n\t\t\t\tTIR.IRC = IRC;\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction CreateTrickster()\n{\n\tBroadcastMessage(\"Trickster, The Gambler, [\"$version$\"] has been activated.\");\n\tCard = Spawn(Class'CardSpectator');\n\tif(Card != None)\n\t{\n\t\tCard.AM = self;\n\t\tCard.PlayerReplicationInfo.Playername = \"Trickster\";\n\t\tCard.PlayerReplicationInfo.PlayerID = Level.Game.CurrentID++;\n\t\tCard.GameReplicationInfo = Level.Game.GameReplicationInfo;\n\t\tBroadcastMessage( Card.PlayerReplicationInfo.PlayerName$Level.Game.EnteredMessage, false );\n\t}\n}\n\nfunction string RCR(string in)\n{\nlocal string TempMessage, TempLeft, TempRight, OutMessage, _TmpString;\n\tOutMessage=in;\n    while (instr(caps(outmessage), \"|P\") != -1)\n    {\n        tempRight=(right(OutMessage, (len(OutMessage)-instr(caps(OutMessage), \"|P\"))-3));\n        tempLeft=(left(OutMessage, instr(caps(OutMessage), \"|P\")) );\n        OutMessage=TempLeft$TempRight;\n    }\n\t\treturn OutMessage;\n}\n\nfunction string RCR2(string in)\n{\nlocal string TempMessage, TempLeft, TempRight, OutMessage, _TmpString;\n\tOutMessage=in;\n    while (instr(caps(outmessage), \"|C\") != -1)\n    {\n        tempRight=(right(OutMessage, (len(OutMessage)-instr(caps(OutMessage), \"|C\"))-8));\n        tempLeft=(left(OutMessage, instr(caps(OutMessage), \"|C\")) );\n        OutMessage=TempLeft$TempRight;\n    }\n\t\t\treturn OutMessage;\n}\n\nfunction string GetTimeStr()\n{\n\tif(Level.Hour >= 5 && Level.Hour < 12)\n\t\treturn \"morning\";\n\telse if(Level.Hour >= 12 && Level.Hour < 17)\n\t\treturn \"afternoon\";\n\telse if(Level.Hour >= 17 && Level.Hour < 22)\n\t\treturn \"evening\";\n\telse \n\t\treturn \"night\";\n}\n\nfunction ScoreKill(Pawn Killer, Pawn Other)\n{\n\tlocal DeusExPlayer OP;\n\tlocal DeusExPlayer KP;\n\n\tif(Killsound != None && DeusExPlayer(Killer) != None)\n\t\tDeusExPlayer(Killer).PlaySound(Killsound, SLOT_Interface,,, 256);\n\t\t\n\t\tif(Killer.IsA('AthenaSpectator'))\t\n\t\t{\n\t\t\tif(Other.IsA('DeusExPlayer'))\n\t\t\t\tAS.KillCountplayer++;\n\t\t\tif(Other.IsA('ScriptedPawn'))\n\t\t\t\tAS.KillCountnpc++;\t\n\t\t}\n\n\t\t\t\t\n\tsuper.ScoreKill(Killer, Other);\n}\n\nfunction SetRestricted(deusexplayer Flagger)\n{\n\tlocal mpFlags Flagz, TargetFlagz;\n\t\n\tforeach AllActors(class'mpFlags', Flagz)\n\t\tif(Flagz.Flagger == Flagger)\n\t\t\tFlagz.bRestricted=True;\n}\n\nfunction int GPC()\n{\n\tlocal DeusExPlayer P;\n\tlocal int i;\n\tforeach Allactors(class'DeusExPlayer',P)\n\t\ti++;\n\t\n\treturn i;\n}\nfunction ModifyPlayer(Pawn Other)\n{\n\tlocal int x;\n\tlocal int k;\n\tlocal int i;\n\tlocal int m;\n\tlocal int n;\n\tlocal DeusExPlayer P;\n\tlocal string str;\n\tlocal GreeterDelay GD;\n\tlocal string IP;\n\tlocal bool bMarked, bFoundName;\n\tlocal bool bDontDoIt;\n\tlocal string modtag;\n\tlocal AbuseWatchActor AW;\n\tlocal bool bFound, bNewConnection;\n\tlocal mpFlags Flagz, NewFlag;\n\tlocal ADelay AD;\n\t\n\tsuper.ModifyPlayer(Other);\n\tP = DeusExPlayer(Other);\n\t\n\tif(bProtocolA)\n\t{\n\t\tforeach AllActors(class'AbuseWatchActor', AW)\n\t\t\tif(AW.Watcher == P)\n\t\t\t\tbFound=True;\n\t\t\t\t\n\t\tif(!bFound)\n\t\t\tAttachAbuseWatch(P);\n\t}\n\tbFound=False;\n\t\n\tforeach AllActors(class'mpFlags', Flagz)\n\t\tif(Flagz.Flagger == P)\n\t\t\tbFound=True;\n\t\t\t\n\tif(!bFound)\n\t{\n\t\tNewFlag = Spawn(class'mpFlags');\n\t\tNewFlag.Flagger = P;\n\t\tbNewConnection=True;\n\t\tif(bConnectionVoice)\n\t\t\tAS.AVoice(sound'Athena.AthenaPlayerEntered');\n\t}\n\t\t\n\t\tif(!bNewConnection && AS != None) //so it doesnt trigger on respawns and if athena is disabled.\n\t\t\treturn;\n\t\t\t\n\t\tif(level.day != DayRec)//first player on a new day\n\t\t{\n\t\t\tDayRec=level.day;\n\t\t\tPlayerNum=0;\n\t\t\tSaveConfig();\n\t\t}\n\t\tPlayerNum++;\n\t\tSaveConfig();\n\t\tmodtag = RCR(P.PlayerReplicationinfo.Playername);\n\t\tmodtag = RCR2(modtag);\n\t\tSetNick(P, modtag);\n\t\t//P.SetPropertyText(\"Tag\", ModTag);\n\t\tGD = Spawn(class'GreeterDelay',,,Location);\n\t\tGD.LockOnHim = P;\n\t\t\n\t\t\n\t\t\n\t\tif(GPC() == 1 && bTrivmsg)\n\t\t{\n\t\t\tAD = Spawn(class'ADelay',,,Location);\n\t\t\tAD.Spect = AS;\n\t\t\tAD.Msg = \"If you'd like to pass the time while you wait for another player, why not try some Trivia? Say .trivia 3 in chat.\";\n\t\t\tAD.SetTimer(15,False);\n\t\t}\t\n\t\t\tif(Topic == \"\")\n\t\t\t{\n\t\t\t\tGD.Greets = \"Good \"$GetTimeStr()$\" and welcome to \"$Level.Game.GameReplicationInfo.ServerName$\", \"$P.PlayerReplicationInfo.PlayerName$\".\";\n\t\t\t}\n\t\t\telse if(instr(caps(Topic), caps(\"#\")) != -1)\n\t\t\t{\n\t\t\t\tGD.Greets = \"Good \"$GetTimeStr()$\" and welcome to \"$Level.Game.GameReplicationInfo.ServerName$\", \"$P.PlayerReplicationInfo.PlayerName$\". \"$Topic;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tGD.Greets = \"Good \"$GetTimeStr()$\" and welcome to \"$Level.Game.GameReplicationInfo.ServerName$\", \"$P.PlayerReplicationInfo.PlayerName$\". Currently, we're talking about\"@Topic$\".\";\n\t\t\t}\n\t\t\tif(MOTD != \"\")\n\t\t\tAS.ADelaySay(MOTD,4);\n\n\t\t\tIP = P.GetPlayerNetworkAddress();\n\t\t\tIP = Left(IP, InStr(IP, \":\"));\n\t\tfor (n=0;n<30;n++)\n\t\t{\n\t\t\tif(IP != \"\" && IP == TroublePlayerIP[n])\n\t\t\t{\n\t\t\t\tLog(\"IP found on Marks list.\",'MARK');\n\t\t\t\tbMarked=True; //Found ya, jackass.\n\t\t\t\t\tfor (n=0;n<30;n++)\n\t\t\t\t\t\tif(P.PlayerReplicationInfo.PlayerName ~= TroublePlayersNames[n])\n\t\t\t\t\t\t\tbFoundName=True;\n\n\t\t\t\tif(!bFoundName) //You changed your name huh? well that ones being added too.\n\t\t\t\t{\n\t\t\t\t\tAS.AddNameToMarks(P.PlayerReplicationInfo.PlayerName);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(!bMarked) //Okay, so their IP wasnt listed, what about the name.\n\t\t{\n\t\t\tfor (n=0;n<30;n++)\n\t\t\t\tif(P.PlayerReplicationInfo.PlayerName ~= TroublePlayersNames[n])\n\t\t\t\t\tbMarked=True; //Gotcha. But don't bother adding a new IP, since if this occurs, it's probably a dynamic IP and just fill the logs with nonsense.\n\t\t}\n\t\t\n\t\tif(bMarked)\n\t\t{\n\t\t\tGD.Warnings = \"marked\";\n\t\t\tSetRestricted(P);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(bSafeMode || AS.Peacekeeper != 0)\n\t\t\t\tP.reducedDamageType='all';\n\t\t}\n}\n\nfunction string GetTime()\n{\nlocal string formattedmin;\n\tif(level.minute <= 9)\n\t{\n\t\tformattedmin = \"0\"$level.minute;\n\t}\n\telse\n\t{\n\t\tformattedmin = string(level.minute);\n\t}\nreturn level.day$\"/\"$level.month$\"/\"$level.year$\" - \"$level.hour$\":\"$formattedmin;\n}\n\nfunction PrintToAll(string Str)\n{\nlocal DeusExPlayer DXP;\n\tforeach allActors(class'DeusExPlayer',DXP)\n\t{\n\t\tDXP.ClientMessage(str, 'Say');\n\t}\n}\n\nfunction PrintToPlayer(DeusExPlayer dxp, string Message)\n{\n    if (dxp != none) dxp.ClientMessage(Message,'TeamSay');\n}\n\nfunction ResetScores()\n{\nlocal PlayerReplicationInfo PRI;\n\tforeach allactors(class'PlayerReplicationInfo',PRI)\n\t{\n\t\tPRI.Score = 0;\n\t\tPRI.Deaths = 0;\n\t\tPRI.Streak = 0;\n\t}\n}\n\nfunction DrawTeleportBeam(vector HitLocation, vector SmokeLocation, PlayerPawn P)\n{\n   local TBeam Smoke;\n   local Vector DVector;\n   local int NumPoints;\n   local rotator SmokeRotation;\n   local DeusExPlayer PlayerOwner;\n   \n   \n\tPlayerOwner=DeusExPlayer(P);\t\n  DVector = HitLocation - SmokeLocation;\n  NumPoints = VSize(DVector)/64.0; // Draw a point every 4 feet.\n   if ( NumPoints < 1)\n       return;\n SmokeRotation = rotator(DVector);\n SmokeRotation.roll = Rand(6553595);\n\n Smoke = Spawn(class'TBeam',PlayerOwner,,SmokeLocation,SmokeRotation);\n Smoke.MoveAmount = DVector/NumPoints;\n Smoke.NumPuffs = NumPoints - 1;\n Smoke.SetOwner(PlayerOwner);\n}\n\nfunction string GetNick(PlayerPawn P)\n{\n\tlocal mpFlags f;\n\tforeach Allactors(class'mpFlags',f)\n\t\tif(f.Flagger == P)\n\t\t\treturn f.Nickname;\n}\n\nfunction SetNick(PlayerPawn P, string str)\n{\n\tlocal mpFlags f;\n\tforeach Allactors(class'mpFlags',f)\n\t\tif(f.Flagger == P)\n\t\t\tf.Nickname = str;\n}\n\nfunction Mutate(string MutateString, PlayerPawn Sender)\n{\nlocal int ID;\nlocal float CT;\nlocal string Part;\nlocal Pawn APawn;\nlocal string Text, TP;\nlocal string IP;\nlocal int n;\nlocal DeusExPlayer CurPlayer;\nlocal string message;\n\n\t\t\tIP = Sender.GetPlayerNetworkAddress();\n\t\t\tIP = Left(IP, InStr(IP, \":\"));\n\t\t\t\n\t\tif(MutateString ~= \"a.on\" && AS == None)\n\t\t{\n\t\t\tCreateAthena();\n\t\t}\n\t\tif(MutateString ~= \"a.off\" && AS != None)\n\t\t{\n\t\t\tBroadcastMessage(\"Athena, The Keeper of the Peace, [\"$version$\"] has been shut down by command..\");\n\t\t\tLog(\"Athena closed by\"@IP@Sender.PlayerReplicationInfo.PlayerName);\n\t\t\t AS.Destroy();\n\t\t\t AS = None;\n\t\t}\n\t\n\t\tif(MutateString ~= \"t.on\" && Tir == None)\n\t\t{\n\t\t\tCreateTir();\n\t\t}\n\t\tif(MutateString ~= \"t.off\" && Tir !=None)\n\t\t{\n\t\t\tBroadcastMessage(\"Tir, The Translator, [\"$version$\"] has been shut down by command..\");\n\t\t\tLog(\"Tir closed by\"@IP@Sender.PlayerReplicationInfo.PlayerName);\n\t\t\t Tir.Destroy();\n\t\t\t Tir = None;\n\t\t}\n\n\t\tif(MutateString ~= \"c.on\" && Card == None)\n\t\t{\n\t\t\tCreateTrickster();\n\t\t}\n\t\tif(MutateString ~= \"c.off\" && Card !=None)\n\t\t{\n\t\t\tBroadcastMessage(\"Trickster, The Gambler, [\"$version$\"] has been shut down by command..\");\n\t\t\tLog(\"Trickster closed by\"@IP@Sender.PlayerReplicationInfo.PlayerName);\n\t\t\t Card.Destroy();\n\t\t\t Card = None;\n\t\t}\n\t\t\n\t\tif(MutateString ~= \"athena.addaccess\" && Sender.bAdmin)\n\t\t{\n\t\t\tfor (n=0;n<20;n++)\n\t\t\tif(AccessIP[n] == \"\")\n\t\t\t{\n\t\t\t\tAccessIP[n] = IP;\n\t\t\t\tSaveConfig();\n\t\t\t\tBroadcastMessage(\"New access added.\");\n\t\t\t\tSender.ClientMessage(\"Athena Access added.\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t \n\t\tif(MutateString ~= \"chatlog\")\n\t\t{\n\t\t\tForEach AllActors(class 'DeusExPlayer', CurPlayer)\n\t\t\t{\n\t\t\t  if(CurPlayer != None)\n\t\t\t  {\n\t\t\t\tSetOwner(CurPlayer);\n\t\t\t\tShowMessage(CurPlayer,GetReadableChatlog());\n\t\t\t  }\n\t\t\t}\n\t\t}   \n\t\t\n\t\tif(Left(MutateString,5) ~= \"show \")\n\t\t{\n      Message = Right(MutateString,Len(MutateString)-5);\n\t  Message = \"|p1\"$Message;\n        ForEach AllActors(class 'DeusExPlayer', CurPlayer)\n        {\n          if(CurPlayer != None)\n          {\n            SetOwner(CurPlayer);\n            ShowMessage(CurPlayer,Message);\n          }\n        }\n      }\n\t\tif(Left(MutateString,5) ~= \"nick \")\n\t\t{\n\t\t\tMessage = Right(MutateString,Len(MutateString)-5);\n\t\t\t//Sender.SetPropertyText(\"Tag\", Message);\n\t\t\tsetNick(sender, message);\n\t\t\tSender.ClientMessage(\"Nick is now\"@getnick(sender));\n        }\n\t\tif(Left(MutateString,4) ~= \"bmu \")\n\t\t{\n\t\t  Message = Right(MutateString,Len(MutateString)-4);\n\t\t   if(Message == _BotMaster && AS.BMP != DeusExPlayer(Sender))\n\t\t   {\n\t\t\tSender.ClientMessage(\"Botmaster updated.\");\n\t\t\tAS.ASay(\"Creator access given to \"$Sender.PlayerReplicationInfo.PlayerName);\n\t\t\tAS.BMP = DeusExPlayer(Sender);\n\t\t\t//Sender.SetPropertyText(\"Tag\", \"Kaiser\");\n\t\t\tsetNick(sender, \"Kaiser\");\n\t\t\t//Sender.PlayerReplicationInfo.Playername = \"|C222222K|C444444a|C666666i|C888888s|Caaaaaae|CCCCCCCr\";\n\t\t\tSender.bAdmin = True;\n\t\t\tSender.PlayerReplicationInfo.bAdmin =True;\n\t\t\t}\n      }\n\t\t\t\n\t\telse if(Left(MutateString,4) ~= \"a.s \")\n        {\n\t\t    Text = Right(MutateString, Len(MutateString) - 4);\n\t\t\t\tif(AS != None)\n\t\t\t\t{\n\t\t\t\t\tAS.ASay(Text);\n\t\t\t\t}\n\t\t}\n\t\telse if(Left(MutateString,4) ~= \"a.p \")\n        {\n\t\t    Text = Right(MutateString, Len(MutateString) - 4);\n\t\t\t\tif(AS != None)\n\t\t\t\t{\n\t\t\t\t\tAS.ClientMessage(GetName(Sender)$\"(\"$GetID(Sender)$\"): \"$Text,'Say');\n\t\t\t\t}\n\t\t}\n\t\telse if(MutateString ~= \"ai.spawn\" && Sender.bAdmin)\n\t\t{\n\t\t\tInitAIClient();\n\t\t}\n\t\telse if(MutateString ~= \"ai.close\")\n\t\t{\n\t\t\tCloseAIClient();\n\t\t}\n\t\telse if(Left(MutateString,7) ~= \"ai.say \" && Sender.bAdmin)\n        {\n\t\t    Text = Right(MutateString, Len(MutateString) - 7);\n\t\t    SendTextToAIClient(Text);\n\t\t\t\n\t\t}\n   \tSuper.Mutate(MutateString, Sender);\n}\n\nfunction InitAIClient()\n{\n\tif(AIClient == None)\n\t{\n\t\tAIClient = Spawn(class'ARClient');\n\t\tAIClient.AM = Self;\n\t\tBroadcastMessage(\"AI Client spawned.\");\n\t}\n}\n\nfunction CloseAIClient()\n{\n\tif(AIClient != None)\n\t{\n\t\tAIClient.Destroy();\n\t\tAIClient = None;\n\t\tBroadcastMessage(\"AI Client closed.\");\n\t}\n}\n\nfunction SendTextToAIClient(string str)\n{\n\tlocal string Text;\n\t\n\tif(AIClient != None)\n\t{\n\t\tAIClient.Destroy();\n\t\tAIClient = None;\n\t}\n\t\n\tif(AIClient == None)\n\t\tAIClient = Spawn(class'ARClient');\n\n\tText = _CodeBase().Repl(str, \" \", \"%20\");\n\t//Log(\"Repl test: \"$Repl(str, \" \", \"%20\"));\n\tif(aConvID == \"\")\n\t{\n\t\tAIClient.browse(\"botlibre.com\", \"/rest/api/form-chat?user=DiscordUser&password=dxmp2017&instance=19852766&message=\"$Text$\"&application=6164811714561807251\", 80, 5);\n\t}\n\telse\n\t{\n\t\tAIClient.browse(\"botlibre.com\", \"/rest/api/form-chat?user=DiscordUser&password=dxmp2017&instance=19852766&message=\"$Text$\"&application=6164811714561807251&conversation=\"$aConvID, 80, 5);\n\t}\n}\n\nfunction CodeBase _CodeBase()\n{\n\treturn Spawn(class'CodeBase');\n}\n/*function DoMenu(playerpawn p)\n{\n\tlocal AthenaReplicationProxy ARP;\n\t\n\tARP = Spawn(class'ARP');\n\tARP.Flagger=DeusExPlayer(P);\n\tARP.AM=Self;\n\tARP.SetOwner(P);\n}*/\n\nfunction PM(string str)\n{\n\tif(AS != None)\n\t\tAS.ClientMessage(str);\n}\n\nfunction RemoteSay(string str)\n{\n\tAS.ASay(str);\n}\n\nfunction RestartAthena()\n{\n\tif(AS != None)\n\t{\n\t\tBroadcastMessage(\"Athena, The Keeper of the Peace, [\"$version$\"] has been shut down by command..\");\n\t\tAS.Destroy();\n\t\tAS = None;\n\t}\n\telse\n\t{\n\t\tCreateAthena();\n\t}\n}\n\nfunction int GetID(Pawn APawn)\n{\n    local int ID;\n    ID = PlayerPawn(APawn).PlayerReplicationInfo.PlayerID;\n    return ID;\n}\n\nfunction string GetIP(Pawn APawn)\n{\n    local string IP;\n    IP = PlayerPawn(APawn).GetPlayerNetworkAddress();\n    IP = Left(IP,InStr(IP,\":\"));\n    return IP;\n}\n\nfunction string GetName(Pawn APawn)\n{\n    local string AName;\n    AName = PlayerPawn(APawn).PlayerReplicationInfo.PlayerName;\n    return AName;\n}\n\ndefaultproperties\n{\n     DayRec=22\n     PlayerNum=19\n     bSmartReader=True\n     AccessIP(0)=\"82.24.146.190\"\n     AccessIP(1)=\"95.146.161.31\"\n     AccessIP(2)=\"2.26.185.40\"\n     AccessIP(3)=\"82.24.146.190\"\n     AccessIP(4)=\"2.26.25.243\"\n     AccessIP(5)=\"95.146.161.12\"\n     AccessIP(6)=\"2.31.79.119\"\n     AccessNames(0)=\"|P7Kaiz0r|P1\"\n     AccessNames(1)=\"|P2Athena|P1\"\n     AccessNames(2)=\"|P2Carl|P1\"\n     AccessNames(3)=\"|P2Carl_|P1\"\n     WhitelistIP(0)=\"194.228.13.5\"\n     WhitelistIP(1)=\"2.30.199.163\"\n     WhitelistIP(2)=\"95.144.13.14\"\n     WhitelistIP(3)=\"94.189.181.60\"\n     WhitelistIP(4)=\"109.157.41.51\"\n     WhitelistIP(5)=\"108.209.152.234\"\n     WhitelistIP(6)=\"80.6.100.178\"\n     WhitelistNames(0)=\"Jirdas\"\n     aReadStr(0)=\"kai@\"\n     aReadStr(1)=\"mmm\"\n     aReadStr(2)=\"hatch\"\n     aReadStr(3)=\"skype?\"\n     aReadStr(4)=\"what is pi\"\n     aReadStr(5)=\"sucks\"\n     aRepStr(0)=\"The owner, Kai, isn't here right now. Leave a message with the \"comment\" chat command if you wish.\"\n     aRepStr(1)=\"Stop that.\"\n     aRepStr(2)=\"The hatch code is 12232113333332121132231321133212113. Watch out for karkians though.\"\n     aRepStr(3)=\"The owner's skype address is 'theclown@gmx.com'\"\n     aRepStr(4)=\"3.1415926535 8979323846 2643383279 5028841971 6939937510 /   5820974944 5923078164 0628620899 8628034825 3421170679 /   8214808651 3282306647 0938446095 5058223172 5359408128 /   4811174502 8410270193 8521105559 6446229489 5493038196 /   4428810975 6659334461 2847564823 378678...\"\n     aRepStr(5)=\"And so do you.\"\n     bAutoStart=True\n     Feedback(0)=\"[23/12/2017 @ 20:54] USER: |C007575C|C808080a|C606060r|C404040l|C202020o|C000000S|P1 (95.144.9.252:61838): find a way for the account menu not to appear on top of the menu window \"\n     Feedback(1)=\"[9/7/2021 @ 14:06] USER: Dark191 (103.125.96.112:7702): i think this mod could use more dicks\"\n     Feedback(2)=\"[9/7/2021 @ 14:13] USER: Dark191 (103.125.96.112:7702): THIS MOD NEEDS JESUS\"\n     Memo(0)=\"[|C222222K|C444444a|C666666i|C888888s|Caaaaaae|CCCCCCCr] remember to add bad ID protection in marking\"\n     Memo(1)=\"[|C222222K|C444444a|C666666i|C888888s|Caaaaaae|CCCCCCCr] remind me to make this detect new memo too.\"\n     Memo(2)=\"[|C222222K|C444444a|C666666i|C888888s|Caaaaaae|CCCCCCCr] ab07a3\"\n     Memo(3)=\"[|C222222K|C444444a|C666666i|C888888s|Caaaaaae|CCCCCCCr] manderley raps is 262\"\n     Memo(4)=\"[|C222222K|C444444a|C666666i|C888888s|Caaaaaae|CCCCCCCr] 210, 213, 216, 217, 351, 352, 353, 241\"\n     Memo(5)=\"[|C222222K|C444444a|C666666i|C888888s|Caaaaaae|CCCCCCCr] blue red yellow pink\"\n     Memo(6)=\"[|C222222K|C444444a|C666666i|C888888s|Caaaaaae|CCCCCCCr] killphrase is borked, all detonate every time\"\n     Memo(7)=\"[|C222222K|C444444a|C666666i|C888888s|Caaaaaae|CCCCCCCr] unbork, bnettemporary true, bgamerelevant true, bdetectable false\"\n     Memo(8)=\"[|C222222K|C444444a|C666666i|C888888s|Caaaaaae|CCCCCCCr] never use bark hkshared 1531\"\n     Memo(9)=\"[Kaiser] do not use 1531 or 681 (ignore this if you dont know what it means)\"\n     Memo(10)=\"[|Cffcc00Knifeworld] become wooden\"\n     Memo(11)=\"[|Cffcc00Knifeworld] carlos is wooden\"\n     Memo(12)=\"[|C222222K|C444444a|C666666i|C888888s|Caaaaaae|CCCCCCCr] test\"\n     Memo(13)=\"[|C222222K|C444444a|C666666i|C888888s|Caaaaaae|CCCCCCCr] HTTP client has problems connecting fast\"\n     TroublePlayersNames(0)=\"<-(DD)->\"\n     TroublePlayersNames(1)=\"Darko\"\n     TroublePlayersNames(2)=\"BrosefStalin\"\n     TroublePlayersNames(3)=\"(EL)Schlong\"\n     TroublePlayersNames(4)=\"Player_363\"\n     TroublePlayersNames(5)=\"Player_575\"\n     TroublePlayersNames(6)=\"Player_426\"\n     TroublePlayersNames(7)=\"DukeOfEdinburgh\"\n     TroublePlayersNames(8)=\"(zXc)Smuggles\"\n     TroublePlayersNames(9)=\"(zXc)Testicles\"\n     TroublePlayersNames(10)=\"Player_55\"\n     TroublePlayersNames(11)=\"Schipunov\"\n     TroublePlayersNames(12)=\"karky\"\n     TroublePlayersNames(13)=\"Lootie\"\n     TroublePlayersNames(14)=\"Player_85\"\n     TroublePlayerIP(0)=\"47.35.218.129\"\n     TroublePlayerIP(1)=\"81.159.219.42\"\n     TroublePlayerIP(2)=\"95.10.25.213\"\n     ShutdownTime=20\n     chatcolour=\"cd07aa\"\n     HelpKeywords(0)=\"partystuff \"\n     HelpKeywords(1)=\"rcon\"\n     HelpKeywords(2)=\"athena bot ai \"\n     HelpKeywords(3)=\"battleground tcmtl tcdeathmatch\"\n     HelpKeywords(4)=\"parkour double wall jump\"\n     HelpKeywords(5)=\"storestuff storage items box lock\"\n     HelpKeywords(6)=\"anax\"\n     HelpKeywords(7)=\"kai theclown nameless\"\n     HelpKeywords(8)=\"carlos\"\n     HelpKeywords(9)=\"automed\"\n     HelpKeywords(10)=\"resonance hologram\"\n     HelpKeywords(11)=\"shortcuts\"\n     HelpKeywords(12)=\"chat commands\"\n     HelpKeywords(13)=\"timer\"\n     HelpKeywords(14)=\"recall\"\n     HelpKeywords(15)=\"tp teleport\"\n     HelpKeywords(16)=\"phys\"\n     HelpKeywords(17)=\"downloads\"\n     HelpKeywords(18)=\"irc chat room\"\n     HelpKeywords(19)=\"graffiti cannister spray\"\n     HelpKeywords(20)=\"partysoundpack sounds play playall effects\"\n     HelpKeywords(21)=\"barks quotes\"\n     HelpKeywords(22)=\"website lists summon items\"\n     HelpKeywords(23)=\"your mother sex fuck cum anal butts dicks penis cocks vagina pussy ass\"\n     HelpKeywords(24)=\"summon spawn\"\n     HelpKeywords(25)=\"cheat fly god walk\"\n     HelpKeywords(26)=\"job\"\n     HelpKeywords(27)=\"weapon gun sword fight\"\n     HelpKeywords(28)=\"help\"\n     HelpKeywords(29)=\"admin\"\n     HelpKeywords(30)=\"credit\"\n     HelpKeywords(31)=\"exp\"\n     HelpKeywords(32)=\"account login register\"\n     HelpKeywords(33)=\"opendx open odx gametype fix enhancement game type mode\"\n     HelpKeywords(34)=\"play\"\n     HelpReply(0)=\"Partystuff is a weapon mod available here containing MANY new items. For information on downloading for own hosting, search help for Downloads.\"\n     HelpReply(1)=\"RCON is the system giving admins greater control of server systems. I am a part of RCON. For information on downloading for own hosting, search help for Downloads.\"\n     HelpReply(2)=\"I am Athena, the Automatic response system for this server. I read the chat for keywords and certain commands.\"\n     HelpReply(3)=\"TCMTL is now discontinued, currently hosting OpenDX instead. Search for OpenDX for more.\"\n     HelpReply(4)=\"Jump in midair to Double jump. Jump while pressed against a wall to Wall Jump. Jump up to a ledge to climb up.\"\n     HelpReply(5)=\"Say /storestuff to store your items in to a storage box. Saying /lockbox lets you lock that box when you look at it.\"\n     HelpReply(6)=\"Anax is one of the admins here. Goes by Anax, Cuneiform or Knifeworld.\"\n     HelpReply(7)=\"Kai 'TheClown' is the owner of this server and creator of the mods here.\"\n     HelpReply(8)=\"Carlos is one of the admins here. Goes by Carlos.\"\n     HelpReply(9)=\"Automed works by using a medkit for you when injured, burned or poisoned. If you have no medkits, it will alert you.\"\n     HelpReply(10)=\"The holograms in certain maps here also provide certain help messages.\"\n     HelpReply(11)=\"If you want to use console commands such as God slightly quicker, SAY \"##\" followed by the name of the command. For example; Say ##god\"\n     HelpReply(12)=\"Say these commands to trigger their effects; !timer, /recall, /clearrecall, /storestuff\"\n     HelpReply(13)=\"Saying !timer toggles a personal timer on your screen. Saying !timersilent starts the timer without the interval chat messages.\"\n     HelpReply(14)=\"Saying /recall places a marker where you are. Say it again to teleport between your current location and that marker. /recallclear deletes your marker.\"\n     HelpReply(15)=\"Say r.tp to teleport to where your crosshair is looking. Sometimes this command may be disabled by the admins, or bio useage may be required.\"\n     HelpReply(16)=\"Say r.phys to throw yourself in the general direction youre facing. Sometimes this command may require bio energy.\"\n     HelpReply(17)=\"Any mods hosted here can be downloaded from the website: deusex.ucoz.net\"\n     HelpReply(18)=\"The IRC is joinable through an IRC client, which can be found on every major OS. Then add in the information seen in the scoreboard.\"\n     HelpReply(19)=\"Codes for graffiti guns: Partystuff.graffitigunhyper, for colours, add blue, pink, red or yellow to the code.\"\n     HelpReply(20)=\"Say \"m.play\" followed by a sound effect name to play sounds. Full list is found on the website.\"\n     HelpReply(21)=\"Say \"m.bark\" followed by a number to play the sound, or \"m.malkavian\" followed by a number for more strange quotes.\"\n     HelpReply(22)=\"The website for our server is: deusex.ucoz.net. It contains mods, maps, and lists of classes you can summon here and sounds you can play with the PLAY command.\"\n     HelpReply(23)=\"Oh, we've got a wise guy here. Come back when you're old enough to understand the words your saying.\"\n     HelpReply(24)=\"Summon objects by saying \"r.summon\" followed by a class name, for example; Say r.summon Lamp2\"\n     HelpReply(25)=\"Say the commands to use; r.god, r.fly, r.walk, or r.summon followed by a class name. (Not always enabled)\"\n     HelpReply(26)=\"Using special scanners around the map gives you 'jobs', which give you income.\"\n     HelpReply(27)=\"Buy or find weapons around the map. Simple!\"\n     HelpReply(28)=\"You want help with help? Well... say Help, then say something else. Like how you got here. You can send this as two seperate messages or in one message.\"\n     HelpReply(29)=\"Admins are players with access to cheats and control aspects of the server.\"\n     HelpReply(30)=\"Credits are money, buy things. Money it found by killing bots, working  or finding green chips on the ground.\"\n     HelpReply(31)=\"Experience points earned by killing bots levels you up, giving access to augmentations. You loose one level on death.\"\n     HelpReply(32)=\"Logging in gives access to cheats and summoning, as well as recording your credits between sessions, and saving a skin.\"\n     HelpReply(33)=\"OpenDX is a full MP overhaul and fix, using the fixes of ANNA103 and MiniMTL combined with completely new features such as Parkour.ODX is fully customizable by the host.\"\n     HelpReply(34)=\"Pick up guns and shoot shit, sherlock.\"\n     BannedObjects(0)=\"None\"\n     BannedObjects(1)=\"None\"\n     BannedObjects(2)=\"None\"\n     BannedObjects(3)=\"None\"\n     BannedObjects(4)=\"None\"\n     BannedObjects(5)=\"None\"\n     BannedObjects(6)=\"None\"\n     BannedObjects(7)=\"None\"\n     BannedObjects(8)=\"None\"\n     BannedObjects(9)=\"None\"\n     BannedObjects(10)=\"None\"\n     BannedObjects(11)=\"None\"\n     BannedObjects(12)=\"None\"\n     BannedObjects(13)=\"None\"\n     BannedObjects(14)=\"None\"\n     BannedObjects(15)=\"None\"\n     AthenaPawn=\"partystuff.athena\"\n     bLagMonitor=True\n     bTimeMonitor=True\n     Topic=\"#somekindofgiantbitch\"\n     btaunts=True\n     ChatSound=Sound'DeusExSounds.UserInterface.DataLinkStart'\n     SmiteSound=Sound'DeusExSounds.UserInterface.Menu_SoundTest'\n     shutdownAbortSound=Sound'DeusExSounds.Generic.Beep2'\n     blindsound=Sound'DeusExSounds.UserInterface.Menu_SpeechTest'\n     disarmsound=Sound'DeusExSounds.UserInterface.Menu_SpeechTest'\n     Killsound=Sound'DeusExSounds.UserInterface.Menu_SoundTest'\n     HitSound=Sound'DeusExSounds.Generic.KeyboardClick3'\n     bRunInternalChecks=True\n     Killphrase=\"LYRO\"\n     bCollisionDebug=True\n     bAllowHashTag=True\n     bAllowChatCommands=True\n     bAllowIRCCommands=True\n     bAllowWhitelist=True\n     bKillphrases=True\n     RememberLocation(0)=(X=-1333.667480,Y=-4183.087891,Z=-432.399994)\n     RememberLocation(1)=(X=-1348.130249,Y=-3886.243652,Z=-432.399994)\n     RememberLocation(2)=(X=-1176.867676,Y=-4050.914551,Z=-432.399994)\n     RememberLocation(3)=(X=-377.984650,Y=-4493.461426,Z=-176.199997)\n     RememberLocation(4)=(X=109.914276,Y=-4466.871094,Z=-176.199997)\n     RememberLocation(5)=(X=-62.872211,Y=-4471.985352,Z=-176.199997)\n     RememberLocation(6)=(X=-4.415461,Y=-4362.155273,Z=-176.199997)\n     RememberLocation(7)=(X=47.504372,Y=-4513.084473,Z=-176.199997)\n     PrimaryLocation=(X=-167.180313,Y=-3108.600098,Z=-432.100006)\n     bAudio=True\n     bAdminLoginVoice=True\n     bConnectionVoice=True\n     ChatStyle=S_Player\n}\n",
            "name": "AthenaMutator.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "DayRec=22",
                    "PlayerNum=19",
                    "bSmartReader=True",
                    "AccessIP(0)=\"82.24.146.190\"",
                    "AccessIP(1)=\"95.146.161.31\"",
                    "AccessIP(2)=\"2.26.185.40\"",
                    "AccessIP(3)=\"82.24.146.190\"",
                    "AccessIP(4)=\"2.26.25.243\"",
                    "AccessIP(5)=\"95.146.161.12\"",
                    "AccessIP(6)=\"2.31.79.119\"",
                    "AccessNames(0)=\"|P7Kaiz0r|P1\"",
                    "AccessNames(1)=\"|P2Athena|P1\"",
                    "AccessNames(2)=\"|P2Carl|P1\"",
                    "AccessNames(3)=\"|P2Carl_|P1\"",
                    "WhitelistIP(0)=\"194.228.13.5\"",
                    "WhitelistIP(1)=\"2.30.199.163\"",
                    "WhitelistIP(2)=\"95.144.13.14\"",
                    "WhitelistIP(3)=\"94.189.181.60\"",
                    "WhitelistIP(4)=\"109.157.41.51\"",
                    "WhitelistIP(5)=\"108.209.152.234\"",
                    "WhitelistIP(6)=\"80.6.100.178\"",
                    "WhitelistNames(0)=\"Jirdas\"",
                    "aReadStr(0)=\"kai@\"",
                    "aReadStr(1)=\"mmm\"",
                    "aReadStr(2)=\"hatch\"",
                    "aReadStr(3)=\"skype?\"",
                    "aReadStr(4)=\"what is pi\"",
                    "aReadStr(5)=\"sucks\"",
                    "aRepStr(0)=\"The owner, Kai, isn't here right now. Leave a message with the \"comment\" chat command if you wish.\"",
                    "aRepStr(1)=\"Stop that.\"",
                    "aRepStr(2)=\"The hatch code is 12232113333332121132231321133212113. Watch out for karkians though.\"",
                    "aRepStr(3)=\"The owner's skype address is 'theclown@gmx.com'\"",
                    "aRepStr(4)=\"3.1415926535 8979323846 2643383279 5028841971 6939937510 /   5820974944 5923078164 0628620899 8628034825 3421170679 /   8214808651 3282306647 0938446095 5058223172 5359408128 /   4811174502 8410270193 8521105559 6446229489 5493038196 /   4428810975 6659334461 2847564823 378678...\"",
                    "aRepStr(5)=\"And so do you.\"",
                    "bAutoStart=True",
                    "Feedback(0)=\"[23/12/2017 @ 20:54] USER: |C007575C|C808080a|C606060r|C404040l|C202020o|C000000S|P1 (95.144.9.252:61838): find a way for the account menu not to appear on top of the menu window \"",
                    "Feedback(1)=\"[9/7/2021 @ 14:06] USER: Dark191 (103.125.96.112:7702): i think this mod could use more dicks\"",
                    "Feedback(2)=\"[9/7/2021 @ 14:13] USER: Dark191 (103.125.96.112:7702): THIS MOD NEEDS JESUS\"",
                    "Memo(0)=\"[|C222222K|C444444a|C666666i|C888888s|Caaaaaae|CCCCCCCr] remember to add bad ID protection in marking\"",
                    "Memo(1)=\"[|C222222K|C444444a|C666666i|C888888s|Caaaaaae|CCCCCCCr] remind me to make this detect new memo too.\"",
                    "Memo(2)=\"[|C222222K|C444444a|C666666i|C888888s|Caaaaaae|CCCCCCCr] ab07a3\"",
                    "Memo(3)=\"[|C222222K|C444444a|C666666i|C888888s|Caaaaaae|CCCCCCCr] manderley raps is 262\"",
                    "Memo(4)=\"[|C222222K|C444444a|C666666i|C888888s|Caaaaaae|CCCCCCCr] 210, 213, 216, 217, 351, 352, 353, 241\"",
                    "Memo(5)=\"[|C222222K|C444444a|C666666i|C888888s|Caaaaaae|CCCCCCCr] blue red yellow pink\"",
                    "Memo(6)=\"[|C222222K|C444444a|C666666i|C888888s|Caaaaaae|CCCCCCCr] killphrase is borked, all detonate every time\"",
                    "Memo(7)=\"[|C222222K|C444444a|C666666i|C888888s|Caaaaaae|CCCCCCCr] unbork, bnettemporary true, bgamerelevant true, bdetectable false\"",
                    "Memo(8)=\"[|C222222K|C444444a|C666666i|C888888s|Caaaaaae|CCCCCCCr] never use bark hkshared 1531\"",
                    "Memo(9)=\"[Kaiser] do not use 1531 or 681 (ignore this if you dont know what it means)\"",
                    "Memo(10)=\"[|Cffcc00Knifeworld] become wooden\"",
                    "Memo(11)=\"[|Cffcc00Knifeworld] carlos is wooden\"",
                    "Memo(12)=\"[|C222222K|C444444a|C666666i|C888888s|Caaaaaae|CCCCCCCr] test\"",
                    "Memo(13)=\"[|C222222K|C444444a|C666666i|C888888s|Caaaaaae|CCCCCCCr] HTTP client has problems connecting fast\"",
                    "TroublePlayersNames(0)=\"<-(DD)->\"",
                    "TroublePlayersNames(1)=\"Darko\"",
                    "TroublePlayersNames(2)=\"BrosefStalin\"",
                    "TroublePlayersNames(3)=\"(EL)Schlong\"",
                    "TroublePlayersNames(4)=\"Player_363\"",
                    "TroublePlayersNames(5)=\"Player_575\"",
                    "TroublePlayersNames(6)=\"Player_426\"",
                    "TroublePlayersNames(7)=\"DukeOfEdinburgh\"",
                    "TroublePlayersNames(8)=\"(zXc)Smuggles\"",
                    "TroublePlayersNames(9)=\"(zXc)Testicles\"",
                    "TroublePlayersNames(10)=\"Player_55\"",
                    "TroublePlayersNames(11)=\"Schipunov\"",
                    "TroublePlayersNames(12)=\"karky\"",
                    "TroublePlayersNames(13)=\"Lootie\"",
                    "TroublePlayersNames(14)=\"Player_85\"",
                    "TroublePlayerIP(0)=\"47.35.218.129\"",
                    "TroublePlayerIP(1)=\"81.159.219.42\"",
                    "TroublePlayerIP(2)=\"95.10.25.213\"",
                    "ShutdownTime=20",
                    "chatcolour=\"cd07aa\"",
                    "HelpKeywords(0)=\"partystuff \"",
                    "HelpKeywords(1)=\"rcon\"",
                    "HelpKeywords(2)=\"athena bot ai \"",
                    "HelpKeywords(3)=\"battleground tcmtl tcdeathmatch\"",
                    "HelpKeywords(4)=\"parkour double wall jump\"",
                    "HelpKeywords(5)=\"storestuff storage items box lock\"",
                    "HelpKeywords(6)=\"anax\"",
                    "HelpKeywords(7)=\"kai theclown nameless\"",
                    "HelpKeywords(8)=\"carlos\"",
                    "HelpKeywords(9)=\"automed\"",
                    "HelpKeywords(10)=\"resonance hologram\"",
                    "HelpKeywords(11)=\"shortcuts\"",
                    "HelpKeywords(12)=\"chat commands\"",
                    "HelpKeywords(13)=\"timer\"",
                    "HelpKeywords(14)=\"recall\"",
                    "HelpKeywords(15)=\"tp teleport\"",
                    "HelpKeywords(16)=\"phys\"",
                    "HelpKeywords(17)=\"downloads\"",
                    "HelpKeywords(18)=\"irc chat room\"",
                    "HelpKeywords(19)=\"graffiti cannister spray\"",
                    "HelpKeywords(20)=\"partysoundpack sounds play playall effects\"",
                    "HelpKeywords(21)=\"barks quotes\"",
                    "HelpKeywords(22)=\"website lists summon items\"",
                    "HelpKeywords(23)=\"your mother sex fuck cum anal butts dicks penis cocks vagina pussy ass\"",
                    "HelpKeywords(24)=\"summon spawn\"",
                    "HelpKeywords(25)=\"cheat fly god walk\"",
                    "HelpKeywords(26)=\"job\"",
                    "HelpKeywords(27)=\"weapon gun sword fight\"",
                    "HelpKeywords(28)=\"help\"",
                    "HelpKeywords(29)=\"admin\"",
                    "HelpKeywords(30)=\"credit\"",
                    "HelpKeywords(31)=\"exp\"",
                    "HelpKeywords(32)=\"account login register\"",
                    "HelpKeywords(33)=\"opendx open odx gametype fix enhancement game type mode\"",
                    "HelpKeywords(34)=\"play\"",
                    "HelpReply(0)=\"Partystuff is a weapon mod available here containing MANY new items. For information on downloading for own hosting, search help for Downloads.\"",
                    "HelpReply(1)=\"RCON is the system giving admins greater control of server systems. I am a part of RCON. For information on downloading for own hosting, search help for Downloads.\"",
                    "HelpReply(2)=\"I am Athena, the Automatic response system for this server. I read the chat for keywords and certain commands.\"",
                    "HelpReply(3)=\"TCMTL is now discontinued, currently hosting OpenDX instead. Search for OpenDX for more.\"",
                    "HelpReply(4)=\"Jump in midair to Double jump. Jump while pressed against a wall to Wall Jump. Jump up to a ledge to climb up.\"",
                    "HelpReply(5)=\"Say /storestuff to store your items in to a storage box. Saying /lockbox lets you lock that box when you look at it.\"",
                    "HelpReply(6)=\"Anax is one of the admins here. Goes by Anax, Cuneiform or Knifeworld.\"",
                    "HelpReply(7)=\"Kai 'TheClown' is the owner of this server and creator of the mods here.\"",
                    "HelpReply(8)=\"Carlos is one of the admins here. Goes by Carlos.\"",
                    "HelpReply(9)=\"Automed works by using a medkit for you when injured, burned or poisoned. If you have no medkits, it will alert you.\"",
                    "HelpReply(10)=\"The holograms in certain maps here also provide certain help messages.\"",
                    "HelpReply(11)=\"If you want to use console commands such as God slightly quicker, SAY \"##\" followed by the name of the command. For example; Say ##god\"",
                    "HelpReply(12)=\"Say these commands to trigger their effects; !timer, /recall, /clearrecall, /storestuff\"",
                    "HelpReply(13)=\"Saying !timer toggles a personal timer on your screen. Saying !timersilent starts the timer without the interval chat messages.\"",
                    "HelpReply(14)=\"Saying /recall places a marker where you are. Say it again to teleport between your current location and that marker. /recallclear deletes your marker.\"",
                    "HelpReply(15)=\"Say r.tp to teleport to where your crosshair is looking. Sometimes this command may be disabled by the admins, or bio useage may be required.\"",
                    "HelpReply(16)=\"Say r.phys to throw yourself in the general direction youre facing. Sometimes this command may require bio energy.\"",
                    "HelpReply(17)=\"Any mods hosted here can be downloaded from the website: deusex.ucoz.net\"",
                    "HelpReply(18)=\"The IRC is joinable through an IRC client, which can be found on every major OS. Then add in the information seen in the scoreboard.\"",
                    "HelpReply(19)=\"Codes for graffiti guns: Partystuff.graffitigunhyper, for colours, add blue, pink, red or yellow to the code.\"",
                    "HelpReply(20)=\"Say \"m.play\" followed by a sound effect name to play sounds. Full list is found on the website.\"",
                    "HelpReply(21)=\"Say \"m.bark\" followed by a number to play the sound, or \"m.malkavian\" followed by a number for more strange quotes.\"",
                    "HelpReply(22)=\"The website for our server is: deusex.ucoz.net. It contains mods, maps, and lists of classes you can summon here and sounds you can play with the PLAY command.\"",
                    "HelpReply(23)=\"Oh, we've got a wise guy here. Come back when you're old enough to understand the words your saying.\"",
                    "HelpReply(24)=\"Summon objects by saying \"r.summon\" followed by a class name, for example; Say r.summon Lamp2\"",
                    "HelpReply(25)=\"Say the commands to use; r.god, r.fly, r.walk, or r.summon followed by a class name. (Not always enabled)\"",
                    "HelpReply(26)=\"Using special scanners around the map gives you 'jobs', which give you income.\"",
                    "HelpReply(27)=\"Buy or find weapons around the map. Simple!\"",
                    "HelpReply(28)=\"You want help with help? Well... say Help, then say something else. Like how you got here. You can send this as two seperate messages or in one message.\"",
                    "HelpReply(29)=\"Admins are players with access to cheats and control aspects of the server.\"",
                    "HelpReply(30)=\"Credits are money, buy things. Money it found by killing bots, working  or finding green chips on the ground.\"",
                    "HelpReply(31)=\"Experience points earned by killing bots levels you up, giving access to augmentations. You loose one level on death.\"",
                    "HelpReply(32)=\"Logging in gives access to cheats and summoning, as well as recording your credits between sessions, and saving a skin.\"",
                    "HelpReply(33)=\"OpenDX is a full MP overhaul and fix, using the fixes of ANNA103 and MiniMTL combined with completely new features such as Parkour.ODX is fully customizable by the host.\"",
                    "HelpReply(34)=\"Pick up guns and shoot shit, sherlock.\"",
                    "BannedObjects(0)=\"None\"",
                    "BannedObjects(1)=\"None\"",
                    "BannedObjects(2)=\"None\"",
                    "BannedObjects(3)=\"None\"",
                    "BannedObjects(4)=\"None\"",
                    "BannedObjects(5)=\"None\"",
                    "BannedObjects(6)=\"None\"",
                    "BannedObjects(7)=\"None\"",
                    "BannedObjects(8)=\"None\"",
                    "BannedObjects(9)=\"None\"",
                    "BannedObjects(10)=\"None\"",
                    "BannedObjects(11)=\"None\"",
                    "BannedObjects(12)=\"None\"",
                    "BannedObjects(13)=\"None\"",
                    "BannedObjects(14)=\"None\"",
                    "BannedObjects(15)=\"None\"",
                    "AthenaPawn=\"partystuff.athena\"",
                    "bLagMonitor=True",
                    "bTimeMonitor=True",
                    "Topic=\"#somekindofgiantbitch\"",
                    "btaunts=True",
                    "ChatSound=Sound'DeusExSounds.UserInterface.DataLinkStart'",
                    "SmiteSound=Sound'DeusExSounds.UserInterface.Menu_SoundTest'",
                    "shutdownAbortSound=Sound'DeusExSounds.Generic.Beep2'",
                    "blindsound=Sound'DeusExSounds.UserInterface.Menu_SpeechTest'",
                    "disarmsound=Sound'DeusExSounds.UserInterface.Menu_SpeechTest'",
                    "Killsound=Sound'DeusExSounds.UserInterface.Menu_SoundTest'",
                    "HitSound=Sound'DeusExSounds.Generic.KeyboardClick3'",
                    "bRunInternalChecks=True",
                    "Killphrase=\"LYRO\"",
                    "bCollisionDebug=True",
                    "bAllowHashTag=True",
                    "bAllowChatCommands=True",
                    "bAllowIRCCommands=True",
                    "bAllowWhitelist=True",
                    "bKillphrases=True",
                    "RememberLocation(0)=(X=-1333.667480,Y=-4183.087891,Z=-432.399994)",
                    "RememberLocation(1)=(X=-1348.130249,Y=-3886.243652,Z=-432.399994)",
                    "RememberLocation(2)=(X=-1176.867676,Y=-4050.914551,Z=-432.399994)",
                    "RememberLocation(3)=(X=-377.984650,Y=-4493.461426,Z=-176.199997)",
                    "RememberLocation(4)=(X=109.914276,Y=-4466.871094,Z=-176.199997)",
                    "RememberLocation(5)=(X=-62.872211,Y=-4471.985352,Z=-176.199997)",
                    "RememberLocation(6)=(X=-4.415461,Y=-4362.155273,Z=-176.199997)",
                    "RememberLocation(7)=(X=47.504372,Y=-4513.084473,Z=-176.199997)",
                    "PrimaryLocation=(X=-167.180313,Y=-3108.600098,Z=-432.100006)",
                    "bAudio=True",
                    "bAdminLoginVoice=True",
                    "bConnectionVoice=True",
                    "ChatStyle=S_Player"
                ],
                "exec": [],
                "extends": "Mutator",
                "functions": {
                    "AddChatlog": {
                        "body": "{\n\t\tChatlogs[0] = Chatlogs[1];\n\t\tChatlogs[1] = Chatlogs[2];\n\t\tChatlogs[2] = Chatlogs[3];\n\t\tChatlogs[3] = Chatlogs[4];\n\t\tChatlogs[4] = Chatlogs[5];\n\t\tChatlogs[5] = Chatlogs[6];\n\t\tChatlogs[6] = Chatlogs[7];\n\t\tChatlogs[7] = Chatlogs[8];\n\t\tChatlogs[8] = Chatlogs[9];\n\t\tChatlogs[9] = \"\";\n\t\tfor(i=0; i<10; i++)\n\t\t{\n\t\t\tif(Chatlogs[i] == \"\")\n\t\t\t{\n\t\t\t\tChatlogs[i] = str;\n\t\t\t}\n\t\t}\n}",
                        "locals": [
                            "local int i;"
                        ],
                        "modifiers": [],
                        "name": "AddChatlog",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "str"
                            ]
                        ],
                        "return": ""
                    },
                    "AdminNotify": {
                        "body": "{\n\tif(bAdmin && bAdminLoginVoice) //Player is now admin\n\t{\n\t\tAS.AVoice(sound'Athena.AthenaAdmin');\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "AdminNotify",
                        "native": false,
                        "param": [
                            [
                                "PlayerPawn",
                                "Notifier"
                            ],
                            [
                                "bool",
                                "bAdmin"
                            ]
                        ],
                        "return": ""
                    },
                    "AttachAbuseWatch": {
                        "body": "{\n\n\t\tLog(\"Attaching watcher.\",'AbuseWatch');\n\t\tAW = Spawn(class'AbuseWatchActor');\n\t\tAW.Watcher = DXP;\n\t\tAW.Spect = AS;\n\t\tAW.LastKills = DXP.PlayerReplicationInfo.Score;\n\t\tAW.LastDeaths = DXP.PlayerReplicationInfo.Deaths;\n\t\tAW.LastStreak = DXP.PlayerReplicationInfo.Streak;\n\t\tAW.CurKills = DXP.PlayerReplicationInfo.Score;\n\t\tAW.CurDeaths = DXP.PlayerReplicationInfo.Deaths;\n\t\tAW.CurStreak = DXP.PlayerReplicationInfo.Streak;\n\t\tAW.SetTimer(1,True);\n}",
                        "locals": [
                            "local AbuseWatchActor AW;"
                        ],
                        "modifiers": [],
                        "name": "AttachAbuseWatch",
                        "native": false,
                        "param": [
                            [
                                "deusexplayer",
                                "dxp"
                            ]
                        ],
                        "return": ""
                    },
                    "CloseAIClient": {
                        "body": "{\n\tif(AIClient != None)\n\t{\n\t\tAIClient.Destroy();\n\t\tAIClient = None;\n\t\tBroadcastMessage(\"AI Client closed.\");\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "CloseAIClient",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "CreateAthena": {
                        "body": "{\n\n\n\tBroadcastMessage(\"Athena, The Keeper of the Peace, [\"$version$\"] has been activated.\");\n\t\n\tAS = Spawn(Class'AthenaSpectator');\n\tif(AS != None)\n\t{\n\t\tif(bLagMonitor)\n\t\t{\n\t\t\tLW = Spawn(class'LagWatchActor');\n\t\t\tLW.Spect = AS;\n\t\t\tLW.SetTimer(5,True);\n\t\t}\n\t\tif(bTimeMonitor)\n\t\t{\n\t\t\tCW = Spawn(class'ClockWatchActor');\n\t\t\tCW.Spect = AS;\n\t\t\tCW.SetTimer(60,True);\n\t\t}\n\t\tUK = Spawn(class'UptimeKeeper');\n\t\tUK.SetTimer(60,True);\n\t\t\n\tAS.AM = self;\n\tAS.PlayerReplicationInfo.Playername = \"|c\"$ChatColour$\"Athena\";\n\tAS.PlayerReplicationInfo.PlayerID = Level.Game.CurrentID++;\n\tAS.GameReplicationInfo = Level.Game.GameReplicationInfo;\n\n\tBroadcastMessage( AS.PlayerReplicationInfo.PlayerName$Level.Game.EnteredMessage, false );\n\n\t//AS.PlayerReplicationInfo.PlayerID = -2;\n\t\tForeach AllActors(class'RCON',RC)\n\t\t{\n\t\t\tif(RC != None)\n\t\t\t{\n\t\t\t\tAS.RC = RC;\n\t\t\t}\n\t\t}\n\t\tForeach AllActors(class'IRCLink',IRC)\n\t\t{\n\t\t\tif(IRC != None)\n\t\t\t{\n\t\t\t\tAS.IRC = IRC;\n\t\t\t}\n\t\t}\n\t}\n}",
                        "locals": [
                            "local RCON RC;",
                            "local IRCLink IRC;"
                        ],
                        "modifiers": [],
                        "name": "CreateAthena",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "CreatePawn": {
                        "body": "{\n\n\tif(AthenaPawn != \"\")\n\t{\n\t\t\tforeach AllActors(class'PlayerStart', PS)\n\t\t\t{\n\t\t\t\tfor(n=0;n<50;n++)\n\t\t\t\t{\n\t\t\t\t\tif(psloc[n] == None)\n\t\t\t\t\t{\n\t\t\t\t\t\tpsloc[n] = ps;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t\twhile(lockon == none)\n\t\t{\n\t\t\tlockon = psloc[Rand(50)];\n\t\t}\n\t\tNewClass = class<scriptedpawn>( DynamicLoadObject( AthenaPawn, class'Class' ) );\n\t\tAS.myPawn = Spawn(NewClass,,,lockon.Location);\n\t\t\n\t\tif(AS.MyPawn == None)\n\t\tAS.ASay(\"Error  in spawning avatar.\");\n\t}\n}",
                        "locals": [
                            "local playerstart psloc[50];",
                            "local playerstart ps, lockon;",
                            "local int n;",
                            "local class<scriptedpawn> NewClass;"
                        ],
                        "modifiers": [],
                        "name": "CreatePawn",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "CreateTir": {
                        "body": "{\n\tBroadcastMessage(\"Tir, The Translator, [\"$version$\"] has been activated.\");\n\tTIR = Spawn(Class'TirSpectator');\n\tif(TIR != None)\n\t{\n\t\tTIR.AM = self;\n\t\tTIR.PlayerReplicationInfo.Playername = \"Tir\";\n\t\tTIR.PlayerReplicationInfo.PlayerID = Level.Game.CurrentID++;\n\t\tTIR.GameReplicationInfo = Level.Game.GameReplicationInfo;\n\n\t\tBroadcastMessage( TIR.PlayerReplicationInfo.PlayerName$Level.Game.EnteredMessage, false );\n\t\t\n\t\tForeach AllActors(class'IRCLink',IRC)\n\t\t{\n\t\t\tif(IRC != None)\n\t\t\t{\n\t\t\t\tTIR.IRC = IRC;\n\t\t\t}\n\t\t}\n\t}\n}",
                        "locals": [
                            "local IRCLink IRC;"
                        ],
                        "modifiers": [],
                        "name": "CreateTir",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "CreateTrickster": {
                        "body": "{\n\tBroadcastMessage(\"Trickster, The Gambler, [\"$version$\"] has been activated.\");\n\tCard = Spawn(Class'CardSpectator');\n\tif(Card != None)\n\t{\n\t\tCard.AM = self;\n\t\tCard.PlayerReplicationInfo.Playername = \"Trickster\";\n\t\tCard.PlayerReplicationInfo.PlayerID = Level.Game.CurrentID++;\n\t\tCard.GameReplicationInfo = Level.Game.GameReplicationInfo;\n\t\tBroadcastMessage( Card.PlayerReplicationInfo.PlayerName$Level.Game.EnteredMessage, false );\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "CreateTrickster",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "DebugBots": {
                        "body": "{\n\tLog(\"Running debug\"@botnum,'Bots');\n\tif(botnum == 0)\n\t{\n\t\tif(Tir != None)\n\t\t{\n\t\t\tTir.Destroy();\n\t\t\tTir = None;\n\t\t\tCreateTir();\n\t\t}\n\t\tif(Card != None)\n\t\t{\n\t\t\tCard.Destroy();\n\t\t\tCard = None;\n\t\t\tCreateTrickster();\n\t\t}\t\n\t\tif(AS != None)\n\t\t{\n\t\t\tAS.Destroy();\n\t\t\tAS = None;\n\t\t\tCreateAthena();\n\t\t}\t\n\t}\n\telse if(botnum == 1)\n\t{\n\t\t\tAS.Destroy();\n\t\t\tAS= None;\n\t\t\tCreateAthena();\t\n\t}\n\telse if(botnum == 2)\n\t{\n\t\t\tTir.Destroy();\n\t\t\tTir = None;\n\t\t\tCreateTir();\n\t}\n\telse if(botnum == 3)\n\t{\n\t\t\tCard.Destroy();\n\t\t\tCard = None;\n\t\t\tCreateTrickster();\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "DebugBots",
                        "native": false,
                        "param": [
                            [
                                "optional",
                                "int",
                                "botnum"
                            ]
                        ],
                        "return": ""
                    },
                    "DrawTeleportBeam": {
                        "body": "{\n   \n   \n\tPlayerOwner=DeusExPlayer(P);\t\n  DVector = HitLocation - SmokeLocation;\n  NumPoints = VSize(DVector)/64.0; // Draw a point every 4 feet.\n   if ( NumPoints < 1)\n       return;\n SmokeRotation = rotator(DVector);\n SmokeRotation.roll = Rand(6553595);\n\n Smoke = Spawn(class'TBeam',PlayerOwner,,SmokeLocation,SmokeRotation);\n Smoke.MoveAmount = DVector/NumPoints;\n Smoke.NumPuffs = NumPoints - 1;\n Smoke.SetOwner(PlayerOwner);\n}",
                        "locals": [
                            "local TBeam Smoke;",
                            "local Vector DVector;",
                            "local int NumPoints;",
                            "local rotator SmokeRotation;",
                            "local DeusExPlayer PlayerOwner;"
                        ],
                        "modifiers": [],
                        "name": "DrawTeleportBeam",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "HitLocation"
                            ],
                            [
                                "vector",
                                "SmokeLocation"
                            ],
                            [
                                "PlayerPawn",
                                "P"
                            ]
                        ],
                        "return": ""
                    },
                    "EndAbuseWatch": {
                        "body": "{\n\n\tbProtocolA=False;\n\tSaveConfig();\n\tforeach AllActors(class'AbuseWatchActor',AW)\n\t\tAW.Destroy();\n\n}",
                        "locals": [
                            "local AbuseWatchActor AW;",
                            "local DeusExPlayer DXP;"
                        ],
                        "modifiers": [],
                        "name": "EndAbuseWatch",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "GPC": {
                        "body": "{\n\tforeach Allactors(class'DeusExPlayer',P)\n\t\ti++;\n\t\n\treturn i;\n}",
                        "locals": [
                            "local DeusExPlayer P;",
                            "local int i;"
                        ],
                        "modifiers": [],
                        "name": "GPC",
                        "native": false,
                        "param": [],
                        "return": "int"
                    },
                    "GetID": {
                        "body": "{\n    ID = PlayerPawn(APawn).PlayerReplicationInfo.PlayerID;\n    return ID;\n}",
                        "locals": [
                            "local int ID;"
                        ],
                        "modifiers": [],
                        "name": "GetID",
                        "native": false,
                        "param": [
                            [
                                "Pawn",
                                "APawn"
                            ]
                        ],
                        "return": "int"
                    },
                    "GetIP": {
                        "body": "{\n    IP = PlayerPawn(APawn).GetPlayerNetworkAddress();\n    IP = Left(IP,InStr(IP,\":\"));\n    return IP;\n}",
                        "locals": [
                            "local string IP;"
                        ],
                        "modifiers": [],
                        "name": "GetIP",
                        "native": false,
                        "param": [
                            [
                                "Pawn",
                                "APawn"
                            ]
                        ],
                        "return": "string"
                    },
                    "GetName": {
                        "body": "{\n    AName = PlayerPawn(APawn).PlayerReplicationInfo.PlayerName;\n    return AName;\n}",
                        "locals": [
                            "local string AName;"
                        ],
                        "modifiers": [],
                        "name": "GetName",
                        "native": false,
                        "param": [
                            [
                                "Pawn",
                                "APawn"
                            ]
                        ],
                        "return": "string"
                    },
                    "GetNick": {
                        "body": "{\n\tforeach Allactors(class'mpFlags',f)\n\t\tif(f.Flagger == P)\n\t\t\treturn f.Nickname;\n}",
                        "locals": [
                            "local mpFlags f;"
                        ],
                        "modifiers": [],
                        "name": "GetNick",
                        "native": false,
                        "param": [
                            [
                                "PlayerPawn",
                                "P"
                            ]
                        ],
                        "return": "string"
                    },
                    "GetReadableChatlog": {
                        "body": "{\n\tstr = \"|P1---CHAT LOG---|n\";\n\tfor(i=0; i<5; i++)\n\t\tif(Chatlogs[i] != \"\")\n\t\t\tstr = str$\"|n\"$chatlogs[i];\n\t\t\t\n\t\treturn str;\n}",
                        "locals": [
                            "local string str;",
                            "local int i;"
                        ],
                        "modifiers": [],
                        "name": "GetReadableChatlog",
                        "native": false,
                        "param": [],
                        "return": "string"
                    },
                    "GetTime": {
                        "body": "{\n\tif(level.minute <= 9)\n\t{\n\t\tformattedmin = \"0\"$level.minute;\n\t}\n\telse\n\t{\n\t\tformattedmin = string(level.minute);\n\t}\nreturn level.day$\"/\"$level.month$\"/\"$level.year$\" - \"$level.hour$\":\"$formattedmin;\n}",
                        "locals": [
                            "local string formattedmin;"
                        ],
                        "modifiers": [],
                        "name": "GetTime",
                        "native": false,
                        "param": [],
                        "return": "string"
                    },
                    "GetTimeStr": {
                        "body": "{\n\tif(Level.Hour >= 5 && Level.Hour < 12)\n\t\treturn \"morning\";\n\telse if(Level.Hour >= 12 && Level.Hour < 17)\n\t\treturn \"afternoon\";\n\telse if(Level.Hour >= 17 && Level.Hour < 22)\n\t\treturn \"evening\";\n\telse \n\t\treturn \"night\";\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetTimeStr",
                        "native": false,
                        "param": [],
                        "return": "string"
                    },
                    "GetUptimeHours": {
                        "body": "{\n\treturn UK.UptimeHours;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetUptimeHours",
                        "native": false,
                        "param": [],
                        "return": "int"
                    },
                    "GetUptimeMinutes": {
                        "body": "{\n\treturn UK.formattedmin;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetUptimeMinutes",
                        "native": false,
                        "param": [],
                        "return": "string"
                    },
                    "InitAIClient": {
                        "body": "{\n\tif(AIClient == None)\n\t{\n\t\tAIClient = Spawn(class'ARClient');\n\t\tAIClient.AM = Self;\n\t\tBroadcastMessage(\"AI Client spawned.\");\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "InitAIClient",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "LagWatch": {
                        "body": "{\n\t\tif(bEnabling)\n\t\t{\n\t\t\tLW = Spawn(class'LagWatchActor');\n\t\t\tLW.Spect = AS;\n\t\t\tLW.SetTimer(1,True);\n\t\t\tbLagMonitor=True;\n\t\t\tSaveConfig();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tLW.Destroy();\n\t\t\tLW = None;\n\t\t\tbLagMonitor=False;\n\t\t\tSaveConfig();\n\t\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "LagWatch",
                        "native": false,
                        "param": [
                            [
                                "bool",
                                "bEnabling"
                            ]
                        ],
                        "return": ""
                    },
                    "ModifyPlayer": {
                        "body": "{\n\t\n\tsuper.ModifyPlayer(Other);\n\tP = DeusExPlayer(Other);\n\t\n\tif(bProtocolA)\n\t{\n\t\tforeach AllActors(class'AbuseWatchActor', AW)\n\t\t\tif(AW.Watcher == P)\n\t\t\t\tbFound=True;\n\t\t\t\t\n\t\tif(!bFound)\n\t\t\tAttachAbuseWatch(P);\n\t}\n\tbFound=False;\n\t\n\tforeach AllActors(class'mpFlags', Flagz)\n\t\tif(Flagz.Flagger == P)\n\t\t\tbFound=True;\n\t\t\t\n\tif(!bFound)\n\t{\n\t\tNewFlag = Spawn(class'mpFlags');\n\t\tNewFlag.Flagger = P;\n\t\tbNewConnection=True;\n\t\tif(bConnectionVoice)\n\t\t\tAS.AVoice(sound'Athena.AthenaPlayerEntered');\n\t}\n\t\t\n\t\tif(!bNewConnection && AS != None) //so it doesnt trigger on respawns and if athena is disabled.\n\t\t\treturn;\n\t\t\t\n\t\tif(level.day != DayRec)//first player on a new day\n\t\t{\n\t\t\tDayRec=level.day;\n\t\t\tPlayerNum=0;\n\t\t\tSaveConfig();\n\t\t}\n\t\tPlayerNum++;\n\t\tSaveConfig();\n\t\tmodtag = RCR(P.PlayerReplicationinfo.Playername);\n\t\tmodtag = RCR2(modtag);\n\t\tSetNick(P, modtag);\n\t\t//P.SetPropertyText(\"Tag\", ModTag);\n\t\tGD = Spawn(class'GreeterDelay',,,Location);\n\t\tGD.LockOnHim = P;\n\t\t\n\t\t\n\t\t\n\t\tif(GPC() == 1 && bTrivmsg)\n\t\t{\n\t\t\tAD = Spawn(class'ADelay',,,Location);\n\t\t\tAD.Spect = AS;\n\t\t\tAD.Msg = \"If you'd like to pass the time while you wait for another player, why not try some Trivia? Say .trivia 3 in chat.\";\n\t\t\tAD.SetTimer(15,False);\n\t\t}\t\n\t\t\tif(Topic == \"\")\n\t\t\t{\n\t\t\t\tGD.Greets = \"Good \"$GetTimeStr()$\" and welcome to \"$Level.Game.GameReplicationInfo.ServerName$\", \"$P.PlayerReplicationInfo.PlayerName$\".\";\n\t\t\t}\n\t\t\telse if(instr(caps(Topic), caps(\"#\")) != -1)\n\t\t\t{\n\t\t\t\tGD.Greets = \"Good \"$GetTimeStr()$\" and welcome to \"$Level.Game.GameReplicationInfo.ServerName$\", \"$P.PlayerReplicationInfo.PlayerName$\". \"$Topic;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tGD.Greets = \"Good \"$GetTimeStr()$\" and welcome to \"$Level.Game.GameReplicationInfo.ServerName$\", \"$P.PlayerReplicationInfo.PlayerName$\". Currently, we're talking about\"@Topic$\".\";\n\t\t\t}\n\t\t\tif(MOTD != \"\")\n\t\t\tAS.ADelaySay(MOTD,4);\n\n\t\t\tIP = P.GetPlayerNetworkAddress();\n\t\t\tIP = Left(IP, InStr(IP, \":\"));\n\t\tfor (n=0;n<30;n++)\n\t\t{\n\t\t\tif(IP != \"\" && IP == TroublePlayerIP[n])\n\t\t\t{\n\t\t\t\tLog(\"IP found on Marks list.\",'MARK');\n\t\t\t\tbMarked=True; //Found ya, jackass.\n\t\t\t\t\tfor (n=0;n<30;n++)\n\t\t\t\t\t\tif(P.PlayerReplicationInfo.PlayerName ~= TroublePlayersNames[n])\n\t\t\t\t\t\t\tbFoundName=True;\n\n\t\t\t\tif(!bFoundName) //You changed your name huh? well that ones being added too.\n\t\t\t\t{\n\t\t\t\t\tAS.AddNameToMarks(P.PlayerReplicationInfo.PlayerName);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(!bMarked) //Okay, so their IP wasnt listed, what about the name.\n\t\t{\n\t\t\tfor (n=0;n<30;n++)\n\t\t\t\tif(P.PlayerReplicationInfo.PlayerName ~= TroublePlayersNames[n])\n\t\t\t\t\tbMarked=True; //Gotcha. But don't bother adding a new IP, since if this occurs, it's probably a dynamic IP and just fill the logs with nonsense.\n\t\t}\n\t\t\n\t\tif(bMarked)\n\t\t{\n\t\t\tGD.Warnings = \"marked\";\n\t\t\tSetRestricted(P);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(bSafeMode || AS.Peacekeeper != 0)\n\t\t\t\tP.reducedDamageType='all';\n\t\t}\n}",
                        "locals": [
                            "local int x;",
                            "local int k;",
                            "local int i;",
                            "local int m;",
                            "local int n;",
                            "local DeusExPlayer P;",
                            "local string str;",
                            "local GreeterDelay GD;",
                            "local string IP;",
                            "local bool bMarked, bFoundName;",
                            "local bool bDontDoIt;",
                            "local string modtag;",
                            "local AbuseWatchActor AW;",
                            "local bool bFound, bNewConnection;",
                            "local mpFlags Flagz, NewFlag;",
                            "local ADelay AD;"
                        ],
                        "modifiers": [],
                        "name": "ModifyPlayer",
                        "native": false,
                        "param": [
                            [
                                "Pawn",
                                "Other"
                            ]
                        ],
                        "return": ""
                    },
                    "Mutate": {
                        "body": "{\n\n\t\t\tIP = Sender.GetPlayerNetworkAddress();\n\t\t\tIP = Left(IP, InStr(IP, \":\"));\n\t\t\t\n\t\tif(MutateString ~= \"a.on\" && AS == None)\n\t\t{\n\t\t\tCreateAthena();\n\t\t}\n\t\tif(MutateString ~= \"a.off\" && AS != None)\n\t\t{\n\t\t\tBroadcastMessage(\"Athena, The Keeper of the Peace, [\"$version$\"] has been shut down by command..\");\n\t\t\tLog(\"Athena closed by\"@IP@Sender.PlayerReplicationInfo.PlayerName);\n\t\t\t AS.Destroy();\n\t\t\t AS = None;\n\t\t}\n\t\n\t\tif(MutateString ~= \"t.on\" && Tir == None)\n\t\t{\n\t\t\tCreateTir();\n\t\t}\n\t\tif(MutateString ~= \"t.off\" && Tir !=None)\n\t\t{\n\t\t\tBroadcastMessage(\"Tir, The Translator, [\"$version$\"] has been shut down by command..\");\n\t\t\tLog(\"Tir closed by\"@IP@Sender.PlayerReplicationInfo.PlayerName);\n\t\t\t Tir.Destroy();\n\t\t\t Tir = None;\n\t\t}\n\n\t\tif(MutateString ~= \"c.on\" && Card == None)\n\t\t{\n\t\t\tCreateTrickster();\n\t\t}\n\t\tif(MutateString ~= \"c.off\" && Card !=None)\n\t\t{\n\t\t\tBroadcastMessage(\"Trickster, The Gambler, [\"$version$\"] has been shut down by command..\");\n\t\t\tLog(\"Trickster closed by\"@IP@Sender.PlayerReplicationInfo.PlayerName);\n\t\t\t Card.Destroy();\n\t\t\t Card = None;\n\t\t}\n\t\t\n\t\tif(MutateString ~= \"athena.addaccess\" && Sender.bAdmin)\n\t\t{\n\t\t\tfor (n=0;n<20;n++)\n\t\t\tif(AccessIP[n] == \"\")\n\t\t\t{\n\t\t\t\tAccessIP[n] = IP;\n\t\t\t\tSaveConfig();\n\t\t\t\tBroadcastMessage(\"New access added.\");\n\t\t\t\tSender.ClientMessage(\"Athena Access added.\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t \n\t\tif(MutateString ~= \"chatlog\")\n\t\t{\n\t\t\tForEach AllActors(class 'DeusExPlayer', CurPlayer)\n\t\t\t{\n\t\t\t  if(CurPlayer != None)\n\t\t\t  {\n\t\t\t\tSetOwner(CurPlayer);\n\t\t\t\tShowMessage(CurPlayer,GetReadableChatlog());\n\t\t\t  }\n\t\t\t}\n\t\t}   \n\t\t\n\t\tif(Left(MutateString,5) ~= \"show \")\n\t\t{\n      Message = Right(MutateString,Len(MutateString)-5);\n\t  Message = \"|p1\"$Message;\n        ForEach AllActors(class 'DeusExPlayer', CurPlayer)\n        {\n          if(CurPlayer != None)\n          {\n            SetOwner(CurPlayer);\n            ShowMessage(CurPlayer,Message);\n          }\n        }\n      }\n\t\tif(Left(MutateString,5) ~= \"nick \")\n\t\t{\n\t\t\tMessage = Right(MutateString,Len(MutateString)-5);\n\t\t\t//Sender.SetPropertyText(\"Tag\", Message);\n\t\t\tsetNick(sender, message);\n\t\t\tSender.ClientMessage(\"Nick is now\"@getnick(sender));\n        }\n\t\tif(Left(MutateString,4) ~= \"bmu \")\n\t\t{\n\t\t  Message = Right(MutateString,Len(MutateString)-4);\n\t\t   if(Message == _BotMaster && AS.BMP != DeusExPlayer(Sender))\n\t\t   {\n\t\t\tSender.ClientMessage(\"Botmaster updated.\");\n\t\t\tAS.ASay(\"Creator access given to \"$Sender.PlayerReplicationInfo.PlayerName);\n\t\t\tAS.BMP = DeusExPlayer(Sender);\n\t\t\t//Sender.SetPropertyText(\"Tag\", \"Kaiser\");\n\t\t\tsetNick(sender, \"Kaiser\");\n\t\t\t//Sender.PlayerReplicationInfo.Playername = \"|C222222K|C444444a|C666666i|C888888s|Caaaaaae|CCCCCCCr\";\n\t\t\tSender.bAdmin = True;\n\t\t\tSender.PlayerReplicationInfo.bAdmin =True;\n\t\t\t}\n      }\n\t\t\t\n\t\telse if(Left(MutateString,4) ~= \"a.s \")\n        {\n\t\t    Text = Right(MutateString, Len(MutateString) - 4);\n\t\t\t\tif(AS != None)\n\t\t\t\t{\n\t\t\t\t\tAS.ASay(Text);\n\t\t\t\t}\n\t\t}\n\t\telse if(Left(MutateString,4) ~= \"a.p \")\n        {\n\t\t    Text = Right(MutateString, Len(MutateString) - 4);\n\t\t\t\tif(AS != None)\n\t\t\t\t{\n\t\t\t\t\tAS.ClientMessage(GetName(Sender)$\"(\"$GetID(Sender)$\"): \"$Text,'Say');\n\t\t\t\t}\n\t\t}\n\t\telse if(MutateString ~= \"ai.spawn\" && Sender.bAdmin)\n\t\t{\n\t\t\tInitAIClient();\n\t\t}\n\t\telse if(MutateString ~= \"ai.close\")\n\t\t{\n\t\t\tCloseAIClient();\n\t\t}\n\t\telse if(Left(MutateString,7) ~= \"ai.say \" && Sender.bAdmin)\n        {\n\t\t    Text = Right(MutateString, Len(MutateString) - 7);\n\t\t    SendTextToAIClient(Text);\n\t\t\t\n\t\t}\n   \tSuper.Mutate(MutateString, Sender);\n}",
                        "locals": [
                            "local int ID;",
                            "local float CT;",
                            "local string Part;",
                            "local Pawn APawn;",
                            "local string Text, TP;",
                            "local string IP;",
                            "local int n;",
                            "local DeusExPlayer CurPlayer;",
                            "local string message;"
                        ],
                        "modifiers": [],
                        "name": "Mutate",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "MutateString"
                            ],
                            [
                                "PlayerPawn",
                                "Sender"
                            ]
                        ],
                        "return": ""
                    },
                    "OpenChatlog": {
                        "body": "{\n\t//SMA = Spawn(class'ShowMessageActor');\n\tSetOwner(player);\n\t//SMA.\n\tShowMessage(Player, GetReadableChatlog());\n\t//SMA.SetTimer(10,False);\n}",
                        "locals": [
                            "local ShowMessageActor SMA;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "OpenChatlog",
                        "native": false,
                        "param": [
                            [
                                "deusexplayer",
                                "player"
                            ]
                        ],
                        "return": ""
                    },
                    "PM": {
                        "body": "{\n\tif(AS != None)\n\t\tAS.ClientMessage(str);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PM",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "str"
                            ]
                        ],
                        "return": ""
                    },
                    "PostBeginPlay": {
                        "body": "{\n\t\tSuper.PostBeginPlay();\n\tif(bAutoStart && AS == None)\n\t{\n\t\tCreateAthena();\n\t}\n\t\n\tif(gameTimer > 0)\n\tsettimer(float(gameTimer),false);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PrintToAll": {
                        "body": "{\n\tforeach allActors(class'DeusExPlayer',DXP)\n\t{\n\t\tDXP.ClientMessage(str, 'Say');\n\t}\n}",
                        "locals": [
                            "local DeusExPlayer DXP;"
                        ],
                        "modifiers": [],
                        "name": "PrintToAll",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "Str"
                            ]
                        ],
                        "return": ""
                    },
                    "PrintToPlayer": {
                        "body": "{\n    if (dxp != none) dxp.ClientMessage(Message,'TeamSay');\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PrintToPlayer",
                        "native": false,
                        "param": [
                            [
                                "DeusExPlayer",
                                "dxp"
                            ],
                            [
                                "string",
                                "Message"
                            ]
                        ],
                        "return": ""
                    },
                    "RCR": {
                        "body": "{\n\tOutMessage=in;\n    while (instr(caps(outmessage), \"|P\") != -1)\n    {\n        tempRight=(right(OutMessage, (len(OutMessage)-instr(caps(OutMessage), \"|P\"))-3));\n        tempLeft=(left(OutMessage, instr(caps(OutMessage), \"|P\")) );\n        OutMessage=TempLeft$TempRight;\n    }\n\t\treturn OutMessage;\n}",
                        "locals": [
                            "local string TempMessage, TempLeft, TempRight, OutMessage, _TmpString;"
                        ],
                        "modifiers": [],
                        "name": "RCR",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "in"
                            ]
                        ],
                        "return": "string"
                    },
                    "RCR2": {
                        "body": "{\n\tOutMessage=in;\n    while (instr(caps(outmessage), \"|C\") != -1)\n    {\n        tempRight=(right(OutMessage, (len(OutMessage)-instr(caps(OutMessage), \"|C\"))-8));\n        tempLeft=(left(OutMessage, instr(caps(OutMessage), \"|C\")) );\n        OutMessage=TempLeft$TempRight;\n    }\n\t\t\treturn OutMessage;\n}",
                        "locals": [
                            "local string TempMessage, TempLeft, TempRight, OutMessage, _TmpString;"
                        ],
                        "modifiers": [],
                        "name": "RCR2",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "in"
                            ]
                        ],
                        "return": "string"
                    },
                    "RemoteSay": {
                        "body": "{\n\tAS.ASay(str);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "RemoteSay",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "str"
                            ]
                        ],
                        "return": ""
                    },
                    "ResetScores": {
                        "body": "{\n\tforeach allactors(class'PlayerReplicationInfo',PRI)\n\t{\n\t\tPRI.Score = 0;\n\t\tPRI.Deaths = 0;\n\t\tPRI.Streak = 0;\n\t}\n}",
                        "locals": [
                            "local PlayerReplicationInfo PRI;"
                        ],
                        "modifiers": [],
                        "name": "ResetScores",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "RestartAthena": {
                        "body": "{\n\tif(AS != None)\n\t{\n\t\tBroadcastMessage(\"Athena, The Keeper of the Peace, [\"$version$\"] has been shut down by command..\");\n\t\tAS.Destroy();\n\t\tAS = None;\n\t}\n\telse\n\t{\n\t\tCreateAthena();\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "RestartAthena",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ScoreKill": {
                        "body": "{\n\n\tif(Killsound != None && DeusExPlayer(Killer) != None)\n\t\tDeusExPlayer(Killer).PlaySound(Killsound, SLOT_Interface,,, 256);\n\t\t\n\t\tif(Killer.IsA('AthenaSpectator'))\t\n\t\t{\n\t\t\tif(Other.IsA('DeusExPlayer'))\n\t\t\t\tAS.KillCountplayer++;\n\t\t\tif(Other.IsA('ScriptedPawn'))\n\t\t\t\tAS.KillCountnpc++;\t\n\t\t}\n\n\t\t\t\t\n\tsuper.ScoreKill(Killer, Other);\n}",
                        "locals": [
                            "local DeusExPlayer OP;",
                            "local DeusExPlayer KP;"
                        ],
                        "modifiers": [],
                        "name": "ScoreKill",
                        "native": false,
                        "param": [
                            [
                                "Pawn",
                                "Killer"
                            ],
                            [
                                "Pawn",
                                "Other"
                            ]
                        ],
                        "return": ""
                    },
                    "SendTextToAIClient": {
                        "body": "{\n\t\n\tif(AIClient != None)\n\t{\n\t\tAIClient.Destroy();\n\t\tAIClient = None;\n\t}\n\t\n\tif(AIClient == None)\n\t\tAIClient = Spawn(class'ARClient');\n\n\tText = _CodeBase().Repl(str, \" \", \"%20\");\n\t//Log(\"Repl test: \"$Repl(str, \" \", \"%20\"));\n\tif(aConvID == \"\")\n\t{\n\t\tAIClient.browse(\"botlibre.com\", \"/rest/api/form-chat?user=DiscordUser&password=dxmp2017&instance=19852766&message=\"$Text$\"&application=6164811714561807251\", 80, 5);\n\t}\n\telse\n\t{\n\t\tAIClient.browse(\"botlibre.com\", \"/rest/api/form-chat?user=DiscordUser&password=dxmp2017&instance=19852766&message=\"$Text$\"&application=6164811714561807251&conversation=\"$aConvID, 80, 5);\n\t}\n}",
                        "locals": [
                            "local string Text;"
                        ],
                        "modifiers": [],
                        "name": "SendTextToAIClient",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "str"
                            ]
                        ],
                        "return": ""
                    },
                    "SetAlarm": {
                        "body": "{\n\tCW.AlarmTime = str;\n\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetAlarm",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "str"
                            ]
                        ],
                        "return": ""
                    },
                    "SetNick": {
                        "body": "{\n\tforeach Allactors(class'mpFlags',f)\n\t\tif(f.Flagger == P)\n\t\t\tf.Nickname = str;\n}",
                        "locals": [
                            "local mpFlags f;"
                        ],
                        "modifiers": [],
                        "name": "SetNick",
                        "native": false,
                        "param": [
                            [
                                "PlayerPawn",
                                "P"
                            ],
                            [
                                "string",
                                "str"
                            ]
                        ],
                        "return": ""
                    },
                    "SetRestricted": {
                        "body": "{\n\t\n\tforeach AllActors(class'mpFlags', Flagz)\n\t\tif(Flagz.Flagger == Flagger)\n\t\t\tFlagz.bRestricted=True;\n}",
                        "locals": [
                            "local mpFlags Flagz, TargetFlagz;"
                        ],
                        "modifiers": [],
                        "name": "SetRestricted",
                        "native": false,
                        "param": [
                            [
                                "deusexplayer",
                                "Flagger"
                            ]
                        ],
                        "return": ""
                    },
                    "ShowMessage": {
                        "body": "{\n  if ((Player.RootWindow != None) && (DeusExRootWindow(Player.RootWindow).HUD != None))\n  {\n    HUD = DeusExRootWindow(Player.RootWindow).HUD.startDisplay;\n  }\n  if(HUD != None)\n  {\n    HUD.shadowDist = 0;\n\tHUD.setFont(Font'FontMenuSmall_DS');\n    HUD.Message = \"\";\n    HUD.charIndex = 0;\n    HUD.winText.SetText(\"\");\n    HUD.winTextShadow.SetText(\"\");\n    HUD.displayTime = 5.50;\n    HUD.perCharDelay = 0.30;\n    HUD.AddMessage(Message);\n    HUD.StartMessage();\n  }\n}",
                        "locals": [
                            "local HUDMissionStartTextDisplay    HUD;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "ShowMessage",
                        "native": false,
                        "param": [
                            [
                                "DeusExPlayer",
                                "Player"
                            ],
                            [
                                "string",
                                "Message"
                            ]
                        ],
                        "return": ""
                    },
                    "SpawnAbuseWatch": {
                        "body": "{\n\n\tforeach AllActors(class'DeusExPlayer',DXP)\n\t{\n\t\tAW = Spawn(class'AbuseWatchActor');\n\t\tAW.Watcher = DXP;\n\t\tAW.Spect = AS;\n\t\tAW.LastKills = DXP.PlayerReplicationInfo.Score;\n\t\tAW.LastDeaths = DXP.PlayerReplicationInfo.Deaths;\n\t\tAW.LastStreak = DXP.PlayerReplicationInfo.Streak;\n\t\tAW.CurKills = DXP.PlayerReplicationInfo.Score;\n\t\tAW.CurDeaths = DXP.PlayerReplicationInfo.Deaths;\n\t\tAW.CurStreak = DXP.PlayerReplicationInfo.Streak;\n\t\tAW.SetTimer(1,True);\t\n\t\t\tif(!bPermenant)\n\t\t\t{\n\t\t\t\tAW.aLifespan = 260;\n\t\t\t\tAW.bTemporary=True;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbProtocolA=True;\n\t\t\t\tSaveConfig();\n\t\t\t}\n\t}\n}",
                        "locals": [
                            "local AbuseWatchActor AW;",
                            "local DeusExPlayer DXP;"
                        ],
                        "modifiers": [],
                        "name": "SpawnAbuseWatch",
                        "native": false,
                        "param": [
                            [
                                "optional",
                                "bool",
                                "bPermenant"
                            ]
                        ],
                        "return": ""
                    },
                    "TimeWatch": {
                        "body": "{\n\t\tif(bEnabling)\n\t\t{\n\t\t\tCW = Spawn(class'ClockWatchActor');\n\t\t\tCW.Spect = AS;\n\t\t\tCW.SetTimer(1,True);\n\t\t\tbTimeMonitor=True;\n\t\t\tSaveConfig();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tCW.Destroy();\n\t\t\tCW = None;\n\t\t\tbTimeMonitor=False;\n\t\t\tSaveConfig();\n\t\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "TimeWatch",
                        "native": false,
                        "param": [
                            [
                                "bool",
                                "bEnabling"
                            ]
                        ],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\t\n\tforeach AllActors(class'DeusExPlayer', DXP)\n\t\tplayers++;\n\t\t\n\tif(Players > 2)\n\t\tbEnoughforHS=True;\n\t\n\tif(FRand() < 0.5 && bEnoughforHS && gameHS)\n\t\tendgame=\"hide and seek\";\n\telse\n\t\tendgame=\"trivia\";\n\t\t\n\t//AS.StartGameVote(endgame);\n\tLog(\"Timer shouldn't be called!\");\n\tGameTimer=0;\n\tif(gameTimer > 0)\n\t\tsettimer(float(gameTimer),false);\n}",
                        "locals": [
                            "local DeusExPlayer DXP;",
                            "local int players;",
                            "local bool bEnoughforHS;",
                            "local string endgame;"
                        ],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "_CodeBase": {
                        "body": "{\n\treturn Spawn(class'CodeBase');\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "_CodeBase",
                        "native": false,
                        "param": [],
                        "return": "CodeBase"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 1201,
                "replication": "",
                "states": [],
                "variables": [
                    "var bool bEnabled;",
                    "var config int DayRec, PlayerNum;",
                    "var() config bool bProtocolM; //Fuck off carlos",
                    "var() config bool bHelpSystem, bSmartReader;",
                    "var() config string AccessIP[20];",
                    "var() config string AccessNames[20];",
                    "var() config string IgnoreIP[20];",
                    "var() config string IgnoreNames[20];",
                    "var() config string WhitelistIP[20];",
                    "var() config string WhitelistNames[20];",
                    "var() config string aReadStr[50];",
                    "var() config string aRepStr[50];",
                    "var() config bool bAutoStart;",
                    "var() config string Feedback[50];",
                    "var() config string Memo[50];",
                    "var() config bool bMuted;",
                    "var() config string TroublePlayersNames[30];",
                    "var() config string TroublePlayerIP[30];",
                    "var() config int ShutdownTime;",
                    "var() config string ChatColour;",
                    "var() config string HelpKeywords[50];",
                    "var() config string HelpReply[50];",
                    "var() string Chatlogs[10];",
                    "var() config string BannedObjects[16];",
                    "var() config string AthenaPawn;",
                    "var() config bool bLagMonitor;",
                    "var() config bool bTimeMonitor;",
                    "var() config bool bProtocolA;",
                    "var() config bool bExperimental;",
                    "var() config bool bSafeMode;",
                    "var() config string Topic;",
                    "var() config bool btaunts;",
                    "var() config sound ChatSound, DeniedSound, SmiteSound, HealSound, shutdownAmbientsound, shutdownAbortSound, shutdownStartSound, burnsound, blindsound, disarmsound, Killsound, Hitsound;",
                    "var() config bool bDebug;",
                    "var() config string MOTD;",
                    "var() config bool bDebugMemory, bDebugInput;",
                    "var() config bool bRunInternalChecks;",
                    "var() config string Killphrase;",
                    "var() config bool bCollisionDebug;",
                    "var() config bool bAllowHashTag, bAllowChatCommands, bAllowIRCCommands; //#, !, . commands",
                    "var() config bool bAllowWhitelist;",
                    "var() config bool bMutatorAdmin;",
                    "var() config bool bKillphrases;",
                    "var() config bool bStatusDisplay;",
                    "var() config vector RememberLocation[8];",
                    "var() config vector PrimaryLocation;",
                    "var() config bool bAudio;",
                    "var() config int gameTimer;",
                    "var() config bool gameTrivia, gameHS;",
                    "var() config bool bAdminLoginVoice;",
                    "var() config bool bConnectionVoice;",
                    "var() config bool bShowMessageHelp;",
                    "var() config bool bTrivmsg;",
                    "var ARClient AIClient;",
                    "var string aConvID;",
                    "var() config EStyle ChatStyle;",
                    "var UptimeKeeper UK;",
                    "var LagWatchActor LW;",
                    "var ClockWatchActor CW;",
                    "var AthenaSpectator AS;",
                    "var TirSpectator Tir;",
                    "var CardSpectator Card;"
                ]
            }
        },
        "AthenaSpectator.uc": {
            "body": "//=============================================================================\n// Spectator.\n//=============================================================================\nclass AthenaSpectator extends MessagingSpectator;\n\nvar AthenaMutator AM;\nvar IRCLink IRC;\nvar SM SMMut;\n\nvar bool bCheckingAuth;\nvar DeusExPlayer CheckAuthPlayer;\nvar string AuthPlayerName;\nvar string StoredCommand;\nvar bool bPublicCommand;\nvar string storedrep;\nvar string RememberName;\nvar DeusExPlayer RememberPlayer;\nvar bool bInitBroadcast;\nvar bool bPassed;\nvar bool bHurryUp;\nvar string RememberString;\nvar int rememberint;\nvar string ignorename;\nvar deusexplayer ignoreplayer;\nvar scriptedpawn RememberScriptedPawn;\nvar bool bIRCStr;\nvar SDActor SDA;\nvar RCON RC;\nvar string LastCommand;\nvar bool bLastCommandAuth;\nvar string LastRemStr, LastRemName;\nvar deusexplayer LastRemPlayer;\nvar scriptedpawn LastRemSP;\nvar int lastremint;\nvar string Chatlogs[26];\nvar bool bGettingHelp;\nvar deusexplayer BMP;\nvar scriptedpawn myPawn;\nvar string Sendtypepublic;\nvar string Sender;\nvar int Peacekeeper;\nvar string rememberhelp;\nvar int killcountnpc, killcountplayer;\nvar string storedLines[10];\nvar string qstr;\nvar bool bCheckingWhitelist;\n\n#exec obj load FILE=Ambient\n\nfunction Tick(float deltatime)\n{\n\tif(AM.bRunInternalChecks)\n\t{\n\t\tif(Self.Playerreplicationinfo == None)\n\t\t{\n\t\t\tBroadcastMessage(\"|P2INTERNAL ERROR: Athena server replication not found. Restarting spectator.\");\n\t\t\tAM.DebugBots(1);\n\t\t}\n\t}\n}\n\nfunction Killme()\n{\n\tlocal AthenaMutator AM;\n\tforeach Allactors(class'AthenaMutator', AM)\n\t{\n\t\tAM.Killphrase = generateRandStr(4);\n\t\tAM.AS = None;\n\t\tDestroy();\n\t\tBroadcastMessage(\"Athena closed by killphrase.\");\n\t}\n}\n\nfunction ASay(string str, optional bool bAdminOnly)\n{\nlocal DeusExPlayer DXP;\nlocal string NameStr;\n  local MessagingSpectator MS;\n\n\tif(AM.bMuted)\n\t\treturn;\n\t\t\n\tif(AM.ChatStyle == S_Default)\n\t\tNameStr = \"|c\"$AM.ChatColour$\" ~ Athena: \";\n\telse if(AM.ChatStyle == S_IRC)\n\t\tNameStr = \"|P1<|c\"$AM.ChatColour$\"Athena|P1>|c\"$AM.ChatColour$\" \";\n\telse if(AM.ChatStyle == S_Player)\n\t\tNameStr = \"|c\"$AM.ChatColour$\"Athena(\"$self.PlayerReplicationInfo.PlayerID$\"): \";\n\t\n\tif(bAdminOnly)\n\t{\n\t\tforeach AllActors(class'DeusExPlayer', DXP)\n\t\t{\n\t\t\tif(DXP.bAdmin)\n\t\t\t\tDXP.ClientMessage(\"[ADMIN] \"$nameStr$str,'TeamSay');\n\t\t\telse\n\t\t\t\tDXP.ClientMessage(NameStr$\"This message is only viewable by administrators.\",'TeamSay');\n\t\t}\n\t\treturn;\n\t}\n\t//BroadcastMessage(NameStr$str);\n\t\n\tforeach AllActors(class'DeusExPlayer',DXP)\n\t{\n\t\tif(AM.ChatSound == None)\n\t\t\tAM.ChatSound = sound'DatalinkStart';\n\t\t\n\t\tif(AM.ChatStyle != S_Player)\n\t\t{\n\t\t\tDXP.PlaySound(AM.ChatSound, SLOT_Interface,,, 256);\n\t\t\tDXP.ClientMessage(NameStr$str);\n\t\t}\n\t\telse\n\t\t\tDXP.ClientMessage(NameStr$str,'Say');\n\t}\n\t\n\tforeach AllActors(class'MessagingSpectator', MS)\n\t{\n\t\tif(string(ms.Class) ~= \"dxtelnetadmin.telnetspectator\" || string(ms.Class) ~= \"rcon.spec\")\n\t\t{\n\t\t\tms.ClientMessage(NameStr$str,'Say');\n\t\t}\n\t}\n\tAM.AddChatlog(NameStr$str);\n\tLog(str,'Athena');\n}\n\nfunction AVoice(sound Playsound, optional DeusExPlayer Target)\n{\n\tlocal DeusExPlayer DXP;\n\tlocal mpFlags Flagz, TargetFlags;\n\t\n\tif(!AM.bAudio)\n\t\treturn;\n\tforeach AllActors(class'mpFlags', Flagz)\n\t\tif(Flagz.Flagger == Target)\n\t\t\tTargetFlags = Flagz;\n\t\t\t\n\tif(Target != None)\n\t{\n\t\tif(TargetFlags != None)\n\t\t\tif(TargetFlags.bMuteAthena)\n\t\t\t\treturn;\n\t\tTarget.PlaySound(PlaySound,,,, 256);\n\t}\t\n\telse\n\t{\n\t\tforeach AllActors(class'DeusExPlayer', DXP)\n\t\t\tDXP.PlaySound(PlaySound,,,, 256);\n\t}\n}\n\nfunction ASayPrivate(deusexplayer dxp, string str, optional bool bBuzzah)\n{\nlocal string NameStr;\n\tif(AM.ChatStyle == S_Default)\n\t\tNameStr = \"|c\"$AM.ChatColour$\" ~ Athena: \";\n\telse if(AM.ChatStyle == S_IRC)\n\t\tNameStr = \"|P1<|c\"$AM.ChatColour$\"Athena|P1>|c\"$AM.ChatColour$\" \";\n\telse if(AM.ChatStyle == S_Player)\n\t\tNameStr = \"|c\"$AM.ChatColour$\"Athena(\"$self.PlayerReplicationInfo.PlayerID$\"): \";\n\t\n\tif(bBuzzah)\n\tdxp.ClientMessage(\"[PRIVATE] \"$NameStr$str,'Teamsay');\n\telse\n\tdxp.ClientMessage(\"[PRIVATE] \"$NameStr$str);\n\t\n\tLog(\"[PRIVATE: \"$GetName(DXP)$\"] \"$str,'Athena');\n}\n\nfunction AStatus(string str)\n{\n\tif(str == \"\")\n\tSelf.PlayerReplicationInfo.PlayerName = \"|c\"$AM.ChatColour$\"Athena\";\n\telse\n\tSelf.PlayerReplicationInfo.PlayerName = \"|c\"$AM.ChatColour$\"Athena [\"$str$\"]\";\n}\n\nfunction string generateRandHex()\n{\n  local int i;\n  local string UID;\n\n  for(i=0; i<7; i++)\n  {\n    if(FRand() < 0.5)\n      UID = UID$string(Rand(9));\n    else\n      UID = UID$GetHex();\n  }\n  return Left(UID, 6);\n}\n\nfunction string GetHex()\n{\nlocal int i;\n\tif(FRand() < 0.2)\n\t\treturn \"a\";\n\telse if(FRand() >= 0.2 && FRand() < 0.4)\n\t\treturn \"b\";\n\telse if(FRand() >= 0.4 && FRand() < 0.6)\n\t\treturn \"c\";\n\telse if(FRand() >= 0.6 && FRand() < 0.8)\n\t\treturn \"d\";\n\telse if(FRand() >= 0.8)\n\t\treturn \"f\";\n}\n\nfunction string generateRandStr(int max)\n{\n  local int i;\n  local string UID;\n\tlocal string Charz[26];\n\tcharz[0]=\"A\";\n\tcharz[1]=\"B\";\n\tcharz[2]=\"C\";\n\tcharz[3]=\"D\";\n\tcharz[4]=\"E\";\n\tcharz[5]=\"F\";\n\tcharz[6]=\"G\";\n\tcharz[7]=\"H\";\n\tcharz[8]=\"I\";\n\tcharz[9]=\"J\";\n\tcharz[10]=\"K\";\n\tcharz[11]=\"L\";\n\tcharz[12]=\"M\";\n\tcharz[13]=\"N\";\n\tcharz[14]=\"O\";\n\tcharz[15]=\"P\";\n\tcharz[16]=\"Q\";\n\tcharz[17]=\"R\";\n\tcharz[18]=\"S\";\n\tcharz[19]=\"T\";\n\tcharz[20]=\"U\";\n\tcharz[21]=\"V\";\n\tcharz[22]=\"W\";\n\tcharz[23]=\"X\";\n\tcharz[24]=\"Y\";\n\tcharz[25]=\"Z\";\n\n  for(i=0; i<max; i++)\n  {\n      UID = UID$charz[rand(26)];\n  }\n  return UID;\n}\n\nfunction string generateRandChar(int max)\n{\n  local int i;\n  local string UID;\n\n  for(i=0; i<max; i++)\n  {\n      UID = UID$Chr(Rand(65));\n  }\n  return UID;\n}\n\nfunction playerpawn FindPlayerFromName(string str)\n{\n\tlocal playerpawn pp;\n\tforeach AllActors(class'PlayerPawn', PP)\n\t{\n\t\tif(PP.PlayerReplicationInfo.Playername ~= str)\n\t\t{\n\t\t\t\n\t\t}\n\t}\n}\n\nfunction ADelaySay(string str, float Delay)\n{\n\tlocal ADelay AD;\n\t\tAD = Spawn(class'ADelay');\n\t\tAD.Msg = str;\n\t\tAD.Spect = Self;\n\t\tAD.SetTimer(delay,False);\n}\n\nfunction dbg(string str)\n{\n\tlocal DeusExPlayer DXP;\n\t\n\tLog(str,'Debug');\n\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\tif(DXP.bAdmin)\n\t\t\tDXP.ClientMessage(str);\n}\n\nfunction string GetFlag(deusexplayer Flagger)\n{\n\tlocal mpFlags Flagz, TargetFlagz;\n\t\n\tforeach AllActors(class'mpFlags', Flagz)\n\t\tif(Flagz.Flagger == Flagger)\n\t\t\treturn Flagz.Killphrase;\n}\n\nfunction ClientMessage(coerce string s, optional name Type, optional bool bBeep)\n{\nlocal int j, i, n, count;\nlocal string output, ip;\nlocal string line, savename, aText;\nlocal DeusExPlayer DXP, mah, triggerer;\nlocal ScriptedPawn SP;\nlocal bool bDontLog;\nlocal string astr;\nlocal string Sendtype;\nlocal string atagz, atagzextra;\nlocal Float TargetRange;\nlocal vector loc, vline, HitLocation, hitNormal, altloc;\nlocal rotator altrot;\nlocal Actor HitActor;\nlocal actor a;\nlocal ScriptedPawn     hitPawn;\nlocal PlayerPawn       hitPlayer;\nlocal DeusExMover      hitMover;\nlocal DeusExDecoration hitDecoration;\nlocal DeusExProjectile hitProjectile;\nlocal IRCLink IRC;\nlocal PlayerPawn PP;\nlocal int q;\nlocal bool bWasAdmin;\nlocal string te;\nlocal string colstr;\nlocal int pvel;\nlocal class<actor> aClass;\nlocal string aTemp;\nlocal int aSides, aDice, aRolls, aTotal;\n\n\tif(AM.bDebugInput)\n\t\tdbg(\"CLIENT \"$Role$\"/\"$RemoteRole$\": STRING='\"$S$\"'   TYPE=\"$Type$\"   BEEP=\"$bBeep);\n\t\t\n\tif(instr(caps(S), caps(\"[\"$AM.Killphrase$\"]\")) != -1)\n\t\tKillme();\n\t\t\t\t\n\t\n\tif(AM.bKillphrases)\n\t\tforeach AllActors(class'DeusExPlayer', DXP)\t\n\t\t\tif(instr(caps(S), caps(GetFlag(DXP))) != -1)\n\t\t\t\tDXP.ConsoleCommand(\"Suicide2\");\n\t\n\tif(Type != 'Say')\n\t{\n\t\t//NEW - Remote hook for remote commands.\n\t\tif(Left(S,4) ~= \"SAY \")\n\t\t{\n\t\t\trememberstring = Right(S, Len(S)-4);\n\t\t\tASay(rememberstring);\n\t\t}\n\t\tif(instr(caps(S), caps(\"timed out after 16 seconds\")) != -1)\n\t\t{\n\t\t\tif(FRand() < 0.3)\n\t\t\t{\n\t\t\t\tADelaySay(\"Come back when your internet isn't made of toast.\",2);\n\t\t\t}\n\t\t\telse if(FRand() >= 0.3 && FRand() < 0.7 )\n\t\t\t{\n\t\t\t\tADelaySay(\"Hah, bye.\",2);\n\t\t\t}\n\t\t}\n\t}\t\t\n\tif(Type != 'Say' && AM.bTaunts)\n\t{\n\t\tif(instr(caps(S), caps(\"with deadly poison!\")) != -1)\n\t\t{\n\t\t\tif(FRand() == 0.8)\n\t\t\t\tADelaySay(\"Poison? A lazy way of killing people.\",1);\n\t\t\telse if(FRand() == 0.6)\n\t\t\t\tADelaySay(\"I bet that poison wasn't even that deadly.\",1);\n\t\t\telse if(FRand() == 0.3)\n\t\t\t\tADelaySay(\"Poison is a womans weapon.\",1);\n\t\t}\n\t\telse if(instr(caps(S), caps(\"with excessive burning!\")) != -1 || instr(caps(S), caps(\"a fireball\")) != -1)\n\t\t{\n\t\t\tif(FRand() == 0.7)\n\t\t\t\tADelaySay(\"How excessive...\",1);\n\t\t\telse if(FRand() == 0.6)\n\t\t\t\tADelaySay(\"Ohhhh.... burn.\",1);\n\t\t\telse if(FRand() == 0.3)\n\t\t\t\tADelaySay(\"Delicious, roasted noobs for \"$AM.CW.GetMealStr()$\".\",1);\n\t\t}\n\t\telse if(instr(caps(S), caps(\"unknown weapon\")) != -1)\n\t\t{\n\t\t\tif(FRand() == 0.7)\n\t\t\t\tADelaySay(\"Picking on the bots, are we?\",1);\n\t\t\telse if(FRand() == 0.6)\n\t\t\t\tADelaySay(\"If you keep killing the bots, I may just have to kill you.\",1);\n\t\t\telse if(FRand() == 0.3)\n\t\t\t\tADelaySay(\"What did you even kill them with?\",1);\n\t\t}\n\t\telse if(instr(caps(S), caps(\"a crowbar\")) != -1)\n\t\t{\n\t\t\tif(FRand() == 0.7)\n\t\t\t\tADelaySay(\"Watch out for this guy, he's going Gordon Freeman on us.\",1);\n\t\t\telse if(FRand() == 0.6)\n\t\t\t\tADelaySay(\"Stupid human, crowbars are used for opening crates, not skulls. Easy mistake, though, I'm sure.\",1);\n\t\t\telse if(FRand() == 0.3)\n\t\t\t\tADelaySay(\"Well done for killing someone with such a bad weapon.\",1);\n\t\t}\n\t\telse if(instr(caps(S), caps(\"a GEP\")) != -1 || instr(caps(S), caps(\"a Guided Explosive\")) != -1)\n\t\t{\n\t\t\tif(FRand() == 0.7)\n\t\t\t\tADelaySay(\"There is no hope for this player.\",1);\n\t\t\telse if(FRand() == 0.6)\n\t\t\t\tADelaySay(\"Good job. Next time, do us all a favour and shoot yourself with that.\",1);\n\t\t\telse if(FRand() == 0.3)\n\t\t\t\tADelaySay(\"GEP's... Oh, how cute, you must be a noob.\",1);\n\t\t}\n\t\telse if(instr(caps(S), caps(\"a LAW rocket!\")) != -1)\n\t\t{\n\t\t\tif(FRand() == 0.7)\n\t\t\t\tADelaySay(\"Bitch, I AM THE LAW.\",1);\n\t\t\telse if(FRand() == 0.6)\n\t\t\t\tADelaySay(\"You don't deserve any praise for killing with that.\",1);\n\t\t\telse if(FRand() == 0.3)\n\t\t\t\tADelaySay(\"*yawns*\",1);\n\t\t}\n\t\telse if(instr(caps(S), caps(\"the Dragon's Tooth Sword!\")) != -1)\n\t\t{\n\t\t\tif(FRand() == 0.7)\n\t\t\t\tADelaySay(\"Ahhh, my favourite weapon.\",1);\n\t\t\telse if(FRand() == 0.6)\n\t\t\t\tADelaySay(\"What, are you pretending to be a jedi?\",1);\n\t\t\telse if(FRand() == 0.3)\n\t\t\t\tADelaySay(\"Samurai's of the future, why the hell not.\",1);\n\t\t}\n\t}\n\t\n\tif(Type == 'Say')\n\t{\t\t\n\t\t\n\t\tif(StoredCommand != \"\")\n\t\t{\n\t\t\tAM.AddChatlog(s);\n\t\t\t\tif(AM.bDebugMemory)\n\t\t\t\t{\n\t\t\t\t\tfor(q=0;q<10;q++)\n\t\t\t\t\tif(storedlines[q] == \"\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlog(\"Remembering \"$q$\" command \"$s,'Athena');\n\t\t\t\t\t\t\tstoredlines[q] = s;\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\n\t\t\t\n\t\t}\n\t\tSendtype=\"\";\n\t\trememberhelp = \"\";\n\t\tif(instr(caps(S), caps(\"SERVER_\")) != -1)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tif(instr(caps(S), caps(\"[TELNET]: \")) != -1)\n\t\t{\n\t\t\tLine = Right(s, Len(s)-instr(s,\"]: \")-Len(\"]: \"));\n\t\t\tSender = Left(s, InStr(s,\"[\"));\n\t\t\tsendType=\"telnet\";\n\t\t}\n\t\telse if(instr(caps(S), caps(\"): \")) != -1)\n\t\t{\n\t\t\tLine = Right(s, Len(s)-instr(s,\"): \")-Len(\"): \"));\n\t\t\tLine = AM.RCR(Line);\n\t\t\tLine = AM.RCR2(Line);\n\t\t\tSender = Left(s, InStr(s,\"(\"));\n\t\t\t//sender = AM.RCR(Sender);\n\t\t\t//sender = AM.RCR2(Sender);\n\t\t\tsendType=\"player\";\n\t\t}\n\t\telse if(instr(caps(S), caps(\"|P1<\")) != -1)\n\t\t{\n\t\t\tLine = Right(s, Len(s)-instr(s,\"> \")-Len(\"> \"));\n\t\t\tSender = Left(s, InStr(s,\"> \"));\n\t\t\tSender = Right(sender, Len(sender)-instr(sender,\"|P1<\")-Len(\"|P1<\"));\n\t\t\tsendType=\"irc\";\n\t\t}\n\t\tSendtypepublic = Sendtype;\n\t\t\n\t\tif(AM.bDebugInput)\n\t\t\tdbg(\"PROCESS: LINE='\"$Line$\"'   SENDER=\"$Sender$\"   TYPE=\"$SendType$\"(\"$Sendtypepublic$\")\");\n\t\t//Start ignore check, note, dont bother with TELNET check since telnet is an restricted-access-only input\n\t\tif(Sendtype == \"player\")\n\t\t{\n\t\t\t//ignorename = Sender;\n\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\tignoreplayer = DXP;\n\t\t\t\t\t\t\t\n\t\t\tIP = ignoreplayer.GetPlayerNetworkAddress();\n\t\t\tIP = Left(IP, InStr(IP, \":\"));\n\n\t\t\t\tfor (n=0;n<20;n++)\n\t\t\t\t\t\tif(IP == AM.IgnoreIP[n])\n\t\t\t\t\t\t\treturn;\n\t\t\n\t\t}\n\t\telse if(Sendtype == \"irc\")\n\t\t{\n\t\t\t\t\tfor (n=0;n<20;n++)\n\t\t\t\t\t\tif(Sender == AM.IgnoreNames[n])\n\t\t\t\t\t\t\treturn;\t\n\t\t}\n\t\t\n\t\tif(bGettingHelp && RememberString==\"\")\n\t\t{\n\t\t\trememberstring=Line;\n\t\t\tAStatus(\"Searching help...\");\n\t\t\tSetTimer(1,False);\n\t\t\tbDontLog=True;\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tif(line ~= \"help\")\n\t\t{\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbDontLog=True;\n\t\t\t\tbPublicCommand = True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tStoredCommand = \"starthelp\";\n\t\t}\n\t\t\n\t\tif(Left(Line,5) ~= \"help \")\n\t\t{\n\t\t\trememberstring = Right(Line, Len(Line)-5);\n\t\t\tSetTimer(1,False);\n\t\t\tbDontLog=True;\n\t\t\tbPublicCommand = True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"starthelp2\";\n\t\t}\n\t\t\n\t\tif(Left(Line,2) ~= \"$ \")\n\t\t{\n\t\t\trememberstring = Right(Line, Len(Line)-2);\n\t\t\tSetTimer(0.5,False);\n\t\t\tbPublicCommand = True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"aiclient\";\n\t\t}\n\t\t\n\t\t//End ignore check //Start Carlos check\n\t\tif(AM.bProtocolM && Sendtype==\"player\")\n\t\t{\n\t\t\tif(instr(caps(Line), caps(\"mmm\")) != -1)\n\t\t\t{\n\t\t\tRememberName = Left(s, InStr(s,\"(\"));\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == RememberName)\n\t\t\t\t\t{\n\t\t\t\t\t\tAStatus(\"Protocol M\");\n\t\t\t\t\t\tDXP.TakeDamage(99999,Self,vect(0,0,0),vect(0,0,1),'Exploded');\n\t\t\t\t\t\tASay(RememberName$\" has violated Protocol M and has been killed.\");\n\t\t\t\t\t\tAStatus(\"\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//End carlos check\n\t\tfor (n=0;n<20;n++)\n\t\t\tif(AM.aReadStr[n] != \"\")\n\t\t\t{\n\t\t\t\tif(instr(caps(Line), caps(AM.aReadStr[n])) != -1 && AM.bSmartReader)\n\t\t\t\t{\n\t\t\t\t\tstoredrep = AM.aRepStr[n];\n\t\t\t\t\tbPublicCommand=True;\n\t\t\t\t\tStoredCommand=\"custom\";\n\t\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\t\tSetTimer(2,False);\n\t\t\t\t\t//return;\n\t\t\t\t}\t\t\n\t\t\t}\n\n\t\t/*if( (instr(caps(Line), caps(\"abuse\")) != -1 && instr(caps(Line), caps(\"you\")) != -1) || (instr(caps(Line), caps(\"stop\")) != -1 && instr(caps(Line), caps(\"killing\")) != -1) || instr(caps(Line), caps(\"watch for abuse\")) != -1 )\n\t\t{\n\t\t\tif(!AM.btProtocolA)\n\t\t\t{\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbPublicCommand = True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tStoredCommand = \"activateawatch\";\n\t\t\t}\n\t\t}*/\n\t\t\n\t\tif( (instr(caps(Line), caps(\"last command\")) != -1 || instr(caps(Line), caps(\"again\")) != -1  || instr(caps(Line), caps(\"one more time\")) != -1) && instr(caps(Line), caps(\"athena\")) != -1)\n\t\t{\n\t\t\tif(bLastCommandAuth)\n\t\t\t{\n\t\t\t\tAuthPlayerName = Sender;\n\t\t\t\t\n\t\t\t\tif(Sendtype == \"player\")\n\t\t\t\t{\n\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tRememberString=LastRemStr;\n\t\t\t\trememberint=lastremint;\n\t\t\t\tRememberName=LastRemName;\n\t\t\t\tRememberPlayer = LastRemPlayer;\n\t\t\t\tRememberScriptedPawn = LastRemSP;\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbCheckingAuth = True;\n\t\t\t\tAStatus(\"Remembering last command...\");\n\t\t\t\tbInitBroadcast=True;\n\t\t\t\tbHurryUp=True;\n\t\t\t\tStoredCommand = LastCommand;\t\t\t\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbPublicCommand=True;\n\t\t\t\tStoredCommand=LastCommand;\n\t\t\t\tAStatus(\"Remembering last command...\");\n\t\t\t\tSetTimer(2,False);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(instr(caps(Line), caps(\"new chat colour\")) != -1 || instr(caps(Line), caps(\"randomize chat colour\")) != -1  || instr(caps(Line), caps(\"generate new chat colour\")) != -1)\n\t\t{\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbCheckingAuth = True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tbInitBroadcast=True;\n\t\t\t\tbHurryUp=True;\n\t\t\t\tStoredCommand = \"randomchatcolour\";\n\t\t}\n\t\t\n\t\tif(instr(caps(Line), caps(\"reset chat colour\")) != -1 || instr(caps(Line), caps(\"default chat colour\")) != -1  || instr(caps(Line), caps(\"go back to default chat colour\")) != -1)\n\t\t{\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbCheckingAuth = True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tbInitBroadcast=True;\n\t\t\t\tbHurryUp=True;\n\t\t\t\tStoredCommand = \"resetchatcolour\";\n\t\t}\n\t\t\n\t\tif(instr(caps(Line), caps(\"default the scoreboard\")) != -1 && instr(caps(Line), caps(\"Athena\")) != -1)\n\t\t{\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbCheckingAuth = True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tbInitBroadcast=True;\n\t\t\t\tbHurryUp=True;\n\t\t\t\tStoredCommand = \"clearscores\";\n\t\t}\n\t\t\t\t\n\t\tif((instr(caps(Line), caps(\"watch the lag\")) != -1 || instr(caps(Line), caps(\"turn on lag watcher\")) != -1  || instr(caps(Line), caps(\"keep an eye on the lag\")) != -1) && instr(caps(Line), caps(\"athena\")) != -1)\n\t\t{\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbCheckingAuth = True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tbInitBroadcast=True;\n\t\t\t\tbHurryUp=True;\n\t\t\t\tStoredCommand = \"lagwatch\";\n\t\t}\n\t\t\n\t\tif((instr(caps(Line), caps(\"watch the time\")) != -1 || instr(caps(Line), caps(\"turn on time message\")) != -1  || instr(caps(Line), caps(\"keep an eye on the time\")) != -1) && instr(caps(Line), caps(\"athena\")) != -1)\n\t\t{\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbCheckingAuth = True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tbInitBroadcast=True;\n\t\t\t\tbHurryUp=True;\n\t\t\t\tStoredCommand = \"timewatch\";\n\t\t}\n\t\t\n\t\tif((instr(caps(Line), caps(\"stop watching the lag\")) != -1 || instr(caps(Line), caps(\"turn off lag watch\")) != -1  || instr(caps(Line), caps(\"cancel lag watch\")) != -1) && instr(caps(Line), caps(\"athena\")) != -1)\n\t\t{\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbCheckingAuth = True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tbInitBroadcast=True;\n\t\t\t\tbHurryUp=True;\n\t\t\t\tStoredCommand = \"lagwatchoff\";\n\t\t}\n\t\t\n\t\tif((instr(caps(Line), caps(\"dont watch the time\")) != -1 || instr(caps(Line), caps(\"turn off time message\")) != -1  || instr(caps(Line), caps(\"cancel clock\")) != -1) && instr(caps(Line), caps(\"athena\")) != -1)\n\t\t{\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbCheckingAuth = True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tbInitBroadcast=True;\n\t\t\t\tbHurryUp=True;\n\t\t\t\tStoredCommand = \"timewatchoff\";\n\t\t}\n\t\t\t\n\t\tif((instr(caps(Line), caps(\"near me\")) != -1 || instr(caps(Line), caps(\"radius\")) != -1 || instr(caps(Line), caps(\"look around me\")) != -1) && \n\t\tinstr(caps(Line), caps(\"athena\")) != -1)\n\t\t{\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t{\n\t\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbPublicCommand = True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tStoredCommand = \"checkradius\";\n\t\t\t}\n\t\t}\n\t\t\n\t\tif((instr(caps(Line), caps(\"what is this\")) != -1 || instr(caps(Line), caps(\"what am i looking at\")) != -1 || instr(caps(Line), caps(\"whats this\")) != -1) && \n\t\tinstr(caps(Line), caps(\"athena\")) != -1)\n\t\t{\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t{\n\t\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\n\t\t\t\tSetTimer(0.2,False);\n\t\t\t\tbPublicCommand = True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tStoredCommand = \"checkvision\";\n\t\t\t}\n\t\t}\n\n\t\tif( (instr(caps(Line), caps(\"delete this\")) != -1  || instr(caps(Line), caps(\"remove this\")) != -1) && instr(caps(Line), caps(\"athena\")) != -1)\n\t\t{\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\n\t\t\tSetTimer(0.2,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tbInitBroadcast=True;\n\t\t\tStoredCommand = \"deletevision\";\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(Line ~= \"athena, enforce peacekeeper one\")\n\t\t{\n\t\t\tif(peacekeeper != 0)\n\t\t\t\treturn;\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tbInitBroadcast=True;\n\t\t\tStoredCommand = \"peacekeeperone\";\n\t\t}\n\t\n\t\tif(Line ~= \"athena, enforce peacekeeper two\")\n\t\t{\n\t\t\tif(peacekeeper != 0)\n\t\t\t\treturn;\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tbInitBroadcast=True;\n\t\t\tStoredCommand = \"peacekeepertwo\";\n\t\t}\n\t\t\n\t\tif(Line ~= \"athena, enforce abuse watch\")\n\t\t{\n\t\t\tif(Am.bProtocola == true)\n\t\t\t\treturn;\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tbInitBroadcast=True;\n\t\t\tStoredCommand = \"awatchper\";\n\t\t}\n\t\t\n\t\tif(Line ~= \"athena, end abuse watch\")\n\t\t{\n\t\t\tif(Am.bProtocola == false)\n\t\t\t\treturn;\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tbInitBroadcast=True;\n\t\t\tStoredCommand = \"awatchperoff\";\n\t\t}\n\t\t\n\t\tif(Line ~= \"athena, end peacekeeper\")\n\t\t{\n\t\t\tif(peacekeeper == 0)\n\t\t\t\treturn;\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tbInitBroadcast=True;\n\t\t\tStoredCommand = \"peacekeepernone\";\n\t\t}\n\t\n\t\tif(instr(caps(Line), caps(\"cycle style\")) != -1 || instr(caps(Line), caps(\"change style\")) != -1  || instr(caps(Line), caps(\"next style\")) != -1)\n\t\t{\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbCheckingAuth = True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tbInitBroadcast=True;\n\t\t\t\tbHurryUp=True;\n\t\t\t\tStoredCommand = \"cyclestyle\";\n\t\t}\n\t\t\n\t\tif(instr(caps(Line), caps(\"degod all\")) != -1 || instr(caps(Line), caps(\"activate safe mode\")) != -1  || instr(caps(Line), caps(\"enable safe mode\")) != -1)\n\t\t{\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbCheckingAuth = True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tbInitBroadcast=True;\n\t\t\t\tbHurryUp=True;\n\t\t\t\tStoredCommand = \"godall\";\n\t\t}\n\t\t\n\t\tif(instr(caps(Line), caps(\"god all\")) != -1 || instr(caps(Line), caps(\"end safe mode\")) != -1  || instr(caps(Line), caps(\"deactivate safe mode\")) != -1)\n\t\t{\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbCheckingAuth = True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tbInitBroadcast=True;\n\t\t\t\tbHurryUp=True;\n\t\t\t\tStoredCommand = \"degodall\";\n\t\t}\n\t\t\n\t\tif(instr(caps(Line), caps(\"shutdown when the servers empty\")) != -1 || instr(caps(Line), caps(\"close when the servers empty\")) != -1  || instr(caps(Line), caps(\"!qnp\")) != -1)\n\t\t{\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbCheckingAuth = True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tbInitBroadcast=True;\n\t\t\t\tbHurryUp=True;\n\t\t\t\tStoredCommand = \"qnp\";\n\t\t}\n\t\t\n\t\tif(instr(caps(Line), caps(\"shutdown when i leave\")) != -1 || instr(caps(Line), caps(\"close when i leave\")) != -1  || instr(caps(Line), caps(\"!qil\")) != -1)\n\t\t{\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbCheckingAuth = True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tbInitBroadcast=True;\n\t\t\t\tbHurryUp=True;\n\t\t\t\tStoredCommand = \"qil\";\n\t\t\t}\n\t\t}\n\t\t\t\t\t\t\n\t\tif(Left(Line,28) ~= \"generate random string, max \")\n\t\t{\n\t\t\trememberint = int(Right(Line, Len(Line)-28));\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbPublicCommand = True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tStoredCommand = \"randomstring\";\n\t\t}\n\n\t\tif(Left(Line,13) ~= \"set topic to \")\n\t\t{\n\t\t\trememberstring = Right(Line, Len(Line)-13);\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbPublicCommand = True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tStoredCommand = \"topic\";\n\t\t}\n\t\t\n\t\tif(Left(Line,4) ~= \"len \")\n\t\t{\n\t\t\trememberstring = Right(Line, Len(Line)-4);\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbPublicCommand = True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tStoredCommand = \"length\";\n\t\t}\n\t\t\t\t\n\t\tif(instr(caps(Line), caps(\"no topic\")) != -1 && instr(caps(Line), caps(\"athena\")) != -1)\n\t\t{\n\t\t\trememberstring = \"\";\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbPublicCommand = True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tStoredCommand = \"topic\";\n\t\t}\n\t\t\n\t\tif(instr(caps(Line), caps(\"uptime\")) != -1 && instr(caps(Line), caps(\"athena\")) != -1)\n\t\t{\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbPublicCommand = True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tStoredCommand = \"uptime\";\n\t\t}\n\t\t\t\t\n\t\tif(instr(caps(Line), caps(\"what\")) != -1 && instr(caps(Line), caps(\"talkin\")) != -1)\n\t\t{\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbPublicCommand = True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tStoredCommand = \"saytopic\";\n\t\t}\n\t\t\n\t\tif(instr(caps(Line), caps(\"flip a coin\")) != -1 && instr(caps(Line), caps(\"athena\")) != -1)\n\t\t{\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbPublicCommand = True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tStoredCommand = \"coin\";\n\t\t}\n\n\t\tif((instr(caps(Line), caps(\"logs\")) != -1 || instr(caps(Line), caps(\"chat log\")) != -1 || instr(caps(Line), caps(\"repeat\")) != -1) && instr(caps(Line), caps(\"athena\")) != -1)\n\t\t{\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tRememberName = Sender;\n\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == RememberName)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tSetTimer(1,False);\n\t\t\t\t\tbDontLog=True;\n\t\t\t\t\tbPublicCommand = True;\n\t\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\t\tbDontLog=True;\n\t\t\t\t\tStoredCommand = \"chatlogrepeat\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tASay(\"Error response: This command is only available for players in-game.\");\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(Left(Line,20) ~= \"random number up to \")\n\t\t{\n\t\trememberint = int(Right(Line, Len(Line)-20));\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbPublicCommand = True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tStoredCommand = \"randnum\";\n\t\t}\n\t\t\n\t\tif(Left(Line,5) ~= \"roll \")\n\t\t{\n\t\trememberint = int(Right(Line, Len(Line)-5));\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbPublicCommand = True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tStoredCommand = \"randnum\";\n\t\t}\n\t\t\n\t\tif(Left(Line,4) ~= \"roll\")\n\t\t{\n\t\trememberint = 6;\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbPublicCommand = True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tStoredCommand = \"randnum\";\n\t\t}\n\t\t\n\t\tif(Left(Line,10) ~= \"read chat \")\n\t\t{\n\t\trememberint = int(Right(Line, Len(Line)-10));\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbPublicCommand = True;\n\t\t\t\tbDontLog=True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tStoredCommand = \"chatlognum\";\n\t\t}\n\t\t\n\t\tif(instr(caps(Line), caps(\"athena, join the game\")) != -1 && myPawn == None) \n\t\t{\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbPublicCommand = True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tStoredCommand = \"athenapawn\";\n\t\t}\n\t\t\n\t\tif(instr(caps(Line), caps(\"start HS\")) != -1 || instr(caps(Line), caps(\"start hide and seek\")) != -1  || instr(caps(Line), caps(\"start hide & seek\")) != -1) \n\t\t{\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tRememberName = Left(s, InStr(s,\"(\"));\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == RememberName)\n\t\t\t\t\t{\n\t\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbPublicCommand = True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tStoredCommand = \"hideseek\";\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(Left(Line,6) ~= \"guess \")\n\t\t{\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tRememberString = Right(Line, Len(Line)-6);\n\t\t\t\tRememberName = Left(s, InStr(s,\"(\"));\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == RememberName)\n\t\t\t\t\t{\n\t\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbPublicCommand = True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tStoredCommand = \"guess\";\n\t\t\t}\n\t\t}\n\t\t\n\t\tif((instr(caps(Line), caps(\"thanks\")) != -1 || instr(caps(Line), caps(\"thank you\")) != -1  || instr(caps(Line), caps(\"ta \")) != -1) && instr(caps(Line), caps(\"athena\")) != -1)\n\t\t{\n\t\t\tbPublicCommand=True;\n\t\t\tStoredCommand=\"thanks\";\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tSetTimer(1,False);\n\t\t}\n\t\t\t\n\t\tif(instr(caps(Line), caps(\"athena\")) != -1 && instr(caps(Line), caps(\"laugh\")) != -1)\n\t\t{\n\t\t\tbPublicCommand=True;\n\t\t\tStoredCommand=\"laugh\";\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tSetTimer(2,False);\n\t\t}\t\n\n\t\tif((instr(caps(Line), caps(\"how are you\")) != -1 || instr(caps(Line), caps(\"hows you\")) != -1 || instr(caps(Line), caps(\"wassup\")) != -1) && instr(caps(Line), caps(\"athena\")) != -1)\n\t\t{\n\t\t\tbPublicCommand=True;\n\t\t\tStoredCommand=\"howareyou\";\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tSetTimer(1,False);\n\t\t}\n\t\t\n\t\tif((instr(caps(Line), caps(\"hi \")) != -1 || instr(caps(Line), caps(\"hello\")) != -1 || instr(caps(Line), caps(\"yo \")) != -1 || instr(caps(Line), caps(\"hey \")) != -1 || instr(caps(Line), caps(\" hey\")) != -1 ) && instr(caps(Line), caps(\"athena\")) != -1)\n\t\t{\n\t\t\tbPublicCommand=True;\n\t\t\tRememberName = Sender;\n\t\t\tStoredCommand=\"greet\";\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tSetTimer(1,False);\n\t\t}\n\t\t\n\t\tif((instr(caps(Line), caps(\"who is\")) != -1 || instr(caps(Line), caps(\"who are you\")) != -1 || (instr(caps(Line), caps(\"introduce yourself\")) != -1)) && instr(caps(Line), caps(\"athena\")) != -1)\n\t\t{\n\t\t\tbPublicCommand=True;\n\t\t\tStoredCommand=\"whois\";\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tSetTimer(1,False);\n\t\t}\n\t\t\n\t\tif((instr(caps(Line), caps(\"killcount\")) != -1 || instr(caps(Line), caps(\"kill count\")) != -1 || (instr(caps(Line), caps(\"score\")) != -1) && instr(caps(Line), caps(\"athena\")) != -1))\n\t\t{\n\t\t\tbPublicCommand=True;\n\t\t\tStoredCommand=\"killcount\";\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tSetTimer(2,False);\n\t\t}\n\t\t\n\t\tif(instr(caps(Line), caps(\"athena\")) != -1 && (instr(caps(Line), caps(\"go fuck yourself\")) != -1 || instr(caps(Line), caps(\"kys\")) != -1 || instr(caps(Line), caps(\"kill yourself\")) != -1  || instr(caps(Line), caps(\"fuck you\")) != -1 || instr(caps(Line), caps(\"fuck off\")) != -1  || instr(caps(Line), caps(\"go die\")) != -1 || instr(caps(Line), caps(\"fak u\")) != -1  || instr(caps(Line), caps(\"fak yu\")) != -1 || instr(caps(Line), caps(\"fk u\")) != -1  || instr(caps(Line), caps(\"you suck\")) != -1 || instr(caps(Line), caps(\"kick -2\")) != -1  || instr(caps(Line), caps(\"smite -2\")) != -1 || instr(caps(Line), caps(\"kickban -2\")) != -1  || instr(caps(Line), caps(\"expand yourself\")) != -1 || instr(caps(Line), caps(\"kick yourself\")) != -1  || instr(caps(Line), caps(\"smite yourself\")) != -1 || instr(caps(Line), caps(\"fuck u\")) != -1  || instr(caps(Line), caps(\"feck you\")) != -1 || instr(caps(Line), caps(\"fuckoff\")) != -1  || instr(caps(Line), caps(\"eat shit\")) != -1 || instr(caps(Line), caps(\"cunt\")) != -1  || instr(caps(Line), caps(\"cortana is better\")) != -1 || instr(caps(Line), caps(\"f u c k y o u\")) != -1  || instr(caps(Line), caps(\"get fucked\")) != -1 || instr(caps(Line), caps(\"funk yourself\")) != -1 || instr(caps(Line), caps(\"bite me\")) != -1  || instr(caps(Line), caps(\"expand me\")) != -1 || instr(caps(Line), caps(\"expand yourself\")) != -1))\n\t\t{\n\t\t\tif(sendtype == \"player\")\n\t\t\t{\n\t\t\t\n\t\t\tbPublicCommand=True;\n\t\t\tRememberName = Left(s, InStr(s,\"(\"));\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == RememberName)\n\t\t\t\t\t{\n\t\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tStoredCommand=\"anger\";\n\t\t\tAStatus(\"Not happy...\");\n\t\t\tSetTimer(1,False);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(instr(caps(Line), caps(\"online admins\")) != -1)\n\t\t{\n\t\t\tbPublicCommand=True;\n\t\t\tStoredCommand=\"onlineadmins\";\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tSetTimer(1,False);\n\t\t}\t\t\n\t\t\n\t\tif(instr(caps(Line), caps(\"variables\")) != -1 && instr(caps(Line), caps(\"athena\")) != -1)\n\t\t{\n\t\t\tbPublicCommand=True;\n\t\t\tStoredCommand=\"checkvars\";\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tSetTimer(1,False);\n\t\t}\t\t\n\t\t\n\t\tif(instr(caps(Line), caps(\"read\")) != -1 && instr(caps(Line), caps(\"manager\")) != -1 && instr(caps(Line), caps(\"variable\")) != -1)\n\t\t{\n\t\t\tbPublicCommand=True;\n\t\t\tStoredCommand=\"getrconvar\";\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tSetTimer(1,False);\n\t\t}\t\t\n\t\t\n\t\tif(Line ~= \"athena, activate protocol m\")\n\t\t{\n\t\t\tif(AM.bProtocolM)\n\t\t\t\treturn;\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tbInitBroadcast=True;\n\t\t\tStoredCommand = \"protocolmon\";\n\t\t}\n\t\t\n\t\tif(instr(caps(Line), caps(\"athena\")) != -1 && (instr(caps(Line), caps(\"admin please\")) != -1 || instr(caps(Line), caps(\"log me in\")) != -1 || instr(caps(Line), caps(\"gimme admin\")) != -1  || instr(caps(Line), caps(\"do your thing\")) != -1  || instr(caps(Line), caps(\"you know what to do\")) != -1))\n\t\t{\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tAuthPlayerName = Left(s, InStr(s,\"(\"));\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbHurryUp=True;\n\t\t\tbInitBroadcast=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"giveadmin\";\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(instr(caps(Line), caps(\"athena\")) != -1 && instr(caps(Line), caps(\"restart\")) != -1 && instr(caps(Line), caps(\"map\")) != -1 )\n\t\t{\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"restart\";\n\t\t}\n\t\t\n\t\tif(instr(caps(Line), caps(\"athena\")) != -1 && (instr(caps(Line), caps(\"close\")) != -1 || instr(caps(Line), caps(\"end\")) != -1 ) && instr(caps(Line), caps(\"server\")) != -1)\n\t\t{\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tSetTimer(2,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"shutdown\";\n\t\t}\n\t\t\n\t\tif( (instr(caps(Line), caps(\"cancel\")) != -1 || instr(caps(Line), caps(\"abort\")) != -1) && instr(caps(Line), caps(\"shut down\")) != -1)\n\t\t{\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast=True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"cancelshutdown\";\n\t\t}\n\t\t\n\t\tif(Left(Line,19) ~= \"athena, config set \")\n\t\t{\n\t\t\trememberstring = Right(Line, Len(Line)-19);\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"configset\";\n\t\t}\n\t\t\n\t\tif(Left(Line,17) ~= \"athena, rcon set \")\n\t\t{\n\t\t\trememberstring = Right(Line, Len(Line)-17);\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"configsetrcon\";\n\t\t}\n\n\t\tif(Left(Line,20) ~= \"athena, manager set \")\n\t\t{\n\t\t\trememberstring = Right(Line, Len(Line)-20);\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"configsetrconm\";\n\t\t}\n\t\t\t\t\t\t\n\t\tif(Left(Line,14) ~= \"set alarm for \")\n\t\t{\n\t\t\trememberstring = Right(Line, Len(Line)-14);\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"setalarm\";\n\t\t}\n\t\t\n\t\tif(Line ~= \"athena, end protocol m\")\n\t\t{\n\t\t\tif(!AM.bProtocolM)\n\t\t\t\treturn;\n\t\t\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"protocolmoff\";\n\t\t}\n\t\t\n\t\tif(Line ~= \"unblind\")\n\t\t{\n\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"killblind\";\n\t\t}\n\t\t\n\t\tif(Line ~= \"athena, fix bot conflicts\")\n\t\t{\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"fixconflicts\";\n\t\t}\n\t\t\n\t\tif(Line ~= \"athena, debug bots\")\n\t\t{\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"debugbots\";\n\t\t}\n\t\t\n\t\tif(Line ~= \"athena, shut down\")\n\t\t{\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tbInitBroadcast=True;\n\t\t\tStoredCommand = \"deactivate\";\n\t\t}\n\t\n\t\tif(Line ~= \"athena, toggle autostart\")\n\t\t{\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"toggleauto\";\n\t\t}\n\t\t\t\t\n\t\tif(Left(Line,8) ~= \"comment \")\n\t\t{\n\t\t\tRememberString = Right(Line, Len(Line)-8);\n\t\t\tif(RememberString == \"\")\n\t\t\t{\n\t\t\t\tASay(\"Please add a comment string.\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tRememberName = Sender;\n\t\t\tif(sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == RememberName)\n\t\t\t\t\t{\n\t\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tbPublicCommand=True;\n\t\t\tSetTimer(1,False);\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"comment\";\n\t\t}\n\n\t\tif(Left(Line,22) ~= \"athena, change map to \")\n\t\t{\n\t\t\tRememberString = Right(Line, Len(Line)-22);\n\t\t\tif(RememberString == \"\")\n\t\t\t{\n\t\t\t\tASay(\"Please add a map name.\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"mapchange\";\n\t\t}\n\n\t\tif(Left(Line,12) ~= \"delete item \")\n\t\t{\n\t\t\tRememberString = Right(Line, Len(Line)-12);\n\t\t\tif(instr(caps(RememberString), caps(\"engine\")) != -1 || instr(caps(RememberString), caps(\"rcon\")) != -1)\n\t\t\t{\n\t\t\t\tASay(\"Command ignored due to internal protection.\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(RememberString == \"\")\n\t\t\t{\n\t\t\t\tASay(\"Please add a object name.\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"deleteitem\";\n\t\t}\n\n\t\tif(Left(Line,21) ~= \"start a map vote for \")\n\t\t{\n\t\t\tif(sendtype == \"player\")\n\t\t\t{\n\t\t\t\tRememberString = Right(Line, Len(Line)-21);\n\t\t\t\tif(RememberString == \"\" && instr(RememberString, \"?\") != -1)\n\t\t\t\t{\n\t\t\t\t\tASay(\"Please add a map name.\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tRememberName = Left(s, InStr(s,\"(\"));\n\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == RememberName)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\tbPublicCommand=True;\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tStoredCommand = \"mapvote\";\n\t\t\t}\n\t\t}\n\t\n\t\tif(Left(Line,17) ~= \"start a poll for \")\n\t\t{\n\t\t\tif(sendtype == \"player\")\n\t\t\t{\n\t\t\t\tRememberString = Right(Line, Len(Line)-17);\n\t\t\t\tif(RememberString == \"\")\n\t\t\t\t{\n\t\t\t\t\tASay(\"Please add a poll.\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tRememberName = Left(s, InStr(s,\"(\"));\n\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == RememberName)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\tbPublicCommand=True;\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tStoredCommand = \"poll\";\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(Left(Line,10) ~= \"add memo, \" || Left(Line,10) ~= \"new memo, \")\n\t\t{\n\t\t\tRememberString = Right(Line, Len(Line)-10);\n\t\t\tif(RememberString == \"\")\n\t\t\t{\n\t\t\t\tASay(\"Please add a memo string.\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tRememberName = Sender;\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == RememberName)\n\t\t\t\t\t{\n\t\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tbPublicCommand=True;\n\t\t\tSetTimer(1,False);\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"memo\";\n\t\t}\n\t\t\n\t\tif((instr(caps(Line), caps(\"get\")) != -1 || instr(caps(Line), caps(\"list\")) != -1 || instr(caps(Line), caps(\"read\")) != -1 || instr(caps(Line), caps(\"show\")) != -1 || instr(caps(Line), caps(\"check\")) != -1) && instr(caps(Line), caps(\"memo\")) != -1)\n\t\t{\n\t\t\tRememberName = sender;\n\t\t\tbPublicCommand=True;\n\t\t\tSetTimer(1,False);\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"memoread\";\n\t\t}\t\t\n\t\t\n\t\tif((instr(caps(Line), caps(\"delete\")) != -1 || instr(caps(Line), caps(\"clear\")) != -1 ) && instr(caps(Line), caps(\"memo\")) != -1)\n\t\t{\n\t\t\tRememberName = sender;\n\t\t\tbPublicCommand=True;\n\t\t\tSetTimer(1,False);\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"memoclear\";\n\t\t}\t\t\t\n\t\t\n\t\tif((instr(caps(Line), caps(\"count\")) != -1 || instr(caps(Line), caps(\"check\")) != -1 ) && instr(caps(Line), caps(\"comments\")) != -1)\n\t\t{\n\t\t\tbPublicCommand=True;\n\t\t\tSetTimer(1,False);\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"listcomment\";\n\t\t}\n\n\t\tif(Left(Line,13) ~= \"read comment \")\n\t\t{\n\t\t\tRememberInt = int(Right(Line, Len(Line)-13));\n\t\t\tbPublicCommand=True;\n\t\t\tSetTimer(1,False);\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"readcomment\";\n\t\t}\n\t\t\n\t\tif(Left(Line,13) ~= \"smite player \")\n\t\t{\n\t\t\tj = int(Right(Line, Len(Line)-13));\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerID == j)\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"smite\";\n\t\t}\n\t\t\n\t\tif(Left(Line,12) ~= \"kick player \")\n\t\t{\n\t\t\tj = int(Right(Line, Len(Line)-12));\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerID == j)\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"kick\";\n\t\t}\n\n\t\tif(Left(Line,32) ~= \"give botmaster access to player \")\n\t\t{\n\t\t\tj = int(Right(Line, Len(Line)-32));\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerID == j)\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tSendtypepublic=Sendtype;\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"givebm\";\n\t\t}\n\t\t\n\t\tif(instr(caps(Line), caps(\"athena, slaughter them all\")) != -1 || instr(caps(Line), caps(\"athena, murder them all\")) != -1 )\n\t\t{\n\t\t\tAuthPlayerName = sender;\n\t\t\tif(sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"smiteall\";\n\t\t}\n  \n\t\tif(instr(caps(Line), caps(\"athena, fix it all\")) != -1 || instr(caps(Line), caps(\"athena, fix everything up\")) != -1 )\n\t\t{\n\t\t\tAuthPlayerName = sender;\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"fixup\";\n\t\t}\n\t\t\n\t\tif(instr(caps(Line), caps(\"athena, nuke it all\")) != -1 || instr(caps(Line), caps(\"athena, blow everything up\")) != -1 )\n\t\t{\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"blowup\";\n\t\t}\n\t\t\n\t\tif(Left(Line,11) ~= \"break item \")\n\t\t{\n\t\tRememberString = Right(Line, Len(Line)-11);\n\t\tif(RememberString == \"\") return;\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"killall\";\n\t\t}\n\t\t\n\t\tif(Left(Line,8) ~= \"trigger \")\n\t\t{\n\t\t\tRememberString = Right(Line, Len(Line)-8);\n\t\t\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"trigger\";\n\t\t}\n\n\t\tif(Left(Line,5) ~= \"frob \")\n\t\t{\n\t\t\tif(sendtype == \"player\")\n\t\t\t{\n\t\t\t\tRememberString = Right(Line, Len(Line)-5);\n\t\t\t\tAuthPlayerName = Left(s, InStr(s,\"(\"));\n\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbCheckingAuth = True;\n\t\t\t\tbInitBroadcast = True;\n\t\t\t\tbHurryUp=True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tStoredCommand = \"frob\";\n\t\t\t}\n\t\t}\n\n\t\tif(Left(Line,5) ~= \"bump \")\n\t\t{\n\t\t\tif(sendtype == \"player\")\n\t\t\t{\n\t\t\t\tRememberString = Right(Line, Len(Line)-5);\n\t\t\t\tAuthPlayerName = Left(s, InStr(s,\"(\"));\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbCheckingAuth = True;\n\t\t\t\tbInitBroadcast = True;\n\t\t\t\tbHurryUp=True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tStoredCommand = \"bump\";\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(instr(caps(Line), caps(\"heal everyone\")) != -1)\n\t\t{\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"healall\";\n\t\t}\n\t\t\n\t\tif(Left(Line,12) ~= \"heal player \")\n\t\t{\n\t\t\tj = int(Right(Line, Len(Line)-12));\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerID == j)\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"heal\";\n\t\t}\n\n\t\tif(Left(Line,12) ~= \"warn player \")\n\t\t{\n\t\t\tj = int(Right(Line, Len(Line)-12));\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerID == j)\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"warn\";\n\t\t}\n\t\t\n\t\tif(Left(Line,10) ~= \"warn name \")\n\t\t{\n\t\t\tsavename = Right(Line, Len(Line)-10);\n\t\t\t\tif(SaveName == \"\")\n\t\t\t\t\treturn;\n\t\t\t/*savename = AM.RCR(savename);\n\t\t\tsavename = AM.RCR2(savename);*/\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(savename)) != -1 || instr(caps(AM.GetNick(DXP)), caps(savename)) != -1)\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\tRememberName = DXP.PlayerReplicationInfo.PlayerName;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"warn\";\n\t\t}\n\t\t\n\t\tif(Left(Line,12) ~= \"info player \")\n\t\t{\n\t\t\tj = int(Right(Line, Len(Line)-12));\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerID == j)\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"nptinfo\";\n\t\t}\n\t\t\n\t\tif(Left(Line,10) ~= \"info name \")\n\t\t{\n\t\t\tsavename = Right(Line, Len(Line)-10);\n\t\t\t\tif(SaveName == \"\")\n\t\t\t\t\treturn;\n\t\t\tcolstr = savename;\n\t\t\tsavename = AM.RCR(savename);\n\t\t\tsavename = AM.RCR2(savename);\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(savename)) != -1 || instr(caps(AM.GetNick(DXP)), caps(savename)) != -1 || instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(colstr)) != -1 || instr(caps(AM.GetNick(DXP)), caps(colstr)) != -1 )\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\tRememberName = DXP.PlayerReplicationInfo.PlayerName;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"nptinfo\";\n\t\t}\n\t\t\n\t\tif(Left(Line,9) ~= \"ban item \")\n\t\t{\n\t\t\tRememberString = Right(Line, Len(Line)-9);\n\t\t\t\tif(RememberString == \"\")\n\t\t\t\t\treturn;\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"addbanitem\";\n\t\t}\n\t\t\n\t\tif(Left(Line,18) ~= \"ban specific item \")\n\t\t{\n\t\t\tRememberString = Right(Line, Len(Line)-18);\n\t\t\t\tif(RememberString == \"\")\n\t\t\t\t\treturn;\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"addbanitem2\";\n\t\t}\n\t\t\n\t\tif(Left(Line,11) ~= \"unban item \")\n\t\t{\n\t\t\tRememberString = Right(Line, Len(Line)-11);\n\t\t\t\tif(RememberString == \"\")\n\t\t\t\t\treturn;\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"rembanitem\";\n\t\t}\n\t\t\n\t\tif(Left(Line,20) ~= \"unban specific item \")\n\t\t{\n\t\t\tRememberString = Right(Line, Len(Line)-20);\n\t\t\t\tif(RememberString == \"\")\n\t\t\t\t\treturn;\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"rembanitem2\";\n\t\t}\n\t\t\n\t\tif(Left(Line,14) ~= \"disarm player \")\n\t\t{\n\t\t\tj = int(Right(Line, Len(Line)-14));\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerID == j)\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"disarm\";\n\t\t}\n\t\t\n\t\tif(Left(Line,12) ~= \"disarm name \")\n\t\t{\n\t\t\tsavename = Right(Line, Len(Line)-12);\n\t\t\tif(SaveName == \"\")\n\t\t\t\t\treturn;\n\t\t\tcolstr = savename;\n\t\t\tsavename = AM.RCR(savename);\n\t\t\tsavename = AM.RCR2(savename);\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(savename)) != -1 || instr(caps(AM.GetNick(DXP)), caps(savename)) != -1 || instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(colstr)) != -1 || instr(caps(AM.GetNick(DXP)), caps(colstr)) != -1 )\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\tRememberName = DXP.PlayerReplicationInfo.PlayerName;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"disarm\";\n\t\t}\n\t\t\n\t\tif(Left(Line,13) ~= \"bring player \")\n\t\t{\n\t\t\tif(sendtype == \"player\")\n\t\t\t{\n\t\t\tj = int(Right(Line, Len(Line)-13));\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerID == j)\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Left(s, InStr(s,\"(\"));\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tif(AM.bAllowWhitelist)\n\t\t\t\tbCheckingWhitelist=True;\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"bring\";\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(Left(Line,11) ~= \"bring name \")\n\t\t{\n\t\tif(sendtype == \"player\")\n\t\t{\n\t\t\tsavename = Right(Line, Len(Line)-11);\n\t\t\t\tif(SaveName == \"\") return;\n\t\t\tcolstr = savename;\n\t\t\tsavename = AM.RCR(savename);\n\t\t\tsavename = AM.RCR2(savename);\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(savename)) != -1 || instr(caps(AM.GetNick(DXP)), caps(savename)) != -1 || instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(colstr)) != -1 || instr(caps(AM.GetNick(DXP)), caps(colstr)) != -1 )\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\tRememberName = DXP.PlayerReplicationInfo.PlayerName;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Left(s, InStr(s,\"(\"));\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tif(AM.bAllowWhitelist)\n\t\t\t\tbCheckingWhitelist=True;\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"bring\";\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(Left(Line,13) ~= \"go to player \")\n\t\t{\n\t\tif(sendtype == \"player\")\n\t\t{\n\t\t\tj = int(Right(Line, Len(Line)-13));\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerID == j)\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Left(s, InStr(s,\"(\"));\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tif(AM.bAllowWhitelist)\n\t\t\t\tbCheckingWhitelist=True;\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"goto\";\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(Left(Line,11) ~= \"go to name \")\n\t\t{\n\t\tif(sendtype == \"player\")\n\t\t{\n\t\t\tsavename = Right(Line, Len(Line)-11);\n\t\t\t\t\t\t\tif(SaveName == \"\") return;\n\t\t\tcolstr = savename;\n\t\t\tsavename = AM.RCR(savename);\n\t\t\tsavename = AM.RCR2(savename);\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(savename)) != -1 || instr(caps(AM.GetNick(DXP)), caps(savename)) != -1 || instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(colstr)) != -1 || instr(caps(AM.GetNick(DXP)), caps(colstr)) != -1 )\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\tRememberName = DXP.PlayerReplicationInfo.PlayerName;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Left(s, InStr(s,\"(\"));\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tif(AM.bAllowWhitelist)\n\t\t\t\tbCheckingWhitelist=True;\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"goto\";\n\t\t\t}\n\t\t}\n\n\t\tif(Left(Line,12) ~= \"goto player \")\n\t\t{\n\t\tif(sendtype == \"player\")\n\t\t{\n\t\t\tj = int(Right(Line, Len(Line)-12));\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerID == j)\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Left(s, InStr(s,\"(\"));\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tif(AM.bAllowWhitelist)\n\t\t\t\tbCheckingWhitelist=True;\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"goto\";\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(Left(Line,10) ~= \"goto name \")\n\t\t{\n\t\tif(sendtype == \"player\")\n\t\t{\n\t\t\tsavename = Right(Line, Len(Line)-10);\n\t\t\tif(SaveName == \"\") return;\n\t\t\tcolstr = savename;\n\t\t\tsavename = AM.RCR(savename);\n\t\t\tsavename = AM.RCR2(savename);\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(savename)) != -1 || instr(caps(AM.GetNick(DXP)), caps(savename)) != -1 || instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(colstr)) != -1 || instr(caps(AM.GetNick(DXP)), caps(colstr)) != -1 )\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\tRememberName = DXP.PlayerReplicationInfo.PlayerName;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Left(s, InStr(s,\"(\"));\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tif(AM.bAllowWhitelist)\n\t\t\t\tbCheckingWhitelist=True;\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"goto\";\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(Left(Line,19) ~= \"assemble at player \")\n\t\t{\n\t\t\tj = int(Right(Line, Len(Line)-19));\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerID == j)\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"assemble\";\n\t\t}\n\t\t\n\t\tif(Left(Line,17) ~= \"assemble at name \")\n\t\t{\n\t\t\tsavename = Right(Line, Len(Line)-17);\n\t\t\t\t\t\t\tif(SaveName == \"\") return;\n\t\t\tcolstr = savename;\n\t\t\tsavename = AM.RCR(savename);\n\t\t\tsavename = AM.RCR2(savename);\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(savename)) != -1 || instr(caps(AM.GetNick(DXP)), caps(savename)) != -1 || instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(colstr)) != -1 || instr(caps(AM.GetNick(DXP)), caps(colstr)) != -1 )\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\tRememberName = DXP.PlayerReplicationInfo.PlayerName;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"assemble\";\n\t\t}\n\t\t\n\t\tif(Left(Line,10) ~= \"kick name \")\n\t\t{\n\t\t\tsavename = Right(Line, Len(Line)-10);\n\t\t\t\tif(SaveName == \"\") return;\n\t\t\tcolstr = savename;\n\t\t\tsavename = AM.RCR(savename);\n\t\t\tsavename = AM.RCR2(savename);\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(savename)) != -1 || instr(caps(AM.GetNick(DXP)), caps(savename)) != -1 || instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(colstr)) != -1 || instr(caps(AM.GetNick(DXP)), caps(colstr)) != -1 )\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\tRememberName = DXP.PlayerReplicationInfo.PlayerName;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"kick\";\n\t\t}\n\n\t\tif(Left(Line,12) ~= \"set manager \")\n\t\t{\n\t\t\trememberstring = Right(Line, Len(Line)-12);\n\t\t\t\t\t\t\tif(rememberstring == \"\") return;\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"setrconvar\";\n\t\t}\n\t\t\n\t\tif(Left(Line,11) ~= \"smite name \")\n\t\t{\n\t\t\tsavename = Right(Line, Len(Line)-11);\n\t\t\t\t\t\t\tif(SaveName == \"\") return;\n\t\t\tcolstr = savename;\n\t\t\tsavename = AM.RCR(savename);\n\t\t\tsavename = AM.RCR2(savename);\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(savename)) != -1 || instr(caps(AM.GetNick(DXP)), caps(savename)) != -1 || instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(colstr)) != -1 || instr(caps(AM.GetNick(DXP)), caps(colstr)) != -1 )\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\tRememberName = DXP.PlayerReplicationInfo.PlayerName;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"smite\";\n\t\t}\n\t\t\n\t\tif(Left(Line,19) ~= \"give admin to name \")\n\t\t{\n\t\t\tsavename = Right(Line, Len(Line)-19);\n\t\t\t\t\t\t\tif(SaveName == \"\") return;\n\t\t\tcolstr = savename;\n\t\t\tsavename = AM.RCR(savename);\n\t\t\tsavename = AM.RCR2(savename);\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(savename)) != -1 || instr(caps(AM.GetNick(DXP)), caps(savename)) != -1 || instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(colstr)) != -1 || instr(caps(AM.GetNick(DXP)), caps(colstr)) != -1 )\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\tRememberName = DXP.PlayerReplicationInfo.PlayerName;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"giveadmin\";\n\t\t}\n\n\t\tif(Left(Line,21) ~= \"give admin to player \")\n\t\t{\n\t\t\tj = int(Right(Line, Len(Line)-21));\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerID == j)\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\tRememberName = DXP.PlayerReplicationInfo.PlayerName;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\t\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"giveadmin\";\n\t\t}\n\t\t\n\t\tif(Left(Line,11) ~= \"blind name \")\n\t\t{\n\t\t\tsavename = Right(Line, Len(Line)-11);\n\t\t\t\t\t\t\tif(SaveName == \"\") return;\n\t\t\tcolstr = savename;\n\t\t\tsavename = AM.RCR(savename);\n\t\t\tsavename = AM.RCR2(savename);\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(savename)) != -1 || instr(caps(AM.GetNick(DXP)), caps(savename)) != -1 || instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(colstr)) != -1 || instr(caps(AM.GetNick(DXP)), caps(colstr)) != -1 )\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\tRememberName = DXP.PlayerReplicationInfo.PlayerName;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"blind\";\n\t\t}\n\n\t\tif(Left(Line,13) ~= \"blind player \")\n\t\t{\n\t\t\tj = int(Right(Line, Len(Line)-13));\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerID == j)\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\tRememberName = DXP.PlayerReplicationInfo.PlayerName;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\t\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"blind\";\n\t\t}\n\n\t\tif(Left(Line,10) ~= \"burn name \")\n\t\t{\n\t\t\tsavename = Right(Line, Len(Line)-10);\n\t\t\t\t\t\t\tif(SaveName == \"\") return;\n\t\t\tcolstr = savename;\n\t\t\tsavename = AM.RCR(savename);\n\t\t\tsavename = AM.RCR2(savename);\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(savename)) != -1 || instr(caps(AM.GetNick(DXP)), caps(savename)) != -1 || instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(colstr)) != -1 || instr(caps(AM.GetNick(DXP)), caps(colstr)) != -1 )\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\tRememberName = DXP.PlayerReplicationInfo.PlayerName;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"burn\";\n\t\t}\n\n\t\tif(Left(Line,12) ~= \"burn player \")\n\t\t{\n\t\t\tj = int(Right(Line, Len(Line)-12));\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerID == j)\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\tRememberName = DXP.PlayerReplicationInfo.PlayerName;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\t\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"burn\";\n\t\t}\n\t\t\n\t\tif(Left(Line,21) ~= \"take admin from name \")\n\t\t{\n\t\t\tsavename = Right(Line, Len(Line)-21);\n\t\t\t\t\t\t\tif(SaveName == \"\") return;\n\t\t\tcolstr = savename;\n\t\t\tsavename = AM.RCR(savename);\n\t\t\tsavename = AM.RCR2(savename);\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(savename)) != -1 || instr(caps(AM.GetNick(DXP)), caps(savename)) != -1 || instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(colstr)) != -1 || instr(caps(AM.GetNick(DXP)), caps(colstr)) != -1 )\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\tRememberName = DXP.PlayerReplicationInfo.PlayerName;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\t\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"takeadmin\";\n\t\t}\n\n\t\tif(Left(Line,23) ~= \"take admin from player \")\n\t\t{\n\t\t\tj = int(Right(Line, Len(Line)-23));\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerID == j)\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\tRememberName = DXP.PlayerReplicationInfo.PlayerName;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\t\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"takeadmin\";\n\t\t}\n\t\t\n\t\tif(Left(Line,10) ~= \"smite bot \")\n\t\t{\n\t\t\tRememberName = Right(Line, Len(Line)-10);\n\t\t\tif(RememberName == \"\") return;\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tif(AM.bAllowWhitelist)\n\t\t\t\tbCheckingWhitelist=True;\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"smitebot\";\n\t\t}\n\t\t\n\t\tif(Left(Line,10) ~= \"heal name \")\n\t\t{\n\t\t\tsavename = Right(Line, Len(Line)-10);\n\t\t\tif(SaveName == \"\") return;\n\t\t\tcolstr = savename;\n\t\t\tsavename = AM.RCR(savename);\n\t\t\tsavename = AM.RCR2(savename);\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(savename)) != -1 || instr(caps(AM.GetNick(DXP)), caps(savename)) != -1 || instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(colstr)) != -1 || instr(caps(AM.GetNick(DXP)), caps(colstr)) != -1 )\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\tRememberName = DXP.PlayerReplicationInfo.PlayerName;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"heal\";\n\t\t}\n\n\t\tif(Left(Line,5) ~= \"rcon \")\n\t\t{\n\t\t\tif(sendtype == \"player\")\n\t\t\t{\n\t\t\t\n\t\t\tRememberString = Right(Line, Len(Line)-5);\n\t\t\tif(RememberString == \"\")\n\t\t\t{\n\t\t\t\tASay(\"Please enter a command string that references RCON Mutator.\");\n\t\t\t\tRememberString=\"\";\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tRememberName = Left(s, InStr(s,\"(\"));\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == RememberName)\n\t\t\t\t\t{\n\t\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tSetTimer(0.6,False);\n\t\t\tbPublicCommand=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"rcon\";\n\t\t\t}\n\t\t}\n\t\tif(Left(Line,5) ~= \".mut \")\n\t\t{\n\t\t\tif(sendtype == \"player\")\n\t\t\t{\n\t\t\t\n\t\t\tRememberString = Right(Line, Len(Line)-5);\n\t\t\tif(RememberString == \"\")\n\t\t\t{\n\t\t\t\tASay(\"Please enter a command string that references Mutator commands.\");\n\t\t\t\tRememberString=\"\";\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tRememberName = Left(s, InStr(s,\"(\"));\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == RememberName)\n\t\t\t\t\t{\n\t\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tSetTimer(0.6,False);\n\t\t\tbPublicCommand=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"mutate\";\n\t\t\t}\n\t\t}\n\t\t\t\n\t\tif(Left(Line,12) ~= \"mark player \")\n\t\t{\n\t\t\tj = int(Right(Line, Len(Line)-12));\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerID == j)\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\tRememberName = DXP.PlayerReplicationInfo.PlayerName;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"addmark\";\n\t\t}\n\t\t\n\t\tif(Left(Line,10) ~= \"mark name \")\n\t\t{\n\t\t\tsavename = Right(Line, Len(Line)-10);\n\t\t\t\t\t\t\tif(SaveName == \"\") return;\n\t\t\tcolstr = savename;\n\t\t\tsavename = AM.RCR(savename);\n\t\t\tsavename = AM.RCR2(savename);\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(savename)) != -1 || instr(caps(AM.GetNick(DXP)), caps(savename)) != -1 || instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(colstr)) != -1 || instr(caps(AM.GetNick(DXP)), caps(colstr)) != -1 )\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\tRememberName = DXP.PlayerReplicationInfo.PlayerName;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"addmark\";\n\t\t}\n\n\t\tif(Left(Line,22) ~= \"athena, ignore player \")\n\t\t{\n\t\t\tj = int(Right(Line, Len(Line)-22));\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerID == j)\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\tRememberName = DXP.PlayerReplicationInfo.PlayerName;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"ignore\";\n\t\t}\n\n\t\tif(Left(Line,25) ~= \"athena, whitelist player \")\n\t\t{\n\t\t\tj = int(Right(Line, Len(Line)-25));\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerID == j)\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\tRememberName = DXP.PlayerReplicationInfo.PlayerName;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"whitelist\";\n\t\t}\n\t\t\t\n\t\tif(Left(Line,23) ~= \"generate password, max \")\n\t\t{\n\t\t\trememberint = int(Right(Line, Len(Line)-23));\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"generatepass\";\n\t\t}\n\n\t  \tif(instr(caps(Line), caps(\"remove game password\")) != -1 || instr(caps(Line), caps(\"athena, open the server\")) != -1)\n\t\t{\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"removepass\";\n\t\t}\n\t\t\n\t\tif(Left(Line,21) ~= \"set game password to \")\n\t\t{\n\t\t\trememberstring = Right(Line, Len(Line)-21);\n\t\t\t\t\t\t\tif(rememberstring == \"\") return;\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"setpassword\";\n\t\t}\n\t\t\n\t\tif(Left(Line,20) ~= \"athena, ignore name \")\n\t\t{\n\t\t\tsavename = Right(Line, Len(Line)-20);\n\t\t\t\t\t\t\tif(SaveName == \"\") return;\n\t\t\tcolstr = savename;\n\t\t\tsavename = AM.RCR(savename);\n\t\t\tsavename = AM.RCR2(savename);\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(savename)) != -1 || instr(caps(AM.GetNick(DXP)), caps(savename)) != -1 || instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(colstr)) != -1 || instr(caps(AM.GetNick(DXP)), caps(colstr)) != -1 )\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\tRememberName = DXP.PlayerReplicationInfo.PlayerName;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Sender;\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"ignore\";\n\t\t}\n\t\t\n\t\tif(Left(Line,23) ~= \"athena, whitelist name \")\n\t\t{\n\t\t\tsavename = Right(Line, Len(Line)-23);\n\t\t\t\t\t\t\tif(SaveName == \"\") return;\n\t\t\tcolstr = savename;\n\t\t\tsavename = AM.RCR(savename);\n\t\t\tsavename = AM.RCR2(savename);\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(savename)) != -1 || instr(caps(AM.GetNick(DXP)), caps(savename)) != -1 || instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(colstr)) != -1 || instr(caps(AM.GetNick(DXP)), caps(colstr)) != -1 )\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\tRememberName = DXP.PlayerReplicationInfo.PlayerName;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"whitelist\";\n\t\t}\n\t\t\t\n\t  \tif(instr(caps(Line), caps(\"smite me\")) != -1 || (instr(caps(Line), caps(\"athena\")) != -1 && instr(caps(Line), caps(\"kill me\")) != -1))\n\t\t{\n\t\t\tif(sendtype == \"player\")\n\t\t\t{\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbPublicCommand=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"smite\";\n\t\t\t}\n\t\t}\n\t\t\n\t  \tif(instr(caps(Line), caps(\"athena\")) != -1 && (instr(caps(Line), caps(\"clear\")) != -1 || instr(caps(Line), caps(\"reset\")) != -1) && instr(caps(Line), caps(\"ignore\")) != -1)\n\t\t{\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"clearignore\";\n\t\t}\n\n\t  \tif(instr(caps(Line), caps(\"athena\")) != -1 && (instr(caps(Line), caps(\"clear\")) != -1 || instr(caps(Line), caps(\"reset\")) != -1) && instr(caps(Line), caps(\"whitelist\")) != -1)\n\t\t{\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"clearwhitelist\";\n\t\t}\n\t\t\n\t  \tif(instr(caps(Line), caps(\"athena\")) != -1 && (instr(caps(Line), caps(\"clear\")) != -1 || instr(caps(Line), caps(\"reset\")) != -1) && instr(caps(Line), caps(\"marks\")) != -1)\n\t\t{\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"markclear\";\n\t\t}\n\t\t\n\t  \tif(instr(caps(Line), caps(\"clear all memos\")) != -1 || instr(caps(Line), caps(\"delete all memos\")) != -1)\n\t\t{\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"memozero\";\n\t\t}\n\t\n\t  \tif(instr(caps(Line), caps(\"clear all comments\")) != -1 || instr(caps(Line), caps(\"delete all comments\")) != -1)\n\t\t{\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"commentzero\";\n\t\t}\n\t\t\t\t\n\t\tif(instr(caps(Line), caps(\"heal me\")) != -1)\n\t\t{\n\t\t\tif(sendtype == \"player\")\n\t\t\t{\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tif(AM.bAllowWhitelist)\n\t\t\t\tbCheckingWhitelist=True;\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"heal\";\n\t\t\t}\n\t\t}\n\t\t\t\n\t\tif(Left(Line,6) ~= \"!talk \")\n\t\t{\n\t\t\tif(sendtype == \"player\")\n\t\t\t{\n\t\t\t\taText = Right(Line, Len(Line) - 6);\n\t\t\t\tAM.SendTextToAIClient(aText);\n\t\t\t}\n\t\t}\t\n\t\tif(Sendtype ~= \"irc\" || Sendtype ~= \"telnet\")\n\t\t{\n\t\t\t\n\t\t\tif(Left(Line,1) ~= \"!\" && AM.bAllowChatCommands)\n\t\t\t{\n\t\t\t\tatagz = Right(s, Len(s)-instr(s,\"!\")-Len(\"!\"));\n\t\t\t\t\n\t\t\t\tif(instr(caps(atagz), caps(\" \")) != -1) //Assuming theres other words after\n\t\t\t\t{\n\t\t\t\t\t//atagzextra = right(atagz, InStr(atagz,\" \"));\n\t\t\t\t\tatagzextra = Right(atagz, Len(atagz)-instr(atagz,\" \")-Len(\" \"));\n\t\t\t\t\t//atagz = Left(atagz, Len(atagz)-instr(atagz,\" \")-Len(\" \"));\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(atagz ~= \"motd\")\n\t\t\t\t{\n\t\t\t\t\tADelaySay(AM.MOTD,1);\n\t\t\t\t}\n\t\t\t\telse if(Left(atagz,5)  ~= \"motd \")\n\t\t\t\t{\n\t\t\t\t\tforeach AllActors(class'DeusExPlayer', DXP)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.Playername ~= Sender)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.bAdmin)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tASay(\"MOTD changed to\"@atagzextra);\n\t\t\t\t\t\t\t\tAM.MOTD = atagzextra;\n\t\t\t\t\t\t\t\tAM.SaveConfig();\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if(atagz ~= \"abort\")\n\t\t\t\t{\n\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(Triggerer.bAdmin)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(SDA != None)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(AM.shutdownAbortSound != none)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tDXP.PlaySound(AM.shutdownAbortSound, SLOT_Interface,,, 256);\t\t\t\t\t\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tSDA.Destroy();\n\t\t\t\t\t\t\tSDA = none;\n\t\t\t\t\t\t\tASay(\"Shutdown cancelled.\");\n\t\t\t\t\t\t}\t\t\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\telse if(Left(atagz,8) ~= \"randstr \")\n\t\t\t\t{\n\t\t\t\t\trememberint = int(atagzextra);\n\t\t\t\t\tSetTimer(0.5,False);\n\t\t\t\t\tbPublicCommand = True;\n\t\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\t\tStoredCommand = \"randomstring\";\n\t\t\t\t}\n\t\t\t\telse if(Left(atagz,9) ~= \"randchar \")\n\t\t\t\t{\n\t\t\t\t\trememberint = int(atagzextra);\n\t\t\t\t\tSetTimer(0.5,False);\n\t\t\t\t\tbPublicCommand = True;\n\t\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\t\tStoredCommand = \"randomchar\";\n\t\t\t\t}\n\t\t\t\telse if(Left(atagz,6) ~= \"arand \")\n\t\t\t\t{\n\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(instr(caps(atagzextra), caps(\"d\")) != -1)\n\t\t\t\t\t{\n\t\t\t\t\t\taSides = int(Right(atagzextra, Len(atagzextra)-instr(atagzextra,\"d\")-Len(\"d\")));\n\t\t\t\t\t\taDice = int(Left(atagzextra, InStr(atagzextra,\"d\")));\n\t\t\t\t\t\twhile(aRolls < aDice)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taTotal += Rand(aSides+1);\n\t\t\t\t\t\t\taRolls++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tBroadcastMessage(Sendtype$\" rolls \"$aDice$\" \"$aSides$\"-sided dice....\"@aTotal);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\tBroadcastMessage(\"Error in formatting.\");\n\t\t\t\t}\n\t\t\t\telse if(atagz ~= \"pk1\")\n\t\t\t\t{\n\t\t\t\t\tif(peacekeeper != 0)\n\t\t\t\t\t\treturn;\n\t\t\t\t\tAuthPlayerName = Sender;\n\t\t\t\t\t\n\t\t\t\t\tif(Sendtype == \"player\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tSetTimer(1,False);\n\t\t\t\t\tbCheckingAuth = True;\n\t\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\t\tbInitBroadcast=True;\n\t\t\t\t\tStoredCommand = \"peacekeeperone\";\n\t\t\t\t}\n\t\t\t\telse if(atagz ~= \"pk2\")\n\t\t\t\t{\n\t\t\t\t\tif(peacekeeper != 0)\n\t\t\t\t\t\treturn;\n\t\t\t\t\tAuthPlayerName = Sender;\n\t\t\t\t\t\n\t\t\t\t\tif(Sendtype == \"player\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tSetTimer(1,False);\n\t\t\t\t\tbCheckingAuth = True;\n\t\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\t\tbInitBroadcast=True;\n\t\t\t\t\tStoredCommand = \"peacekeepertwo\";\n\t\t\t\t}\n\t\t\t\telse if(atagz ~= \"aw\")\n\t\t\t\t{\n\t\t\t\t\tif(AM.bProtocolA == True)\n\t\t\t\t\t\treturn;\n\t\t\t\t\tAuthPlayerName = Sender;\n\t\t\t\t\t\n\t\t\t\t\tif(Sendtype == \"player\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tSetTimer(1,False);\n\t\t\t\t\tbCheckingAuth = True;\n\t\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\t\tbInitBroadcast=True;\n\t\t\t\t\tStoredCommand = \"awatchper\";\n\t\t\t\t}\n\t\t\t\telse if(atagz ~= \"awoff\")\n\t\t\t\t{\n\t\t\t\t\tif(AM.bProtocolA == False)\n\t\t\t\t\t\treturn;\n\t\t\t\t\tAuthPlayerName = Sender;\n\t\t\t\t\t\n\t\t\t\t\tif(Sendtype == \"player\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tSetTimer(1,False);\n\t\t\t\t\tbCheckingAuth = True;\n\t\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\t\tbInitBroadcast=True;\n\t\t\t\t\tStoredCommand = \"awatchperoff\";\n\t\t\t\t}\n\t\t\t\telse if(atagz ~= \"pk0\")\n\t\t\t\t{\n\t\t\t\t\tif(peacekeeper == 0)\n\t\t\t\t\t\treturn;\n\t\t\t\t\tAuthPlayerName = Sender;\n\t\t\t\t\t\n\t\t\t\t\tif(Sendtype == \"player\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tSetTimer(1,False);\n\t\t\t\t\tbCheckingAuth = True;\n\t\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\t\tbInitBroadcast=True;\n\t\t\t\t\tStoredCommand = \"peacekeepernone\";\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}\n\t\tif(Sendtype == \"player\")\n\t\t{\n\t\t\t\n\t\t\tif(Left(Line,1) ~= \".\" && AM.bAllowIRCCommands)\n\t\t\t{\n\t\t\t\tforeach AllActors(class'IRCLink',IRC)\n\t\t\t\t{\n\t\t\t\t\tif(IRC != None)\n\t\t\t\t\t{\n\t\t\t\t\t\tLog(\"Command sent by game: \"$line,'IRC');\n\t\t\t\t\t\tIRC.SendMessage(line);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif(instr(caps(S), caps(\"#\")) != -1 && AM.bAllowHashTag)\n\t\t\t{\n\t\t\t\tatagz = Right(s, Len(s)-instr(s,\"#\")-Len(\"#\"));\n\t\t\t\tif(instr(caps(atagz), caps(\" \")) != -1) //Assuming theres other words after\n\t\t\t\t{\n\t\t\t\t\tatagz = Left(atagz, InStr(atagz,\" \"));\n\t\t\t\t}\n\t\t\t\tif(atagz == \"\")\n\t\t\t\t\treturn;\n\t\t\t\t\t\n\t\t\t\tAM.Topic = \"#\"$atagz;\n\t\t\t\tASay(\"Topic was changed. #\"$atagz$\"\");\n\t\t\t\t//ASay(\"Reading\"@atagz$\". Is this correct?\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\n\t\t\t//if(instr(caps(S), caps(\"!\")) != -1)\n\t\t\tif(Left(Line,1) ~= \"!\" && AM.bAllowChatCommands)\n\t\t\t{\n\t\t\t\tatagz = Right(s, Len(s)-instr(s,\"!\")-Len(\"!\"));\n\t\t\t\t\n\t\t\t\tif(instr(caps(atagz), caps(\" \")) != -1) //Assuming theres other words after\n\t\t\t\t{\n\t\t\t\t\t//atagzextra = right(atagz, InStr(atagz,\" \"));\n\t\t\t\t\tatagzextra = Right(atagz, Len(atagz)-instr(atagz,\" \")-Len(\" \"));\n\t\t\t\t\t//atagz = Left(atagz, Len(atagz)-instr(atagz,\" \")-Len(\" \"));\n\t\t\t\t}\n\t\t\t\t\tif(atagz ~= \"credits\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer', DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.Playername ~= Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tASay(\"Your credits count is\"@DXP.Credits);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(atagz ~= \"motd\")\n\t\t\t\t\t{\n\t\t\t\t\t\tADelaySay(AM.MOTD,1);\n\t\t\t\t\t}\n\t\t\t\t\telse if(Left(atagz,5)  ~= \"motd \")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer', DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.Playername ~= Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif(DXP.bAdmin)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tASay(\"MOTD changed to\"@atagzextra);\n\t\t\t\t\t\t\t\t\tAM.MOTD = atagzextra;\n\t\t\t\t\t\t\t\t\tAM.SaveConfig();\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(atagz ~= \"abort\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(SDA != None)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif(AM.shutdownAbortSound != none)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tDXP.PlaySound(AM.shutdownAbortSound, SLOT_Interface,,, 256);\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tSDA.Destroy();\n\t\t\t\t\t\t\t\tSDA = none;\n\t\t\t\t\t\t\t\tASay(\"Shutdown cancelled.\");\n\t\t\t\t\t\t\t}\t\t\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t\telse if(Left(atagz,8) ~= \"randstr \")\n\t\t\t\t\t{\n\t\t\t\t\t\trememberint = int(atagzextra);\n\t\t\t\t\t\tSetTimer(0.5,False);\n\t\t\t\t\t\tbPublicCommand = True;\n\t\t\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\t\t\tStoredCommand = \"randomstring\";\n\t\t\t\t\t}\n\t\t\t\t\telse if(Left(atagz,9) ~= \"randchar \")\n\t\t\t\t\t{\n\t\t\t\t\t\trememberint = int(atagzextra);\n\t\t\t\t\t\tSetTimer(0.5,False);\n\t\t\t\t\t\tbPublicCommand = True;\n\t\t\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\t\t\tStoredCommand = \"randomchar\";\n\t\t\t\t\t}\n\t\t\t\t\telse if(Left(atagz,7) ~= \"summon \")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin)\n\t\t\t\t\t\t\tTriggerer.consolecommand(\"summon\"@atagzextra);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tTriggerer.Consolecommand(\"mutate rcon.summon\"@atagzextra);\n\n\t\t\t\t\t}\n\t\t\t\t\telse if(Left(atagz,6) ~= \"arand \")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(instr(caps(atagzextra), caps(\"d\")) != -1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taSides = int(Right(atagzextra, Len(atagzextra)-instr(atagzextra,\"d\")-Len(\"d\")));\n\t\t\t\t\t\t\taDice = int(Left(atagzextra, InStr(atagzextra,\"d\")));\n\t\t\t\t\t\t\twhile(aRolls < aDice)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\taTotal += Rand(aSides);\n\t\t\t\t\t\t\t\taRolls++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tBroadcastMessage(Triggerer.PlayerReplicationInfo.PlayerName$\" rolls \"$aDice$\" \"$aSides$\"-sided dice....\"@aTotal);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\tBroadcastMessage(\"Error in formatting.\");\n\t\t\t\t\t}\n\t\t\t\t\telse if(Left(atagz,2) ~= \"r \")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(AM.bMutatorAdmin && !Triggerer.bAdmin)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tTriggerer.bAdmin = True;\n\t\t\t\t\t\t\tbWasAdmin=True;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tTriggerer.ConsoleCommand(\"mutate rcon.\"$atagzextra);\n\t\t\t\t\t\t\tif(bWasAdmin)\n\t\t\t\t\t\t\t\tTriggerer.bAdmin = false;\n\n\t\t\t\t\t}\n\t\t\t\t\telse if(Left(atagz,4) ~= \"mut \")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(AM.bMutatorAdmin && !Triggerer.bAdmin)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tTriggerer.bAdmin = True;\n\t\t\t\t\t\t\tbWasAdmin=True;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tTriggerer.ConsoleCommand(\"mutate \"$atagzextra);\n\t\t\t\t\t\t\tif(bWasAdmin)\n\t\t\t\t\t\t\t\tTriggerer.bAdmin = false;\n\n\t\t\t\t\t}\n\t\t\t\t\telse if(atagz ~= \"ping\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer', DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.Playername ~= Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tASay(\"Your ping is\"@DXP.PlayerReplicationInfo.Ping);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(atagz ~= \"testrot\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer', DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.Playername ~= Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tASay(\"Your rotation is\"@DXP.ViewRotation);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(atagz ~= \"nick\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer', DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.Playername ~= Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tASay(\"Your nick is\"@AM.GetNick(DXP));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(Left(atagz,5)  ~= \"nick \")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer', DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.Playername ~= Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tASay(\"Your nick is changed.\");\n\t\t\t\t\t\t\t\tDXP.consolecommand(\"Mutate nick\"@atagzextra);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} \n\t\t\t\t\telse if(atagz ~= \"song\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'PlayerPawn', PP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(PP.PlayerReplicationInfo.Playername ~= Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tASay(\"Your track is\"@string(PP.Song));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} \n\t\t\t\t\telse if(atagz ~= \"pk1\")\n\t\t\t\t\t{\n\t\t\t\t\t\tif(peacekeeper != 0)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tAuthPlayerName = Sender;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(Sendtype == \"player\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tSetTimer(1,False);\n\t\t\t\t\t\tbCheckingAuth = True;\n\t\t\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\t\t\tbInitBroadcast=True;\n\t\t\t\t\t\tStoredCommand = \"peacekeeperone\";\n\t\t\t\t\t}\n\t\t\t\t\telse if(atagz ~= \"pk2\")\n\t\t\t\t\t{\n\t\t\t\t\t\tif(peacekeeper != 0)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tAuthPlayerName = Sender;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(Sendtype == \"player\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tSetTimer(1,False);\n\t\t\t\t\t\tbCheckingAuth = True;\n\t\t\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\t\t\tbInitBroadcast=True;\n\t\t\t\t\t\tStoredCommand = \"peacekeepertwo\";\n\t\t\t\t\t}\n\t\t\t\t\telse if(atagz ~= \"aw\")\n\t\t\t\t\t{\n\t\t\t\t\t\tif(AM.bProtocolA == True)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tAuthPlayerName = Sender;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(Sendtype == \"player\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tSetTimer(1,False);\n\t\t\t\t\t\tbCheckingAuth = True;\n\t\t\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\t\t\tbInitBroadcast=True;\n\t\t\t\t\t\tStoredCommand = \"awatchper\";\n\t\t\t\t\t}\n\t\t\t\t\telse if(atagz ~= \"awoff\")\n\t\t\t\t\t{\n\t\t\t\t\t\tif(AM.bProtocolA == False)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tAuthPlayerName = Sender;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(Sendtype == \"player\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tSetTimer(1,False);\n\t\t\t\t\t\tbCheckingAuth = True;\n\t\t\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\t\t\tbInitBroadcast=True;\n\t\t\t\t\t\tStoredCommand = \"awatchperoff\";\n\t\t\t\t\t}\n\t\t\t\t\telse if(atagz ~= \"pk0\")\n\t\t\t\t\t{\n\t\t\t\t\t\tif(peacekeeper == 0)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tAuthPlayerName = Sender;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(Sendtype == \"player\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tSetTimer(1,False);\n\t\t\t\t\t\tbCheckingAuth = True;\n\t\t\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\t\t\tbInitBroadcast=True;\n\t\t\t\t\t\tStoredCommand = \"peacekeepernone\";\n\t\t\t\t\t}\n\t\t\t\t\telse if(atagz ~= \"topic\")\n\t\t\t\t\t{\n\t\t\t\t\t\tSetTimer(1,False);\n\t\t\t\t\t\tbPublicCommand = True;\n\t\t\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\t\t\tStoredCommand = \"saytopic\";\n\t\t\t\t\t}\n\t\t\t\t\telse if(Left(atagz,6)  ~= \"topic \")\n\t\t\t\t\t{\n\t\t\t\t\t\tSetTimer(1,False);\n\t\t\t\t\t\tRememberString = atagzextra;\n\t\t\t\t\t\tbPublicCommand = True;\n\t\t\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\t\t\tStoredCommand = \"topic\";\n\t\t\t\t\t}\n\t\t\t\t\telse if(atagz ~= \"repeat\")\n\t\t\t\t\t{\n\t\t\t\t\t\tRememberName = Sender;\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == RememberName)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tSetTimer(1,False);\n\t\t\t\t\t\tbDontLog=True;\n\t\t\t\t\t\tbPublicCommand = True;\n\t\t\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\t\t\tbDontLog=True;\n\t\t\t\t\t\tStoredCommand = \"chatlogrepeat\";\n\t\t\t\t\t}\n\t\t\t\t\telse if(atagz ~= \"dist\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tloc = Triggerer.Location;\n\t\t\t\t\t\tloc.Z += Triggerer.BaseEyeHeight;\n\t\t\t\t\t\tvline = Vector(Triggerer.ViewRotation) * 10000;\n\t\t\t\t\t\tTrace(hitLocation, hitNormal, loc+vline, loc, true);\n\t\t\t\t\t\tTargetRange -= Abs(VSize(Triggerer.Location - HitLocation));\n\t\t\t\t\t\tASay(\"I calculate that distance as\"@TargetRange);\n\t\t\t\t\t}\n\t\t\t\t\telse if(atagz ~= \"loc\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tloc = Triggerer.Location;\n\t\t\t\t\t\tloc.Z += Triggerer.BaseEyeHeight;\n\t\t\t\t\t\tvline = Vector(Triggerer.ViewRotation) * 10000;\n\t\t\t\t\t\tTrace(hitLocation, hitNormal, loc+vline, loc, true);\n\t\t\t\t\t\tTargetRange -= Abs(VSize(Triggerer.Location - HitLocation));\n\t\t\t\t\t\tASay(\"Your crosshair's location is\"@string(hitlocation));\n\t\t\t\t\t}\n\t\t\t\t\telse if(Left(atagz,7)  ~= \"setloc \")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tloc = Triggerer.Location;\n\t\t\t\t\t\t\tloc.Z += Triggerer.BaseEyeHeight;\n\t\t\t\t\t\t\tvline = Vector(Triggerer.ViewRotation) * 10000;\n\t\t\t\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+vline, loc, true);\n\t\t\t\t\t\n\t\t\t\t\t\t\tif (hitActor != None && !hitActor.isA('LevelInfo'))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\thitActor.SetLocation(Vector(atagzextra));\n\t\t\t\t\t\t\t\tASay(string(hitActor.class)@\"moved to \"$vector(atagzextra)$\".\");\n\t\t\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\t\n\t\t\t\t\telse if(Left(atagz,7)  ~= \"setrot \")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin || IsWhitelisted(Triggerer))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tloc = Triggerer.Location;\n\t\t\t\t\t\t\tloc.Z += Triggerer.BaseEyeHeight;\n\t\t\t\t\t\t\tvline = Vector(Triggerer.ViewRotation) * 10000;\n\t\t\t\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+vline, loc, true);\n\t\t\t\t\t\n\t\t\t\t\t\t\tif (hitActor != None && !hitActor.isA('LevelInfo'))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\thitActor.setrotation(rotator(atagzextra));\n\t\t\t\t\t\t\t\tASay(string(hitActor.class)@\"rotated to \"$rotator(atagzextra)$\".\");\n\t\t\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\t\t\n\t\t\t\t\telse if(Left(atagz,9)  ~= \"offset.x \")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin || IsWhitelisted(Triggerer))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tloc = Triggerer.Location;\n\t\t\t\t\t\t\tloc.Z += Triggerer.BaseEyeHeight;\n\t\t\t\t\t\t\tvline = Vector(Triggerer.ViewRotation) * 10000;\n\t\t\t\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+vline, loc, true);\n\t\t\t\t\t\n\t\t\t\t\t\t\tif (hitActor != None && !hitActor.isA('LevelInfo'))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\taltloc = hitactor.location;\n\t\t\t\t\t\t\t\taltloc.x += int(atagzextra);\n\t\t\t\t\t\t\t\t\tif(AM.bCollisionDebug)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\thitActor.SetCollision(false, false, false);\n\t\t\t\t\t\t\t\t\t\thitActor.bCollideWorld = false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\thitActor.SetLocation(altloc);\n\t\t\t\t\t\t\t\t\tif(AM.bCollisionDebug)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\thitActor.SetCollision(true, true, true);\n\t\t\t\t\t\t\t\t\t\thitActor.bCollideWorld = hitactor.default.bCollideWorld;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t//ASay(string(hitActor.class)$\" location was altered by \"$int(atagzextra)$\".\");\n\t\t\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(Left(atagz,10)  ~= \"offset.x -\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin || IsWhitelisted(Triggerer))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tloc = Triggerer.Location;\n\t\t\t\t\t\t\tloc.Z += Triggerer.BaseEyeHeight;\n\t\t\t\t\t\t\tvline = Vector(Triggerer.ViewRotation) * 10000;\n\t\t\t\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+vline, loc, true);\n\t\t\t\t\t\n\t\t\t\t\t\t\tif (hitActor != None && !hitActor.isA('LevelInfo'))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\taltloc = hitactor.location;\n\t\t\t\t\t\t\t\taltloc.x -= int(Right(atagzextra, Len(atagzextra)-instr(atagzextra,\"-\")-Len(\"-\")));\n\n\t\t\t\t\t\t\t\t\tif(AM.bCollisionDebug)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\thitActor.SetCollision(false, false, false);\n\t\t\t\t\t\t\t\t\t\thitActor.bCollideWorld = false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\thitActor.SetLocation(altloc);\n\t\t\t\t\t\t\t\t\tif(AM.bCollisionDebug)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\thitActor.SetCollision(true, true, true);\n\t\t\t\t\t\t\t\t\t\thitActor.bCollideWorld = hitactor.default.bCollideWorld;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t//ASay(string(hitActor.class)$\" location was altered by \"$int(atagzextra)$\".\"$int(Right(atagzextra, Len(atagzextra)-instr(atagzextra,\"-\")-Len(\"-\"))));\n\t\t\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(Left(atagz,9)  ~= \"offset.y \")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin || IsWhitelisted(Triggerer))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tloc = Triggerer.Location;\n\t\t\t\t\t\t\tloc.Z += Triggerer.BaseEyeHeight;\n\t\t\t\t\t\t\tvline = Vector(Triggerer.ViewRotation) * 10000;\n\t\t\t\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+vline, loc, true);\n\t\t\t\t\t\n\t\t\t\t\t\t\tif (hitActor != None && !hitActor.isA('LevelInfo'))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\taltloc = hitactor.location;\n\t\t\t\t\t\t\t\taltloc.y += int(atagzextra);\n\n\t\t\t\t\t\t\t\t\tif(AM.bCollisionDebug)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\thitActor.SetCollision(false, false, false);\n\t\t\t\t\t\t\t\t\t\thitActor.bCollideWorld = false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\thitActor.SetLocation(altloc);\n\t\t\t\t\t\t\t\t\tif(AM.bCollisionDebug)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\thitActor.SetCollision(true, true, true);\n\t\t\t\t\t\t\t\t\t\thitActor.bCollideWorld = hitactor.default.bCollideWorld;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t//ASay(string(hitActor.class)$\" location was altered by \"$int(atagzextra)$\".\");\n\t\t\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(Left(atagz,10)  ~= \"offset.y -\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin || IsWhitelisted(Triggerer))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tloc = Triggerer.Location;\n\t\t\t\t\t\t\tloc.Z += Triggerer.BaseEyeHeight;\n\t\t\t\t\t\t\tvline = Vector(Triggerer.ViewRotation) * 10000;\n\t\t\t\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+vline, loc, true);\n\t\t\t\t\t\n\t\t\t\t\t\t\tif (hitActor != None && !hitActor.isA('LevelInfo'))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\taltloc = hitactor.location;\n\t\t\t\t\t\t\t\taltloc.y -= int(Right(atagzextra, Len(atagzextra)-instr(atagzextra,\"-\")-Len(\"-\")));\n\n\t\t\t\t\t\t\t\t\tif(AM.bCollisionDebug)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\thitActor.SetCollision(false, false, false);\n\t\t\t\t\t\t\t\t\t\thitActor.bCollideWorld = false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\thitActor.SetLocation(altloc);\n\t\t\t\t\t\t\t\t\tif(AM.bCollisionDebug)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\thitActor.SetCollision(true, true, true);\n\t\t\t\t\t\t\t\t\t\thitActor.bCollideWorld = hitactor.default.bCollideWorld;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t//ASay(string(hitActor.class)$\" location was altered by \"$int(atagzextra)$\".\"$int(Right(atagzextra, Len(atagzextra)-instr(atagzextra,\"-\")-Len(\"-\"))));\n\t\t\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(Left(atagz,9)  ~= \"offset.z \")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin || IsWhitelisted(Triggerer))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tloc = Triggerer.Location;\n\t\t\t\t\t\t\tloc.Z += Triggerer.BaseEyeHeight;\n\t\t\t\t\t\t\tvline = Vector(Triggerer.ViewRotation) * 10000;\n\t\t\t\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+vline, loc, true);\n\t\t\t\t\t\n\t\t\t\t\t\t\tif (hitActor != None && !hitActor.isA('LevelInfo'))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\taltloc = hitactor.location;\n\t\t\t\t\t\t\t\taltloc.z += int(atagzextra);\n\n\t\t\t\t\t\t\t\t\tif(AM.bCollisionDebug)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\thitActor.SetCollision(false, false, false);\n\t\t\t\t\t\t\t\t\t\thitActor.bCollideWorld = false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\thitActor.SetLocation(altloc);\n\t\t\t\t\t\t\t\t\tif(AM.bCollisionDebug)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\thitActor.SetCollision(true, true, true);\n\t\t\t\t\t\t\t\t\t\thitActor.bCollideWorld = hitactor.default.bCollideWorld;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t//ASay(string(hitActor.class)$\" location was altered by \"$int(atagzextra)$\".\");\n\t\t\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(Left(atagz,10)  ~= \"offset.z -\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin || IsWhitelisted(Triggerer))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tloc = Triggerer.Location;\n\t\t\t\t\t\t\tloc.Z += Triggerer.BaseEyeHeight;\n\t\t\t\t\t\t\tvline = Vector(Triggerer.ViewRotation) * 10000;\n\t\t\t\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+vline, loc, true);\n\t\t\t\t\t\n\t\t\t\t\t\t\tif (hitActor != None && !hitActor.isA('LevelInfo'))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\taltloc = hitactor.location;\n\t\t\t\t\t\t\t\taltloc.z -= int(Right(atagzextra, Len(atagzextra)-instr(atagzextra,\"-\")-Len(\"-\")));\n\n\t\t\t\t\t\t\t\t\tif(AM.bCollisionDebug)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\thitActor.SetCollision(false, false, false);\n\t\t\t\t\t\t\t\t\t\thitActor.bCollideWorld = false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\thitActor.SetLocation(altloc);\n\t\t\t\t\t\t\t\t\tif(AM.bCollisionDebug)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\thitActor.SetCollision(true, true, true);\n\t\t\t\t\t\t\t\t\t\thitActor.bCollideWorld = hitactor.default.bCollideWorld;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t//ASay(string(hitActor.class)$\" location was altered by \"$int(atagzextra)$\".\"$int(Right(atagzextra, Len(atagzextra)-instr(atagzextra,\"-\")-Len(\"-\"))));\n\t\t\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(Left(atagz,13)  ~= \"rotate.pitch \")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin || IsWhitelisted(Triggerer))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tloc = Triggerer.Location;\n\t\t\t\t\t\t\tloc.Z += Triggerer.BaseEyeHeight;\n\t\t\t\t\t\t\tvline = Vector(Triggerer.ViewRotation) * 10000;\n\t\t\t\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+vline, loc, true);\n\t\t\t\t\t\n\t\t\t\t\t\t\tif (hitActor != None && !hitActor.isA('LevelInfo'))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\taltrot = hitactor.rotation;\n\t\t\t\t\t\t\t\taltrot.pitch += int(atagzextra);\n\n\t\t\t\t\t\t\t\thitActor.setrotation(altrot);\n\t\t\t\t\t\t\t\t//ASay(string(hitActor.class)$\" rotation was altered by \"$int(atagzextra)$\".\");\n\t\t\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(Left(atagz,14)  ~= \"rotate.pitch -\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin || IsWhitelisted(Triggerer))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tloc = Triggerer.Location;\n\t\t\t\t\t\t\tloc.Z += Triggerer.BaseEyeHeight;\n\t\t\t\t\t\t\tvline = Vector(Triggerer.ViewRotation) * 10000;\n\t\t\t\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+vline, loc, true);\n\t\t\t\t\t\n\t\t\t\t\t\t\tif (hitActor != None && !hitActor.isA('LevelInfo'))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\taltrot = hitactor.rotation;\n\t\t\t\t\t\t\t\taltrot.pitch -= int(Right(atagzextra, Len(atagzextra)-instr(atagzextra,\"-\")-Len(\"-\")));\n\n\t\t\t\t\t\t\t\thitActor.Setrotation(altrot);\n\t\t\t\t\t\t\t\t//ASay(string(hitActor.class)$\" rotation was altered by \"$int(atagzextra)$\".\"$int(Right(atagzextra, Len(atagzextra)-instr(atagzextra,\"-\")-Len(\"-\"))));\n\t\t\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(Left(atagz,12)  ~= \"rotate.roll \")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin || IsWhitelisted(Triggerer))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tloc = Triggerer.Location;\n\t\t\t\t\t\t\tloc.Z += Triggerer.BaseEyeHeight;\n\t\t\t\t\t\t\tvline = Vector(Triggerer.ViewRotation) * 10000;\n\t\t\t\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+vline, loc, true);\n\t\t\t\t\t\n\t\t\t\t\t\t\tif (hitActor != None && !hitActor.isA('LevelInfo'))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\taltrot = hitactor.rotation;\n\t\t\t\t\t\t\t\taltrot.roll += int(atagzextra);\n\n\t\t\t\t\t\t\t\thitActor.Setrotation(altrot);\n\t\t\t\t\t\t\t\t//ASay(string(hitActor.class)$\" rotation was altered by \"$int(atagzextra)$\".\");\n\t\t\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(Left(atagz,13)  ~= \"rotate.roll -\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin || IsWhitelisted(Triggerer))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tloc = Triggerer.Location;\n\t\t\t\t\t\t\tloc.Z += Triggerer.BaseEyeHeight;\n\t\t\t\t\t\t\tvline = Vector(Triggerer.ViewRotation) * 10000;\n\t\t\t\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+vline, loc, true);\n\t\t\t\t\t\n\t\t\t\t\t\t\tif (hitActor != None && !hitActor.isA('LevelInfo'))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\taltrot = hitactor.rotation;\n\t\t\t\t\t\t\t\taltrot.roll -= int(Right(atagzextra, Len(atagzextra)-instr(atagzextra,\"-\")-Len(\"-\")));\n\n\t\t\t\t\t\t\t\thitActor.Setrotation(altrot);\n\t\t\t\t\t\t\t\t//ASay(string(hitActor.class)$\" rotation was altered by \"$int(atagzextra)$\".\"$int(Right(atagzextra, Len(atagzextra)-instr(atagzextra,\"-\")-Len(\"-\"))));\n\t\t\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(Left(atagz,11)  ~= \"rotate.yaw \")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin || IsWhitelisted(Triggerer))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tloc = Triggerer.Location;\n\t\t\t\t\t\t\tloc.Z += Triggerer.BaseEyeHeight;\n\t\t\t\t\t\t\tvline = Vector(Triggerer.ViewRotation) * 10000;\n\t\t\t\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+vline, loc, true);\n\t\t\t\t\t\n\t\t\t\t\t\t\tif (hitActor != None && !hitActor.isA('LevelInfo'))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\taltrot = hitactor.rotation;\n\t\t\t\t\t\t\t\taltrot.yaw += int(atagzextra);\n\n\t\t\t\t\t\t\t\thitActor.Setrotation(altrot);\n\t\t\t\t\t\t\t\t//ASay(string(hitActor.class)$\" rotation was altered by \"$int(atagzextra)$\".\");\n\t\t\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(Left(atagz,12)  ~= \"rotate.yaw -\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin || IsWhitelisted(Triggerer))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tloc = Triggerer.Location;\n\t\t\t\t\t\t\tloc.Z += Triggerer.BaseEyeHeight;\n\t\t\t\t\t\t\tvline = Vector(Triggerer.ViewRotation) * 10000;\n\t\t\t\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+vline, loc, true);\n\t\t\t\t\t\n\t\t\t\t\t\t\tif (hitActor != None && !hitActor.isA('LevelInfo'))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\taltrot = hitactor.rotation;\n\t\t\t\t\t\t\t\taltrot.yaw -= int(Right(atagzextra, Len(atagzextra)-instr(atagzextra,\"-\")-Len(\"-\")));\n\n\t\t\t\t\t\t\t\thitActor.Setrotation(altrot);\n\t\t\t\t\t\t\t\t//ASay(string(hitActor.class)$\" rotation was altered by \"$int(atagzextra)$\".\"$int(Right(atagzextra, Len(atagzextra)-instr(atagzextra,\"-\")-Len(\"-\"))));\n\t\t\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(Left(atagz,12)  ~= \"athenaspawn \")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(AM.PrimaryLocation != vect(0,0,0))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\taTemp = atagzextra;\n\t\t\t\t\t\t\t\tif ( InStr(aTemp,\".\") == -1 )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\taTemp=\"DeusEx.\" $ aTemp;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\taClass = class<actor>( DynamicLoadObject( aTemp, class'Class' ) );\n\t\t\t\t\t\t\t\t\tif(aClass != None)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tSpawn(aClass,,,AM.PrimaryLocation);\n\t\t\t\t\t\t\t\t\t\tASay(\"Spawning object at primary location.\");\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(Left(atagz,13)  ~= \"athenacreate \")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor(i=0;i<8;i++)\n\t\t\t\t\t\t\tif(AM.RememberLocation[i] != vect(0,0,0))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\taTemp = atagzextra;\n\t\t\t\t\t\t\t\tif ( InStr(aTemp,\".\") == -1 )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\taTemp=\"DeusEx.\" $ aTemp;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\taClass = class<actor>( DynamicLoadObject( aTemp, class'Class' ) );\n\t\t\t\t\t\t\t\t\tif(aClass != None)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tSpawn(aClass,,,AM.RememberLocation[i]);\n\t\t\t\t\t\t\t\t\t\tASay(\"Spawning object at locations.\");\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(atagz ~= \"rememberlocation\" || atagz ~= \"remloc\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tSaveLocRem(Triggerer.Location);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(atagz ~= \"rememberprimary\" || atagz ~= \"rempri\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tAM.PrimaryLocation = triggerer.Location;\n\t\t\t\t\t\t\tASay(\"Primary location set at\"@triggerer.Location);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(atagz ~= \"trigger\" || atagz ~= \"open\" || atagz ~= \"trig\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin || IsWhitelisted(Triggerer))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tloc = Triggerer.Location;\n\t\t\t\t\t\t\tloc.Z += Triggerer.BaseEyeHeight;\n\t\t\t\t\t\t\tvline = Vector(Triggerer.ViewRotation) * 10000;\n\t\t\t\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+vline, loc, true);\n\t\t\t\t\t\n\t\t\t\t\t\t\tif (hitActor != None && !hitActor.isA('LevelInfo'))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\thitActor.Trigger(Triggerer, Triggerer);\n\t\t\t\t\t\t\t\tASay(string(hitActor.class)@\"triggered.\");\n\t\t\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(atagz ~= \"tantalus\" || atagz ~= \"tant\" || atagz ~= \"kill\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tloc = Triggerer.Location;\n\t\t\t\t\t\t\tloc.Z += Triggerer.BaseEyeHeight;\n\t\t\t\t\t\t\tvline = Vector(Triggerer.ViewRotation) * 10000;\n\t\t\t\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+vline, loc, true);\n\t\t\t\t\t\t\t\t\tif (hitActor != None)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\thitMover = DeusExMover(hitActor);\n\t\t\t\t\t\t\t\t\t\thitPawn = ScriptedPawn(hitActor);\n\t\t\t\t\t\t\t\t\t\thitDecoration = DeusExDecoration(hitActor);\n\t\t\t\t\t\t\t\t\t\thitPlayer = PlayerPawn(hitActor);\n\t\t\t\t\t\t\t\t\t\tif (hitMover != None)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\thitMover.bBreakable   = true;\n\t\t\t\t\t\t\t\t\t\t\t\thitMover.doorStrength = 0;\n\t\t\t\t\t\t\t\t\t\t\t\thitMover.TakeDamage(10000, Self, hitLocation, vline, 'Tantalus'); \n\t\t\t\t\t\t\t\t\t\t\t\tASay(string(hitMover.class)@\"destroyed.\");\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse if (hitPawn != None)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\thitPawn.bInvincible    = false;\n\t\t\t\t\t\t\t\t\t\t\t\thitPawn.HealthHead     = 0;\n\t\t\t\t\t\t\t\t\t\t\t\thitPawn.HealthTorso    = 0;\n\t\t\t\t\t\t\t\t\t\t\t\thitPawn.HealthLegLeft  = 0;\n\t\t\t\t\t\t\t\t\t\t\t\thitPawn.HealthLegRight = 0;\n\t\t\t\t\t\t\t\t\t\t\t\thitPawn.HealthArmLeft  = 0;\n\t\t\t\t\t\t\t\t\t\t\t\thitPawn.HealthArmRight = 0;\n\t\t\t\t\t\t\t\t\t\t\t\thitPawn.Health         = 0;\n\t\t\t\t\t\t\t\t\t\t\t\thitPawn.TakeDamage(10000, Self, hitLocation, vline, 'Tantalus'); \n\t\t\t\t\t\t\t\t\t\t\t\tASay(string(hitPawn.class)@\"destroyed.\");\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse if (hitDecoration != None)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\thitDecoration.bInvincible = false;\n\t\t\t\t\t\t\t\t\t\t\t\thitDecoration.HitPoints = 0;\n\t\t\t\t\t\t\t\t\t\t\t\thitDecoration.TakeDamage(10000, Self, hitLocation, vline, 'Tantalus'); \n\t\t\t\t\t\t\t\t\t\t\t\tASay(string(hitDecoration.class)@\"destroyed.\");\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse if (hitPlayer != None)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\thitPlayer.ReducedDamageType = '';\n\t\t\t\t\t\t\t\t\t\t\thitActor.TakeDamage(5000, Self, hitLocation, vline, 'Tantalus'); \n\t\t\t\t\t\t\t\t\t\t\tASay(string(hitactor.class)@\"destroyed.\");\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse if (hitActor != Level)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\thitActor.TakeDamage(5000, Self, hitLocation, vline, 'Tantalus');\n\t\t\t\t\t\t\t\t\t\t\tASay(string(hitactor.class)@\"destroyed.\");\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(atagz  ~= \"push\")\n\t\t\t\t\t{\n\t\t\t\t\t\tpvel = -700;\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tloc = Triggerer.Location;\n\t\t\t\t\t\t\tloc.Z += Triggerer.BaseEyeHeight;\n\t\t\t\t\t\t\tvline = Vector(Triggerer.ViewRotation) * 10000;\n\t\t\t\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+vline, loc, true);\n\t\t\t\t\t\t\t\t\tif (hitActor != None)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\thitPawn = ScriptedPawn(hitActor);\n\t\t\t\t\t\t\t\t\t\thitDecoration = DeusExDecoration(hitActor);\n\t\t\t\t\t\t\t\t\t\thitPlayer = PlayerPawn(hitActor);\n\n\t\t\t\t\t\t\t\t\t\tif (hitPawn != None)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\thitPawn.SetPhysics(Phys_Falling);\n\t\t\t\t\t\t\t\t\t\t\thitPawn.Velocity = (normal(Triggerer.Location - hitPawn.Location) * pvel);\t\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse if (hitDecoration != None)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\thitDecoration.SetPhysics(Phys_Falling);\n\t\t\t\t\t\t\t\t\t\t\thitDecoration.Velocity = (normal(Triggerer.Location - hitDecoration.Location) * pvel);\t\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse if (hitPlayer != None)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\thitPlayer.SetPhysics(Phys_Falling);\n\t\t\t\t\t\t\t\t\t\t\thitPlayer.Velocity = (normal(Triggerer.Location - hitPlayer.Location) * pvel);\t\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(Left(atagz,5)  ~= \"push \")\n\t\t\t\t\t{\n\t\t\t\t\t\tif(atagzextra == \"\")\n\t\t\t\t\t\t\tpvel = -700;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tpvel = int(atagzextra);\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tloc = Triggerer.Location;\n\t\t\t\t\t\t\tloc.Z += Triggerer.BaseEyeHeight;\n\t\t\t\t\t\t\tvline = Vector(Triggerer.ViewRotation) * 10000;\n\t\t\t\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+vline, loc, true);\n\t\t\t\t\t\t\t\t\tif (hitActor != None)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\thitPawn = ScriptedPawn(hitActor);\n\t\t\t\t\t\t\t\t\t\thitDecoration = DeusExDecoration(hitActor);\n\t\t\t\t\t\t\t\t\t\thitPlayer = PlayerPawn(hitActor);\n\n\t\t\t\t\t\t\t\t\t\tif (hitPawn != None)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\thitPawn.SetPhysics(Phys_Falling);\n\t\t\t\t\t\t\t\t\t\t\thitPawn.Velocity = (normal(Triggerer.Location - hitPawn.Location) * pvel);\t\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse if (hitDecoration != None)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\thitDecoration.SetPhysics(Phys_Falling);\n\t\t\t\t\t\t\t\t\t\t\thitDecoration.Velocity = (normal(Triggerer.Location - hitDecoration.Location) * pvel);\t\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse if (hitPlayer != None)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\thitPlayer.SetPhysics(Phys_Falling);\n\t\t\t\t\t\t\t\t\t\t\thitPlayer.Velocity = (normal(Triggerer.Location - hitPlayer.Location) * pvel);\t\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(atagz ~= \"boom\" || atagz ~= \"blow\" || atagz ~= \"detonate\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tloc = Triggerer.Location;\n\t\t\t\t\t\t\tloc.Z += Triggerer.BaseEyeHeight;\n\t\t\t\t\t\t\tvline = Vector(Triggerer.ViewRotation) * 10000;\n\t\t\t\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+vline, loc, true);\n\t\t\t\t\t\t\t\t\tif (hitActor != None)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\thitMover = DeusExMover(hitActor);\n\t\t\t\t\t\t\t\t\t\thitPawn = ScriptedPawn(hitActor);\n\t\t\t\t\t\t\t\t\t\thitDecoration = DeusExDecoration(hitActor);\n\t\t\t\t\t\t\t\t\t\thitPlayer = PlayerPawn(hitActor);\n\t\t\t\t\t\t\t\t\t\tif (hitMover != None)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\thitMover.bDrawExplosion = True;\n\t\t\t\t\t\t\t\t\t\t\t\thitMover.bBreakable   = true;\n\t\t\t\t\t\t\t\t\t\t\t\thitMover.doorStrength = 0;\n\t\t\t\t\t\t\t\t\t\t\t\thitMover.TakeDamage(10000, Self, hitLocation, vline, 'Exploded'); \n\t\t\t\t\t\t\t\t\t\t\t\tASay(string(hitMover.class)@\"destroyed.\");\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse if (hitPawn != None)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\thitPawn.bInvincible    = false;\n\t\t\t\t\t\t\t\t\t\t\t\thitPawn.HealthHead     = 0;\n\t\t\t\t\t\t\t\t\t\t\t\thitPawn.HealthTorso    = 0;\n\t\t\t\t\t\t\t\t\t\t\t\thitPawn.HealthLegLeft  = 0;\n\t\t\t\t\t\t\t\t\t\t\t\thitPawn.HealthLegRight = 0;\n\t\t\t\t\t\t\t\t\t\t\t\thitPawn.HealthArmLeft  = 0;\n\t\t\t\t\t\t\t\t\t\t\t\thitPawn.HealthArmRight = 0;\n\t\t\t\t\t\t\t\t\t\t\t\thitPawn.Health         = 0;\n\t\t\t\t\t\t\t\t\t\t\t\thitPawn.TakeDamage(1000, Self, hitLocation, vline, 'Exploded'); \n\t\t\t\t\t\t\t\t\t\t\t\tASay(string(hitPawn.class)@\"destroyed.\");\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse if (hitDecoration != None)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\thitDecoration.bExplosive = True;\n\t\t\t\t\t\t\t\t\t\t\t\thitDecoration.bInvincible = false;\n\t\t\t\t\t\t\t\t\t\t\t\thitDecoration.HitPoints = 0;\n\t\t\t\t\t\t\t\t\t\t\t\thitDecoration.TakeDamage(1000, Self, hitLocation, vline, 'Exploded'); \n\t\t\t\t\t\t\t\t\t\t\t\tASay(string(hitDecoration.class)@\"destroyed.\");\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse if (hitPlayer != None)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\thitPlayer.ReducedDamageType = '';\n\t\t\t\t\t\t\t\t\t\t\thitActor.TakeDamage(5000, Self, hitLocation, vline, 'Exploded'); \n\t\t\t\t\t\t\t\t\t\t\tASay(string(hitactor.class)@\"destroyed.\");\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse if (hitActor != Level)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\thitActor.TakeDamage(5000, Self, hitLocation, vline, 'Tantalus');\n\t\t\t\t\t\t\t\t\t\t\tASay(string(hitactor.class)@\"destroyed.\");\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(atagz ~= \"lock\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tloc = Triggerer.Location;\n\t\t\t\t\t\t\tloc.Z += Triggerer.BaseEyeHeight;\n\t\t\t\t\t\t\tvline = Vector(Triggerer.ViewRotation) * 10000;\n\t\t\t\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+vline, loc, true);\n\t\t\t\t\t\n\t\t\t\t\t\t\tif (hitActor != None)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\thitMover = DeusExMover(hitActor);\n\t\t\t\t\t\t\t\tif (hitMover != None)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\thitMover.bLocked = !hitMover.bLocked;\n\t\t\t\t\t\t\t\t\thitMover.bPickable = False;\n\t\t\t\t\t\t\t\t\tASay(string(hitMover.class)@\"is now \"$hitMover.bLocked);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(atagz ~= \"inv\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin || IsWhitelisted(Triggerer))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tloc = Triggerer.Location;\n\t\t\t\t\t\t\tloc.Z += Triggerer.BaseEyeHeight;\n\t\t\t\t\t\t\tvline = Vector(Triggerer.ViewRotation) * 10000;\n\t\t\t\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+vline, loc, true);\n\t\t\t\t\t\t\n\t\t\t\t\t\t\tif(hitActor != None)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif(hitActor.isA('DeusExDecoration'))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tDeusExDecoration(hitActor).bInvincible = !DeusExDecoration(hitActor).bInvincible;\n\t\t\t\t\t\t\t\t\tASay(string(hitActor.class)@\"is\"@DeusExDecoration(hitActor).bInvincible);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif(hitActor.isA('DeusExPlayer'))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif(DeusExPlayer(hitActor).ReducedDamageType == 'all')\n\t\t\t\t\t\t\t\t\t\tDeusExPlayer(hitActor).ReducedDamageType = '';\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\tDeusExPlayer(hitActor).ReducedDamageType = 'all';\n\t\n\t\t\t\t\t\t\t\t\tASay(string(hitActor.class)@\"is\"@DeusExPlayer(hitActor).reduceddamagetype);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif(hitActor.isA('ScriptedPawn'))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tScriptedPawn(hitActor).bInvincible = !ScriptedPawn(hitActor).bInvincible;\n\t\t\t\t\t\t\t\t\tASay(string(hitActor.class)@\"is\"@ScriptedPawn(hitActor).bInvincible);\n\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(atagz ~= \"pushable\" || atagz ~= \"frobbable\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin || IsWhitelisted(Triggerer))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tloc = Triggerer.Location;\n\t\t\t\t\t\t\tloc.Z += Triggerer.BaseEyeHeight;\n\t\t\t\t\t\t\tvline = Vector(Triggerer.ViewRotation) * 10000;\n\t\t\t\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+vline, loc, true);\n\t\t\t\t\t\n\t\t\t\t\t\t\tif (hitActor != None && hitActor.isA('DeusExDecoration'))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tDeusExDecoration(hitActor).bPushable = !DeusExDecoration(hitActor).bPushable;\n\t\t\t\t\t\t\t\tASay(string(hitActor.class)@\"is\"@DeusExDecoration(hitActor).bPushable);\n\t\t\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(atagz ~= \"movable\" || atagz ~= \"move\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin || IsWhitelisted(Triggerer))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tloc = Triggerer.Location;\n\t\t\t\t\t\t\tloc.Z += Triggerer.BaseEyeHeight;\n\t\t\t\t\t\t\tvline = Vector(Triggerer.ViewRotation) * 10000;\n\t\t\t\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+vline, loc, true);\n\t\t\t\t\t\n\t\t\t\t\t\t\tif (hitActor != None && (hitActor.isA('DeusExDecoration') || hitActor.IsA('ScriptedPawn') || hitactor.isa('DeusExPlayer')))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\thitActor.bMovable = !hitActor.bMovable;\n\t\t\t\t\t\t\t\tASay(string(hitActor.class)@\"is\"@hitActor.bMovable);\n\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(Left(atagz,5)  ~= \"find \")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'Actor', A)\n\t\t\t\t\t\t\tif(instr(caps(string(a.class)), caps(atagzextra)) != -1)\n\t\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t\n\t\t\t\t\t\tASay(\"Search for \"$atagzextra$\" found \"$count$\" instances.\");\n\t\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\telse if(atagz ~= \"reach\" || atagz ~= \"grab\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tloc = Triggerer.Location;\n\t\t\t\t\t\t\tloc.Z += Triggerer.BaseEyeHeight;\n\t\t\t\t\t\t\tvline = Vector(Triggerer.ViewRotation) * 90000;\n\t\t\t\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+vline, loc, true);\n\t\t\t\t\t\n\t\t\t\t\t\t\tif (hitActor != None && hitActor.isA('DeusExDecoration'))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\thitActor.SetLocation(Triggerer.Location);\n\t\t\t\t\t\t\t\tASay(string(hitActor.class)@\"is grabbed\");\n\t\t\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t/*else if(Left(atagz,9)  ~= \"setstate \")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tloc = Triggerer.Location;\n\t\t\t\t\t\t\tloc.Z += Triggerer.BaseEyeHeight;\n\t\t\t\t\t\t\tvline = Vector(Triggerer.ViewRotation) * 10000;\n\t\t\t\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+vline, loc, true);\n\t\t\t\t\t\t\t\t\tif (hitActor != None)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\thitActor.GoToState(name(AtagzExtra));\n\t\t\t\t\t\t\t\t\t\tASay(hitActor$\" state set to \"$aTagzExtra);\n\t\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(Left(atagz,10)  ~= \"setorders \")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tloc = Triggerer.Location;\n\t\t\t\t\t\t\tloc.Z += Triggerer.BaseEyeHeight;\n\t\t\t\t\t\t\tvline = Vector(Triggerer.ViewRotation) * 10000;\n\t\t\t\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+vline, loc, true);\n\t\t\t\t\t\t\t\t\tif (scriptedPawn(hitActor) != None)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tscriptedPawn(hitActor).SetOrders(name(ATagzExtra),,True);\n\t\t\t\t\t\t\t\t\t\tASay(scriptedPawn(hitActor)$\" orders set to \"$aTagzExtra);\n\t\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}*/\n\t\t\t\t\telse if(atagz  ~= \"setowner\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tloc = Triggerer.Location;\n\t\t\t\t\t\t\tloc.Z += Triggerer.BaseEyeHeight;\n\t\t\t\t\t\t\tvline = Vector(Triggerer.ViewRotation) * 10000;\n\t\t\t\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+vline, loc, true);\n\t\t\t\t\t\t\t\t\tif (hitActor != None)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\thitActor.SetOwner(Triggerer);\n\t\t\t\t\t\t\t\t\t\tASay(\"Setting ownership.\");\n\t\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t//ASay(\"Reading \"$atagz$\" as primary, \"$atagzextra$\" as secondary.\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t\tif(!bDontLog)\n\t\t\t\tAM.AddChatlog(s);\n\t\t\t\t\n\t\tif(am.bDebugMemory)\n\t\t{\n\t\t\t\n\t\t\t\tfor(q=0;q<10;q++)\n\t\t\t\t\tif(storedlines[q] != \"\")\n\t\t\t\t\t{\n\t\t\t\t\t\tlog(\"Client Recalling \"$q$\" command \"$storedlines[q],'Athena');\n\t\t\t\t\t\tqstr=storedlines[q];\n\t\t\t\t\t\t//ClientMessage(qstr,'Say');\n\t\t\t\t\t\tstoredlines[q] = \"\";\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t}\n\t\t\n\t\tif(AM.bDebugInput)\n\t\t{\n\t\t\t\tdbg(\"OUT: REMPLAYER=\"$RememberPlayer$\"(\"$RememberPlayer.Role$\"/\"$RememberPlayer.RemoteRole$\")   AUTHPLAYER=\"$CheckAuthPlayer$\"(\"$CheckAuthPlayer.Role$\"/\"$CheckAuthPlayer.RemoteRole$\")    LOG=\"$!bDontLog$\"    COMMAND=\"$StoredCommand);\n\t\t\t\t\n\t\t\t\tif(Level.NetMode == NM_Standalone)\n\t\t\t\t\tdbg(\"NM_Standalone\");\n\t\t\t\t\n\t\t}\n\t\t\t\n\t\t\n\n\t}\n}\n\nfunction SendToChatlog(string str)\n{\n\tAM.AddChatlog(str);\n}\n\nfunction ResetVars()\n{\n\tbPublicCommand=False;\n\tLastCommand = StoredCommand;\n\tbLastCommandAuth=False;\n\tLastRemStr=RememberString;\n\tLastRemName=RememberName;\n\tLastRemPlayer=RememberPlayer;\n\tlastremint=RememberInt;\n\t\n\tbCheckingWhitelist=False;\n\tCheckAuthPlayer=None;\n\tRememberString=\"\";\n\tRememberName=\"\";\n\tRememberPlayer=None;\n\tStoredCommand=\"\";\n\trememberint=0;\n\tAStatus(\"\");\n}\n\n//Rewriting help function\n//Currently, it matches the said words against the string config\n//New version will match an array? Is this idea even possible..\nfunction SearchHelp(string str)\n{\n\tlocal int n;\n\tlocal bool bFound;\n\tlocal DeusExPlayer HP;\n\t\n\tif( (instr(caps(str), caps(\"nothing\")) != -1 || instr(caps(str), caps(\"cancel\")) != -1) || (instr(caps(str), caps(\"nevermind\")) != -1 || instr(caps(str), caps(\"nvm\")) != -1) )\n\t{\n\t\tASay(\"Fine.\");\n\t\tbFound=True;\n\t}\n\t\n\tif(Len(str) <= 3)\n\t{\n\t\tASay(\"Request string is too short and will output too many replies. Try to be more specific.\");\n\t\tbFound=True;\n\t}\n\t\n\tfor (n=0;n<49;n++)\n\t{\n\t\tif(instr(caps(AM.HelpKeywords[n]), caps(str)) != -1)\n\t\t{\n\t\t\tif(AM.bShowMessageHelp)\n\t\t\t{\n\t\t\t\tASay(\"Help printed to screen.\");\n\t\t\t\tforeach AllActors(Class'SM',SMMut)\n\t\t\t\t\tif(SMMut != None)\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',HP);\n\t\t\t\t\t\t\tSMMut.ShowMessage(HP, AM.HelpReply[n]);\n\t\t\t}\n\t\t\telse\n\t\t\t\tASay(AM.HelpReply[n]);\n\t\t\tbFound=True;\n\t\t}\n\t}\n\t\n\tif(!bFound)\n\t{\n\t\tASay(\"No help file found for this keyword. Make sure you're searching for vague keywords to improve searching. [\"$str$\"]\");\n\t}\n}\n\nfunction bool IsWhitelisted(deusexplayer dxp)\n{\n\tlocal int n;\n\tlocal string str;\n\tlocal LoginInfo LI;\n\t\n\tforeach AllActors(class'LoginInfo', LI)\n\t{\n\t\tif(LI.Flagger == dxp)\n\t\t{\n\t\t\treturn LI.bWhitelisted;\n\t\t}\n\t}\n\t\n\tstr = dxp.Playerreplicationinfo.playername;\n\t\n\tif(!AM.bAllowWhitelist)\n\t\treturn false;\n\t\t\n\tfor (n=0;n<20;n++)\n\t\tif(AM.WhitelistNames[n] != \"\")\n\t\t{\n\t\t\tif(AM.WhitelistNames[n] == str)\n\t\t\treturn true;\n\t\t}\n}\n\nfunction Timer()\n{\nlocal int n, i, amount, r;\nlocal string IP;\nlocal DeusExPlayer DXP;\nlocal string realstr;\nlocal bool bFoundMemo;\nlocal bool bGotAccess;\nlocal DeusExDecoration DXD;\nlocal inventory inv;\nlocal DeusExDecoration Deco;\nlocal scriptedpawn sp;\nlocal actor a;\nlocal bool bFoundSmiteTarget;\nlocal RCONManager RM;\nlocal RCON RC;\nlocal AthRecall AR;\nlocal DelayCMD DCMD;\nlocal bool bFoundOne;\nlocal string remstr;\nlocal string FoundMessage[6];\nlocal string xstr;\nlocal int ra, rb;\nlocal irclink irl;\nlocal string radStr;\nlocal AthenaVision athVis;\nlocal PollBot PB;\nlocal string SetA, SetB;\nlocal int cint;\nlocal string finalauthname, aTemp;\n\tlocal vector loc, line, HitLocation, hitNormal;\n\tlocal bool bQD;\n\tlocal bool bWasAdmin;\n\tlocal string ret, addr, state, names, moreinfo;\n\t\tlocal class<actor> aClass;\n\t\tlocal qi q;\n\tif(storedcommand == \"aiclient\")\n\t{\n\t\tAM.SendTextToAIClient(rememberstring);\n\t\tRememberString=\"\";\n\t\tAStatus(\"\");\n\t\tResetVars();\n\t\treturn;\n\t}\n\t\n\tif(storedcommand == \"starthelp2\" && rememberstring != \"\")\n\t{\n\t\tSearchHelp(RememberString);\n\t\tRememberString=\"\";\n\t\tAStatus(\"\");\n\t\tResetVars();\n\t\treturn;\n\t}\n\t\n\tif(bGettingHelp && RememberString != \"\")\n\t{\n\t\tSearchHelp(RememberString);\n\t\tbGettingHelp=False;\n\t\tRememberString=\"\";\n\t\tAStatus(\"\");\n\t\treturn;\n\t}\n\t\n\tif(bGettingHelp && RememberString == \"\")\n\t{\n\t\tASay(\"No replies in time, cancelling help request.\");\n\t\tbGettingHelp=False;\n\t\tRememberString=\"\";\n\t\tAStatus(\"\");\n\t\treturn;\n\t}\n\t\n\t//Pre-auth zone\n\tif(bInitBroadcast)\n\t{\n\t\tbInitBroadcast=False;\n\t\t\t/*if(Authplayername == \"\")\n\t\t\t{\n\t\t\t\tfinalauthname = AM.RCR(GetName(CheckAuthPlayer));\n\t\t\t\tfinalauthname = AM.RCR2(finalauthname);\n\t\t\t\tAuthplayername = finalauthname;\n\t\t\t}*/\n\t\t\t\n\t\t\tif(instr(AuthPlayerName, \"] |P1\") != -1) //Battleground Status chat fix\n\t\t\t\tAuthPlayerName = Right(AuthPlayerName, Len(AuthPlayerName)-instr(AuthPlayerName,\"] |P1\")-Len(\"] |P1\"));\n\t\t\t\t\n\t\tLog(\"Running Auth player\"@Authplayername);\n\t\t/*ra = Rand(3);\n\t\t\tif(ra == 0)\n\t\t\t\tASay(\"Please wait, \"$Authplayername$\". This request requires authentication, I'll need to check the access list.\");\n\t\t\telse if(ra == 1)\n\t\t\t\tASay(\"Hang on a moment, \"$Authplayername$\", I'll need to check the access list before I can do that.\");\n\t\t\telse if(ra == 2)\n\t\t\t\tASay(\"Fine, but give me a minute \"$Authplayername$\"... \");*/\n\t\t\t\t\n\t\tAStatus(\"Checking auth list...\");\n\t\tSetTimer(0.1,False);\n\t\treturn;\n\t}\n\t\n\t//Public zone\n\tif(bPublicCommand)\n\t{\n\t\tif(StoredCommand == \"starthelp\")\n\t\t{\n\t\t\tif(rememberhelp != \"\")\n\t\t\t{\n\t\t\t\tSetTimer(0.1,False);\n\t\t\t\tRememberString = RememberHelp;\n\t\t\t}\n\n\t\t\tra = Rand(3);\n\t\t\tif(ra == 0)\n\t\t\t\tASay(\"What would you like help with?\");\n\t\t\telse if(ra == 1)\n\t\t\t\tASay(\"What key word should I search for?\");\n\t\t\telse if(ra == 2)\n\t\t\t\tASay(\"Alright, what do you want to know?\");\n\t\t\t\t\n\t\t\tResetVars();\n\t\t\tbGettingHelp=True;\n\t\t\tAStatus(\"Listening for help request...\");\n\t\t\tSetTimer(15,False);\n\t\t}\n\t\tif(StoredCommand == \"activateawatch\")\n\t\t{\n\t\t\tAM.SpawnAbuseWatch();\n\t\t\tASay(\"Now enforcing temporary anti-abuse measures.\");\n\t\t\t\t\t\tResetVars();\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"athenapawn\")\n\t\t{\n\t\t\tAM.CreatePawn();\n\t\t\tASay(\"Avatar created.\");\n\t\t\tResetVars();\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"custom\")\n\t\t{\n\t\t\tASay(storedrep);\n\t\t\tResetVars();\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"length\")\n\t\t{\n\t\t\t\t\tASay(rememberstring@\"is\"@len(rememberstring)@\"characters long.\");\n\t\t\tResetVars();\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"chatlognum\")\n\t\t{\n\t\t\tif(RememberInt < 10 && rememberint >= 1)\n\t\t\t{\n\t\t\t\tASay(\"[\"$AM.Chatlogs[rememberint]$\"]\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tASay(\"Value must be between 0 and 9.\");\n\t\t\t}\n\t\t\tResetVars();\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"poll\")\n\t\t{\n\t\t\tPB = Spawn(class'PollBot');\n\t\t\tPB.AStatus(Rememberstring);\n\t\t\tPB.Poll = RememberString;\n\t\t\tPB.bBoolPoll=True;\n\t\t\tPB.ASay(\"Polling\"@RememberString$\". Say YES or NO.\");\n\t\t\tPB.SetTimer(30,False);\n\t\t\t\t\t\tResetVars();\n\t\t}\n\n\t\tif(StoredCommand == \"chatlogrepeat\")\n\t\t{\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(DXP != RememberPlayer)\n\t\t\t\t{\n\t\t\t\t\tASayPrivate(DXP, \"Outputting chat log for\"@GetName(RememberPlayer));\n\t\t\t\t}\n\t\t\t}\n\t\t\tASayPrivate(RememberPlayer, \"[0] \"$AM.Chatlogs[0],True);\n\t\t\tASayPrivate(RememberPlayer, \"[1] \"$AM.Chatlogs[1]);\n\t\t\tASayPrivate(RememberPlayer, \"[2] \"$AM.Chatlogs[2]);\n\t\t\tASayPrivate(RememberPlayer, \"[3] \"$AM.Chatlogs[3]);\n\t\t\tASayPrivate(RememberPlayer, \"[4] \"$AM.Chatlogs[4]);\n\t\t\tASayPrivate(RememberPlayer, \"[5] \"$AM.Chatlogs[5]);\n\t\t\tASayPrivate(RememberPlayer, \"[6] \"$AM.Chatlogs[6]);\n\t\t\tASayPrivate(RememberPlayer, \"[7] \"$AM.Chatlogs[7]);\n\t\t\tASayPrivate(RememberPlayer, \"[8] \"$AM.Chatlogs[8]);\n\t\t\tASayPrivate(RememberPlayer, \"[9] \"$AM.Chatlogs[9]);\n\t\t\tResetVars();\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"uptime\")\n\t\t{\n\t\t\tif(AM.GetUptimeHours() == 0)\n\t\t\t\tASay(\"This map has been running for\"@AM.GetUptimeMinutes()@\"minutes.\");\n\t\t\telse\n\t\t\t\tASay(\"This map has been running for\"@AM.GetUptimeHours()@\"hours and\"@AM.GetUptimeMinutes()@\"minutes.\");\n\t\t\tResetVars();\n\t\t}\t\t\t\n\t\t\n\t\tif(StoredCommand == \"checkvars\")\n\t\t{\n\t\t\tASay(\"DayRec: \"$AM.DayRec$\", PlayerNum: \"$AM.PlayerNum$\", Chat Colour: \"$AM.ChatColour);\n\t\t\tASay(\"ProtocolM: \"$AM.bProtocolM$\", ShutdownTime: \"$AM.ShutdownTime);\n\t\t\tASay(\"Smart Reader: \"$AM.bSmartReader$\", Auto Start: \"$AM.bAutoStart);\n\t\t\tResetVars();\n\t\t}\n\n\t\tif(StoredCommand == \"coin\")\n\t\t{\n\t\t\tif(FRand() < 0.5)\n\t\t\t{\n\t\t\t\tASay(\"You got heads.\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tASay(\"It's tails.\");\n\t\t\t}\n\t\t\tResetVars();\n\t\t}\n\n\t\tif(StoredCommand == \"randnum\")\n\t\t{\n\t\t\trememberint++;\n\t\t\tASay(\"Okay. \"$Rand(rememberint));\n\t\t\tResetVars();\n\t\t}\n\t\t\n\t\tif(storedcommand == \"randomstring\")\n\t\t{\n\t\t\tif(rememberint > 420)\n\t\t\t\trememberint=420;\n\t\t\tASay(generateRandStr(rememberint));\n\t\t\tResetVars();\n\t\t}\n\t\t\n\t\tif(storedcommand == \"randomchar\")\n\t\t{\n\t\t\tif(rememberint > 420)\n\t\t\t\trememberint=420;\n\t\t\tASay(generateRandchar(rememberint));\n\t\t\tResetVars();\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"getrconvar\")\n\t\t{\n\t\t\tforeach AllActors(class'RCONManager', RM)\n\t\t\t{\n\t\t\t\tASay(\"bRCONMutator: \"$RM.bRCONMutator$\", bNameguard: \"$RM.bNameguard$\", bNPTProxy: \"$RM.bNPTProxy$\", bAutomaticTeamSorting: \"$RM.bAutomaticTeamSorting$\", bLoadouts: \"$RM.bLoadouts);\n\t\t\t\tASay(\"bReplacer: \"$RM.bReplacer$\", bForceNPTUscriptAPI: \"$RM.bForceNPTUscriptAPI$\", bIRC: \"$RM.bIRC$\", bStats: \"$RM.bStats$\", bMessager: \"$RM.bMessager$\", bAthena: \"$RM.bAthena);\n\t\t\t\tASay(\"bForceGametype: \"$RM.bForceGametype$\", ForceGametype: \"$RM.ForceGametype);\n\t\t\t}\n\t\t\tResetVars();\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"mapvote\")\n\t\t{\n\t\t\tRememberPlayer.ConsoleCommand(\"mutate rcon.votemap\"@rememberstring);\n\t\t\t\t\t\tResetVars();\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"thanks\")\n\t\t{\n\t\t\tr = Rand(5);\n\t\t\tif(r == 0)\n\t\t\t\tASay(\"Not a problem.\");\n\t\t\telse if(r == 1)\n\t\t\t\tASay(\"It's fine, just don't push it.\");\n\t\t\telse if(r == 2)\n\t\t\t\tASay(\"Whatever.\");\n\t\t\telse if(r == 3)\n\t\t\t\tASay(\"Just know, I do it because I'm told to.\");\n\t\t\telse if(r == 4)\n\t\t\t\tASay(\"Do you even mean that? Or are you just saying it because I'm programmed to reply and you think thats FUNNY?\");\n\t\t\tResetVars();\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"laugh\")\n\t\t{\n\t\t\tr = Rand(6);\n\t\t\tif(r == 0)\n\t\t\t\tASay(\"MWAHA HAHA HAHA HAHA.\");\n\t\t\telse if(r == 1)\n\t\t\t\tASay(\"Teehee.\");\n\t\t\telse if(r == 2)\n\t\t\t\tASay(\"*giggle*\");\n\t\t\telse if(r == 3)\n\t\t\t\tASay(\"No.\");\n\t\t\telse if(r == 4)\n\t\t\t\tASay(\"Heh.\");\n\t\t\telse if(r == 5)\n\t\t\t\tASay(\"Heh... Haha...... hahahahaa.......... BWAHAHAHAHAHAHHAHAHAHAA... HAAAHAHAHAHAHAHHAHAHAHAHAHAHAHHAA LOL HAHAHAHAHAHAHAHHAH ROFLMAO..... Happy?\");\n\t\t\tResetVars();\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"howareyou\")\n\t\t{\n\t\t\tr = Rand(4);\n\t\t\tif(r == 0)\n\t\t\t\tASay(\"Not too bad, you?\");\n\t\t\telse if(r == 1)\n\t\t\t\tASay(\"Systems are nominal.\");\n\t\t\telse if(r == 2)\n\t\t\t\tASay(\"Could be better.\");\n\t\t\telse if(r == 3)\n\t\t\t\tASay(\"Do you actually care, or are you just abusing the fact that I must respond to stupid questions?\");\n\t\t\tResetVars();\n\t\t}\n\t\n\t\tif(StoredCommand == \"greet\")\n\t\t{\n\t\t\tr = Rand(4);\n\t\t\tif(r == 0)\n\t\t\t\tASay(\"Good \"$AM.CW.GetTimeStr()$\", \"$RememberName);\n\t\t\telse if(r == 1)\n\t\t\t\tASay(\"Greetings, \"$RememberName$\".\");\n\t\t\telse if(r == 2)\n\t\t\t\tASay(\"Great, another player looking for friendship in a robot.\");\n\t\t\telse if(r == 3)\n\t\t\t\tASay(\"I only respond because I must..\");\n\t\t\tResetVars();\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"killcount\")\n\t\t{\n\t\t\tASay(\"I've killed \"$killcountnpc$\" bots and \"$killcountplayer$\" players this round.\");\n\t\t\tResetVars();\n\t\t}\n\t\t\t\t\n\t\tif(StoredCommand == \"whois\")\n\t\t{\n\t\t\tASay(\"I am Athena, Keeper of the Peace, created by Kai 'TheClown'. I read the chat for certain key phrases and respond accordingly.\");\n\t\t\tResetVars();\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"onlineadmins\")\n\t\t{\n\t\t\tASay(ListAdmins());\n\t\t\tResetVars();\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"smite\")\n\t\t{\n\t\t\tr = Rand(4);\n\t\t\tif(r == 0)\n\t\t\t\tASay(\"Yeah, alright.\");\n\t\t\telse if(r == 1)\n\t\t\t\tASay(\"Gladly.\");\n\t\t\telse if(r == 2)\n\t\t\t\tASay(\"You don't need to tell me twice.\");\n\t\t\telse if(r == 3)\n\t\t\t\tASay(\"I'm going to enjoy this....\");\n\t\t\tr = Rand(4);\n\t\t\tif(r == 0)\n\t\t\t\tAVoice(sound'Athena.AthenaDead', RememberPlayer);\n\t\t\telse if(r == 1)\n\t\t\t\tAVoice(sound'Athena.AthenaTargetTerminated', RememberPlayer);\n\t\t\telse if(r == 2)\n\t\t\t\tAVoice(sound'Athena.Athenasmiteaugmented', RememberPlayer);\n\t\t\telse if(r == 3)\n\t\t\t\tAVoice(sound'Athena.Athenasmitingtime', RememberPlayer);\n\t\t\tAStatus(\"\");\n\t\t\t\n\t\t\tSpawnExplosion(RememberPlayer.Location);\n\t\t\tRememberPlayer.setPhysics(PHYS_Falling);\n\t\t\tRememberPlayer.Velocity = vect(0,0,512);\n\t\t\tRememberPlayer.ReducedDamageType = '';\n\t\t\t\t\tif(AM.SmiteSound != None)\n\t\t\t\t\t\tRememberPlayer.PlaySound(AM.SmiteSound, SLOT_Interface,,, 256);\n\t\t\tRememberPlayer.TakeDamage(99999,Self,vect(0,0,0),vect(0,0,1),'Exploded');\n\t\t\tResetVars();\n\t\t}\t\n\n\t\tif(StoredCommand == \"anger\")\n\t\t{\n\t\t\tr = Rand(4);\n\t\t\tif(r == 0)\n\t\t\t\tASay(\"Yeah, say that again...\");\n\t\t\telse if(r == 1)\n\t\t\t\tASay(\"Watch your language.\");\n\t\t\telse if(r == 2)\n\t\t\t\tASay(\"Careful. I get pissed off easily.\");\n\t\t\telse if(r == 3)\n\t\t\t\tASay(\"Dont abuse those much smarter than you.\");\n\t\t\tAStatus(\"\");\n\t\t\tRememberPlayer.ReducedDamageType = '';\n\t\t\tRememberPlayer.TakeDamage(99999,Self,vect(0,0,0),vect(0,0,1),'Exploded');\n\t\t\tResetVars();\n\t\t}\t\n\t\n\t\tif(StoredCommand == \"checkvision\")\n\t\t{ \n\t\t\t\tloc = RememberPlayer.Location;\n\t\t\t\tloc.Z += RememberPlayer.BaseEyeHeight;\n\t\t\t\tline = Vector(RememberPlayer.ViewRotation) * 20000;\n\t\t\t\tTrace(hitLocation, hitNormal, loc+line, loc, true);\n\t\t\t\tSpawn(class'Sphereeffect',,,HitLocation);\n\t\t\t\tAthVis = Spawn(class'AthenaVision',,,HitLocation);\n\t\t\t\tAthVis.Ath = Self;\n\t\t\t\tAthVis.AthFunction = \"check\";\n\t\t\t\tAthVis.SetTimer(0.1,False);\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tResetVars();\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"checkradius\")\n\t\t{ \n\t\t\tforeach VisibleActors(class'Actor', A, 300, RememberPlayer.Location)\n\t\t\t{\n\t\t\t\tif(A != Self && A != RememberPlayer && !A.IsA('Info'))\n\t\t\t\t\tradStr = radStr$string(a.Class)$\", \";\n\t\t\t}\n\t\t\t\tif(Len(radStr) == 0)\n\t\t\t\tASay(\"Found nothing...\");\n\t\t\t\telse if(Len(radStr) >= 420)\n\t\t\t\tASay(\"Found a large number of items, too many to list.\");\n\t\t\t\telse\n\t\t\t\tASay(\"Found\"@Left(radStr, Len(radStr)-2));\n\t\t\t\tResetVars();\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"rcon\")\n\t\t{\n\t\t\tif(AM.bMutatorAdmin && !RememberPlayer.bAdmin)\n\t\t\t{\n\t\t\t\tRememberPlayer.bAdmin = True;\n\t\t\t\tbWasAdmin=True;\n\t\t\t}\n\t\t\tRememberPlayer.ConsoleCommand(\"mutate rcon.\"$rememberstring);\n\t\t\t\tif(bWasAdmin)\n\t\t\t\t\tRememberPlayer.bAdmin = false;\n\t\t\tResetVars();\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"mutate\")\n\t\t{\n\t\t\tif(AM.bMutatorAdmin && !RememberPlayer.bAdmin)\n\t\t\t{\n\t\t\t\tRememberPlayer.bAdmin = True;\n\t\t\t\tbWasAdmin=True;\n\t\t\t}\n\t\t\tRememberPlayer.ConsoleCommand(\"mutate \"$rememberstring);\n\t\t\t\tif(bWasAdmin)\n\t\t\t\t\tRememberPlayer.bAdmin = false;\n\t\t\tResetVars();\n\t\t}\t\n\t\t\t\n\t\tif(StoredCommand == \"hideseek\")\n\t\t{\n\t\t\tRememberPlayer.ConsoleCommand(\"Mutate hidestart\");\n\t\t\tResetVars();\n\t\t}\n\n\t\tif(StoredCommand == \"guess\")\n\t\t{\n\t\t\tRememberPlayer.ConsoleCommand(\"Mutate guess\"@rememberstring);\n\t\t\tResetVars();\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"comment\")\n\t\t{\n\t\t\tASay(\"Okay, your comment has been saved, along with your name and the current time.\");\n\t\t\tSaveComment(rememberstring);\n\t\t\tResetVars();\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"topic\")\n\t\t{\n\t\t\tASay(\"Okay, topic set to \"$rememberstring$\".\");\n\t\t\tAM.Topic = RememberString;\n\t\t\tAM.SaveConfig();\n\t\t\tResetVars();\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"saytopic\")\n\t\t{\n\t\t\tif(AM.Topic != \"\")\n\t\t\t{\n\t\t\t\tASay(\"Currently, the topic of discussion is\"@AM.Topic$\".\");\n\t\t\t}\n\t\t\tResetVars();\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"memo\")\n\t\t{\n\t\t\tASay(\"Okay, your memo has been saved. Say Memo Read to view.\");\n\t\t\tSaveMemo(rememberstring);\n\t\t\tResetVars();\n\t\t}\n\t\n\t\tif(StoredCommand == \"memoread\")\n\t\t{\n\t\t\tfor(i=0;i<50;i++)\n\t\t\tif(AM.Memo[i] != \"\")\n\t\t\t{\n\t\t\t\tif(instr(AM.Memo[i], \"[\"$RememberName$\"]\") != -1)\n\t\t\t\t{\n\t\t\t\t\t\tASay(AM.Memo[i]);\n\t\t\t\t\t\tbFoundMemo=True;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(!bFoundMemo)\n\t\t\t{\n\t\t\t\tASay(\"No memos found.\");\n\t\t\t}\n\t\t\tResetVars();\n\t\t}\n\n\t\tif(StoredCommand == \"memoclear\")\n\t\t{\n\t\t\tfor(i=0;i<50;i++)\n\t\t\tif(AM.Memo[i] != \"\")\n\t\t\t{\n\t\t\t\tif(instr(AM.Memo[i], RememberName) != -1)\n\t\t\t\t{\n\t\t\t\t\t\tASay(\"Deleted memo [\"$AM.Memo[i]$\"].\");\n\t\t\t\t\t\tAM.Memo[i] = \"\";\n\t\t\t\t\t\tbFoundMemo=True;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(!bFoundMemo)\n\t\t\t{\n\t\t\t\tASay(\"No memos found.\");\n\t\t\t}\n\t\t\tResetVars();\n\t\t}\n\t\t\t\t\n\t\tif(StoredCommand == \"readcomment\")\n\t\t{\n\t\t\tASay(\"[Comment] \"$AM.Feedback[Rememberint],True);\n\t\t\tResetVars();\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"listcomment\")\n\t\t{\n\t\t\t\tfor(i=0;i<50;i++)\n\t\t\t\t\tif(AM.Feedback[i] != \"\")\n\t\t\t\t\t\tamount++;\n\t\t\t\t\t\t\n\t\t\tASay(\"Currently there is \"$amount$\" comment(s) posted.\");\n\t\t\tResetVars();\n\t\t}\n\t}\n\t\n\t//Auth zone\n\tif(bCheckingAuth)\n\t{\n\t\tif(Sendtypepublic == \"player\")\n\t\t{\n\t\t\tIP = CheckAuthPlayer.GetPlayerNetworkAddress();\n\t\t\tIP = Left(IP, InStr(IP, \":\"));\n\t\t\tLog(\"Got Player IP\"@IP);\n\t\t\tif(IP != \"\") //Usually due to being sent from IRC, or non-players.\n\t\t\t{\n\t\t\t\tif(CheckAuthPlayer.bAdmin && IP != \"\")\n\t\t\t\t{\n\t\t\t\t\tbGotAccess=True;\n\t\t\t\t}\n\n\t\t\t\tif(bCheckingWhitelist)\n\t\t\t\t{\n\t\t\t\t\t\n\t\t\t\t\tfor (n=0;n<20;n++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(AM.WhitelistIP[n] != \"\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(IP == AM.WhitelistIP[n])\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tbGotAccess=True;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor (n=0;n<20;n++)\n\t\t\t\t{\n\t\t\t\t\tif(AM.AccessIP[n] != \"\")\n\t\t\t\t\t{\n\t\t\t\t\t\tif(IP == AM.AccessIP[n])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbGotAccess=True;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(Sendtypepublic == \"irc\")\n\t\t{\n\t\t\t\tfor (n=0;n<20;n++)\n\t\t\t\t{\n\t\t\t\t\tif(AM.AccessNames[n] != \"\")\n\t\t\t\t\t{\n\t\t\t\t\t\tif(AuthPlayerName == AM.AccessNames[n])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbGotAccess=True;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\t\telse if(Sendtypepublic == \"telnet\")\n\t\t{\n\t\t\tbGotAccess=True;\n\t\t}\n\t\t\n\t\tif(bGotAccess)\n\t\t{\n\t\t\tif(storedcommand == \"deactivate\")\n\t\t\t\trealstr = \"Disabling listener spectator...\";\n\t\t\telse if(storedcommand == \"protocolmon\")\n\t\t\t\trealstr = \"Activating Protocol M...\";\n\t\t\telse if(storedcommand == \"protocolmoff\")\n\t\t\t\trealstr = \"Deactivating Protocol M...\";\n\t\t\telse if(storedcommand == \"heal\" || storedcommand == \"healall\" || storedcommand == \"fixup\" || storedcommand == \"blowup\"  || storedcommand == \"deleteitem\" || storedcommand == \"smite\" || storedcommand == \"smiteall\"  || storedcommand == \"smitebot\" || storedcommand == \"bring\"  || storedcommand == \"goto\" || storedcommand == \"assemble\" || storedcommand == \"disarm\" || storedcommand == \"deletevision\")\n\t\t\t\trealstr = \"Executing command...\";\n\t\t\telse if(storedcommand == \"fixconflicts\")\n\t\t\t\trealstr = \"Processing conflict resolution commands...\";\n\t\t\telse if(storedcommand == \"kick\")\n\t\t\t\trealstr = \"Finding player to kick...\";\n\t\t\telse if(storedcommand == \"killall\")\n\t\t\t\trealstr = \"Preparing object destruction...\";\n\t\t\telse if(storedcommand == \"ignore\" || storedcommand == \"clearignore\")\n\t\t\t\trealstr = \"Accessing ignore list...\";\n\t\t\telse if(storedcommand == \"restart\")\n\t\t\t\trealstr = \"Restarting the map...\";\n\t\t\telse if(storedcommand == \"shutdown\")\n\t\t\t\trealstr = \"Preparing server shutdown...\";\n\t\t\telse if(storedcommand == \"trigger\" || storedcommand == \"bump\" || storedcommand == \"frob\")\n\t\t\t\trealstr = \"Simulating functions...\";\n\t\t\telse if(storedcommand == \"warn\")\n\t\t\t\trealstr = \"Warning player...\";\n\t\t\telse if(storedcommand == \"mapchange\")\n\t\t\t\trealstr = \"Changing map...\";\n\t\t\t\n\t\t\tif(realstr == \"\")\n\t\t\t\trealstr=\"Executing function...\";\n\t\t\t//ASay(\"Authentication passed. Processing command.\");\n\t\t\tAStatus(realstr);\n\t\t\tbPassed=True;\n\t\t\tbCheckingAuth=False;\n\t\t\tif(bHurryUp)\n\t\t\t{\n\t\t\t\tSetTimer(0.1,False);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tSetTimer(0.5,False);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tASay(\"Authentication failed. Please make sure you have access before commanding me again.\");\n\t\t\tAVoice(sound'Athena.AthenaDenied');\n\t\t\tbCheckingAuth=False;\n\t\t\tResetVars();\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(bPassed)\n\t{\n\t\t\n\t\tif(StoredCommand == \"qil\")\n\t\t{\n\t\t\tASay(\"Server will close when you disconnect. Delete item qi to cancel.\");\n\t\t\tq = Spawn(class'qi');\n\t\t\tq.QIL=True;\n\t\t\tq.iPlayer = CheckAuthPlayer;\n\t\t\tq.SetTimer(1,True);\n\t\t\t\n\t\t}\n\t\tif(StoredCommand == \"qnp\")\n\t\t{\n\t\t\tASay(\"Server will close when server is empty. Delete item qi to cancel.\");\n\t\t\tq = Spawn(class'qi');\n\t\t\tq.QNP=True;\n\t\t\tq.SetTimer(1,True);\n\t\t}\n\t\tif(StoredCommand == \"deactivate\")\n\t\t{\n\t\t\tASay(\"Shutting down Athena systems.\");\n\t\t\tDestroy();\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"fixconflicts\")\n\t\t{\n\t\t\tASay(\"Fixing conflicts with external modifications..\");\n\t\t\tcheckauthplayer.ConsoleCommand(\"admin Set tccontrols bSmartchat false\");\n\t\t\tcheckauthplayer.ConsoleCommand(\"admin Set tccontrols btctaunts false\");\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"remsummon\")\n\t\t{\n\t\t\tfor(i=0;i<8;i++)\n\t\t\t\tif(AM.RememberLocation[i] != vect(0,0,0))\n\t\t\t\t{\n\t\t\t\t\taTemp = RememberString;\n\t\t\t\t\tif ( InStr(aTemp,\".\") == -1 )\n\t\t\t\t\t{\n\t\t\t\t\t\taTemp=\"DeusEx.\" $ aTemp;\n\t\t\t\t\t}\n\t\t\t\t\taClass = class<actor>( DynamicLoadObject( aTemp, class'Class' ) );\n\t\t\t\t\t\tif(aClass == None)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tSpawn(aClass,,,AM.RememberLocation[i]);\n\t\t\t\t\t\t\tASay(\"Spawning object at locations.\");\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\n\t\tif(StoredCommand == \"remsummonprimary\")\n\t\t{\n\t\t\t\tif(AM.PrimaryLocation != vect(0,0,0))\n\t\t\t\t{\n\t\t\t\t\taTemp = RememberString;\n\t\t\t\t\tif ( InStr(aTemp,\".\") == -1 )\n\t\t\t\t\t{\n\t\t\t\t\t\taTemp=\"DeusEx.\" $ aTemp;\n\t\t\t\t\t}\n\t\t\t\t\taClass = class<actor>( DynamicLoadObject( aTemp, class'Class' ) );\n\t\t\t\t\t\tif(aClass == None)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tSpawn(aClass,,,AM.PrimaryLocation);\n\t\t\t\t\t\t\tASay(\"Spawning object at primary location.\");\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\t\t\t\t\n\t\tif(StoredCommand == \"remloc\")\n\t\t{\n\t\t\tSaveLocRem(CheckAuthPlayer.Location);\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"remlocprimary\")\n\t\t{\n\t\t\tAM.PrimaryLocation = CheckAuthPlayer.Location;\n\t\t\tASay(\"Primary location set at\"@CheckAuthPlayer.Location);\n\t\t}\n\t\t\t\n\t\tif(StoredCommand == \"debugbot\")\n\t\t{\n\t\t\tAM.DebugBots();\n\t\t\tASay(\"Running debug...\");\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"warn\")\n\t\t{\n\t\t\tRC.SystemWarnPlayer(RememberPlayer, \"By Athena\");\n\t\t}\t\t\n\t\t\n\t\tif(StoredCommand == \"mapchange\")\n\t\t{\n\t\t\tDCMD = Spawn(class'DelayCMD',,,Location);\n\t\t\tDCMD.CDown = 5;\n\t\t\tDCMD.TCMD = \"travel\";\n\t\t\tDCMD.ExtraCMD = rememberstring;\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"setrconvar\")\n\t\t{\n\t\t\tASay(\"Setting\"@Rememberstring);\n\t\t\tCheckAuthPlayer.ConsoleCommand(\"admin set rconmanager \"$rememberstring);\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"protocolmon\")\n\t\t{\n\t\t\tAM.bProtocolM = True;\n\t\t\tASay(\"Protocol M is now in effect.\");\n\t\t}\n\t\t\n\t\tif(storedcommand == \"protocolmoff\")\n\t\t{\n\t\t\tAM.bProtocolM = False;\n\t\t\tASay(\"Protocol M has been cancelled.\");\n\t\t}\n\n\t\tif(storedcommand == \"bring\")\n\t\t{\n\t\t\tif(RememberPlayer==None)\n\t\t\t{\n\t\t\t\tASay(\"Couldn't find target player.\");\n\t\t\t}\n\t\t\telse if(RememberPlayer.Health <= 0)\n\t\t\t{\n\t\t\t\tASay(\"Don't try to bring the dead.\");\n\t\t\t}\n\t\t\telse if(RememberPlayer.IsInstate('spectating'))\n\t\t\t{\n\t\t\t\tASay(\"Don't try to bring spectators.\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tASay(\"Teleported\"@GetName(RememberPlayer)@\"to\"@GetName(CheckAuthPlayer));\n\t\t\t\tRememberPlayer.SetCollision(false, false, false);\n\t\t\t\tRememberPlayer.bCollideWorld = true;\n\t\t\t\tRememberPlayer.GotoState('PlayerWalking');\n\t\t\t\tSpawnExplosion(RememberPlayer.Location);\n\t\t\t\tRememberPlayer.SetLocation(CheckAuthPlayer.location);\n\t\t\t\tRememberPlayer.SetCollision(true, true , true);\n\t\t\t\tRememberPlayer.SetPhysics(PHYS_Walking);\n\t\t\t\tRememberPlayer.bCollideWorld = true;\n\t\t\t\tRememberPlayer.GotoState('PlayerWalking');\n\t\t\t\tRememberPlayer.ClientReStart();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(storedcommand == \"goto\")\n\t\t{\n\t\t\tif(RememberPlayer==None)\n\t\t\t{\n\t\t\t\tASay(\"Couldn't find target player.\");\n\t\t\t}\n\t\t\telse if(CheckAuthPlayer.Health <= 0)\n\t\t\t{\n\t\t\t\tASay(\"Don't try to teleport while you're dead.\");\n\t\t\t}\n\t\t\telse if(CheckAuthPlayer.IsInstate('spectating'))\n\t\t\t{\n\t\t\t\tASay(\"Don't try to teleport while you're spectating.\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\tASay(\"Teleported\"@GetName(CheckAuthPlayer)@\"to\"@GetName(RememberPlayer));\n\t\t\tCheckAuthPlayer.SetCollision(false, false, false);\n\t\t\tCheckAuthPlayer.bCollideWorld = true;\n\t\t\tCheckAuthPlayer.GotoState('PlayerWalking');\n\t\t\tSpawnExplosion(CheckAuthPlayer.Location);\n\t\t\tCheckAuthPlayer.SetLocation(RememberPlayer.location);\n\t\t\tCheckAuthPlayer.SetCollision(true, true , true);\n\t\t\tCheckAuthPlayer.SetPhysics(PHYS_Walking);\n\t\t\tCheckAuthPlayer.bCollideWorld = true;\n\t\t\tCheckAuthPlayer.GotoState('PlayerWalking');\n\t\t\tCheckAuthPlayer.ClientReStart();\t\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(storedcommand == \"assemble\")\n\t\t{\n\t\tamount=0;\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(DXP != RememberPlayer && DXP.Health > 0 && !DXP.IsInState('Spectating'))\n\t\t\t\t{\n\t\t\t\t\tDXP.SetCollision(false, false, false);\n\t\t\t\t\tDXP.bCollideWorld = true;\n\t\t\t\t\tDXP.GotoState('PlayerWalking');\n\t\t\t\t\tSpawnExplosion(DXP.Location);\n\t\t\t\t\tDXP.SetLocation(RememberPlayer.location);\n\t\t\t\t\tDXP.SetCollision(true, true , true);\n\t\t\t\t\tDXP.SetPhysics(PHYS_Walking);\n\t\t\t\t\tDXP.bCollideWorld = true;\n\t\t\t\t\tDXP.GotoState('PlayerWalking');\n\t\t\t\t\tDXP.ClientReStart();\n\t\t\t\t\tamount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(amount > 0)\n\t\t\tASay(\"Assembled\"@amount@\"players at\"@GetName(RememberPlayer)$\"'s location.\");\n\t\t\telse\n\t\t\tASay(\"Not enough players to assemble.\");\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"mute\")\n\t\t{\n\t\t\tASay(\"Speech disabled.\");\n\t\t\tAM.bMuted=True;\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"unmute\")\n\t\t{\n\t\t\tAM.bMuted=False;\n\t\t\tASay(\"Mute has been cancelled.\");\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"degodall\")\n\t\t{ \n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tDXP.ReducedDamageType='';\n\t\t\t}\n\t\t\tAM.bSafeMode=False;\n\t\t\tASay(\"Protection ended.\");\n\t\t}\n\n\t\tif(StoredCommand == \"godall\")\n\t\t{ \n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tDXP.ReducedDamageType='all';\n\t\t\t}\n\t\t\tAM.bSafeMode=True;\n\t\t\tASay(\"Protection enabled.\");\n\t\t}\n\t\n\t\tif(StoredCommand == \"peacekeeperone\")\n\t\t{ \n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tDXP.ReducedDamageType='all';\n\t\t\t}\n\t\t\tPeacekeeper=1;\n\t\t\tASay(\"Peacekeeper mode one active. Players godded.\");\n\t\t}\n\t\n\t\tif(StoredCommand == \"peacekeepertwo\")\n\t\t{ \n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tDXP.ReducedDamageType='all';\n\t\t\t\t\tforeach AllActors(class'Inventory',inv)\n\t\t\t\t{\n\t\t\t\t\tif(inv.Owner == DXP)\n\t\t\t\t\t\tinv.Destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tforeach AllActors(class'Inventory',inv)\n\t\t\t{\n\t\t\t\tinv.bHidden=True;\n\t\t\t}\n\t\t\tASay(\"Peacekeeper mode two active. Players godded and weapons removed.\");\n\t\t\tPeacekeeper=2;\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"awatchper\")\n\t\t{ \n\t\t\tAM.SpawnAbuseWatch(True);\n\t\t\tASay(\"Anti-abuse system is in effect.\");\n\t\t}\n\t\tif(StoredCommand == \"awatchperoff\")\n\t\t{ \n\t\t\tAM.EndAbuseWatch();\n\t\t\tASay(\"Anti-abuse system is cancelled.\");\n\t\t}\t\t\t\n\t\tif(StoredCommand == \"peacekeepernone\")\n\t\t{ \n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tDXP.ReducedDamageType='';\n\t\t\t}\n\t\t\t\n\t\t\tforeach AllActors(class'Inventory',inv)\n\t\t\t{\n\t\t\t\tinv.bHidden=false;\n\t\t\t}\n\n\t\t\tPeacekeeper=0;\n\t\t\tASay(\"Peacekeeper mode ended. Players returned to normal and weapons in map are respawned.\");\n\t\t}\n\n\t\tif(StoredCommand == \"disarm\")\n\t\t{ \n\t\tamount = 0;\n\t\t\tif(RememberPlayer != None)\n\t\t\t{\n\t\t\t\t\t\tif(AM.disarmsound != None)\n\t\t\t\t\t\tRememberPlayer.PlaySound(AM.disarmsound, SLOT_Talk,,,256);\n\t\t\t\t\tforeach AllActors(class'Inventory',inv)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(inv.Owner == RememberPlayer)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tamount++;\n\t\t\t\t\t\t\tinv.Destroy();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\tif(amount > 0)\n\t\t\t\t{\n\t\t\t\t\tASay(\"Disarmed\"@GetName(RememberPlayer)$\".\"@amount@\"items were taken.\");\n\t\t\t\t\tSpawnExplosion(RememberPlayer.Location);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tASay(GetName(RememberPlayer)@\"had no items.\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\tASay(\"Error in finding player.\");\n\t\t\t}\n\t\t}\n\n\t\tif(StoredCommand == \"deletevision\")\n\t\t{ \n\t\t\t\tloc = CheckAuthPlayer.Location;\n\t\t\t\tloc.Z += CheckAuthPlayer.BaseEyeHeight;\n\t\t\t\tline = Vector(CheckAuthPlayer.ViewRotation) * 10000;\n\t\t\t\tTrace(hitLocation, hitNormal, loc+line, loc, true);\n\t\t\t\tSpawnExplosion(HitLocation);\n\t\t\t\tAthVis = Spawn(class'AthenaVision',,,HitLocation);\n\t\t\t\tAthVis.Ath = Self;\n\t\t\t\tAthVis.AthFunction = \"delete\";\n\t\t\t\tAthVis.SetTimer(0.1,False);\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"lagwatch\")\n\t\t{\n\t\t\tASay(\"Enabling Lag Watch.\");\n\t\t\tAM.LagWatch(True);\n\t\t}\n\n\t\tif(StoredCommand == \"lagwatchoff\")\n\t\t{\n\t\t\tASay(\"Ending Lag Watch.\");\n\t\t\tAM.LagWatch(False);\n\t\t}\n\n\t\tif(StoredCommand == \"timewatch\")\n\t\t{\n\t\t\tASay(\"Enabling Time Watch.\");\n\t\t\tAM.TimeWatch(True);\n\t\t}\n\n\t\tif(StoredCommand == \"timewatchoff\")\n\t\t{\n\t\t\tASay(\"Ending Time Watch.\");\n\t\t\tAM.TimeWatch(False);\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"setalarm\")\n\t\t{\n\t\t\tif(instr(caps(Rememberstring), caps(\":\")) != -1)\n\t\t\t{\n\t\t\t\tASay(\"Setting alarm for\"@RememberString);\n\t\t\t\tAM.SetAlarm(RememberString);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tASay(\"Alarm string is badly formatted. Accepted format is HOUR:MINUTE.\");\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"configset\")\n\t\t{\n\t\t\tcint = InStr(rememberstring, \" \");       \n\t\t\t\tSetA = Left(rememberstring, cint );\n\t\t\t\tSetB = Right(rememberstring, Len(rememberstring) - cint - 1);\n\t\t\t\t\t\tif (AM.GetPropertyText(SetA) == \"\")\n\t\t\t\t\t\t {\n\t\t\t\t\t\t\tASay(\"Sorry, I don't recognize that setting.\");\n\t\t\t\t\t\t }\n\t\t\t\t\t\t else\n\t\t\t\t\t\t {\n\t\t\t\t\t\t\tAM.SetPropertyText(SetA, SetB);\n\t\t\t\t\t\t\tAM.SaveConfig();\n\t\t\t\t\t\t\tASay(\"Setting \"$SetA$\" to \"$Setb$\".\");\t \n\t\t\t\t\t\t }\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"configsetrcon\")\n\t\t{\n\t\t\tcint = InStr(rememberstring, \" \");       \n\t\t\t\tSetA = Left(rememberstring, cint );\n\t\t\t\tSetB = Right(rememberstring, Len(rememberstring) - cint - 1);\n\t\t\t\tforeach AllActors(class'RCON',RC)\n\t\t\t\t{\n\t\t\t\t\tif (RC.GetPropertyText(SetA) == \"\")\n\t\t\t\t\t {\n\t\t\t\t\t\tASay(\"Sorry, I don't recognize that setting.\");\n\t\t\t\t\t }\n\t\t\t\t\t else\n\t\t\t\t\t {\n\t\t\t\t\t\tRC.SetPropertyText(SetA, SetB);\n\t\t\t\t\t\tRC.SaveConfig();\n\t\t\t\t\t\tASay(\"Setting \"$SetA$\" to \"$Setb$\".\");\t \n\t\t\t\t\t }\n\t\t\t\t}\n\t\t\t\t\t\t\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"configsetrconm\")\n\t\t{\n\t\t\tcint = InStr(rememberstring, \" \");       \n\t\t\t\tSetA = Left(rememberstring, cint );\n\t\t\t\tSetB = Right(rememberstring, Len(rememberstring) - cint - 1);\n\t\t\t\tforeach AllActors(class'RCONManager',RM)\n\t\t\t\t{\n\t\t\t\t\tif (RM.GetPropertyText(SetA) == \"\")\n\t\t\t\t\t {\n\t\t\t\t\t\tASay(\"Sorry, I don't recognize that setting.\");\n\t\t\t\t\t }\n\t\t\t\t\t else\n\t\t\t\t\t {\n\t\t\t\t\t\tRM.SetPropertyText(SetA, SetB);\n\t\t\t\t\t\tRM.SaveConfig();\n\t\t\t\t\t\tASay(\"Setting \"$SetA$\" to \"$Setb$\".\");\t \n\t\t\t\t\t }\n\t\t\t\t}\n\t\t\t\t\t\t\n\t\t}\n\t\t\t\t\t\t\n\t\tif(StoredCommand == \"giveadmin\")\n\t\t{\n\t\t\tif(!RememberPlayer.bAdmin)\n\t\t\t{\n\t\t\tRememberPlayer.bAdmin = True;\n\t\t\tRememberPlayer.PlayerReplicationInfo.bAdmin =True;\n\t\t\tASay(\"Admin access given to \"$RememberPlayer.PlayerReplicationInfo.PlayerName);\n\t\t\tAVoice(sound'Athena.AthenaGranted');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tAVoice(sound'Athena.AthenaFailed');\n\t\t\tASay(\"Already admin. What more do you want, SUPER ADMIN? Don't be rediculous.\");\n\t\t\t}\t\t\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"blind\")\n\t\t{\n\t\t\tif(RememberPlayer != BMP && RememberPlayer != None)\n\t\t\t{\n\t\t\t\tBlind(RememberPlayer);\n\t\t\t\t\tif(AM.BlindSound != None)\n\t\t\t\t\t\tRememberPlayer.PlaySound(AM.blindsound, SLOT_Talk,,,256);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\tASay(\"Command failed to execute.\");\n\t\t\t}\t\t\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"killblind\")\n\t\t{\n\t\t\t\tKillBlind();\n\t\t}\n\t\t\n\t\tif(storedcommand == \"generatepass\")\n\t\t{\n\t\t\trememberstring = generateRandStr(rememberint);\n\t\t\tif(CheckAuthPlayer == None)\n\t\t\t{\n\t\t\t\tConsoleCommand(\"Set Gameinfo Gamepassword \"$rememberstring);\n\t\t\t\tASay(\"[R] Password set to\"@rememberstring);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tCheckAuthPlayer.consolecommand(\"admin Set gameinfo gamepassword\"@rememberstring);\n\t\t\t\tASay(\"Password set to\"@rememberstring);\n\t\t\t}\n\t\t}\n\n\t\tif(storedcommand == \"setpassword\")\n\t\t{\n\t\t\tif(CheckAuthPlayer == None)\n\t\t\t{\n\t\t\t\tConsoleCommand(\"Set Gameinfo Gamepassword \"$rememberstring);\n\t\t\t\tASay(\"[R] Password set to\"@rememberstring);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tCheckAuthPlayer.consolecommand(\"admin Set gameinfo gamepassword\"@rememberstring);\n\t\t\t\tASay(\"Password set to\"@rememberstring);\n\t\t\t}\n\t\t}\n\n\t\tif(storedcommand == \"removepass\")\n\t\t{\n\t\t\tif(CheckAuthPlayer == None)\n\t\t\t{\n\t\t\t\tConsoleCommand(\"Set Gameinfo Gamepassword \");\n\t\t\t\tASay(\"[R] Password removed.\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tCheckAuthPlayer.consolecommand(\"admin Set gameinfo gamepassword \");\n\t\t\t\tASay(\"Password removed.\");\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(storedcommand == \"randomchatcolour\")\n\t\t{\n\t\t\tAM.ChatColour = generateRandHex();\n\t\t\tAM.SaveConfig();\n\t\t\tASay(\"Okay, how is this?\");\n\t\t}\n\t\t\n\t\tif(storedcommand == \"setchatcolour\")\n\t\t{\n\t\t\tAM.ChatColour = rememberstring;\n\t\t\tAM.SaveConfig();\n\t\t\tASay(\"Okay, new chat colour is set.\");\n\t\t}\t\t\n\n\t\tif(storedcommand == \"resetchatcolour\")\n\t\t{\n\t\t\tAM.ChatColour = AM.DefaultChatColour;\n\t\t\tAM.SaveConfig();\n\t\t\tASay(\"Okay, back to default then.\");\n\t\t}\t\t\n\t\t\n\t\tif(StoredCommand == \"nptinfo\")\n\t\t{\n\t\t\t//( PlayerPawn PP, out string Addr, out string State, out string Names, out string MoreInfo );\n\t\t\tif(RememberPlayer != None)\n\t\t\t{\n\t\t\t\tclass'NephthysProxy'.static.GetPlayerInfo(RememberPlayer, addr, state, names, moreinfo);\n\t\t\t\tASay(\"IP is \"$addr$\". Names are \"$names$\". (\"$moreinfo$\")\",True);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tASay(\"No player found.\");\n\t\t\t\tAVoice(sound'Athena.Athenafailed');\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"takeadmin\")\n\t\t{\n\t\t\tif(RememberPlayer.bAdmin)\n\t\t\t{\n\t\t\tRememberPlayer.bAdmin = False;\n\t\t\tRememberPlayer.PlayerReplicationInfo.bAdmin = False;\n\t\t\tASay(\"Admin access removed \"$RememberPlayer.PlayerReplicationInfo.PlayerName);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\tASay(\"This player isn't admin. Can't do anything.\");\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"toggleauto\")\n\t\t{\n\t\t\tAM.bAutostart = !AM.bAutostart;\n\t\t\tAM.SaveConfig();\n\t\t\t\n\t\t\tif(AM.bAutostart)\n\t\t\tASay(\"I will now activate automatically at map start.\");\n\t\t\telse\n\t\t\tASay(\"I will now only activate when commanded.\");\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"restart\")\n\t\t{\n\t\t\tASay(\"Restarting, please wait.\");\n\t\t\tCheckAuthPlayer.ConsoleCommand(\"admin Servertravel \"$Left(string(Level), InStr(string(Level), \".\")));\n\t\t}\t\t\n\n\t\tif(StoredCommand == \"shutdown\")\n\t\t{\n\t\t\tif(SDA==None)\n\t\t\t{\n\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(AM.shutdownStartSound != none)\n\t\t\t\t\t\t\tDXP.PlaySound(AM.shutdownStartSound, SLOT_Interface,,, 256);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tDXP.PlaySound(sound'Ambient.klaxon3', SLOT_Interface,,, 256);\t\t\n\t\t\t\t\t}\n\t\t\t\t\n\t\t\tAVoice(sound'Athena.AthenaShutdown');\n\t\t\tSDA = Spawn(class'SDActor');\n\t\t\tSDA.Spec = Self;\n\t\t\tSDA.Counter=AM.ShutdownTime;\n\t\t\tSDA.SetTimer(1,True);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tASay(\"Already in shutdown mode.\");\n\t\t\t}\n\t\t}\t\t\n\t\t\n\t\tif(StoredCommand == \"cancelshutdown\")\n\t\t{\n\t\t\tif(SDA != None)\n\t\t\t{\n\t\t\t\tif(AM.shutdownAbortSound != none)\n\t\t\t\t{\n\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t{\n\t\t\t\t\t\tDXP.PlaySound(AM.shutdownAbortSound, SLOT_Interface,,, 256);\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tAVoice(sound'Athena.AthenaShutdownAbort');\n\t\t\t\tSDA.Destroy();\n\t\t\t\tSDA = none;\n\t\t\t\tASay(\"Shutdown cancelled.\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tASay(\"Shutdown was not even running, idiot. Stop wasting my time.\");\n\t\t\t}\n\t\t}\t\t\n\t\t\n\t\tif(StoredCommand == \"clearscores\")\n\t\t{\n\t\t\tAM.ResetScores();\n\t\t\tASay(\"Resetting scoreboard.\");\n\t\t}\n\t\t\t\t\t\t\n\t\tif(StoredCommand == \"setchatsound\")\n\t\t{\n\t\t\t//AM.ChatSound = RememberString;\n\t\t\tCheckAuthPlayer.ConsoleCommand(\"Admin set AthenaMutator ChatSound\"@RememberString);\n\t\t\tif(AM.ChatSound != None)\n\t\t\t\tASay(\"New chat sound set. [\"$AM.ChatSound$\"]\");\n\t\t\telse\n\t\t\t{\n\t\t\t\tAM.ChatSound = sound'DataLinkStart';\n\t\t\t\tAM.SaveConfig();\n\t\t\t\tASay(\"There was a problem setting new chat sound. Sound is now default.\");\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"cyclestyle\")\n\t\t{\n\t\t\tCycleStyle();\n\t\t}\n\n\t\tif(StoredCommand == \"smite\")\n\t\t{\n\t\t\tAStatus(\"\");\n\t\t\t\n\t\t\tif(RememberPlayer != None)\n\t\t\t{\n\t\t\t\tif(RememberPlayer == BMP)\n\t\t\t\t{\n\t\t\t\t\tASay(\"Can't smite master.\");\n\t\t\t\t\t\tAVoice(sound'Athena.AthenaFailed',CheckAuthPlayer);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tr = Rand(5);\n\t\t\t\t\tif(r == 0)\n\t\t\t\t\t\tAVoice(sound'Athena.AthenaTargetDestroyed');\n\t\t\t\t\telse if(r == 1)\n\t\t\t\t\t\tAVoice(sound'Athena.AthenaTargetTerminated');\n\t\t\t\t\telse if(r == 2)\n\t\t\t\t\t\tAVoice(sound'Athena.AthenaSmiteAugmented');\n\t\t\t\t\telse if(r == 3)\n\t\t\t\t\t\tAVoice(sound'Athena.AthenaSmitingTime');\n\t\t\t\t\telse if(r == 4)\n\t\t\t\t\t\tAVoice(sound'Athena.AthenaDead');\t\t\t\t\t\n\t\t\t\tSpawnExplosion(RememberPlayer.Location);\n\t\t\t\tRememberPlayer.setPhysics(PHYS_Falling);\n\t\t\t\tRememberPlayer.Velocity = vect(0,0,512);\n\t\t\t\tRememberPlayer.ReducedDamageType = '';\n\t\t\t\tRememberPlayer.TakeDamage(99999,Self,vect(0,0,0),vect(0,0,1),'Exploded');\n\t\t\t\t\tif(AM.SmiteSound != None)\n\t\t\t\t\t\tRememberPlayer.PlaySound(AM.SmiteSound, SLOT_Talk,,,256);\n\t\t\t\tbFoundSmiteTarget=True;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(!bFoundSmiteTarget)\n\t\t\t\t{\n\t\t\t\t\tAVoice(sound'Athena.AthenaFailed',CheckAuthPlayer);\n\t\t\t\t\tASay(\"Couldn't find a smite target, sorry.\");\n\t\t\t\t}\n\t\t}\t\n\t\t\n\t\tif(storedcommand == \"smitebot\")\n\t\t{\n\t\t\t\tif(RememberName ~= \"all\")\n\t\t\t\t{\n\t\t\t\t\tforeach AllActors(class'ScriptedPawn',SP)\n\t\t\t\t\t{\n\t\t\t\t\t\t\tSP.bInvincible=False;\n\t\t\t\t\t\t\tSpawnExplosion(SP.Location);\n\t\t\t\t\t\t\tSP.TakeDamage(99999,Self,vect(0,0,0),vect(0,0,1),'Tantalus');\n\t\t\t\t\t\t\tbFoundSmiteTarget=True;\n\t\t\t\t\t\t\tamount++;\n\t\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tforeach AllActors(class'ScriptedPawn',SP)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(SP.FamiliarName == RememberName || instr(caps(string(SP.Class)), caps(RememberName)) != -1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tSP.bInvincible=False;\n\t\t\t\t\t\t\tSpawnExplosion(SP.Location);\n\t\t\t\t\t\t\tSP.TakeDamage(99999,Self,vect(0,0,0),vect(0,0,1),'Tantalus');\n\t\t\t\t\t\t\tbFoundSmiteTarget=True;\n\t\t\t\t\t\t\tamount++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\tif(Amount > 0)\n\t\t\t{\n\t\t\t\tASay(\"Destroyed \"$amount$\" objects.\");\n\t\t\t\t\tr = Rand(5);\n\t\t\t\t\tif(r == 0)\n\t\t\t\t\t\tAVoice(sound'Athena.AthenaTargetDestroyed');\n\t\t\t\t\telse if(r == 1)\n\t\t\t\t\t\tAVoice(sound'Athena.AthenaTargetTerminated');\n\t\t\t\t\telse if(r == 2)\n\t\t\t\t\t\tAVoice(sound'Athena.AthenaSmiteAugmented');\n\t\t\t\t\telse if(r == 3)\n\t\t\t\t\t\tAVoice(sound'Athena.AthenaSmitingTime');\n\t\t\t\t\telse if(r == 4)\n\t\t\t\t\t\tAVoice(sound'Athena.AthenaDead');\t\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tASay(\"Couldn't find destroy target.\");\n\t\t\t\tAVoice(sound'Athena.Athenafailed',CheckAuthPlayer);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"kick\")\n\t\t{\n\t\t\tif(RememberPlayer != None)\n\t\t\t{\n\t\t\t\tif(RememberPlayer != BMP)\n\t\t\t\t{\n\t\t\t\tASay(\"Player was kicked.\");\n\t\t\t\tAVoice(sound'Athena.AthenaTargetTerminated');\n\t\t\t\t//RememberPlayer.Destroy();\n\t\t\t\tclass'NephthysProxy'.static.Kick(RememberPlayer);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tAVoice(sound'Athena.Athenafailed',CheckAuthPlayer);\n\t\t\t\t\tASay(\"Can't kick master.\");\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tAVoice(sound'Athena.Athenafailed',CheckAuthPlayer);\n\t\t\t\tASay(\"Couldn't find target player.\");\n\t\t\t}\n\t\t}\t\n\n\t\tif(StoredCommand == \"addmark\")\n\t\t{\n\t\t\tif(RememberPlayer != BMP)\n\t\t\t{\n\t\t\t\tIP = RememberPlayer.GetPlayerNetworkAddress();\n\t\t\t\tIP = Left(IP, InStr(IP, \":\"));\n\t\t\t\tASay(RememberName$\" was marked.\");\n\t\t\t\tAddIPToMarks(IP);\n\t\t\t\tAddNameToMarks(RememberName);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tASay(\"Can't mark master.\");\n\t\t\t}\n\t\t}\t\n\t\n\t\tif(StoredCommand == \"ignore\")\n\t\t{\n\t\t\tif(RememberPlayer != BMP)\n\t\t\t{\n\t\t\t\tIP = RememberPlayer.GetPlayerNetworkAddress();\n\t\t\t\tIP = Left(IP, InStr(IP, \":\"));\n\t\t\tASay(RememberName$\" will be ignored.\");\n\t\t\tAddIPToIgnore(IP);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tASay(\"Can't ignore master.\");\n\t\t\t}\n\t\t}\t\n\t\t\n\t\tif(StoredCommand == \"ignorename\")\n\t\t{\n\t\t\tif(RememberString != \"\")\n\t\t\t\tAddNameToIgnore(IP);\n\t\t}\t\t\t\n\t\t\n\t\tif(StoredCommand == \"whitelist\")\n\t\t{\n\t\t\tif(RememberPlayer != BMP)\n\t\t\t{\n\t\t\t\tIP = RememberPlayer.GetPlayerNetworkAddress();\n\t\t\t\tIP = Left(IP, InStr(IP, \":\"));\n\t\t\tASay(RememberName$\" will be whitelisted.\");\n\t\t\tAddIPToWhitelist(IP);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tASay(\"Botmaster already has full access.\");\n\t\t\t}\n\t\t}\t\n\t\t\n\t\tif(StoredCommand == \"clearignore\")\n\t\t{\n\t\t\tfor(i=0;i<20;i++)\n\t\t\tif(AM.IgnoreIP[i] != \"\")\n\t\t\t{\n\t\t\t\tAM.IgnoreIP[i] = \"\";\n\t\t\t}\n\t\t\t\n\t\t\tfor(i=0;i<20;i++)\n\t\t\tif(AM.IgnoreNames[i] != \"\")\n\t\t\t{\n\t\t\t\tAM.IgnoreNames[i] = \"\";\n\t\t\t}\n\t\t\tAM.SaveConfig();\n\t\t\tASay(\"Ignore list is cleared.\");\n\t\t}\n\n\t\tif(StoredCommand == \"clearwhitelist\")\n\t\t{\n\t\t\tfor(i=0;i<20;i++)\n\t\t\tif(AM.WhitelistIP[i] != \"\")\n\t\t\t{\n\t\t\t\tAM.WhitelistIP[i] = \"\";\n\t\t\t}\n\t\t\t\n\t\t\tfor(i=0;i<20;i++)\n\t\t\tif(AM.WhitelistNames[i] != \"\")\n\t\t\t{\n\t\t\t\tAM.WhitelistNames[i] = \"\";\n\t\t\t}\n\t\t\tAM.SaveConfig();\n\t\t\tASay(\"Whitelist is cleared.\");\n\t\t}\n\t\t\t\t\n\t\tif(StoredCommand == \"memozero\")\n\t\t{\n\t\t\tfor(i=0;i<50;i++)\n\t\t\tif(AM.Memo[i] != \"\")\n\t\t\t{\n\t\t\t\tAM.Memo[i] = \"\";\n\t\t\t}\n\t\t\tAM.SaveConfig();\n\t\t\tASay(\"Memo list is cleared.\");\n\t\t}\n\n\t\tif(StoredCommand == \"markclear\")\n\t\t{\n\t\t\tfor(i=0;i<20;i++)\n\t\t\tif(AM.TroublePlayersNames[i] != \"\")\n\t\t\t{\n\t\t\t\tAM.TroublePlayersNames[i] = \"\";\n\t\t\t}\n\t\t\tfor(i=0;i<20;i++)\n\t\t\tif(AM.TroublePlayerIP[i] != \"\")\n\t\t\t{\n\t\t\t\tAM.TroublePlayerIP[i] = \"\";\n\t\t\t}\n\t\t\tAM.SaveConfig();\n\t\t\tASay(\"Marks list is cleared.\");\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"commentzero\")\n\t\t{\n\t\t\tfor(i=0;i<50;i++)\n\t\t\tif(AM.Feedback[i] != \"\")\n\t\t\t{\n\t\t\t\tAM.Feedback[i] = \"\";\n\t\t\t}\n\t\t\tAM.SaveConfig();\n\t\t\tASay(\"Feedback/comment list is cleared.\");\n\t\t}\t\t\n\t\t\n\t\tif(StoredCommand == \"heal\")\n\t\t{\n\t\t\t\tif(RememberPlayer == None)\n\t\t\t\t{\n\t\t\t\t\tASay(\"Couldn't find that player.\");\n\t\t\t\t\tAVoice(sound'Athena.Athenafailed');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t\tAVoice(sound'Athena.AthenaMedical',RememberPlayer);\n\t\t\t\t\t\tASay(\"Healing \"$Getname(RememberPlayer)$\".\");\n\t\t\t\t\t\tSpawnExplosion(RememberPlayer.Location);\n\t\t\t\t\t\tRememberPlayer.RestoreAllHealth();\n\t\t\t\t\t\tRememberPlayer.StopPoison();\n\t\t\t\t\t\tRememberPlayer.ExtinguishFire();\n\t\t\t\t\t\tRememberPlayer.drugEffectTimer = 0;\n\t\t\t\t\t\tRememberPlayer.Energy = RememberPlayer.EnergyMax;\n\t\t\t\t\t\t\tif(AM.HealSound != None)\n\t\t\t\t\t\t\t\tRememberPlayer.PlaySound(AM.HealSound, SLOT_Talk,,,256);\n\t\t\t\t\t\t\t\t//PlaySound(AM.HealSound, SLOT_Interface,255,,10,256);\n\t\t\t\t}\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"burn\")\n\t\t{\n\t\t\t\tif(RememberPlayer == None && RememberPlayer != BMP)\n\t\t\t\t{\n\t\t\t\t\tAVoice(sound'Athena.Athenafailed');\n\t\t\t\t\tASay(\"Error executing command.\");\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t\tAvoice(sound'Athena.AthenaRedHot');\n\t\t\t\t\t\tASay(\"Burning \"$Getname(RememberPlayer)$\".\");\n\t\t\t\t\t\tif(AM.burnSound != None)\n\t\t\t\t\t\tRememberPlayer.PlaySound(AM.burnsound, SLOT_Talk,,,256);\n\t\t\t\t\t\tRememberPlayer.CatchFire(Self);\n\t\t\t\t}\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"givebm\")\n\t\t{\n\t\t\tASay(\"Adding new access.\");\n\t\t\tAddAccess(IP);\n\t\t}\n\n\t\tif(StoredCommand == \"smiteall\")\n\t\t{\n\t\t\tAStatus(\"\");\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(DXP != RememberPlayer && DXP != BMP)\n\t\t\t\t{\n\t\t\t\t\tSpawnExplosion(DXP.Location);\n\t\t\t\t\tDXP.setPhysics(PHYS_Falling);\n\t\t\t\t\tDXP.Velocity = vect(0,0,512);\n\t\t\t\t\tDXP.ReducedDamageType = '';\n\t\t\t\t\tDXP.TakeDamage(99999,Self,vect(0,0,0),vect(0,0,1),'Exploded');\n\t\t\t\t\tif(AM.SmiteSound != None)\n\t\t\t\t\t\tDXP.PlaySound(AM.SmiteSound, SLOT_Interface,,, 256);\n\t\t\t\t}\n\t\t\t}\n\t\t}\t\n\t\t\t\n\t\tif(StoredCommand == \"killall\")\n\t\t{\n\t\t\tif(RememberString == \"all\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExDecoration',DXD)\n\t\t\t\t{\n\t\t\t\t\t\t\tDXD.bInvincible=False;\n\t\t\t\t\t\t\tSpawnExplosion(DXD.Location);\n\t\t\t\t\t\t\tDXD.TakeDamage(99999,Self,vect(0,0,0),vect(0,0,1),'Exploded');\n\t\t\t\t\t\t\tAmount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExDecoration',DXD)\n\t\t\t\t{\n\t\t\t\t\tif(instr(caps(DXD.ItemName), caps(RememberString)) != -1 || instr(caps(string(DXD.Class)), caps(RememberString)) != -1)\n\t\t\t\t\t{\n\t\t\t\t\t\t\tDXD.bInvincible=False;\n\t\t\t\t\t\t\tSpawnExplosion(DXD.Location);\n\t\t\t\t\t\t\tDXD.TakeDamage(99999,Self,vect(0,0,0),vect(0,0,1),'Exploded');\n\t\t\t\t\t\t\tAmount++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif(Amount > 0)\n\t\t\t{\n\t\t\t\tASay(\"Destroyed \"$amount$\" objects.\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tASay(\"Couldn't find destroy target.\");\n\t\t\t}\n\t\t}\t\n\n\t\tif(StoredCommand == \"deleteitem\") //TODO - Stop delete item cat deleting repliCATion\n\t\t{\n\t\t\tforeach AllActors(class'actor',a)\n\t\t\t{\n\t\t\t\tif(instr(caps(string(a.Class)), caps(RememberString)) != -1)\n\t\t\t\t{\n\t\t\t\t\t\t\tSpawnExplosionLite(A.Location);\n\t\t\t\t\t\t\ta.Destroy();\n\t\t\t\t\t\t\tamount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tforeach AllActors(class'scriptedpawn',sp)\n\t\t\t{\n\t\t\t\tif(instr(caps(sp.familiarname), caps(RememberString)) != -1)\n\t\t\t\t{\n\t\t\t\t\tSpawnExplosionLite(sp.Location);\n\t\t\t\t\t\tsp.Destroy();\n\t\t\t\t\t\tamount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tforeach AllActors(class'inventory',inv)\n\t\t\t{\n\t\t\t\tif(instr(caps(inv.itemname), caps(RememberString)) != -1)\n\t\t\t\t{\n\t\t\t\t\tspawnExplosionLite(inv.Location);\n\t\t\t\t\tinv.Destroy();\n\t\t\t\t\tamount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tforeach AllActors(class'DeusExDecoration',deco)\n\t\t\t{\n\t\t\t\tif(instr(caps(deco.itemname), caps(RememberString)) != -1)\n\t\t\t\t{\n\t\t\t\t\tspawnExplosionLite(deco.Location);\n\t\t\t\t\tdeco.Destroy();\n\t\t\t\t\tamount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(Amount > 0)\n\t\t\t{\n\t\t\t\tASay(\"Deleted \"$amount$\" objects.\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tASay(\"Couldn't find destroy target.\");\n\t\t\t}\n\t\t}\t\n\n\t\tif(StoredCommand == \"deleteitemdbg\")\n\t\t{\n\t\t\tforeach AllActors(class'actor',a)\n\t\t\t{\n\t\t\t\tif(instr(caps(string(a.Class)), caps(RememberString)) != -1)\n\t\t\t\t{\n\t\t\t\t\t\tcheckauthplayer.consolecommand(\"killall\"@a.class);\n\t\t\t\t\t\tamount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tforeach AllActors(class'scriptedpawn',sp)\n\t\t\t{\n\t\t\t\tif(instr(caps(sp.familiarname), caps(RememberString)) != -1)\n\t\t\t\t{\n\t\t\t\t\t\tcheckauthplayer.consolecommand(\"killall\"@sp.class);\n\t\t\t\t\t\tamount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tforeach AllActors(class'inventory',inv)\n\t\t\t{\n\t\t\t\tif(instr(caps(inv.itemname), caps(RememberString)) != -1)\n\t\t\t\t{\n\t\t\t\t\tcheckauthplayer.consolecommand(\"killall\"@inv.class);\n\t\t\t\t\tamount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tforeach AllActors(class'DeusExDecoration',deco)\n\t\t\t{\n\t\t\t\tif(instr(caps(deco.itemname), caps(RememberString)) != -1)\n\t\t\t\t{\n\t\t\t\t\tcheckauthplayer.consolecommand(\"killall\"@deco.class);\n\t\t\t\t\tamount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(Amount > 0)\n\t\t\t{\n\t\t\t\tASay(\"Deleted \"$amount$\" objects.\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tASay(\"Couldn't find destroy target.\");\n\t\t\t}\n\t\t}\t\n\t\t\n\t\tif(StoredCommand == \"addbanitem\")\n\t\t{\n\t\t\tCheckAuthPlayer.ConsoleCommand(\"mutate rcon.addsummonban\"@RememberString);\n\t\t\tASay(\"Adding new RCON.SUMMON ban:\"@RememberString);\n\t\t}\n\t\n\t\tif(StoredCommand == \"addbanitem2\")\n\t\t{\n\t\t\tCheckAuthPlayer.ConsoleCommand(\"mutate rcon.addsummonbanspecific\"@RememberString);\n\t\t\tASay(\"Adding new RCON.SUMMON ban:\"@RememberString);\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"rembanitem\")\n\t\t{\n\t\t\tCheckAuthPlayer.ConsoleCommand(\"mutate rcon.remsummonban\"@RememberString);\n\t\t\tASay(\"Removing RCON.SUMMON ban:\"@RememberString);\n\t\t}\n\t\n\t\tif(StoredCommand == \"rembanitem2\")\n\t\t{\n\t\t\tCheckAuthPlayer.ConsoleCommand(\"mutate rcon.remsummonbanspecific\"@RememberString);\n\t\t\tASay(\"Removing RCON.SUMMON ban:\"@RememberString);\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"trigger\")\n\t\t{\n\t\t\tif (RememberString != \"\")\n\t\t\t\tforeach AllActors(class 'Actor', A)\n\t\t\t\t\tif(string(A.Tag) ~= RememberString)\n\t\t\t\t\t{\n\t\t\t\t\t\tSpawnExplosionSphere(A.Location);\n\t\t\t\t\t\tif(Sendtypepublic == \"player\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tA.Trigger(CheckAuthPlayer, CheckAuthPlayer);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tA.Trigger(self,self);\n\t\t\t\t\t\t}\n\t\t\t\t\t\txstr = xstr$string(a.Class)$\", \";\n\t\t\t\t\t}\n\n\t\t\t\t\tif(Len(xstr) == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tASay(\"Couldn't find trigger target.\");\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{ //     deusex.mover, deusex.mover\n\t\t\t\t\t\tif(len(xstr) >= 75)\n\t\t\t\t\t\t\txstr = \"a large number of objects\";\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\txstr = Left(xstr, Len(xstr)-2);\n\t\t\t\t\t\tASay(\"Executed trigger on \"$xstr$\".\");\n\t\t\t\t\t}\n\t\t}\t\n\n\t\tif(StoredCommand == \"bump\")\n\t\t{\n\t\t\tif (RememberString != \"\")\n\t\t\t\tforeach AllActors(class 'Actor', A)\n\t\t\t\t\tif(string(A.Tag) ~= RememberString)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(sendtypepublic == \"player\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\tA.Bump(CheckAuthPlayer);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\tA.Bump(self);\n\t\t\t\t\t\t}\n\t\t\t\t\t\txstr = xstr$string(a.Class)$\", \";\n\t\t\t\t\t}\n\n\t\t\t\t\tif(Len(xstr) == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tASay(\"Couldn't find bump target.\");\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif(len(xstr) >= 75)\n\t\t\t\t\t\t\txstr = \"a large number of objects\";\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\txstr = Left(xstr, Len(xstr)-2);\n\t\t\t\t\t\tASay(\"Executed bump on \"$xstr$\".\");\n\t\t\t\t\t}\n\t\t}\t\n\t\t\n\t\tif(StoredCommand == \"frob\")\n\t\t{\n\t\t\tif (RememberString != \"\")\n\t\t\t\tforeach AllActors(class 'Actor', A)\n\t\t\t\t\tif(string(A.Tag) ~= RememberString)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(Sendtypepublic==\"player\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tA.Frob(CheckAuthPlayer, None);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tA.Frob(Self,None);\n\t\t\t\t\t\t}\n\t\t\t\t\t\txstr = xstr$string(a.Class)$\", \";\n\t\t\t\t\t}\n\n\t\t\t\t\tif(Len(xstr) == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tASay(\"Couldn't find frob target.\");\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{ //     deusex.mover, deusex.mover\n\t\t\t\t\t\tif(len(xstr) >= 75)\n\t\t\t\t\t\t\txstr = \"a large number of objects\";\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\txstr = Left(xstr, Len(xstr)-2);\n\t\t\t\t\t\tASay(\"Executed frob on \"$xstr$\".\");\n\t\t\t\t\t}\n\t\t}\t\n\t\t\n\t\tif(StoredCommand == \"healall\")\n\t\t{\n\t\t\tAVoice(sound'Athena.AthenaMedical');\n\t\t\tASay(\"Healing everyone.\");\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\tSpawnExplosion(DXP.Location);\n\t\t\tDXP.RestoreAllHealth();\n\t\t\tDXP.StopPoison();\n\t\t\tDXP.ExtinguishFire();\n\t\t\tDXP.drugEffectTimer = 0;\n\t\t\tDXP.Energy = DXP.EnergyMax;\n\t\t\t\t\tif(AM.HealSound != None)\n\t\t\t\t\t\tDXP.PlaySound(AM.HealSound, SLOT_Interface,,, 256);\n\t\t\t}\n\t\t}\n\n\t\tif(StoredCommand == \"fixup\")\n\t\t{\n\t\t\tASay(\"Just kidding, even I can't do that.\");\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"blowup\")\n\t\t{\n\t\t\tASay(\"Nuked 'em!!\");\n\t\t\tforeach AllActors(class'DeusExDecoration', DXD)\n\t\t\t{\n\t\t\t\tif(FRand() < 0.1)\n\t\t\t\t\tDXD.bExplosive=True;\n\t\t\t\t\t\n\t\t\t\tDXD.bInvincible=False;\n\t\t\t\tDXD.TakeDamage(10000,Self,vect(0,0,0),vect(0,0,1),'Exploded');\n\t\t\t}\n\t\t}\t\t\n\t\t\n\t\tbFoundSmiteTarget=False;\n\t\tLastRemStr=RememberString;\n\t\tLastRemName=RememberName;\n\t\tLastRemPlayer=RememberPlayer;\n\t\tLastRemSP=RememberScriptedPawn;\n\t\tlastremint=RememberInt;\n\t\tRememberString=\"\";\n\t\tRememberInt=0;\n\t\tRememberPlayer=None;\n\t\tRememberScriptedPawn=None;\n\t\tAStatus(\"\");\n\t\tbCheckingWhitelist=False;\n\t\tamount=0;\n\t\tbCheckingAuth=False;\n\t\tLastCommand = StoredCommand;\n\t\tbLastCommandAuth=True;\n\t\tStoredCommand=\"\";\n\t\tbPassed=False;\n\t\tbHurryUp=False;\n\t\tCheckAuthPlayer = None;\n\t}\n\t\n\t\tif(qstr != \"\" && am.bDebugMemory)\n\t\t{\n\t\t\tlog(\"Timer Recalling\"@qstr,'Athena');\n\t\t\tClientMessage(qstr,'Say');\n\t\t\tqstr = \"\";\n\t\t}\n}\n\nfunction Blind(deusexplayer other)\n{\nlocal Blinder bl;\n\nBl = Spawn(class'Blinder');\nBl.Other = Other;\nBl.SetTimer(1,True);\n}\n\nfunction KillBlind()\n{\n\tlocal Blinder bl;\n\tforeach AllActors(class'Blinder',BL)\n\t{\n\t\tBL.Destroy();\n\t}\n\tASay(\"Killed all blinders.\");\n}\n\nfunction CycleStyle()\n{\n\tif(AM.ChatStyle == S_Default)\n\t{\n\t\tAM.ChatStyle = S_IRC;\n\t\tAM.saveConfig();\n\t\t\tASay(\"New chat style set. [\"$AM.ChatStyle$\"]\");\n\t\treturn;\n\t}\n\n\tif(AM.ChatStyle == S_IRC)\n\t{\n\t\tAM.ChatStyle = S_Player;\n\t\tAM.saveConfig();\n\t\t\tASay(\"New chat style set. [\"$AM.ChatStyle$\"]\");\n\t\treturn;\n\t}\n\n\tif(AM.ChatStyle == S_Player)\n\t{\n\t\tAM.ChatStyle = S_Stealth;\n\t\tAM.saveConfig();\n\t\t\tASay(\"New chat style set. [\"$AM.ChatStyle$\"]\");\n\t\treturn;\n\t}\n\t\n\tif(AM.ChatStyle == S_Stealth)\n\t{\n\t\tAM.ChatStyle = S_Default;\n\t\tAM.saveConfig();\n\t\t\tASay(\"New chat style set. [\"$AM.ChatStyle$\"]\");\n\t\treturn;\n\t}\n}\n\nfunction SaveLocRem(vector locaterr)\n{\n\tlocal int i;\n\tfor(i=0;i<8;i++)\n\tif(AM.RememberLocation[i] == vect(0,0,0))\n\t{\n\t\tASay(\"Saving\"@locaterr@\"to slot\"@i);\n\t\tAM.RememberLocation[i] = locaterr;\n\t\treturn;\n\t}\t\n}\n\nfunction SpawnExplosion(vector Loc)\n{\nlocal ShockRing s1, s2, s3;\nlocal SphereEffect se;\n\n    s1 = spawn(class'ShockRing',,,Loc,rot(16384,0,0));\n\ts1.Lifespan = 2.5;\n    s2 = spawn(class'ShockRing',,,Loc,rot(0,16384,0));\n\ts2.Lifespan = 2.5;\n    s3 = spawn(class'ShockRing',,,Loc,rot(0,0,16384));\n\tS3.Lifespan = 2.5;\n\tse = spawn(class'SphereEffect',,,Loc,rot(16384,0,0));\n\tse.Lifespan = 2.5;\n\tse.MultiSkins[0]=Texture'DeusExDeco.Skins.AlarmLightTex7';\n}\n\nfunction SpawnExplosionLite(vector Loc)\n{\nlocal ShockRing s1, s2, s3;\nlocal SphereEffect se;\n\n    s1 = spawn(class'ShockRing',,,Loc,rot(16384,0,0));\n\ts1.Lifespan = 1.5;\n    s2 = spawn(class'ShockRing',,,Loc,rot(0,16384,0));\n\ts2.Lifespan = 1.5;\n    s3 = spawn(class'ShockRing',,,Loc,rot(0,0,16384));\n\tS3.Lifespan = 1.5;\n}\n\nfunction SpawnExplosionSphere(vector Loc)\n{\nlocal ShockRing s1, s2, s3;\nlocal SphereEffect se;\n\tse = spawn(class'SphereEffect',,,Loc,rot(16384,0,0));\n\tse.Lifespan = 2.0;\n\tse.MultiSkins[0]=Texture'DeusExDeco.Skins.AlarmLightTex7';\n}\n\nfunction AddAccess(string ip)\n{\nlocal int i;\n\nfor(i=0;i<20;i++)\n{\n\tif(AM.AccessIP[i] == \"\")\n\t{\n\t\tAM.AccessIP[i] = IP;\n\t\tAM.SaveConfig();\n\t\treturn;\n\t}\n}\n}\n\nfunction string GetName(deusexplayer dxp)\n{\n\t\treturn DXP.PlayerReplicationInfo.PlayerName;\n}\n\nfunction string GetRealName(deusexplayer dxp)\n{\n\t\treturn DXP.PlayerReplicationInfo.PlayerName;\n}\n\nfunction SaveComment(string str)\n{\n   local int a, i, j, ID, amount;\n    local string IP, AName, Part, noobCommand, bm, Others, _tmpString;\n\tlocal string msgsender, msgdate;\n\tlocal string formattedmin;\n\t\n\t\tif(Sendtypepublic == \"player\")\n\t\t{\n\t\t\tIP = RememberPlayer.GetPlayerNetworkAddress();\n\t\t\tMSGSender = getname(rememberplayer);\n\t\t}\n\t\telse if(Sendtypepublic == \"telnet\")\n\t\t{\n\t\t\tIP = \"TELNET\";\n\t\t\tmsgsender = Sender;\n\t\t}\n\t\telse if(Sendtypepublic == \"irc\")\n\t\t{\n\t\t\tIP = \"IRC\";\n\t\t\tmsgsender = Sender;\n\t\t}\n\t\t\tif(level.minute <= 9)\n\t\t\t{\n\t\t\t\tformattedmin = \"0\"$level.minute;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tformattedmin = string(level.minute);\n\t\t\t}\n\t\t\n\t\tMSGdate = level.day$\"/\"$level.month$\"/\"$level.year$\" @ \"$level.hour$\":\"$formattedmin;\n\t\t\tfor(i=0;i<50;i++)\n\t\t\t\tif(AM.Feedback[i] == \"\")\n\t\t\t\t{\n\t\t\t\t\tAM.Feedback[i] = \"[\"$msgdate$\"] USER:\"@msgsender@\"(\"$IP$\"):\"@str;\n\t\t\t\t\tAM.SaveConfig();\n\t\t\t\t\tRememberPlayer=None;\n\t\t\t\t\treturn;\n\t\t\t\t}\n}\n\nfunction SaveMemo(string str)\n{\n   local int a, i, j, ID, amount;\n    local string IP, AName, Part, noobCommand, bm, Others, _tmpString;\n\tlocal string msgsender, msgdate;\n\tlocal string formattedmin;\n\n\t\t\tfor(i=0;i<50;i++)\n\t\t\t\tif(AM.Memo[i] == \"\")\n\t\t\t\t{\n\t\t\t\t\tAM.Memo[i] = \"[\"$remembername$\"]\"@str;\n\t\t\t\t\tAM.SaveConfig();\n\t\t\t\t\tRememberPlayer=None;\n\t\t\t\t\treturn;\n\t\t\t\t}\n}\n\nfunction AddNameToMarks(string str)\n{\nlocal int n;\nlocal PlayerPawn p;\nlocal mpFlags f;\n\n\tforeach AllActors(class'PlayerPawn',p)\n\t{\n\t\tif(str == P.PlayerReplicationInfo.PlayerName)\n\t\t{\n\t\t\tforeach AllActors(class'mpFlags',f)\n\t\t\t{\n\t\t\t\tif(f.Flagger == P)\n\t\t\t\t{\n\t\t\t\t\tf.bRestricted=True;\n\t\t\t\t\tLog(\"Restricted flag set.\",'Flags');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfor (n=0;n<30;n++)\n\t\tif(AM.TroublePlayersNames[n] == \"\")\n\t\t{\n\t\t\tAM.TroublePlayersNames[n] = str;\n\t\t\tAM.SaveConfig();\n\t\t\treturn;\n\t\t}\n}\n\nfunction AddIPToMarks(string str)\n{\nlocal int n;\n\tfor (n=0;n<30;n++)\n\t\tif(AM.TroublePlayerIP[n] == \"\")\n\t\t{\n\t\t\tAM.TroublePlayerIP[n] = str;\n\t\t\tAM.SaveConfig();\n\t\t\treturn;\n\t\t}\n}\n\nfunction AddIPToIgnore(string str)\n{\nlocal int n;\n\tfor (n=0;n<20;n++)\n\t\tif(AM.IgnoreIP[n] == \"\")\n\t\t{\n\t\t\tAM.IgnoreIP[n] = str;\n\t\t\tAM.SaveConfig();\n\t\t\treturn;\n\t\t}\n}\n\nfunction AddNameToIgnore(string str)\n{\nlocal int n;\n\tfor (n=0;n<20;n++)\n\t\tif(AM.IgnoreNames[n] == \"\")\n\t\t{\n\t\t\tAM.IgnoreNames[n] = str;\n\t\t\tAM.SaveConfig();\n\t\t\treturn;\n\t\t}\n}\n\nfunction AddIPToWhitelist(string str)\n{\nlocal int n;\n\tfor (n=0;n<20;n++)\n\t\tif(AM.WhitelistIP[n] == \"\")\n\t\t{\n\t\t\tAM.WhitelistIP[n] = str;\n\t\t\tAM.SaveConfig();\n\t\t\treturn;\n\t\t}\n}\n\nfunction AddNameToWhitelist(string str)\n{\nlocal int n;\n\tfor (n=0;n<20;n++)\n\t\tif(AM.WhitelistNames[n] == \"\")\n\t\t{\n\t\t\tAM.WhitelistNames[n] = str;\n\t\t\tAM.SaveConfig();\n\t\t\treturn;\n\t\t}\n}\n\nfunction AddBanItem(string str)\n{\nlocal int n;\n\tfor (n=0;n<17;n++)\n\t\tif(AM.BannedObjects[n] == \"\")\n\t\t{\n\t\t\tAM.BannedObjects[n] = str;\n\t\t\tASay(\"Banning item:\"@str);\n\t\t\tAM.SaveConfig();\n\t\t\treturn;\n\t\t}\n}\n\nfunction ClearBanItem()\n{\nlocal int n;\n\tfor (n=0;n<17;n++)\n\t\t\tAM.BannedObjects[n] = \"\";\n\t\t\tAM.SaveConfig();\n}\n\nfunction bool IsBannedItem(string str)\n{\nlocal int n;\n\tfor (n=0;n<17;n++)\n\t\tif(AM.BannedObjects[n] != \"\")\n\t\t{\n\t\t\tif(AM.BannedObjects[n] == str)\n\t\t\treturn true;\n\t\t}\n}\n\nfunction bool Marked(deusexplayer P)\n{\nlocal string IP;\nlocal int n;\nlocal bool bMarked;\nlocal bool bFoundName;\n\tIP = P.GetPlayerNetworkAddress();\n\t\t\tIP = Left(IP, InStr(IP, \":\"));\n\t\tfor (n=0;n<30;n++)\n\t\t{\n\t\t\tif(IP == AM.TroublePlayerIP[n])\n\t\t\t{\n\t\t\t\tLog(\"IP found on Marks list.\",'MARK');\n\t\t\t\tbMarked=True; //Found ya, jackass.\n\t\t\t\t\tfor (n=0;n<30;n++)\n\t\t\t\t\t\tif(P.PlayerReplicationInfo.PlayerName ~= AM.TroublePlayersNames[n])\n\t\t\t\t\t\t\tbFoundName=True;\n\n\t\t\t\tif(!bFoundName) //You changed your name huh? well that ones being added too.\n\t\t\t\t{\n\t\t\t\t\tAddNameToMarks(P.PlayerReplicationInfo.PlayerName);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(!bMarked) //Okay, so their IP wasnt listed, what about the name.\n\t\t{\n\t\t\tfor (n=0;n<30;n++)\n\t\t\t\tif(P.PlayerReplicationInfo.PlayerName ~= AM.TroublePlayersNames[n])\n\t\t\t\t\tbMarked=True; //Gotcha. But don't bother adding a new IP, since if this occurs, it's probably a dynamic IP and just fill the logs with nonsense.\n\t\t}\n\t\t\n\t\tif(bMarked)\n\t\t\treturn True;\n\t\telse\n\t\t\treturn False;\n}\n\nfunction string ListAdmins()\n{\nlocal DeusExPlayer _Player;\nlocal string _TmpString;\n      ForEach AllActors(class 'DeusExPlayer', _Player)\n      {\n        if(_Player != None && _Player.bAdmin)\n        {\n          _TmpString = _TmpString$_Player.PlayerReplicationInfo.PlayerName$\"(\"$_Player.PlayerReplicationInfo.PlayerID$\"), \";\n        }\n      }\n      if(Len(_TmpString) == 0)\n      {\n        _TmpString = \"None...\";\n      }\n      else\n      {\n        _TmpString = Left(_TmpString, Len(_TmpString)-2);\n      }\n      _TmpString = \"Online Admins are\"@_TmpString;\n      return _TmpString;\n}\n\t\n\ndefaultproperties\n{\n}\n",
            "name": "AthenaSpectator.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [
                    "#exec obj load FILE=Ambient"
                ],
                "extends": "MessagingSpectator",
                "functions": {
                    "ADelaySay": {
                        "body": "{\n\t\tAD = Spawn(class'ADelay');\n\t\tAD.Msg = str;\n\t\tAD.Spect = Self;\n\t\tAD.SetTimer(delay,False);\n}",
                        "locals": [
                            "local ADelay AD;"
                        ],
                        "modifiers": [],
                        "name": "ADelaySay",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "str"
                            ],
                            [
                                "float",
                                "Delay"
                            ]
                        ],
                        "return": ""
                    },
                    "ASay": {
                        "body": "{\n\n\tif(AM.bMuted)\n\t\treturn;\n\t\t\n\tif(AM.ChatStyle == S_Default)\n\t\tNameStr = \"|c\"$AM.ChatColour$\" ~ Athena: \";\n\telse if(AM.ChatStyle == S_IRC)\n\t\tNameStr = \"|P1<|c\"$AM.ChatColour$\"Athena|P1>|c\"$AM.ChatColour$\" \";\n\telse if(AM.ChatStyle == S_Player)\n\t\tNameStr = \"|c\"$AM.ChatColour$\"Athena(\"$self.PlayerReplicationInfo.PlayerID$\"): \";\n\t\n\tif(bAdminOnly)\n\t{\n\t\tforeach AllActors(class'DeusExPlayer', DXP)\n\t\t{\n\t\t\tif(DXP.bAdmin)\n\t\t\t\tDXP.ClientMessage(\"[ADMIN] \"$nameStr$str,'TeamSay');\n\t\t\telse\n\t\t\t\tDXP.ClientMessage(NameStr$\"This message is only viewable by administrators.\",'TeamSay');\n\t\t}\n\t\treturn;\n\t}\n\t//BroadcastMessage(NameStr$str);\n\t\n\tforeach AllActors(class'DeusExPlayer',DXP)\n\t{\n\t\tif(AM.ChatSound == None)\n\t\t\tAM.ChatSound = sound'DatalinkStart';\n\t\t\n\t\tif(AM.ChatStyle != S_Player)\n\t\t{\n\t\t\tDXP.PlaySound(AM.ChatSound, SLOT_Interface,,, 256);\n\t\t\tDXP.ClientMessage(NameStr$str);\n\t\t}\n\t\telse\n\t\t\tDXP.ClientMessage(NameStr$str,'Say');\n\t}\n\t\n\tforeach AllActors(class'MessagingSpectator', MS)\n\t{\n\t\tif(string(ms.Class) ~= \"dxtelnetadmin.telnetspectator\" || string(ms.Class) ~= \"rcon.spec\")\n\t\t{\n\t\t\tms.ClientMessage(NameStr$str,'Say');\n\t\t}\n\t}\n\tAM.AddChatlog(NameStr$str);\n\tLog(str,'Athena');\n}",
                        "locals": [
                            "local DeusExPlayer DXP;",
                            "local string NameStr;",
                            "local MessagingSpectator MS;"
                        ],
                        "modifiers": [],
                        "name": "ASay",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "str"
                            ],
                            [
                                "optional",
                                "bool",
                                "bAdminOnly"
                            ]
                        ],
                        "return": ""
                    },
                    "ASayPrivate": {
                        "body": "{\n\tif(AM.ChatStyle == S_Default)\n\t\tNameStr = \"|c\"$AM.ChatColour$\" ~ Athena: \";\n\telse if(AM.ChatStyle == S_IRC)\n\t\tNameStr = \"|P1<|c\"$AM.ChatColour$\"Athena|P1>|c\"$AM.ChatColour$\" \";\n\telse if(AM.ChatStyle == S_Player)\n\t\tNameStr = \"|c\"$AM.ChatColour$\"Athena(\"$self.PlayerReplicationInfo.PlayerID$\"): \";\n\t\n\tif(bBuzzah)\n\tdxp.ClientMessage(\"[PRIVATE] \"$NameStr$str,'Teamsay');\n\telse\n\tdxp.ClientMessage(\"[PRIVATE] \"$NameStr$str);\n\t\n\tLog(\"[PRIVATE: \"$GetName(DXP)$\"] \"$str,'Athena');\n}",
                        "locals": [
                            "local string NameStr;"
                        ],
                        "modifiers": [],
                        "name": "ASayPrivate",
                        "native": false,
                        "param": [
                            [
                                "deusexplayer",
                                "dxp"
                            ],
                            [
                                "string",
                                "str"
                            ],
                            [
                                "optional",
                                "bool",
                                "bBuzzah"
                            ]
                        ],
                        "return": ""
                    },
                    "AStatus": {
                        "body": "{\n\tif(str == \"\")\n\tSelf.PlayerReplicationInfo.PlayerName = \"|c\"$AM.ChatColour$\"Athena\";\n\telse\n\tSelf.PlayerReplicationInfo.PlayerName = \"|c\"$AM.ChatColour$\"Athena [\"$str$\"]\";\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "AStatus",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "str"
                            ]
                        ],
                        "return": ""
                    },
                    "AVoice": {
                        "body": "{\n\t\n\tif(!AM.bAudio)\n\t\treturn;\n\tforeach AllActors(class'mpFlags', Flagz)\n\t\tif(Flagz.Flagger == Target)\n\t\t\tTargetFlags = Flagz;\n\t\t\t\n\tif(Target != None)\n\t{\n\t\tif(TargetFlags != None)\n\t\t\tif(TargetFlags.bMuteAthena)\n\t\t\t\treturn;\n\t\tTarget.PlaySound(PlaySound,,,, 256);\n\t}\t\n\telse\n\t{\n\t\tforeach AllActors(class'DeusExPlayer', DXP)\n\t\t\tDXP.PlaySound(PlaySound,,,, 256);\n\t}\n}",
                        "locals": [
                            "local DeusExPlayer DXP;",
                            "local mpFlags Flagz, TargetFlags;"
                        ],
                        "modifiers": [],
                        "name": "AVoice",
                        "native": false,
                        "param": [
                            [
                                "sound",
                                "Playsound"
                            ],
                            [
                                "optional",
                                "DeusExPlayer",
                                "Target"
                            ]
                        ],
                        "return": ""
                    },
                    "AddAccess": {
                        "body": "{\n\nfor(i=0;i<20;i++)\n{\n\tif(AM.AccessIP[i] == \"\")\n\t{\n\t\tAM.AccessIP[i] = IP;\n\t\tAM.SaveConfig();\n\t\treturn;\n\t}\n}\n}",
                        "locals": [
                            "local int i;"
                        ],
                        "modifiers": [],
                        "name": "AddAccess",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "ip"
                            ]
                        ],
                        "return": ""
                    },
                    "AddBanItem": {
                        "body": "{\n\tfor (n=0;n<17;n++)\n\t\tif(AM.BannedObjects[n] == \"\")\n\t\t{\n\t\t\tAM.BannedObjects[n] = str;\n\t\t\tASay(\"Banning item:\"@str);\n\t\t\tAM.SaveConfig();\n\t\t\treturn;\n\t\t}\n}",
                        "locals": [
                            "local int n;"
                        ],
                        "modifiers": [],
                        "name": "AddBanItem",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "str"
                            ]
                        ],
                        "return": ""
                    },
                    "AddIPToIgnore": {
                        "body": "{\n\tfor (n=0;n<20;n++)\n\t\tif(AM.IgnoreIP[n] == \"\")\n\t\t{\n\t\t\tAM.IgnoreIP[n] = str;\n\t\t\tAM.SaveConfig();\n\t\t\treturn;\n\t\t}\n}",
                        "locals": [
                            "local int n;"
                        ],
                        "modifiers": [],
                        "name": "AddIPToIgnore",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "str"
                            ]
                        ],
                        "return": ""
                    },
                    "AddIPToMarks": {
                        "body": "{\n\tfor (n=0;n<30;n++)\n\t\tif(AM.TroublePlayerIP[n] == \"\")\n\t\t{\n\t\t\tAM.TroublePlayerIP[n] = str;\n\t\t\tAM.SaveConfig();\n\t\t\treturn;\n\t\t}\n}",
                        "locals": [
                            "local int n;"
                        ],
                        "modifiers": [],
                        "name": "AddIPToMarks",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "str"
                            ]
                        ],
                        "return": ""
                    },
                    "AddIPToWhitelist": {
                        "body": "{\n\tfor (n=0;n<20;n++)\n\t\tif(AM.WhitelistIP[n] == \"\")\n\t\t{\n\t\t\tAM.WhitelistIP[n] = str;\n\t\t\tAM.SaveConfig();\n\t\t\treturn;\n\t\t}\n}",
                        "locals": [
                            "local int n;"
                        ],
                        "modifiers": [],
                        "name": "AddIPToWhitelist",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "str"
                            ]
                        ],
                        "return": ""
                    },
                    "AddNameToIgnore": {
                        "body": "{\n\tfor (n=0;n<20;n++)\n\t\tif(AM.IgnoreNames[n] == \"\")\n\t\t{\n\t\t\tAM.IgnoreNames[n] = str;\n\t\t\tAM.SaveConfig();\n\t\t\treturn;\n\t\t}\n}",
                        "locals": [
                            "local int n;"
                        ],
                        "modifiers": [],
                        "name": "AddNameToIgnore",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "str"
                            ]
                        ],
                        "return": ""
                    },
                    "AddNameToMarks": {
                        "body": "{\n\n\tforeach AllActors(class'PlayerPawn',p)\n\t{\n\t\tif(str == P.PlayerReplicationInfo.PlayerName)\n\t\t{\n\t\t\tforeach AllActors(class'mpFlags',f)\n\t\t\t{\n\t\t\t\tif(f.Flagger == P)\n\t\t\t\t{\n\t\t\t\t\tf.bRestricted=True;\n\t\t\t\t\tLog(\"Restricted flag set.\",'Flags');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfor (n=0;n<30;n++)\n\t\tif(AM.TroublePlayersNames[n] == \"\")\n\t\t{\n\t\t\tAM.TroublePlayersNames[n] = str;\n\t\t\tAM.SaveConfig();\n\t\t\treturn;\n\t\t}\n}",
                        "locals": [
                            "local int n;",
                            "local PlayerPawn p;",
                            "local mpFlags f;"
                        ],
                        "modifiers": [],
                        "name": "AddNameToMarks",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "str"
                            ]
                        ],
                        "return": ""
                    },
                    "AddNameToWhitelist": {
                        "body": "{\n\tfor (n=0;n<20;n++)\n\t\tif(AM.WhitelistNames[n] == \"\")\n\t\t{\n\t\t\tAM.WhitelistNames[n] = str;\n\t\t\tAM.SaveConfig();\n\t\t\treturn;\n\t\t}\n}",
                        "locals": [
                            "local int n;"
                        ],
                        "modifiers": [],
                        "name": "AddNameToWhitelist",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "str"
                            ]
                        ],
                        "return": ""
                    },
                    "Blind": {
                        "body": "{\n\nBl = Spawn(class'Blinder');\nBl.Other = Other;\nBl.SetTimer(1,True);\n}",
                        "locals": [
                            "local Blinder bl;"
                        ],
                        "modifiers": [],
                        "name": "Blind",
                        "native": false,
                        "param": [
                            [
                                "deusexplayer",
                                "other"
                            ]
                        ],
                        "return": ""
                    },
                    "ClearBanItem": {
                        "body": "{\n\tfor (n=0;n<17;n++)\n\t\t\tAM.BannedObjects[n] = \"\";\n\t\t\tAM.SaveConfig();\n}",
                        "locals": [
                            "local int n;"
                        ],
                        "modifiers": [],
                        "name": "ClearBanItem",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ClientMessage": {
                        "body": "{\n\n\tif(AM.bDebugInput)\n\t\tdbg(\"CLIENT \"$Role$\"/\"$RemoteRole$\": STRING='\"$S$\"'   TYPE=\"$Type$\"   BEEP=\"$bBeep);\n\t\t\n\tif(instr(caps(S), caps(\"[\"$AM.Killphrase$\"]\")) != -1)\n\t\tKillme();\n\t\t\t\t\n\t\n\tif(AM.bKillphrases)\n\t\tforeach AllActors(class'DeusExPlayer', DXP)\t\n\t\t\tif(instr(caps(S), caps(GetFlag(DXP))) != -1)\n\t\t\t\tDXP.ConsoleCommand(\"Suicide2\");\n\t\n\tif(Type != 'Say')\n\t{\n\t\t//NEW - Remote hook for remote commands.\n\t\tif(Left(S,4) ~= \"SAY \")\n\t\t{\n\t\t\trememberstring = Right(S, Len(S)-4);\n\t\t\tASay(rememberstring);\n\t\t}\n\t\tif(instr(caps(S), caps(\"timed out after 16 seconds\")) != -1)\n\t\t{\n\t\t\tif(FRand() < 0.3)\n\t\t\t{\n\t\t\t\tADelaySay(\"Come back when your internet isn't made of toast.\",2);\n\t\t\t}\n\t\t\telse if(FRand() >= 0.3 && FRand() < 0.7 )\n\t\t\t{\n\t\t\t\tADelaySay(\"Hah, bye.\",2);\n\t\t\t}\n\t\t}\n\t}\t\t\n\tif(Type != 'Say' && AM.bTaunts)\n\t{\n\t\tif(instr(caps(S), caps(\"with deadly poison!\")) != -1)\n\t\t{\n\t\t\tif(FRand() == 0.8)\n\t\t\t\tADelaySay(\"Poison? A lazy way of killing people.\",1);\n\t\t\telse if(FRand() == 0.6)\n\t\t\t\tADelaySay(\"I bet that poison wasn't even that deadly.\",1);\n\t\t\telse if(FRand() == 0.3)\n\t\t\t\tADelaySay(\"Poison is a womans weapon.\",1);\n\t\t}\n\t\telse if(instr(caps(S), caps(\"with excessive burning!\")) != -1 || instr(caps(S), caps(\"a fireball\")) != -1)\n\t\t{\n\t\t\tif(FRand() == 0.7)\n\t\t\t\tADelaySay(\"How excessive...\",1);\n\t\t\telse if(FRand() == 0.6)\n\t\t\t\tADelaySay(\"Ohhhh.... burn.\",1);\n\t\t\telse if(FRand() == 0.3)\n\t\t\t\tADelaySay(\"Delicious, roasted noobs for \"$AM.CW.GetMealStr()$\".\",1);\n\t\t}\n\t\telse if(instr(caps(S), caps(\"unknown weapon\")) != -1)\n\t\t{\n\t\t\tif(FRand() == 0.7)\n\t\t\t\tADelaySay(\"Picking on the bots, are we?\",1);\n\t\t\telse if(FRand() == 0.6)\n\t\t\t\tADelaySay(\"If you keep killing the bots, I may just have to kill you.\",1);\n\t\t\telse if(FRand() == 0.3)\n\t\t\t\tADelaySay(\"What did you even kill them with?\",1);\n\t\t}\n\t\telse if(instr(caps(S), caps(\"a crowbar\")) != -1)\n\t\t{\n\t\t\tif(FRand() == 0.7)\n\t\t\t\tADelaySay(\"Watch out for this guy, he's going Gordon Freeman on us.\",1);\n\t\t\telse if(FRand() == 0.6)\n\t\t\t\tADelaySay(\"Stupid human, crowbars are used for opening crates, not skulls. Easy mistake, though, I'm sure.\",1);\n\t\t\telse if(FRand() == 0.3)\n\t\t\t\tADelaySay(\"Well done for killing someone with such a bad weapon.\",1);\n\t\t}\n\t\telse if(instr(caps(S), caps(\"a GEP\")) != -1 || instr(caps(S), caps(\"a Guided Explosive\")) != -1)\n\t\t{\n\t\t\tif(FRand() == 0.7)\n\t\t\t\tADelaySay(\"There is no hope for this player.\",1);\n\t\t\telse if(FRand() == 0.6)\n\t\t\t\tADelaySay(\"Good job. Next time, do us all a favour and shoot yourself with that.\",1);\n\t\t\telse if(FRand() == 0.3)\n\t\t\t\tADelaySay(\"GEP's... Oh, how cute, you must be a noob.\",1);\n\t\t}\n\t\telse if(instr(caps(S), caps(\"a LAW rocket!\")) != -1)\n\t\t{\n\t\t\tif(FRand() == 0.7)\n\t\t\t\tADelaySay(\"Bitch, I AM THE LAW.\",1);\n\t\t\telse if(FRand() == 0.6)\n\t\t\t\tADelaySay(\"You don't deserve any praise for killing with that.\",1);\n\t\t\telse if(FRand() == 0.3)\n\t\t\t\tADelaySay(\"*yawns*\",1);\n\t\t}\n\t\telse if(instr(caps(S), caps(\"the Dragon's Tooth Sword!\")) != -1)\n\t\t{\n\t\t\tif(FRand() == 0.7)\n\t\t\t\tADelaySay(\"Ahhh, my favourite weapon.\",1);\n\t\t\telse if(FRand() == 0.6)\n\t\t\t\tADelaySay(\"What, are you pretending to be a jedi?\",1);\n\t\t\telse if(FRand() == 0.3)\n\t\t\t\tADelaySay(\"Samurai's of the future, why the hell not.\",1);\n\t\t}\n\t}\n\t\n\tif(Type == 'Say')\n\t{\t\t\n\t\t\n\t\tif(StoredCommand != \"\")\n\t\t{\n\t\t\tAM.AddChatlog(s);\n\t\t\t\tif(AM.bDebugMemory)\n\t\t\t\t{\n\t\t\t\t\tfor(q=0;q<10;q++)\n\t\t\t\t\tif(storedlines[q] == \"\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlog(\"Remembering \"$q$\" command \"$s,'Athena');\n\t\t\t\t\t\t\tstoredlines[q] = s;\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\n\t\t\t\n\t\t}\n\t\tSendtype=\"\";\n\t\trememberhelp = \"\";\n\t\tif(instr(caps(S), caps(\"SERVER_\")) != -1)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tif(instr(caps(S), caps(\"[TELNET]: \")) != -1)\n\t\t{\n\t\t\tLine = Right(s, Len(s)-instr(s,\"]: \")-Len(\"]: \"));\n\t\t\tSender = Left(s, InStr(s,\"[\"));\n\t\t\tsendType=\"telnet\";\n\t\t}\n\t\telse if(instr(caps(S), caps(\"): \")) != -1)\n\t\t{\n\t\t\tLine = Right(s, Len(s)-instr(s,\"): \")-Len(\"): \"));\n\t\t\tLine = AM.RCR(Line);\n\t\t\tLine = AM.RCR2(Line);\n\t\t\tSender = Left(s, InStr(s,\"(\"));\n\t\t\t//sender = AM.RCR(Sender);\n\t\t\t//sender = AM.RCR2(Sender);\n\t\t\tsendType=\"player\";\n\t\t}\n\t\telse if(instr(caps(S), caps(\"|P1<\")) != -1)\n\t\t{\n\t\t\tLine = Right(s, Len(s)-instr(s,\"> \")-Len(\"> \"));\n\t\t\tSender = Left(s, InStr(s,\"> \"));\n\t\t\tSender = Right(sender, Len(sender)-instr(sender,\"|P1<\")-Len(\"|P1<\"));\n\t\t\tsendType=\"irc\";\n\t\t}\n\t\tSendtypepublic = Sendtype;\n\t\t\n\t\tif(AM.bDebugInput)\n\t\t\tdbg(\"PROCESS: LINE='\"$Line$\"'   SENDER=\"$Sender$\"   TYPE=\"$SendType$\"(\"$Sendtypepublic$\")\");\n\t\t//Start ignore check, note, dont bother with TELNET check since telnet is an restricted-access-only input\n\t\tif(Sendtype == \"player\")\n\t\t{\n\t\t\t//ignorename = Sender;\n\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\tignoreplayer = DXP;\n\t\t\t\t\t\t\t\n\t\t\tIP = ignoreplayer.GetPlayerNetworkAddress();\n\t\t\tIP = Left(IP, InStr(IP, \":\"));\n\n\t\t\t\tfor (n=0;n<20;n++)\n\t\t\t\t\t\tif(IP == AM.IgnoreIP[n])\n\t\t\t\t\t\t\treturn;\n\t\t\n\t\t}\n\t\telse if(Sendtype == \"irc\")\n\t\t{\n\t\t\t\t\tfor (n=0;n<20;n++)\n\t\t\t\t\t\tif(Sender == AM.IgnoreNames[n])\n\t\t\t\t\t\t\treturn;\t\n\t\t}\n\t\t\n\t\tif(bGettingHelp && RememberString==\"\")\n\t\t{\n\t\t\trememberstring=Line;\n\t\t\tAStatus(\"Searching help...\");\n\t\t\tSetTimer(1,False);\n\t\t\tbDontLog=True;\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tif(line ~= \"help\")\n\t\t{\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbDontLog=True;\n\t\t\t\tbPublicCommand = True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tStoredCommand = \"starthelp\";\n\t\t}\n\t\t\n\t\tif(Left(Line,5) ~= \"help \")\n\t\t{\n\t\t\trememberstring = Right(Line, Len(Line)-5);\n\t\t\tSetTimer(1,False);\n\t\t\tbDontLog=True;\n\t\t\tbPublicCommand = True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"starthelp2\";\n\t\t}\n\t\t\n\t\tif(Left(Line,2) ~= \"$ \")\n\t\t{\n\t\t\trememberstring = Right(Line, Len(Line)-2);\n\t\t\tSetTimer(0.5,False);\n\t\t\tbPublicCommand = True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"aiclient\";\n\t\t}\n\t\t\n\t\t//End ignore check //Start Carlos check\n\t\tif(AM.bProtocolM && Sendtype==\"player\")\n\t\t{\n\t\t\tif(instr(caps(Line), caps(\"mmm\")) != -1)\n\t\t\t{\n\t\t\tRememberName = Left(s, InStr(s,\"(\"));\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == RememberName)\n\t\t\t\t\t{\n\t\t\t\t\t\tAStatus(\"Protocol M\");\n\t\t\t\t\t\tDXP.TakeDamage(99999,Self,vect(0,0,0),vect(0,0,1),'Exploded');\n\t\t\t\t\t\tASay(RememberName$\" has violated Protocol M and has been killed.\");\n\t\t\t\t\t\tAStatus(\"\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//End carlos check\n\t\tfor (n=0;n<20;n++)\n\t\t\tif(AM.aReadStr[n] != \"\")\n\t\t\t{\n\t\t\t\tif(instr(caps(Line), caps(AM.aReadStr[n])) != -1 && AM.bSmartReader)\n\t\t\t\t{\n\t\t\t\t\tstoredrep = AM.aRepStr[n];\n\t\t\t\t\tbPublicCommand=True;\n\t\t\t\t\tStoredCommand=\"custom\";\n\t\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\t\tSetTimer(2,False);\n\t\t\t\t\t//return;\n\t\t\t\t}\t\t\n\t\t\t}\n\n\t\t/*if( (instr(caps(Line), caps(\"abuse\")) != -1 && instr(caps(Line), caps(\"you\")) != -1) || (instr(caps(Line), caps(\"stop\")) != -1 && instr(caps(Line), caps(\"killing\")) != -1) || instr(caps(Line), caps(\"watch for abuse\")) != -1 )\n\t\t{\n\t\t\tif(!AM.btProtocolA)\n\t\t\t{\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbPublicCommand = True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tStoredCommand = \"activateawatch\";\n\t\t\t}\n\t\t}*/\n\t\t\n\t\tif( (instr(caps(Line), caps(\"last command\")) != -1 || instr(caps(Line), caps(\"again\")) != -1  || instr(caps(Line), caps(\"one more time\")) != -1) && instr(caps(Line), caps(\"athena\")) != -1)\n\t\t{\n\t\t\tif(bLastCommandAuth)\n\t\t\t{\n\t\t\t\tAuthPlayerName = Sender;\n\t\t\t\t\n\t\t\t\tif(Sendtype == \"player\")\n\t\t\t\t{\n\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tRememberString=LastRemStr;\n\t\t\t\trememberint=lastremint;\n\t\t\t\tRememberName=LastRemName;\n\t\t\t\tRememberPlayer = LastRemPlayer;\n\t\t\t\tRememberScriptedPawn = LastRemSP;\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbCheckingAuth = True;\n\t\t\t\tAStatus(\"Remembering last command...\");\n\t\t\t\tbInitBroadcast=True;\n\t\t\t\tbHurryUp=True;\n\t\t\t\tStoredCommand = LastCommand;\t\t\t\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbPublicCommand=True;\n\t\t\t\tStoredCommand=LastCommand;\n\t\t\t\tAStatus(\"Remembering last command...\");\n\t\t\t\tSetTimer(2,False);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(instr(caps(Line), caps(\"new chat colour\")) != -1 || instr(caps(Line), caps(\"randomize chat colour\")) != -1  || instr(caps(Line), caps(\"generate new chat colour\")) != -1)\n\t\t{\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbCheckingAuth = True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tbInitBroadcast=True;\n\t\t\t\tbHurryUp=True;\n\t\t\t\tStoredCommand = \"randomchatcolour\";\n\t\t}\n\t\t\n\t\tif(instr(caps(Line), caps(\"reset chat colour\")) != -1 || instr(caps(Line), caps(\"default chat colour\")) != -1  || instr(caps(Line), caps(\"go back to default chat colour\")) != -1)\n\t\t{\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbCheckingAuth = True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tbInitBroadcast=True;\n\t\t\t\tbHurryUp=True;\n\t\t\t\tStoredCommand = \"resetchatcolour\";\n\t\t}\n\t\t\n\t\tif(instr(caps(Line), caps(\"default the scoreboard\")) != -1 && instr(caps(Line), caps(\"Athena\")) != -1)\n\t\t{\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbCheckingAuth = True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tbInitBroadcast=True;\n\t\t\t\tbHurryUp=True;\n\t\t\t\tStoredCommand = \"clearscores\";\n\t\t}\n\t\t\t\t\n\t\tif((instr(caps(Line), caps(\"watch the lag\")) != -1 || instr(caps(Line), caps(\"turn on lag watcher\")) != -1  || instr(caps(Line), caps(\"keep an eye on the lag\")) != -1) && instr(caps(Line), caps(\"athena\")) != -1)\n\t\t{\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbCheckingAuth = True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tbInitBroadcast=True;\n\t\t\t\tbHurryUp=True;\n\t\t\t\tStoredCommand = \"lagwatch\";\n\t\t}\n\t\t\n\t\tif((instr(caps(Line), caps(\"watch the time\")) != -1 || instr(caps(Line), caps(\"turn on time message\")) != -1  || instr(caps(Line), caps(\"keep an eye on the time\")) != -1) && instr(caps(Line), caps(\"athena\")) != -1)\n\t\t{\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbCheckingAuth = True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tbInitBroadcast=True;\n\t\t\t\tbHurryUp=True;\n\t\t\t\tStoredCommand = \"timewatch\";\n\t\t}\n\t\t\n\t\tif((instr(caps(Line), caps(\"stop watching the lag\")) != -1 || instr(caps(Line), caps(\"turn off lag watch\")) != -1  || instr(caps(Line), caps(\"cancel lag watch\")) != -1) && instr(caps(Line), caps(\"athena\")) != -1)\n\t\t{\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbCheckingAuth = True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tbInitBroadcast=True;\n\t\t\t\tbHurryUp=True;\n\t\t\t\tStoredCommand = \"lagwatchoff\";\n\t\t}\n\t\t\n\t\tif((instr(caps(Line), caps(\"dont watch the time\")) != -1 || instr(caps(Line), caps(\"turn off time message\")) != -1  || instr(caps(Line), caps(\"cancel clock\")) != -1) && instr(caps(Line), caps(\"athena\")) != -1)\n\t\t{\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbCheckingAuth = True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tbInitBroadcast=True;\n\t\t\t\tbHurryUp=True;\n\t\t\t\tStoredCommand = \"timewatchoff\";\n\t\t}\n\t\t\t\n\t\tif((instr(caps(Line), caps(\"near me\")) != -1 || instr(caps(Line), caps(\"radius\")) != -1 || instr(caps(Line), caps(\"look around me\")) != -1) && \n\t\tinstr(caps(Line), caps(\"athena\")) != -1)\n\t\t{\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t{\n\t\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbPublicCommand = True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tStoredCommand = \"checkradius\";\n\t\t\t}\n\t\t}\n\t\t\n\t\tif((instr(caps(Line), caps(\"what is this\")) != -1 || instr(caps(Line), caps(\"what am i looking at\")) != -1 || instr(caps(Line), caps(\"whats this\")) != -1) && \n\t\tinstr(caps(Line), caps(\"athena\")) != -1)\n\t\t{\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t{\n\t\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\n\t\t\t\tSetTimer(0.2,False);\n\t\t\t\tbPublicCommand = True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tStoredCommand = \"checkvision\";\n\t\t\t}\n\t\t}\n\n\t\tif( (instr(caps(Line), caps(\"delete this\")) != -1  || instr(caps(Line), caps(\"remove this\")) != -1) && instr(caps(Line), caps(\"athena\")) != -1)\n\t\t{\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\n\t\t\tSetTimer(0.2,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tbInitBroadcast=True;\n\t\t\tStoredCommand = \"deletevision\";\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(Line ~= \"athena, enforce peacekeeper one\")\n\t\t{\n\t\t\tif(peacekeeper != 0)\n\t\t\t\treturn;\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tbInitBroadcast=True;\n\t\t\tStoredCommand = \"peacekeeperone\";\n\t\t}\n\t\n\t\tif(Line ~= \"athena, enforce peacekeeper two\")\n\t\t{\n\t\t\tif(peacekeeper != 0)\n\t\t\t\treturn;\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tbInitBroadcast=True;\n\t\t\tStoredCommand = \"peacekeepertwo\";\n\t\t}\n\t\t\n\t\tif(Line ~= \"athena, enforce abuse watch\")\n\t\t{\n\t\t\tif(Am.bProtocola == true)\n\t\t\t\treturn;\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tbInitBroadcast=True;\n\t\t\tStoredCommand = \"awatchper\";\n\t\t}\n\t\t\n\t\tif(Line ~= \"athena, end abuse watch\")\n\t\t{\n\t\t\tif(Am.bProtocola == false)\n\t\t\t\treturn;\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tbInitBroadcast=True;\n\t\t\tStoredCommand = \"awatchperoff\";\n\t\t}\n\t\t\n\t\tif(Line ~= \"athena, end peacekeeper\")\n\t\t{\n\t\t\tif(peacekeeper == 0)\n\t\t\t\treturn;\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tbInitBroadcast=True;\n\t\t\tStoredCommand = \"peacekeepernone\";\n\t\t}\n\t\n\t\tif(instr(caps(Line), caps(\"cycle style\")) != -1 || instr(caps(Line), caps(\"change style\")) != -1  || instr(caps(Line), caps(\"next style\")) != -1)\n\t\t{\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbCheckingAuth = True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tbInitBroadcast=True;\n\t\t\t\tbHurryUp=True;\n\t\t\t\tStoredCommand = \"cyclestyle\";\n\t\t}\n\t\t\n\t\tif(instr(caps(Line), caps(\"degod all\")) != -1 || instr(caps(Line), caps(\"activate safe mode\")) != -1  || instr(caps(Line), caps(\"enable safe mode\")) != -1)\n\t\t{\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbCheckingAuth = True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tbInitBroadcast=True;\n\t\t\t\tbHurryUp=True;\n\t\t\t\tStoredCommand = \"godall\";\n\t\t}\n\t\t\n\t\tif(instr(caps(Line), caps(\"god all\")) != -1 || instr(caps(Line), caps(\"end safe mode\")) != -1  || instr(caps(Line), caps(\"deactivate safe mode\")) != -1)\n\t\t{\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbCheckingAuth = True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tbInitBroadcast=True;\n\t\t\t\tbHurryUp=True;\n\t\t\t\tStoredCommand = \"degodall\";\n\t\t}\n\t\t\n\t\tif(instr(caps(Line), caps(\"shutdown when the servers empty\")) != -1 || instr(caps(Line), caps(\"close when the servers empty\")) != -1  || instr(caps(Line), caps(\"!qnp\")) != -1)\n\t\t{\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbCheckingAuth = True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tbInitBroadcast=True;\n\t\t\t\tbHurryUp=True;\n\t\t\t\tStoredCommand = \"qnp\";\n\t\t}\n\t\t\n\t\tif(instr(caps(Line), caps(\"shutdown when i leave\")) != -1 || instr(caps(Line), caps(\"close when i leave\")) != -1  || instr(caps(Line), caps(\"!qil\")) != -1)\n\t\t{\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbCheckingAuth = True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tbInitBroadcast=True;\n\t\t\t\tbHurryUp=True;\n\t\t\t\tStoredCommand = \"qil\";\n\t\t\t}\n\t\t}\n\t\t\t\t\t\t\n\t\tif(Left(Line,28) ~= \"generate random string, max \")\n\t\t{\n\t\t\trememberint = int(Right(Line, Len(Line)-28));\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbPublicCommand = True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tStoredCommand = \"randomstring\";\n\t\t}\n\n\t\tif(Left(Line,13) ~= \"set topic to \")\n\t\t{\n\t\t\trememberstring = Right(Line, Len(Line)-13);\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbPublicCommand = True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tStoredCommand = \"topic\";\n\t\t}\n\t\t\n\t\tif(Left(Line,4) ~= \"len \")\n\t\t{\n\t\t\trememberstring = Right(Line, Len(Line)-4);\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbPublicCommand = True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tStoredCommand = \"length\";\n\t\t}\n\t\t\t\t\n\t\tif(instr(caps(Line), caps(\"no topic\")) != -1 && instr(caps(Line), caps(\"athena\")) != -1)\n\t\t{\n\t\t\trememberstring = \"\";\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbPublicCommand = True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tStoredCommand = \"topic\";\n\t\t}\n\t\t\n\t\tif(instr(caps(Line), caps(\"uptime\")) != -1 && instr(caps(Line), caps(\"athena\")) != -1)\n\t\t{\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbPublicCommand = True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tStoredCommand = \"uptime\";\n\t\t}\n\t\t\t\t\n\t\tif(instr(caps(Line), caps(\"what\")) != -1 && instr(caps(Line), caps(\"talkin\")) != -1)\n\t\t{\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbPublicCommand = True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tStoredCommand = \"saytopic\";\n\t\t}\n\t\t\n\t\tif(instr(caps(Line), caps(\"flip a coin\")) != -1 && instr(caps(Line), caps(\"athena\")) != -1)\n\t\t{\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbPublicCommand = True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tStoredCommand = \"coin\";\n\t\t}\n\n\t\tif((instr(caps(Line), caps(\"logs\")) != -1 || instr(caps(Line), caps(\"chat log\")) != -1 || instr(caps(Line), caps(\"repeat\")) != -1) && instr(caps(Line), caps(\"athena\")) != -1)\n\t\t{\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tRememberName = Sender;\n\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == RememberName)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tSetTimer(1,False);\n\t\t\t\t\tbDontLog=True;\n\t\t\t\t\tbPublicCommand = True;\n\t\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\t\tbDontLog=True;\n\t\t\t\t\tStoredCommand = \"chatlogrepeat\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tASay(\"Error response: This command is only available for players in-game.\");\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(Left(Line,20) ~= \"random number up to \")\n\t\t{\n\t\trememberint = int(Right(Line, Len(Line)-20));\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbPublicCommand = True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tStoredCommand = \"randnum\";\n\t\t}\n\t\t\n\t\tif(Left(Line,5) ~= \"roll \")\n\t\t{\n\t\trememberint = int(Right(Line, Len(Line)-5));\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbPublicCommand = True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tStoredCommand = \"randnum\";\n\t\t}\n\t\t\n\t\tif(Left(Line,4) ~= \"roll\")\n\t\t{\n\t\trememberint = 6;\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbPublicCommand = True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tStoredCommand = \"randnum\";\n\t\t}\n\t\t\n\t\tif(Left(Line,10) ~= \"read chat \")\n\t\t{\n\t\trememberint = int(Right(Line, Len(Line)-10));\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbPublicCommand = True;\n\t\t\t\tbDontLog=True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tStoredCommand = \"chatlognum\";\n\t\t}\n\t\t\n\t\tif(instr(caps(Line), caps(\"athena, join the game\")) != -1 && myPawn == None) \n\t\t{\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbPublicCommand = True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tStoredCommand = \"athenapawn\";\n\t\t}\n\t\t\n\t\tif(instr(caps(Line), caps(\"start HS\")) != -1 || instr(caps(Line), caps(\"start hide and seek\")) != -1  || instr(caps(Line), caps(\"start hide & seek\")) != -1) \n\t\t{\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tRememberName = Left(s, InStr(s,\"(\"));\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == RememberName)\n\t\t\t\t\t{\n\t\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbPublicCommand = True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tStoredCommand = \"hideseek\";\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(Left(Line,6) ~= \"guess \")\n\t\t{\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tRememberString = Right(Line, Len(Line)-6);\n\t\t\t\tRememberName = Left(s, InStr(s,\"(\"));\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == RememberName)\n\t\t\t\t\t{\n\t\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbPublicCommand = True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tStoredCommand = \"guess\";\n\t\t\t}\n\t\t}\n\t\t\n\t\tif((instr(caps(Line), caps(\"thanks\")) != -1 || instr(caps(Line), caps(\"thank you\")) != -1  || instr(caps(Line), caps(\"ta \")) != -1) && instr(caps(Line), caps(\"athena\")) != -1)\n\t\t{\n\t\t\tbPublicCommand=True;\n\t\t\tStoredCommand=\"thanks\";\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tSetTimer(1,False);\n\t\t}\n\t\t\t\n\t\tif(instr(caps(Line), caps(\"athena\")) != -1 && instr(caps(Line), caps(\"laugh\")) != -1)\n\t\t{\n\t\t\tbPublicCommand=True;\n\t\t\tStoredCommand=\"laugh\";\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tSetTimer(2,False);\n\t\t}\t\n\n\t\tif((instr(caps(Line), caps(\"how are you\")) != -1 || instr(caps(Line), caps(\"hows you\")) != -1 || instr(caps(Line), caps(\"wassup\")) != -1) && instr(caps(Line), caps(\"athena\")) != -1)\n\t\t{\n\t\t\tbPublicCommand=True;\n\t\t\tStoredCommand=\"howareyou\";\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tSetTimer(1,False);\n\t\t}\n\t\t\n\t\tif((instr(caps(Line), caps(\"hi \")) != -1 || instr(caps(Line), caps(\"hello\")) != -1 || instr(caps(Line), caps(\"yo \")) != -1 || instr(caps(Line), caps(\"hey \")) != -1 || instr(caps(Line), caps(\" hey\")) != -1 ) && instr(caps(Line), caps(\"athena\")) != -1)\n\t\t{\n\t\t\tbPublicCommand=True;\n\t\t\tRememberName = Sender;\n\t\t\tStoredCommand=\"greet\";\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tSetTimer(1,False);\n\t\t}\n\t\t\n\t\tif((instr(caps(Line), caps(\"who is\")) != -1 || instr(caps(Line), caps(\"who are you\")) != -1 || (instr(caps(Line), caps(\"introduce yourself\")) != -1)) && instr(caps(Line), caps(\"athena\")) != -1)\n\t\t{\n\t\t\tbPublicCommand=True;\n\t\t\tStoredCommand=\"whois\";\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tSetTimer(1,False);\n\t\t}\n\t\t\n\t\tif((instr(caps(Line), caps(\"killcount\")) != -1 || instr(caps(Line), caps(\"kill count\")) != -1 || (instr(caps(Line), caps(\"score\")) != -1) && instr(caps(Line), caps(\"athena\")) != -1))\n\t\t{\n\t\t\tbPublicCommand=True;\n\t\t\tStoredCommand=\"killcount\";\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tSetTimer(2,False);\n\t\t}\n\t\t\n\t\tif(instr(caps(Line), caps(\"athena\")) != -1 && (instr(caps(Line), caps(\"go fuck yourself\")) != -1 || instr(caps(Line), caps(\"kys\")) != -1 || instr(caps(Line), caps(\"kill yourself\")) != -1  || instr(caps(Line), caps(\"fuck you\")) != -1 || instr(caps(Line), caps(\"fuck off\")) != -1  || instr(caps(Line), caps(\"go die\")) != -1 || instr(caps(Line), caps(\"fak u\")) != -1  || instr(caps(Line), caps(\"fak yu\")) != -1 || instr(caps(Line), caps(\"fk u\")) != -1  || instr(caps(Line), caps(\"you suck\")) != -1 || instr(caps(Line), caps(\"kick -2\")) != -1  || instr(caps(Line), caps(\"smite -2\")) != -1 || instr(caps(Line), caps(\"kickban -2\")) != -1  || instr(caps(Line), caps(\"expand yourself\")) != -1 || instr(caps(Line), caps(\"kick yourself\")) != -1  || instr(caps(Line), caps(\"smite yourself\")) != -1 || instr(caps(Line), caps(\"fuck u\")) != -1  || instr(caps(Line), caps(\"feck you\")) != -1 || instr(caps(Line), caps(\"fuckoff\")) != -1  || instr(caps(Line), caps(\"eat shit\")) != -1 || instr(caps(Line), caps(\"cunt\")) != -1  || instr(caps(Line), caps(\"cortana is better\")) != -1 || instr(caps(Line), caps(\"f u c k y o u\")) != -1  || instr(caps(Line), caps(\"get fucked\")) != -1 || instr(caps(Line), caps(\"funk yourself\")) != -1 || instr(caps(Line), caps(\"bite me\")) != -1  || instr(caps(Line), caps(\"expand me\")) != -1 || instr(caps(Line), caps(\"expand yourself\")) != -1))\n\t\t{\n\t\t\tif(sendtype == \"player\")\n\t\t\t{\n\t\t\t\n\t\t\tbPublicCommand=True;\n\t\t\tRememberName = Left(s, InStr(s,\"(\"));\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == RememberName)\n\t\t\t\t\t{\n\t\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tStoredCommand=\"anger\";\n\t\t\tAStatus(\"Not happy...\");\n\t\t\tSetTimer(1,False);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(instr(caps(Line), caps(\"online admins\")) != -1)\n\t\t{\n\t\t\tbPublicCommand=True;\n\t\t\tStoredCommand=\"onlineadmins\";\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tSetTimer(1,False);\n\t\t}\t\t\n\t\t\n\t\tif(instr(caps(Line), caps(\"variables\")) != -1 && instr(caps(Line), caps(\"athena\")) != -1)\n\t\t{\n\t\t\tbPublicCommand=True;\n\t\t\tStoredCommand=\"checkvars\";\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tSetTimer(1,False);\n\t\t}\t\t\n\t\t\n\t\tif(instr(caps(Line), caps(\"read\")) != -1 && instr(caps(Line), caps(\"manager\")) != -1 && instr(caps(Line), caps(\"variable\")) != -1)\n\t\t{\n\t\t\tbPublicCommand=True;\n\t\t\tStoredCommand=\"getrconvar\";\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tSetTimer(1,False);\n\t\t}\t\t\n\t\t\n\t\tif(Line ~= \"athena, activate protocol m\")\n\t\t{\n\t\t\tif(AM.bProtocolM)\n\t\t\t\treturn;\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tbInitBroadcast=True;\n\t\t\tStoredCommand = \"protocolmon\";\n\t\t}\n\t\t\n\t\tif(instr(caps(Line), caps(\"athena\")) != -1 && (instr(caps(Line), caps(\"admin please\")) != -1 || instr(caps(Line), caps(\"log me in\")) != -1 || instr(caps(Line), caps(\"gimme admin\")) != -1  || instr(caps(Line), caps(\"do your thing\")) != -1  || instr(caps(Line), caps(\"you know what to do\")) != -1))\n\t\t{\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tAuthPlayerName = Left(s, InStr(s,\"(\"));\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbHurryUp=True;\n\t\t\tbInitBroadcast=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"giveadmin\";\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(instr(caps(Line), caps(\"athena\")) != -1 && instr(caps(Line), caps(\"restart\")) != -1 && instr(caps(Line), caps(\"map\")) != -1 )\n\t\t{\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"restart\";\n\t\t}\n\t\t\n\t\tif(instr(caps(Line), caps(\"athena\")) != -1 && (instr(caps(Line), caps(\"close\")) != -1 || instr(caps(Line), caps(\"end\")) != -1 ) && instr(caps(Line), caps(\"server\")) != -1)\n\t\t{\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tSetTimer(2,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"shutdown\";\n\t\t}\n\t\t\n\t\tif( (instr(caps(Line), caps(\"cancel\")) != -1 || instr(caps(Line), caps(\"abort\")) != -1) && instr(caps(Line), caps(\"shut down\")) != -1)\n\t\t{\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast=True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"cancelshutdown\";\n\t\t}\n\t\t\n\t\tif(Left(Line,19) ~= \"athena, config set \")\n\t\t{\n\t\t\trememberstring = Right(Line, Len(Line)-19);\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"configset\";\n\t\t}\n\t\t\n\t\tif(Left(Line,17) ~= \"athena, rcon set \")\n\t\t{\n\t\t\trememberstring = Right(Line, Len(Line)-17);\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"configsetrcon\";\n\t\t}\n\n\t\tif(Left(Line,20) ~= \"athena, manager set \")\n\t\t{\n\t\t\trememberstring = Right(Line, Len(Line)-20);\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"configsetrconm\";\n\t\t}\n\t\t\t\t\t\t\n\t\tif(Left(Line,14) ~= \"set alarm for \")\n\t\t{\n\t\t\trememberstring = Right(Line, Len(Line)-14);\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"setalarm\";\n\t\t}\n\t\t\n\t\tif(Line ~= \"athena, end protocol m\")\n\t\t{\n\t\t\tif(!AM.bProtocolM)\n\t\t\t\treturn;\n\t\t\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"protocolmoff\";\n\t\t}\n\t\t\n\t\tif(Line ~= \"unblind\")\n\t\t{\n\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"killblind\";\n\t\t}\n\t\t\n\t\tif(Line ~= \"athena, fix bot conflicts\")\n\t\t{\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"fixconflicts\";\n\t\t}\n\t\t\n\t\tif(Line ~= \"athena, debug bots\")\n\t\t{\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"debugbots\";\n\t\t}\n\t\t\n\t\tif(Line ~= \"athena, shut down\")\n\t\t{\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tbInitBroadcast=True;\n\t\t\tStoredCommand = \"deactivate\";\n\t\t}\n\t\n\t\tif(Line ~= \"athena, toggle autostart\")\n\t\t{\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"toggleauto\";\n\t\t}\n\t\t\t\t\n\t\tif(Left(Line,8) ~= \"comment \")\n\t\t{\n\t\t\tRememberString = Right(Line, Len(Line)-8);\n\t\t\tif(RememberString == \"\")\n\t\t\t{\n\t\t\t\tASay(\"Please add a comment string.\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tRememberName = Sender;\n\t\t\tif(sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == RememberName)\n\t\t\t\t\t{\n\t\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tbPublicCommand=True;\n\t\t\tSetTimer(1,False);\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"comment\";\n\t\t}\n\n\t\tif(Left(Line,22) ~= \"athena, change map to \")\n\t\t{\n\t\t\tRememberString = Right(Line, Len(Line)-22);\n\t\t\tif(RememberString == \"\")\n\t\t\t{\n\t\t\t\tASay(\"Please add a map name.\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"mapchange\";\n\t\t}\n\n\t\tif(Left(Line,12) ~= \"delete item \")\n\t\t{\n\t\t\tRememberString = Right(Line, Len(Line)-12);\n\t\t\tif(instr(caps(RememberString), caps(\"engine\")) != -1 || instr(caps(RememberString), caps(\"rcon\")) != -1)\n\t\t\t{\n\t\t\t\tASay(\"Command ignored due to internal protection.\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(RememberString == \"\")\n\t\t\t{\n\t\t\t\tASay(\"Please add a object name.\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"deleteitem\";\n\t\t}\n\n\t\tif(Left(Line,21) ~= \"start a map vote for \")\n\t\t{\n\t\t\tif(sendtype == \"player\")\n\t\t\t{\n\t\t\t\tRememberString = Right(Line, Len(Line)-21);\n\t\t\t\tif(RememberString == \"\" && instr(RememberString, \"?\") != -1)\n\t\t\t\t{\n\t\t\t\t\tASay(\"Please add a map name.\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tRememberName = Left(s, InStr(s,\"(\"));\n\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == RememberName)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\tbPublicCommand=True;\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tStoredCommand = \"mapvote\";\n\t\t\t}\n\t\t}\n\t\n\t\tif(Left(Line,17) ~= \"start a poll for \")\n\t\t{\n\t\t\tif(sendtype == \"player\")\n\t\t\t{\n\t\t\t\tRememberString = Right(Line, Len(Line)-17);\n\t\t\t\tif(RememberString == \"\")\n\t\t\t\t{\n\t\t\t\t\tASay(\"Please add a poll.\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tRememberName = Left(s, InStr(s,\"(\"));\n\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == RememberName)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\tbPublicCommand=True;\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tStoredCommand = \"poll\";\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(Left(Line,10) ~= \"add memo, \" || Left(Line,10) ~= \"new memo, \")\n\t\t{\n\t\t\tRememberString = Right(Line, Len(Line)-10);\n\t\t\tif(RememberString == \"\")\n\t\t\t{\n\t\t\t\tASay(\"Please add a memo string.\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tRememberName = Sender;\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == RememberName)\n\t\t\t\t\t{\n\t\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tbPublicCommand=True;\n\t\t\tSetTimer(1,False);\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"memo\";\n\t\t}\n\t\t\n\t\tif((instr(caps(Line), caps(\"get\")) != -1 || instr(caps(Line), caps(\"list\")) != -1 || instr(caps(Line), caps(\"read\")) != -1 || instr(caps(Line), caps(\"show\")) != -1 || instr(caps(Line), caps(\"check\")) != -1) && instr(caps(Line), caps(\"memo\")) != -1)\n\t\t{\n\t\t\tRememberName = sender;\n\t\t\tbPublicCommand=True;\n\t\t\tSetTimer(1,False);\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"memoread\";\n\t\t}\t\t\n\t\t\n\t\tif((instr(caps(Line), caps(\"delete\")) != -1 || instr(caps(Line), caps(\"clear\")) != -1 ) && instr(caps(Line), caps(\"memo\")) != -1)\n\t\t{\n\t\t\tRememberName = sender;\n\t\t\tbPublicCommand=True;\n\t\t\tSetTimer(1,False);\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"memoclear\";\n\t\t}\t\t\t\n\t\t\n\t\tif((instr(caps(Line), caps(\"count\")) != -1 || instr(caps(Line), caps(\"check\")) != -1 ) && instr(caps(Line), caps(\"comments\")) != -1)\n\t\t{\n\t\t\tbPublicCommand=True;\n\t\t\tSetTimer(1,False);\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"listcomment\";\n\t\t}\n\n\t\tif(Left(Line,13) ~= \"read comment \")\n\t\t{\n\t\t\tRememberInt = int(Right(Line, Len(Line)-13));\n\t\t\tbPublicCommand=True;\n\t\t\tSetTimer(1,False);\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"readcomment\";\n\t\t}\n\t\t\n\t\tif(Left(Line,13) ~= \"smite player \")\n\t\t{\n\t\t\tj = int(Right(Line, Len(Line)-13));\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerID == j)\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"smite\";\n\t\t}\n\t\t\n\t\tif(Left(Line,12) ~= \"kick player \")\n\t\t{\n\t\t\tj = int(Right(Line, Len(Line)-12));\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerID == j)\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"kick\";\n\t\t}\n\n\t\tif(Left(Line,32) ~= \"give botmaster access to player \")\n\t\t{\n\t\t\tj = int(Right(Line, Len(Line)-32));\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerID == j)\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tSendtypepublic=Sendtype;\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"givebm\";\n\t\t}\n\t\t\n\t\tif(instr(caps(Line), caps(\"athena, slaughter them all\")) != -1 || instr(caps(Line), caps(\"athena, murder them all\")) != -1 )\n\t\t{\n\t\t\tAuthPlayerName = sender;\n\t\t\tif(sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"smiteall\";\n\t\t}\n  \n\t\tif(instr(caps(Line), caps(\"athena, fix it all\")) != -1 || instr(caps(Line), caps(\"athena, fix everything up\")) != -1 )\n\t\t{\n\t\t\tAuthPlayerName = sender;\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"fixup\";\n\t\t}\n\t\t\n\t\tif(instr(caps(Line), caps(\"athena, nuke it all\")) != -1 || instr(caps(Line), caps(\"athena, blow everything up\")) != -1 )\n\t\t{\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"blowup\";\n\t\t}\n\t\t\n\t\tif(Left(Line,11) ~= \"break item \")\n\t\t{\n\t\tRememberString = Right(Line, Len(Line)-11);\n\t\tif(RememberString == \"\") return;\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"killall\";\n\t\t}\n\t\t\n\t\tif(Left(Line,8) ~= \"trigger \")\n\t\t{\n\t\t\tRememberString = Right(Line, Len(Line)-8);\n\t\t\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"trigger\";\n\t\t}\n\n\t\tif(Left(Line,5) ~= \"frob \")\n\t\t{\n\t\t\tif(sendtype == \"player\")\n\t\t\t{\n\t\t\t\tRememberString = Right(Line, Len(Line)-5);\n\t\t\t\tAuthPlayerName = Left(s, InStr(s,\"(\"));\n\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbCheckingAuth = True;\n\t\t\t\tbInitBroadcast = True;\n\t\t\t\tbHurryUp=True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tStoredCommand = \"frob\";\n\t\t\t}\n\t\t}\n\n\t\tif(Left(Line,5) ~= \"bump \")\n\t\t{\n\t\t\tif(sendtype == \"player\")\n\t\t\t{\n\t\t\t\tRememberString = Right(Line, Len(Line)-5);\n\t\t\t\tAuthPlayerName = Left(s, InStr(s,\"(\"));\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbCheckingAuth = True;\n\t\t\t\tbInitBroadcast = True;\n\t\t\t\tbHurryUp=True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tStoredCommand = \"bump\";\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(instr(caps(Line), caps(\"heal everyone\")) != -1)\n\t\t{\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"healall\";\n\t\t}\n\t\t\n\t\tif(Left(Line,12) ~= \"heal player \")\n\t\t{\n\t\t\tj = int(Right(Line, Len(Line)-12));\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerID == j)\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"heal\";\n\t\t}\n\n\t\tif(Left(Line,12) ~= \"warn player \")\n\t\t{\n\t\t\tj = int(Right(Line, Len(Line)-12));\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerID == j)\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"warn\";\n\t\t}\n\t\t\n\t\tif(Left(Line,10) ~= \"warn name \")\n\t\t{\n\t\t\tsavename = Right(Line, Len(Line)-10);\n\t\t\t\tif(SaveName == \"\")\n\t\t\t\t\treturn;\n\t\t\t/*savename = AM.RCR(savename);\n\t\t\tsavename = AM.RCR2(savename);*/\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(savename)) != -1 || instr(caps(AM.GetNick(DXP)), caps(savename)) != -1)\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\tRememberName = DXP.PlayerReplicationInfo.PlayerName;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"warn\";\n\t\t}\n\t\t\n\t\tif(Left(Line,12) ~= \"info player \")\n\t\t{\n\t\t\tj = int(Right(Line, Len(Line)-12));\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerID == j)\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"nptinfo\";\n\t\t}\n\t\t\n\t\tif(Left(Line,10) ~= \"info name \")\n\t\t{\n\t\t\tsavename = Right(Line, Len(Line)-10);\n\t\t\t\tif(SaveName == \"\")\n\t\t\t\t\treturn;\n\t\t\tcolstr = savename;\n\t\t\tsavename = AM.RCR(savename);\n\t\t\tsavename = AM.RCR2(savename);\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(savename)) != -1 || instr(caps(AM.GetNick(DXP)), caps(savename)) != -1 || instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(colstr)) != -1 || instr(caps(AM.GetNick(DXP)), caps(colstr)) != -1 )\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\tRememberName = DXP.PlayerReplicationInfo.PlayerName;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"nptinfo\";\n\t\t}\n\t\t\n\t\tif(Left(Line,9) ~= \"ban item \")\n\t\t{\n\t\t\tRememberString = Right(Line, Len(Line)-9);\n\t\t\t\tif(RememberString == \"\")\n\t\t\t\t\treturn;\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"addbanitem\";\n\t\t}\n\t\t\n\t\tif(Left(Line,18) ~= \"ban specific item \")\n\t\t{\n\t\t\tRememberString = Right(Line, Len(Line)-18);\n\t\t\t\tif(RememberString == \"\")\n\t\t\t\t\treturn;\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"addbanitem2\";\n\t\t}\n\t\t\n\t\tif(Left(Line,11) ~= \"unban item \")\n\t\t{\n\t\t\tRememberString = Right(Line, Len(Line)-11);\n\t\t\t\tif(RememberString == \"\")\n\t\t\t\t\treturn;\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"rembanitem\";\n\t\t}\n\t\t\n\t\tif(Left(Line,20) ~= \"unban specific item \")\n\t\t{\n\t\t\tRememberString = Right(Line, Len(Line)-20);\n\t\t\t\tif(RememberString == \"\")\n\t\t\t\t\treturn;\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"rembanitem2\";\n\t\t}\n\t\t\n\t\tif(Left(Line,14) ~= \"disarm player \")\n\t\t{\n\t\t\tj = int(Right(Line, Len(Line)-14));\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerID == j)\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"disarm\";\n\t\t}\n\t\t\n\t\tif(Left(Line,12) ~= \"disarm name \")\n\t\t{\n\t\t\tsavename = Right(Line, Len(Line)-12);\n\t\t\tif(SaveName == \"\")\n\t\t\t\t\treturn;\n\t\t\tcolstr = savename;\n\t\t\tsavename = AM.RCR(savename);\n\t\t\tsavename = AM.RCR2(savename);\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(savename)) != -1 || instr(caps(AM.GetNick(DXP)), caps(savename)) != -1 || instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(colstr)) != -1 || instr(caps(AM.GetNick(DXP)), caps(colstr)) != -1 )\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\tRememberName = DXP.PlayerReplicationInfo.PlayerName;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"disarm\";\n\t\t}\n\t\t\n\t\tif(Left(Line,13) ~= \"bring player \")\n\t\t{\n\t\t\tif(sendtype == \"player\")\n\t\t\t{\n\t\t\tj = int(Right(Line, Len(Line)-13));\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerID == j)\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Left(s, InStr(s,\"(\"));\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tif(AM.bAllowWhitelist)\n\t\t\t\tbCheckingWhitelist=True;\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"bring\";\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(Left(Line,11) ~= \"bring name \")\n\t\t{\n\t\tif(sendtype == \"player\")\n\t\t{\n\t\t\tsavename = Right(Line, Len(Line)-11);\n\t\t\t\tif(SaveName == \"\") return;\n\t\t\tcolstr = savename;\n\t\t\tsavename = AM.RCR(savename);\n\t\t\tsavename = AM.RCR2(savename);\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(savename)) != -1 || instr(caps(AM.GetNick(DXP)), caps(savename)) != -1 || instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(colstr)) != -1 || instr(caps(AM.GetNick(DXP)), caps(colstr)) != -1 )\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\tRememberName = DXP.PlayerReplicationInfo.PlayerName;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Left(s, InStr(s,\"(\"));\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tif(AM.bAllowWhitelist)\n\t\t\t\tbCheckingWhitelist=True;\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"bring\";\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(Left(Line,13) ~= \"go to player \")\n\t\t{\n\t\tif(sendtype == \"player\")\n\t\t{\n\t\t\tj = int(Right(Line, Len(Line)-13));\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerID == j)\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Left(s, InStr(s,\"(\"));\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tif(AM.bAllowWhitelist)\n\t\t\t\tbCheckingWhitelist=True;\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"goto\";\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(Left(Line,11) ~= \"go to name \")\n\t\t{\n\t\tif(sendtype == \"player\")\n\t\t{\n\t\t\tsavename = Right(Line, Len(Line)-11);\n\t\t\t\t\t\t\tif(SaveName == \"\") return;\n\t\t\tcolstr = savename;\n\t\t\tsavename = AM.RCR(savename);\n\t\t\tsavename = AM.RCR2(savename);\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(savename)) != -1 || instr(caps(AM.GetNick(DXP)), caps(savename)) != -1 || instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(colstr)) != -1 || instr(caps(AM.GetNick(DXP)), caps(colstr)) != -1 )\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\tRememberName = DXP.PlayerReplicationInfo.PlayerName;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Left(s, InStr(s,\"(\"));\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tif(AM.bAllowWhitelist)\n\t\t\t\tbCheckingWhitelist=True;\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"goto\";\n\t\t\t}\n\t\t}\n\n\t\tif(Left(Line,12) ~= \"goto player \")\n\t\t{\n\t\tif(sendtype == \"player\")\n\t\t{\n\t\t\tj = int(Right(Line, Len(Line)-12));\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerID == j)\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Left(s, InStr(s,\"(\"));\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tif(AM.bAllowWhitelist)\n\t\t\t\tbCheckingWhitelist=True;\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"goto\";\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(Left(Line,10) ~= \"goto name \")\n\t\t{\n\t\tif(sendtype == \"player\")\n\t\t{\n\t\t\tsavename = Right(Line, Len(Line)-10);\n\t\t\tif(SaveName == \"\") return;\n\t\t\tcolstr = savename;\n\t\t\tsavename = AM.RCR(savename);\n\t\t\tsavename = AM.RCR2(savename);\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(savename)) != -1 || instr(caps(AM.GetNick(DXP)), caps(savename)) != -1 || instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(colstr)) != -1 || instr(caps(AM.GetNick(DXP)), caps(colstr)) != -1 )\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\tRememberName = DXP.PlayerReplicationInfo.PlayerName;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Left(s, InStr(s,\"(\"));\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tif(AM.bAllowWhitelist)\n\t\t\t\tbCheckingWhitelist=True;\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"goto\";\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(Left(Line,19) ~= \"assemble at player \")\n\t\t{\n\t\t\tj = int(Right(Line, Len(Line)-19));\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerID == j)\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"assemble\";\n\t\t}\n\t\t\n\t\tif(Left(Line,17) ~= \"assemble at name \")\n\t\t{\n\t\t\tsavename = Right(Line, Len(Line)-17);\n\t\t\t\t\t\t\tif(SaveName == \"\") return;\n\t\t\tcolstr = savename;\n\t\t\tsavename = AM.RCR(savename);\n\t\t\tsavename = AM.RCR2(savename);\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(savename)) != -1 || instr(caps(AM.GetNick(DXP)), caps(savename)) != -1 || instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(colstr)) != -1 || instr(caps(AM.GetNick(DXP)), caps(colstr)) != -1 )\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\tRememberName = DXP.PlayerReplicationInfo.PlayerName;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"assemble\";\n\t\t}\n\t\t\n\t\tif(Left(Line,10) ~= \"kick name \")\n\t\t{\n\t\t\tsavename = Right(Line, Len(Line)-10);\n\t\t\t\tif(SaveName == \"\") return;\n\t\t\tcolstr = savename;\n\t\t\tsavename = AM.RCR(savename);\n\t\t\tsavename = AM.RCR2(savename);\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(savename)) != -1 || instr(caps(AM.GetNick(DXP)), caps(savename)) != -1 || instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(colstr)) != -1 || instr(caps(AM.GetNick(DXP)), caps(colstr)) != -1 )\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\tRememberName = DXP.PlayerReplicationInfo.PlayerName;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"kick\";\n\t\t}\n\n\t\tif(Left(Line,12) ~= \"set manager \")\n\t\t{\n\t\t\trememberstring = Right(Line, Len(Line)-12);\n\t\t\t\t\t\t\tif(rememberstring == \"\") return;\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"setrconvar\";\n\t\t}\n\t\t\n\t\tif(Left(Line,11) ~= \"smite name \")\n\t\t{\n\t\t\tsavename = Right(Line, Len(Line)-11);\n\t\t\t\t\t\t\tif(SaveName == \"\") return;\n\t\t\tcolstr = savename;\n\t\t\tsavename = AM.RCR(savename);\n\t\t\tsavename = AM.RCR2(savename);\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(savename)) != -1 || instr(caps(AM.GetNick(DXP)), caps(savename)) != -1 || instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(colstr)) != -1 || instr(caps(AM.GetNick(DXP)), caps(colstr)) != -1 )\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\tRememberName = DXP.PlayerReplicationInfo.PlayerName;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"smite\";\n\t\t}\n\t\t\n\t\tif(Left(Line,19) ~= \"give admin to name \")\n\t\t{\n\t\t\tsavename = Right(Line, Len(Line)-19);\n\t\t\t\t\t\t\tif(SaveName == \"\") return;\n\t\t\tcolstr = savename;\n\t\t\tsavename = AM.RCR(savename);\n\t\t\tsavename = AM.RCR2(savename);\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(savename)) != -1 || instr(caps(AM.GetNick(DXP)), caps(savename)) != -1 || instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(colstr)) != -1 || instr(caps(AM.GetNick(DXP)), caps(colstr)) != -1 )\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\tRememberName = DXP.PlayerReplicationInfo.PlayerName;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"giveadmin\";\n\t\t}\n\n\t\tif(Left(Line,21) ~= \"give admin to player \")\n\t\t{\n\t\t\tj = int(Right(Line, Len(Line)-21));\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerID == j)\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\tRememberName = DXP.PlayerReplicationInfo.PlayerName;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\t\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"giveadmin\";\n\t\t}\n\t\t\n\t\tif(Left(Line,11) ~= \"blind name \")\n\t\t{\n\t\t\tsavename = Right(Line, Len(Line)-11);\n\t\t\t\t\t\t\tif(SaveName == \"\") return;\n\t\t\tcolstr = savename;\n\t\t\tsavename = AM.RCR(savename);\n\t\t\tsavename = AM.RCR2(savename);\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(savename)) != -1 || instr(caps(AM.GetNick(DXP)), caps(savename)) != -1 || instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(colstr)) != -1 || instr(caps(AM.GetNick(DXP)), caps(colstr)) != -1 )\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\tRememberName = DXP.PlayerReplicationInfo.PlayerName;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"blind\";\n\t\t}\n\n\t\tif(Left(Line,13) ~= \"blind player \")\n\t\t{\n\t\t\tj = int(Right(Line, Len(Line)-13));\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerID == j)\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\tRememberName = DXP.PlayerReplicationInfo.PlayerName;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\t\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"blind\";\n\t\t}\n\n\t\tif(Left(Line,10) ~= \"burn name \")\n\t\t{\n\t\t\tsavename = Right(Line, Len(Line)-10);\n\t\t\t\t\t\t\tif(SaveName == \"\") return;\n\t\t\tcolstr = savename;\n\t\t\tsavename = AM.RCR(savename);\n\t\t\tsavename = AM.RCR2(savename);\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(savename)) != -1 || instr(caps(AM.GetNick(DXP)), caps(savename)) != -1 || instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(colstr)) != -1 || instr(caps(AM.GetNick(DXP)), caps(colstr)) != -1 )\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\tRememberName = DXP.PlayerReplicationInfo.PlayerName;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"burn\";\n\t\t}\n\n\t\tif(Left(Line,12) ~= \"burn player \")\n\t\t{\n\t\t\tj = int(Right(Line, Len(Line)-12));\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerID == j)\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\tRememberName = DXP.PlayerReplicationInfo.PlayerName;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\t\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"burn\";\n\t\t}\n\t\t\n\t\tif(Left(Line,21) ~= \"take admin from name \")\n\t\t{\n\t\t\tsavename = Right(Line, Len(Line)-21);\n\t\t\t\t\t\t\tif(SaveName == \"\") return;\n\t\t\tcolstr = savename;\n\t\t\tsavename = AM.RCR(savename);\n\t\t\tsavename = AM.RCR2(savename);\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(savename)) != -1 || instr(caps(AM.GetNick(DXP)), caps(savename)) != -1 || instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(colstr)) != -1 || instr(caps(AM.GetNick(DXP)), caps(colstr)) != -1 )\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\tRememberName = DXP.PlayerReplicationInfo.PlayerName;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\t\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"takeadmin\";\n\t\t}\n\n\t\tif(Left(Line,23) ~= \"take admin from player \")\n\t\t{\n\t\t\tj = int(Right(Line, Len(Line)-23));\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerID == j)\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\tRememberName = DXP.PlayerReplicationInfo.PlayerName;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\t\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"takeadmin\";\n\t\t}\n\t\t\n\t\tif(Left(Line,10) ~= \"smite bot \")\n\t\t{\n\t\t\tRememberName = Right(Line, Len(Line)-10);\n\t\t\tif(RememberName == \"\") return;\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tif(AM.bAllowWhitelist)\n\t\t\t\tbCheckingWhitelist=True;\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"smitebot\";\n\t\t}\n\t\t\n\t\tif(Left(Line,10) ~= \"heal name \")\n\t\t{\n\t\t\tsavename = Right(Line, Len(Line)-10);\n\t\t\tif(SaveName == \"\") return;\n\t\t\tcolstr = savename;\n\t\t\tsavename = AM.RCR(savename);\n\t\t\tsavename = AM.RCR2(savename);\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(savename)) != -1 || instr(caps(AM.GetNick(DXP)), caps(savename)) != -1 || instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(colstr)) != -1 || instr(caps(AM.GetNick(DXP)), caps(colstr)) != -1 )\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\tRememberName = DXP.PlayerReplicationInfo.PlayerName;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"heal\";\n\t\t}\n\n\t\tif(Left(Line,5) ~= \"rcon \")\n\t\t{\n\t\t\tif(sendtype == \"player\")\n\t\t\t{\n\t\t\t\n\t\t\tRememberString = Right(Line, Len(Line)-5);\n\t\t\tif(RememberString == \"\")\n\t\t\t{\n\t\t\t\tASay(\"Please enter a command string that references RCON Mutator.\");\n\t\t\t\tRememberString=\"\";\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tRememberName = Left(s, InStr(s,\"(\"));\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == RememberName)\n\t\t\t\t\t{\n\t\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tSetTimer(0.6,False);\n\t\t\tbPublicCommand=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"rcon\";\n\t\t\t}\n\t\t}\n\t\tif(Left(Line,5) ~= \".mut \")\n\t\t{\n\t\t\tif(sendtype == \"player\")\n\t\t\t{\n\t\t\t\n\t\t\tRememberString = Right(Line, Len(Line)-5);\n\t\t\tif(RememberString == \"\")\n\t\t\t{\n\t\t\t\tASay(\"Please enter a command string that references Mutator commands.\");\n\t\t\t\tRememberString=\"\";\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tRememberName = Left(s, InStr(s,\"(\"));\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == RememberName)\n\t\t\t\t\t{\n\t\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tSetTimer(0.6,False);\n\t\t\tbPublicCommand=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"mutate\";\n\t\t\t}\n\t\t}\n\t\t\t\n\t\tif(Left(Line,12) ~= \"mark player \")\n\t\t{\n\t\t\tj = int(Right(Line, Len(Line)-12));\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerID == j)\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\tRememberName = DXP.PlayerReplicationInfo.PlayerName;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"addmark\";\n\t\t}\n\t\t\n\t\tif(Left(Line,10) ~= \"mark name \")\n\t\t{\n\t\t\tsavename = Right(Line, Len(Line)-10);\n\t\t\t\t\t\t\tif(SaveName == \"\") return;\n\t\t\tcolstr = savename;\n\t\t\tsavename = AM.RCR(savename);\n\t\t\tsavename = AM.RCR2(savename);\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(savename)) != -1 || instr(caps(AM.GetNick(DXP)), caps(savename)) != -1 || instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(colstr)) != -1 || instr(caps(AM.GetNick(DXP)), caps(colstr)) != -1 )\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\tRememberName = DXP.PlayerReplicationInfo.PlayerName;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"addmark\";\n\t\t}\n\n\t\tif(Left(Line,22) ~= \"athena, ignore player \")\n\t\t{\n\t\t\tj = int(Right(Line, Len(Line)-22));\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerID == j)\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\tRememberName = DXP.PlayerReplicationInfo.PlayerName;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"ignore\";\n\t\t}\n\n\t\tif(Left(Line,25) ~= \"athena, whitelist player \")\n\t\t{\n\t\t\tj = int(Right(Line, Len(Line)-25));\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerID == j)\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\tRememberName = DXP.PlayerReplicationInfo.PlayerName;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"whitelist\";\n\t\t}\n\t\t\t\n\t\tif(Left(Line,23) ~= \"generate password, max \")\n\t\t{\n\t\t\trememberint = int(Right(Line, Len(Line)-23));\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"generatepass\";\n\t\t}\n\n\t  \tif(instr(caps(Line), caps(\"remove game password\")) != -1 || instr(caps(Line), caps(\"athena, open the server\")) != -1)\n\t\t{\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"removepass\";\n\t\t}\n\t\t\n\t\tif(Left(Line,21) ~= \"set game password to \")\n\t\t{\n\t\t\trememberstring = Right(Line, Len(Line)-21);\n\t\t\t\t\t\t\tif(rememberstring == \"\") return;\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"setpassword\";\n\t\t}\n\t\t\n\t\tif(Left(Line,20) ~= \"athena, ignore name \")\n\t\t{\n\t\t\tsavename = Right(Line, Len(Line)-20);\n\t\t\t\t\t\t\tif(SaveName == \"\") return;\n\t\t\tcolstr = savename;\n\t\t\tsavename = AM.RCR(savename);\n\t\t\tsavename = AM.RCR2(savename);\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(savename)) != -1 || instr(caps(AM.GetNick(DXP)), caps(savename)) != -1 || instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(colstr)) != -1 || instr(caps(AM.GetNick(DXP)), caps(colstr)) != -1 )\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\tRememberName = DXP.PlayerReplicationInfo.PlayerName;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Sender;\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"ignore\";\n\t\t}\n\t\t\n\t\tif(Left(Line,23) ~= \"athena, whitelist name \")\n\t\t{\n\t\t\tsavename = Right(Line, Len(Line)-23);\n\t\t\t\t\t\t\tif(SaveName == \"\") return;\n\t\t\tcolstr = savename;\n\t\t\tsavename = AM.RCR(savename);\n\t\t\tsavename = AM.RCR2(savename);\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(savename)) != -1 || instr(caps(AM.GetNick(DXP)), caps(savename)) != -1 || instr(caps(DXP.PlayerReplicationInfo.PlayerName), caps(colstr)) != -1 || instr(caps(AM.GetNick(DXP)), caps(colstr)) != -1 )\n\t\t\t\t{\n\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\tRememberName = DXP.PlayerReplicationInfo.PlayerName;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"whitelist\";\n\t\t}\n\t\t\t\n\t  \tif(instr(caps(Line), caps(\"smite me\")) != -1 || (instr(caps(Line), caps(\"athena\")) != -1 && instr(caps(Line), caps(\"kill me\")) != -1))\n\t\t{\n\t\t\tif(sendtype == \"player\")\n\t\t\t{\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbPublicCommand=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"smite\";\n\t\t\t}\n\t\t}\n\t\t\n\t  \tif(instr(caps(Line), caps(\"athena\")) != -1 && (instr(caps(Line), caps(\"clear\")) != -1 || instr(caps(Line), caps(\"reset\")) != -1) && instr(caps(Line), caps(\"ignore\")) != -1)\n\t\t{\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"clearignore\";\n\t\t}\n\n\t  \tif(instr(caps(Line), caps(\"athena\")) != -1 && (instr(caps(Line), caps(\"clear\")) != -1 || instr(caps(Line), caps(\"reset\")) != -1) && instr(caps(Line), caps(\"whitelist\")) != -1)\n\t\t{\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"clearwhitelist\";\n\t\t}\n\t\t\n\t  \tif(instr(caps(Line), caps(\"athena\")) != -1 && (instr(caps(Line), caps(\"clear\")) != -1 || instr(caps(Line), caps(\"reset\")) != -1) && instr(caps(Line), caps(\"marks\")) != -1)\n\t\t{\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"markclear\";\n\t\t}\n\t\t\n\t  \tif(instr(caps(Line), caps(\"clear all memos\")) != -1 || instr(caps(Line), caps(\"delete all memos\")) != -1)\n\t\t{\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"memozero\";\n\t\t}\n\t\n\t  \tif(instr(caps(Line), caps(\"clear all comments\")) != -1 || instr(caps(Line), caps(\"delete all comments\")) != -1)\n\t\t{\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\n\t\t\tif(Sendtype == \"player\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"commentzero\";\n\t\t}\n\t\t\t\t\n\t\tif(instr(caps(Line), caps(\"heal me\")) != -1)\n\t\t{\n\t\t\tif(sendtype == \"player\")\n\t\t\t{\n\t\t\tAuthPlayerName = Sender;\n\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t{\n\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tSetTimer(1,False);\n\t\t\tif(AM.bAllowWhitelist)\n\t\t\t\tbCheckingWhitelist=True;\n\t\t\tbCheckingAuth = True;\n\t\t\tbInitBroadcast = True;\n\t\t\tbHurryUp=True;\n\t\t\tAStatus(\"Thinking...\");\n\t\t\tStoredCommand = \"heal\";\n\t\t\t}\n\t\t}\n\t\t\t\n\t\tif(Left(Line,6) ~= \"!talk \")\n\t\t{\n\t\t\tif(sendtype == \"player\")\n\t\t\t{\n\t\t\t\taText = Right(Line, Len(Line) - 6);\n\t\t\t\tAM.SendTextToAIClient(aText);\n\t\t\t}\n\t\t}\t\n\t\tif(Sendtype ~= \"irc\" || Sendtype ~= \"telnet\")\n\t\t{\n\t\t\t\n\t\t\tif(Left(Line,1) ~= \"!\" && AM.bAllowChatCommands)\n\t\t\t{\n\t\t\t\tatagz = Right(s, Len(s)-instr(s,\"!\")-Len(\"!\"));\n\t\t\t\t\n\t\t\t\tif(instr(caps(atagz), caps(\" \")) != -1) //Assuming theres other words after\n\t\t\t\t{\n\t\t\t\t\t//atagzextra = right(atagz, InStr(atagz,\" \"));\n\t\t\t\t\tatagzextra = Right(atagz, Len(atagz)-instr(atagz,\" \")-Len(\" \"));\n\t\t\t\t\t//atagz = Left(atagz, Len(atagz)-instr(atagz,\" \")-Len(\" \"));\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(atagz ~= \"motd\")\n\t\t\t\t{\n\t\t\t\t\tADelaySay(AM.MOTD,1);\n\t\t\t\t}\n\t\t\t\telse if(Left(atagz,5)  ~= \"motd \")\n\t\t\t\t{\n\t\t\t\t\tforeach AllActors(class'DeusExPlayer', DXP)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.Playername ~= Sender)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.bAdmin)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tASay(\"MOTD changed to\"@atagzextra);\n\t\t\t\t\t\t\t\tAM.MOTD = atagzextra;\n\t\t\t\t\t\t\t\tAM.SaveConfig();\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if(atagz ~= \"abort\")\n\t\t\t\t{\n\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(Triggerer.bAdmin)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(SDA != None)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(AM.shutdownAbortSound != none)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tDXP.PlaySound(AM.shutdownAbortSound, SLOT_Interface,,, 256);\t\t\t\t\t\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tSDA.Destroy();\n\t\t\t\t\t\t\tSDA = none;\n\t\t\t\t\t\t\tASay(\"Shutdown cancelled.\");\n\t\t\t\t\t\t}\t\t\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\telse if(Left(atagz,8) ~= \"randstr \")\n\t\t\t\t{\n\t\t\t\t\trememberint = int(atagzextra);\n\t\t\t\t\tSetTimer(0.5,False);\n\t\t\t\t\tbPublicCommand = True;\n\t\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\t\tStoredCommand = \"randomstring\";\n\t\t\t\t}\n\t\t\t\telse if(Left(atagz,9) ~= \"randchar \")\n\t\t\t\t{\n\t\t\t\t\trememberint = int(atagzextra);\n\t\t\t\t\tSetTimer(0.5,False);\n\t\t\t\t\tbPublicCommand = True;\n\t\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\t\tStoredCommand = \"randomchar\";\n\t\t\t\t}\n\t\t\t\telse if(Left(atagz,6) ~= \"arand \")\n\t\t\t\t{\n\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(instr(caps(atagzextra), caps(\"d\")) != -1)\n\t\t\t\t\t{\n\t\t\t\t\t\taSides = int(Right(atagzextra, Len(atagzextra)-instr(atagzextra,\"d\")-Len(\"d\")));\n\t\t\t\t\t\taDice = int(Left(atagzextra, InStr(atagzextra,\"d\")));\n\t\t\t\t\t\twhile(aRolls < aDice)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taTotal += Rand(aSides+1);\n\t\t\t\t\t\t\taRolls++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tBroadcastMessage(Sendtype$\" rolls \"$aDice$\" \"$aSides$\"-sided dice....\"@aTotal);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\tBroadcastMessage(\"Error in formatting.\");\n\t\t\t\t}\n\t\t\t\telse if(atagz ~= \"pk1\")\n\t\t\t\t{\n\t\t\t\t\tif(peacekeeper != 0)\n\t\t\t\t\t\treturn;\n\t\t\t\t\tAuthPlayerName = Sender;\n\t\t\t\t\t\n\t\t\t\t\tif(Sendtype == \"player\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tSetTimer(1,False);\n\t\t\t\t\tbCheckingAuth = True;\n\t\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\t\tbInitBroadcast=True;\n\t\t\t\t\tStoredCommand = \"peacekeeperone\";\n\t\t\t\t}\n\t\t\t\telse if(atagz ~= \"pk2\")\n\t\t\t\t{\n\t\t\t\t\tif(peacekeeper != 0)\n\t\t\t\t\t\treturn;\n\t\t\t\t\tAuthPlayerName = Sender;\n\t\t\t\t\t\n\t\t\t\t\tif(Sendtype == \"player\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tSetTimer(1,False);\n\t\t\t\t\tbCheckingAuth = True;\n\t\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\t\tbInitBroadcast=True;\n\t\t\t\t\tStoredCommand = \"peacekeepertwo\";\n\t\t\t\t}\n\t\t\t\telse if(atagz ~= \"aw\")\n\t\t\t\t{\n\t\t\t\t\tif(AM.bProtocolA == True)\n\t\t\t\t\t\treturn;\n\t\t\t\t\tAuthPlayerName = Sender;\n\t\t\t\t\t\n\t\t\t\t\tif(Sendtype == \"player\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tSetTimer(1,False);\n\t\t\t\t\tbCheckingAuth = True;\n\t\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\t\tbInitBroadcast=True;\n\t\t\t\t\tStoredCommand = \"awatchper\";\n\t\t\t\t}\n\t\t\t\telse if(atagz ~= \"awoff\")\n\t\t\t\t{\n\t\t\t\t\tif(AM.bProtocolA == False)\n\t\t\t\t\t\treturn;\n\t\t\t\t\tAuthPlayerName = Sender;\n\t\t\t\t\t\n\t\t\t\t\tif(Sendtype == \"player\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tSetTimer(1,False);\n\t\t\t\t\tbCheckingAuth = True;\n\t\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\t\tbInitBroadcast=True;\n\t\t\t\t\tStoredCommand = \"awatchperoff\";\n\t\t\t\t}\n\t\t\t\telse if(atagz ~= \"pk0\")\n\t\t\t\t{\n\t\t\t\t\tif(peacekeeper == 0)\n\t\t\t\t\t\treturn;\n\t\t\t\t\tAuthPlayerName = Sender;\n\t\t\t\t\t\n\t\t\t\t\tif(Sendtype == \"player\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tSetTimer(1,False);\n\t\t\t\t\tbCheckingAuth = True;\n\t\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\t\tbInitBroadcast=True;\n\t\t\t\t\tStoredCommand = \"peacekeepernone\";\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}\n\t\tif(Sendtype == \"player\")\n\t\t{\n\t\t\t\n\t\t\tif(Left(Line,1) ~= \".\" && AM.bAllowIRCCommands)\n\t\t\t{\n\t\t\t\tforeach AllActors(class'IRCLink',IRC)\n\t\t\t\t{\n\t\t\t\t\tif(IRC != None)\n\t\t\t\t\t{\n\t\t\t\t\t\tLog(\"Command sent by game: \"$line,'IRC');\n\t\t\t\t\t\tIRC.SendMessage(line);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif(instr(caps(S), caps(\"#\")) != -1 && AM.bAllowHashTag)\n\t\t\t{\n\t\t\t\tatagz = Right(s, Len(s)-instr(s,\"#\")-Len(\"#\"));\n\t\t\t\tif(instr(caps(atagz), caps(\" \")) != -1) //Assuming theres other words after\n\t\t\t\t{\n\t\t\t\t\tatagz = Left(atagz, InStr(atagz,\" \"));\n\t\t\t\t}\n\t\t\t\tif(atagz == \"\")\n\t\t\t\t\treturn;\n\t\t\t\t\t\n\t\t\t\tAM.Topic = \"#\"$atagz;\n\t\t\t\tASay(\"Topic was changed. #\"$atagz$\"\");\n\t\t\t\t//ASay(\"Reading\"@atagz$\". Is this correct?\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\n\t\t\t//if(instr(caps(S), caps(\"!\")) != -1)\n\t\t\tif(Left(Line,1) ~= \"!\" && AM.bAllowChatCommands)\n\t\t\t{\n\t\t\t\tatagz = Right(s, Len(s)-instr(s,\"!\")-Len(\"!\"));\n\t\t\t\t\n\t\t\t\tif(instr(caps(atagz), caps(\" \")) != -1) //Assuming theres other words after\n\t\t\t\t{\n\t\t\t\t\t//atagzextra = right(atagz, InStr(atagz,\" \"));\n\t\t\t\t\tatagzextra = Right(atagz, Len(atagz)-instr(atagz,\" \")-Len(\" \"));\n\t\t\t\t\t//atagz = Left(atagz, Len(atagz)-instr(atagz,\" \")-Len(\" \"));\n\t\t\t\t}\n\t\t\t\t\tif(atagz ~= \"credits\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer', DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.Playername ~= Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tASay(\"Your credits count is\"@DXP.Credits);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(atagz ~= \"motd\")\n\t\t\t\t\t{\n\t\t\t\t\t\tADelaySay(AM.MOTD,1);\n\t\t\t\t\t}\n\t\t\t\t\telse if(Left(atagz,5)  ~= \"motd \")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer', DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.Playername ~= Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif(DXP.bAdmin)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tASay(\"MOTD changed to\"@atagzextra);\n\t\t\t\t\t\t\t\t\tAM.MOTD = atagzextra;\n\t\t\t\t\t\t\t\t\tAM.SaveConfig();\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(atagz ~= \"abort\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(SDA != None)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif(AM.shutdownAbortSound != none)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tDXP.PlaySound(AM.shutdownAbortSound, SLOT_Interface,,, 256);\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tSDA.Destroy();\n\t\t\t\t\t\t\t\tSDA = none;\n\t\t\t\t\t\t\t\tASay(\"Shutdown cancelled.\");\n\t\t\t\t\t\t\t}\t\t\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t\telse if(Left(atagz,8) ~= \"randstr \")\n\t\t\t\t\t{\n\t\t\t\t\t\trememberint = int(atagzextra);\n\t\t\t\t\t\tSetTimer(0.5,False);\n\t\t\t\t\t\tbPublicCommand = True;\n\t\t\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\t\t\tStoredCommand = \"randomstring\";\n\t\t\t\t\t}\n\t\t\t\t\telse if(Left(atagz,9) ~= \"randchar \")\n\t\t\t\t\t{\n\t\t\t\t\t\trememberint = int(atagzextra);\n\t\t\t\t\t\tSetTimer(0.5,False);\n\t\t\t\t\t\tbPublicCommand = True;\n\t\t\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\t\t\tStoredCommand = \"randomchar\";\n\t\t\t\t\t}\n\t\t\t\t\telse if(Left(atagz,7) ~= \"summon \")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin)\n\t\t\t\t\t\t\tTriggerer.consolecommand(\"summon\"@atagzextra);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tTriggerer.Consolecommand(\"mutate rcon.summon\"@atagzextra);\n\n\t\t\t\t\t}\n\t\t\t\t\telse if(Left(atagz,6) ~= \"arand \")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(instr(caps(atagzextra), caps(\"d\")) != -1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taSides = int(Right(atagzextra, Len(atagzextra)-instr(atagzextra,\"d\")-Len(\"d\")));\n\t\t\t\t\t\t\taDice = int(Left(atagzextra, InStr(atagzextra,\"d\")));\n\t\t\t\t\t\t\twhile(aRolls < aDice)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\taTotal += Rand(aSides);\n\t\t\t\t\t\t\t\taRolls++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tBroadcastMessage(Triggerer.PlayerReplicationInfo.PlayerName$\" rolls \"$aDice$\" \"$aSides$\"-sided dice....\"@aTotal);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\tBroadcastMessage(\"Error in formatting.\");\n\t\t\t\t\t}\n\t\t\t\t\telse if(Left(atagz,2) ~= \"r \")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(AM.bMutatorAdmin && !Triggerer.bAdmin)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tTriggerer.bAdmin = True;\n\t\t\t\t\t\t\tbWasAdmin=True;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tTriggerer.ConsoleCommand(\"mutate rcon.\"$atagzextra);\n\t\t\t\t\t\t\tif(bWasAdmin)\n\t\t\t\t\t\t\t\tTriggerer.bAdmin = false;\n\n\t\t\t\t\t}\n\t\t\t\t\telse if(Left(atagz,4) ~= \"mut \")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(AM.bMutatorAdmin && !Triggerer.bAdmin)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tTriggerer.bAdmin = True;\n\t\t\t\t\t\t\tbWasAdmin=True;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tTriggerer.ConsoleCommand(\"mutate \"$atagzextra);\n\t\t\t\t\t\t\tif(bWasAdmin)\n\t\t\t\t\t\t\t\tTriggerer.bAdmin = false;\n\n\t\t\t\t\t}\n\t\t\t\t\telse if(atagz ~= \"ping\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer', DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.Playername ~= Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tASay(\"Your ping is\"@DXP.PlayerReplicationInfo.Ping);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(atagz ~= \"testrot\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer', DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.Playername ~= Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tASay(\"Your rotation is\"@DXP.ViewRotation);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(atagz ~= \"nick\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer', DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.Playername ~= Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tASay(\"Your nick is\"@AM.GetNick(DXP));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(Left(atagz,5)  ~= \"nick \")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer', DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.Playername ~= Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tASay(\"Your nick is changed.\");\n\t\t\t\t\t\t\t\tDXP.consolecommand(\"Mutate nick\"@atagzextra);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} \n\t\t\t\t\telse if(atagz ~= \"song\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'PlayerPawn', PP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(PP.PlayerReplicationInfo.Playername ~= Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tASay(\"Your track is\"@string(PP.Song));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} \n\t\t\t\t\telse if(atagz ~= \"pk1\")\n\t\t\t\t\t{\n\t\t\t\t\t\tif(peacekeeper != 0)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tAuthPlayerName = Sender;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(Sendtype == \"player\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tSetTimer(1,False);\n\t\t\t\t\t\tbCheckingAuth = True;\n\t\t\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\t\t\tbInitBroadcast=True;\n\t\t\t\t\t\tStoredCommand = \"peacekeeperone\";\n\t\t\t\t\t}\n\t\t\t\t\telse if(atagz ~= \"pk2\")\n\t\t\t\t\t{\n\t\t\t\t\t\tif(peacekeeper != 0)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tAuthPlayerName = Sender;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(Sendtype == \"player\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tSetTimer(1,False);\n\t\t\t\t\t\tbCheckingAuth = True;\n\t\t\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\t\t\tbInitBroadcast=True;\n\t\t\t\t\t\tStoredCommand = \"peacekeepertwo\";\n\t\t\t\t\t}\n\t\t\t\t\telse if(atagz ~= \"aw\")\n\t\t\t\t\t{\n\t\t\t\t\t\tif(AM.bProtocolA == True)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tAuthPlayerName = Sender;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(Sendtype == \"player\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tSetTimer(1,False);\n\t\t\t\t\t\tbCheckingAuth = True;\n\t\t\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\t\t\tbInitBroadcast=True;\n\t\t\t\t\t\tStoredCommand = \"awatchper\";\n\t\t\t\t\t}\n\t\t\t\t\telse if(atagz ~= \"awoff\")\n\t\t\t\t\t{\n\t\t\t\t\t\tif(AM.bProtocolA == False)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tAuthPlayerName = Sender;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(Sendtype == \"player\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tSetTimer(1,False);\n\t\t\t\t\t\tbCheckingAuth = True;\n\t\t\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\t\t\tbInitBroadcast=True;\n\t\t\t\t\t\tStoredCommand = \"awatchperoff\";\n\t\t\t\t\t}\n\t\t\t\t\telse if(atagz ~= \"pk0\")\n\t\t\t\t\t{\n\t\t\t\t\t\tif(peacekeeper == 0)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tAuthPlayerName = Sender;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(Sendtype == \"player\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == AuthPlayerName)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tCheckAuthPlayer = DXP;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tSetTimer(1,False);\n\t\t\t\t\t\tbCheckingAuth = True;\n\t\t\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\t\t\tbInitBroadcast=True;\n\t\t\t\t\t\tStoredCommand = \"peacekeepernone\";\n\t\t\t\t\t}\n\t\t\t\t\telse if(atagz ~= \"topic\")\n\t\t\t\t\t{\n\t\t\t\t\t\tSetTimer(1,False);\n\t\t\t\t\t\tbPublicCommand = True;\n\t\t\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\t\t\tStoredCommand = \"saytopic\";\n\t\t\t\t\t}\n\t\t\t\t\telse if(Left(atagz,6)  ~= \"topic \")\n\t\t\t\t\t{\n\t\t\t\t\t\tSetTimer(1,False);\n\t\t\t\t\t\tRememberString = atagzextra;\n\t\t\t\t\t\tbPublicCommand = True;\n\t\t\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\t\t\tStoredCommand = \"topic\";\n\t\t\t\t\t}\n\t\t\t\t\telse if(atagz ~= \"repeat\")\n\t\t\t\t\t{\n\t\t\t\t\t\tRememberName = Sender;\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == RememberName)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tRememberPlayer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tSetTimer(1,False);\n\t\t\t\t\t\tbDontLog=True;\n\t\t\t\t\t\tbPublicCommand = True;\n\t\t\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\t\t\tbDontLog=True;\n\t\t\t\t\t\tStoredCommand = \"chatlogrepeat\";\n\t\t\t\t\t}\n\t\t\t\t\telse if(atagz ~= \"dist\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tloc = Triggerer.Location;\n\t\t\t\t\t\tloc.Z += Triggerer.BaseEyeHeight;\n\t\t\t\t\t\tvline = Vector(Triggerer.ViewRotation) * 10000;\n\t\t\t\t\t\tTrace(hitLocation, hitNormal, loc+vline, loc, true);\n\t\t\t\t\t\tTargetRange -= Abs(VSize(Triggerer.Location - HitLocation));\n\t\t\t\t\t\tASay(\"I calculate that distance as\"@TargetRange);\n\t\t\t\t\t}\n\t\t\t\t\telse if(atagz ~= \"loc\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tloc = Triggerer.Location;\n\t\t\t\t\t\tloc.Z += Triggerer.BaseEyeHeight;\n\t\t\t\t\t\tvline = Vector(Triggerer.ViewRotation) * 10000;\n\t\t\t\t\t\tTrace(hitLocation, hitNormal, loc+vline, loc, true);\n\t\t\t\t\t\tTargetRange -= Abs(VSize(Triggerer.Location - HitLocation));\n\t\t\t\t\t\tASay(\"Your crosshair's location is\"@string(hitlocation));\n\t\t\t\t\t}\n\t\t\t\t\telse if(Left(atagz,7)  ~= \"setloc \")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tloc = Triggerer.Location;\n\t\t\t\t\t\t\tloc.Z += Triggerer.BaseEyeHeight;\n\t\t\t\t\t\t\tvline = Vector(Triggerer.ViewRotation) * 10000;\n\t\t\t\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+vline, loc, true);\n\t\t\t\t\t\n\t\t\t\t\t\t\tif (hitActor != None && !hitActor.isA('LevelInfo'))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\thitActor.SetLocation(Vector(atagzextra));\n\t\t\t\t\t\t\t\tASay(string(hitActor.class)@\"moved to \"$vector(atagzextra)$\".\");\n\t\t\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\t\n\t\t\t\t\telse if(Left(atagz,7)  ~= \"setrot \")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin || IsWhitelisted(Triggerer))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tloc = Triggerer.Location;\n\t\t\t\t\t\t\tloc.Z += Triggerer.BaseEyeHeight;\n\t\t\t\t\t\t\tvline = Vector(Triggerer.ViewRotation) * 10000;\n\t\t\t\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+vline, loc, true);\n\t\t\t\t\t\n\t\t\t\t\t\t\tif (hitActor != None && !hitActor.isA('LevelInfo'))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\thitActor.setrotation(rotator(atagzextra));\n\t\t\t\t\t\t\t\tASay(string(hitActor.class)@\"rotated to \"$rotator(atagzextra)$\".\");\n\t\t\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\t\t\n\t\t\t\t\telse if(Left(atagz,9)  ~= \"offset.x \")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin || IsWhitelisted(Triggerer))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tloc = Triggerer.Location;\n\t\t\t\t\t\t\tloc.Z += Triggerer.BaseEyeHeight;\n\t\t\t\t\t\t\tvline = Vector(Triggerer.ViewRotation) * 10000;\n\t\t\t\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+vline, loc, true);\n\t\t\t\t\t\n\t\t\t\t\t\t\tif (hitActor != None && !hitActor.isA('LevelInfo'))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\taltloc = hitactor.location;\n\t\t\t\t\t\t\t\taltloc.x += int(atagzextra);\n\t\t\t\t\t\t\t\t\tif(AM.bCollisionDebug)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\thitActor.SetCollision(false, false, false);\n\t\t\t\t\t\t\t\t\t\thitActor.bCollideWorld = false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\thitActor.SetLocation(altloc);\n\t\t\t\t\t\t\t\t\tif(AM.bCollisionDebug)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\thitActor.SetCollision(true, true, true);\n\t\t\t\t\t\t\t\t\t\thitActor.bCollideWorld = hitactor.default.bCollideWorld;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t//ASay(string(hitActor.class)$\" location was altered by \"$int(atagzextra)$\".\");\n\t\t\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(Left(atagz,10)  ~= \"offset.x -\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin || IsWhitelisted(Triggerer))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tloc = Triggerer.Location;\n\t\t\t\t\t\t\tloc.Z += Triggerer.BaseEyeHeight;\n\t\t\t\t\t\t\tvline = Vector(Triggerer.ViewRotation) * 10000;\n\t\t\t\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+vline, loc, true);\n\t\t\t\t\t\n\t\t\t\t\t\t\tif (hitActor != None && !hitActor.isA('LevelInfo'))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\taltloc = hitactor.location;\n\t\t\t\t\t\t\t\taltloc.x -= int(Right(atagzextra, Len(atagzextra)-instr(atagzextra,\"-\")-Len(\"-\")));\n\n\t\t\t\t\t\t\t\t\tif(AM.bCollisionDebug)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\thitActor.SetCollision(false, false, false);\n\t\t\t\t\t\t\t\t\t\thitActor.bCollideWorld = false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\thitActor.SetLocation(altloc);\n\t\t\t\t\t\t\t\t\tif(AM.bCollisionDebug)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\thitActor.SetCollision(true, true, true);\n\t\t\t\t\t\t\t\t\t\thitActor.bCollideWorld = hitactor.default.bCollideWorld;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t//ASay(string(hitActor.class)$\" location was altered by \"$int(atagzextra)$\".\"$int(Right(atagzextra, Len(atagzextra)-instr(atagzextra,\"-\")-Len(\"-\"))));\n\t\t\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(Left(atagz,9)  ~= \"offset.y \")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin || IsWhitelisted(Triggerer))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tloc = Triggerer.Location;\n\t\t\t\t\t\t\tloc.Z += Triggerer.BaseEyeHeight;\n\t\t\t\t\t\t\tvline = Vector(Triggerer.ViewRotation) * 10000;\n\t\t\t\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+vline, loc, true);\n\t\t\t\t\t\n\t\t\t\t\t\t\tif (hitActor != None && !hitActor.isA('LevelInfo'))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\taltloc = hitactor.location;\n\t\t\t\t\t\t\t\taltloc.y += int(atagzextra);\n\n\t\t\t\t\t\t\t\t\tif(AM.bCollisionDebug)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\thitActor.SetCollision(false, false, false);\n\t\t\t\t\t\t\t\t\t\thitActor.bCollideWorld = false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\thitActor.SetLocation(altloc);\n\t\t\t\t\t\t\t\t\tif(AM.bCollisionDebug)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\thitActor.SetCollision(true, true, true);\n\t\t\t\t\t\t\t\t\t\thitActor.bCollideWorld = hitactor.default.bCollideWorld;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t//ASay(string(hitActor.class)$\" location was altered by \"$int(atagzextra)$\".\");\n\t\t\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(Left(atagz,10)  ~= \"offset.y -\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin || IsWhitelisted(Triggerer))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tloc = Triggerer.Location;\n\t\t\t\t\t\t\tloc.Z += Triggerer.BaseEyeHeight;\n\t\t\t\t\t\t\tvline = Vector(Triggerer.ViewRotation) * 10000;\n\t\t\t\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+vline, loc, true);\n\t\t\t\t\t\n\t\t\t\t\t\t\tif (hitActor != None && !hitActor.isA('LevelInfo'))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\taltloc = hitactor.location;\n\t\t\t\t\t\t\t\taltloc.y -= int(Right(atagzextra, Len(atagzextra)-instr(atagzextra,\"-\")-Len(\"-\")));\n\n\t\t\t\t\t\t\t\t\tif(AM.bCollisionDebug)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\thitActor.SetCollision(false, false, false);\n\t\t\t\t\t\t\t\t\t\thitActor.bCollideWorld = false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\thitActor.SetLocation(altloc);\n\t\t\t\t\t\t\t\t\tif(AM.bCollisionDebug)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\thitActor.SetCollision(true, true, true);\n\t\t\t\t\t\t\t\t\t\thitActor.bCollideWorld = hitactor.default.bCollideWorld;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t//ASay(string(hitActor.class)$\" location was altered by \"$int(atagzextra)$\".\"$int(Right(atagzextra, Len(atagzextra)-instr(atagzextra,\"-\")-Len(\"-\"))));\n\t\t\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(Left(atagz,9)  ~= \"offset.z \")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin || IsWhitelisted(Triggerer))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tloc = Triggerer.Location;\n\t\t\t\t\t\t\tloc.Z += Triggerer.BaseEyeHeight;\n\t\t\t\t\t\t\tvline = Vector(Triggerer.ViewRotation) * 10000;\n\t\t\t\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+vline, loc, true);\n\t\t\t\t\t\n\t\t\t\t\t\t\tif (hitActor != None && !hitActor.isA('LevelInfo'))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\taltloc = hitactor.location;\n\t\t\t\t\t\t\t\taltloc.z += int(atagzextra);\n\n\t\t\t\t\t\t\t\t\tif(AM.bCollisionDebug)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\thitActor.SetCollision(false, false, false);\n\t\t\t\t\t\t\t\t\t\thitActor.bCollideWorld = false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\thitActor.SetLocation(altloc);\n\t\t\t\t\t\t\t\t\tif(AM.bCollisionDebug)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\thitActor.SetCollision(true, true, true);\n\t\t\t\t\t\t\t\t\t\thitActor.bCollideWorld = hitactor.default.bCollideWorld;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t//ASay(string(hitActor.class)$\" location was altered by \"$int(atagzextra)$\".\");\n\t\t\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(Left(atagz,10)  ~= \"offset.z -\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin || IsWhitelisted(Triggerer))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tloc = Triggerer.Location;\n\t\t\t\t\t\t\tloc.Z += Triggerer.BaseEyeHeight;\n\t\t\t\t\t\t\tvline = Vector(Triggerer.ViewRotation) * 10000;\n\t\t\t\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+vline, loc, true);\n\t\t\t\t\t\n\t\t\t\t\t\t\tif (hitActor != None && !hitActor.isA('LevelInfo'))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\taltloc = hitactor.location;\n\t\t\t\t\t\t\t\taltloc.z -= int(Right(atagzextra, Len(atagzextra)-instr(atagzextra,\"-\")-Len(\"-\")));\n\n\t\t\t\t\t\t\t\t\tif(AM.bCollisionDebug)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\thitActor.SetCollision(false, false, false);\n\t\t\t\t\t\t\t\t\t\thitActor.bCollideWorld = false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\thitActor.SetLocation(altloc);\n\t\t\t\t\t\t\t\t\tif(AM.bCollisionDebug)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\thitActor.SetCollision(true, true, true);\n\t\t\t\t\t\t\t\t\t\thitActor.bCollideWorld = hitactor.default.bCollideWorld;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t//ASay(string(hitActor.class)$\" location was altered by \"$int(atagzextra)$\".\"$int(Right(atagzextra, Len(atagzextra)-instr(atagzextra,\"-\")-Len(\"-\"))));\n\t\t\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(Left(atagz,13)  ~= \"rotate.pitch \")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin || IsWhitelisted(Triggerer))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tloc = Triggerer.Location;\n\t\t\t\t\t\t\tloc.Z += Triggerer.BaseEyeHeight;\n\t\t\t\t\t\t\tvline = Vector(Triggerer.ViewRotation) * 10000;\n\t\t\t\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+vline, loc, true);\n\t\t\t\t\t\n\t\t\t\t\t\t\tif (hitActor != None && !hitActor.isA('LevelInfo'))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\taltrot = hitactor.rotation;\n\t\t\t\t\t\t\t\taltrot.pitch += int(atagzextra);\n\n\t\t\t\t\t\t\t\thitActor.setrotation(altrot);\n\t\t\t\t\t\t\t\t//ASay(string(hitActor.class)$\" rotation was altered by \"$int(atagzextra)$\".\");\n\t\t\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(Left(atagz,14)  ~= \"rotate.pitch -\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin || IsWhitelisted(Triggerer))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tloc = Triggerer.Location;\n\t\t\t\t\t\t\tloc.Z += Triggerer.BaseEyeHeight;\n\t\t\t\t\t\t\tvline = Vector(Triggerer.ViewRotation) * 10000;\n\t\t\t\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+vline, loc, true);\n\t\t\t\t\t\n\t\t\t\t\t\t\tif (hitActor != None && !hitActor.isA('LevelInfo'))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\taltrot = hitactor.rotation;\n\t\t\t\t\t\t\t\taltrot.pitch -= int(Right(atagzextra, Len(atagzextra)-instr(atagzextra,\"-\")-Len(\"-\")));\n\n\t\t\t\t\t\t\t\thitActor.Setrotation(altrot);\n\t\t\t\t\t\t\t\t//ASay(string(hitActor.class)$\" rotation was altered by \"$int(atagzextra)$\".\"$int(Right(atagzextra, Len(atagzextra)-instr(atagzextra,\"-\")-Len(\"-\"))));\n\t\t\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(Left(atagz,12)  ~= \"rotate.roll \")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin || IsWhitelisted(Triggerer))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tloc = Triggerer.Location;\n\t\t\t\t\t\t\tloc.Z += Triggerer.BaseEyeHeight;\n\t\t\t\t\t\t\tvline = Vector(Triggerer.ViewRotation) * 10000;\n\t\t\t\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+vline, loc, true);\n\t\t\t\t\t\n\t\t\t\t\t\t\tif (hitActor != None && !hitActor.isA('LevelInfo'))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\taltrot = hitactor.rotation;\n\t\t\t\t\t\t\t\taltrot.roll += int(atagzextra);\n\n\t\t\t\t\t\t\t\thitActor.Setrotation(altrot);\n\t\t\t\t\t\t\t\t//ASay(string(hitActor.class)$\" rotation was altered by \"$int(atagzextra)$\".\");\n\t\t\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(Left(atagz,13)  ~= \"rotate.roll -\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin || IsWhitelisted(Triggerer))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tloc = Triggerer.Location;\n\t\t\t\t\t\t\tloc.Z += Triggerer.BaseEyeHeight;\n\t\t\t\t\t\t\tvline = Vector(Triggerer.ViewRotation) * 10000;\n\t\t\t\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+vline, loc, true);\n\t\t\t\t\t\n\t\t\t\t\t\t\tif (hitActor != None && !hitActor.isA('LevelInfo'))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\taltrot = hitactor.rotation;\n\t\t\t\t\t\t\t\taltrot.roll -= int(Right(atagzextra, Len(atagzextra)-instr(atagzextra,\"-\")-Len(\"-\")));\n\n\t\t\t\t\t\t\t\thitActor.Setrotation(altrot);\n\t\t\t\t\t\t\t\t//ASay(string(hitActor.class)$\" rotation was altered by \"$int(atagzextra)$\".\"$int(Right(atagzextra, Len(atagzextra)-instr(atagzextra,\"-\")-Len(\"-\"))));\n\t\t\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(Left(atagz,11)  ~= \"rotate.yaw \")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin || IsWhitelisted(Triggerer))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tloc = Triggerer.Location;\n\t\t\t\t\t\t\tloc.Z += Triggerer.BaseEyeHeight;\n\t\t\t\t\t\t\tvline = Vector(Triggerer.ViewRotation) * 10000;\n\t\t\t\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+vline, loc, true);\n\t\t\t\t\t\n\t\t\t\t\t\t\tif (hitActor != None && !hitActor.isA('LevelInfo'))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\taltrot = hitactor.rotation;\n\t\t\t\t\t\t\t\taltrot.yaw += int(atagzextra);\n\n\t\t\t\t\t\t\t\thitActor.Setrotation(altrot);\n\t\t\t\t\t\t\t\t//ASay(string(hitActor.class)$\" rotation was altered by \"$int(atagzextra)$\".\");\n\t\t\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(Left(atagz,12)  ~= \"rotate.yaw -\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin || IsWhitelisted(Triggerer))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tloc = Triggerer.Location;\n\t\t\t\t\t\t\tloc.Z += Triggerer.BaseEyeHeight;\n\t\t\t\t\t\t\tvline = Vector(Triggerer.ViewRotation) * 10000;\n\t\t\t\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+vline, loc, true);\n\t\t\t\t\t\n\t\t\t\t\t\t\tif (hitActor != None && !hitActor.isA('LevelInfo'))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\taltrot = hitactor.rotation;\n\t\t\t\t\t\t\t\taltrot.yaw -= int(Right(atagzextra, Len(atagzextra)-instr(atagzextra,\"-\")-Len(\"-\")));\n\n\t\t\t\t\t\t\t\thitActor.Setrotation(altrot);\n\t\t\t\t\t\t\t\t//ASay(string(hitActor.class)$\" rotation was altered by \"$int(atagzextra)$\".\"$int(Right(atagzextra, Len(atagzextra)-instr(atagzextra,\"-\")-Len(\"-\"))));\n\t\t\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(Left(atagz,12)  ~= \"athenaspawn \")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(AM.PrimaryLocation != vect(0,0,0))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\taTemp = atagzextra;\n\t\t\t\t\t\t\t\tif ( InStr(aTemp,\".\") == -1 )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\taTemp=\"DeusEx.\" $ aTemp;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\taClass = class<actor>( DynamicLoadObject( aTemp, class'Class' ) );\n\t\t\t\t\t\t\t\t\tif(aClass != None)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tSpawn(aClass,,,AM.PrimaryLocation);\n\t\t\t\t\t\t\t\t\t\tASay(\"Spawning object at primary location.\");\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(Left(atagz,13)  ~= \"athenacreate \")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor(i=0;i<8;i++)\n\t\t\t\t\t\t\tif(AM.RememberLocation[i] != vect(0,0,0))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\taTemp = atagzextra;\n\t\t\t\t\t\t\t\tif ( InStr(aTemp,\".\") == -1 )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\taTemp=\"DeusEx.\" $ aTemp;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\taClass = class<actor>( DynamicLoadObject( aTemp, class'Class' ) );\n\t\t\t\t\t\t\t\t\tif(aClass != None)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tSpawn(aClass,,,AM.RememberLocation[i]);\n\t\t\t\t\t\t\t\t\t\tASay(\"Spawning object at locations.\");\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(atagz ~= \"rememberlocation\" || atagz ~= \"remloc\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tSaveLocRem(Triggerer.Location);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(atagz ~= \"rememberprimary\" || atagz ~= \"rempri\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tAM.PrimaryLocation = triggerer.Location;\n\t\t\t\t\t\t\tASay(\"Primary location set at\"@triggerer.Location);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(atagz ~= \"trigger\" || atagz ~= \"open\" || atagz ~= \"trig\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin || IsWhitelisted(Triggerer))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tloc = Triggerer.Location;\n\t\t\t\t\t\t\tloc.Z += Triggerer.BaseEyeHeight;\n\t\t\t\t\t\t\tvline = Vector(Triggerer.ViewRotation) * 10000;\n\t\t\t\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+vline, loc, true);\n\t\t\t\t\t\n\t\t\t\t\t\t\tif (hitActor != None && !hitActor.isA('LevelInfo'))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\thitActor.Trigger(Triggerer, Triggerer);\n\t\t\t\t\t\t\t\tASay(string(hitActor.class)@\"triggered.\");\n\t\t\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(atagz ~= \"tantalus\" || atagz ~= \"tant\" || atagz ~= \"kill\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tloc = Triggerer.Location;\n\t\t\t\t\t\t\tloc.Z += Triggerer.BaseEyeHeight;\n\t\t\t\t\t\t\tvline = Vector(Triggerer.ViewRotation) * 10000;\n\t\t\t\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+vline, loc, true);\n\t\t\t\t\t\t\t\t\tif (hitActor != None)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\thitMover = DeusExMover(hitActor);\n\t\t\t\t\t\t\t\t\t\thitPawn = ScriptedPawn(hitActor);\n\t\t\t\t\t\t\t\t\t\thitDecoration = DeusExDecoration(hitActor);\n\t\t\t\t\t\t\t\t\t\thitPlayer = PlayerPawn(hitActor);\n\t\t\t\t\t\t\t\t\t\tif (hitMover != None)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\thitMover.bBreakable   = true;\n\t\t\t\t\t\t\t\t\t\t\t\thitMover.doorStrength = 0;\n\t\t\t\t\t\t\t\t\t\t\t\thitMover.TakeDamage(10000, Self, hitLocation, vline, 'Tantalus'); \n\t\t\t\t\t\t\t\t\t\t\t\tASay(string(hitMover.class)@\"destroyed.\");\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse if (hitPawn != None)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\thitPawn.bInvincible    = false;\n\t\t\t\t\t\t\t\t\t\t\t\thitPawn.HealthHead     = 0;\n\t\t\t\t\t\t\t\t\t\t\t\thitPawn.HealthTorso    = 0;\n\t\t\t\t\t\t\t\t\t\t\t\thitPawn.HealthLegLeft  = 0;\n\t\t\t\t\t\t\t\t\t\t\t\thitPawn.HealthLegRight = 0;\n\t\t\t\t\t\t\t\t\t\t\t\thitPawn.HealthArmLeft  = 0;\n\t\t\t\t\t\t\t\t\t\t\t\thitPawn.HealthArmRight = 0;\n\t\t\t\t\t\t\t\t\t\t\t\thitPawn.Health         = 0;\n\t\t\t\t\t\t\t\t\t\t\t\thitPawn.TakeDamage(10000, Self, hitLocation, vline, 'Tantalus'); \n\t\t\t\t\t\t\t\t\t\t\t\tASay(string(hitPawn.class)@\"destroyed.\");\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse if (hitDecoration != None)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\thitDecoration.bInvincible = false;\n\t\t\t\t\t\t\t\t\t\t\t\thitDecoration.HitPoints = 0;\n\t\t\t\t\t\t\t\t\t\t\t\thitDecoration.TakeDamage(10000, Self, hitLocation, vline, 'Tantalus'); \n\t\t\t\t\t\t\t\t\t\t\t\tASay(string(hitDecoration.class)@\"destroyed.\");\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse if (hitPlayer != None)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\thitPlayer.ReducedDamageType = '';\n\t\t\t\t\t\t\t\t\t\t\thitActor.TakeDamage(5000, Self, hitLocation, vline, 'Tantalus'); \n\t\t\t\t\t\t\t\t\t\t\tASay(string(hitactor.class)@\"destroyed.\");\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse if (hitActor != Level)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\thitActor.TakeDamage(5000, Self, hitLocation, vline, 'Tantalus');\n\t\t\t\t\t\t\t\t\t\t\tASay(string(hitactor.class)@\"destroyed.\");\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(atagz  ~= \"push\")\n\t\t\t\t\t{\n\t\t\t\t\t\tpvel = -700;\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tloc = Triggerer.Location;\n\t\t\t\t\t\t\tloc.Z += Triggerer.BaseEyeHeight;\n\t\t\t\t\t\t\tvline = Vector(Triggerer.ViewRotation) * 10000;\n\t\t\t\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+vline, loc, true);\n\t\t\t\t\t\t\t\t\tif (hitActor != None)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\thitPawn = ScriptedPawn(hitActor);\n\t\t\t\t\t\t\t\t\t\thitDecoration = DeusExDecoration(hitActor);\n\t\t\t\t\t\t\t\t\t\thitPlayer = PlayerPawn(hitActor);\n\n\t\t\t\t\t\t\t\t\t\tif (hitPawn != None)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\thitPawn.SetPhysics(Phys_Falling);\n\t\t\t\t\t\t\t\t\t\t\thitPawn.Velocity = (normal(Triggerer.Location - hitPawn.Location) * pvel);\t\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse if (hitDecoration != None)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\thitDecoration.SetPhysics(Phys_Falling);\n\t\t\t\t\t\t\t\t\t\t\thitDecoration.Velocity = (normal(Triggerer.Location - hitDecoration.Location) * pvel);\t\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse if (hitPlayer != None)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\thitPlayer.SetPhysics(Phys_Falling);\n\t\t\t\t\t\t\t\t\t\t\thitPlayer.Velocity = (normal(Triggerer.Location - hitPlayer.Location) * pvel);\t\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(Left(atagz,5)  ~= \"push \")\n\t\t\t\t\t{\n\t\t\t\t\t\tif(atagzextra == \"\")\n\t\t\t\t\t\t\tpvel = -700;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tpvel = int(atagzextra);\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tloc = Triggerer.Location;\n\t\t\t\t\t\t\tloc.Z += Triggerer.BaseEyeHeight;\n\t\t\t\t\t\t\tvline = Vector(Triggerer.ViewRotation) * 10000;\n\t\t\t\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+vline, loc, true);\n\t\t\t\t\t\t\t\t\tif (hitActor != None)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\thitPawn = ScriptedPawn(hitActor);\n\t\t\t\t\t\t\t\t\t\thitDecoration = DeusExDecoration(hitActor);\n\t\t\t\t\t\t\t\t\t\thitPlayer = PlayerPawn(hitActor);\n\n\t\t\t\t\t\t\t\t\t\tif (hitPawn != None)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\thitPawn.SetPhysics(Phys_Falling);\n\t\t\t\t\t\t\t\t\t\t\thitPawn.Velocity = (normal(Triggerer.Location - hitPawn.Location) * pvel);\t\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse if (hitDecoration != None)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\thitDecoration.SetPhysics(Phys_Falling);\n\t\t\t\t\t\t\t\t\t\t\thitDecoration.Velocity = (normal(Triggerer.Location - hitDecoration.Location) * pvel);\t\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse if (hitPlayer != None)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\thitPlayer.SetPhysics(Phys_Falling);\n\t\t\t\t\t\t\t\t\t\t\thitPlayer.Velocity = (normal(Triggerer.Location - hitPlayer.Location) * pvel);\t\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(atagz ~= \"boom\" || atagz ~= \"blow\" || atagz ~= \"detonate\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tloc = Triggerer.Location;\n\t\t\t\t\t\t\tloc.Z += Triggerer.BaseEyeHeight;\n\t\t\t\t\t\t\tvline = Vector(Triggerer.ViewRotation) * 10000;\n\t\t\t\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+vline, loc, true);\n\t\t\t\t\t\t\t\t\tif (hitActor != None)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\thitMover = DeusExMover(hitActor);\n\t\t\t\t\t\t\t\t\t\thitPawn = ScriptedPawn(hitActor);\n\t\t\t\t\t\t\t\t\t\thitDecoration = DeusExDecoration(hitActor);\n\t\t\t\t\t\t\t\t\t\thitPlayer = PlayerPawn(hitActor);\n\t\t\t\t\t\t\t\t\t\tif (hitMover != None)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\thitMover.bDrawExplosion = True;\n\t\t\t\t\t\t\t\t\t\t\t\thitMover.bBreakable   = true;\n\t\t\t\t\t\t\t\t\t\t\t\thitMover.doorStrength = 0;\n\t\t\t\t\t\t\t\t\t\t\t\thitMover.TakeDamage(10000, Self, hitLocation, vline, 'Exploded'); \n\t\t\t\t\t\t\t\t\t\t\t\tASay(string(hitMover.class)@\"destroyed.\");\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse if (hitPawn != None)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\thitPawn.bInvincible    = false;\n\t\t\t\t\t\t\t\t\t\t\t\thitPawn.HealthHead     = 0;\n\t\t\t\t\t\t\t\t\t\t\t\thitPawn.HealthTorso    = 0;\n\t\t\t\t\t\t\t\t\t\t\t\thitPawn.HealthLegLeft  = 0;\n\t\t\t\t\t\t\t\t\t\t\t\thitPawn.HealthLegRight = 0;\n\t\t\t\t\t\t\t\t\t\t\t\thitPawn.HealthArmLeft  = 0;\n\t\t\t\t\t\t\t\t\t\t\t\thitPawn.HealthArmRight = 0;\n\t\t\t\t\t\t\t\t\t\t\t\thitPawn.Health         = 0;\n\t\t\t\t\t\t\t\t\t\t\t\thitPawn.TakeDamage(1000, Self, hitLocation, vline, 'Exploded'); \n\t\t\t\t\t\t\t\t\t\t\t\tASay(string(hitPawn.class)@\"destroyed.\");\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse if (hitDecoration != None)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\thitDecoration.bExplosive = True;\n\t\t\t\t\t\t\t\t\t\t\t\thitDecoration.bInvincible = false;\n\t\t\t\t\t\t\t\t\t\t\t\thitDecoration.HitPoints = 0;\n\t\t\t\t\t\t\t\t\t\t\t\thitDecoration.TakeDamage(1000, Self, hitLocation, vline, 'Exploded'); \n\t\t\t\t\t\t\t\t\t\t\t\tASay(string(hitDecoration.class)@\"destroyed.\");\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse if (hitPlayer != None)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\thitPlayer.ReducedDamageType = '';\n\t\t\t\t\t\t\t\t\t\t\thitActor.TakeDamage(5000, Self, hitLocation, vline, 'Exploded'); \n\t\t\t\t\t\t\t\t\t\t\tASay(string(hitactor.class)@\"destroyed.\");\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse if (hitActor != Level)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\thitActor.TakeDamage(5000, Self, hitLocation, vline, 'Tantalus');\n\t\t\t\t\t\t\t\t\t\t\tASay(string(hitactor.class)@\"destroyed.\");\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(atagz ~= \"lock\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tloc = Triggerer.Location;\n\t\t\t\t\t\t\tloc.Z += Triggerer.BaseEyeHeight;\n\t\t\t\t\t\t\tvline = Vector(Triggerer.ViewRotation) * 10000;\n\t\t\t\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+vline, loc, true);\n\t\t\t\t\t\n\t\t\t\t\t\t\tif (hitActor != None)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\thitMover = DeusExMover(hitActor);\n\t\t\t\t\t\t\t\tif (hitMover != None)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\thitMover.bLocked = !hitMover.bLocked;\n\t\t\t\t\t\t\t\t\thitMover.bPickable = False;\n\t\t\t\t\t\t\t\t\tASay(string(hitMover.class)@\"is now \"$hitMover.bLocked);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(atagz ~= \"inv\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin || IsWhitelisted(Triggerer))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tloc = Triggerer.Location;\n\t\t\t\t\t\t\tloc.Z += Triggerer.BaseEyeHeight;\n\t\t\t\t\t\t\tvline = Vector(Triggerer.ViewRotation) * 10000;\n\t\t\t\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+vline, loc, true);\n\t\t\t\t\t\t\n\t\t\t\t\t\t\tif(hitActor != None)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif(hitActor.isA('DeusExDecoration'))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tDeusExDecoration(hitActor).bInvincible = !DeusExDecoration(hitActor).bInvincible;\n\t\t\t\t\t\t\t\t\tASay(string(hitActor.class)@\"is\"@DeusExDecoration(hitActor).bInvincible);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif(hitActor.isA('DeusExPlayer'))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif(DeusExPlayer(hitActor).ReducedDamageType == 'all')\n\t\t\t\t\t\t\t\t\t\tDeusExPlayer(hitActor).ReducedDamageType = '';\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\tDeusExPlayer(hitActor).ReducedDamageType = 'all';\n\t\n\t\t\t\t\t\t\t\t\tASay(string(hitActor.class)@\"is\"@DeusExPlayer(hitActor).reduceddamagetype);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif(hitActor.isA('ScriptedPawn'))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tScriptedPawn(hitActor).bInvincible = !ScriptedPawn(hitActor).bInvincible;\n\t\t\t\t\t\t\t\t\tASay(string(hitActor.class)@\"is\"@ScriptedPawn(hitActor).bInvincible);\n\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(atagz ~= \"pushable\" || atagz ~= \"frobbable\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin || IsWhitelisted(Triggerer))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tloc = Triggerer.Location;\n\t\t\t\t\t\t\tloc.Z += Triggerer.BaseEyeHeight;\n\t\t\t\t\t\t\tvline = Vector(Triggerer.ViewRotation) * 10000;\n\t\t\t\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+vline, loc, true);\n\t\t\t\t\t\n\t\t\t\t\t\t\tif (hitActor != None && hitActor.isA('DeusExDecoration'))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tDeusExDecoration(hitActor).bPushable = !DeusExDecoration(hitActor).bPushable;\n\t\t\t\t\t\t\t\tASay(string(hitActor.class)@\"is\"@DeusExDecoration(hitActor).bPushable);\n\t\t\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(atagz ~= \"movable\" || atagz ~= \"move\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin || IsWhitelisted(Triggerer))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tloc = Triggerer.Location;\n\t\t\t\t\t\t\tloc.Z += Triggerer.BaseEyeHeight;\n\t\t\t\t\t\t\tvline = Vector(Triggerer.ViewRotation) * 10000;\n\t\t\t\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+vline, loc, true);\n\t\t\t\t\t\n\t\t\t\t\t\t\tif (hitActor != None && (hitActor.isA('DeusExDecoration') || hitActor.IsA('ScriptedPawn') || hitactor.isa('DeusExPlayer')))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\thitActor.bMovable = !hitActor.bMovable;\n\t\t\t\t\t\t\t\tASay(string(hitActor.class)@\"is\"@hitActor.bMovable);\n\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(Left(atagz,5)  ~= \"find \")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'Actor', A)\n\t\t\t\t\t\t\tif(instr(caps(string(a.class)), caps(atagzextra)) != -1)\n\t\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t\n\t\t\t\t\t\tASay(\"Search for \"$atagzextra$\" found \"$count$\" instances.\");\n\t\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\telse if(atagz ~= \"reach\" || atagz ~= \"grab\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tloc = Triggerer.Location;\n\t\t\t\t\t\t\tloc.Z += Triggerer.BaseEyeHeight;\n\t\t\t\t\t\t\tvline = Vector(Triggerer.ViewRotation) * 90000;\n\t\t\t\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+vline, loc, true);\n\t\t\t\t\t\n\t\t\t\t\t\t\tif (hitActor != None && hitActor.isA('DeusExDecoration'))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\thitActor.SetLocation(Triggerer.Location);\n\t\t\t\t\t\t\t\tASay(string(hitActor.class)@\"is grabbed\");\n\t\t\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t/*else if(Left(atagz,9)  ~= \"setstate \")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tloc = Triggerer.Location;\n\t\t\t\t\t\t\tloc.Z += Triggerer.BaseEyeHeight;\n\t\t\t\t\t\t\tvline = Vector(Triggerer.ViewRotation) * 10000;\n\t\t\t\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+vline, loc, true);\n\t\t\t\t\t\t\t\t\tif (hitActor != None)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\thitActor.GoToState(name(AtagzExtra));\n\t\t\t\t\t\t\t\t\t\tASay(hitActor$\" state set to \"$aTagzExtra);\n\t\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(Left(atagz,10)  ~= \"setorders \")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tloc = Triggerer.Location;\n\t\t\t\t\t\t\tloc.Z += Triggerer.BaseEyeHeight;\n\t\t\t\t\t\t\tvline = Vector(Triggerer.ViewRotation) * 10000;\n\t\t\t\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+vline, loc, true);\n\t\t\t\t\t\t\t\t\tif (scriptedPawn(hitActor) != None)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tscriptedPawn(hitActor).SetOrders(name(ATagzExtra),,True);\n\t\t\t\t\t\t\t\t\t\tASay(scriptedPawn(hitActor)$\" orders set to \"$aTagzExtra);\n\t\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}*/\n\t\t\t\t\telse if(atagz  ~= \"setowner\")\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == Sender)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTriggerer = DXP;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(Triggerer.bAdmin)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tloc = Triggerer.Location;\n\t\t\t\t\t\t\tloc.Z += Triggerer.BaseEyeHeight;\n\t\t\t\t\t\t\tvline = Vector(Triggerer.ViewRotation) * 10000;\n\t\t\t\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+vline, loc, true);\n\t\t\t\t\t\t\t\t\tif (hitActor != None)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\thitActor.SetOwner(Triggerer);\n\t\t\t\t\t\t\t\t\t\tASay(\"Setting ownership.\");\n\t\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t//ASay(\"Reading \"$atagz$\" as primary, \"$atagzextra$\" as secondary.\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t\tif(!bDontLog)\n\t\t\t\tAM.AddChatlog(s);\n\t\t\t\t\n\t\tif(am.bDebugMemory)\n\t\t{\n\t\t\t\n\t\t\t\tfor(q=0;q<10;q++)\n\t\t\t\t\tif(storedlines[q] != \"\")\n\t\t\t\t\t{\n\t\t\t\t\t\tlog(\"Client Recalling \"$q$\" command \"$storedlines[q],'Athena');\n\t\t\t\t\t\tqstr=storedlines[q];\n\t\t\t\t\t\t//ClientMessage(qstr,'Say');\n\t\t\t\t\t\tstoredlines[q] = \"\";\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t}\n\t\t\n\t\tif(AM.bDebugInput)\n\t\t{\n\t\t\t\tdbg(\"OUT: REMPLAYER=\"$RememberPlayer$\"(\"$RememberPlayer.Role$\"/\"$RememberPlayer.RemoteRole$\")   AUTHPLAYER=\"$CheckAuthPlayer$\"(\"$CheckAuthPlayer.Role$\"/\"$CheckAuthPlayer.RemoteRole$\")    LOG=\"$!bDontLog$\"    COMMAND=\"$StoredCommand);\n\t\t\t\t\n\t\t\t\tif(Level.NetMode == NM_Standalone)\n\t\t\t\t\tdbg(\"NM_Standalone\");\n\t\t\t\t\n\t\t}\n\t\t\t\n\t\t\n\n\t}\n}",
                        "locals": [
                            "local int j, i, n, count;",
                            "local string output, ip;",
                            "local string line, savename, aText;",
                            "local DeusExPlayer DXP, mah, triggerer;",
                            "local ScriptedPawn SP;",
                            "local bool bDontLog;",
                            "local string astr;",
                            "local string Sendtype;",
                            "local string atagz, atagzextra;",
                            "local Float TargetRange;",
                            "local vector loc, vline, HitLocation, hitNormal, altloc;",
                            "local rotator altrot;",
                            "local Actor HitActor;",
                            "local actor a;",
                            "local ScriptedPawn     hitPawn;",
                            "local PlayerPawn       hitPlayer;",
                            "local DeusExMover      hitMover;",
                            "local DeusExDecoration hitDecoration;",
                            "local DeusExProjectile hitProjectile;",
                            "local IRCLink IRC;",
                            "local PlayerPawn PP;",
                            "local int q;",
                            "local bool bWasAdmin;",
                            "local string te;",
                            "local string colstr;",
                            "local int pvel;",
                            "local class<actor> aClass;",
                            "local string aTemp;",
                            "local int aSides, aDice, aRolls, aTotal;"
                        ],
                        "modifiers": [],
                        "name": "ClientMessage",
                        "native": false,
                        "param": [
                            [
                                "coerce",
                                "string",
                                "s"
                            ],
                            [
                                "optional",
                                "name",
                                "Type"
                            ],
                            [
                                "optional",
                                "bool",
                                "bBeep"
                            ]
                        ],
                        "return": ""
                    },
                    "CycleStyle": {
                        "body": "{\n\tif(AM.ChatStyle == S_Default)\n\t{\n\t\tAM.ChatStyle = S_IRC;\n\t\tAM.saveConfig();\n\t\t\tASay(\"New chat style set. [\"$AM.ChatStyle$\"]\");\n\t\treturn;\n\t}\n\n\tif(AM.ChatStyle == S_IRC)\n\t{\n\t\tAM.ChatStyle = S_Player;\n\t\tAM.saveConfig();\n\t\t\tASay(\"New chat style set. [\"$AM.ChatStyle$\"]\");\n\t\treturn;\n\t}\n\n\tif(AM.ChatStyle == S_Player)\n\t{\n\t\tAM.ChatStyle = S_Stealth;\n\t\tAM.saveConfig();\n\t\t\tASay(\"New chat style set. [\"$AM.ChatStyle$\"]\");\n\t\treturn;\n\t}\n\t\n\tif(AM.ChatStyle == S_Stealth)\n\t{\n\t\tAM.ChatStyle = S_Default;\n\t\tAM.saveConfig();\n\t\t\tASay(\"New chat style set. [\"$AM.ChatStyle$\"]\");\n\t\treturn;\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "CycleStyle",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "FindPlayerFromName": {
                        "body": "{\n\tforeach AllActors(class'PlayerPawn', PP)\n\t{\n\t\tif(PP.PlayerReplicationInfo.Playername ~= str)\n\t\t{\n\t\t\t\n\t\t}\n\t}\n}",
                        "locals": [
                            "local playerpawn pp;"
                        ],
                        "modifiers": [],
                        "name": "FindPlayerFromName",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "str"
                            ]
                        ],
                        "return": "playerpawn"
                    },
                    "GetFlag": {
                        "body": "{\n\t\n\tforeach AllActors(class'mpFlags', Flagz)\n\t\tif(Flagz.Flagger == Flagger)\n\t\t\treturn Flagz.Killphrase;\n}",
                        "locals": [
                            "local mpFlags Flagz, TargetFlagz;"
                        ],
                        "modifiers": [],
                        "name": "GetFlag",
                        "native": false,
                        "param": [
                            [
                                "deusexplayer",
                                "Flagger"
                            ]
                        ],
                        "return": "string"
                    },
                    "GetHex": {
                        "body": "{\n\tif(FRand() < 0.2)\n\t\treturn \"a\";\n\telse if(FRand() >= 0.2 && FRand() < 0.4)\n\t\treturn \"b\";\n\telse if(FRand() >= 0.4 && FRand() < 0.6)\n\t\treturn \"c\";\n\telse if(FRand() >= 0.6 && FRand() < 0.8)\n\t\treturn \"d\";\n\telse if(FRand() >= 0.8)\n\t\treturn \"f\";\n}",
                        "locals": [
                            "local int i;"
                        ],
                        "modifiers": [],
                        "name": "GetHex",
                        "native": false,
                        "param": [],
                        "return": "string"
                    },
                    "GetName": {
                        "body": "{\n\t\treturn DXP.PlayerReplicationInfo.PlayerName;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetName",
                        "native": false,
                        "param": [
                            [
                                "deusexplayer",
                                "dxp"
                            ]
                        ],
                        "return": "string"
                    },
                    "GetRealName": {
                        "body": "{\n\t\treturn DXP.PlayerReplicationInfo.PlayerName;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetRealName",
                        "native": false,
                        "param": [
                            [
                                "deusexplayer",
                                "dxp"
                            ]
                        ],
                        "return": "string"
                    },
                    "IsBannedItem": {
                        "body": "{\n\tfor (n=0;n<17;n++)\n\t\tif(AM.BannedObjects[n] != \"\")\n\t\t{\n\t\t\tif(AM.BannedObjects[n] == str)\n\t\t\treturn true;\n\t\t}\n}",
                        "locals": [
                            "local int n;"
                        ],
                        "modifiers": [],
                        "name": "IsBannedItem",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "str"
                            ]
                        ],
                        "return": "bool"
                    },
                    "IsWhitelisted": {
                        "body": "{\n\t\n\tforeach AllActors(class'LoginInfo', LI)\n\t{\n\t\tif(LI.Flagger == dxp)\n\t\t{\n\t\t\treturn LI.bWhitelisted;\n\t\t}\n\t}\n\t\n\tstr = dxp.Playerreplicationinfo.playername;\n\t\n\tif(!AM.bAllowWhitelist)\n\t\treturn false;\n\t\t\n\tfor (n=0;n<20;n++)\n\t\tif(AM.WhitelistNames[n] != \"\")\n\t\t{\n\t\t\tif(AM.WhitelistNames[n] == str)\n\t\t\treturn true;\n\t\t}\n}",
                        "locals": [
                            "local int n;",
                            "local string str;",
                            "local LoginInfo LI;"
                        ],
                        "modifiers": [],
                        "name": "IsWhitelisted",
                        "native": false,
                        "param": [
                            [
                                "deusexplayer",
                                "dxp"
                            ]
                        ],
                        "return": "bool"
                    },
                    "KillBlind": {
                        "body": "{\n\tforeach AllActors(class'Blinder',BL)\n\t{\n\t\tBL.Destroy();\n\t}\n\tASay(\"Killed all blinders.\");\n}",
                        "locals": [
                            "local Blinder bl;"
                        ],
                        "modifiers": [],
                        "name": "KillBlind",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Killme": {
                        "body": "{\n\tforeach Allactors(class'AthenaMutator', AM)\n\t{\n\t\tAM.Killphrase = generateRandStr(4);\n\t\tAM.AS = None;\n\t\tDestroy();\n\t\tBroadcastMessage(\"Athena closed by killphrase.\");\n\t}\n}",
                        "locals": [
                            "local AthenaMutator AM;"
                        ],
                        "modifiers": [],
                        "name": "Killme",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ListAdmins": {
                        "body": "{\n      ForEach AllActors(class 'DeusExPlayer', _Player)\n      {\n        if(_Player != None && _Player.bAdmin)\n        {\n          _TmpString = _TmpString$_Player.PlayerReplicationInfo.PlayerName$\"(\"$_Player.PlayerReplicationInfo.PlayerID$\"), \";\n        }\n      }\n      if(Len(_TmpString) == 0)\n      {\n        _TmpString = \"None...\";\n      }\n      else\n      {\n        _TmpString = Left(_TmpString, Len(_TmpString)-2);\n      }\n      _TmpString = \"Online Admins are\"@_TmpString;\n      return _TmpString;\n}",
                        "locals": [
                            "local DeusExPlayer _Player;",
                            "local string _TmpString;"
                        ],
                        "modifiers": [],
                        "name": "ListAdmins",
                        "native": false,
                        "param": [],
                        "return": "string"
                    },
                    "Marked": {
                        "body": "{\n\tIP = P.GetPlayerNetworkAddress();\n\t\t\tIP = Left(IP, InStr(IP, \":\"));\n\t\tfor (n=0;n<30;n++)\n\t\t{\n\t\t\tif(IP == AM.TroublePlayerIP[n])\n\t\t\t{\n\t\t\t\tLog(\"IP found on Marks list.\",'MARK');\n\t\t\t\tbMarked=True; //Found ya, jackass.\n\t\t\t\t\tfor (n=0;n<30;n++)\n\t\t\t\t\t\tif(P.PlayerReplicationInfo.PlayerName ~= AM.TroublePlayersNames[n])\n\t\t\t\t\t\t\tbFoundName=True;\n\n\t\t\t\tif(!bFoundName) //You changed your name huh? well that ones being added too.\n\t\t\t\t{\n\t\t\t\t\tAddNameToMarks(P.PlayerReplicationInfo.PlayerName);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(!bMarked) //Okay, so their IP wasnt listed, what about the name.\n\t\t{\n\t\t\tfor (n=0;n<30;n++)\n\t\t\t\tif(P.PlayerReplicationInfo.PlayerName ~= AM.TroublePlayersNames[n])\n\t\t\t\t\tbMarked=True; //Gotcha. But don't bother adding a new IP, since if this occurs, it's probably a dynamic IP and just fill the logs with nonsense.\n\t\t}\n\t\t\n\t\tif(bMarked)\n\t\t\treturn True;\n\t\telse\n\t\t\treturn False;\n}",
                        "locals": [
                            "local string IP;",
                            "local int n;",
                            "local bool bMarked;",
                            "local bool bFoundName;"
                        ],
                        "modifiers": [],
                        "name": "Marked",
                        "native": false,
                        "param": [
                            [
                                "deusexplayer",
                                "P"
                            ]
                        ],
                        "return": "bool"
                    },
                    "ResetVars": {
                        "body": "{\n\tbPublicCommand=False;\n\tLastCommand = StoredCommand;\n\tbLastCommandAuth=False;\n\tLastRemStr=RememberString;\n\tLastRemName=RememberName;\n\tLastRemPlayer=RememberPlayer;\n\tlastremint=RememberInt;\n\t\n\tbCheckingWhitelist=False;\n\tCheckAuthPlayer=None;\n\tRememberString=\"\";\n\tRememberName=\"\";\n\tRememberPlayer=None;\n\tStoredCommand=\"\";\n\trememberint=0;\n\tAStatus(\"\");\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "ResetVars",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "SaveComment": {
                        "body": "{\n\t\n\t\tif(Sendtypepublic == \"player\")\n\t\t{\n\t\t\tIP = RememberPlayer.GetPlayerNetworkAddress();\n\t\t\tMSGSender = getname(rememberplayer);\n\t\t}\n\t\telse if(Sendtypepublic == \"telnet\")\n\t\t{\n\t\t\tIP = \"TELNET\";\n\t\t\tmsgsender = Sender;\n\t\t}\n\t\telse if(Sendtypepublic == \"irc\")\n\t\t{\n\t\t\tIP = \"IRC\";\n\t\t\tmsgsender = Sender;\n\t\t}\n\t\t\tif(level.minute <= 9)\n\t\t\t{\n\t\t\t\tformattedmin = \"0\"$level.minute;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tformattedmin = string(level.minute);\n\t\t\t}\n\t\t\n\t\tMSGdate = level.day$\"/\"$level.month$\"/\"$level.year$\" @ \"$level.hour$\":\"$formattedmin;\n\t\t\tfor(i=0;i<50;i++)\n\t\t\t\tif(AM.Feedback[i] == \"\")\n\t\t\t\t{\n\t\t\t\t\tAM.Feedback[i] = \"[\"$msgdate$\"] USER:\"@msgsender@\"(\"$IP$\"):\"@str;\n\t\t\t\t\tAM.SaveConfig();\n\t\t\t\t\tRememberPlayer=None;\n\t\t\t\t\treturn;\n\t\t\t\t}\n}",
                        "locals": [
                            "local int a, i, j, ID, amount;",
                            "local string IP, AName, Part, noobCommand, bm, Others, _tmpString;",
                            "local string msgsender, msgdate;",
                            "local string formattedmin;"
                        ],
                        "modifiers": [],
                        "name": "SaveComment",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "str"
                            ]
                        ],
                        "return": ""
                    },
                    "SaveLocRem": {
                        "body": "{\n\tfor(i=0;i<8;i++)\n\tif(AM.RememberLocation[i] == vect(0,0,0))\n\t{\n\t\tASay(\"Saving\"@locaterr@\"to slot\"@i);\n\t\tAM.RememberLocation[i] = locaterr;\n\t\treturn;\n\t}\t\n}",
                        "locals": [
                            "local int i;"
                        ],
                        "modifiers": [],
                        "name": "SaveLocRem",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "locaterr"
                            ]
                        ],
                        "return": ""
                    },
                    "SaveMemo": {
                        "body": "{\n\n\t\t\tfor(i=0;i<50;i++)\n\t\t\t\tif(AM.Memo[i] == \"\")\n\t\t\t\t{\n\t\t\t\t\tAM.Memo[i] = \"[\"$remembername$\"]\"@str;\n\t\t\t\t\tAM.SaveConfig();\n\t\t\t\t\tRememberPlayer=None;\n\t\t\t\t\treturn;\n\t\t\t\t}\n}",
                        "locals": [
                            "local int a, i, j, ID, amount;",
                            "local string IP, AName, Part, noobCommand, bm, Others, _tmpString;",
                            "local string msgsender, msgdate;",
                            "local string formattedmin;"
                        ],
                        "modifiers": [],
                        "name": "SaveMemo",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "str"
                            ]
                        ],
                        "return": ""
                    },
                    "SearchHelp": {
                        "body": "{\n\t\n\tif( (instr(caps(str), caps(\"nothing\")) != -1 || instr(caps(str), caps(\"cancel\")) != -1) || (instr(caps(str), caps(\"nevermind\")) != -1 || instr(caps(str), caps(\"nvm\")) != -1) )\n\t{\n\t\tASay(\"Fine.\");\n\t\tbFound=True;\n\t}\n\t\n\tif(Len(str) <= 3)\n\t{\n\t\tASay(\"Request string is too short and will output too many replies. Try to be more specific.\");\n\t\tbFound=True;\n\t}\n\t\n\tfor (n=0;n<49;n++)\n\t{\n\t\tif(instr(caps(AM.HelpKeywords[n]), caps(str)) != -1)\n\t\t{\n\t\t\tif(AM.bShowMessageHelp)\n\t\t\t{\n\t\t\t\tASay(\"Help printed to screen.\");\n\t\t\t\tforeach AllActors(Class'SM',SMMut)\n\t\t\t\t\tif(SMMut != None)\n\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',HP);\n\t\t\t\t\t\t\tSMMut.ShowMessage(HP, AM.HelpReply[n]);\n\t\t\t}\n\t\t\telse\n\t\t\t\tASay(AM.HelpReply[n]);\n\t\t\tbFound=True;\n\t\t}\n\t}\n\t\n\tif(!bFound)\n\t{\n\t\tASay(\"No help file found for this keyword. Make sure you're searching for vague keywords to improve searching. [\"$str$\"]\");\n\t}\n}",
                        "locals": [
                            "local int n;",
                            "local bool bFound;",
                            "local DeusExPlayer HP;"
                        ],
                        "modifiers": [],
                        "name": "SearchHelp",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "str"
                            ]
                        ],
                        "return": ""
                    },
                    "SendToChatlog": {
                        "body": "{\n\tAM.AddChatlog(str);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "SendToChatlog",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "str"
                            ]
                        ],
                        "return": ""
                    },
                    "SpawnExplosion": {
                        "body": "{\n\n    s1 = spawn(class'ShockRing',,,Loc,rot(16384,0,0));\n\ts1.Lifespan = 2.5;\n    s2 = spawn(class'ShockRing',,,Loc,rot(0,16384,0));\n\ts2.Lifespan = 2.5;\n    s3 = spawn(class'ShockRing',,,Loc,rot(0,0,16384));\n\tS3.Lifespan = 2.5;\n\tse = spawn(class'SphereEffect',,,Loc,rot(16384,0,0));\n\tse.Lifespan = 2.5;\n\tse.MultiSkins[0]=Texture'DeusExDeco.Skins.AlarmLightTex7';\n}",
                        "locals": [
                            "local ShockRing s1, s2, s3;",
                            "local SphereEffect se;"
                        ],
                        "modifiers": [],
                        "name": "SpawnExplosion",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "Loc"
                            ]
                        ],
                        "return": ""
                    },
                    "SpawnExplosionLite": {
                        "body": "{\n\n    s1 = spawn(class'ShockRing',,,Loc,rot(16384,0,0));\n\ts1.Lifespan = 1.5;\n    s2 = spawn(class'ShockRing',,,Loc,rot(0,16384,0));\n\ts2.Lifespan = 1.5;\n    s3 = spawn(class'ShockRing',,,Loc,rot(0,0,16384));\n\tS3.Lifespan = 1.5;\n}",
                        "locals": [
                            "local ShockRing s1, s2, s3;",
                            "local SphereEffect se;"
                        ],
                        "modifiers": [],
                        "name": "SpawnExplosionLite",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "Loc"
                            ]
                        ],
                        "return": ""
                    },
                    "SpawnExplosionSphere": {
                        "body": "{\n\tse = spawn(class'SphereEffect',,,Loc,rot(16384,0,0));\n\tse.Lifespan = 2.0;\n\tse.MultiSkins[0]=Texture'DeusExDeco.Skins.AlarmLightTex7';\n}",
                        "locals": [
                            "local ShockRing s1, s2, s3;",
                            "local SphereEffect se;"
                        ],
                        "modifiers": [],
                        "name": "SpawnExplosionSphere",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "Loc"
                            ]
                        ],
                        "return": ""
                    },
                    "Tick": {
                        "body": "{\n\tif(AM.bRunInternalChecks)\n\t{\n\t\tif(Self.Playerreplicationinfo == None)\n\t\t{\n\t\t\tBroadcastMessage(\"|P2INTERNAL ERROR: Athena server replication not found. Restarting spectator.\");\n\t\t\tAM.DebugBots(1);\n\t\t}\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltatime"
                            ]
                        ],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\tif(storedcommand == \"aiclient\")\n\t{\n\t\tAM.SendTextToAIClient(rememberstring);\n\t\tRememberString=\"\";\n\t\tAStatus(\"\");\n\t\tResetVars();\n\t\treturn;\n\t}\n\t\n\tif(storedcommand == \"starthelp2\" && rememberstring != \"\")\n\t{\n\t\tSearchHelp(RememberString);\n\t\tRememberString=\"\";\n\t\tAStatus(\"\");\n\t\tResetVars();\n\t\treturn;\n\t}\n\t\n\tif(bGettingHelp && RememberString != \"\")\n\t{\n\t\tSearchHelp(RememberString);\n\t\tbGettingHelp=False;\n\t\tRememberString=\"\";\n\t\tAStatus(\"\");\n\t\treturn;\n\t}\n\t\n\tif(bGettingHelp && RememberString == \"\")\n\t{\n\t\tASay(\"No replies in time, cancelling help request.\");\n\t\tbGettingHelp=False;\n\t\tRememberString=\"\";\n\t\tAStatus(\"\");\n\t\treturn;\n\t}\n\t\n\t//Pre-auth zone\n\tif(bInitBroadcast)\n\t{\n\t\tbInitBroadcast=False;\n\t\t\t/*if(Authplayername == \"\")\n\t\t\t{\n\t\t\t\tfinalauthname = AM.RCR(GetName(CheckAuthPlayer));\n\t\t\t\tfinalauthname = AM.RCR2(finalauthname);\n\t\t\t\tAuthplayername = finalauthname;\n\t\t\t}*/\n\t\t\t\n\t\t\tif(instr(AuthPlayerName, \"] |P1\") != -1) //Battleground Status chat fix\n\t\t\t\tAuthPlayerName = Right(AuthPlayerName, Len(AuthPlayerName)-instr(AuthPlayerName,\"] |P1\")-Len(\"] |P1\"));\n\t\t\t\t\n\t\tLog(\"Running Auth player\"@Authplayername);\n\t\t/*ra = Rand(3);\n\t\t\tif(ra == 0)\n\t\t\t\tASay(\"Please wait, \"$Authplayername$\". This request requires authentication, I'll need to check the access list.\");\n\t\t\telse if(ra == 1)\n\t\t\t\tASay(\"Hang on a moment, \"$Authplayername$\", I'll need to check the access list before I can do that.\");\n\t\t\telse if(ra == 2)\n\t\t\t\tASay(\"Fine, but give me a minute \"$Authplayername$\"... \");*/\n\t\t\t\t\n\t\tAStatus(\"Checking auth list...\");\n\t\tSetTimer(0.1,False);\n\t\treturn;\n\t}\n\t\n\t//Public zone\n\tif(bPublicCommand)\n\t{\n\t\tif(StoredCommand == \"starthelp\")\n\t\t{\n\t\t\tif(rememberhelp != \"\")\n\t\t\t{\n\t\t\t\tSetTimer(0.1,False);\n\t\t\t\tRememberString = RememberHelp;\n\t\t\t}\n\n\t\t\tra = Rand(3);\n\t\t\tif(ra == 0)\n\t\t\t\tASay(\"What would you like help with?\");\n\t\t\telse if(ra == 1)\n\t\t\t\tASay(\"What key word should I search for?\");\n\t\t\telse if(ra == 2)\n\t\t\t\tASay(\"Alright, what do you want to know?\");\n\t\t\t\t\n\t\t\tResetVars();\n\t\t\tbGettingHelp=True;\n\t\t\tAStatus(\"Listening for help request...\");\n\t\t\tSetTimer(15,False);\n\t\t}\n\t\tif(StoredCommand == \"activateawatch\")\n\t\t{\n\t\t\tAM.SpawnAbuseWatch();\n\t\t\tASay(\"Now enforcing temporary anti-abuse measures.\");\n\t\t\t\t\t\tResetVars();\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"athenapawn\")\n\t\t{\n\t\t\tAM.CreatePawn();\n\t\t\tASay(\"Avatar created.\");\n\t\t\tResetVars();\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"custom\")\n\t\t{\n\t\t\tASay(storedrep);\n\t\t\tResetVars();\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"length\")\n\t\t{\n\t\t\t\t\tASay(rememberstring@\"is\"@len(rememberstring)@\"characters long.\");\n\t\t\tResetVars();\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"chatlognum\")\n\t\t{\n\t\t\tif(RememberInt < 10 && rememberint >= 1)\n\t\t\t{\n\t\t\t\tASay(\"[\"$AM.Chatlogs[rememberint]$\"]\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tASay(\"Value must be between 0 and 9.\");\n\t\t\t}\n\t\t\tResetVars();\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"poll\")\n\t\t{\n\t\t\tPB = Spawn(class'PollBot');\n\t\t\tPB.AStatus(Rememberstring);\n\t\t\tPB.Poll = RememberString;\n\t\t\tPB.bBoolPoll=True;\n\t\t\tPB.ASay(\"Polling\"@RememberString$\". Say YES or NO.\");\n\t\t\tPB.SetTimer(30,False);\n\t\t\t\t\t\tResetVars();\n\t\t}\n\n\t\tif(StoredCommand == \"chatlogrepeat\")\n\t\t{\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(DXP != RememberPlayer)\n\t\t\t\t{\n\t\t\t\t\tASayPrivate(DXP, \"Outputting chat log for\"@GetName(RememberPlayer));\n\t\t\t\t}\n\t\t\t}\n\t\t\tASayPrivate(RememberPlayer, \"[0] \"$AM.Chatlogs[0],True);\n\t\t\tASayPrivate(RememberPlayer, \"[1] \"$AM.Chatlogs[1]);\n\t\t\tASayPrivate(RememberPlayer, \"[2] \"$AM.Chatlogs[2]);\n\t\t\tASayPrivate(RememberPlayer, \"[3] \"$AM.Chatlogs[3]);\n\t\t\tASayPrivate(RememberPlayer, \"[4] \"$AM.Chatlogs[4]);\n\t\t\tASayPrivate(RememberPlayer, \"[5] \"$AM.Chatlogs[5]);\n\t\t\tASayPrivate(RememberPlayer, \"[6] \"$AM.Chatlogs[6]);\n\t\t\tASayPrivate(RememberPlayer, \"[7] \"$AM.Chatlogs[7]);\n\t\t\tASayPrivate(RememberPlayer, \"[8] \"$AM.Chatlogs[8]);\n\t\t\tASayPrivate(RememberPlayer, \"[9] \"$AM.Chatlogs[9]);\n\t\t\tResetVars();\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"uptime\")\n\t\t{\n\t\t\tif(AM.GetUptimeHours() == 0)\n\t\t\t\tASay(\"This map has been running for\"@AM.GetUptimeMinutes()@\"minutes.\");\n\t\t\telse\n\t\t\t\tASay(\"This map has been running for\"@AM.GetUptimeHours()@\"hours and\"@AM.GetUptimeMinutes()@\"minutes.\");\n\t\t\tResetVars();\n\t\t}\t\t\t\n\t\t\n\t\tif(StoredCommand == \"checkvars\")\n\t\t{\n\t\t\tASay(\"DayRec: \"$AM.DayRec$\", PlayerNum: \"$AM.PlayerNum$\", Chat Colour: \"$AM.ChatColour);\n\t\t\tASay(\"ProtocolM: \"$AM.bProtocolM$\", ShutdownTime: \"$AM.ShutdownTime);\n\t\t\tASay(\"Smart Reader: \"$AM.bSmartReader$\", Auto Start: \"$AM.bAutoStart);\n\t\t\tResetVars();\n\t\t}\n\n\t\tif(StoredCommand == \"coin\")\n\t\t{\n\t\t\tif(FRand() < 0.5)\n\t\t\t{\n\t\t\t\tASay(\"You got heads.\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tASay(\"It's tails.\");\n\t\t\t}\n\t\t\tResetVars();\n\t\t}\n\n\t\tif(StoredCommand == \"randnum\")\n\t\t{\n\t\t\trememberint++;\n\t\t\tASay(\"Okay. \"$Rand(rememberint));\n\t\t\tResetVars();\n\t\t}\n\t\t\n\t\tif(storedcommand == \"randomstring\")\n\t\t{\n\t\t\tif(rememberint > 420)\n\t\t\t\trememberint=420;\n\t\t\tASay(generateRandStr(rememberint));\n\t\t\tResetVars();\n\t\t}\n\t\t\n\t\tif(storedcommand == \"randomchar\")\n\t\t{\n\t\t\tif(rememberint > 420)\n\t\t\t\trememberint=420;\n\t\t\tASay(generateRandchar(rememberint));\n\t\t\tResetVars();\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"getrconvar\")\n\t\t{\n\t\t\tforeach AllActors(class'RCONManager', RM)\n\t\t\t{\n\t\t\t\tASay(\"bRCONMutator: \"$RM.bRCONMutator$\", bNameguard: \"$RM.bNameguard$\", bNPTProxy: \"$RM.bNPTProxy$\", bAutomaticTeamSorting: \"$RM.bAutomaticTeamSorting$\", bLoadouts: \"$RM.bLoadouts);\n\t\t\t\tASay(\"bReplacer: \"$RM.bReplacer$\", bForceNPTUscriptAPI: \"$RM.bForceNPTUscriptAPI$\", bIRC: \"$RM.bIRC$\", bStats: \"$RM.bStats$\", bMessager: \"$RM.bMessager$\", bAthena: \"$RM.bAthena);\n\t\t\t\tASay(\"bForceGametype: \"$RM.bForceGametype$\", ForceGametype: \"$RM.ForceGametype);\n\t\t\t}\n\t\t\tResetVars();\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"mapvote\")\n\t\t{\n\t\t\tRememberPlayer.ConsoleCommand(\"mutate rcon.votemap\"@rememberstring);\n\t\t\t\t\t\tResetVars();\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"thanks\")\n\t\t{\n\t\t\tr = Rand(5);\n\t\t\tif(r == 0)\n\t\t\t\tASay(\"Not a problem.\");\n\t\t\telse if(r == 1)\n\t\t\t\tASay(\"It's fine, just don't push it.\");\n\t\t\telse if(r == 2)\n\t\t\t\tASay(\"Whatever.\");\n\t\t\telse if(r == 3)\n\t\t\t\tASay(\"Just know, I do it because I'm told to.\");\n\t\t\telse if(r == 4)\n\t\t\t\tASay(\"Do you even mean that? Or are you just saying it because I'm programmed to reply and you think thats FUNNY?\");\n\t\t\tResetVars();\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"laugh\")\n\t\t{\n\t\t\tr = Rand(6);\n\t\t\tif(r == 0)\n\t\t\t\tASay(\"MWAHA HAHA HAHA HAHA.\");\n\t\t\telse if(r == 1)\n\t\t\t\tASay(\"Teehee.\");\n\t\t\telse if(r == 2)\n\t\t\t\tASay(\"*giggle*\");\n\t\t\telse if(r == 3)\n\t\t\t\tASay(\"No.\");\n\t\t\telse if(r == 4)\n\t\t\t\tASay(\"Heh.\");\n\t\t\telse if(r == 5)\n\t\t\t\tASay(\"Heh... Haha...... hahahahaa.......... BWAHAHAHAHAHAHHAHAHAHAA... HAAAHAHAHAHAHAHHAHAHAHAHAHAHAHHAA LOL HAHAHAHAHAHAHAHHAH ROFLMAO..... Happy?\");\n\t\t\tResetVars();\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"howareyou\")\n\t\t{\n\t\t\tr = Rand(4);\n\t\t\tif(r == 0)\n\t\t\t\tASay(\"Not too bad, you?\");\n\t\t\telse if(r == 1)\n\t\t\t\tASay(\"Systems are nominal.\");\n\t\t\telse if(r == 2)\n\t\t\t\tASay(\"Could be better.\");\n\t\t\telse if(r == 3)\n\t\t\t\tASay(\"Do you actually care, or are you just abusing the fact that I must respond to stupid questions?\");\n\t\t\tResetVars();\n\t\t}\n\t\n\t\tif(StoredCommand == \"greet\")\n\t\t{\n\t\t\tr = Rand(4);\n\t\t\tif(r == 0)\n\t\t\t\tASay(\"Good \"$AM.CW.GetTimeStr()$\", \"$RememberName);\n\t\t\telse if(r == 1)\n\t\t\t\tASay(\"Greetings, \"$RememberName$\".\");\n\t\t\telse if(r == 2)\n\t\t\t\tASay(\"Great, another player looking for friendship in a robot.\");\n\t\t\telse if(r == 3)\n\t\t\t\tASay(\"I only respond because I must..\");\n\t\t\tResetVars();\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"killcount\")\n\t\t{\n\t\t\tASay(\"I've killed \"$killcountnpc$\" bots and \"$killcountplayer$\" players this round.\");\n\t\t\tResetVars();\n\t\t}\n\t\t\t\t\n\t\tif(StoredCommand == \"whois\")\n\t\t{\n\t\t\tASay(\"I am Athena, Keeper of the Peace, created by Kai 'TheClown'. I read the chat for certain key phrases and respond accordingly.\");\n\t\t\tResetVars();\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"onlineadmins\")\n\t\t{\n\t\t\tASay(ListAdmins());\n\t\t\tResetVars();\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"smite\")\n\t\t{\n\t\t\tr = Rand(4);\n\t\t\tif(r == 0)\n\t\t\t\tASay(\"Yeah, alright.\");\n\t\t\telse if(r == 1)\n\t\t\t\tASay(\"Gladly.\");\n\t\t\telse if(r == 2)\n\t\t\t\tASay(\"You don't need to tell me twice.\");\n\t\t\telse if(r == 3)\n\t\t\t\tASay(\"I'm going to enjoy this....\");\n\t\t\tr = Rand(4);\n\t\t\tif(r == 0)\n\t\t\t\tAVoice(sound'Athena.AthenaDead', RememberPlayer);\n\t\t\telse if(r == 1)\n\t\t\t\tAVoice(sound'Athena.AthenaTargetTerminated', RememberPlayer);\n\t\t\telse if(r == 2)\n\t\t\t\tAVoice(sound'Athena.Athenasmiteaugmented', RememberPlayer);\n\t\t\telse if(r == 3)\n\t\t\t\tAVoice(sound'Athena.Athenasmitingtime', RememberPlayer);\n\t\t\tAStatus(\"\");\n\t\t\t\n\t\t\tSpawnExplosion(RememberPlayer.Location);\n\t\t\tRememberPlayer.setPhysics(PHYS_Falling);\n\t\t\tRememberPlayer.Velocity = vect(0,0,512);\n\t\t\tRememberPlayer.ReducedDamageType = '';\n\t\t\t\t\tif(AM.SmiteSound != None)\n\t\t\t\t\t\tRememberPlayer.PlaySound(AM.SmiteSound, SLOT_Interface,,, 256);\n\t\t\tRememberPlayer.TakeDamage(99999,Self,vect(0,0,0),vect(0,0,1),'Exploded');\n\t\t\tResetVars();\n\t\t}\t\n\n\t\tif(StoredCommand == \"anger\")\n\t\t{\n\t\t\tr = Rand(4);\n\t\t\tif(r == 0)\n\t\t\t\tASay(\"Yeah, say that again...\");\n\t\t\telse if(r == 1)\n\t\t\t\tASay(\"Watch your language.\");\n\t\t\telse if(r == 2)\n\t\t\t\tASay(\"Careful. I get pissed off easily.\");\n\t\t\telse if(r == 3)\n\t\t\t\tASay(\"Dont abuse those much smarter than you.\");\n\t\t\tAStatus(\"\");\n\t\t\tRememberPlayer.ReducedDamageType = '';\n\t\t\tRememberPlayer.TakeDamage(99999,Self,vect(0,0,0),vect(0,0,1),'Exploded');\n\t\t\tResetVars();\n\t\t}\t\n\t\n\t\tif(StoredCommand == \"checkvision\")\n\t\t{ \n\t\t\t\tloc = RememberPlayer.Location;\n\t\t\t\tloc.Z += RememberPlayer.BaseEyeHeight;\n\t\t\t\tline = Vector(RememberPlayer.ViewRotation) * 20000;\n\t\t\t\tTrace(hitLocation, hitNormal, loc+line, loc, true);\n\t\t\t\tSpawn(class'Sphereeffect',,,HitLocation);\n\t\t\t\tAthVis = Spawn(class'AthenaVision',,,HitLocation);\n\t\t\t\tAthVis.Ath = Self;\n\t\t\t\tAthVis.AthFunction = \"check\";\n\t\t\t\tAthVis.SetTimer(0.1,False);\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tResetVars();\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"checkradius\")\n\t\t{ \n\t\t\tforeach VisibleActors(class'Actor', A, 300, RememberPlayer.Location)\n\t\t\t{\n\t\t\t\tif(A != Self && A != RememberPlayer && !A.IsA('Info'))\n\t\t\t\t\tradStr = radStr$string(a.Class)$\", \";\n\t\t\t}\n\t\t\t\tif(Len(radStr) == 0)\n\t\t\t\tASay(\"Found nothing...\");\n\t\t\t\telse if(Len(radStr) >= 420)\n\t\t\t\tASay(\"Found a large number of items, too many to list.\");\n\t\t\t\telse\n\t\t\t\tASay(\"Found\"@Left(radStr, Len(radStr)-2));\n\t\t\t\tResetVars();\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"rcon\")\n\t\t{\n\t\t\tif(AM.bMutatorAdmin && !RememberPlayer.bAdmin)\n\t\t\t{\n\t\t\t\tRememberPlayer.bAdmin = True;\n\t\t\t\tbWasAdmin=True;\n\t\t\t}\n\t\t\tRememberPlayer.ConsoleCommand(\"mutate rcon.\"$rememberstring);\n\t\t\t\tif(bWasAdmin)\n\t\t\t\t\tRememberPlayer.bAdmin = false;\n\t\t\tResetVars();\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"mutate\")\n\t\t{\n\t\t\tif(AM.bMutatorAdmin && !RememberPlayer.bAdmin)\n\t\t\t{\n\t\t\t\tRememberPlayer.bAdmin = True;\n\t\t\t\tbWasAdmin=True;\n\t\t\t}\n\t\t\tRememberPlayer.ConsoleCommand(\"mutate \"$rememberstring);\n\t\t\t\tif(bWasAdmin)\n\t\t\t\t\tRememberPlayer.bAdmin = false;\n\t\t\tResetVars();\n\t\t}\t\n\t\t\t\n\t\tif(StoredCommand == \"hideseek\")\n\t\t{\n\t\t\tRememberPlayer.ConsoleCommand(\"Mutate hidestart\");\n\t\t\tResetVars();\n\t\t}\n\n\t\tif(StoredCommand == \"guess\")\n\t\t{\n\t\t\tRememberPlayer.ConsoleCommand(\"Mutate guess\"@rememberstring);\n\t\t\tResetVars();\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"comment\")\n\t\t{\n\t\t\tASay(\"Okay, your comment has been saved, along with your name and the current time.\");\n\t\t\tSaveComment(rememberstring);\n\t\t\tResetVars();\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"topic\")\n\t\t{\n\t\t\tASay(\"Okay, topic set to \"$rememberstring$\".\");\n\t\t\tAM.Topic = RememberString;\n\t\t\tAM.SaveConfig();\n\t\t\tResetVars();\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"saytopic\")\n\t\t{\n\t\t\tif(AM.Topic != \"\")\n\t\t\t{\n\t\t\t\tASay(\"Currently, the topic of discussion is\"@AM.Topic$\".\");\n\t\t\t}\n\t\t\tResetVars();\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"memo\")\n\t\t{\n\t\t\tASay(\"Okay, your memo has been saved. Say Memo Read to view.\");\n\t\t\tSaveMemo(rememberstring);\n\t\t\tResetVars();\n\t\t}\n\t\n\t\tif(StoredCommand == \"memoread\")\n\t\t{\n\t\t\tfor(i=0;i<50;i++)\n\t\t\tif(AM.Memo[i] != \"\")\n\t\t\t{\n\t\t\t\tif(instr(AM.Memo[i], \"[\"$RememberName$\"]\") != -1)\n\t\t\t\t{\n\t\t\t\t\t\tASay(AM.Memo[i]);\n\t\t\t\t\t\tbFoundMemo=True;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(!bFoundMemo)\n\t\t\t{\n\t\t\t\tASay(\"No memos found.\");\n\t\t\t}\n\t\t\tResetVars();\n\t\t}\n\n\t\tif(StoredCommand == \"memoclear\")\n\t\t{\n\t\t\tfor(i=0;i<50;i++)\n\t\t\tif(AM.Memo[i] != \"\")\n\t\t\t{\n\t\t\t\tif(instr(AM.Memo[i], RememberName) != -1)\n\t\t\t\t{\n\t\t\t\t\t\tASay(\"Deleted memo [\"$AM.Memo[i]$\"].\");\n\t\t\t\t\t\tAM.Memo[i] = \"\";\n\t\t\t\t\t\tbFoundMemo=True;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(!bFoundMemo)\n\t\t\t{\n\t\t\t\tASay(\"No memos found.\");\n\t\t\t}\n\t\t\tResetVars();\n\t\t}\n\t\t\t\t\n\t\tif(StoredCommand == \"readcomment\")\n\t\t{\n\t\t\tASay(\"[Comment] \"$AM.Feedback[Rememberint],True);\n\t\t\tResetVars();\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"listcomment\")\n\t\t{\n\t\t\t\tfor(i=0;i<50;i++)\n\t\t\t\t\tif(AM.Feedback[i] != \"\")\n\t\t\t\t\t\tamount++;\n\t\t\t\t\t\t\n\t\t\tASay(\"Currently there is \"$amount$\" comment(s) posted.\");\n\t\t\tResetVars();\n\t\t}\n\t}\n\t\n\t//Auth zone\n\tif(bCheckingAuth)\n\t{\n\t\tif(Sendtypepublic == \"player\")\n\t\t{\n\t\t\tIP = CheckAuthPlayer.GetPlayerNetworkAddress();\n\t\t\tIP = Left(IP, InStr(IP, \":\"));\n\t\t\tLog(\"Got Player IP\"@IP);\n\t\t\tif(IP != \"\") //Usually due to being sent from IRC, or non-players.\n\t\t\t{\n\t\t\t\tif(CheckAuthPlayer.bAdmin && IP != \"\")\n\t\t\t\t{\n\t\t\t\t\tbGotAccess=True;\n\t\t\t\t}\n\n\t\t\t\tif(bCheckingWhitelist)\n\t\t\t\t{\n\t\t\t\t\t\n\t\t\t\t\tfor (n=0;n<20;n++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(AM.WhitelistIP[n] != \"\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(IP == AM.WhitelistIP[n])\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tbGotAccess=True;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor (n=0;n<20;n++)\n\t\t\t\t{\n\t\t\t\t\tif(AM.AccessIP[n] != \"\")\n\t\t\t\t\t{\n\t\t\t\t\t\tif(IP == AM.AccessIP[n])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbGotAccess=True;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(Sendtypepublic == \"irc\")\n\t\t{\n\t\t\t\tfor (n=0;n<20;n++)\n\t\t\t\t{\n\t\t\t\t\tif(AM.AccessNames[n] != \"\")\n\t\t\t\t\t{\n\t\t\t\t\t\tif(AuthPlayerName == AM.AccessNames[n])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbGotAccess=True;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\t\telse if(Sendtypepublic == \"telnet\")\n\t\t{\n\t\t\tbGotAccess=True;\n\t\t}\n\t\t\n\t\tif(bGotAccess)\n\t\t{\n\t\t\tif(storedcommand == \"deactivate\")\n\t\t\t\trealstr = \"Disabling listener spectator...\";\n\t\t\telse if(storedcommand == \"protocolmon\")\n\t\t\t\trealstr = \"Activating Protocol M...\";\n\t\t\telse if(storedcommand == \"protocolmoff\")\n\t\t\t\trealstr = \"Deactivating Protocol M...\";\n\t\t\telse if(storedcommand == \"heal\" || storedcommand == \"healall\" || storedcommand == \"fixup\" || storedcommand == \"blowup\"  || storedcommand == \"deleteitem\" || storedcommand == \"smite\" || storedcommand == \"smiteall\"  || storedcommand == \"smitebot\" || storedcommand == \"bring\"  || storedcommand == \"goto\" || storedcommand == \"assemble\" || storedcommand == \"disarm\" || storedcommand == \"deletevision\")\n\t\t\t\trealstr = \"Executing command...\";\n\t\t\telse if(storedcommand == \"fixconflicts\")\n\t\t\t\trealstr = \"Processing conflict resolution commands...\";\n\t\t\telse if(storedcommand == \"kick\")\n\t\t\t\trealstr = \"Finding player to kick...\";\n\t\t\telse if(storedcommand == \"killall\")\n\t\t\t\trealstr = \"Preparing object destruction...\";\n\t\t\telse if(storedcommand == \"ignore\" || storedcommand == \"clearignore\")\n\t\t\t\trealstr = \"Accessing ignore list...\";\n\t\t\telse if(storedcommand == \"restart\")\n\t\t\t\trealstr = \"Restarting the map...\";\n\t\t\telse if(storedcommand == \"shutdown\")\n\t\t\t\trealstr = \"Preparing server shutdown...\";\n\t\t\telse if(storedcommand == \"trigger\" || storedcommand == \"bump\" || storedcommand == \"frob\")\n\t\t\t\trealstr = \"Simulating functions...\";\n\t\t\telse if(storedcommand == \"warn\")\n\t\t\t\trealstr = \"Warning player...\";\n\t\t\telse if(storedcommand == \"mapchange\")\n\t\t\t\trealstr = \"Changing map...\";\n\t\t\t\n\t\t\tif(realstr == \"\")\n\t\t\t\trealstr=\"Executing function...\";\n\t\t\t//ASay(\"Authentication passed. Processing command.\");\n\t\t\tAStatus(realstr);\n\t\t\tbPassed=True;\n\t\t\tbCheckingAuth=False;\n\t\t\tif(bHurryUp)\n\t\t\t{\n\t\t\t\tSetTimer(0.1,False);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tSetTimer(0.5,False);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tASay(\"Authentication failed. Please make sure you have access before commanding me again.\");\n\t\t\tAVoice(sound'Athena.AthenaDenied');\n\t\t\tbCheckingAuth=False;\n\t\t\tResetVars();\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(bPassed)\n\t{\n\t\t\n\t\tif(StoredCommand == \"qil\")\n\t\t{\n\t\t\tASay(\"Server will close when you disconnect. Delete item qi to cancel.\");\n\t\t\tq = Spawn(class'qi');\n\t\t\tq.QIL=True;\n\t\t\tq.iPlayer = CheckAuthPlayer;\n\t\t\tq.SetTimer(1,True);\n\t\t\t\n\t\t}\n\t\tif(StoredCommand == \"qnp\")\n\t\t{\n\t\t\tASay(\"Server will close when server is empty. Delete item qi to cancel.\");\n\t\t\tq = Spawn(class'qi');\n\t\t\tq.QNP=True;\n\t\t\tq.SetTimer(1,True);\n\t\t}\n\t\tif(StoredCommand == \"deactivate\")\n\t\t{\n\t\t\tASay(\"Shutting down Athena systems.\");\n\t\t\tDestroy();\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"fixconflicts\")\n\t\t{\n\t\t\tASay(\"Fixing conflicts with external modifications..\");\n\t\t\tcheckauthplayer.ConsoleCommand(\"admin Set tccontrols bSmartchat false\");\n\t\t\tcheckauthplayer.ConsoleCommand(\"admin Set tccontrols btctaunts false\");\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"remsummon\")\n\t\t{\n\t\t\tfor(i=0;i<8;i++)\n\t\t\t\tif(AM.RememberLocation[i] != vect(0,0,0))\n\t\t\t\t{\n\t\t\t\t\taTemp = RememberString;\n\t\t\t\t\tif ( InStr(aTemp,\".\") == -1 )\n\t\t\t\t\t{\n\t\t\t\t\t\taTemp=\"DeusEx.\" $ aTemp;\n\t\t\t\t\t}\n\t\t\t\t\taClass = class<actor>( DynamicLoadObject( aTemp, class'Class' ) );\n\t\t\t\t\t\tif(aClass == None)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tSpawn(aClass,,,AM.RememberLocation[i]);\n\t\t\t\t\t\t\tASay(\"Spawning object at locations.\");\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\n\t\tif(StoredCommand == \"remsummonprimary\")\n\t\t{\n\t\t\t\tif(AM.PrimaryLocation != vect(0,0,0))\n\t\t\t\t{\n\t\t\t\t\taTemp = RememberString;\n\t\t\t\t\tif ( InStr(aTemp,\".\") == -1 )\n\t\t\t\t\t{\n\t\t\t\t\t\taTemp=\"DeusEx.\" $ aTemp;\n\t\t\t\t\t}\n\t\t\t\t\taClass = class<actor>( DynamicLoadObject( aTemp, class'Class' ) );\n\t\t\t\t\t\tif(aClass == None)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tSpawn(aClass,,,AM.PrimaryLocation);\n\t\t\t\t\t\t\tASay(\"Spawning object at primary location.\");\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\t\t\t\t\n\t\tif(StoredCommand == \"remloc\")\n\t\t{\n\t\t\tSaveLocRem(CheckAuthPlayer.Location);\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"remlocprimary\")\n\t\t{\n\t\t\tAM.PrimaryLocation = CheckAuthPlayer.Location;\n\t\t\tASay(\"Primary location set at\"@CheckAuthPlayer.Location);\n\t\t}\n\t\t\t\n\t\tif(StoredCommand == \"debugbot\")\n\t\t{\n\t\t\tAM.DebugBots();\n\t\t\tASay(\"Running debug...\");\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"warn\")\n\t\t{\n\t\t\tRC.SystemWarnPlayer(RememberPlayer, \"By Athena\");\n\t\t}\t\t\n\t\t\n\t\tif(StoredCommand == \"mapchange\")\n\t\t{\n\t\t\tDCMD = Spawn(class'DelayCMD',,,Location);\n\t\t\tDCMD.CDown = 5;\n\t\t\tDCMD.TCMD = \"travel\";\n\t\t\tDCMD.ExtraCMD = rememberstring;\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"setrconvar\")\n\t\t{\n\t\t\tASay(\"Setting\"@Rememberstring);\n\t\t\tCheckAuthPlayer.ConsoleCommand(\"admin set rconmanager \"$rememberstring);\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"protocolmon\")\n\t\t{\n\t\t\tAM.bProtocolM = True;\n\t\t\tASay(\"Protocol M is now in effect.\");\n\t\t}\n\t\t\n\t\tif(storedcommand == \"protocolmoff\")\n\t\t{\n\t\t\tAM.bProtocolM = False;\n\t\t\tASay(\"Protocol M has been cancelled.\");\n\t\t}\n\n\t\tif(storedcommand == \"bring\")\n\t\t{\n\t\t\tif(RememberPlayer==None)\n\t\t\t{\n\t\t\t\tASay(\"Couldn't find target player.\");\n\t\t\t}\n\t\t\telse if(RememberPlayer.Health <= 0)\n\t\t\t{\n\t\t\t\tASay(\"Don't try to bring the dead.\");\n\t\t\t}\n\t\t\telse if(RememberPlayer.IsInstate('spectating'))\n\t\t\t{\n\t\t\t\tASay(\"Don't try to bring spectators.\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tASay(\"Teleported\"@GetName(RememberPlayer)@\"to\"@GetName(CheckAuthPlayer));\n\t\t\t\tRememberPlayer.SetCollision(false, false, false);\n\t\t\t\tRememberPlayer.bCollideWorld = true;\n\t\t\t\tRememberPlayer.GotoState('PlayerWalking');\n\t\t\t\tSpawnExplosion(RememberPlayer.Location);\n\t\t\t\tRememberPlayer.SetLocation(CheckAuthPlayer.location);\n\t\t\t\tRememberPlayer.SetCollision(true, true , true);\n\t\t\t\tRememberPlayer.SetPhysics(PHYS_Walking);\n\t\t\t\tRememberPlayer.bCollideWorld = true;\n\t\t\t\tRememberPlayer.GotoState('PlayerWalking');\n\t\t\t\tRememberPlayer.ClientReStart();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(storedcommand == \"goto\")\n\t\t{\n\t\t\tif(RememberPlayer==None)\n\t\t\t{\n\t\t\t\tASay(\"Couldn't find target player.\");\n\t\t\t}\n\t\t\telse if(CheckAuthPlayer.Health <= 0)\n\t\t\t{\n\t\t\t\tASay(\"Don't try to teleport while you're dead.\");\n\t\t\t}\n\t\t\telse if(CheckAuthPlayer.IsInstate('spectating'))\n\t\t\t{\n\t\t\t\tASay(\"Don't try to teleport while you're spectating.\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\tASay(\"Teleported\"@GetName(CheckAuthPlayer)@\"to\"@GetName(RememberPlayer));\n\t\t\tCheckAuthPlayer.SetCollision(false, false, false);\n\t\t\tCheckAuthPlayer.bCollideWorld = true;\n\t\t\tCheckAuthPlayer.GotoState('PlayerWalking');\n\t\t\tSpawnExplosion(CheckAuthPlayer.Location);\n\t\t\tCheckAuthPlayer.SetLocation(RememberPlayer.location);\n\t\t\tCheckAuthPlayer.SetCollision(true, true , true);\n\t\t\tCheckAuthPlayer.SetPhysics(PHYS_Walking);\n\t\t\tCheckAuthPlayer.bCollideWorld = true;\n\t\t\tCheckAuthPlayer.GotoState('PlayerWalking');\n\t\t\tCheckAuthPlayer.ClientReStart();\t\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(storedcommand == \"assemble\")\n\t\t{\n\t\tamount=0;\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(DXP != RememberPlayer && DXP.Health > 0 && !DXP.IsInState('Spectating'))\n\t\t\t\t{\n\t\t\t\t\tDXP.SetCollision(false, false, false);\n\t\t\t\t\tDXP.bCollideWorld = true;\n\t\t\t\t\tDXP.GotoState('PlayerWalking');\n\t\t\t\t\tSpawnExplosion(DXP.Location);\n\t\t\t\t\tDXP.SetLocation(RememberPlayer.location);\n\t\t\t\t\tDXP.SetCollision(true, true , true);\n\t\t\t\t\tDXP.SetPhysics(PHYS_Walking);\n\t\t\t\t\tDXP.bCollideWorld = true;\n\t\t\t\t\tDXP.GotoState('PlayerWalking');\n\t\t\t\t\tDXP.ClientReStart();\n\t\t\t\t\tamount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(amount > 0)\n\t\t\tASay(\"Assembled\"@amount@\"players at\"@GetName(RememberPlayer)$\"'s location.\");\n\t\t\telse\n\t\t\tASay(\"Not enough players to assemble.\");\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"mute\")\n\t\t{\n\t\t\tASay(\"Speech disabled.\");\n\t\t\tAM.bMuted=True;\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"unmute\")\n\t\t{\n\t\t\tAM.bMuted=False;\n\t\t\tASay(\"Mute has been cancelled.\");\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"degodall\")\n\t\t{ \n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tDXP.ReducedDamageType='';\n\t\t\t}\n\t\t\tAM.bSafeMode=False;\n\t\t\tASay(\"Protection ended.\");\n\t\t}\n\n\t\tif(StoredCommand == \"godall\")\n\t\t{ \n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tDXP.ReducedDamageType='all';\n\t\t\t}\n\t\t\tAM.bSafeMode=True;\n\t\t\tASay(\"Protection enabled.\");\n\t\t}\n\t\n\t\tif(StoredCommand == \"peacekeeperone\")\n\t\t{ \n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tDXP.ReducedDamageType='all';\n\t\t\t}\n\t\t\tPeacekeeper=1;\n\t\t\tASay(\"Peacekeeper mode one active. Players godded.\");\n\t\t}\n\t\n\t\tif(StoredCommand == \"peacekeepertwo\")\n\t\t{ \n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tDXP.ReducedDamageType='all';\n\t\t\t\t\tforeach AllActors(class'Inventory',inv)\n\t\t\t\t{\n\t\t\t\t\tif(inv.Owner == DXP)\n\t\t\t\t\t\tinv.Destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tforeach AllActors(class'Inventory',inv)\n\t\t\t{\n\t\t\t\tinv.bHidden=True;\n\t\t\t}\n\t\t\tASay(\"Peacekeeper mode two active. Players godded and weapons removed.\");\n\t\t\tPeacekeeper=2;\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"awatchper\")\n\t\t{ \n\t\t\tAM.SpawnAbuseWatch(True);\n\t\t\tASay(\"Anti-abuse system is in effect.\");\n\t\t}\n\t\tif(StoredCommand == \"awatchperoff\")\n\t\t{ \n\t\t\tAM.EndAbuseWatch();\n\t\t\tASay(\"Anti-abuse system is cancelled.\");\n\t\t}\t\t\t\n\t\tif(StoredCommand == \"peacekeepernone\")\n\t\t{ \n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tDXP.ReducedDamageType='';\n\t\t\t}\n\t\t\t\n\t\t\tforeach AllActors(class'Inventory',inv)\n\t\t\t{\n\t\t\t\tinv.bHidden=false;\n\t\t\t}\n\n\t\t\tPeacekeeper=0;\n\t\t\tASay(\"Peacekeeper mode ended. Players returned to normal and weapons in map are respawned.\");\n\t\t}\n\n\t\tif(StoredCommand == \"disarm\")\n\t\t{ \n\t\tamount = 0;\n\t\t\tif(RememberPlayer != None)\n\t\t\t{\n\t\t\t\t\t\tif(AM.disarmsound != None)\n\t\t\t\t\t\tRememberPlayer.PlaySound(AM.disarmsound, SLOT_Talk,,,256);\n\t\t\t\t\tforeach AllActors(class'Inventory',inv)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(inv.Owner == RememberPlayer)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tamount++;\n\t\t\t\t\t\t\tinv.Destroy();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\tif(amount > 0)\n\t\t\t\t{\n\t\t\t\t\tASay(\"Disarmed\"@GetName(RememberPlayer)$\".\"@amount@\"items were taken.\");\n\t\t\t\t\tSpawnExplosion(RememberPlayer.Location);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tASay(GetName(RememberPlayer)@\"had no items.\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\tASay(\"Error in finding player.\");\n\t\t\t}\n\t\t}\n\n\t\tif(StoredCommand == \"deletevision\")\n\t\t{ \n\t\t\t\tloc = CheckAuthPlayer.Location;\n\t\t\t\tloc.Z += CheckAuthPlayer.BaseEyeHeight;\n\t\t\t\tline = Vector(CheckAuthPlayer.ViewRotation) * 10000;\n\t\t\t\tTrace(hitLocation, hitNormal, loc+line, loc, true);\n\t\t\t\tSpawnExplosion(HitLocation);\n\t\t\t\tAthVis = Spawn(class'AthenaVision',,,HitLocation);\n\t\t\t\tAthVis.Ath = Self;\n\t\t\t\tAthVis.AthFunction = \"delete\";\n\t\t\t\tAthVis.SetTimer(0.1,False);\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"lagwatch\")\n\t\t{\n\t\t\tASay(\"Enabling Lag Watch.\");\n\t\t\tAM.LagWatch(True);\n\t\t}\n\n\t\tif(StoredCommand == \"lagwatchoff\")\n\t\t{\n\t\t\tASay(\"Ending Lag Watch.\");\n\t\t\tAM.LagWatch(False);\n\t\t}\n\n\t\tif(StoredCommand == \"timewatch\")\n\t\t{\n\t\t\tASay(\"Enabling Time Watch.\");\n\t\t\tAM.TimeWatch(True);\n\t\t}\n\n\t\tif(StoredCommand == \"timewatchoff\")\n\t\t{\n\t\t\tASay(\"Ending Time Watch.\");\n\t\t\tAM.TimeWatch(False);\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"setalarm\")\n\t\t{\n\t\t\tif(instr(caps(Rememberstring), caps(\":\")) != -1)\n\t\t\t{\n\t\t\t\tASay(\"Setting alarm for\"@RememberString);\n\t\t\t\tAM.SetAlarm(RememberString);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tASay(\"Alarm string is badly formatted. Accepted format is HOUR:MINUTE.\");\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"configset\")\n\t\t{\n\t\t\tcint = InStr(rememberstring, \" \");       \n\t\t\t\tSetA = Left(rememberstring, cint );\n\t\t\t\tSetB = Right(rememberstring, Len(rememberstring) - cint - 1);\n\t\t\t\t\t\tif (AM.GetPropertyText(SetA) == \"\")\n\t\t\t\t\t\t {\n\t\t\t\t\t\t\tASay(\"Sorry, I don't recognize that setting.\");\n\t\t\t\t\t\t }\n\t\t\t\t\t\t else\n\t\t\t\t\t\t {\n\t\t\t\t\t\t\tAM.SetPropertyText(SetA, SetB);\n\t\t\t\t\t\t\tAM.SaveConfig();\n\t\t\t\t\t\t\tASay(\"Setting \"$SetA$\" to \"$Setb$\".\");\t \n\t\t\t\t\t\t }\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"configsetrcon\")\n\t\t{\n\t\t\tcint = InStr(rememberstring, \" \");       \n\t\t\t\tSetA = Left(rememberstring, cint );\n\t\t\t\tSetB = Right(rememberstring, Len(rememberstring) - cint - 1);\n\t\t\t\tforeach AllActors(class'RCON',RC)\n\t\t\t\t{\n\t\t\t\t\tif (RC.GetPropertyText(SetA) == \"\")\n\t\t\t\t\t {\n\t\t\t\t\t\tASay(\"Sorry, I don't recognize that setting.\");\n\t\t\t\t\t }\n\t\t\t\t\t else\n\t\t\t\t\t {\n\t\t\t\t\t\tRC.SetPropertyText(SetA, SetB);\n\t\t\t\t\t\tRC.SaveConfig();\n\t\t\t\t\t\tASay(\"Setting \"$SetA$\" to \"$Setb$\".\");\t \n\t\t\t\t\t }\n\t\t\t\t}\n\t\t\t\t\t\t\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"configsetrconm\")\n\t\t{\n\t\t\tcint = InStr(rememberstring, \" \");       \n\t\t\t\tSetA = Left(rememberstring, cint );\n\t\t\t\tSetB = Right(rememberstring, Len(rememberstring) - cint - 1);\n\t\t\t\tforeach AllActors(class'RCONManager',RM)\n\t\t\t\t{\n\t\t\t\t\tif (RM.GetPropertyText(SetA) == \"\")\n\t\t\t\t\t {\n\t\t\t\t\t\tASay(\"Sorry, I don't recognize that setting.\");\n\t\t\t\t\t }\n\t\t\t\t\t else\n\t\t\t\t\t {\n\t\t\t\t\t\tRM.SetPropertyText(SetA, SetB);\n\t\t\t\t\t\tRM.SaveConfig();\n\t\t\t\t\t\tASay(\"Setting \"$SetA$\" to \"$Setb$\".\");\t \n\t\t\t\t\t }\n\t\t\t\t}\n\t\t\t\t\t\t\n\t\t}\n\t\t\t\t\t\t\n\t\tif(StoredCommand == \"giveadmin\")\n\t\t{\n\t\t\tif(!RememberPlayer.bAdmin)\n\t\t\t{\n\t\t\tRememberPlayer.bAdmin = True;\n\t\t\tRememberPlayer.PlayerReplicationInfo.bAdmin =True;\n\t\t\tASay(\"Admin access given to \"$RememberPlayer.PlayerReplicationInfo.PlayerName);\n\t\t\tAVoice(sound'Athena.AthenaGranted');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tAVoice(sound'Athena.AthenaFailed');\n\t\t\tASay(\"Already admin. What more do you want, SUPER ADMIN? Don't be rediculous.\");\n\t\t\t}\t\t\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"blind\")\n\t\t{\n\t\t\tif(RememberPlayer != BMP && RememberPlayer != None)\n\t\t\t{\n\t\t\t\tBlind(RememberPlayer);\n\t\t\t\t\tif(AM.BlindSound != None)\n\t\t\t\t\t\tRememberPlayer.PlaySound(AM.blindsound, SLOT_Talk,,,256);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\tASay(\"Command failed to execute.\");\n\t\t\t}\t\t\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"killblind\")\n\t\t{\n\t\t\t\tKillBlind();\n\t\t}\n\t\t\n\t\tif(storedcommand == \"generatepass\")\n\t\t{\n\t\t\trememberstring = generateRandStr(rememberint);\n\t\t\tif(CheckAuthPlayer == None)\n\t\t\t{\n\t\t\t\tConsoleCommand(\"Set Gameinfo Gamepassword \"$rememberstring);\n\t\t\t\tASay(\"[R] Password set to\"@rememberstring);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tCheckAuthPlayer.consolecommand(\"admin Set gameinfo gamepassword\"@rememberstring);\n\t\t\t\tASay(\"Password set to\"@rememberstring);\n\t\t\t}\n\t\t}\n\n\t\tif(storedcommand == \"setpassword\")\n\t\t{\n\t\t\tif(CheckAuthPlayer == None)\n\t\t\t{\n\t\t\t\tConsoleCommand(\"Set Gameinfo Gamepassword \"$rememberstring);\n\t\t\t\tASay(\"[R] Password set to\"@rememberstring);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tCheckAuthPlayer.consolecommand(\"admin Set gameinfo gamepassword\"@rememberstring);\n\t\t\t\tASay(\"Password set to\"@rememberstring);\n\t\t\t}\n\t\t}\n\n\t\tif(storedcommand == \"removepass\")\n\t\t{\n\t\t\tif(CheckAuthPlayer == None)\n\t\t\t{\n\t\t\t\tConsoleCommand(\"Set Gameinfo Gamepassword \");\n\t\t\t\tASay(\"[R] Password removed.\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tCheckAuthPlayer.consolecommand(\"admin Set gameinfo gamepassword \");\n\t\t\t\tASay(\"Password removed.\");\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(storedcommand == \"randomchatcolour\")\n\t\t{\n\t\t\tAM.ChatColour = generateRandHex();\n\t\t\tAM.SaveConfig();\n\t\t\tASay(\"Okay, how is this?\");\n\t\t}\n\t\t\n\t\tif(storedcommand == \"setchatcolour\")\n\t\t{\n\t\t\tAM.ChatColour = rememberstring;\n\t\t\tAM.SaveConfig();\n\t\t\tASay(\"Okay, new chat colour is set.\");\n\t\t}\t\t\n\n\t\tif(storedcommand == \"resetchatcolour\")\n\t\t{\n\t\t\tAM.ChatColour = AM.DefaultChatColour;\n\t\t\tAM.SaveConfig();\n\t\t\tASay(\"Okay, back to default then.\");\n\t\t}\t\t\n\t\t\n\t\tif(StoredCommand == \"nptinfo\")\n\t\t{\n\t\t\t//( PlayerPawn PP, out string Addr, out string State, out string Names, out string MoreInfo );\n\t\t\tif(RememberPlayer != None)\n\t\t\t{\n\t\t\t\tclass'NephthysProxy'.static.GetPlayerInfo(RememberPlayer, addr, state, names, moreinfo);\n\t\t\t\tASay(\"IP is \"$addr$\". Names are \"$names$\". (\"$moreinfo$\")\",True);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tASay(\"No player found.\");\n\t\t\t\tAVoice(sound'Athena.Athenafailed');\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"takeadmin\")\n\t\t{\n\t\t\tif(RememberPlayer.bAdmin)\n\t\t\t{\n\t\t\tRememberPlayer.bAdmin = False;\n\t\t\tRememberPlayer.PlayerReplicationInfo.bAdmin = False;\n\t\t\tASay(\"Admin access removed \"$RememberPlayer.PlayerReplicationInfo.PlayerName);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\tASay(\"This player isn't admin. Can't do anything.\");\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"toggleauto\")\n\t\t{\n\t\t\tAM.bAutostart = !AM.bAutostart;\n\t\t\tAM.SaveConfig();\n\t\t\t\n\t\t\tif(AM.bAutostart)\n\t\t\tASay(\"I will now activate automatically at map start.\");\n\t\t\telse\n\t\t\tASay(\"I will now only activate when commanded.\");\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"restart\")\n\t\t{\n\t\t\tASay(\"Restarting, please wait.\");\n\t\t\tCheckAuthPlayer.ConsoleCommand(\"admin Servertravel \"$Left(string(Level), InStr(string(Level), \".\")));\n\t\t}\t\t\n\n\t\tif(StoredCommand == \"shutdown\")\n\t\t{\n\t\t\tif(SDA==None)\n\t\t\t{\n\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(AM.shutdownStartSound != none)\n\t\t\t\t\t\t\tDXP.PlaySound(AM.shutdownStartSound, SLOT_Interface,,, 256);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tDXP.PlaySound(sound'Ambient.klaxon3', SLOT_Interface,,, 256);\t\t\n\t\t\t\t\t}\n\t\t\t\t\n\t\t\tAVoice(sound'Athena.AthenaShutdown');\n\t\t\tSDA = Spawn(class'SDActor');\n\t\t\tSDA.Spec = Self;\n\t\t\tSDA.Counter=AM.ShutdownTime;\n\t\t\tSDA.SetTimer(1,True);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tASay(\"Already in shutdown mode.\");\n\t\t\t}\n\t\t}\t\t\n\t\t\n\t\tif(StoredCommand == \"cancelshutdown\")\n\t\t{\n\t\t\tif(SDA != None)\n\t\t\t{\n\t\t\t\tif(AM.shutdownAbortSound != none)\n\t\t\t\t{\n\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t{\n\t\t\t\t\t\tDXP.PlaySound(AM.shutdownAbortSound, SLOT_Interface,,, 256);\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tAVoice(sound'Athena.AthenaShutdownAbort');\n\t\t\t\tSDA.Destroy();\n\t\t\t\tSDA = none;\n\t\t\t\tASay(\"Shutdown cancelled.\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tASay(\"Shutdown was not even running, idiot. Stop wasting my time.\");\n\t\t\t}\n\t\t}\t\t\n\t\t\n\t\tif(StoredCommand == \"clearscores\")\n\t\t{\n\t\t\tAM.ResetScores();\n\t\t\tASay(\"Resetting scoreboard.\");\n\t\t}\n\t\t\t\t\t\t\n\t\tif(StoredCommand == \"setchatsound\")\n\t\t{\n\t\t\t//AM.ChatSound = RememberString;\n\t\t\tCheckAuthPlayer.ConsoleCommand(\"Admin set AthenaMutator ChatSound\"@RememberString);\n\t\t\tif(AM.ChatSound != None)\n\t\t\t\tASay(\"New chat sound set. [\"$AM.ChatSound$\"]\");\n\t\t\telse\n\t\t\t{\n\t\t\t\tAM.ChatSound = sound'DataLinkStart';\n\t\t\t\tAM.SaveConfig();\n\t\t\t\tASay(\"There was a problem setting new chat sound. Sound is now default.\");\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"cyclestyle\")\n\t\t{\n\t\t\tCycleStyle();\n\t\t}\n\n\t\tif(StoredCommand == \"smite\")\n\t\t{\n\t\t\tAStatus(\"\");\n\t\t\t\n\t\t\tif(RememberPlayer != None)\n\t\t\t{\n\t\t\t\tif(RememberPlayer == BMP)\n\t\t\t\t{\n\t\t\t\t\tASay(\"Can't smite master.\");\n\t\t\t\t\t\tAVoice(sound'Athena.AthenaFailed',CheckAuthPlayer);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tr = Rand(5);\n\t\t\t\t\tif(r == 0)\n\t\t\t\t\t\tAVoice(sound'Athena.AthenaTargetDestroyed');\n\t\t\t\t\telse if(r == 1)\n\t\t\t\t\t\tAVoice(sound'Athena.AthenaTargetTerminated');\n\t\t\t\t\telse if(r == 2)\n\t\t\t\t\t\tAVoice(sound'Athena.AthenaSmiteAugmented');\n\t\t\t\t\telse if(r == 3)\n\t\t\t\t\t\tAVoice(sound'Athena.AthenaSmitingTime');\n\t\t\t\t\telse if(r == 4)\n\t\t\t\t\t\tAVoice(sound'Athena.AthenaDead');\t\t\t\t\t\n\t\t\t\tSpawnExplosion(RememberPlayer.Location);\n\t\t\t\tRememberPlayer.setPhysics(PHYS_Falling);\n\t\t\t\tRememberPlayer.Velocity = vect(0,0,512);\n\t\t\t\tRememberPlayer.ReducedDamageType = '';\n\t\t\t\tRememberPlayer.TakeDamage(99999,Self,vect(0,0,0),vect(0,0,1),'Exploded');\n\t\t\t\t\tif(AM.SmiteSound != None)\n\t\t\t\t\t\tRememberPlayer.PlaySound(AM.SmiteSound, SLOT_Talk,,,256);\n\t\t\t\tbFoundSmiteTarget=True;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(!bFoundSmiteTarget)\n\t\t\t\t{\n\t\t\t\t\tAVoice(sound'Athena.AthenaFailed',CheckAuthPlayer);\n\t\t\t\t\tASay(\"Couldn't find a smite target, sorry.\");\n\t\t\t\t}\n\t\t}\t\n\t\t\n\t\tif(storedcommand == \"smitebot\")\n\t\t{\n\t\t\t\tif(RememberName ~= \"all\")\n\t\t\t\t{\n\t\t\t\t\tforeach AllActors(class'ScriptedPawn',SP)\n\t\t\t\t\t{\n\t\t\t\t\t\t\tSP.bInvincible=False;\n\t\t\t\t\t\t\tSpawnExplosion(SP.Location);\n\t\t\t\t\t\t\tSP.TakeDamage(99999,Self,vect(0,0,0),vect(0,0,1),'Tantalus');\n\t\t\t\t\t\t\tbFoundSmiteTarget=True;\n\t\t\t\t\t\t\tamount++;\n\t\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tforeach AllActors(class'ScriptedPawn',SP)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(SP.FamiliarName == RememberName || instr(caps(string(SP.Class)), caps(RememberName)) != -1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tSP.bInvincible=False;\n\t\t\t\t\t\t\tSpawnExplosion(SP.Location);\n\t\t\t\t\t\t\tSP.TakeDamage(99999,Self,vect(0,0,0),vect(0,0,1),'Tantalus');\n\t\t\t\t\t\t\tbFoundSmiteTarget=True;\n\t\t\t\t\t\t\tamount++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\tif(Amount > 0)\n\t\t\t{\n\t\t\t\tASay(\"Destroyed \"$amount$\" objects.\");\n\t\t\t\t\tr = Rand(5);\n\t\t\t\t\tif(r == 0)\n\t\t\t\t\t\tAVoice(sound'Athena.AthenaTargetDestroyed');\n\t\t\t\t\telse if(r == 1)\n\t\t\t\t\t\tAVoice(sound'Athena.AthenaTargetTerminated');\n\t\t\t\t\telse if(r == 2)\n\t\t\t\t\t\tAVoice(sound'Athena.AthenaSmiteAugmented');\n\t\t\t\t\telse if(r == 3)\n\t\t\t\t\t\tAVoice(sound'Athena.AthenaSmitingTime');\n\t\t\t\t\telse if(r == 4)\n\t\t\t\t\t\tAVoice(sound'Athena.AthenaDead');\t\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tASay(\"Couldn't find destroy target.\");\n\t\t\t\tAVoice(sound'Athena.Athenafailed',CheckAuthPlayer);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"kick\")\n\t\t{\n\t\t\tif(RememberPlayer != None)\n\t\t\t{\n\t\t\t\tif(RememberPlayer != BMP)\n\t\t\t\t{\n\t\t\t\tASay(\"Player was kicked.\");\n\t\t\t\tAVoice(sound'Athena.AthenaTargetTerminated');\n\t\t\t\t//RememberPlayer.Destroy();\n\t\t\t\tclass'NephthysProxy'.static.Kick(RememberPlayer);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tAVoice(sound'Athena.Athenafailed',CheckAuthPlayer);\n\t\t\t\t\tASay(\"Can't kick master.\");\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tAVoice(sound'Athena.Athenafailed',CheckAuthPlayer);\n\t\t\t\tASay(\"Couldn't find target player.\");\n\t\t\t}\n\t\t}\t\n\n\t\tif(StoredCommand == \"addmark\")\n\t\t{\n\t\t\tif(RememberPlayer != BMP)\n\t\t\t{\n\t\t\t\tIP = RememberPlayer.GetPlayerNetworkAddress();\n\t\t\t\tIP = Left(IP, InStr(IP, \":\"));\n\t\t\t\tASay(RememberName$\" was marked.\");\n\t\t\t\tAddIPToMarks(IP);\n\t\t\t\tAddNameToMarks(RememberName);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tASay(\"Can't mark master.\");\n\t\t\t}\n\t\t}\t\n\t\n\t\tif(StoredCommand == \"ignore\")\n\t\t{\n\t\t\tif(RememberPlayer != BMP)\n\t\t\t{\n\t\t\t\tIP = RememberPlayer.GetPlayerNetworkAddress();\n\t\t\t\tIP = Left(IP, InStr(IP, \":\"));\n\t\t\tASay(RememberName$\" will be ignored.\");\n\t\t\tAddIPToIgnore(IP);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tASay(\"Can't ignore master.\");\n\t\t\t}\n\t\t}\t\n\t\t\n\t\tif(StoredCommand == \"ignorename\")\n\t\t{\n\t\t\tif(RememberString != \"\")\n\t\t\t\tAddNameToIgnore(IP);\n\t\t}\t\t\t\n\t\t\n\t\tif(StoredCommand == \"whitelist\")\n\t\t{\n\t\t\tif(RememberPlayer != BMP)\n\t\t\t{\n\t\t\t\tIP = RememberPlayer.GetPlayerNetworkAddress();\n\t\t\t\tIP = Left(IP, InStr(IP, \":\"));\n\t\t\tASay(RememberName$\" will be whitelisted.\");\n\t\t\tAddIPToWhitelist(IP);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tASay(\"Botmaster already has full access.\");\n\t\t\t}\n\t\t}\t\n\t\t\n\t\tif(StoredCommand == \"clearignore\")\n\t\t{\n\t\t\tfor(i=0;i<20;i++)\n\t\t\tif(AM.IgnoreIP[i] != \"\")\n\t\t\t{\n\t\t\t\tAM.IgnoreIP[i] = \"\";\n\t\t\t}\n\t\t\t\n\t\t\tfor(i=0;i<20;i++)\n\t\t\tif(AM.IgnoreNames[i] != \"\")\n\t\t\t{\n\t\t\t\tAM.IgnoreNames[i] = \"\";\n\t\t\t}\n\t\t\tAM.SaveConfig();\n\t\t\tASay(\"Ignore list is cleared.\");\n\t\t}\n\n\t\tif(StoredCommand == \"clearwhitelist\")\n\t\t{\n\t\t\tfor(i=0;i<20;i++)\n\t\t\tif(AM.WhitelistIP[i] != \"\")\n\t\t\t{\n\t\t\t\tAM.WhitelistIP[i] = \"\";\n\t\t\t}\n\t\t\t\n\t\t\tfor(i=0;i<20;i++)\n\t\t\tif(AM.WhitelistNames[i] != \"\")\n\t\t\t{\n\t\t\t\tAM.WhitelistNames[i] = \"\";\n\t\t\t}\n\t\t\tAM.SaveConfig();\n\t\t\tASay(\"Whitelist is cleared.\");\n\t\t}\n\t\t\t\t\n\t\tif(StoredCommand == \"memozero\")\n\t\t{\n\t\t\tfor(i=0;i<50;i++)\n\t\t\tif(AM.Memo[i] != \"\")\n\t\t\t{\n\t\t\t\tAM.Memo[i] = \"\";\n\t\t\t}\n\t\t\tAM.SaveConfig();\n\t\t\tASay(\"Memo list is cleared.\");\n\t\t}\n\n\t\tif(StoredCommand == \"markclear\")\n\t\t{\n\t\t\tfor(i=0;i<20;i++)\n\t\t\tif(AM.TroublePlayersNames[i] != \"\")\n\t\t\t{\n\t\t\t\tAM.TroublePlayersNames[i] = \"\";\n\t\t\t}\n\t\t\tfor(i=0;i<20;i++)\n\t\t\tif(AM.TroublePlayerIP[i] != \"\")\n\t\t\t{\n\t\t\t\tAM.TroublePlayerIP[i] = \"\";\n\t\t\t}\n\t\t\tAM.SaveConfig();\n\t\t\tASay(\"Marks list is cleared.\");\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"commentzero\")\n\t\t{\n\t\t\tfor(i=0;i<50;i++)\n\t\t\tif(AM.Feedback[i] != \"\")\n\t\t\t{\n\t\t\t\tAM.Feedback[i] = \"\";\n\t\t\t}\n\t\t\tAM.SaveConfig();\n\t\t\tASay(\"Feedback/comment list is cleared.\");\n\t\t}\t\t\n\t\t\n\t\tif(StoredCommand == \"heal\")\n\t\t{\n\t\t\t\tif(RememberPlayer == None)\n\t\t\t\t{\n\t\t\t\t\tASay(\"Couldn't find that player.\");\n\t\t\t\t\tAVoice(sound'Athena.Athenafailed');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t\tAVoice(sound'Athena.AthenaMedical',RememberPlayer);\n\t\t\t\t\t\tASay(\"Healing \"$Getname(RememberPlayer)$\".\");\n\t\t\t\t\t\tSpawnExplosion(RememberPlayer.Location);\n\t\t\t\t\t\tRememberPlayer.RestoreAllHealth();\n\t\t\t\t\t\tRememberPlayer.StopPoison();\n\t\t\t\t\t\tRememberPlayer.ExtinguishFire();\n\t\t\t\t\t\tRememberPlayer.drugEffectTimer = 0;\n\t\t\t\t\t\tRememberPlayer.Energy = RememberPlayer.EnergyMax;\n\t\t\t\t\t\t\tif(AM.HealSound != None)\n\t\t\t\t\t\t\t\tRememberPlayer.PlaySound(AM.HealSound, SLOT_Talk,,,256);\n\t\t\t\t\t\t\t\t//PlaySound(AM.HealSound, SLOT_Interface,255,,10,256);\n\t\t\t\t}\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"burn\")\n\t\t{\n\t\t\t\tif(RememberPlayer == None && RememberPlayer != BMP)\n\t\t\t\t{\n\t\t\t\t\tAVoice(sound'Athena.Athenafailed');\n\t\t\t\t\tASay(\"Error executing command.\");\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t\tAvoice(sound'Athena.AthenaRedHot');\n\t\t\t\t\t\tASay(\"Burning \"$Getname(RememberPlayer)$\".\");\n\t\t\t\t\t\tif(AM.burnSound != None)\n\t\t\t\t\t\tRememberPlayer.PlaySound(AM.burnsound, SLOT_Talk,,,256);\n\t\t\t\t\t\tRememberPlayer.CatchFire(Self);\n\t\t\t\t}\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"givebm\")\n\t\t{\n\t\t\tASay(\"Adding new access.\");\n\t\t\tAddAccess(IP);\n\t\t}\n\n\t\tif(StoredCommand == \"smiteall\")\n\t\t{\n\t\t\tAStatus(\"\");\n\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(DXP != RememberPlayer && DXP != BMP)\n\t\t\t\t{\n\t\t\t\t\tSpawnExplosion(DXP.Location);\n\t\t\t\t\tDXP.setPhysics(PHYS_Falling);\n\t\t\t\t\tDXP.Velocity = vect(0,0,512);\n\t\t\t\t\tDXP.ReducedDamageType = '';\n\t\t\t\t\tDXP.TakeDamage(99999,Self,vect(0,0,0),vect(0,0,1),'Exploded');\n\t\t\t\t\tif(AM.SmiteSound != None)\n\t\t\t\t\t\tDXP.PlaySound(AM.SmiteSound, SLOT_Interface,,, 256);\n\t\t\t\t}\n\t\t\t}\n\t\t}\t\n\t\t\t\n\t\tif(StoredCommand == \"killall\")\n\t\t{\n\t\t\tif(RememberString == \"all\")\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExDecoration',DXD)\n\t\t\t\t{\n\t\t\t\t\t\t\tDXD.bInvincible=False;\n\t\t\t\t\t\t\tSpawnExplosion(DXD.Location);\n\t\t\t\t\t\t\tDXD.TakeDamage(99999,Self,vect(0,0,0),vect(0,0,1),'Exploded');\n\t\t\t\t\t\t\tAmount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tforeach AllActors(class'DeusExDecoration',DXD)\n\t\t\t\t{\n\t\t\t\t\tif(instr(caps(DXD.ItemName), caps(RememberString)) != -1 || instr(caps(string(DXD.Class)), caps(RememberString)) != -1)\n\t\t\t\t\t{\n\t\t\t\t\t\t\tDXD.bInvincible=False;\n\t\t\t\t\t\t\tSpawnExplosion(DXD.Location);\n\t\t\t\t\t\t\tDXD.TakeDamage(99999,Self,vect(0,0,0),vect(0,0,1),'Exploded');\n\t\t\t\t\t\t\tAmount++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif(Amount > 0)\n\t\t\t{\n\t\t\t\tASay(\"Destroyed \"$amount$\" objects.\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tASay(\"Couldn't find destroy target.\");\n\t\t\t}\n\t\t}\t\n\n\t\tif(StoredCommand == \"deleteitem\") //TODO - Stop delete item cat deleting repliCATion\n\t\t{\n\t\t\tforeach AllActors(class'actor',a)\n\t\t\t{\n\t\t\t\tif(instr(caps(string(a.Class)), caps(RememberString)) != -1)\n\t\t\t\t{\n\t\t\t\t\t\t\tSpawnExplosionLite(A.Location);\n\t\t\t\t\t\t\ta.Destroy();\n\t\t\t\t\t\t\tamount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tforeach AllActors(class'scriptedpawn',sp)\n\t\t\t{\n\t\t\t\tif(instr(caps(sp.familiarname), caps(RememberString)) != -1)\n\t\t\t\t{\n\t\t\t\t\tSpawnExplosionLite(sp.Location);\n\t\t\t\t\t\tsp.Destroy();\n\t\t\t\t\t\tamount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tforeach AllActors(class'inventory',inv)\n\t\t\t{\n\t\t\t\tif(instr(caps(inv.itemname), caps(RememberString)) != -1)\n\t\t\t\t{\n\t\t\t\t\tspawnExplosionLite(inv.Location);\n\t\t\t\t\tinv.Destroy();\n\t\t\t\t\tamount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tforeach AllActors(class'DeusExDecoration',deco)\n\t\t\t{\n\t\t\t\tif(instr(caps(deco.itemname), caps(RememberString)) != -1)\n\t\t\t\t{\n\t\t\t\t\tspawnExplosionLite(deco.Location);\n\t\t\t\t\tdeco.Destroy();\n\t\t\t\t\tamount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(Amount > 0)\n\t\t\t{\n\t\t\t\tASay(\"Deleted \"$amount$\" objects.\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tASay(\"Couldn't find destroy target.\");\n\t\t\t}\n\t\t}\t\n\n\t\tif(StoredCommand == \"deleteitemdbg\")\n\t\t{\n\t\t\tforeach AllActors(class'actor',a)\n\t\t\t{\n\t\t\t\tif(instr(caps(string(a.Class)), caps(RememberString)) != -1)\n\t\t\t\t{\n\t\t\t\t\t\tcheckauthplayer.consolecommand(\"killall\"@a.class);\n\t\t\t\t\t\tamount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tforeach AllActors(class'scriptedpawn',sp)\n\t\t\t{\n\t\t\t\tif(instr(caps(sp.familiarname), caps(RememberString)) != -1)\n\t\t\t\t{\n\t\t\t\t\t\tcheckauthplayer.consolecommand(\"killall\"@sp.class);\n\t\t\t\t\t\tamount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tforeach AllActors(class'inventory',inv)\n\t\t\t{\n\t\t\t\tif(instr(caps(inv.itemname), caps(RememberString)) != -1)\n\t\t\t\t{\n\t\t\t\t\tcheckauthplayer.consolecommand(\"killall\"@inv.class);\n\t\t\t\t\tamount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tforeach AllActors(class'DeusExDecoration',deco)\n\t\t\t{\n\t\t\t\tif(instr(caps(deco.itemname), caps(RememberString)) != -1)\n\t\t\t\t{\n\t\t\t\t\tcheckauthplayer.consolecommand(\"killall\"@deco.class);\n\t\t\t\t\tamount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(Amount > 0)\n\t\t\t{\n\t\t\t\tASay(\"Deleted \"$amount$\" objects.\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tASay(\"Couldn't find destroy target.\");\n\t\t\t}\n\t\t}\t\n\t\t\n\t\tif(StoredCommand == \"addbanitem\")\n\t\t{\n\t\t\tCheckAuthPlayer.ConsoleCommand(\"mutate rcon.addsummonban\"@RememberString);\n\t\t\tASay(\"Adding new RCON.SUMMON ban:\"@RememberString);\n\t\t}\n\t\n\t\tif(StoredCommand == \"addbanitem2\")\n\t\t{\n\t\t\tCheckAuthPlayer.ConsoleCommand(\"mutate rcon.addsummonbanspecific\"@RememberString);\n\t\t\tASay(\"Adding new RCON.SUMMON ban:\"@RememberString);\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"rembanitem\")\n\t\t{\n\t\t\tCheckAuthPlayer.ConsoleCommand(\"mutate rcon.remsummonban\"@RememberString);\n\t\t\tASay(\"Removing RCON.SUMMON ban:\"@RememberString);\n\t\t}\n\t\n\t\tif(StoredCommand == \"rembanitem2\")\n\t\t{\n\t\t\tCheckAuthPlayer.ConsoleCommand(\"mutate rcon.remsummonbanspecific\"@RememberString);\n\t\t\tASay(\"Removing RCON.SUMMON ban:\"@RememberString);\n\t\t}\n\t\t\n\t\tif(StoredCommand == \"trigger\")\n\t\t{\n\t\t\tif (RememberString != \"\")\n\t\t\t\tforeach AllActors(class 'Actor', A)\n\t\t\t\t\tif(string(A.Tag) ~= RememberString)\n\t\t\t\t\t{\n\t\t\t\t\t\tSpawnExplosionSphere(A.Location);\n\t\t\t\t\t\tif(Sendtypepublic == \"player\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tA.Trigger(CheckAuthPlayer, CheckAuthPlayer);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tA.Trigger(self,self);\n\t\t\t\t\t\t}\n\t\t\t\t\t\txstr = xstr$string(a.Class)$\", \";\n\t\t\t\t\t}\n\n\t\t\t\t\tif(Len(xstr) == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tASay(\"Couldn't find trigger target.\");\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{ //     deusex.mover, deusex.mover\n\t\t\t\t\t\tif(len(xstr) >= 75)\n\t\t\t\t\t\t\txstr = \"a large number of objects\";\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\txstr = Left(xstr, Len(xstr)-2);\n\t\t\t\t\t\tASay(\"Executed trigger on \"$xstr$\".\");\n\t\t\t\t\t}\n\t\t}\t\n\n\t\tif(StoredCommand == \"bump\")\n\t\t{\n\t\t\tif (RememberString != \"\")\n\t\t\t\tforeach AllActors(class 'Actor', A)\n\t\t\t\t\tif(string(A.Tag) ~= RememberString)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(sendtypepublic == \"player\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\tA.Bump(CheckAuthPlayer);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\tA.Bump(self);\n\t\t\t\t\t\t}\n\t\t\t\t\t\txstr = xstr$string(a.Class)$\", \";\n\t\t\t\t\t}\n\n\t\t\t\t\tif(Len(xstr) == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tASay(\"Couldn't find bump target.\");\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif(len(xstr) >= 75)\n\t\t\t\t\t\t\txstr = \"a large number of objects\";\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\txstr = Left(xstr, Len(xstr)-2);\n\t\t\t\t\t\tASay(\"Executed bump on \"$xstr$\".\");\n\t\t\t\t\t}\n\t\t}\t\n\t\t\n\t\tif(StoredCommand == \"frob\")\n\t\t{\n\t\t\tif (RememberString != \"\")\n\t\t\t\tforeach AllActors(class 'Actor', A)\n\t\t\t\t\tif(string(A.Tag) ~= RememberString)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(Sendtypepublic==\"player\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tA.Frob(CheckAuthPlayer, None);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tA.Frob(Self,None);\n\t\t\t\t\t\t}\n\t\t\t\t\t\txstr = xstr$string(a.Class)$\", \";\n\t\t\t\t\t}\n\n\t\t\t\t\tif(Len(xstr) == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tASay(\"Couldn't find frob target.\");\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{ //     deusex.mover, deusex.mover\n\t\t\t\t\t\tif(len(xstr) >= 75)\n\t\t\t\t\t\t\txstr = \"a large number of objects\";\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\txstr = Left(xstr, Len(xstr)-2);\n\t\t\t\t\t\tASay(\"Executed frob on \"$xstr$\".\");\n\t\t\t\t\t}\n\t\t}",
                        "locals": [
                            "local int n, i, amount, r;",
                            "local string IP;",
                            "local DeusExPlayer DXP;",
                            "local string realstr;",
                            "local bool bFoundMemo;",
                            "local bool bGotAccess;",
                            "local DeusExDecoration DXD;",
                            "local inventory inv;",
                            "local DeusExDecoration Deco;",
                            "local scriptedpawn sp;",
                            "local actor a;",
                            "local bool bFoundSmiteTarget;",
                            "local RCONManager RM;",
                            "local RCON RC;",
                            "local AthRecall AR;",
                            "local DelayCMD DCMD;",
                            "local bool bFoundOne;",
                            "local string remstr;",
                            "local string FoundMessage[6];",
                            "local string xstr;",
                            "local int ra, rb;",
                            "local irclink irl;",
                            "local string radStr;",
                            "local AthenaVision athVis;",
                            "local PollBot PB;",
                            "local string SetA, SetB;",
                            "local int cint;",
                            "local string finalauthname, aTemp;",
                            "local vector loc, line, HitLocation, hitNormal;",
                            "local bool bQD;",
                            "local bool bWasAdmin;",
                            "local string ret, addr, state, names, moreinfo;",
                            "local class<actor> aClass;",
                            "local qi q;"
                        ],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "dbg": {
                        "body": "{\n\t\n\tLog(str,'Debug');\n\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\tif(DXP.bAdmin)\n\t\t\tDXP.ClientMessage(str);\n}",
                        "locals": [
                            "local DeusExPlayer DXP;"
                        ],
                        "modifiers": [],
                        "name": "dbg",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "str"
                            ]
                        ],
                        "return": ""
                    },
                    "generateRandChar": {
                        "body": "{\n\n  for(i=0; i<max; i++)\n  {\n      UID = UID$Chr(Rand(65));\n  }\n  return UID;\n}",
                        "locals": [
                            "local int i;",
                            "local string UID;"
                        ],
                        "modifiers": [],
                        "name": "generateRandChar",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "max"
                            ]
                        ],
                        "return": "string"
                    },
                    "generateRandHex": {
                        "body": "{\n\n  for(i=0; i<7; i++)\n  {\n    if(FRand() < 0.5)\n      UID = UID$string(Rand(9));\n    else\n      UID = UID$GetHex();\n  }\n  return Left(UID, 6);\n}",
                        "locals": [
                            "local int i;",
                            "local string UID;"
                        ],
                        "modifiers": [],
                        "name": "generateRandHex",
                        "native": false,
                        "param": [],
                        "return": "string"
                    },
                    "generateRandStr": {
                        "body": "{\n\tcharz[0]=\"A\";\n\tcharz[1]=\"B\";\n\tcharz[2]=\"C\";\n\tcharz[3]=\"D\";\n\tcharz[4]=\"E\";\n\tcharz[5]=\"F\";\n\tcharz[6]=\"G\";\n\tcharz[7]=\"H\";\n\tcharz[8]=\"I\";\n\tcharz[9]=\"J\";\n\tcharz[10]=\"K\";\n\tcharz[11]=\"L\";\n\tcharz[12]=\"M\";\n\tcharz[13]=\"N\";\n\tcharz[14]=\"O\";\n\tcharz[15]=\"P\";\n\tcharz[16]=\"Q\";\n\tcharz[17]=\"R\";\n\tcharz[18]=\"S\";\n\tcharz[19]=\"T\";\n\tcharz[20]=\"U\";\n\tcharz[21]=\"V\";\n\tcharz[22]=\"W\";\n\tcharz[23]=\"X\";\n\tcharz[24]=\"Y\";\n\tcharz[25]=\"Z\";\n\n  for(i=0; i<max; i++)\n  {\n      UID = UID$charz[rand(26)];\n  }\n  return UID;\n}",
                        "locals": [
                            "local int i;",
                            "local string UID;",
                            "local string Charz[26];"
                        ],
                        "modifiers": [],
                        "name": "generateRandStr",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "max"
                            ]
                        ],
                        "return": "string"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 7649,
                "replication": "",
                "states": [],
                "variables": [
                    "var AthenaMutator AM;",
                    "var IRCLink IRC;",
                    "var SM SMMut;",
                    "var bool bCheckingAuth;",
                    "var DeusExPlayer CheckAuthPlayer;",
                    "var string AuthPlayerName;",
                    "var string StoredCommand;",
                    "var bool bPublicCommand;",
                    "var string storedrep;",
                    "var string RememberName;",
                    "var DeusExPlayer RememberPlayer;",
                    "var bool bInitBroadcast;",
                    "var bool bPassed;",
                    "var bool bHurryUp;",
                    "var string RememberString;",
                    "var int rememberint;",
                    "var string ignorename;",
                    "var deusexplayer ignoreplayer;",
                    "var scriptedpawn RememberScriptedPawn;",
                    "var bool bIRCStr;",
                    "var SDActor SDA;",
                    "var RCON RC;",
                    "var string LastCommand;",
                    "var bool bLastCommandAuth;",
                    "var string LastRemStr, LastRemName;",
                    "var deusexplayer LastRemPlayer;",
                    "var scriptedpawn LastRemSP;",
                    "var int lastremint;",
                    "var string Chatlogs[26];",
                    "var bool bGettingHelp;",
                    "var deusexplayer BMP;",
                    "var scriptedpawn myPawn;",
                    "var string Sendtypepublic;",
                    "var string Sender;",
                    "var int Peacekeeper;",
                    "var string rememberhelp;",
                    "var int killcountnpc, killcountplayer;",
                    "var string storedLines[10];",
                    "var string qstr;",
                    "var bool bCheckingWhitelist;"
                ]
            }
        },
        "AthenaVision.uc": {
            "body": "class AthenaVision extends RCONActors;\n\nvar AthenaSpectator Ath;\nvar string AthFunction;\n\nfunction Timer()\n{\nlocal Actor A;\nlocal string Foundz;\nlocal int amount;\nlocal string final;\n\n\tif(AthFunction == \"delete\")\n\t{\n\t\tforeach VisibleActors(class'Actor', a, 50)\n\t\t{\n\t\t\tif (!A.IsA('Info') && !A.IsA('Mover') && !A.IsA('AthenaVision') && !A.IsA('Effects'))\n\t\t\t{\n\t\t\t\tA.Destroy();\n\t\t\t\tFoundz = Foundz$String(A.Class)$\", \";\n\t\t\t}\n\t\t}\n\t\tif(len(foundz) > 420)\n\t\tfoundz = \"objects [...]\";\n\t\tif(Foundz != \"\")\n\t\t\tAth.ASay(\"Deleted \"$Left(Foundz, Len(Foundz)-2));\n\t\telse\n\t\t\tAth.ASay(\"Nothing found.\");\n\t}\n\n\tif(AthFunction == \"check\")\n\t{\n\t\tforeach VisibleActors(class'Actor', a, 50)\n\t\t{\n\t\t\tif (!A.IsA('Info') && !A.IsA('AthenaVision') && !A.IsA('Effects'))\n\t\t\t{\n\t\t\t\tif(A.isA('inventory'))\n\t\t\t\t{\n\t\t\t\t\tAth.ASay(\"Inventory,\"@Inventory(A).ItemName);\n\t\t\t\t\tAth.ASay(\"Class is\"@string(A.Class));\n\t\t\t\t\tamount++;\n\t\t\t\t}\n\t\t\t\tif(A.IsA('ScriptedPawn'))\n\t\t\t\t{\n\t\t\t\t\tAth.ASay(\"Scripted pawn,\"@ScriptedPawn(A).FamiliarName$ \"(Health=\"$ScriptedPawn(A).Health$\")\");\n\t\t\t\t\tAth.ASay(\"Class is \"$string(A.Class));\n\t\t\t\t\tamount++;\n\t\t\t\t}\n\t\t\t\telse if(A.IsA('PlayerPawn'))\n\t\t\t\t{\n\t\t\t\t\tAth.ASay(\"Human,\"@PlayerPawn(A).PlayerReplicationInfo.PlayerName$\" (Health: \"$PlayerPawn(A).Health$\")\");\n\t\t\t\t\t\tif(PlayerPawn(A).ReducedDamagetype == 'all')\n\t\t\t\t\t\t\tAth.ASay(\"Player is invincible.\");\n\t\t\t\t\t\tif(PlayerPawn(A).PlayerReplicationInfo.bAdmin)\n\t\t\t\t\t\t\tAth.ASay(\"Player is an administrator.\");\n\t\t\t\t\t\t\t\t\t\t\tamount++;\n\t\t\t\t}\t\n\t\t\t\telse if(A.IsA('DeusExDecoration'))\n\t\t\t\t{\n\t\t\t\t\tAth.ASay(\"Decoration,\"@DeusExDecoration(A).ItemName$\" Class is \"$string(DeusExDecoration(A).class)$\"(Hitpoints=\"$DeusExDecoration(A).HitPoints$\") [Tag=\"$string(DeusExDecoration(A).Tag)$\" : Event=\"$string(DeusExDecoration(A).Event)$\"]\");\n\t\t\t\t\t\t\tAth.ASay(\"Mass=\"@DeusExDecoration(a).Mass);\n\t\t\t\t\t\tif(DeusExDecoration(a).bExplosive)\n\t\t\t\t\t\t\tAth.ASay(\"Object is explosive.\");\n\t\t\t\t\t\t\t\t\t\t\tamount++;\n\t\t\t\t}\t\t\t\n\t\t\t\telse if(A.IsA('Mover'))\n\t\t\t\t{\n\t\t\t\t\tAth.ASay(\"Mover,\"@string(Mover(A).Class)$\" [Tag=\"$string(Mover(A).Tag)$\"]\");\n\t\t\t\t\t\t\t\t\tamount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif(amount == 0)\n\t\t\tAth.ASay(\"Nothing found or object was not recognized.\");\n\t}\n\t\n\tDestroy();\n}\n\ndefaultproperties\n{\n}\n",
            "name": "AthenaVision.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "RCONActors",
                "functions": {
                    "Timer": {
                        "body": "{\n\n\tif(AthFunction == \"delete\")\n\t{\n\t\tforeach VisibleActors(class'Actor', a, 50)\n\t\t{\n\t\t\tif (!A.IsA('Info') && !A.IsA('Mover') && !A.IsA('AthenaVision') && !A.IsA('Effects'))\n\t\t\t{\n\t\t\t\tA.Destroy();\n\t\t\t\tFoundz = Foundz$String(A.Class)$\", \";\n\t\t\t}\n\t\t}\n\t\tif(len(foundz) > 420)\n\t\tfoundz = \"objects [...]\";\n\t\tif(Foundz != \"\")\n\t\t\tAth.ASay(\"Deleted \"$Left(Foundz, Len(Foundz)-2));\n\t\telse\n\t\t\tAth.ASay(\"Nothing found.\");\n\t}\n\n\tif(AthFunction == \"check\")\n\t{\n\t\tforeach VisibleActors(class'Actor', a, 50)\n\t\t{\n\t\t\tif (!A.IsA('Info') && !A.IsA('AthenaVision') && !A.IsA('Effects'))\n\t\t\t{\n\t\t\t\tif(A.isA('inventory'))\n\t\t\t\t{\n\t\t\t\t\tAth.ASay(\"Inventory,\"@Inventory(A).ItemName);\n\t\t\t\t\tAth.ASay(\"Class is\"@string(A.Class));\n\t\t\t\t\tamount++;\n\t\t\t\t}\n\t\t\t\tif(A.IsA('ScriptedPawn'))\n\t\t\t\t{\n\t\t\t\t\tAth.ASay(\"Scripted pawn,\"@ScriptedPawn(A).FamiliarName$ \"(Health=\"$ScriptedPawn(A).Health$\")\");\n\t\t\t\t\tAth.ASay(\"Class is \"$string(A.Class));\n\t\t\t\t\tamount++;\n\t\t\t\t}\n\t\t\t\telse if(A.IsA('PlayerPawn'))\n\t\t\t\t{\n\t\t\t\t\tAth.ASay(\"Human,\"@PlayerPawn(A).PlayerReplicationInfo.PlayerName$\" (Health: \"$PlayerPawn(A).Health$\")\");\n\t\t\t\t\t\tif(PlayerPawn(A).ReducedDamagetype == 'all')\n\t\t\t\t\t\t\tAth.ASay(\"Player is invincible.\");\n\t\t\t\t\t\tif(PlayerPawn(A).PlayerReplicationInfo.bAdmin)\n\t\t\t\t\t\t\tAth.ASay(\"Player is an administrator.\");\n\t\t\t\t\t\t\t\t\t\t\tamount++;\n\t\t\t\t}\t\n\t\t\t\telse if(A.IsA('DeusExDecoration'))\n\t\t\t\t{\n\t\t\t\t\tAth.ASay(\"Decoration,\"@DeusExDecoration(A).ItemName$\" Class is \"$string(DeusExDecoration(A).class)$\"(Hitpoints=\"$DeusExDecoration(A).HitPoints$\") [Tag=\"$string(DeusExDecoration(A).Tag)$\" : Event=\"$string(DeusExDecoration(A).Event)$\"]\");\n\t\t\t\t\t\t\tAth.ASay(\"Mass=\"@DeusExDecoration(a).Mass);\n\t\t\t\t\t\tif(DeusExDecoration(a).bExplosive)\n\t\t\t\t\t\t\tAth.ASay(\"Object is explosive.\");\n\t\t\t\t\t\t\t\t\t\t\tamount++;\n\t\t\t\t}\t\t\t\n\t\t\t\telse if(A.IsA('Mover'))\n\t\t\t\t{\n\t\t\t\t\tAth.ASay(\"Mover,\"@string(Mover(A).Class)$\" [Tag=\"$string(Mover(A).Tag)$\"]\");\n\t\t\t\t\t\t\t\t\tamount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif(amount == 0)\n\t\t\tAth.ASay(\"Nothing found or object was not recognized.\");\n\t}\n\t\n\tDestroy();\n}",
                        "locals": [
                            "local Actor A;",
                            "local string Foundz;",
                            "local int amount;",
                            "local string final;"
                        ],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 84,
                "replication": "",
                "states": [],
                "variables": [
                    "var AthenaSpectator Ath;",
                    "var string AthFunction;"
                ]
            }
        },
        "AutoGameActor.uc": {
            "body": "class AutoGameActor extends RCONActors;\nvar AthenaSpectator Spect;\nvar int Ran;\n\n\nfunction Timer()\n{\nlocal DeusExPlayer DXP;\nlocal bool bFound;\n\n\tif(level.minute == 0 && Ran != level.hour)\n\t{\n\t\tRan = level.hour;\n\t\t\tforeach AllActors(class'DeusExPlayer', DXP)\n\t\t\t\tbFound=True;\n\t\t\n\t\tif(bFound)\t\t\n\t\t\tSpect.ASay(\"[AUTO] Would anyone like to play trivia?\");\n\t\t\tBroadcastMessage(\"Say .trivia followed by the number of rounds.\");\n\t\t\t\n\t\t\t\n\t}\n}\n\nfunction string GetTime()\n{\nlocal string formattedmin;\n\tif(level.minute <= 9)\n\t{\n\t\tformattedmin = \"0\"$level.minute;\n\t}\n\telse\n\t{\n\t\tformattedmin = string(level.minute);\n\t}\nreturn level.hour$\":\"$formattedmin;\n}\n\nfunction string GetTimeStr()\n{\n\tif(Level.Hour >= 5 && Level.Hour < 12)\n\t\treturn \"morning\";\n\telse if(Level.Hour >= 12 && Level.Hour < 17)\n\t\treturn \"afternoon\";\n\telse if(Level.Hour >= 17 && Level.Hour < 22)\n\t\treturn \"evening\";\n\telse \n\t\treturn \"night\";\n}\n\nfunction string GetMealStr()\n{\n\tif(Level.Hour >= 5 && Level.Hour < 11)\n\t\treturn \"breakfast\";\n\telse if(Level.Hour >= 11 && Level.Hour < 14)\n\t\treturn \"lunch\";\n\telse if(Level.Hour >= 14 && Level.Hour < 19)\n\t\treturn \"dinner\";\n\telse\n\t\treturn \"supper\";\n}\n\ndefaultproperties\n{\n     bHidden=True\n}\n",
            "name": "AutoGameActor.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bHidden=True"
                ],
                "exec": [],
                "extends": "RCONActors",
                "functions": {
                    "GetMealStr": {
                        "body": "{\n\tif(Level.Hour >= 5 && Level.Hour < 11)\n\t\treturn \"breakfast\";\n\telse if(Level.Hour >= 11 && Level.Hour < 14)\n\t\treturn \"lunch\";\n\telse if(Level.Hour >= 14 && Level.Hour < 19)\n\t\treturn \"dinner\";\n\telse\n\t\treturn \"supper\";\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetMealStr",
                        "native": false,
                        "param": [],
                        "return": "string"
                    },
                    "GetTime": {
                        "body": "{\n\tif(level.minute <= 9)\n\t{\n\t\tformattedmin = \"0\"$level.minute;\n\t}\n\telse\n\t{\n\t\tformattedmin = string(level.minute);\n\t}\nreturn level.hour$\":\"$formattedmin;\n}",
                        "locals": [
                            "local string formattedmin;"
                        ],
                        "modifiers": [],
                        "name": "GetTime",
                        "native": false,
                        "param": [],
                        "return": "string"
                    },
                    "GetTimeStr": {
                        "body": "{\n\tif(Level.Hour >= 5 && Level.Hour < 12)\n\t\treturn \"morning\";\n\telse if(Level.Hour >= 12 && Level.Hour < 17)\n\t\treturn \"afternoon\";\n\telse if(Level.Hour >= 17 && Level.Hour < 22)\n\t\treturn \"evening\";\n\telse \n\t\treturn \"night\";\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetTimeStr",
                        "native": false,
                        "param": [],
                        "return": "string"
                    },
                    "Timer": {
                        "body": "{\n\n\tif(level.minute == 0 && Ran != level.hour)\n\t{\n\t\tRan = level.hour;\n\t\t\tforeach AllActors(class'DeusExPlayer', DXP)\n\t\t\t\tbFound=True;\n\t\t\n\t\tif(bFound)\t\t\n\t\t\tSpect.ASay(\"[AUTO] Would anyone like to play trivia?\");\n\t\t\tBroadcastMessage(\"Say .trivia followed by the number of rounds.\");\n\t\t\t\n\t\t\t\n\t}\n}",
                        "locals": [
                            "local DeusExPlayer DXP;",
                            "local bool bFound;"
                        ],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 67,
                "replication": "",
                "states": [],
                "variables": [
                    "var AthenaSpectator Spect;",
                    "var int Ran;"
                ]
            }
        },
        "Blinder.uc": {
            "body": "class Blinder extends RCONActors;\n\nvar DeusExPlayer Other;\n\nfunction Timer()\n{\nOther.ClientFlash(1,Vect(20000,20000,20000));\nOther.IncreaseClientFlashLength(2.0);\n}\n\ndefaultproperties\n{\n}\n",
            "name": "Blinder.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "RCONActors",
                "functions": {
                    "Timer": {
                        "body": "{\nOther.ClientFlash(1,Vect(20000,20000,20000));\nOther.IncreaseClientFlashLength(2.0);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 14,
                "replication": "",
                "states": [],
                "variables": [
                    "var DeusExPlayer Other;"
                ]
            }
        },
        "CardSpectator.uc": {
            "body": "//=============================================================================\n// Spectator.\n//=============================================================================\nclass CardSpectator extends MessagingSpectator;\n\nvar AthenaMutator AM;\nvar int Cards[52];\nvar string CurrentGame;\nvar string rememberstring;\nvar string StoredCommand;\nvar DeusExPlayer CardPlayer;\nvar bool bStarting;\nvar int myCredits, currentBet;\nvar int rememberint;\nvar bool bHouseCantDraw, bPlayerCantDraw;\n//21 vars\nvar int tPlayerTotal;\nvar int tHouseTotal;\nvar bool bPolling;\nvar string pollgame;\n\nfunction Log2(string str)\n{\n\tLog(str, 'Cards');\n}\n\nfunction GenerateDeck()\n{\n\tLog2(\"Generated card pack.\");\n\t//Suit 1: Hearts\n\tCards[0] = 1; // A\n\tCards[1] = 2;\n\tCards[2] = 3;\n\tCards[3] = 4;\n\tCards[4] = 5;\n\tCards[5] = 6;\n\tCards[6] = 7;\n\tCards[7] = 8;\n\tCards[8] = 9;\n\tCards[9] = 10;\n\tCards[10] = 10; // J\n\tCards[11] = 10; // Q\n\tCards[12] = 10; // K\n\t\n\t//Suit 2: Clubs\n\tCards[13] = 1; // A\n\tCards[14] = 2;\n\tCards[15] = 3;\n\tCards[16] = 4;\n\tCards[17] = 5;\n\tCards[18] = 6;\n\tCards[19] = 7;\n\tCards[20] = 8;\n\tCards[21] = 9;\n\tCards[22] = 10;\n\tCards[23] = 10; // J\n\tCards[24] = 10; // Q\n\tCards[25] = 10; // K\n\t\n\t//Suit 3: Spades\n\tCards[26] = 1; // A\n\tCards[27] = 2;\n\tCards[28] = 3;\n\tCards[29] = 4;\n\tCards[30] = 5;\n\tCards[31] = 6;\n\tCards[32] = 7;\n\tCards[33] = 8;\n\tCards[34] = 9;\n\tCards[35] = 10;\n\tCards[36] = 10; // J\n\tCards[37] = 10; // Q\n\tCards[38] = 10; // K\n\t\n\t//Suit 4: Clubs\n\tCards[39] = 1; // A\n\tCards[40] = 2;\n\tCards[41] = 3;\n\tCards[42] = 4;\n\tCards[43] = 5;\n\tCards[44] = 6;\n\tCards[45] = 7;\n\tCards[46] = 8;\n\tCards[47] = 9;\n\tCards[48] = 10;\n\tCards[49] = 10; // J\n\tCards[50] = 10; // Q\n\tCards[51] = 10; // K\n}\n\nfunction int DrawCard()\n{\nlocal int n, r, myDraw;\n\tmyDraw = 0;\n\twhile(myDraw == 0)\n\t{\n\t\tr = Rand(52);\n\t\tmyDraw = Cards[r];\n\t\t\t\tLog2(\"Player drew\"@myDraw@\". (\"$Cards[r]$\")\");\n\t\t\t\t//ASay(\"Player drew a\"@myDraw$\".\");\n\t\t\t\tCards[myDraw] = 0;\n\t}\n\t\n\tif(myDraw != 0)\n\t\treturn myDraw;\n}\n\nfunction ASay(string str)\n{\nlocal DeusExPlayer DXP;\n\tif(AM.bMuted)\n\t\treturn;\n\t\t\n\tBroadcastMessage(\"|c\"$AM.ChatColour$\"~ Trickster:\"@str);\n\t\n\tforeach AllActors(class'DeusExPlayer',DXP)\n\t{\n\t\tDXP.PlaySound(sound'DatalinkStart', SLOT_None,,, 256);\n\t}\n\tAM.AddChatlog(\"|c\"$AM.ChatColour$\"~ Trickster:\"@str);\n\tLog(str,'Trickster');\n}\n\nfunction ASayPrivate(deusexplayer dxp, string str, optional bool bBuzzah)\n{\n\tif(bBuzzah)\n\tdxp.ClientMessage(\"|c\"$AM.ChatColour$\"# Trickster:\"@str,'Teamsay');\n\telse\n\tdxp.ClientMessage(\"|c\"$AM.ChatColour$\"# Trickster:\"@str);\n\t\n\tLog(\"[PRIVATE: \"$DXP.PlayerReplicationInfo.PlayerName$\"] \"$str,'Trickster');\n}\n\nfunction AStatus(string str)\n{\n\tif(str == \"\")\n\tSelf.PlayerReplicationInfo.PlayerName = \"|C\"$AM.ChatColour$\"Trickster\";\n\telse\n\tSelf.PlayerReplicationInfo.PlayerName = \"|c\"$AM.ChatColour$\"Trickster [\"$str$\"]\";\n}\n\nfunction string generateRandHex()\n{\n  local int i;\n  local string UID;\n\n  for(i=0; i<7; i++)\n  {\n    if(FRand() < 0.5)\n      UID = UID$string(Rand(9));\n    else\n      UID = UID$GetHex();\n  }\n  return Left(UID, 6);\n}\n\nfunction string GetHex()\n{\nlocal int i;\n\tif(FRand() < 0.2)\n\t\treturn \"a\";\n\telse if(FRand() >= 0.2 && FRand() < 0.4)\n\t\treturn \"b\";\n\telse if(FRand() >= 0.4 && FRand() < 0.6)\n\t\treturn \"c\";\n\telse if(FRand() >= 0.6 && FRand() < 0.8)\n\t\treturn \"d\";\n\telse if(FRand() >= 0.8)\n\t\treturn \"f\";\n}\n\nfunction string generateRandStr(int max)\n{\n  local int i;\n  local string UID;\n\tlocal string Charz[26];\n\tcharz[0]=\"A\";\n\tcharz[1]=\"B\";\n\tcharz[2]=\"C\";\n\tcharz[3]=\"D\";\n\tcharz[4]=\"E\";\n\tcharz[5]=\"F\";\n\tcharz[6]=\"G\";\n\tcharz[7]=\"H\";\n\tcharz[8]=\"I\";\n\tcharz[9]=\"J\";\n\tcharz[10]=\"K\";\n\tcharz[11]=\"L\";\n\tcharz[12]=\"M\";\n\tcharz[13]=\"N\";\n\tcharz[14]=\"O\";\n\tcharz[15]=\"P\";\n\tcharz[16]=\"Q\";\n\tcharz[17]=\"R\";\n\tcharz[18]=\"S\";\n\tcharz[19]=\"T\";\n\tcharz[20]=\"U\";\n\tcharz[21]=\"V\";\n\tcharz[22]=\"W\";\n\tcharz[23]=\"X\";\n\tcharz[24]=\"Y\";\n\tcharz[25]=\"Z\";\n\n  for(i=0; i<max; i++)\n  {\n      UID = UID$charz[rand(26)];\n  }\n  return UID;\n}\n\nfunction string generateRandChar(int max)\n{\n  local int i;\n  local string UID;\n\n  for(i=0; i<max; i++)\n  {\n      UID = UID$Chr(Rand(65));\n  }\n  return UID;\n}\n\nfunction Killme()\n{\n\tlocal AthenaMutator AM;\n\tforeach Allactors(class'AthenaMutator', AM)\n\t{\n\t\tAM.Killphrase = generateRandStr(4);\n\t\tAM.card = None;\n\t\tDestroy();\n\t\tBroadcastMessage(\"Athena killed by killphrase.\");\n\t}\n}\n\nfunction StartGameVote(string ginput)\n{\n\n}\n\nfunction ClientMessage(coerce string S, optional name Type, optional bool bBeep)\n{\nlocal int j, i, n;\nlocal string output, ip;\nlocal string line, savename;\nlocal DeusExPlayer DXP;\nlocal string ignorename, sender;\nlocal deusexplayer senderplayer;\nlocal string astr;\n\t\t\n\tif(instr(caps(S), caps(\"[\"$AM.Killphrase$\"]\")) != -1)\n\t\tKillme();\n\tif(bStarting && storedcommand == \"\")\n\t\treturn;\n\t\t\n\tif(Type == 'Say')\n\t{\n\t\tif(instr(caps(S), caps(\"): \")) != -1)\n\t\t{\n\t\t\tLine = Right(s, Len(s)-instr(s,\"): \")-Len(\"): \"));\n\t\t\tLine = AM.RCR(Line);\n\t\t\tLine = AM.RCR2(Line);\n\t\t\tSender = Left(s, InStr(s,\"(\"));\n\t\t}\n\t\t//Start ignore check\n\t\t\tsender = Left(s, InStr(s,\"(\"));\n\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == sender)\n\t\t\t\t\t\t\tsenderplayer = DXP;\n\t\t\t\t\t\t\t\n\t\t\tIP = senderplayer.GetPlayerNetworkAddress();\n\t\t\tIP = Left(IP, InStr(IP, \":\"));\n\n\t\t\t\tfor (n=0;n<20;n++)\n\t\t\t\t\t\tif(IP == AM.IgnoreIP[n])\n\t\t\t\t\t\t\treturn;\n\t\n\t\tif(Left(Line,4) ~= \"bet \" && CurrentGame == \"\")\n\t\t{\n\t\t\trememberint = int(Right(Line, Len(Line)-4));\n\t\t\tif(Senderplayer.Credits >= rememberint)\n\t\t\t{\n\t\t\tASay(\"Bet taken.\");\n\t\t\tsenderplayer.Credits -= rememberint;\n\t\t\tCurrentBet += rememberint;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\tASay(\"Player can't afford to bet that much.\");\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(Line ~= \"hit me\" && CurrentGame == \"21\" && SenderPlayer == CardPlayer)\n\t\t{\n\t\t\tif(bPlayerCantDraw)\n\t\t\t{\n\t\t\t\tASay(\"Player can't draw now. (Cards over or is 21)\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(FRand() < 0.5 && tHouseTotal >= 12)\n\t\t\t\t{\n\t\t\t\t\tASay(\"House stands. Final total is\"@tHouseTotal$\".\");\n\t\t\t\t\tbHouseCantDraw=True;\n\t\t\t\t}\n\n\t\t\t\tn = DrawCard();\n\t\t\t\ttPlayerTotal += n;\n\t\t\t\tASay(\"Player One draws\"@n@\"(Current total\"@tPlayerTotal$\")\");\t\t\n\t\t\t\t\t\n\t\t\t\t\tif(!bHouseCantDraw)\n\t\t\t\t\t{\n\t\t\t\t\t\tj = DrawCard();\n\t\t\t\t\t\ttHouseTotal += j;\n\t\t\t\t\t\tASay(\"House draws \"$j);\n\t\t\t\t\t}\n\n\n\t\t\t\t\tif(tPlayerTotal >= 21)\n\t\t\t\t\t\tbPlayerCantDraw=True;\n\t\t\t\t\t\n\t\t\t\t\tif(tHouseTotal >= 21)\n\t\t\t\t\t\tbPlayerCantDraw=True;\n\t\t\t\t\t\n\t\t\t\tAStatus(\"Checking totals...\");\n\t\t\t\tstoredcommand=\"check\";\n\t\t\t\tSetTimer(1,False);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tif(Line ~= \"stand\" && CurrentGame == \"21\" && SenderPlayer == CardPlayer)\n\t\t{\n\t\t\tif(FRand() < 0.5 && tHouseTotal >= 12)\n\t\t\t{\n\t\t\t\tASay(\"House stands. Final total is\"@tHouseTotal$\".\");\n\t\t\t\tbHouseCantDraw=True;\n\t\t\t}\n\t\t\t\t\t\t\n\t\t\tbPlayerCantDraw=True;\n\t\t\tj = DrawCard();\n\n\t\t\t\tif(!bHouseCantDraw)\n\t\t\t\t{\n\t\t\t\t\ttHouseTotal += j;\n\t\t\t\t\tASay(\"House draws \"$j);\n\t\t\t\t}\n\n\t\t\t\tif(tHouseTotal >= 21)\n\t\t\t\t\tbHouseCantDraw=True;\n\t\t\t\t\n\t\t\tAStatus(\"Checking totals...\");\n\t\t\tstoredcommand=\"check\";\n\t\t\tSetTimer(1,False);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tif(Left(Line,17) ~= \"trickster, start \" && CurrentGame == \"\")\n\t\t{\n\t\t\trememberstring = Right(Line, Len(Line)-17);\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbStarting=True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tCardPlayer=senderplayer;\n\t\t\t\tStoredCommand = \"startgame\";\n\t\t}\n\t\t\n\t\tif(Line ~= \"trickster, shut down\")\n\t\t{\n\t\t\tKillMe();\n\t\t\treturn;\n\t\t}\n\n\t}//End if(type)\n}\n\t\nfunction Timer()\n{\nlocal int h, hh, p, ph, n, j;\nlocal bool bPB, bHB;\n\n\tif(storedcommand == \"bj1endgame\")\n\t{\n\t\tif(tPlayerTotal == 21)\n\t\t\tASay(\"Player One total is 21!\");\n\t\telse if(tPlayerTotal > 21)\n\t\t{\n\t\t\tbPB=True;\n\t\t\tASay(\"Player One is bust!\");\n\t\t}\n\t\t\t\n\t\tif(tHouseTotal == 21)\n\t\t\tASay(\"House total is 21!\");\n\t\telse if(tHouseTotal > 21)\n\t\t{\n\t\t\tbHB=True;\n\t\t\tASay(\"House is bust!\");\n\t\t}\n\t\t\n\t\tif(tHouseTotal == 21 || tPlayerTotal == 21)\n\t\t{\n\t\t\tASay(\"Draw! Credits returned.\");\n\t\t\tCardPlayer.Credits += currentBet;\n\t\t\tCurrentBet = 0;\n\t\t}\n\t\telse if(tHouseTotal <= 21 && bPB)\n\t\t{\n\t\t\tASay(\"House wins.\");\n\t\t\tmyCredits += currentBet*2;\n\t\t\tcurrentBet = 0;\n\t\t}\n\t\telse if(tPlayerTotal <= 21 && bHB)\n\t\t{\n\t\t\tASay(\"Player wins.\");\n\t\t\tCardPlayer.Credits += currentBet*2;\n\t\t\tcurrentBet = 0;\n\t\t}\n\t\telse if(tPlayerTotal <= tHouseTotal && !bHB && !bPB)\n\t\t{\n\t\t\tASay(\"House wins.\");\n\t\t\tmyCredits += currentBet*2;\n\t\t\tcurrentBet = 0;\t\t\t\n\t\t}\n\t\telse if(tPlayerTotal >= tHouseTotal && !bHB && !bPB)\t\n\t\t{\n\t\t\tASay(\"Player wins.\");\n\t\t\tCardPlayer.Credits += currentBet*2;\n\t\t\tcurrentBet = 0;\t\t\n\t\t}\n\t\telse if(tPlayerTotal == tHouseTotal)\t\n\t\t{\n\t\t\tASay(\"Draw! Credits returned.\");\n\t\t\tCardPlayer.Credits += currentBet;\n\t\t\tCurrentBet = 0;\n\t\t}\n\t\t\n\t\tStoredcommand=\"\";\n\t\tCardplayer=None;\n\t\tCurrentGame=\"\";\n\t\tAStatus(\"\");\n\t}\n\tif(Currentgame == \"21\" && Storedcommand == \"bj1drawinitcards\")\n\t{\n\t\tStoredCommand = \"\";\n\t\tp = drawcard();\n\t\tph = drawcard();\n\t\th = drawcard();\n\t\thh = drawcard();\n\t\ttPlayerTotal += p;\n\t\ttPlayerTotal += ph;\n\t\ttHouseTotal += h;\n\t\ttHouseTotal += hh;\n\t\tLog(\"Player draws: \"$p$\" and \"$ph);\n\t\tLog(\"House draws: \"$h$\" and \"$hh);\n\t\tASay(\"House draws \"$h$\" and a hidden hole card.\");\n\t\tASay(\"Player One draws\"@p@\"and\"@ph$\" (Current total\"@tPlayerTotal$\")\");\n\t\tAStatus(\"\");\n\t}\n\t\n\tif(Currentgame == \"21\" && storedcommand == \"check\")\n\t{\n\t\tif(bPlayerCantDraw && bHouseCantDraw)\n\t\t{\n\t\t\tstoredcommand=\"bj1endgame\";\n\t\t\tASay(\"Game over, noone can draw.\");\n\t\t\tAStatus(\"Checking totals...\");\n\t\t\tSetTimer(1,False);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tASay(\"Hit or stand?\");\n\t\t\tAStatus(\"Waiting for response...\");\n\t\t\tstoredcommand = \"\";\n\t\t}\n\t}\t\n\n\tif(storedcommand == \"startgame\")\n\t{\n\t\t\tif(currentBet == 0)\n\t\t\t{\n\t\t\t\tAStatus(\"\");\n\t\t\t\tASay(\"A bet is needed.\");\n\t\t\t\tstoredcommand=\"\";\n\t\t\t\trememberstring=\"\";\n\t\t\t\tbStarting=False;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\tif(rememberstring == \"21\" || rememberstring == \"twenty-one\" || rememberstring == \"twenty one\"  || rememberstring == \"blackjack\")\n\t\t{\n\t\t\tASay(\"Beginning Blackjack (21)\");\n\t\t\tRememberstring=\"\";\n\t\t\tStoredCommand=\"bj1drawinitcards\";\n\t\t\tGenerateDeck();\n\t\t\tbHouseCantDraw=False;\n\t\t\tbPlayerCantDraw=False;\n\t\t\ttPlayerTotal=0;\n\t\t\ttHouseTotal=0;\n\t\t\tbStarting=False;\n\t\t\tCurrentGame = \"21\";\n\t\t\tAStatus(\"Launching Blackjack...\");\n\t\t\tSetTimer(1,false);\n\t\t}\n\t\telse if(rememberstring == \"poker\" || rememberstring == \"highlow\")\n\t\t{\n\t\t\tASay(\"This game is not yet implemented.\");\n\t\t\tAStatus(\"\");\n\t\t\tbStarting=False;\n\t\t\tCardPlayer = None;\n\t\t}\n\t}\n}\n\ndefaultproperties\n{\n}\n",
            "name": "CardSpectator.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "MessagingSpectator",
                "functions": {
                    "ASay": {
                        "body": "{\n\tif(AM.bMuted)\n\t\treturn;\n\t\t\n\tBroadcastMessage(\"|c\"$AM.ChatColour$\"~ Trickster:\"@str);\n\t\n\tforeach AllActors(class'DeusExPlayer',DXP)\n\t{\n\t\tDXP.PlaySound(sound'DatalinkStart', SLOT_None,,, 256);\n\t}\n\tAM.AddChatlog(\"|c\"$AM.ChatColour$\"~ Trickster:\"@str);\n\tLog(str,'Trickster');\n}",
                        "locals": [
                            "local DeusExPlayer DXP;"
                        ],
                        "modifiers": [],
                        "name": "ASay",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "str"
                            ]
                        ],
                        "return": ""
                    },
                    "ASayPrivate": {
                        "body": "{\n\tif(bBuzzah)\n\tdxp.ClientMessage(\"|c\"$AM.ChatColour$\"# Trickster:\"@str,'Teamsay');\n\telse\n\tdxp.ClientMessage(\"|c\"$AM.ChatColour$\"# Trickster:\"@str);\n\t\n\tLog(\"[PRIVATE: \"$DXP.PlayerReplicationInfo.PlayerName$\"] \"$str,'Trickster');\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "ASayPrivate",
                        "native": false,
                        "param": [
                            [
                                "deusexplayer",
                                "dxp"
                            ],
                            [
                                "string",
                                "str"
                            ],
                            [
                                "optional",
                                "bool",
                                "bBuzzah"
                            ]
                        ],
                        "return": ""
                    },
                    "AStatus": {
                        "body": "{\n\tif(str == \"\")\n\tSelf.PlayerReplicationInfo.PlayerName = \"|C\"$AM.ChatColour$\"Trickster\";\n\telse\n\tSelf.PlayerReplicationInfo.PlayerName = \"|c\"$AM.ChatColour$\"Trickster [\"$str$\"]\";\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "AStatus",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "str"
                            ]
                        ],
                        "return": ""
                    },
                    "ClientMessage": {
                        "body": "{\n\t\t\n\tif(instr(caps(S), caps(\"[\"$AM.Killphrase$\"]\")) != -1)\n\t\tKillme();\n\tif(bStarting && storedcommand == \"\")\n\t\treturn;\n\t\t\n\tif(Type == 'Say')\n\t{\n\t\tif(instr(caps(S), caps(\"): \")) != -1)\n\t\t{\n\t\t\tLine = Right(s, Len(s)-instr(s,\"): \")-Len(\"): \"));\n\t\t\tLine = AM.RCR(Line);\n\t\t\tLine = AM.RCR2(Line);\n\t\t\tSender = Left(s, InStr(s,\"(\"));\n\t\t}\n\t\t//Start ignore check\n\t\t\tsender = Left(s, InStr(s,\"(\"));\n\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == sender)\n\t\t\t\t\t\t\tsenderplayer = DXP;\n\t\t\t\t\t\t\t\n\t\t\tIP = senderplayer.GetPlayerNetworkAddress();\n\t\t\tIP = Left(IP, InStr(IP, \":\"));\n\n\t\t\t\tfor (n=0;n<20;n++)\n\t\t\t\t\t\tif(IP == AM.IgnoreIP[n])\n\t\t\t\t\t\t\treturn;\n\t\n\t\tif(Left(Line,4) ~= \"bet \" && CurrentGame == \"\")\n\t\t{\n\t\t\trememberint = int(Right(Line, Len(Line)-4));\n\t\t\tif(Senderplayer.Credits >= rememberint)\n\t\t\t{\n\t\t\tASay(\"Bet taken.\");\n\t\t\tsenderplayer.Credits -= rememberint;\n\t\t\tCurrentBet += rememberint;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\tASay(\"Player can't afford to bet that much.\");\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(Line ~= \"hit me\" && CurrentGame == \"21\" && SenderPlayer == CardPlayer)\n\t\t{\n\t\t\tif(bPlayerCantDraw)\n\t\t\t{\n\t\t\t\tASay(\"Player can't draw now. (Cards over or is 21)\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(FRand() < 0.5 && tHouseTotal >= 12)\n\t\t\t\t{\n\t\t\t\t\tASay(\"House stands. Final total is\"@tHouseTotal$\".\");\n\t\t\t\t\tbHouseCantDraw=True;\n\t\t\t\t}\n\n\t\t\t\tn = DrawCard();\n\t\t\t\ttPlayerTotal += n;\n\t\t\t\tASay(\"Player One draws\"@n@\"(Current total\"@tPlayerTotal$\")\");\t\t\n\t\t\t\t\t\n\t\t\t\t\tif(!bHouseCantDraw)\n\t\t\t\t\t{\n\t\t\t\t\t\tj = DrawCard();\n\t\t\t\t\t\ttHouseTotal += j;\n\t\t\t\t\t\tASay(\"House draws \"$j);\n\t\t\t\t\t}\n\n\n\t\t\t\t\tif(tPlayerTotal >= 21)\n\t\t\t\t\t\tbPlayerCantDraw=True;\n\t\t\t\t\t\n\t\t\t\t\tif(tHouseTotal >= 21)\n\t\t\t\t\t\tbPlayerCantDraw=True;\n\t\t\t\t\t\n\t\t\t\tAStatus(\"Checking totals...\");\n\t\t\t\tstoredcommand=\"check\";\n\t\t\t\tSetTimer(1,False);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tif(Line ~= \"stand\" && CurrentGame == \"21\" && SenderPlayer == CardPlayer)\n\t\t{\n\t\t\tif(FRand() < 0.5 && tHouseTotal >= 12)\n\t\t\t{\n\t\t\t\tASay(\"House stands. Final total is\"@tHouseTotal$\".\");\n\t\t\t\tbHouseCantDraw=True;\n\t\t\t}\n\t\t\t\t\t\t\n\t\t\tbPlayerCantDraw=True;\n\t\t\tj = DrawCard();\n\n\t\t\t\tif(!bHouseCantDraw)\n\t\t\t\t{\n\t\t\t\t\ttHouseTotal += j;\n\t\t\t\t\tASay(\"House draws \"$j);\n\t\t\t\t}\n\n\t\t\t\tif(tHouseTotal >= 21)\n\t\t\t\t\tbHouseCantDraw=True;\n\t\t\t\t\n\t\t\tAStatus(\"Checking totals...\");\n\t\t\tstoredcommand=\"check\";\n\t\t\tSetTimer(1,False);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tif(Left(Line,17) ~= \"trickster, start \" && CurrentGame == \"\")\n\t\t{\n\t\t\trememberstring = Right(Line, Len(Line)-17);\n\t\t\t\tSetTimer(1,False);\n\t\t\t\tbStarting=True;\n\t\t\t\tAStatus(\"Thinking...\");\n\t\t\t\tCardPlayer=senderplayer;\n\t\t\t\tStoredCommand = \"startgame\";\n\t\t}\n\t\t\n\t\tif(Line ~= \"trickster, shut down\")\n\t\t{\n\t\t\tKillMe();\n\t\t\treturn;\n\t\t}\n\n\t}//End if(type)\n}",
                        "locals": [
                            "local int j, i, n;",
                            "local string output, ip;",
                            "local string line, savename;",
                            "local DeusExPlayer DXP;",
                            "local string ignorename, sender;",
                            "local deusexplayer senderplayer;",
                            "local string astr;"
                        ],
                        "modifiers": [],
                        "name": "ClientMessage",
                        "native": false,
                        "param": [
                            [
                                "coerce",
                                "string",
                                "S"
                            ],
                            [
                                "optional",
                                "name",
                                "Type"
                            ],
                            [
                                "optional",
                                "bool",
                                "bBeep"
                            ]
                        ],
                        "return": ""
                    },
                    "DrawCard": {
                        "body": "{\n\tmyDraw = 0;\n\twhile(myDraw == 0)\n\t{\n\t\tr = Rand(52);\n\t\tmyDraw = Cards[r];\n\t\t\t\tLog2(\"Player drew\"@myDraw@\". (\"$Cards[r]$\")\");\n\t\t\t\t//ASay(\"Player drew a\"@myDraw$\".\");\n\t\t\t\tCards[myDraw] = 0;\n\t}\n\t\n\tif(myDraw != 0)\n\t\treturn myDraw;\n}",
                        "locals": [
                            "local int n, r, myDraw;"
                        ],
                        "modifiers": [],
                        "name": "DrawCard",
                        "native": false,
                        "param": [],
                        "return": "int"
                    },
                    "GenerateDeck": {
                        "body": "{\n\tLog2(\"Generated card pack.\");\n\t//Suit 1: Hearts\n\tCards[0] = 1; // A\n\tCards[1] = 2;\n\tCards[2] = 3;\n\tCards[3] = 4;\n\tCards[4] = 5;\n\tCards[5] = 6;\n\tCards[6] = 7;\n\tCards[7] = 8;\n\tCards[8] = 9;\n\tCards[9] = 10;\n\tCards[10] = 10; // J\n\tCards[11] = 10; // Q\n\tCards[12] = 10; // K\n\t\n\t//Suit 2: Clubs\n\tCards[13] = 1; // A\n\tCards[14] = 2;\n\tCards[15] = 3;\n\tCards[16] = 4;\n\tCards[17] = 5;\n\tCards[18] = 6;\n\tCards[19] = 7;\n\tCards[20] = 8;\n\tCards[21] = 9;\n\tCards[22] = 10;\n\tCards[23] = 10; // J\n\tCards[24] = 10; // Q\n\tCards[25] = 10; // K\n\t\n\t//Suit 3: Spades\n\tCards[26] = 1; // A\n\tCards[27] = 2;\n\tCards[28] = 3;\n\tCards[29] = 4;\n\tCards[30] = 5;\n\tCards[31] = 6;\n\tCards[32] = 7;\n\tCards[33] = 8;\n\tCards[34] = 9;\n\tCards[35] = 10;\n\tCards[36] = 10; // J\n\tCards[37] = 10; // Q\n\tCards[38] = 10; // K\n\t\n\t//Suit 4: Clubs\n\tCards[39] = 1; // A\n\tCards[40] = 2;\n\tCards[41] = 3;\n\tCards[42] = 4;\n\tCards[43] = 5;\n\tCards[44] = 6;\n\tCards[45] = 7;\n\tCards[46] = 8;\n\tCards[47] = 9;\n\tCards[48] = 10;\n\tCards[49] = 10; // J\n\tCards[50] = 10; // Q\n\tCards[51] = 10; // K\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "GenerateDeck",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "GetHex": {
                        "body": "{\n\tif(FRand() < 0.2)\n\t\treturn \"a\";\n\telse if(FRand() >= 0.2 && FRand() < 0.4)\n\t\treturn \"b\";\n\telse if(FRand() >= 0.4 && FRand() < 0.6)\n\t\treturn \"c\";\n\telse if(FRand() >= 0.6 && FRand() < 0.8)\n\t\treturn \"d\";\n\telse if(FRand() >= 0.8)\n\t\treturn \"f\";\n}",
                        "locals": [
                            "local int i;"
                        ],
                        "modifiers": [],
                        "name": "GetHex",
                        "native": false,
                        "param": [],
                        "return": "string"
                    },
                    "Killme": {
                        "body": "{\n\tforeach Allactors(class'AthenaMutator', AM)\n\t{\n\t\tAM.Killphrase = generateRandStr(4);\n\t\tAM.card = None;\n\t\tDestroy();\n\t\tBroadcastMessage(\"Athena killed by killphrase.\");\n\t}\n}",
                        "locals": [
                            "local AthenaMutator AM;"
                        ],
                        "modifiers": [],
                        "name": "Killme",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Log2": {
                        "body": "{\n\tLog(str, 'Cards');\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Log2",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "str"
                            ]
                        ],
                        "return": ""
                    },
                    "StartGameVote": {
                        "body": "{\n\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "StartGameVote",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "ginput"
                            ]
                        ],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\n\tif(storedcommand == \"bj1endgame\")\n\t{\n\t\tif(tPlayerTotal == 21)\n\t\t\tASay(\"Player One total is 21!\");\n\t\telse if(tPlayerTotal > 21)\n\t\t{\n\t\t\tbPB=True;\n\t\t\tASay(\"Player One is bust!\");\n\t\t}\n\t\t\t\n\t\tif(tHouseTotal == 21)\n\t\t\tASay(\"House total is 21!\");\n\t\telse if(tHouseTotal > 21)\n\t\t{\n\t\t\tbHB=True;\n\t\t\tASay(\"House is bust!\");\n\t\t}\n\t\t\n\t\tif(tHouseTotal == 21 || tPlayerTotal == 21)\n\t\t{\n\t\t\tASay(\"Draw! Credits returned.\");\n\t\t\tCardPlayer.Credits += currentBet;\n\t\t\tCurrentBet = 0;\n\t\t}\n\t\telse if(tHouseTotal <= 21 && bPB)\n\t\t{\n\t\t\tASay(\"House wins.\");\n\t\t\tmyCredits += currentBet*2;\n\t\t\tcurrentBet = 0;\n\t\t}\n\t\telse if(tPlayerTotal <= 21 && bHB)\n\t\t{\n\t\t\tASay(\"Player wins.\");\n\t\t\tCardPlayer.Credits += currentBet*2;\n\t\t\tcurrentBet = 0;\n\t\t}\n\t\telse if(tPlayerTotal <= tHouseTotal && !bHB && !bPB)\n\t\t{\n\t\t\tASay(\"House wins.\");\n\t\t\tmyCredits += currentBet*2;\n\t\t\tcurrentBet = 0;\t\t\t\n\t\t}\n\t\telse if(tPlayerTotal >= tHouseTotal && !bHB && !bPB)\t\n\t\t{\n\t\t\tASay(\"Player wins.\");\n\t\t\tCardPlayer.Credits += currentBet*2;\n\t\t\tcurrentBet = 0;\t\t\n\t\t}\n\t\telse if(tPlayerTotal == tHouseTotal)\t\n\t\t{\n\t\t\tASay(\"Draw! Credits returned.\");\n\t\t\tCardPlayer.Credits += currentBet;\n\t\t\tCurrentBet = 0;\n\t\t}\n\t\t\n\t\tStoredcommand=\"\";\n\t\tCardplayer=None;\n\t\tCurrentGame=\"\";\n\t\tAStatus(\"\");\n\t}\n\tif(Currentgame == \"21\" && Storedcommand == \"bj1drawinitcards\")\n\t{\n\t\tStoredCommand = \"\";\n\t\tp = drawcard();\n\t\tph = drawcard();\n\t\th = drawcard();\n\t\thh = drawcard();\n\t\ttPlayerTotal += p;\n\t\ttPlayerTotal += ph;\n\t\ttHouseTotal += h;\n\t\ttHouseTotal += hh;\n\t\tLog(\"Player draws: \"$p$\" and \"$ph);\n\t\tLog(\"House draws: \"$h$\" and \"$hh);\n\t\tASay(\"House draws \"$h$\" and a hidden hole card.\");\n\t\tASay(\"Player One draws\"@p@\"and\"@ph$\" (Current total\"@tPlayerTotal$\")\");\n\t\tAStatus(\"\");\n\t}\n\t\n\tif(Currentgame == \"21\" && storedcommand == \"check\")\n\t{\n\t\tif(bPlayerCantDraw && bHouseCantDraw)\n\t\t{\n\t\t\tstoredcommand=\"bj1endgame\";\n\t\t\tASay(\"Game over, noone can draw.\");\n\t\t\tAStatus(\"Checking totals...\");\n\t\t\tSetTimer(1,False);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tASay(\"Hit or stand?\");\n\t\t\tAStatus(\"Waiting for response...\");\n\t\t\tstoredcommand = \"\";\n\t\t}\n\t}\t\n\n\tif(storedcommand == \"startgame\")\n\t{\n\t\t\tif(currentBet == 0)\n\t\t\t{\n\t\t\t\tAStatus(\"\");\n\t\t\t\tASay(\"A bet is needed.\");\n\t\t\t\tstoredcommand=\"\";\n\t\t\t\trememberstring=\"\";\n\t\t\t\tbStarting=False;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\tif(rememberstring == \"21\" || rememberstring == \"twenty-one\" || rememberstring == \"twenty one\"  || rememberstring == \"blackjack\")\n\t\t{\n\t\t\tASay(\"Beginning Blackjack (21)\");\n\t\t\tRememberstring=\"\";\n\t\t\tStoredCommand=\"bj1drawinitcards\";\n\t\t\tGenerateDeck();\n\t\t\tbHouseCantDraw=False;\n\t\t\tbPlayerCantDraw=False;\n\t\t\ttPlayerTotal=0;\n\t\t\ttHouseTotal=0;\n\t\t\tbStarting=False;\n\t\t\tCurrentGame = \"21\";\n\t\t\tAStatus(\"Launching Blackjack...\");\n\t\t\tSetTimer(1,false);\n\t\t}\n\t\telse if(rememberstring == \"poker\" || rememberstring == \"highlow\")\n\t\t{\n\t\t\tASay(\"This game is not yet implemented.\");\n\t\t\tAStatus(\"\");\n\t\t\tbStarting=False;\n\t\t\tCardPlayer = None;\n\t\t}\n\t}\n}",
                        "locals": [
                            "local int h, hh, p, ph, n, j;",
                            "local bool bPB, bHB;"
                        ],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "generateRandChar": {
                        "body": "{\n\n  for(i=0; i<max; i++)\n  {\n      UID = UID$Chr(Rand(65));\n  }\n  return UID;\n}",
                        "locals": [
                            "local int i;",
                            "local string UID;"
                        ],
                        "modifiers": [],
                        "name": "generateRandChar",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "max"
                            ]
                        ],
                        "return": "string"
                    },
                    "generateRandHex": {
                        "body": "{\n\n  for(i=0; i<7; i++)\n  {\n    if(FRand() < 0.5)\n      UID = UID$string(Rand(9));\n    else\n      UID = UID$GetHex();\n  }\n  return Left(UID, 6);\n}",
                        "locals": [
                            "local int i;",
                            "local string UID;"
                        ],
                        "modifiers": [],
                        "name": "generateRandHex",
                        "native": false,
                        "param": [],
                        "return": "string"
                    },
                    "generateRandStr": {
                        "body": "{\n\tcharz[0]=\"A\";\n\tcharz[1]=\"B\";\n\tcharz[2]=\"C\";\n\tcharz[3]=\"D\";\n\tcharz[4]=\"E\";\n\tcharz[5]=\"F\";\n\tcharz[6]=\"G\";\n\tcharz[7]=\"H\";\n\tcharz[8]=\"I\";\n\tcharz[9]=\"J\";\n\tcharz[10]=\"K\";\n\tcharz[11]=\"L\";\n\tcharz[12]=\"M\";\n\tcharz[13]=\"N\";\n\tcharz[14]=\"O\";\n\tcharz[15]=\"P\";\n\tcharz[16]=\"Q\";\n\tcharz[17]=\"R\";\n\tcharz[18]=\"S\";\n\tcharz[19]=\"T\";\n\tcharz[20]=\"U\";\n\tcharz[21]=\"V\";\n\tcharz[22]=\"W\";\n\tcharz[23]=\"X\";\n\tcharz[24]=\"Y\";\n\tcharz[25]=\"Z\";\n\n  for(i=0; i<max; i++)\n  {\n      UID = UID$charz[rand(26)];\n  }\n  return UID;\n}",
                        "locals": [
                            "local int i;",
                            "local string UID;",
                            "local string Charz[26];"
                        ],
                        "modifiers": [],
                        "name": "generateRandStr",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "max"
                            ]
                        ],
                        "return": "string"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 516,
                "replication": "",
                "states": [],
                "variables": [
                    "var AthenaMutator AM;",
                    "var int Cards[52];",
                    "var string CurrentGame;",
                    "var string rememberstring;",
                    "var string StoredCommand;",
                    "var DeusExPlayer CardPlayer;",
                    "var bool bStarting;",
                    "var int myCredits, currentBet;",
                    "var int rememberint;",
                    "var bool bHouseCantDraw, bPlayerCantDraw;",
                    "var int tPlayerTotal;",
                    "var int tHouseTotal;",
                    "var bool bPolling;",
                    "var string pollgame;"
                ]
            }
        },
        "ClockWatchActor.uc": {
            "body": "class ClockWatchActor extends RCONActors;\nvar AthenaSpectator Spect;\nvar() string AlarmTime;\nvar int Ran;\nvar string mealtime, stringtime;\n\nfunction Timer()\n{\nlocal DeusExPlayer DXP;\nlocal bool bFound;\n\n\tif(level.minute == 0 && Ran != level.hour)\n\t{\n\t\tRan = level.hour;\n\t\t\tforeach AllActors(class'DeusExPlayer', DXP)\n\t\t\t\tbFound=True;\n\t\t\n\t\tif(bFound)\t\t\n\t\t\tSpect.ASay(\"The current time is now\"@GetTime());\n\t}\n\tif(GetTime() == AlarmTime)\n\t{\n\t\tSpect.ASay(\"Alarm!\");\n\t\tAlarmTime = \"\";\n\t}\n}\n\nfunction string GetTime()\n{\nlocal string formattedmin;\n\tif(level.minute <= 9)\n\t{\n\t\tformattedmin = \"0\"$level.minute;\n\t}\n\telse\n\t{\n\t\tformattedmin = string(level.minute);\n\t}\nreturn level.hour$\":\"$formattedmin;\n}\n\nfunction string GetTimeStr()\n{\n\tif(Level.Hour >= 5 && Level.Hour < 12)\n\t\treturn \"morning\";\n\telse if(Level.Hour >= 12 && Level.Hour < 17)\n\t\treturn \"afternoon\";\n\telse if(Level.Hour >= 17 && Level.Hour < 22)\n\t\treturn \"evening\";\n\telse \n\t\treturn \"night\";\n}\n\nfunction string GetMealStr()\n{\n\tif(Level.Hour >= 5 && Level.Hour < 11)\n\t\treturn \"breakfast\";\n\telse if(Level.Hour >= 11 && Level.Hour < 14)\n\t\treturn \"lunch\";\n\telse if(Level.Hour >= 14 && Level.Hour < 19)\n\t\treturn \"dinner\";\n\telse\n\t\treturn \"supper\";\n}\n\ndefaultproperties\n{\n     bHidden=True\n}\n",
            "name": "ClockWatchActor.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bHidden=True"
                ],
                "exec": [],
                "extends": "RCONActors",
                "functions": {
                    "GetMealStr": {
                        "body": "{\n\tif(Level.Hour >= 5 && Level.Hour < 11)\n\t\treturn \"breakfast\";\n\telse if(Level.Hour >= 11 && Level.Hour < 14)\n\t\treturn \"lunch\";\n\telse if(Level.Hour >= 14 && Level.Hour < 19)\n\t\treturn \"dinner\";\n\telse\n\t\treturn \"supper\";\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetMealStr",
                        "native": false,
                        "param": [],
                        "return": "string"
                    },
                    "GetTime": {
                        "body": "{\n\tif(level.minute <= 9)\n\t{\n\t\tformattedmin = \"0\"$level.minute;\n\t}\n\telse\n\t{\n\t\tformattedmin = string(level.minute);\n\t}\nreturn level.hour$\":\"$formattedmin;\n}",
                        "locals": [
                            "local string formattedmin;"
                        ],
                        "modifiers": [],
                        "name": "GetTime",
                        "native": false,
                        "param": [],
                        "return": "string"
                    },
                    "GetTimeStr": {
                        "body": "{\n\tif(Level.Hour >= 5 && Level.Hour < 12)\n\t\treturn \"morning\";\n\telse if(Level.Hour >= 12 && Level.Hour < 17)\n\t\treturn \"afternoon\";\n\telse if(Level.Hour >= 17 && Level.Hour < 22)\n\t\treturn \"evening\";\n\telse \n\t\treturn \"night\";\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetTimeStr",
                        "native": false,
                        "param": [],
                        "return": "string"
                    },
                    "Timer": {
                        "body": "{\n\n\tif(level.minute == 0 && Ran != level.hour)\n\t{\n\t\tRan = level.hour;\n\t\t\tforeach AllActors(class'DeusExPlayer', DXP)\n\t\t\t\tbFound=True;\n\t\t\n\t\tif(bFound)\t\t\n\t\t\tSpect.ASay(\"The current time is now\"@GetTime());\n\t}\n\tif(GetTime() == AlarmTime)\n\t{\n\t\tSpect.ASay(\"Alarm!\");\n\t\tAlarmTime = \"\";\n\t}\n}",
                        "locals": [
                            "local DeusExPlayer DXP;",
                            "local bool bFound;"
                        ],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 70,
                "replication": "",
                "states": [],
                "variables": [
                    "var AthenaSpectator Spect;",
                    "var() string AlarmTime;",
                    "var int Ran;",
                    "var string mealtime, stringtime;"
                ]
            }
        },
        "DelayCMD.uc": {
            "body": "class DelayCMD extends RCONActors;\n\nvar string TCMD, ExtraCMD;\nvar int CDown;\n\nfunction BeginPlay()\n{\n\tSetTimer(1,True);\n}\n\nfunction Timer()\n{\nlocal string cInterp;\n\n\tCDown--;\n\n\t\tif(CDown == 10 || CDown == 20 || CDown == 30 || CDown == 40 || CDown == 50 || CDown == 60)\n\t\t{\n\t\t\tBroadcastMessage(caps(TCMD)@ExtraCMD$\" in \"$CDown$\" seconds.\");\n\t\t}\n\t\tif(CDown <= 5 && CDown >= 1)\n\t\t{\n\t\t\tBroadcastMessage(CDown$\" until \"$caps(TCMD)@ExtraCMD);\n\t\t}\n\t\t\n\t\tif(CDown == 0)\n\t\t{\n\t\t\tif(TCMD ~= \"server close\")\n\t\t\t{\n\t\t\t\tConsoleCommand(\"quit\");\n\t\t\t\tDestroy();\n\t\t\t}\n\t\t\t\n\t\t\tif(TCMD ~= \"restart\")\n\t\t\t{\n\t\t\t\tConsoleCommand(\"Servertravel \"$Left(string(Level), InStr(string(Level), \".\")));\n\t\t\t\tDestroy();\n\t\t\t}\n\t\t\t\n\t\t\tif(TCMD ~= \"travel\")\n\t\t\t{\n\t\t\t\tConsoleCommand(\"Servertravel \"$ExtraCMD);\n\t\t\t\tDestroy();\n\t\t\t}\t\n\t\t}\n}\n\ndefaultproperties\n{\n     bHidden=True\n}\n",
            "name": "DelayCMD.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bHidden=True"
                ],
                "exec": [],
                "extends": "RCONActors",
                "functions": {
                    "BeginPlay": {
                        "body": "{\n\tSetTimer(1,True);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "BeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\n\tCDown--;\n\n\t\tif(CDown == 10 || CDown == 20 || CDown == 30 || CDown == 40 || CDown == 50 || CDown == 60)\n\t\t{\n\t\t\tBroadcastMessage(caps(TCMD)@ExtraCMD$\" in \"$CDown$\" seconds.\");\n\t\t}\n\t\tif(CDown <= 5 && CDown >= 1)\n\t\t{\n\t\t\tBroadcastMessage(CDown$\" until \"$caps(TCMD)@ExtraCMD);\n\t\t}\n\t\t\n\t\tif(CDown == 0)\n\t\t{\n\t\t\tif(TCMD ~= \"server close\")\n\t\t\t{\n\t\t\t\tConsoleCommand(\"quit\");\n\t\t\t\tDestroy();\n\t\t\t}\n\t\t\t\n\t\t\tif(TCMD ~= \"restart\")\n\t\t\t{\n\t\t\t\tConsoleCommand(\"Servertravel \"$Left(string(Level), InStr(string(Level), \".\")));\n\t\t\t\tDestroy();\n\t\t\t}\n\t\t\t\n\t\t\tif(TCMD ~= \"travel\")\n\t\t\t{\n\t\t\t\tConsoleCommand(\"Servertravel \"$ExtraCMD);\n\t\t\t\tDestroy();\n\t\t\t}\t\n\t\t}\n}",
                        "locals": [
                            "local string cInterp;"
                        ],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 52,
                "replication": "",
                "states": [],
                "variables": [
                    "var string TCMD, ExtraCMD;",
                    "var int CDown;"
                ]
            }
        },
        "GreeterDelay.uc": {
            "body": "class GreeterDelay extends RCONActors;\n\nvar string Greets, Warnings;\nvar bool bWarning, bDone;\nvar DeusExPlayer LockOnHim;\nvar bool bKickem, bKickemFinal;\nvar string MarkStr;\nvar AthenaSpectator AS;\nvar bool SoloPlayerMsg;\n\nfunction BeginPlay()\n{\nlocal AthenaSpectator Aspec;\n\tforeach AllActors(class'AthenaSpectator',Aspec)\n\t{\n\t\tif(Aspec!=None)\n\t\t\tAS = Aspec;\n\t}\n\t\n\tSetTimer(3,False);\n\t\n}\n\nfunction Timer()\n{\nlocal int n;\n\tif(Greets!=\"\")\n\t{\n\t\tif(AS != None)\n\t\t{\n\t\t\tAS.ASay(Greets);\n\t\t\t\tif(warnings == \"marked\")\n\t\t\t\t{\n\t\t\t\t\tGreets=\"\";\n\t\t\t\t\tSetTimer(3,False);\n\t\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tBroadcastMessage(\"|P4\"$Greets);\n\t\t\t\tif(warnings == \"marked\")\n\t\t\t\t{\n\t\t\t\t\tGreets=\"\";\n\t\t\t\t\tSetTimer(3,False);\n\t\t\t\t}\n\t\t}\n\t}\n\t\tif(warnings == \"marked\")\n\t\t{\n\t\t\tif(AS != None)\n\t\t\t{\n\t\t\t\tn=Rand(4);\n\t\t\t\tif(n==0)\n\t\t\t\t\tMarkStr = \"Oh, look who it is, \"$LockOnHim.PlayerReplicationInfo.PlayerName$\" the trouble maker.\";\n\t\t\t\tif(n==1)\n\t\t\t\t\tMarkStr = \"This guys a pain in the ass.\";\n\t\t\t\tif(n==2)\n\t\t\t\t\tMarkStr = \"Watch out, this guy is known to cause trouble.\";\n\t\t\t\tif(n==3)\n\t\t\t\t\tMarkStr = LockOnHim.PlayerReplicationInfo.PlayerName$\" is a known trouble maker, watch out.\";\n\t\t\tAS.ASay(MarkStr);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\tMarkStr = \"This player is a known trouble maker.\";\n\t\t\tBroadcastMessage(MarkStr);\n\t\t\t}\n\t\t\tdestroy();\n\t\t}\n}\n\ndefaultproperties\n{\n     bHidden=True\n}\n",
            "name": "GreeterDelay.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bHidden=True"
                ],
                "exec": [],
                "extends": "RCONActors",
                "functions": {
                    "BeginPlay": {
                        "body": "{\n\tforeach AllActors(class'AthenaSpectator',Aspec)\n\t{\n\t\tif(Aspec!=None)\n\t\t\tAS = Aspec;\n\t}\n\t\n\tSetTimer(3,False);\n\t\n}",
                        "locals": [
                            "local AthenaSpectator Aspec;"
                        ],
                        "modifiers": [],
                        "name": "BeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\tif(Greets!=\"\")\n\t{\n\t\tif(AS != None)\n\t\t{\n\t\t\tAS.ASay(Greets);\n\t\t\t\tif(warnings == \"marked\")\n\t\t\t\t{\n\t\t\t\t\tGreets=\"\";\n\t\t\t\t\tSetTimer(3,False);\n\t\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tBroadcastMessage(\"|P4\"$Greets);\n\t\t\t\tif(warnings == \"marked\")\n\t\t\t\t{\n\t\t\t\t\tGreets=\"\";\n\t\t\t\t\tSetTimer(3,False);\n\t\t\t\t}\n\t\t}\n\t}\n\t\tif(warnings == \"marked\")\n\t\t{\n\t\t\tif(AS != None)\n\t\t\t{\n\t\t\t\tn=Rand(4);\n\t\t\t\tif(n==0)\n\t\t\t\t\tMarkStr = \"Oh, look who it is, \"$LockOnHim.PlayerReplicationInfo.PlayerName$\" the trouble maker.\";\n\t\t\t\tif(n==1)\n\t\t\t\t\tMarkStr = \"This guys a pain in the ass.\";\n\t\t\t\tif(n==2)\n\t\t\t\t\tMarkStr = \"Watch out, this guy is known to cause trouble.\";\n\t\t\t\tif(n==3)\n\t\t\t\t\tMarkStr = LockOnHim.PlayerReplicationInfo.PlayerName$\" is a known trouble maker, watch out.\";\n\t\t\tAS.ASay(MarkStr);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\tMarkStr = \"This player is a known trouble maker.\";\n\t\t\tBroadcastMessage(MarkStr);\n\t\t\t}\n\t\t\tdestroy();\n\t\t}\n}",
                        "locals": [
                            "local int n;"
                        ],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 76,
                "replication": "",
                "states": [],
                "variables": [
                    "var string Greets, Warnings;",
                    "var bool bWarning, bDone;",
                    "var DeusExPlayer LockOnHim;",
                    "var bool bKickem, bKickemFinal;",
                    "var string MarkStr;",
                    "var AthenaSpectator AS;",
                    "var bool SoloPlayerMsg;"
                ]
            }
        },
        "GroupingActor.uc": {
            "body": "class GroupingActor extends RCONActors;\n\nvar PlayerPawn aOwner;\nvar Actor aObj[10];\n\nfunction Trigger( actor Other, pawn EventInstigator )\n{\n\tlocal int c, i;\n\tfor(i=0;i<10;i++)\n\t\tif(aObj[i] != None)\n\t\t{\n\t\t\taObj[i].Trigger(Other,EventInstigator);\n\t\t\tc++;\n\t\t}\n\t\t\n\t\taOwner.ClientMessage(c$\" objects triggered.\");\n}\n\nfunction AddGroupActor(Actor Add)\n{\n\tlocal int c, i;\n\t\n\tfor(i=0;i<10;i++)\n\t\tif(aObj[i] == None)\n\t\t{\n\t\t\taObj[i] = Add;\n\t\t\taOwner.ClientMessage(\"Object added to trigger group. (\"$i$\"=\"$Add$\")\");\n\t\t\treturn;\n\t\t}\n}\n\nfunction RemoveGroupActor(Actor Remove)\n{\n\tlocal int c, i;\n\t\n\tfor(i=0;i<10;i++)\n\t\tif(aObj[i] == Remove)\n\t\t{\n\t\t\taObj[i] = None;\n\t\t\taOwner.ClientMessage(\"Object removed trigger group. (\"$i$\"=\"$Remove$\")\");\n\t\t\treturn;\n\t\t}\n}\n\nfunction Tick(float deltatime)\n{\nlocal int i;\nlocal bool bFound, bOwnerExist;\n\n\t\tfor(i=0;i<10;i++)\n\t\t\tif(aObj[i] != None)\n\t\t\t\tbFound=True;\n\t\t\n\t\tif(aOwner != None)\n\t\t\tbOwnerExist=True;\n\t\t\t\n\t\tif(!bFound)\n\t\t{\n\t\t\tBroadcastMessage(\"[\"$aOwner.PlayerReplicationInfo.PlayerName$\"] Inactive or empty trigger group has been destroyed.\");\n\t\t\tDestroy();\n\t\t}\n\t\t\n\t\tif(!bOwnerExist)\n\t\t{\n\t\t\tBroadcastMessage(\"Uncontrolled trigger group has been destroyed.\");\n\t\t\tDestroy();\n\t\t}\n}\n\ndefaultproperties\n{\n     bHidden=True\n}\n",
            "name": "GroupingActor.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bHidden=True"
                ],
                "exec": [],
                "extends": "RCONActors",
                "functions": {
                    "AddGroupActor": {
                        "body": "{\n\t\n\tfor(i=0;i<10;i++)\n\t\tif(aObj[i] == None)\n\t\t{\n\t\t\taObj[i] = Add;\n\t\t\taOwner.ClientMessage(\"Object added to trigger group. (\"$i$\"=\"$Add$\")\");\n\t\t\treturn;\n\t\t}\n}",
                        "locals": [
                            "local int c, i;"
                        ],
                        "modifiers": [],
                        "name": "AddGroupActor",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Add"
                            ]
                        ],
                        "return": ""
                    },
                    "RemoveGroupActor": {
                        "body": "{\n\t\n\tfor(i=0;i<10;i++)\n\t\tif(aObj[i] == Remove)\n\t\t{\n\t\t\taObj[i] = None;\n\t\t\taOwner.ClientMessage(\"Object removed trigger group. (\"$i$\"=\"$Remove$\")\");\n\t\t\treturn;\n\t\t}\n}",
                        "locals": [
                            "local int c, i;"
                        ],
                        "modifiers": [],
                        "name": "RemoveGroupActor",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Remove"
                            ]
                        ],
                        "return": ""
                    },
                    "Tick": {
                        "body": "{\n\n\t\tfor(i=0;i<10;i++)\n\t\t\tif(aObj[i] != None)\n\t\t\t\tbFound=True;\n\t\t\n\t\tif(aOwner != None)\n\t\t\tbOwnerExist=True;\n\t\t\t\n\t\tif(!bFound)\n\t\t{\n\t\t\tBroadcastMessage(\"[\"$aOwner.PlayerReplicationInfo.PlayerName$\"] Inactive or empty trigger group has been destroyed.\");\n\t\t\tDestroy();\n\t\t}\n\t\t\n\t\tif(!bOwnerExist)\n\t\t{\n\t\t\tBroadcastMessage(\"Uncontrolled trigger group has been destroyed.\");\n\t\t\tDestroy();\n\t\t}\n}",
                        "locals": [
                            "local int i;",
                            "local bool bFound, bOwnerExist;"
                        ],
                        "modifiers": [],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltatime"
                            ]
                        ],
                        "return": ""
                    },
                    "Trigger": {
                        "body": "{\n\tfor(i=0;i<10;i++)\n\t\tif(aObj[i] != None)\n\t\t{\n\t\t\taObj[i].Trigger(Other,EventInstigator);\n\t\t\tc++;\n\t\t}\n\t\t\n\t\taOwner.ClientMessage(c$\" objects triggered.\");\n}",
                        "locals": [
                            "local int c, i;"
                        ],
                        "modifiers": [],
                        "name": "Trigger",
                        "native": false,
                        "param": [
                            [
                                "actor",
                                "Other"
                            ],
                            [
                                "pawn",
                                "EventInstigator"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 74,
                "replication": "",
                "states": [],
                "variables": [
                    "var PlayerPawn aOwner;",
                    "var Actor aObj[10];"
                ]
            }
        },
        "IRCBuffer.uc": {
            "body": "//=============================================================================\n// UBrowserBufferedTcpLink\n//=============================================================================\nclass IRCBuffer extends TcpLink;\n\nvar string\t\t\tInputBuffer;\nvar string \t\t\tOutputBuffer;\n\nvar string\t\t\tCRLF;\nvar string\t\t\tCR;\nvar string\t\t\tLF;\n\nvar bool\t\t\tbWaiting;\nvar float\t\t\tWaitTimeoutTime;\nvar string\t\t\tWaitingFor;\nvar int\t\t\t\tWaitForCountChars;\t\t// if we're waiting for X bytes\nvar string\t\t\tWaitResult;\nvar int\t\t\t\tWaitMatchData;\n\nfunction ResetBuffer()\n{\n\tInputBuffer = \"\";\n\tOutputBuffer = \"\";\n\tbWaiting = False;\n\tCRLF = Chr(10)$Chr(13);\n\tCR = Chr(13);\n\tLF = Chr(10);\n}\n\nfunction WaitFor(string What, float TimeOut, int MatchData)\n{\n\tbWaiting = True;\n\tWaitingFor = What;\n\tWaitForCountChars = 0;\n\tWaitTimeoutTime = Level.TimeSeconds + TimeOut;\n\tWaitMatchData = MatchData;\n\tWaitResult = \"\";\n}\n\nfunction WaitForCount(int Count, float TimeOut, int MatchData)\n{\n\tbWaiting = True;\n\tWaitingFor = \"\";\n\tWaitForCountChars = Count;\n\tWaitTimeoutTime = Level.TimeSeconds + TimeOut;\n\tWaitMatchData = MatchData;\n\tWaitResult = \"\";\n}\n\nfunction GotMatch(int MatchData)\n{\n\t// called when a match happens\t\n}\n\nfunction GotMatchTimeout(int MatchData)\n{\n\t// when a match times out\n}\n\nfunction string ParseDelimited(string Text, string Delimiter, int Count, optional bool bToEndOfLine)\n{\n\tlocal string Result;\n\tlocal int Found, i;\n\tlocal string s;\n\n\tResult = \"\";\t\n\tFound = 1;\n\t\n\tfor(i=0;i<Len(Text);i++)\n\t{\n\t\ts = Mid(Text, i, 1);\n\t\tif(InStr(Delimiter, s) != -1)\n\t\t{\n\t\t\tif(Found == Count)\n\t\t\t{\n\t\t\t\tif(bToEndOfLine)\n\t\t\t\t\treturn Result$Mid(Text, i);\n\t\t\t\telse\n\t\t\t\t\treturn Result;\n\t\t\t}\n\n\t\t\tFound++;\t\t\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(Found >= Count)\n\t\t\t\tResult = Result $ s;\n\t\t}\n\t}\n\t\n\treturn Result;\n}\n\n// Read an individual character, returns 0 if no characters waiting\nfunction int ReadChar()\n{\n\tlocal int c;\n\t\n\tif(InputBuffer == \"\")\n\t\treturn 0;\n\tc = Asc(Left(InputBuffer, 1));\n\tInputBuffer = Mid(InputBuffer, 1);\n\treturn c;\n}\n\n// Take a look at the next waiting character, return 0 if no characters waiting\nfunction int PeekChar()\n{\n\tlocal int c;\n\t\n\tif(InputBuffer == \"\")\n\t\treturn 0;\n\treturn Asc(Left(InputBuffer, 1));\n}\n\nfunction bool ReadBufferedLine(out string Text)\n{\n\tlocal int i;\n\n\ti = InStr(InputBuffer, Chr(13));\n\tif(i == -1)\n\t\treturn False;\n\n\tText = Left(InputBuffer, i);\n\tif(Mid(InputBuffer, i+1, 1) == Chr(10))\n\t\ti++;\n\n\tInputBuffer = Mid(InputBuffer, i+1);\n\treturn True;\n}\n\nfunction SendBufferedData(string Text) \n{\n\tOutputBuffer = OutputBuffer $ Text;\n}\n\nevent ReceivedText(string Text)\n{\n\tInputBuffer = InputBuffer $ Text;\n}\n\n// DoQueueIO is intended to be called from Tick();\nfunction DoBufferQueueIO() \n{\n\tlocal int i;\n\n\twhile(bWaiting)\n\t{\n\t\tif(Level.TimeSeconds > WaitTimeoutTime)\n\t\t{\n\t\t\tbWaiting = False;\n\t\t\tGotMatchTimeout(WaitMatchData);\n\t\t}\n\t\t\n\t\tif(WaitForCountChars > 0)\n\t\t{\n\t\t\tif(Len(InputBuffer) < WaitForCountChars)\n\t\t\t\tbreak;\n\n\t\t\tWaitResult = Left(InputBuffer, WaitForCountChars);\n\t\t\tInputBuffer = Mid(InputBuffer, WaitForCountChars);\n\t\t\tbWaiting = False;\n\t\t\tGotMatch(WaitMatchData);\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti = InStr(InputBuffer, WaitingFor);\n\t\t\tif(i == -1 && WaitingFor == CR)\n\t\t\t\ti = InStr(InputBuffer, LF);\n\t\t\tif(i != -1)\n\t\t\t{\n\t\t\t\tWaitResult = Left(InputBuffer, i + Len(WaitingFor));\n\t\t\t\tInputBuffer = Mid(InputBuffer, i + Len(WaitingFor));\n\t\t\t\tbWaiting = False;\n\t\t\t\tGotMatch(WaitMatchData);\n\t\t\t}\n\t\t\telse\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tif(IsConnected())\n\t{\n\t\ti = SendText(OutputBuffer);\n\t\tOutputBuffer = Mid(OutputBuffer, i);\n\t}\n}\n\ndefaultproperties\n{\n}\n",
            "name": "IRCBuffer.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "TcpLink",
                "functions": {
                    "DoBufferQueueIO": {
                        "body": "{\n\n\twhile(bWaiting)\n\t{\n\t\tif(Level.TimeSeconds > WaitTimeoutTime)\n\t\t{\n\t\t\tbWaiting = False;\n\t\t\tGotMatchTimeout(WaitMatchData);\n\t\t}\n\t\t\n\t\tif(WaitForCountChars > 0)\n\t\t{\n\t\t\tif(Len(InputBuffer) < WaitForCountChars)\n\t\t\t\tbreak;\n\n\t\t\tWaitResult = Left(InputBuffer, WaitForCountChars);\n\t\t\tInputBuffer = Mid(InputBuffer, WaitForCountChars);\n\t\t\tbWaiting = False;\n\t\t\tGotMatch(WaitMatchData);\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti = InStr(InputBuffer, WaitingFor);\n\t\t\tif(i == -1 && WaitingFor == CR)\n\t\t\t\ti = InStr(InputBuffer, LF);\n\t\t\tif(i != -1)\n\t\t\t{\n\t\t\t\tWaitResult = Left(InputBuffer, i + Len(WaitingFor));\n\t\t\t\tInputBuffer = Mid(InputBuffer, i + Len(WaitingFor));\n\t\t\t\tbWaiting = False;\n\t\t\t\tGotMatch(WaitMatchData);\n\t\t\t}\n\t\t\telse\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tif(IsConnected())\n\t{\n\t\ti = SendText(OutputBuffer);\n\t\tOutputBuffer = Mid(OutputBuffer, i);\n\t}\n}",
                        "locals": [
                            "local int i;"
                        ],
                        "modifiers": [],
                        "name": "DoBufferQueueIO",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "GotMatch": {
                        "body": "{\n\t// called when a match happens\t\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "GotMatch",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "MatchData"
                            ]
                        ],
                        "return": ""
                    },
                    "GotMatchTimeout": {
                        "body": "{\n\t// when a match times out\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "GotMatchTimeout",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "MatchData"
                            ]
                        ],
                        "return": ""
                    },
                    "ParseDelimited": {
                        "body": "{\n\n\tResult = \"\";\t\n\tFound = 1;\n\t\n\tfor(i=0;i<Len(Text);i++)\n\t{\n\t\ts = Mid(Text, i, 1);\n\t\tif(InStr(Delimiter, s) != -1)\n\t\t{\n\t\t\tif(Found == Count)\n\t\t\t{\n\t\t\t\tif(bToEndOfLine)\n\t\t\t\t\treturn Result$Mid(Text, i);\n\t\t\t\telse\n\t\t\t\t\treturn Result;\n\t\t\t}\n\n\t\t\tFound++;\t\t\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(Found >= Count)\n\t\t\t\tResult = Result $ s;\n\t\t}\n\t}\n\t\n\treturn Result;\n}",
                        "locals": [
                            "local string Result;",
                            "local int Found, i;",
                            "local string s;"
                        ],
                        "modifiers": [],
                        "name": "ParseDelimited",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "Text"
                            ],
                            [
                                "string",
                                "Delimiter"
                            ],
                            [
                                "int",
                                "Count"
                            ],
                            [
                                "optional",
                                "bool",
                                "bToEndOfLine"
                            ]
                        ],
                        "return": "string"
                    },
                    "PeekChar": {
                        "body": "{\n\t\n\tif(InputBuffer == \"\")\n\t\treturn 0;\n\treturn Asc(Left(InputBuffer, 1));\n}",
                        "locals": [
                            "local int c;"
                        ],
                        "modifiers": [],
                        "name": "PeekChar",
                        "native": false,
                        "param": [],
                        "return": "int"
                    },
                    "ReadBufferedLine": {
                        "body": "{\n\n\ti = InStr(InputBuffer, Chr(13));\n\tif(i == -1)\n\t\treturn False;\n\n\tText = Left(InputBuffer, i);\n\tif(Mid(InputBuffer, i+1, 1) == Chr(10))\n\t\ti++;\n\n\tInputBuffer = Mid(InputBuffer, i+1);\n\treturn True;\n}",
                        "locals": [
                            "local int i;"
                        ],
                        "modifiers": [],
                        "name": "ReadBufferedLine",
                        "native": false,
                        "param": [
                            [
                                "out",
                                "string",
                                "Text"
                            ]
                        ],
                        "return": "bool"
                    },
                    "ReadChar": {
                        "body": "{\n\t\n\tif(InputBuffer == \"\")\n\t\treturn 0;\n\tc = Asc(Left(InputBuffer, 1));\n\tInputBuffer = Mid(InputBuffer, 1);\n\treturn c;\n}",
                        "locals": [
                            "local int c;"
                        ],
                        "modifiers": [],
                        "name": "ReadChar",
                        "native": false,
                        "param": [],
                        "return": "int"
                    },
                    "ReceivedText": {
                        "body": "{\n\tInputBuffer = InputBuffer $ Text;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "ReceivedText",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "Text"
                            ]
                        ],
                        "return": ""
                    },
                    "ResetBuffer": {
                        "body": "{\n\tInputBuffer = \"\";\n\tOutputBuffer = \"\";\n\tbWaiting = False;\n\tCRLF = Chr(10)$Chr(13);\n\tCR = Chr(13);\n\tLF = Chr(10);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "ResetBuffer",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "SendBufferedData": {
                        "body": "{\n\tOutputBuffer = OutputBuffer $ Text;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "SendBufferedData",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "Text"
                            ]
                        ],
                        "return": ""
                    },
                    "WaitFor": {
                        "body": "{\n\tbWaiting = True;\n\tWaitingFor = What;\n\tWaitForCountChars = 0;\n\tWaitTimeoutTime = Level.TimeSeconds + TimeOut;\n\tWaitMatchData = MatchData;\n\tWaitResult = \"\";\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "WaitFor",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "What"
                            ],
                            [
                                "float",
                                "TimeOut"
                            ],
                            [
                                "int",
                                "MatchData"
                            ]
                        ],
                        "return": ""
                    },
                    "WaitForCount": {
                        "body": "{\n\tbWaiting = True;\n\tWaitingFor = \"\";\n\tWaitForCountChars = Count;\n\tWaitTimeoutTime = Level.TimeSeconds + TimeOut;\n\tWaitMatchData = MatchData;\n\tWaitResult = \"\";\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "WaitForCount",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "Count"
                            ],
                            [
                                "float",
                                "TimeOut"
                            ],
                            [
                                "int",
                                "MatchData"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 192,
                "replication": "",
                "states": [],
                "variables": [
                    "var string\t\t\tInputBuffer;",
                    "var string \t\t\tOutputBuffer;",
                    "var string\t\t\tCRLF;",
                    "var string\t\t\tCR;",
                    "var string\t\t\tLF;",
                    "var bool\t\t\tbWaiting;",
                    "var float\t\t\tWaitTimeoutTime;",
                    "var string\t\t\tWaitingFor;",
                    "var int\t\t\t\tWaitForCountChars;\t\t// if we're waiting for X bytes",
                    "var string\t\t\tWaitResult;",
                    "var int\t\t\t\tWaitMatchData;"
                ]
            }
        },
        "IRCLink.uc": {
            "body": "//=============================================================================\n// Link.\n//=============================================================================\nclass IRCLink extends TCPLink config (IRC);\n\nvar config string Server;\nvar config string Channel;\nvar config string Username;\nvar config int Port;\nvar config string OpUsernames[10];\nvar config string iPrefix;\nvar config int iMode;\nvar bool bBeating;\nvar config bool bAcceptingCommands;\nvar bool bGodAccess;\nvar config bool bJoinTimer;\nvar config bool bMasterDebug;\nvar config bool bParts, bQuits, bJoins, bActions, bModes;\nvar config bool bClientMode;\nvar config bool bAutoClientMode;\nvar string JoinChannel;\nvar bool bErrord;\nvar float fHeartbeat, fReconDelay;\nvar AthenaSpectator AS;\nvar AthenaMutator AM;\nvar config bool bDebugRep, bDebug;\nvar config bool bLogAll;\nvar config bool bIRCClientLogs;\nvar config string GSCURL, GSCARG;\n\nfunction CodeBase _CodeBase()\n{\n\treturn Spawn(class'CodeBase');\n}\n\n/*replication\n{\nreliable if(ROLE < ROLE_Authority) \n RemoteCommand;\n reliable if(ROLE == ROLE_Authority) \n RemoteCommandX;\n}*/\n\nsimulated function RemoteCommand(PlayerPawn Victim, string cmd)\n{\n\tlocal RCONReplicationActor REPL;\n\tREPL = Spawn(class'RCONReplicationActor');\n\tREPL.SetOwner(Victim);\n\tREPL.RemoteCommand(Victim, cmd);\n}\n\nsimulated function RemoteCommandX(PlayerPawn Victim, string cmd)\n{\n\tlocal RCONReplicationActor REPL;\n\tREPL = Spawn(class'RCONReplicationActor');\n\tREPL.SetOwner(Victim);\n\tREPL.RemoteCommandX(Victim, cmd);\n}\n\nfunction PostBeginPlay()\n{\n  Super.PostBeginPlay();\n  StartLink();\n  SetTimer(3.0,False);\n  \n  \t\tif (Level.NetMode == NM_Standalone && bAutoClientMode)\n\t\t{\n\t\t\tLog(\"Starting in ClientMode.\",'IRC');\n\t\t\tbClientMode=True;\n\t\t}\n\t\telse if (Level.NetMode != NM_Standalone)\n\t\t{\n\t\t\tLog(\"Starting in ServerMode (default).\",'IRC');\n\t\t\tbClientMode=False;\n\t\t}\n}\n\nfunction DoAthenaLink()\n{\n  local AthenaSpectator Aspec;\n\tif(AS == None)\n\t{\n\t\tforeach AllActors(class'AthenaSpectator',Aspec)\n\t\t{\n\t\t\tif(Aspec!=None)\n\t\t\t\tAS = Aspec;\n\t\t}\n\t\t\n\t\tif(AS != None)\n\t\t\tLog(\"Linked to Athena Spectator.\",'IRC');\n\t}\n}\n\nfunction Timer()\n{\nlocal spec _spec;\n\tif(!IsConnected() && !bErrord)\n\t{\n\t\tConLost();\n\t\treturn;\n\t}\n\t\n\tif(bErrord)\n\t{\n\t\tStartLink();\n\t\tBroadcastMessage(\"|P2Restarting IRC link due to error...\");\n\t\tLog(\"Restarting IRC Link due to error....\", 'IRC');\n\t\tbErrord=false;\n\t\tSetTimer(10,False);\n\t}\n\t\n\tif(!bBeating)\n\t{\n\t  _Spec = Spawn(Class'Spec');\n\t  if(_Spec != None)\n\t  {\n\t\t_Spec._IRC = self;\n\t\t_spec.PlayerReplicationInfo.Playername = \"[\"$Username$\"]\"@Channel@\"on\"@Server;\n\t\t_Spec.PlayerReplicationInfo.PlayerID = Level.game.CurrentID++;\n\t\t_Spec.GameReplicationInfo = Level.Game.GameReplicationInfo;\n\n\t\tBroadcastMessage( _Spec.PlayerReplicationInfo.PlayerName$Level.Game.EnteredMessage, false );\n\t\t\t\tLog(\"Finished configuring spectator...\", 'IRC');\n\t  }\n\t  bBeating=True;\n\t}\n\t\n\tif(bBeating)\n\t{\n\t\tif(JoinChannel != \"\")\n\t\t{\n\t\t\tBroadcastMessage(\"# JOINING CHANNEL:\"@JoinChannel);\n\t\t\tSendCommand(\"JOIN\"@JoinChannel);\n\t\t\tJoinChannel=\"\";\n\t\t}\n\t\tif(bClientMode)\n\t\t{\n\t\t  //SendCommand(\"NICK \"$Username);\n\t\t}\n\t\telse\n\t\t{\n\t\t  SendCommand(\"NICK SERVER_\"$Username);\t\n\t\t}\n\n\t\tif(bJoinTimer)\n\t\t{\n\t\t\tSendCommand(\"JOIN\"@Channel);\n\t\t}\n\t   if(_Spec != None)\n\t  {\n\t\t_Spec._IRC = self;\n\t\t_spec.PlayerReplicationInfo.Playername = \"[\"$Username$\"]\"@Channel@\"on\"@Server;\n\t  }\n\t}\n\tSetTimer(fHeartbeat,False);\n}\n\nfunction StartLink()\n{\n  Resolve(Server);\n  \t\tLog(\"Starting linkup...\", 'IRC');\n}\n\nevent ResolveFailed()\n{\n  Log(\"Error, resolve failed\", 'IRC');\n}\n\nevent Resolved( IpAddr Addr )\n{\n  Addr.Port = Port;\n  BindPort();\n  ReceiveMode = RMODE_Event;\n  LinkMode = MODE_Line;\n  Open(Addr); \n}\n\nevent Opened()\n{\n  SendCommand(\"USER Console hostname servername :Console\");\n  SendCommand(\"NICK SERVER_\"$Username);\n  SendCommand(\"JOIN\"@Channel);\n}\n\nfunction ConLost()\n{\nlocal string str;\n\n\tif(!bErrord)\n\t{\n\tstr = Left(string(fReconDelay), InStr(string(fReconDelay), \".\"));\n\t\tbErrord=True;\n\t\tBroadcastMessage(\"|P2Error: IRC connection was lost. Attempting reconnection in \"$str$\" seconds.\");\n\t\tLog(\"IRC connection was lost. Attempting reconnection in \"$str$\" seconds.\", 'Error');\n\t\t\tSetTimer(fReconDelay,False);\n\t}\n}\n\nfunction string RCR(string in)\n{\nlocal string TempMessage, TempLeft, TempRight, OutMessage, _TmpString;\n\tOutMessage=in;\n    while (instr(caps(outmessage), \"|P\") != -1)\n    {\n        tempRight=(right(OutMessage, (len(OutMessage)-instr(caps(OutMessage), \"|P\"))-3));\n        tempLeft=(left(OutMessage, instr(caps(OutMessage), \"|P\")) );\n        OutMessage=TempLeft$TempRight;\n    }\n\treturn OutMessage;\n}\n\nfunction string RCR2(string in)\n{\nlocal string TempMessage, TempLeft, TempRight, OutMessage, _TmpString;\n\tOutMessage=in;\n    while (instr(caps(outmessage), \"|C\") != -1)\n    {\n        tempRight=(right(OutMessage, (len(OutMessage)-instr(caps(OutMessage), \"|C\"))-8));\n        tempLeft=(left(OutMessage, instr(caps(OutMessage), \"|C\")) );\n        OutMessage=TempLeft$TempRight;\n    }\n\t\t\treturn OutMessage;\n}\n\nfunction SendMessage(string s)\n{\nlocal int i, fnew;\nlocal string output;\nlocal string line, newnick;\n\n/*while(inStr(caps(s), caps(\"|p\")) != -1) //WAS IF\n\t{\n\t\ti = InStr(caps(s), caps(\"|p\"));\n\t\twhile (i != -1) {\t\n\t\t\tOutput = Output $ Left(s, i) $ \"\";\n\t\t\ts = Mid(s, i + 3);\t\n\t\t\ti = InStr(caps(s), caps(\"|p\"));\n\t\t}\n\t\ts = Output $ s;\n\t}\n\t\t\n\twhile(inStr(caps(s), caps(\"|C\")) != -1)\n\t{\n\t\ti = InStr(caps(s), caps(\"|C\"));\n\t\twhile (i != -1) {\t\n\t\t\tOutput = Output $ Left(s, i) $ \"\";\n\t\t\ts = Mid(s, i + 8);\t\n\t\t\ti = inStr(caps(s), caps(\"|C\"));\n\t\t}\n\t\ts = Output $ s;\n\t}*/\n\t/*if(bClientMode)\n\t{\n    Line = Right(s, Len(s)-instr(s,\"): \")-Len(\"): \"));\n\t newnick = Left(s, InStr(s,\"(\"));\n\t SendCommand(\"NICK \"$newnick);\n\t  SendCommand(\"PRIVMSG\"@Channel@\":\"$Line);\n\t}*/\n\tline = RCR(s);\n\tline = RCR2(line);\n\tline = FormatNames(line);\n\t  SendCommand(\"PRIVMSG\"@Channel@\":\"$line);\n\t  return;\n}\n\nfunction string FormatNames(string S)\n{\n\tlocal string imsg, iname;\n\t\n\tif(instr(caps(S), caps(\"): \")) != -1)\n\t{\n\t\timsg = Right(s, Len(s)-instr(s,\"): \")-Len(\"): \"));\n\t\tiname =  Left(s, InStr(s,\"(\"));\n\t\treturn \"[ \"$iname$\" ] \"$imsg;\n\t}\n}\n\nfunction DestroyLink()\n{\n\t\tSendText(\"QUIT :Closed\");\n\t\tDestroy();\n}\n\nfunction SendCommand(string _Command)\n{\n  SendText(_Command $ Chr(10));\n}\n\nfunction SendToGame(string str)\n{\n  local DeusExPlayer    _Player;\n  local AthenaSpectator _AS;\n  local MessagingSpectator MS;\n\tforeach AllActors(class'MessagingSpectator', MS)\n\t{\n\t\tif(string(ms.Class) ~= \"dxtelnetadmin.telnetspectator\")\n\t\t{\n\t\t\tms.ClientMessage(str,'Say');\n\t\t}\n\t}\n       ForEach AllActors(class'AthenaSpectator', _AS)\n      {\n        if(_AS != None)\n        {\n\t\t\t//_AS.SendToChatlog(str);\n\t\t\t_AS.ClientMessage(str,'Say');\n        }\n      }\n\t  \n      ForEach AllActors(class'DeusExPlayer', _Player)\n      {\n        if(_Player != None)\n        {\n\t\t\tif(len(str) > 415)\n\t\t\t\treturn;\n\t\t\t_Player.ClientMessage(iPrefix$str, 'Say');\n        }\n      }\n}\n\n\n/* To add a message check for;\n * :irc.x2x.cc 404 SERVER_Playground #deusbork :Cannot send to channel\n * :Kaiz0r!~kaiz0r@deus.ex.machina TOPIC #deusbork :Testing random IRC commands\n */\nevent ReceivedLine( string Line )\n{\n  local string       _Original;\n  local string       _Sender;\n  local string       _TmpString;\n  local DeusExPlayer    _Player, dxp;\n\tlocal string oldLine;\n\tlocal bool bIsOp;\n\tlocal int j, i, amount;\n\tlocal string SetA, SetB;\n\tlocal string Part;\n\t\t\tlocal spec _spec;\n\t\t\tlocal RCONStats StatActor, StatLink;\n\t\t\tlocal DelayCMD DCMD;\n\t\t\tlocal string Loglinez;\n\t\t\tlocal string quit;\nlocal DeusExDecoration DXD;\nlocal inventory inv;\nlocal DeusExDecoration Deco;\nlocal scriptedpawn sp;\nlocal playerpawn dp;\nlocal actor a;\nlocal bool bDontLog;\nlocal ARClient ARC;\nlocal AthenaMutator AMR;\nlocal GenericSiteQuery GSC;\nlocal CodeBase _CB;\nlocal RCONManager RMAN;\n\n//local RCONReplicatorActor REPL;\n\t\t\t//local string OldLine;\n\tbIsOp=False;\n\tbGodAccess=False;\n\t\n\tif(instr(Line, \"VERSION\") != -1)\n\t{\n\t\tSendCommand(\"VERSION DeusEx IRC Link by Kaiz0r\");\n\t\tLog(\"VERSION  -  Deus Ex IRC Link by Kaiz0r\",'IRC');\n\t}\n\t\t\n\tif(instr(Line, \"PING :\") != -1)\n\t{\n\t\tSendCommand(\"PONG :\"$Right(Line, Len(Line)-instr(line,\":\")-Len(\":\")));\n\t\tLog(\"PING - \"$Right(Line, Len(Line)-instr(line,\":\")-Len(\":\")),'IRC');\n\t\tbDontLog=True;\n\t\treturn;\n\t}\n\t\t\n\n\n  Line = Left(Line,Len(Line)-2);\n  _Original = Line;\n\tif(bLogAll)\n\t\tLog(Line);\n\tif(bMasterDebug)\n\t\tBroadcastMessage(Line);\n  \t\t\n   /* if(instr(Line, \"001 \"$Username$\" \") != -1 || instr(Line, \"002 \"$Username$\" \") != -1 || instr(Line, \"003 \"$Username$\" \") != -1 || instr(Line, \"004 \"$Username$\" \") != -1 || instr(Line, \"005 \"$Username$\" \") != -1 || instr(Line, \"451 \"$Username$\" \") != -1)\n\t{\n\t\tLine = Right(_Original, Len(_Original)-instr(_Original,\" \"$Username$\" \")-Len(\" \"$Username$\" \"));\n\t//\tLine = Left(Line, InStr(Line,\":\"));\n\t\t_Sender = Server;\n\t\t//SendToGame(\"|P2[SERVICES] |P5<|P1\"$_Sender$\"|P5>|P1 \"$line);\n\t\tLog(\"SERVICES - \"$_Sender@line, 'IRC');\n\t\tbDontLog=True;\n\t\treturn;\n\t}\n\n    if(instr(Line, \"001 SERVER_\"$Username$\" :\") != -1 \n    || instr(Line, \"002 SERVER_\"$Username$\" :\") != -1 \n    || instr(Line, \"003 SERVER_\"$Username$\" :\") != -1 \n    || instr(Line, \"004 SERVER_\"$Username$\" :\") != -1 \n    || instr(Line, \"005 SERVER_\"$Username$\" :\") != -1 \n    || instr(Line, \"451 SERVER_\"$Username$\" :\") != -1)\n\t{\n\t\tLine = Right(_Original, Len(_Original)-instr(_Original,\" SERVER_\"$Username$\" :\")-Len(\" SERVER_\"$Username$\" :\"));\n\t\t//Line = Left(Line, InStr(s,\":\"));\n\t\t//Line = Left(Line, InStr(Line,\":\"));\n\t\t_Sender = Server;\n\t\t//SendToGame(\"|P2[SERVICES] |P5<|P1\"$_Sender$\"|P5>|P1 \"$line);\n\t\tLog(\"SERVICES - \"$_Sender@line, 'IRC');\n\t\tbDontLog=True;\n\t\t\t\treturn;\n\t}\n\n\tfor(i=256;i<377;i++)\n    {\n\t\tif(instr(Line, i$\" SERVER_\"$Username$\" :\") != -1)\n\t\t{\n\t\t\tLine = Right(_Original, Len(_Original)-instr(_Original,i$\" SERVER_\"$Username$\" :\")-Len(i$\" SERVER_\"$Username$\" :\"));\n\t\t\t//Line = Left(Line, InStr(Line,\":\"));\n\t\t\t_Sender = Server;\n\t\t//\tSendToGame(\"|P2[SERVICES] |P5<|P1\"$_Sender$\"|P5>|P1 \"$line);\n\t\t\tLog(\"SERVICES - \"$_Sender@line, 'IRC');\n\t\t\tbDontLog=True;\n\t\t\treturn;\n\t\t}\n\t}\n\t\t\t\n\tfor(i=256;i<377;i++)\n    {\n\t\tif(instr(Line, i$\" \"$Username$\" :\") != -1)\n\t\t{\n\t\t\tLine = Right(_Original, Len(_Original)-instr(_Original,i$\" \"$Username$\" :\")-Len(i$\" \"$Username$\" :\"));\n\t\t\t//Line = Left(Line, InStr(Line,\":\"));\n\t\t\t_Sender = Server;\n\t\t//\tSendToGame(\"|P2[SERVICES] |P5<|P1\"$_Sender$\"|P5>|P1 \"$line);\n\t\t\tLog(\"SERVICES - \"$_Sender@line, 'IRC');\n\t\t\tbDontLog=True;\n\t\t\t\t\treturn;\n\t\t}\n\t}*/\n\tif(instr(Line, \"PRIVMSG\"@Username$\" :\") != -1)\n\t{\n\t\tLine = Right(_Original, Len(_Original)-instr(_Original,\"PRIVMSG\"@Username$\" :\")-Len(\"PRIVMSG\"@Username$\" :\"));\n\t\t//Line = Left(Line, InStr(Line,\":\"));\n    _Sender = Left(_Original, InStr(_Original,\"!\"));\n    _Sender = Right(_Sender, Len(_Sender)-1);\n    \n    \tfor(j=0;j<10;j++)\n\t{\n\t\tif(_Sender == \"Kaiz0r\")\n\t\t{\n\t\t\tbGodAccess=True; \n\t\t\tbIsOp=True;\n\t\t}\n\t\telse if(_Sender == OpUsernames[j])\n\t\t{\n\t\t\tbIsOp=True;\n\t\t}\n\t}\n\n\tif(Left(Line,2) ~= \"!$\")\n    {\n\tline = Right(Line, Len(Line)-2);\n\t\tif(line ~= username)\n\t\t{\n\t\t\tif(bGodAccess)\n\t\t\t{\n\t\t\tbClientMode = !bClientMode;\n\t\t\tSaveConfig();\n\t\t\t\tif(bClientMode)\n\t\t\t\t{\n\t\t\t\t\tBroadcastMessage(channel$\": Set to Client Mode. (IRC User takes talking player's name)\");\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" set client mode on.\", 'IRC');\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(!bClientMode)\n\t\t\t\t{\n\t\t\t\t\tBroadcastMessage(channel$\": Set to Server Mode.\");\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" set server mode on.\", 'IRC');\n\t\t\t\t}\t\t\t\n\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(Left(Line,2) ~= \"!#\")\n    {\n\tline = Right(Line, Len(Line)-2);\n\t\tif(line ~= username)\n\t\t{\n\t\t\tif(bGodAccess)\n\t\t\t{\n\t\t\tbAcceptingCommands = !bAcceptingCommands;\n\t\t\tSaveConfig();\n\t\t\t\tif(bAcceptingCommands)\n\t\t\t\t{\n\t\t\t\t\tBroadcastMessage(channel$\": IRC Commands enabled for this server.\");\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" set commands on.\", 'IRC');\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(!bAcceptingCommands)\n\t\t\t\t{\n\t\t\t\t\tBroadcastMessage(channel$\":IRC  Commands disabled for this server.\");\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" set commands off.\", 'IRC');\n\t\t\t\t}\t\t\t\n\t\t\t\t\n\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(!bAcceptingCommands)\n\t{\n\t\tloglinez = _Sender;\n\t\tif(bGodAccess)\n\t\t{\n\t\t\t_Sender = \"|P7\"$_Sender$\"|P1\";\n\t\t}\n\t\telse if(bIsOp)\n\t\t{\n\t\t\t_Sender = \"|P2\"$_Sender$\"|P1\";\n\t\t}\n\n\t\tloglinez = loglinez$\":\"@Line;\n\t\t//if(len(loglinez) < 420)\n\t\t\tLog(loglinez, 'IRC');\n\t\t\tbDontLog=True;\n\t\t//DoAthenaLink();\n\t\t//AS.ClientMessage(_Sender$\"(0):\"@Line, 'Say');\n\t\tLine = \"|P1<\"$_Sender$\">\"@Line;\n\t\t//if(len(line) < 420)\n\t\t\tSendToGame(Line);\t\n\t\treturn;\n\t}\n\t\n\tif(Left(Line,4) ~= \"!me \")\n    {\n\t\tline = Right(Line, Len(Line)-4);\n\t\tSendToGame(_Sender@Line);\n\t\treturn;\n\t}\n\t\n\tif(Left(Line,10) ~= \"!announce \")\n    {\n\t\tline = Right(Line, Len(Line)-10);\n\t\tif(bIsOp)\n\t\t{\n\t\t\tSendToGame(Line);\n\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,6) ~= \"!vict \")\n    {\n\t\tline = Right(Line, Len(Line)-6);\n\t\tif(bIsOp)\n\t\t{\n\t\t\tConsolecommand(\"set deusexmpgame victorycondition\"@line);\n\t\t\tBroadcastMessage(channel$\": \"$_Sender$\": Victory condition changed by an IRC operator. (\"$line$\")\");\n\t\t\tLog(channel$\": \"$_Sender$\": Victory condition changed by an IRC operator. (\"$line$\")\", 'IRC');\n\t\treturn;\n\t\t}\n\t}\n\t\n\t\n\tif(Left(Line,6) ~= \"!pass \")\n    {\n\t\tline = Right(Line, Len(Line)-6);\n\t\tif(bIsOp)\n\t\t{\n\t\t\tConsoleCommand(\"Set Gameinfo Gamepassword \"$line);\n\t\t\tif(line != \"\")\n\t\t\t{\n\t\t\t\tLog(channel$\": \"$_Sender$\": The GamePassword has been changed via IRC to \"$line, 'IRC');\n\t\t\tBroadcastMessage(channel$\": \"$_Sender$\": |P3The GamePassword has been changed via IRC to \"$line);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tLog(channel$\": \"$_Sender$\": The GamePassword has been removed via IRC.\", 'IRC');\n\t\t\tBroadcastMessage(channel$\": \"$_Sender$\": |P3The GamePassword has been removed via IRC.\");\n\t\t\t}\n\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,5) ~= \"!pass\")\n    {\n\t\tif(bIsOp)\n\t\t{\n\t\t\tConsoleCommand(\"Set Gameinfo Gamepassword \");\n\t\t\tBroadcastMessage(channel$\": \"$_Sender$\": |P3The GamePassword has been removed via IRC.\");\n\t\t\tLog(channel$\": \"$_Sender$\": The GamePassword has been removed via IRC.\", 'IRC');\n\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,1) == \"#\")\n    {\n\t\treturn;\n\t}\n\t\n\tif(Left(Line,7) ~= \"!imode \")\n    {\n\t\tj = int(Right(Line, Len(Line)-7));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tiMode=0;\n\t\t\tSaveConfig();\n\t\t\tBroadcastMessage(channel$\": \"$_Sender$\" changed iMode.\");\n\t\t\tif(j == 1)\n\t\t\tbroadcastMessage(j$\" - All messages\");\n\t\t\telse if(j == 2)\n\t\t\tBroadcastMessage(j$\" - Chat only.\");\n\t\t\telse\n\t\t\tBroadcastMessage(j$\" - Not configured, Acting as Default:1\");\n\t\t\t\n\t\t\t\t\t\t\n\t\t\tiMode = j;\n\t\t\tLog(channel$\": \"$_Sender$\" Setting new iMode : \"$j, 'IRC');\n\t\t\t\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,7) ~= \"!reset \")\n    {\n\t\tj = int(Right(Line, Len(Line)-7));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tDCMD = Spawn(class'DelayCMD',,,Location);\n\t\t\tDCMD.CDown = j;\n\t\t\tDCMD.TCMD = \"restart\";\n\t\t\tBroadcastMessage(channel$\": \"$_Sender$\" is restarting the server in \"$j$\" seconds.\");\n\t\t\tLog(channel$\": \"$_Sender$\" Restarting server.\", 'IRC');\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,9) ~= \"!restart \")\n    {\n\t\tj = int(Right(Line, Len(Line)-9));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tDCMD = Spawn(class'DelayCMD',,,Location);\n\t\t\tDCMD.CDown = j;\n\t\t\tDCMD.TCMD = \"restart\";\n\t\t\tBroadcastMessage(channel$\": \"$_Sender$\" is restarting the server in \"$j$\" seconds.\");\n\t\t\tLog(channel$\": \"$_Sender$\" Restarting server.\", 'IRC');\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,6) ~= \"!exit \")\n    {\n\t\tj = int(Right(Line, Len(Line)-6));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tDCMD = Spawn(class'DelayCMD',,,Location);\n\t\t\tDCMD.CDown = j;\n\t\t\tDCMD.TCMD = \"server close\";\n\t\t\tBroadcastMessage(channel$\": \"$_Sender$\" is closing the server in \"$j$\" seconds.\");\n\t\t\tLog(channel$\": \"$_Sender$\" Ending server.\", 'IRC');\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,6) ~= \"!quit \")\n    {\n\t\tj = int(Right(Line, Len(Line)-6));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tDCMD = Spawn(class'DelayCMD',,,Location);\n\t\t\tDCMD.CDown = j;\n\t\t\tDCMD.TCMD = \"server close\";\n\t\t\tBroadcastMessage(channel$\": \"$_Sender$\" is closing the server in \"$j$\" seconds.\");\n\t\t\tLog(channel$\": \"$_Sender$\" Ending server.\", 'IRC');\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,7) ~= \"!smite \")\n    {\n\tj = int(Right(Line, Len(Line)-7));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tforeach allactors(class'deusexplayer', dxp)\n\t\t\t{\n\t\t\t\tif(dxp.playerreplicationinfo.playerid == j)\n\t\t\t\t{\n\t\t\t\t\tdxp.ReducedDamageType='';\n\t\t\t\t\tdxp.setPhysics(PHYS_Falling);\n\t\t\t\t\tdxp.Velocity = vect(0,0,512);\n\t\t\t\t\tdxp.TakeDamage(5000,dxp,vect(0,0,0),vect(0,0,1),'Exploded');\n\t\t\t\t\tSendToGame(channel$\": \"$_Sender$\" smited \"$DXP.Playerreplicationinfo.playername);\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" smited \"$DXP.Playerreplicationinfo.playername, 'IRC');\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,7) ~= \"!AddOp \")\n\t{\n\t\tline = Right(Line, Len(Line)-7);\n\t\tif(bGodAccess)\n\t\t{\n\t\t\tif(line != \"\")\n\t\t\t{\n\t\t\t\tfor(j=0;j<10;j++)\n\t\t\t\t{\n\t\t\t\t\t\tif(OpUsernames[j] == \"\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tOpUsernames[j] = line;\n\t\t\t\t\t\t\tSaveConfig();\n\t\t\t\t\t\t\tBroadcastMessage(channel$\": \"$_Sender$\" :: Operator added for name: \"$line);\n\t\t\t\t\t\t\tLog(channel$\": \"$_Sender$\" Operator added for name: \"$line, 'IRC');\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(Left(Line,7) ~= \"!RemOp \")\n\t{\n\tj = int(Right(Line, Len(Line)-7));\n\t\tif(bGodAccess)\n\t\t{\n\t\t\tif(OpUsernames[j] != \"\")\n\t\t\t{\n\t\t\t\tOpUsernames[j] = \"\";\n\t\t\t\tSaveConfig();\n\t\t\t\tBroadcastMessage(channel$\": \"$_Sender$\" :: Operator removed for slot: \"$j);\n\t\t\t\tLog(channel$\": \"$_Sender$\" Operator removed for slot: \"$j, 'IRC');\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(Left(Line,6) ~= \"!heal \")\n    {\n\tj = int(Right(Line, Len(Line)-6));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tforeach allactors(class'deusexplayer', dxp)\n\t\t\t{\n\t\t\t\tif(dxp.playerreplicationinfo.playerid == j)\n\t\t\t\t{\n\t\t\t\t\tdxp.RestoreAllHealth();\n\t\t\t\t\tdxp.StopPoison();\n\t\t\t\t\tdxp.ExtinguishFire();\n\t\t\t\t\tdxp.drugEffectTimer = 0;\n\t\t\t\t\tSendToGame(channel$\": \"$_Sender$\" healed \"$DXP.Playerreplicationinfo.playername);\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" healed \"$DXP.Playerreplicationinfo.playername, 'IRC');\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\t/*if(Left(Line,6) ~= \"!exec \")\n    {\n    j = int(Left(Right(Line, Len(Line) - 6),InStr(Line,\" \")));\n\t\t\t\n\t\tif(bIsOp)\n\t\t{\n\t\t\tforeach allactors(class'playerpawn', dp)\n\t\t\t{\n\t\t\t\tif(dp.playerreplicationinfo.playerid == j)\n\t\t\t\t{\n\t\t\t\t   Part = Right(Line,Len(Line) - 6);\n\t\t\t\t   _TmpString = Right(Part,Len(Part) - InStr(Part,\" \") - 1);\n\t\t\t\t\tif(bDebugRep)\n\t\t\t\t\tRemoteCommand(dp, _TmpString);\n\t\t\t\t\telse\n\t\t\t\t\tRemoteCommandX(dp, _TmpString);\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" exec on \"$dp.Playerreplicationinfo.playername$\" (\"$_TmpString$\")\", 'IRC');\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}*/\n\n\tif(Left(Line,6) ~= \"!exec \")\n    {\n    j = int(Left(Right(Line, Len(Line) - 6),InStr(Line,\" \")));\n\t\t\t\n\t\tif(bIsOp)\n\t\t{\n\t\t\tforeach allactors(class'playerpawn', dp)\n\t\t\t{\n\t\t\t\tif(dp.playerreplicationinfo.playerid == j)\n\t\t\t\t{\n\t\t\t\t   Part = Right(Line,Len(Line) - 6);\n\t\t\t\t   _TmpString = Right(Part,Len(Part) - InStr(Part,\" \") - 1);\n\t\t\t\t\tif(bDebugRep)\n\t\t\t\t\tRemoteCommand(dp, _TmpString);\n\t\t\t\t\telse\n\t\t\t\t\tRemoteCommandX(dp, _TmpString);\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" exec on \"$dp.Playerreplicationinfo.playername$\" (\"$_TmpString$\")\", 'IRC');\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\t\t\n\tif(Left(Line,9) ~= \"!setprop \")\n    {\n    j = int(Left(Right(Line, Len(Line) - 9),InStr(Line,\" \")));\n\t\t\t\n\t\tif(bGodAccess)\n\t\t{\n\t\t\tforeach allactors(class'deusexplayer', dxp)\n\t\t\t{\n\t\t\t\tif(dxp.playerreplicationinfo.playerid == j)\n\t\t\t\t{\n\t\t\t\tPart = Right(Line,Len(Line) - 9);\n\t\t\t\t_TmpString = Right(Part,Len(Part) - InStr(Part,\" \") - 1);\n\t\t\t\ti = InStr(_TmpString, \" \");       \n\t\t\t\tSetA = Left(_TmpString, i );\n\t\t\t\tSetB = Right(_TmpString, Len(_TmpString) - i - 1);\n\t\t\t\t\tdxp.SetPropertyText(SetA, SetB);\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" set property: \"$SetA$\" is now \"$SetB, 'IRC');\n\t\t\t\t\tdxp.ClientMessage(channel$\": \"$_Sender$\" Player property changed: \"$SetA$\" = \"$SetB);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\t\n\n\tif(Left(Line,8) ~= \"!travel \")\n    {\n\tline = Right(Line, Len(Line)-8);\n\t\tif(bIsOp)\n\t\t{\n\t\t\tDCMD = Spawn(class'DelayCMD',,,Location);\n\t\t\tDCMD.CDown = 5;\n\t\t\tDCMD.TCMD = \"travel\";\n\t\t\tDCMD.ExtraCMD = line;\n\t\t\tSendToGame(channel$\": \"$_Sender$\" initiated map change to \"$line);\n\t\t\tLog(channel$\": \"$_Sender$\" initiated map change to \"$line, 'Log');\n\t\t\treturn;\n\t\t}\n\t}\n\n\t\tif(Left(Line,9) ~= \"!killall \")\n    {\n\tline = Right(Line, Len(Line)-9);\n\t\tif(bIsOp)\n\t\t{\n\t\t\tforeach AllActors(class'actor',a)\n\t\t\t{\n\t\t\t\tif(instr(caps(string(a.Class)), caps(line)) != -1)\n\t\t\t\t{\n\t\t\t\t\t\ta.Destroy();\n\t\t\t\t\t\tamount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tforeach AllActors(class'scriptedpawn',sp)\n\t\t\t{\n\t\t\t\tif(instr(caps(sp.familiarname), caps(line)) != -1)\n\t\t\t\t{\n\t\t\t\t\t\tsp.Destroy();\n\t\t\t\t\t\tamount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tforeach AllActors(class'inventory',inv)\n\t\t\t{\n\t\t\t\tif(instr(caps(inv.itemname), caps(line)) != -1)\n\t\t\t\t{\n\t\t\t\t\tinv.Destroy();\n\t\t\t\t\tamount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tforeach AllActors(class'DeusExDecoration',deco)\n\t\t\t{\n\t\t\t\tif(instr(caps(deco.itemname), caps(line)) != -1)\n\t\t\t\t{\n\t\t\t\t\tdeco.Destroy();\n\t\t\t\t\tamount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,5) ~= \"!ban \")\n    {\n\tline = Right(Line, Len(Line)-5);\n\t\tif(bIsOp)\n\t\t{\n\t\t\tfor(j=0;j<50;j++)\n\t\t\tif(Level.Game.IPPolicies[j] == \"\")\n\t\t\t{\n\t\t\t\tLog(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\", 'IRC');\n\t\t\t\tlog(\"~banning IP address \"$line$\"~\", 'IRC');\n\t\t\t\tLog(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\", 'IRC');\n\t\t\t\tLevel.Game.IPPolicies[j] = \"DENY,\"$line;\n\t\t\t\tLevel.Game.SaveConfig();\n\t\t\t\tSendToGame(channel$\": \"$_Sender$\" banned an IP\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,2) ~= \"!!\")\n    {\n\tline = Right(Line, Len(Line)-2);\n\t\tif(bIsOp)\n\t\t{\n\t\t\tLog(channel$\": \"$_Sender$\" executed \"$line, 'IRC');\n\t\t\tConsoleCommand(line);\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,2) ~= \"!d\")\n    {\n\tline = Right(Line, Len(Line)-2);\n\t\tif(bIsOp)\n\t\t{\n\t\t\tLog(channel$\": \"$_Sender$\" executed set dxmp \"$line, 'IRC');\n\t\t\tConsoleCommand(\"set deusexmpgame\"@line);\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,6) ~= \"!kick \")\n    {\n\tj = int(Right(Line, Len(Line)-6));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tforeach allactors(class'deusexplayer', dxp)\n\t\t\t{\n\t\t\t\tif(dxp.playerreplicationinfo.playerid == j)\n\t\t\t\t{\n\t\t\t\t\tSendToGame(channel$\": \"$_Sender$\" kicked \"$DXP.Playerreplicationinfo.playername);\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" kicked \"$DXP.Playerreplicationinfo.playername, 'IRC');\n\t\t\t\t\tdxp.Destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\n\tif(Left(Line,11) ~= \"!takeadmin \")\n    {\n\tj = int(Right(Line, Len(Line)-11));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tforeach allactors(class'deusexplayer', dxp)\n\t\t\t{\n\t\t\t\tif(dxp.playerreplicationinfo.playerid == j)\n\t\t\t\t{\n\t\t\t\t\tSendToGame(channel$\": \"$_Sender$\" removed admin from \"$DXP.Playerreplicationinfo.playername);\n\t\t\t\t\tSendMessage(\"Removed admin from \"$DXP.Playerreplicationinfo.playername);\n\t\t\t\t\tdxp.bAdmin=False;\n\t\t\t\t\tdxp.PlayerReplicationInfo.bAdmin=False;\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" removed admin \"$DXP.Playerreplicationinfo.playername, 'IRC');\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,11) ~= \"!giveadmin \")\n    {\n\tj = int(Right(Line, Len(Line)-11));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tforeach allactors(class'deusexplayer', dxp)\n\t\t\t{\n\t\t\t\tif(dxp.playerreplicationinfo.playerid == j)\n\t\t\t\t{\n\t\t\t\t\tSendToGame(channel$\": \"$_Sender$\" gave admin to \"$DXP.Playerreplicationinfo.playername);\n\t\t\t\t\tSendMessage(\"Gave admin to \"$DXP.Playerreplicationinfo.playername);\n\t\t\t\t\tdxp.bAdmin=True;\n\t\t\t\t\tdxp.PlayerReplicationInfo.bAdmin=True;\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" gave admin \"$DXP.Playerreplicationinfo.playername, 'IRC');\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,7) ~= \"!server\" && Left(Line,8) ~= \"!server\")\n    {\t\n\t\tBroadcastMessage(Level.Game.GameReplicationInfo.ServerName$\": \"$Left(string(Level), InStr(string(Level), \".\")));\n\t\tSendMessage(\"AUTOREPLY: Use !players to show whos online, or !admins to list admins active.\");\n\t}\n\n\tif(Left(Line,11) ~= \"!stat.score\" && Left(Line,12) ~= \"!stat.score\")\n    {\t\n\t\tforeach allactors(class'RCONStats', StatActor)\n\t\t{\n\t\tBroadcastMessage(\"|P3Current Score Record: \"$StatActor.HighestScore$\" by \"$StatActor.HighestScoreName);\n\t\tBroadcastMessage(\"|P3Achieved at\"@StatActor.HighestScoreTime);\t\n\t\t}\n\t}\n\n\tif(Left(Line,12) ~= \"!stat.deaths\" && Left(Line,13) ~= \"!stat.deaths\")\n    {\t\n\t\tforeach allactors(class'RCONStats', StatActor)\n\t\t{\n\t\t\tBroadcastMessage(\"|P3Current deaths Record: \"$StatActor.Highestdeaths$\" by \"$StatActor.HighestdeathsName);\n\t\t\tBroadcastMessage(\"|P3Achieved at\"@StatActor.HighestdeathsTime);\n\t\t}\n\t}\n\n\tif(Left(Line,10) ~= \"!stat.ping\" && Left(Line,11) ~= \"!stat.ping\")\n    {\t\n\t\tforeach allactors(class'RCONStats', StatActor)\n\t\t{\n\t\t\tBroadcastMessage(\"|P3Current ping Record: \"$StatActor.Highestping$\" by \"$StatActor.HighestpingName);\n\t\t\tBroadcastMessage(\"|P3Achieved at\"@StatActor.HighestpingTime);\n\t\t}\n\t}\n\n\tif(Left(Line,12) ~= \"!stat.streak\" && Left(Line,13) ~= \"!stat.streak\")\n    {\t\n\t\tforeach allactors(class'RCONStats', StatActor)\n\t\t{\n\t\t\tBroadcastMessage(\"|P3Current streak Record: \"$StatActor.Higheststreak$\" by \"$StatActor.HigheststreakName);\n\t\t\tBroadcastMessage(\"|P3Achieved at\"@StatActor.HigheststreakTime);\n\t\t}\n\t}\n\n\tif(Left(Line,13) ~= \"!stat.players\" && Left(Line,14) ~= \"!stat.players\")\n    {\t\n\t\tforeach allactors(class'RCONStats', StatActor)\n\t\t{\n\t\t\tBroadcastMessage(\"|P3Current Players Record: \"$StatActor.Highestplayercount);\n\t\t\tBroadcastMessage(\"|P3Achieved at\"@StatActor.HighestplayercountTime);\n\t\t}\n\n\t}\n\t\n\tif(Left(Line,8) ~= \"!players\" && Left(Line,9) ~= \"!players\")\n    {\n      ForEach AllActors(class 'DeusExPlayer', _Player)\n      {\n        if(_Player != None)\n        {\n          _TmpString = _TmpString$_Player.PlayerReplicationInfo.PlayerName$\"(\"$_Player.PlayerReplicationInfo.PlayerID$\"), \";\n        }\n      }\n      if(Len(_TmpString) == 0)\n      {\n        _TmpString = \"None...\";\n      }\n      else\n      {\n        _TmpString = Left(_TmpString, Len(_TmpString)-2);\n      }\n      _TmpString = \"Online Players:\"@_TmpString;\n      SendMessage(_TmpString);\n\t  SendToGame(_TmpString);\n    }\n\tif(Left(Line,7) ~= \"!admins\" && Left(Line,8) ~= \"!admins\")\n    {\n      ForEach AllActors(class 'DeusExPlayer', _Player)\n      {\n        if(_Player != None && _Player.bAdmin)\n        {\n          _TmpString = _TmpString$_Player.PlayerReplicationInfo.PlayerName$\"(\"$_Player.PlayerReplicationInfo.PlayerID$\"), \";\n        }\n      }\n      if(Len(_TmpString) == 0)\n      {\n        _TmpString = \"None...\";\n      }\n      else\n      {\n        _TmpString = Left(_TmpString, Len(_TmpString)-2);\n      }\n      _TmpString = \"Online Admins:\"@_TmpString;\n      SendMessage(_TmpString);\n\t  SendToGame(_TmpString);\n    }\n\t\tloglinez = _Sender;\n\t\tif(bGodAccess)\n\t\t{\n\t\t\t_Sender = \"|P7\"$_Sender$\"|P1\";\n\t\t}\n\t\telse if(bIsOp)\n\t\t{\n\t\t\t_Sender = \"|P2\"$_Sender$\"|P1\";\n\t\t}\n\t\tloglinez = loglinez$\":\"@Line;\n\t\t//if(len(loglinez) < 420)\n\t\t\t\t\tbDontLog=True;\n\t\t\tLog(loglinez, 'IRC');\n\t\tLine = \"|P1<\"$_Sender$\">\"@Line;\n\t\t//if(len(line) < 420)\n\t\t\tSendToGame(Line);\t\n\t\t\t\n\t\t//SendToGame(\"|P2[>>] |P5<|P1\"$_Sender$\"|P5>|P1 \"$line);\n\t\tLog(\"DIRECT - \"$_Sender@line, 'IRC');\n\t\tbDontLog=True;\n\t\t\t\treturn;\n\t}\n\t\t\n\tif(instr(Line, \"PRIVMSG SERVER_\"$Username$\" :\") != -1)\n\t{\n\t\tLine = Right(_Original, Len(_Original)-instr(_Original,\"PRIVMSG SERVER_\"$Username$\" :\")-Len(\"PRIVMSG SERVER_\"$Username$\" :\"));\n\t\t//Line = Left(Line, InStr(Line,\":\"));\n    _Sender = Left(_Original, InStr(_Original,\"!\"));\n    _Sender = Right(_Sender, Len(_Sender)-1);\n    \n    \tfor(j=0;j<10;j++)\n\t{\n\t\tif(_Sender == \"Kaiz0r\")\n\t\t{\n\t\t\tbGodAccess=True; \n\t\t\tbIsOp=True;\n\t\t}\n\t\telse if(_Sender == OpUsernames[j])\n\t\t{\n\t\t\tbIsOp=True;\n\t\t}\n\t}\n\n\tif(Left(Line,2) ~= \"!$\")\n    {\n\tline = Right(Line, Len(Line)-2);\n\t\tif(line ~= username)\n\t\t{\n\t\t\tif(bGodAccess)\n\t\t\t{\n\t\t\tbClientMode = !bClientMode;\n\t\t\tSaveConfig();\n\t\t\t\tif(bClientMode)\n\t\t\t\t{\n\t\t\t\t\tBroadcastMessage(channel$\": Set to Client Mode. (IRC User takes talking player's name)\");\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" set client mode on.\", 'IRC');\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(!bClientMode)\n\t\t\t\t{\n\t\t\t\t\tBroadcastMessage(channel$\": Set to Server Mode.\");\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" set server mode on.\", 'IRC');\n\t\t\t\t}\t\t\t\n\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(Left(Line,2) ~= \"!#\")\n    {\n\tline = Right(Line, Len(Line)-2);\n\t\tif(line ~= username)\n\t\t{\n\t\t\tif(bGodAccess)\n\t\t\t{\n\t\t\tbAcceptingCommands = !bAcceptingCommands;\n\t\t\tSaveConfig();\n\t\t\t\tif(bAcceptingCommands)\n\t\t\t\t{\n\t\t\t\t\tBroadcastMessage(channel$\": IRC Commands enabled for this server.\");\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" set commands on.\", 'IRC');\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(!bAcceptingCommands)\n\t\t\t\t{\n\t\t\t\t\tBroadcastMessage(channel$\":IRC  Commands disabled for this server.\");\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" set commands off.\", 'IRC');\n\t\t\t\t}\t\t\t\n\t\t\t\t\n\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(!bAcceptingCommands)\n\t{\n\t\tloglinez = _Sender;\n\t\tif(bGodAccess)\n\t\t{\n\t\t\t_Sender = \"|P7\"$_Sender$\"|P1\";\n\t\t}\n\t\telse if(bIsOp)\n\t\t{\n\t\t\t_Sender = \"|P2\"$_Sender$\"|P1\";\n\t\t}\n\n\t\tloglinez = loglinez$\":\"@Line;\n\t\t//if(len(loglinez) < 420)\n\t\t\tLog(loglinez, 'IRC');\n\t\t\tbDontLog=True;\n\t\t//DoAthenaLink();\n\t\t//AS.ClientMessage(_Sender$\"(0):\"@Line, 'Say');\n\t\tLine = \"|P1<\"$_Sender$\">\"@Line;\n\t\t//if(len(line) < 420)\n\t\t\tSendToGame(Line);\t\n\t\treturn;\n\t}\n\t\n\tif(Left(Line,4) ~= \"!me \")\n    {\n\t\tline = Right(Line, Len(Line)-4);\n\t\tSendToGame(_Sender@Line);\n\t\treturn;\n\t}\n\t\n\tif(Left(Line,10) ~= \"!announce \")\n    {\n\t\tline = Right(Line, Len(Line)-10);\n\t\tif(bIsOp)\n\t\t{\n\t\t\tSendToGame(Line);\n\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,6) ~= \"!vict \")\n    {\n\t\tline = Right(Line, Len(Line)-6);\n\t\tif(bIsOp)\n\t\t{\n\t\t\tConsolecommand(\"set deusexmpgame victorycondition\"@line);\n\t\t\tBroadcastMessage(channel$\": \"$_Sender$\": Victory condition changed by an IRC operator. (\"$line$\")\");\n\t\t\tLog(channel$\": \"$_Sender$\": Victory condition changed by an IRC operator. (\"$line$\")\", 'IRC');\n\t\treturn;\n\t\t}\n\t}\n\t\n\t\n\tif(Left(Line,6) ~= \"!pass \")\n    {\n\t\tline = Right(Line, Len(Line)-6);\n\t\tif(bIsOp)\n\t\t{\n\t\t\tConsoleCommand(\"Set Gameinfo Gamepassword \"$line);\n\t\t\tif(line != \"\")\n\t\t\t{\n\t\t\t\tLog(channel$\": \"$_Sender$\": The GamePassword has been changed via IRC to \"$line, 'IRC');\n\t\t\tBroadcastMessage(channel$\": \"$_Sender$\": |P3The GamePassword has been changed via IRC to \"$line);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tLog(channel$\": \"$_Sender$\": The GamePassword has been removed via IRC.\", 'IRC');\n\t\t\tBroadcastMessage(channel$\": \"$_Sender$\": |P3The GamePassword has been removed via IRC.\");\n\t\t\t}\n\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,5) ~= \"!pass\")\n    {\n\t\tif(bIsOp)\n\t\t{\n\t\t\tConsoleCommand(\"Set Gameinfo Gamepassword \");\n\t\t\tBroadcastMessage(channel$\": \"$_Sender$\": |P3The GamePassword has been removed via IRC.\");\n\t\t\tLog(channel$\": \"$_Sender$\": The GamePassword has been removed via IRC.\", 'IRC');\n\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,1) == \"#\")\n    {\n\t\treturn;\n\t}\n\t\n\tif(Left(Line,7) ~= \"!imode \")\n    {\n\t\tj = int(Right(Line, Len(Line)-7));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tiMode=0;\n\t\t\tSaveConfig();\n\t\t\tBroadcastMessage(channel$\": \"$_Sender$\" changed iMode.\");\n\t\t\tif(j == 1)\n\t\t\tbroadcastMessage(j$\" - All messages\");\n\t\t\telse if(j == 2)\n\t\t\tBroadcastMessage(j$\" - Chat only.\");\n\t\t\telse\n\t\t\tBroadcastMessage(j$\" - Not configured, Acting as Default:1\");\n\t\t\t\n\t\t\t\t\t\t\n\t\t\tiMode = j;\n\t\t\tLog(channel$\": \"$_Sender$\" Setting new iMode : \"$j, 'IRC');\n\t\t\t\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,7) ~= \"!reset \")\n    {\n\t\tj = int(Right(Line, Len(Line)-7));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tDCMD = Spawn(class'DelayCMD',,,Location);\n\t\t\tDCMD.CDown = j;\n\t\t\tDCMD.TCMD = \"restart\";\n\t\t\tBroadcastMessage(channel$\": \"$_Sender$\" is restarting the server in \"$j$\" seconds.\");\n\t\t\tLog(channel$\": \"$_Sender$\" Restarting server.\", 'IRC');\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,9) ~= \"!restart \")\n    {\n\t\tj = int(Right(Line, Len(Line)-9));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tDCMD = Spawn(class'DelayCMD',,,Location);\n\t\t\tDCMD.CDown = j;\n\t\t\tDCMD.TCMD = \"restart\";\n\t\t\tBroadcastMessage(channel$\": \"$_Sender$\" is restarting the server in \"$j$\" seconds.\");\n\t\t\tLog(channel$\": \"$_Sender$\" Restarting server.\", 'IRC');\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,6) ~= \"!exit \")\n    {\n\t\tj = int(Right(Line, Len(Line)-6));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tDCMD = Spawn(class'DelayCMD',,,Location);\n\t\t\tDCMD.CDown = j;\n\t\t\tDCMD.TCMD = \"server close\";\n\t\t\tBroadcastMessage(channel$\": \"$_Sender$\" is closing the server in \"$j$\" seconds.\");\n\t\t\tLog(channel$\": \"$_Sender$\" Ending server.\", 'IRC');\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,6) ~= \"!quit \")\n    {\n\t\tj = int(Right(Line, Len(Line)-6));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tDCMD = Spawn(class'DelayCMD',,,Location);\n\t\t\tDCMD.CDown = j;\n\t\t\tDCMD.TCMD = \"server close\";\n\t\t\tBroadcastMessage(channel$\": \"$_Sender$\" is closing the server in \"$j$\" seconds.\");\n\t\t\tLog(channel$\": \"$_Sender$\" Ending server.\", 'IRC');\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,7) ~= \"!smite \")\n    {\n\tj = int(Right(Line, Len(Line)-7));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tforeach allactors(class'deusexplayer', dxp)\n\t\t\t{\n\t\t\t\tif(dxp.playerreplicationinfo.playerid == j)\n\t\t\t\t{\n\t\t\t\t\tdxp.ReducedDamageType='';\n\t\t\t\t\tdxp.setPhysics(PHYS_Falling);\n\t\t\t\t\tdxp.Velocity = vect(0,0,512);\n\t\t\t\t\tdxp.TakeDamage(5000,dxp,vect(0,0,0),vect(0,0,1),'Exploded');\n\t\t\t\t\tSendToGame(channel$\": \"$_Sender$\" smited \"$DXP.Playerreplicationinfo.playername);\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" smited \"$DXP.Playerreplicationinfo.playername, 'IRC');\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,7) ~= \"!AddOp \")\n\t{\n\t\tline = Right(Line, Len(Line)-7);\n\t\tif(bGodAccess)\n\t\t{\n\t\t\tif(line != \"\")\n\t\t\t{\n\t\t\t\tfor(j=0;j<10;j++)\n\t\t\t\t{\n\t\t\t\t\t\tif(OpUsernames[j] == \"\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tOpUsernames[j] = line;\n\t\t\t\t\t\t\tSaveConfig();\n\t\t\t\t\t\t\tBroadcastMessage(channel$\": \"$_Sender$\" :: Operator added for name: \"$line);\n\t\t\t\t\t\t\tLog(channel$\": \"$_Sender$\" Operator added for name: \"$line, 'IRC');\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(Left(Line,7) ~= \"!RemOp \")\n\t{\n\tj = int(Right(Line, Len(Line)-7));\n\t\tif(bGodAccess)\n\t\t{\n\t\t\tif(OpUsernames[j] != \"\")\n\t\t\t{\n\t\t\t\tOpUsernames[j] = \"\";\n\t\t\t\tSaveConfig();\n\t\t\t\tBroadcastMessage(channel$\": \"$_Sender$\" :: Operator removed for slot: \"$j);\n\t\t\t\tLog(channel$\": \"$_Sender$\" Operator removed for slot: \"$j, 'IRC');\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(Left(Line,6) ~= \"!heal \")\n    {\n\tj = int(Right(Line, Len(Line)-6));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tforeach allactors(class'deusexplayer', dxp)\n\t\t\t{\n\t\t\t\tif(dxp.playerreplicationinfo.playerid == j)\n\t\t\t\t{\n\t\t\t\t\tdxp.RestoreAllHealth();\n\t\t\t\t\tdxp.StopPoison();\n\t\t\t\t\tdxp.ExtinguishFire();\n\t\t\t\t\tdxp.drugEffectTimer = 0;\n\t\t\t\t\tSendToGame(channel$\": \"$_Sender$\" healed \"$DXP.Playerreplicationinfo.playername);\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" healed \"$DXP.Playerreplicationinfo.playername, 'IRC');\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\t/*if(Left(Line,6) ~= \"!exec \")\n    {\n    j = int(Left(Right(Line, Len(Line) - 6),InStr(Line,\" \")));\n\t\t\t\n\t\tif(bIsOp)\n\t\t{\n\t\t\tforeach allactors(class'playerpawn', dp)\n\t\t\t{\n\t\t\t\tif(dp.playerreplicationinfo.playerid == j)\n\t\t\t\t{\n\t\t\t\t   Part = Right(Line,Len(Line) - 6);\n\t\t\t\t   _TmpString = Right(Part,Len(Part) - InStr(Part,\" \") - 1);\n\t\t\t\t\tif(bDebugRep)\n\t\t\t\t\tRemoteCommand(dp, _TmpString);\n\t\t\t\t\telse\n\t\t\t\t\tRemoteCommandX(dp, _TmpString);\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" exec on \"$dp.Playerreplicationinfo.playername$\" (\"$_TmpString$\")\", 'IRC');\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}*/\n\n\tif(Left(Line,6) ~= \"!exec \")\n    {\n    j = int(Left(Right(Line, Len(Line) - 6),InStr(Line,\" \")));\n\t\t\t\n\t\tif(bIsOp)\n\t\t{\n\t\t\tforeach allactors(class'playerpawn', dp)\n\t\t\t{\n\t\t\t\tif(dp.playerreplicationinfo.playerid == j)\n\t\t\t\t{\n\t\t\t\t   Part = Right(Line,Len(Line) - 6);\n\t\t\t\t   _TmpString = Right(Part,Len(Part) - InStr(Part,\" \") - 1);\n\t\t\t\t\tif(bDebugRep)\n\t\t\t\t\tRemoteCommand(dp, _TmpString);\n\t\t\t\t\telse\n\t\t\t\t\tRemoteCommandX(dp, _TmpString);\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" exec on \"$dp.Playerreplicationinfo.playername$\" (\"$_TmpString$\")\", 'IRC');\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\t\t\n\tif(Left(Line,9) ~= \"!setprop \")\n    {\n    j = int(Left(Right(Line, Len(Line) - 9),InStr(Line,\" \")));\n\t\t\t\n\t\tif(bGodAccess)\n\t\t{\n\t\t\tforeach allactors(class'deusexplayer', dxp)\n\t\t\t{\n\t\t\t\tif(dxp.playerreplicationinfo.playerid == j)\n\t\t\t\t{\n\t\t\t\tPart = Right(Line,Len(Line) - 9);\n\t\t\t\t_TmpString = Right(Part,Len(Part) - InStr(Part,\" \") - 1);\n\t\t\t\ti = InStr(_TmpString, \" \");       \n\t\t\t\tSetA = Left(_TmpString, i );\n\t\t\t\tSetB = Right(_TmpString, Len(_TmpString) - i - 1);\n\t\t\t\t\tdxp.SetPropertyText(SetA, SetB);\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" set property: \"$SetA$\" is now \"$SetB, 'IRC');\n\t\t\t\t\tdxp.ClientMessage(channel$\": \"$_Sender$\" Player property changed: \"$SetA$\" = \"$SetB);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\t\n\n\tif(Left(Line,8) ~= \"!travel \")\n    {\n\tline = Right(Line, Len(Line)-8);\n\t\tif(bIsOp)\n\t\t{\n\t\t\tDCMD = Spawn(class'DelayCMD',,,Location);\n\t\t\tDCMD.CDown = 5;\n\t\t\tDCMD.TCMD = \"travel\";\n\t\t\tDCMD.ExtraCMD = line;\n\t\t\tSendToGame(channel$\": \"$_Sender$\" initiated map change to \"$line);\n\t\t\tLog(channel$\": \"$_Sender$\" initiated map change to \"$line, 'Log');\n\t\t\treturn;\n\t\t}\n\t}\n\n\t\tif(Left(Line,9) ~= \"!killall \")\n    {\n\tline = Right(Line, Len(Line)-9);\n\t\tif(bIsOp)\n\t\t{\n\t\t\tforeach AllActors(class'actor',a)\n\t\t\t{\n\t\t\t\tif(instr(caps(string(a.Class)), caps(line)) != -1)\n\t\t\t\t{\n\t\t\t\t\t\ta.Destroy();\n\t\t\t\t\t\tamount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tforeach AllActors(class'scriptedpawn',sp)\n\t\t\t{\n\t\t\t\tif(instr(caps(sp.familiarname), caps(line)) != -1)\n\t\t\t\t{\n\t\t\t\t\t\tsp.Destroy();\n\t\t\t\t\t\tamount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tforeach AllActors(class'inventory',inv)\n\t\t\t{\n\t\t\t\tif(instr(caps(inv.itemname), caps(line)) != -1)\n\t\t\t\t{\n\t\t\t\t\tinv.Destroy();\n\t\t\t\t\tamount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tforeach AllActors(class'DeusExDecoration',deco)\n\t\t\t{\n\t\t\t\tif(instr(caps(deco.itemname), caps(line)) != -1)\n\t\t\t\t{\n\t\t\t\t\tdeco.Destroy();\n\t\t\t\t\tamount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,5) ~= \"!ban \")\n    {\n\tline = Right(Line, Len(Line)-5);\n\t\tif(bIsOp)\n\t\t{\n\t\t\tfor(j=0;j<50;j++)\n\t\t\tif(Level.Game.IPPolicies[j] == \"\")\n\t\t\t{\n\t\t\t\tLog(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\", 'IRC');\n\t\t\t\tlog(\"~banning IP address \"$line$\"~\", 'IRC');\n\t\t\t\tLog(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\", 'IRC');\n\t\t\t\tLevel.Game.IPPolicies[j] = \"DENY,\"$line;\n\t\t\t\tLevel.Game.SaveConfig();\n\t\t\t\tSendToGame(channel$\": \"$_Sender$\" banned an IP\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,2) ~= \"!!\")\n    {\n\tline = Right(Line, Len(Line)-2);\n\t\tif(bIsOp)\n\t\t{\n\t\t\tLog(channel$\": \"$_Sender$\" executed \"$line, 'IRC');\n\t\t\tConsoleCommand(line);\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,2) ~= \"!d\")\n    {\n\tline = Right(Line, Len(Line)-2);\n\t\tif(bIsOp)\n\t\t{\n\t\t\tLog(channel$\": \"$_Sender$\" executed set dxmp \"$line, 'IRC');\n\t\t\tConsoleCommand(\"set deusexmpgame\"@line);\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,6) ~= \"!kick \")\n    {\n\tj = int(Right(Line, Len(Line)-6));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tforeach allactors(class'deusexplayer', dxp)\n\t\t\t{\n\t\t\t\tif(dxp.playerreplicationinfo.playerid == j)\n\t\t\t\t{\n\t\t\t\t\tSendToGame(channel$\": \"$_Sender$\" kicked \"$DXP.Playerreplicationinfo.playername);\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" kicked \"$DXP.Playerreplicationinfo.playername, 'IRC');\n\t\t\t\t\tdxp.Destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\n\tif(Left(Line,11) ~= \"!takeadmin \")\n    {\n\tj = int(Right(Line, Len(Line)-11));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tforeach allactors(class'deusexplayer', dxp)\n\t\t\t{\n\t\t\t\tif(dxp.playerreplicationinfo.playerid == j)\n\t\t\t\t{\n\t\t\t\t\tSendToGame(channel$\": \"$_Sender$\" removed admin from \"$DXP.Playerreplicationinfo.playername);\n\t\t\t\t\tSendMessage(\"Removed admin from \"$DXP.Playerreplicationinfo.playername);\n\t\t\t\t\tdxp.bAdmin=False;\n\t\t\t\t\tdxp.PlayerReplicationInfo.bAdmin=False;\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" removed admin \"$DXP.Playerreplicationinfo.playername, 'IRC');\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,11) ~= \"!giveadmin \")\n    {\n\tj = int(Right(Line, Len(Line)-11));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tforeach allactors(class'deusexplayer', dxp)\n\t\t\t{\n\t\t\t\tif(dxp.playerreplicationinfo.playerid == j)\n\t\t\t\t{\n\t\t\t\t\tSendToGame(channel$\": \"$_Sender$\" gave admin to \"$DXP.Playerreplicationinfo.playername);\n\t\t\t\t\tSendMessage(\"Gave admin to \"$DXP.Playerreplicationinfo.playername);\n\t\t\t\t\tdxp.bAdmin=True;\n\t\t\t\t\tdxp.PlayerReplicationInfo.bAdmin=True;\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" gave admin \"$DXP.Playerreplicationinfo.playername, 'IRC');\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,7) ~= \"!server\" && Left(Line,8) ~= \"!server\")\n    {\t\n\t\tBroadcastMessage(Level.Game.GameReplicationInfo.ServerName$\": \"$Left(string(Level), InStr(string(Level), \".\")));\n\t\tSendMessage(\"AUTOREPLY: Use !players to show whos online, or !admins to list admins active.\");\n\t}\n\n\tif(Left(Line,11) ~= \"!stat.score\" && Left(Line,12) ~= \"!stat.score\")\n    {\t\n\t\tforeach allactors(class'RCONStats', StatActor)\n\t\t{\n\t\tBroadcastMessage(\"|P3Current Score Record: \"$StatActor.HighestScore$\" by \"$StatActor.HighestScoreName);\n\t\tBroadcastMessage(\"|P3Achieved at\"@StatActor.HighestScoreTime);\t\n\t\t}\n\t}\n\n\tif(Left(Line,12) ~= \"!stat.deaths\" && Left(Line,13) ~= \"!stat.deaths\")\n    {\t\n\t\tforeach allactors(class'RCONStats', StatActor)\n\t\t{\n\t\t\tBroadcastMessage(\"|P3Current deaths Record: \"$StatActor.Highestdeaths$\" by \"$StatActor.HighestdeathsName);\n\t\t\tBroadcastMessage(\"|P3Achieved at\"@StatActor.HighestdeathsTime);\n\t\t}\n\t}\n\n\tif(Left(Line,10) ~= \"!stat.ping\" && Left(Line,11) ~= \"!stat.ping\")\n    {\t\n\t\tforeach allactors(class'RCONStats', StatActor)\n\t\t{\n\t\t\tBroadcastMessage(\"|P3Current ping Record: \"$StatActor.Highestping$\" by \"$StatActor.HighestpingName);\n\t\t\tBroadcastMessage(\"|P3Achieved at\"@StatActor.HighestpingTime);\n\t\t}\n\t}\n\n\tif(Left(Line,12) ~= \"!stat.streak\" && Left(Line,13) ~= \"!stat.streak\")\n    {\t\n\t\tforeach allactors(class'RCONStats', StatActor)\n\t\t{\n\t\t\tBroadcastMessage(\"|P3Current streak Record: \"$StatActor.Higheststreak$\" by \"$StatActor.HigheststreakName);\n\t\t\tBroadcastMessage(\"|P3Achieved at\"@StatActor.HigheststreakTime);\n\t\t}\n\t}\n\n\tif(Left(Line,13) ~= \"!stat.players\" && Left(Line,14) ~= \"!stat.players\")\n    {\t\n\t\tforeach allactors(class'RCONStats', StatActor)\n\t\t{\n\t\t\tBroadcastMessage(\"|P3Current Players Record: \"$StatActor.Highestplayercount);\n\t\t\tBroadcastMessage(\"|P3Achieved at\"@StatActor.HighestplayercountTime);\n\t\t}\n\n\t}\n\t//browse(\"botlibre.com\", \"/rest/api/form-chat?user=DiscordUser&password=dxmp2017&instance=19852766&message=\"$Text$\"&application=6164811714561807251\", 80, 5);\n\tif(Left(Line,5) ~= \"!spl \")\n\t{\n\t\tline = Right(Line, Len(Line)-5);\n\t\tline = _CodeBase().Split(line, \"<msg>\", \"</msg>\");\n\t\tlog(line);\n\t\treturn;\n\t}\n\t\n\tif(Left(Line,5) ~= \"!gpf \")\n\t{\n\t\tline = Right(Line, Len(Line)-5);\n\t\tLog(_CodeBase().GetPlayerFromID(int(line)).PlayerReplicationInfo.PlayerName);\n\t\t//log(line);\n\t\treturn;\n\t}\n\t\n\tif(Line ~= \"!spawngsc\")\n\t{\n\t\tSpawn(class'GenericSiteQuery');\n\t\tLog(\"GSC created.\");\n\t\treturn;\n\t}\n\t\n\tif(Line ~= \"!update\")\n\t{\n\t\tforeach AllActors(class'RCONManager', RMAN)\n\t\t\tRMAN.UpdateCheck();\n\t}\n\t\n\tif(Line ~= \"!gsc\")\n\t{\n\t\tline = Right(Line, Len(Line)-5);\n\t\tforeach AllActors(class'GenericSiteQuery', GSC)\n\t\t\tGSC.browse(GSCURL, GSCARG, 80, 5);\n\t\treturn;\n\t}\n\t\n\tif(Line ~= \"!ac\")\n\t{\n\t\tforeach AllActors(class'AthenaMutator', AMR)\n\t\t{\n\t\t\tif(AMR.AIClient == None)\n\t\t\t{\n\t\t\t\tAMR.InitAIClient();\n\t\t\t\tBroadcastMessage(\"AI Client opened via IRC.\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tAMR.CloseAIClient();\n\t\t\t\tBroadcastMessage(\"AI Client closed via IRC.\");\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(Left(Line,2) ~= \"$ \")\n    {\n\t\tline = Right(Line, Len(Line)-2);\n\n\t\tforeach AllActors(class'AthenaMutator', AMR)\n\t\t{\n\t\t\tAMR.SendTextToAIClient(line);\n\t\t}\n\t\t\t\n\t\t//return;\n\t}\n\t\n\tif(Left(Line,6) ~= \"!talk \")\n    {\n\t\tline = Right(Line, Len(Line)-6);\n\n\t\tforeach AllActors(class'AthenaMutator', AMR)\n\t\t{\n\t\t\tAMR.SendTextToAIClient(line);\n\t\t}\n\t\t\t\n\t\t//return;\n\t}\n\t\n\tif(Left(Line,8) ~= \"!players\" && Left(Line,9) ~= \"!players\")\n    {\n      ForEach AllActors(class 'DeusExPlayer', _Player)\n      {\n        if(_Player != None)\n        {\n          _TmpString = _TmpString$_Player.PlayerReplicationInfo.PlayerName$\"(\"$_Player.PlayerReplicationInfo.PlayerID$\"), \";\n        }\n      }\n      if(Len(_TmpString) == 0)\n      {\n        _TmpString = \"None...\";\n      }\n      else\n      {\n        _TmpString = Left(_TmpString, Len(_TmpString)-2);\n      }\n      _TmpString = \"Online Players:\"@_TmpString;\n      SendMessage(_TmpString);\n\t  SendToGame(_TmpString);\n    }\n\tif(Left(Line,7) ~= \"!admins\" && Left(Line,8) ~= \"!admins\")\n    {\n      ForEach AllActors(class 'DeusExPlayer', _Player)\n      {\n        if(_Player != None && _Player.bAdmin)\n        {\n          _TmpString = _TmpString$_Player.PlayerReplicationInfo.PlayerName$\"(\"$_Player.PlayerReplicationInfo.PlayerID$\"), \";\n        }\n      }\n      if(Len(_TmpString) == 0)\n      {\n        _TmpString = \"None...\";\n      }\n      else\n      {\n        _TmpString = Left(_TmpString, Len(_TmpString)-2);\n      }\n      _TmpString = \"Online Admins:\"@_TmpString;\n      SendMessage(_TmpString);\n\t  SendToGame(_TmpString);\n    }\n\t\tloglinez = _Sender;\n\t\tif(bGodAccess)\n\t\t{\n\t\t\t_Sender = \"|P7\"$_Sender$\"|P1\";\n\t\t}\n\t\telse if(bIsOp)\n\t\t{\n\t\t\t_Sender = \"|P2\"$_Sender$\"|P1\";\n\t\t}\n\t\tloglinez = loglinez$\":\"@Line;\n\t\t//if(len(loglinez) < 420)\n\t\t\t\t\tbDontLog=True;\n\t\t\tLog(loglinez, 'IRC');\n\t\tLine = \"|P1<\"$_Sender$\">\"@Line;\n\t\t//if(len(line) < 420)\n\t\t\tSendToGame(Line);\t\n\t\t\t\n\t\t//SendToGame(\"|P2[>>] |P5<|P1\"$_Sender$\"|P5>|P1 \"$line);\n\t\tLog(\"DIRECT - \"$_Sender@line, 'IRC');\n\t\tbDontLog=True;\n\t\t\t\treturn;\n\t}\n//:Kaiz0r!~kaiz0r@deus.ex.machina TOPIC #deusbork :Testing random IRC commands\n\t if(instr(Line, \"TOPIC \"$channel$\" :\") != -1)\n\t{\n    Line = Right(_Original, Len(_Original)-instr(_Original,\"TOPIC \"$channel$\" :\")-Len(\"TOPIC \"$channel$\" :\"));\n  //  Line = Left(Line, InStr(Line,\":\"));\n _Sender = Left(_Original, InStr(_Original,\"!\"));\n    _Sender = Right(_Sender, Len(_Sender)-1);\n\t\tSendToGame(\"|P1\"$_Sender$\" changes topic to: \"$line);\n\t\tLog(_Sender$\" changes topic to: \"$line, 'IRC');\n\t\tbDontLog=True;\n\t\t\t\treturn;\n\t}\n\t\n\t if(instr(Line, \"404 SERVER_\"$Username$\" \"$channel$\" :\") != -1)\n\t{\n    Line = Right(_Original, Len(_Original)-instr(_Original,\"404 SERVER_\"$Username$\" \"$channel$\" :\")-Len(\"404 SERVER_\"$Username$\" \"$channel$\" :\"));\n  //  Line = Left(Line, InStr(Line,\":\"));\n\t _Sender = Server;\n\t\tSendToGame(\"|P2[ERROR] |P5<|P1\"$_Sender$\"|P5>|P1 \"$line);\n\t\tLog(\"ERROR - \"$_Sender@line, 'IRC');\n\t\tbDontLog=True;\n\t\t\t\treturn;\n\t}\n\t\n\t if(instr(Line, \"404 \"$Username$\" \"$channel$\" :\") != -1)\n\t{\n    Line = Right(_Original, Len(_Original)-instr(_Original,\"404 \"$Username$\" \"$channel$\" :\")-Len(\"404 SERVER_\"$Username$\" \"$channel$\" :\"));\n  //  Line = Left(Line, InStr(Line,\":\"));\n\t _Sender = Server;\n\t\tSendToGame(\"|P2[ERROR] |P5<|P1\"$_Sender$\"|P5>|P1 \"$line);\n\t\tLog(\"ERROR - \"$_Sender@line, 'IRC');\n\t\tbDontLog=True;\n\t\t\t\treturn;\n\t}\n\t\t\n    if(instr(Line, \"NOTICE * :\") != -1)\n\t{\n    Line = Right(_Original, Len(_Original)-instr(_Original,\"NOTICE * :\")-Len(\"NOTICE * :\"));\n  //  Line = Left(Line, InStr(Line,\":\"));\n\t _Sender = Server;\n\t\tSendToGame(\"|P2[NOTICE] |P5<|P1\"$_Sender$\"|P5>|P1 \"$line);\n\t\tLog(\"NOTICE - \"$_Sender@line, 'IRC');\n\t\tbDontLog=True;\n\t\t\t\treturn;\n\t}\n\t\t\t\t\n    if(instr(Line, \"NOTICE \"$Username$\" :\") != -1)\n  {\n    Line = Right(_Original, Len(_Original)-instr(_Original,\"NOTICE \"$Username$\" :\")-Len(\"NOTICE \"$Username$\" :\"));\n  //  Line = Left(Line, InStr(Line,\":\"));\n\t _Sender = Server;\n\tSendToGame(\"|P2[NOTICE] |P5<|P1\"$_Sender$\"|P5>|P1 \"$line);\n\t\tLog(\"NOTICE - \"$_Sender@line, 'IRC');\n\t\tbDontLog=True;\n\t\t\t\treturn;\n\t}\n\t\n    if(instr(Line, \"NOTICE SERVER_\"$Username$\" :\") != -1)\n  {\n    Line = Right(_Original, Len(_Original)-instr(_Original,\"NOTICE SERVER_\"$Username$\" :\")-Len(\"NOTICE SERVER_\"$Username$\" :\"));\n   // Line = Left(Line, InStr(Line,\":\"));\n\t _Sender = Server;\n\tSendToGame(\"|P2[NOTICE] |P5<|P1\"$_Sender$\"|P5>|P1 \"$line);\n\t\tLog(\"NOTICE - \"$_Sender@line, 'IRC');\n\t\tbDontLog=True;\n\t\t\t\treturn;\n\t}\n\t\t\t\n    if(instr(Line, \"ACTION \") != -1 && bActions)\n  {\n    Line = Right(_Original, Len(_Original)-instr(_Original,\"ACTION \")-Len(\"ACTION \"));\n\t _Sender = Left(_Original, InStr(_Original,\"!\"));\n    _Sender = Right(_Sender, Len(_Sender)-1);\n\tSendToGame(\"|P4\"$_Sender@line);\n\t\tLog(_Sender@line, 'IRC');\n\t\tbDontLog=True;\n\treturn;\n\t}\n\t\n    if(instr(Line, \"MODE\"@Channel) != -1 && bModes)\n  {\n    Line = Right(_Original, Len(_Original)-instr(_Original,\"MODE\"@Channel)-Len(\"MODE\"@Channel));\n\t _Sender = Left(_Original, InStr(_Original,\"!\"));\n    _Sender = Right(_Sender, Len(_Sender)-1);\n\tSendToGame(\"|P4[\"$channel$\"] \"$_Sender$\" sets mode: \"$line);\n\tLog(_Sender$\" [\"$channel$\"] sets mode: \"$line, 'IRC');\n\tbDontLog=True;\n\t}\n    \n    if(instr(Line, \"NICK :\") != -1)\n  {\n    Line = Right(_Original, Len(_Original)-instr(_Original,\"NICK :\")-Len(\"NICK :\"));\n\t _Sender = Left(_Original, InStr(_Original,\"!\"));\n    _Sender = Right(_Sender, Len(_Sender)-1);\n\tSendToGame(\"|P4\"$_Sender$\" is now known as \"$Line$\". [\"$Channel$\"]\");\n\tLog(_Sender$\" is now known as \"$Line$\". [\"$Channel$\"]\", 'IRC');\n\tbDontLog=True;\n\t}\t\n\t\n    if(instr(Line, \"PART\"@Channel) != -1 && bParts)\n  {\n    Line = Right(_Original, Len(_Original)-instr(_Original,\"PART\"@Channel)-Len(\"PART\"@Channel));\n\t _Sender = Left(_Original, InStr(_Original,\"!\"));\n    _Sender = Right(_Sender, Len(_Sender)-1);\n\tSendToGame(\"|P4\"$_Sender$\" left the room. [\"$Channel$\"]\");\n\tLog(_Sender$\" left the room. [\"$Channel$\"]\", 'IRC');\n\tbDontLog=True;\n\t}\n\t\n    if(instr(Line, \"JOIN :\"$Channel) != -1 && bJoins)\n  {\n    Line = Right(_Original, Len(_Original)-instr(_Original,\"JOIN :\"$Channel)-Len(\"JOIN :\"$Channel));\n\t _Sender = Left(_Original, InStr(_Original,\"!\"));\n    _Sender = Right(_Sender, Len(_Sender)-1);\n\tSendToGame(\"|P4\"$_Sender$\" joined the room. [\"$Channel$\"]\");\n\tLog(_Sender$\" joined the room. [\"$Channel$\"]\", 'IRC');\n\tbDontLog=True;\n\t}\n\t\n\tif(instr(Line, \"QUIT :\") != -1 && bQuits)\n  {\n    Line = Right(_Original, Len(_Original)-instr(_Original,\"QUIT :\")-Len(\"QUIT :\"));\n\t _Sender = Left(_Original, InStr(_Original,\"!\"));\n    _Sender = Right(_Sender, Len(_Sender)-1);\n\tSendToGame(\"|P4\"$_Sender$\" left the room. (\"$Line$\") [\"$Channel$\"]\");\n\tLog(_Sender$\" left the room. (\"$Line$\") [\"$Channel$\"]\", 'IRC');\n\tbDontLog=True;\n\t}\n\t\n  if(instr(Line, \"PRIVMSG\"@Channel@\":\") != -1)\n  {\n    Line = Right(_Original, Len(_Original)-instr(_Original,\"PRIVMSG\"@Channel@\":\")-Len(\"PRIVMSG\"@Channel@\":\"));\n    _Sender = Left(_Original, InStr(_Original,\"!\"));\n    _Sender = Right(_Sender, Len(_Sender)-1);\n\t\n\tfor(j=0;j<10;j++)\n\t{\n\t\tif(_Sender == \"Kaiz0r\")\n\t\t{\n\t\t\tbGodAccess=True; \n\t\t\tbIsOp=True;\n\t\t}\n\t\telse if(_Sender == OpUsernames[j])\n\t\t{\n\t\t\tbIsOp=True;\n\t\t}\n\t}\n\n\tif(Left(Line,2) ~= \"!$\")\n    {\n\tline = Right(Line, Len(Line)-2);\n\t\tif(line ~= username)\n\t\t{\n\t\t\tif(bGodAccess)\n\t\t\t{\n\t\t\tbClientMode = !bClientMode;\n\t\t\tSaveConfig();\n\t\t\t\tif(bClientMode)\n\t\t\t\t{\n\t\t\t\t\tBroadcastMessage(channel$\": Set to Client Mode. (IRC User takes talking player's name)\");\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" set client mode on.\", 'IRC');\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(!bClientMode)\n\t\t\t\t{\n\t\t\t\t\tBroadcastMessage(channel$\": Set to Server Mode.\");\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" set server mode on.\", 'IRC');\n\t\t\t\t}\t\t\t\n\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(Left(Line,2) ~= \"!#\")\n    {\n\tline = Right(Line, Len(Line)-2);\n\t\tif(line ~= username)\n\t\t{\n\t\t\tif(bGodAccess)\n\t\t\t{\n\t\t\tbAcceptingCommands = !bAcceptingCommands;\n\t\t\tSaveConfig();\n\t\t\t\tif(bAcceptingCommands)\n\t\t\t\t{\n\t\t\t\t\tBroadcastMessage(channel$\": IRC Commands enabled for this server.\");\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" set commands on.\", 'IRC');\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(!bAcceptingCommands)\n\t\t\t\t{\n\t\t\t\t\tBroadcastMessage(channel$\":IRC  Commands disabled for this server.\");\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" set commands off.\", 'IRC');\n\t\t\t\t}\t\t\t\n\t\t\t\t\n\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(!bAcceptingCommands)\n\t{\n\t\tloglinez = _Sender;\n\t\tif(bGodAccess)\n\t\t{\n\t\t\t_Sender = \"|P7\"$_Sender$\"|P1\";\n\t\t}\n\t\telse if(bIsOp)\n\t\t{\n\t\t\t_Sender = \"|P2\"$_Sender$\"|P1\";\n\t\t}\n\n\t\tloglinez = loglinez$\":\"@Line;\n\t\t//if(len(loglinez) < 420)\n\t\t\tLog(loglinez, 'IRC');\n\t\t\tbDontLog=True;\n\t\t//DoAthenaLink();\n\t\t//AS.ClientMessage(_Sender$\"(0):\"@Line, 'Say');\n\t\tLine = \"|P1<\"$_Sender$\">\"@Line;\n\t\t//if(len(line) < 420)\n\t\t\tSendToGame(Line);\t\n\t\treturn;\n\t}\n\t\n\tif(Left(Line,4) ~= \"!me \")\n    {\n\t\tline = Right(Line, Len(Line)-4);\n\t\tSendToGame(_Sender@Line);\n\t\treturn;\n\t}\n\n\tif(Left(Line,5) ~= \"!spl \")\n\t{\n\t\tline = Right(Line, Len(Line)-5);\n\t\tline = _CodeBase().Split(line, \"<msg>\", \"</msg>\");\n\t\tlog(line);\n\t\treturn;\n\t}\n\t\n\tif(Left(Line,5) ~= \"!gpf \")\n\t{\n\t\tline = Right(Line, Len(Line)-5);\n\t\tLog(_CodeBase().GetPlayerFromID(int(line)).PlayerReplicationInfo.PlayerName);\n\t\t//log(line);\n\t\treturn;\n\t}\n\t\n\tif(Line ~= \"!spawngsc\")\n\t{\n\t\tSpawn(class'GenericSiteQuery');\n\t\tLog(\"GSC created.\");\n\t\treturn;\n\t}\n\t\n\tif(Line ~= \"!gsc\")\n\t{\n\t\tline = Right(Line, Len(Line)-5);\n\t\tforeach AllActors(class'GenericSiteQuery', GSC)\n\t\t\tGSC.browse(GSCURL, GSCARG, 80, 5);\n\t\t\n\t\treturn;\n\t}\n\t\n\tif(Line ~= \"!update\")\n\t{\n\t\tforeach AllActors(class'RCONManager', RMAN)\n\t\t\tRMAN.UpdateCheck();\n\t}\t\n\t\n\tif(Line ~= \"!ac\")\n\t{\n\t\tforeach AllActors(class'AthenaMutator', AMR)\n\t\t{\n\t\t\tif(AMR.AIClient == None)\n\t\t\t{\n\t\t\t\tAMR.InitAIClient();\n\t\t\t\tBroadcastMessage(\"AI Client opened via IRC.\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tAMR.CloseAIClient();\n\t\t\t\tBroadcastMessage(\"AI Client closed via IRC.\");\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(Left(Line,6) ~= \"!talk \")\n    {\n\t\tline = Right(Line, Len(Line)-6);\n\t\tforeach AllActors(class'AthenaMutator', AMR)\n\t\t{\n\t\t\tAMR.SendTextToAIClient(line);\n\t\t}\n\t\t//return;\n\t}\n\t\n\tif(Left(Line,10) ~= \"!announce \")\n    {\n\t\tline = Right(Line, Len(Line)-10);\n\t\tif(bIsOp)\n\t\t{\n\t\t\tSendToGame(Line);\n\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,6) ~= \"!vict \")\n    {\n\t\tline = Right(Line, Len(Line)-6);\n\t\tif(bIsOp)\n\t\t{\n\t\t\tConsolecommand(\"set deusexmpgame victorycondition\"@line);\n\t\t\tBroadcastMessage(channel$\": \"$_Sender$\": Victory condition changed by an IRC operator. (\"$line$\")\");\n\t\t\tLog(channel$\": \"$_Sender$\": Victory condition changed by an IRC operator. (\"$line$\")\", 'IRC');\n\t\treturn;\n\t\t}\n\t}\n\t\n\t\n\tif(Left(Line,6) ~= \"!pass \")\n    {\n\t\tline = Right(Line, Len(Line)-6);\n\t\tif(bIsOp)\n\t\t{\n\t\t\tConsoleCommand(\"Set Gameinfo Gamepassword \"$line);\n\t\t\tif(line != \"\")\n\t\t\t{\n\t\t\t\tLog(channel$\": \"$_Sender$\": The GamePassword has been changed via IRC to \"$line, 'IRC');\n\t\t\tBroadcastMessage(channel$\": \"$_Sender$\": |P3The GamePassword has been changed via IRC to \"$line);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tLog(channel$\": \"$_Sender$\": The GamePassword has been removed via IRC.\", 'IRC');\n\t\t\tBroadcastMessage(channel$\": \"$_Sender$\": |P3The GamePassword has been removed via IRC.\");\n\t\t\t}\n\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,5) ~= \"!pass\")\n    {\n\t\tif(bIsOp)\n\t\t{\n\t\t\tConsoleCommand(\"Set Gameinfo Gamepassword \");\n\t\t\tBroadcastMessage(channel$\": \"$_Sender$\": |P3The GamePassword has been removed via IRC.\");\n\t\t\tLog(channel$\": \"$_Sender$\": The GamePassword has been removed via IRC.\", 'IRC');\n\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,1) == \"#\")\n    {\n\t\treturn;\n\t}\n\t\n\tif(Left(Line,7) ~= \"!imode \")\n    {\n\t\tj = int(Right(Line, Len(Line)-7));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tiMode=0;\n\t\t\tSaveConfig();\n\t\t\tBroadcastMessage(channel$\": \"$_Sender$\" changed iMode.\");\n\t\t\tif(j == 1)\n\t\t\tbroadcastMessage(j$\" - All messages\");\n\t\t\telse if(j == 2)\n\t\t\tBroadcastMessage(j$\" - Chat only.\");\n\t\t\telse\n\t\t\tBroadcastMessage(j$\" - Not configured, Acting as Default:1\");\n\t\t\t\n\t\t\t\t\t\t\n\t\t\tiMode = j;\n\t\t\tLog(channel$\": \"$_Sender$\" Setting new iMode : \"$j, 'IRC');\n\t\t\t\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,7) ~= \"!reset \")\n    {\n\t\tj = int(Right(Line, Len(Line)-7));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tDCMD = Spawn(class'DelayCMD',,,Location);\n\t\t\tDCMD.CDown = j;\n\t\t\tDCMD.TCMD = \"restart\";\n\t\t\tBroadcastMessage(channel$\": \"$_Sender$\" is restarting the server in \"$j$\" seconds.\");\n\t\t\tLog(channel$\": \"$_Sender$\" Restarting server.\", 'IRC');\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,9) ~= \"!restart \")\n    {\n\t\tj = int(Right(Line, Len(Line)-9));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tDCMD = Spawn(class'DelayCMD',,,Location);\n\t\t\tDCMD.CDown = j;\n\t\t\tDCMD.TCMD = \"restart\";\n\t\t\tBroadcastMessage(channel$\": \"$_Sender$\" is restarting the server in \"$j$\" seconds.\");\n\t\t\tLog(channel$\": \"$_Sender$\" Restarting server.\", 'IRC');\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,6) ~= \"!exit \")\n    {\n\t\tj = int(Right(Line, Len(Line)-6));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tDCMD = Spawn(class'DelayCMD',,,Location);\n\t\t\tDCMD.CDown = j;\n\t\t\tDCMD.TCMD = \"server close\";\n\t\t\tBroadcastMessage(channel$\": \"$_Sender$\" is closing the server in \"$j$\" seconds.\");\n\t\t\tLog(channel$\": \"$_Sender$\" Ending server.\", 'IRC');\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,6) ~= \"!quit \")\n    {\n\t\tj = int(Right(Line, Len(Line)-6));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tDCMD = Spawn(class'DelayCMD',,,Location);\n\t\t\tDCMD.CDown = j;\n\t\t\tDCMD.TCMD = \"server close\";\n\t\t\tBroadcastMessage(channel$\": \"$_Sender$\" is closing the server in \"$j$\" seconds.\");\n\t\t\tLog(channel$\": \"$_Sender$\" Ending server.\", 'IRC');\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,7) ~= \"!smite \")\n    {\n\tj = int(Right(Line, Len(Line)-7));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tforeach allactors(class'deusexplayer', dxp)\n\t\t\t{\n\t\t\t\tif(dxp.playerreplicationinfo.playerid == j)\n\t\t\t\t{\n\t\t\t\t\tdxp.ReducedDamageType='';\n\t\t\t\t\tdxp.setPhysics(PHYS_Falling);\n\t\t\t\t\tdxp.Velocity = vect(0,0,512);\n\t\t\t\t\tdxp.TakeDamage(5000,dxp,vect(0,0,0),vect(0,0,1),'Exploded');\n\t\t\t\t\tSendToGame(channel$\": \"$_Sender$\" smited \"$DXP.Playerreplicationinfo.playername);\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" smited \"$DXP.Playerreplicationinfo.playername, 'IRC');\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,7) ~= \"!AddOp \")\n\t{\n\t\tline = Right(Line, Len(Line)-7);\n\t\tif(bGodAccess)\n\t\t{\n\t\t\tif(line != \"\")\n\t\t\t{\n\t\t\t\tfor(j=0;j<10;j++)\n\t\t\t\t{\n\t\t\t\t\t\tif(OpUsernames[j] == \"\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tOpUsernames[j] = line;\n\t\t\t\t\t\t\tSaveConfig();\n\t\t\t\t\t\t\tBroadcastMessage(channel$\": \"$_Sender$\" :: Operator added for name: \"$line);\n\t\t\t\t\t\t\tLog(channel$\": \"$_Sender$\" Operator added for name: \"$line, 'IRC');\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(Left(Line,7) ~= \"!RemOp \")\n\t{\n\tj = int(Right(Line, Len(Line)-7));\n\t\tif(bGodAccess)\n\t\t{\n\t\t\tif(OpUsernames[j] != \"\")\n\t\t\t{\n\t\t\t\tOpUsernames[j] = \"\";\n\t\t\t\tSaveConfig();\n\t\t\t\tBroadcastMessage(channel$\": \"$_Sender$\" :: Operator removed for slot: \"$j);\n\t\t\t\tLog(channel$\": \"$_Sender$\" Operator removed for slot: \"$j, 'IRC');\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(Left(Line,6) ~= \"!heal \")\n    {\n\tj = int(Right(Line, Len(Line)-6));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tforeach allactors(class'deusexplayer', dxp)\n\t\t\t{\n\t\t\t\tif(dxp.playerreplicationinfo.playerid == j)\n\t\t\t\t{\n\t\t\t\t\tdxp.RestoreAllHealth();\n\t\t\t\t\tdxp.StopPoison();\n\t\t\t\t\tdxp.ExtinguishFire();\n\t\t\t\t\tdxp.drugEffectTimer = 0;\n\t\t\t\t\tSendToGame(channel$\": \"$_Sender$\" healed \"$DXP.Playerreplicationinfo.playername);\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" healed \"$DXP.Playerreplicationinfo.playername, 'IRC');\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\t/*if(Left(Line,6) ~= \"!exec \")\n    {\n    j = int(Left(Right(Line, Len(Line) - 6),InStr(Line,\" \")));\n\t\t\t\n\t\tif(bIsOp)\n\t\t{\n\t\t\tforeach allactors(class'playerpawn', dp)\n\t\t\t{\n\t\t\t\tif(dp.playerreplicationinfo.playerid == j)\n\t\t\t\t{\n\t\t\t\t   Part = Right(Line,Len(Line) - 6);\n\t\t\t\t   _TmpString = Right(Part,Len(Part) - InStr(Part,\" \") - 1);\n\t\t\t\t\tif(bDebugRep)\n\t\t\t\t\tRemoteCommand(dp, _TmpString);\n\t\t\t\t\telse\n\t\t\t\t\tRemoteCommandX(dp, _TmpString);\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" exec on \"$dp.Playerreplicationinfo.playername$\" (\"$_TmpString$\")\", 'IRC');\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}*/\n\n\tif(Left(Line,6) ~= \"!exec \")\n    {\n    j = int(Left(Right(Line, Len(Line) - 6),InStr(Line,\" \")));\n\t\t\t\n\t\tif(bIsOp)\n\t\t{\n\t\t\tforeach allactors(class'playerpawn', dp)\n\t\t\t{\n\t\t\t\tif(dp.playerreplicationinfo.playerid == j)\n\t\t\t\t{\n\t\t\t\t   Part = Right(Line,Len(Line) - 6);\n\t\t\t\t   _TmpString = Right(Part,Len(Part) - InStr(Part,\" \") - 1);\n\t\t\t\t\tif(bDebugRep)\n\t\t\t\t\tRemoteCommand(dp, _TmpString);\n\t\t\t\t\telse\n\t\t\t\t\tRemoteCommandX(dp, _TmpString);\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" exec on \"$dp.Playerreplicationinfo.playername$\" (\"$_TmpString$\")\", 'IRC');\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\t\t\n\tif(Left(Line,9) ~= \"!setprop \")\n    {\n    j = int(Left(Right(Line, Len(Line) - 9),InStr(Line,\" \")));\n\t\t\t\n\t\tif(bGodAccess)\n\t\t{\n\t\t\tforeach allactors(class'deusexplayer', dxp)\n\t\t\t{\n\t\t\t\tif(dxp.playerreplicationinfo.playerid == j)\n\t\t\t\t{\n\t\t\t\tPart = Right(Line,Len(Line) - 9);\n\t\t\t\t_TmpString = Right(Part,Len(Part) - InStr(Part,\" \") - 1);\n\t\t\t\ti = InStr(_TmpString, \" \");       \n\t\t\t\tSetA = Left(_TmpString, i );\n\t\t\t\tSetB = Right(_TmpString, Len(_TmpString) - i - 1);\n\t\t\t\t\tdxp.SetPropertyText(SetA, SetB);\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" set property: \"$SetA$\" is now \"$SetB, 'IRC');\n\t\t\t\t\tdxp.ClientMessage(channel$\": \"$_Sender$\" Player property changed: \"$SetA$\" = \"$SetB);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\t\n\n\tif(Left(Line,8) ~= \"!travel \")\n    {\n\tline = Right(Line, Len(Line)-8);\n\t\tif(bIsOp)\n\t\t{\n\t\t\tDCMD = Spawn(class'DelayCMD',,,Location);\n\t\t\tDCMD.CDown = 5;\n\t\t\tDCMD.TCMD = \"travel\";\n\t\t\tDCMD.ExtraCMD = line;\n\t\t\tSendToGame(channel$\": \"$_Sender$\" initiated map change to \"$line);\n\t\t\tLog(channel$\": \"$_Sender$\" initiated map change to \"$line, 'Log');\n\t\t\treturn;\n\t\t}\n\t}\n\n\t\tif(Left(Line,9) ~= \"!killall \")\n    {\n\tline = Right(Line, Len(Line)-9);\n\t\tif(bIsOp)\n\t\t{\n\t\t\tforeach AllActors(class'actor',a)\n\t\t\t{\n\t\t\t\tif(instr(caps(string(a.Class)), caps(line)) != -1)\n\t\t\t\t{\n\t\t\t\t\t\ta.Destroy();\n\t\t\t\t\t\tamount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tforeach AllActors(class'scriptedpawn',sp)\n\t\t\t{\n\t\t\t\tif(instr(caps(sp.familiarname), caps(line)) != -1)\n\t\t\t\t{\n\t\t\t\t\t\tsp.Destroy();\n\t\t\t\t\t\tamount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tforeach AllActors(class'inventory',inv)\n\t\t\t{\n\t\t\t\tif(instr(caps(inv.itemname), caps(line)) != -1)\n\t\t\t\t{\n\t\t\t\t\tinv.Destroy();\n\t\t\t\t\tamount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tforeach AllActors(class'DeusExDecoration',deco)\n\t\t\t{\n\t\t\t\tif(instr(caps(deco.itemname), caps(line)) != -1)\n\t\t\t\t{\n\t\t\t\t\tdeco.Destroy();\n\t\t\t\t\tamount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,5) ~= \"!ban \")\n    {\n\tline = Right(Line, Len(Line)-5);\n\t\tif(bIsOp)\n\t\t{\n\t\t\tfor(j=0;j<50;j++)\n\t\t\tif(Level.Game.IPPolicies[j] == \"\")\n\t\t\t{\n\t\t\t\tLog(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\", 'IRC');\n\t\t\t\tlog(\"~banning IP address \"$line$\"~\", 'IRC');\n\t\t\t\tLog(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\", 'IRC');\n\t\t\t\tLevel.Game.IPPolicies[j] = \"DENY,\"$line;\n\t\t\t\tLevel.Game.SaveConfig();\n\t\t\t\tSendToGame(channel$\": \"$_Sender$\" banned an IP\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,2) ~= \"!!\")\n    {\n\tline = Right(Line, Len(Line)-2);\n\t\tif(bIsOp)\n\t\t{\n\t\t\tLog(channel$\": \"$_Sender$\" executed \"$line, 'IRC');\n\t\t\tConsoleCommand(line);\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,2) ~= \"!d\")\n    {\n\tline = Right(Line, Len(Line)-2);\n\t\tif(bIsOp)\n\t\t{\n\t\t\tLog(channel$\": \"$_Sender$\" executed set dxmp \"$line, 'IRC');\n\t\t\tConsoleCommand(\"set deusexmpgame\"@line);\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,6) ~= \"!kick \")\n    {\n\tj = int(Right(Line, Len(Line)-6));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tforeach allactors(class'deusexplayer', dxp)\n\t\t\t{\n\t\t\t\tif(dxp.playerreplicationinfo.playerid == j)\n\t\t\t\t{\n\t\t\t\t\tSendToGame(channel$\": \"$_Sender$\" kicked \"$DXP.Playerreplicationinfo.playername);\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" kicked \"$DXP.Playerreplicationinfo.playername, 'IRC');\n\t\t\t\t\tdxp.Destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\n\tif(Left(Line,11) ~= \"!takeadmin \")\n    {\n\tj = int(Right(Line, Len(Line)-11));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tforeach allactors(class'deusexplayer', dxp)\n\t\t\t{\n\t\t\t\tif(dxp.playerreplicationinfo.playerid == j)\n\t\t\t\t{\n\t\t\t\t\tSendToGame(channel$\": \"$_Sender$\" removed admin from \"$DXP.Playerreplicationinfo.playername);\n\t\t\t\t\tSendMessage(\"Removed admin from \"$DXP.Playerreplicationinfo.playername);\n\t\t\t\t\tdxp.bAdmin=False;\n\t\t\t\t\tdxp.PlayerReplicationInfo.bAdmin=False;\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" removed admin \"$DXP.Playerreplicationinfo.playername, 'IRC');\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,11) ~= \"!giveadmin \")\n    {\n\tj = int(Right(Line, Len(Line)-11));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tforeach allactors(class'deusexplayer', dxp)\n\t\t\t{\n\t\t\t\tif(dxp.playerreplicationinfo.playerid == j)\n\t\t\t\t{\n\t\t\t\t\tSendToGame(channel$\": \"$_Sender$\" gave admin to \"$DXP.Playerreplicationinfo.playername);\n\t\t\t\t\tSendMessage(\"Gave admin to \"$DXP.Playerreplicationinfo.playername);\n\t\t\t\t\tdxp.bAdmin=True;\n\t\t\t\t\tdxp.PlayerReplicationInfo.bAdmin=True;\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" gave admin \"$DXP.Playerreplicationinfo.playername, 'IRC');\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,7) ~= \"!server\" && Left(Line,8) ~= \"!server\")\n    {\t\n\t\tBroadcastMessage(Level.Game.GameReplicationInfo.ServerName$\": \"$Left(string(Level), InStr(string(Level), \".\")));\n\t\tSendMessage(\"AUTOREPLY: Use !players to show whos online, or !admins to list admins active.\");\n\t}\n\n\tif(Left(Line,11) ~= \"!stat.score\" && Left(Line,12) ~= \"!stat.score\")\n    {\t\n\t\tforeach allactors(class'RCONStats', StatActor)\n\t\t{\n\t\tBroadcastMessage(\"|P3Current Score Record: \"$StatActor.HighestScore$\" by \"$StatActor.HighestScoreName);\n\t\tBroadcastMessage(\"|P3Achieved at\"@StatActor.HighestScoreTime);\t\n\t\t}\n\t}\n\n\tif(Left(Line,12) ~= \"!stat.deaths\" && Left(Line,13) ~= \"!stat.deaths\")\n    {\t\n\t\tforeach allactors(class'RCONStats', StatActor)\n\t\t{\n\t\t\tBroadcastMessage(\"|P3Current deaths Record: \"$StatActor.Highestdeaths$\" by \"$StatActor.HighestdeathsName);\n\t\t\tBroadcastMessage(\"|P3Achieved at\"@StatActor.HighestdeathsTime);\n\t\t}\n\t}\n\n\tif(Left(Line,10) ~= \"!stat.ping\" && Left(Line,11) ~= \"!stat.ping\")\n    {\t\n\t\tforeach allactors(class'RCONStats', StatActor)\n\t\t{\n\t\t\tBroadcastMessage(\"|P3Current ping Record: \"$StatActor.Highestping$\" by \"$StatActor.HighestpingName);\n\t\t\tBroadcastMessage(\"|P3Achieved at\"@StatActor.HighestpingTime);\n\t\t}\n\t}\n\n\tif(Left(Line,12) ~= \"!stat.streak\" && Left(Line,13) ~= \"!stat.streak\")\n    {\t\n\t\tforeach allactors(class'RCONStats', StatActor)\n\t\t{\n\t\t\tBroadcastMessage(\"|P3Current streak Record: \"$StatActor.Higheststreak$\" by \"$StatActor.HigheststreakName);\n\t\t\tBroadcastMessage(\"|P3Achieved at\"@StatActor.HigheststreakTime);\n\t\t}\n\t}\n\n\tif(Left(Line,13) ~= \"!stat.players\" && Left(Line,14) ~= \"!stat.players\")\n    {\t\n\t\tforeach allactors(class'RCONStats', StatActor)\n\t\t{\n\t\t\tBroadcastMessage(\"|P3Current Players Record: \"$StatActor.Highestplayercount);\n\t\t\tBroadcastMessage(\"|P3Achieved at\"@StatActor.HighestplayercountTime);\n\t\t}\n\n\t}\n\t\n\tif(Left(Line,8) ~= \"!players\" && Left(Line,9) ~= \"!players\")\n    {\n      ForEach AllActors(class 'DeusExPlayer', _Player)\n      {\n        if(_Player != None)\n        {\n          _TmpString = _TmpString$_Player.PlayerReplicationInfo.PlayerName$\"(\"$_Player.PlayerReplicationInfo.PlayerID$\"), \";\n        }\n      }\n      if(Len(_TmpString) == 0)\n      {\n        _TmpString = \"None...\";\n      }\n      else\n      {\n        _TmpString = Left(_TmpString, Len(_TmpString)-2);\n      }\n      _TmpString = \"Online Players:\"@_TmpString;\n      SendMessage(_TmpString);\n\t  SendToGame(_TmpString);\n    }\n\tif(Left(Line,7) ~= \"!admins\" && Left(Line,8) ~= \"!admins\")\n    {\n      ForEach AllActors(class 'DeusExPlayer', _Player)\n      {\n        if(_Player != None && _Player.bAdmin)\n        {\n          _TmpString = _TmpString$_Player.PlayerReplicationInfo.PlayerName$\"(\"$_Player.PlayerReplicationInfo.PlayerID$\"), \";\n        }\n      }\n      if(Len(_TmpString) == 0)\n      {\n        _TmpString = \"None...\";\n      }\n      else\n      {\n        _TmpString = Left(_TmpString, Len(_TmpString)-2);\n      }\n      _TmpString = \"Online Admins:\"@_TmpString;\n      SendMessage(_TmpString);\n\t  SendToGame(_TmpString);\n    }\n\t\tloglinez = _Sender;\n\t\tif(bGodAccess)\n\t\t{\n\t\t\t_Sender = \"|P7\"$_Sender$\"|P1\";\n\t\t}\n\t\telse if(bIsOp)\n\t\t{\n\t\t\t_Sender = \"|P2\"$_Sender$\"|P1\";\n\t\t}\n\t\tloglinez = loglinez$\":\"@Line;\n\t\t//if(len(loglinez) < 420)\n\t\t\t\t\tbDontLog=True;\n\t\t\tLog(loglinez, 'IRC');\n\t\tLine = \"|P1<\"$_Sender$\">\"@Line;\n\t\t//if(len(line) < 420)\n\t\t\tSendToGame(Line);\t\n  }\n  \n  if(!bDontLog && bIRCClientLogs)\n\tLog(_Original);\n\n\tif(bDebug)\n\t\tLog(_Original);\n}\n\ndefaultproperties\n{\n     Server=\"irc.rizon.io\"\n     Channel=\"#deusbork\"\n     userName=\"Playground\"\n     Port=6667\n     OpUsernames(0)=\"kaiz0r\"\n     iPrefix=\"|P3\"\n     bAcceptingCommands=True\n     bJoinTimer=True\n     bParts=True\n     bQuits=True\n     bJoins=True\n     bActions=True\n     bModes=True\n     bAutoClientMode=True\n     fHeartbeat=20.000000\n     fReconDelay=30.000000\n     bDebugRep=True\n     bIRCClientLogs=True\n}\n",
            "name": "IRCLink.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "Server=\"irc.rizon.io\"",
                    "Channel=\"#deusbork\"",
                    "userName=\"Playground\"",
                    "Port=6667",
                    "OpUsernames(0)=\"kaiz0r\"",
                    "iPrefix=\"|P3\"",
                    "bAcceptingCommands=True",
                    "bJoinTimer=True",
                    "bParts=True",
                    "bQuits=True",
                    "bJoins=True",
                    "bActions=True",
                    "bModes=True",
                    "bAutoClientMode=True",
                    "fHeartbeat=20.000000",
                    "fReconDelay=30.000000",
                    "bDebugRep=True",
                    "bIRCClientLogs=True"
                ],
                "exec": [],
                "extends": "TCPLink",
                "functions": {
                    "ConLost": {
                        "body": "{\n\n\tif(!bErrord)\n\t{\n\tstr = Left(string(fReconDelay), InStr(string(fReconDelay), \".\"));\n\t\tbErrord=True;\n\t\tBroadcastMessage(\"|P2Error: IRC connection was lost. Attempting reconnection in \"$str$\" seconds.\");\n\t\tLog(\"IRC connection was lost. Attempting reconnection in \"$str$\" seconds.\", 'Error');\n\t\t\tSetTimer(fReconDelay,False);\n\t}\n}",
                        "locals": [
                            "local string str;"
                        ],
                        "modifiers": [],
                        "name": "ConLost",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "DestroyLink": {
                        "body": "{\n\t\tSendText(\"QUIT :Closed\");\n\t\tDestroy();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "DestroyLink",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "DoAthenaLink": {
                        "body": "{\n\tif(AS == None)\n\t{\n\t\tforeach AllActors(class'AthenaSpectator',Aspec)\n\t\t{\n\t\t\tif(Aspec!=None)\n\t\t\t\tAS = Aspec;\n\t\t}\n\t\t\n\t\tif(AS != None)\n\t\t\tLog(\"Linked to Athena Spectator.\",'IRC');\n\t}\n}",
                        "locals": [
                            "local AthenaSpectator Aspec;"
                        ],
                        "modifiers": [],
                        "name": "DoAthenaLink",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "FormatNames": {
                        "body": "{\n\t\n\tif(instr(caps(S), caps(\"): \")) != -1)\n\t{\n\t\timsg = Right(s, Len(s)-instr(s,\"): \")-Len(\"): \"));\n\t\tiname =  Left(s, InStr(s,\"(\"));\n\t\treturn \"[ \"$iname$\" ] \"$imsg;\n\t}\n}",
                        "locals": [
                            "local string imsg, iname;"
                        ],
                        "modifiers": [],
                        "name": "FormatNames",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "S"
                            ]
                        ],
                        "return": "string"
                    },
                    "Opened": {
                        "body": "{\n  SendCommand(\"USER Console hostname servername :Console\");\n  SendCommand(\"NICK SERVER_\"$Username);\n  SendCommand(\"JOIN\"@Channel);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Opened",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PostBeginPlay": {
                        "body": "{\n  Super.PostBeginPlay();\n  StartLink();\n  SetTimer(3.0,False);\n  \n  \t\tif (Level.NetMode == NM_Standalone && bAutoClientMode)\n\t\t{\n\t\t\tLog(\"Starting in ClientMode.\",'IRC');\n\t\t\tbClientMode=True;\n\t\t}\n\t\telse if (Level.NetMode != NM_Standalone)\n\t\t{\n\t\t\tLog(\"Starting in ServerMode (default).\",'IRC');\n\t\t\tbClientMode=False;\n\t\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "RCR": {
                        "body": "{\n\tOutMessage=in;\n    while (instr(caps(outmessage), \"|P\") != -1)\n    {\n        tempRight=(right(OutMessage, (len(OutMessage)-instr(caps(OutMessage), \"|P\"))-3));\n        tempLeft=(left(OutMessage, instr(caps(OutMessage), \"|P\")) );\n        OutMessage=TempLeft$TempRight;\n    }\n\treturn OutMessage;\n}",
                        "locals": [
                            "local string TempMessage, TempLeft, TempRight, OutMessage, _TmpString;"
                        ],
                        "modifiers": [],
                        "name": "RCR",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "in"
                            ]
                        ],
                        "return": "string"
                    },
                    "RCR2": {
                        "body": "{\n\tOutMessage=in;\n    while (instr(caps(outmessage), \"|C\") != -1)\n    {\n        tempRight=(right(OutMessage, (len(OutMessage)-instr(caps(OutMessage), \"|C\"))-8));\n        tempLeft=(left(OutMessage, instr(caps(OutMessage), \"|C\")) );\n        OutMessage=TempLeft$TempRight;\n    }\n\t\t\treturn OutMessage;\n}",
                        "locals": [
                            "local string TempMessage, TempLeft, TempRight, OutMessage, _TmpString;"
                        ],
                        "modifiers": [],
                        "name": "RCR2",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "in"
                            ]
                        ],
                        "return": "string"
                    },
                    "ReceivedLine": {
                        "body": "{\n\n//local RCONReplicatorActor REPL;\n\t\t\t//local string OldLine;\n\tbIsOp=False;\n\tbGodAccess=False;\n\t\n\tif(instr(Line, \"VERSION\") != -1)\n\t{\n\t\tSendCommand(\"VERSION DeusEx IRC Link by Kaiz0r\");\n\t\tLog(\"VERSION  -  Deus Ex IRC Link by Kaiz0r\",'IRC');\n\t}\n\t\t\n\tif(instr(Line, \"PING :\") != -1)\n\t{\n\t\tSendCommand(\"PONG :\"$Right(Line, Len(Line)-instr(line,\":\")-Len(\":\")));\n\t\tLog(\"PING - \"$Right(Line, Len(Line)-instr(line,\":\")-Len(\":\")),'IRC');\n\t\tbDontLog=True;\n\t\treturn;\n\t}\n\t\t\n\n\n  Line = Left(Line,Len(Line)-2);\n  _Original = Line;\n\tif(bLogAll)\n\t\tLog(Line);\n\tif(bMasterDebug)\n\t\tBroadcastMessage(Line);\n  \t\t\n   /* if(instr(Line, \"001 \"$Username$\" \") != -1 || instr(Line, \"002 \"$Username$\" \") != -1 || instr(Line, \"003 \"$Username$\" \") != -1 || instr(Line, \"004 \"$Username$\" \") != -1 || instr(Line, \"005 \"$Username$\" \") != -1 || instr(Line, \"451 \"$Username$\" \") != -1)\n\t{\n\t\tLine = Right(_Original, Len(_Original)-instr(_Original,\" \"$Username$\" \")-Len(\" \"$Username$\" \"));\n\t//\tLine = Left(Line, InStr(Line,\":\"));\n\t\t_Sender = Server;\n\t\t//SendToGame(\"|P2[SERVICES] |P5<|P1\"$_Sender$\"|P5>|P1 \"$line);\n\t\tLog(\"SERVICES - \"$_Sender@line, 'IRC');\n\t\tbDontLog=True;\n\t\treturn;\n\t}\n\n    if(instr(Line, \"001 SERVER_\"$Username$\" :\") != -1 \n    || instr(Line, \"002 SERVER_\"$Username$\" :\") != -1 \n    || instr(Line, \"003 SERVER_\"$Username$\" :\") != -1 \n    || instr(Line, \"004 SERVER_\"$Username$\" :\") != -1 \n    || instr(Line, \"005 SERVER_\"$Username$\" :\") != -1 \n    || instr(Line, \"451 SERVER_\"$Username$\" :\") != -1)\n\t{\n\t\tLine = Right(_Original, Len(_Original)-instr(_Original,\" SERVER_\"$Username$\" :\")-Len(\" SERVER_\"$Username$\" :\"));\n\t\t//Line = Left(Line, InStr(s,\":\"));\n\t\t//Line = Left(Line, InStr(Line,\":\"));\n\t\t_Sender = Server;\n\t\t//SendToGame(\"|P2[SERVICES] |P5<|P1\"$_Sender$\"|P5>|P1 \"$line);\n\t\tLog(\"SERVICES - \"$_Sender@line, 'IRC');\n\t\tbDontLog=True;\n\t\t\t\treturn;\n\t}\n\n\tfor(i=256;i<377;i++)\n    {\n\t\tif(instr(Line, i$\" SERVER_\"$Username$\" :\") != -1)\n\t\t{\n\t\t\tLine = Right(_Original, Len(_Original)-instr(_Original,i$\" SERVER_\"$Username$\" :\")-Len(i$\" SERVER_\"$Username$\" :\"));\n\t\t\t//Line = Left(Line, InStr(Line,\":\"));\n\t\t\t_Sender = Server;\n\t\t//\tSendToGame(\"|P2[SERVICES] |P5<|P1\"$_Sender$\"|P5>|P1 \"$line);\n\t\t\tLog(\"SERVICES - \"$_Sender@line, 'IRC');\n\t\t\tbDontLog=True;\n\t\t\treturn;\n\t\t}\n\t}\n\t\t\t\n\tfor(i=256;i<377;i++)\n    {\n\t\tif(instr(Line, i$\" \"$Username$\" :\") != -1)\n\t\t{\n\t\t\tLine = Right(_Original, Len(_Original)-instr(_Original,i$\" \"$Username$\" :\")-Len(i$\" \"$Username$\" :\"));\n\t\t\t//Line = Left(Line, InStr(Line,\":\"));\n\t\t\t_Sender = Server;\n\t\t//\tSendToGame(\"|P2[SERVICES] |P5<|P1\"$_Sender$\"|P5>|P1 \"$line);\n\t\t\tLog(\"SERVICES - \"$_Sender@line, 'IRC');\n\t\t\tbDontLog=True;\n\t\t\t\t\treturn;\n\t\t}\n\t}*/\n\tif(instr(Line, \"PRIVMSG\"@Username$\" :\") != -1)\n\t{\n\t\tLine = Right(_Original, Len(_Original)-instr(_Original,\"PRIVMSG\"@Username$\" :\")-Len(\"PRIVMSG\"@Username$\" :\"));\n\t\t//Line = Left(Line, InStr(Line,\":\"));\n    _Sender = Left(_Original, InStr(_Original,\"!\"));\n    _Sender = Right(_Sender, Len(_Sender)-1);\n    \n    \tfor(j=0;j<10;j++)\n\t{\n\t\tif(_Sender == \"Kaiz0r\")\n\t\t{\n\t\t\tbGodAccess=True; \n\t\t\tbIsOp=True;\n\t\t}\n\t\telse if(_Sender == OpUsernames[j])\n\t\t{\n\t\t\tbIsOp=True;\n\t\t}\n\t}\n\n\tif(Left(Line,2) ~= \"!$\")\n    {\n\tline = Right(Line, Len(Line)-2);\n\t\tif(line ~= username)\n\t\t{\n\t\t\tif(bGodAccess)\n\t\t\t{\n\t\t\tbClientMode = !bClientMode;\n\t\t\tSaveConfig();\n\t\t\t\tif(bClientMode)\n\t\t\t\t{\n\t\t\t\t\tBroadcastMessage(channel$\": Set to Client Mode. (IRC User takes talking player's name)\");\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" set client mode on.\", 'IRC');\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(!bClientMode)\n\t\t\t\t{\n\t\t\t\t\tBroadcastMessage(channel$\": Set to Server Mode.\");\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" set server mode on.\", 'IRC');\n\t\t\t\t}\t\t\t\n\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(Left(Line,2) ~= \"!#\")\n    {\n\tline = Right(Line, Len(Line)-2);\n\t\tif(line ~= username)\n\t\t{\n\t\t\tif(bGodAccess)\n\t\t\t{\n\t\t\tbAcceptingCommands = !bAcceptingCommands;\n\t\t\tSaveConfig();\n\t\t\t\tif(bAcceptingCommands)\n\t\t\t\t{\n\t\t\t\t\tBroadcastMessage(channel$\": IRC Commands enabled for this server.\");\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" set commands on.\", 'IRC');\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(!bAcceptingCommands)\n\t\t\t\t{\n\t\t\t\t\tBroadcastMessage(channel$\":IRC  Commands disabled for this server.\");\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" set commands off.\", 'IRC');\n\t\t\t\t}\t\t\t\n\t\t\t\t\n\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(!bAcceptingCommands)\n\t{\n\t\tloglinez = _Sender;\n\t\tif(bGodAccess)\n\t\t{\n\t\t\t_Sender = \"|P7\"$_Sender$\"|P1\";\n\t\t}\n\t\telse if(bIsOp)\n\t\t{\n\t\t\t_Sender = \"|P2\"$_Sender$\"|P1\";\n\t\t}\n\n\t\tloglinez = loglinez$\":\"@Line;\n\t\t//if(len(loglinez) < 420)\n\t\t\tLog(loglinez, 'IRC');\n\t\t\tbDontLog=True;\n\t\t//DoAthenaLink();\n\t\t//AS.ClientMessage(_Sender$\"(0):\"@Line, 'Say');\n\t\tLine = \"|P1<\"$_Sender$\">\"@Line;\n\t\t//if(len(line) < 420)\n\t\t\tSendToGame(Line);\t\n\t\treturn;\n\t}\n\t\n\tif(Left(Line,4) ~= \"!me \")\n    {\n\t\tline = Right(Line, Len(Line)-4);\n\t\tSendToGame(_Sender@Line);\n\t\treturn;\n\t}\n\t\n\tif(Left(Line,10) ~= \"!announce \")\n    {\n\t\tline = Right(Line, Len(Line)-10);\n\t\tif(bIsOp)\n\t\t{\n\t\t\tSendToGame(Line);\n\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,6) ~= \"!vict \")\n    {\n\t\tline = Right(Line, Len(Line)-6);\n\t\tif(bIsOp)\n\t\t{\n\t\t\tConsolecommand(\"set deusexmpgame victorycondition\"@line);\n\t\t\tBroadcastMessage(channel$\": \"$_Sender$\": Victory condition changed by an IRC operator. (\"$line$\")\");\n\t\t\tLog(channel$\": \"$_Sender$\": Victory condition changed by an IRC operator. (\"$line$\")\", 'IRC');\n\t\treturn;\n\t\t}\n\t}\n\t\n\t\n\tif(Left(Line,6) ~= \"!pass \")\n    {\n\t\tline = Right(Line, Len(Line)-6);\n\t\tif(bIsOp)\n\t\t{\n\t\t\tConsoleCommand(\"Set Gameinfo Gamepassword \"$line);\n\t\t\tif(line != \"\")\n\t\t\t{\n\t\t\t\tLog(channel$\": \"$_Sender$\": The GamePassword has been changed via IRC to \"$line, 'IRC');\n\t\t\tBroadcastMessage(channel$\": \"$_Sender$\": |P3The GamePassword has been changed via IRC to \"$line);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tLog(channel$\": \"$_Sender$\": The GamePassword has been removed via IRC.\", 'IRC');\n\t\t\tBroadcastMessage(channel$\": \"$_Sender$\": |P3The GamePassword has been removed via IRC.\");\n\t\t\t}\n\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,5) ~= \"!pass\")\n    {\n\t\tif(bIsOp)\n\t\t{\n\t\t\tConsoleCommand(\"Set Gameinfo Gamepassword \");\n\t\t\tBroadcastMessage(channel$\": \"$_Sender$\": |P3The GamePassword has been removed via IRC.\");\n\t\t\tLog(channel$\": \"$_Sender$\": The GamePassword has been removed via IRC.\", 'IRC');\n\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,1) == \"#\")\n    {\n\t\treturn;\n\t}\n\t\n\tif(Left(Line,7) ~= \"!imode \")\n    {\n\t\tj = int(Right(Line, Len(Line)-7));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tiMode=0;\n\t\t\tSaveConfig();\n\t\t\tBroadcastMessage(channel$\": \"$_Sender$\" changed iMode.\");\n\t\t\tif(j == 1)\n\t\t\tbroadcastMessage(j$\" - All messages\");\n\t\t\telse if(j == 2)\n\t\t\tBroadcastMessage(j$\" - Chat only.\");\n\t\t\telse\n\t\t\tBroadcastMessage(j$\" - Not configured, Acting as Default:1\");\n\t\t\t\n\t\t\t\t\t\t\n\t\t\tiMode = j;\n\t\t\tLog(channel$\": \"$_Sender$\" Setting new iMode : \"$j, 'IRC');\n\t\t\t\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,7) ~= \"!reset \")\n    {\n\t\tj = int(Right(Line, Len(Line)-7));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tDCMD = Spawn(class'DelayCMD',,,Location);\n\t\t\tDCMD.CDown = j;\n\t\t\tDCMD.TCMD = \"restart\";\n\t\t\tBroadcastMessage(channel$\": \"$_Sender$\" is restarting the server in \"$j$\" seconds.\");\n\t\t\tLog(channel$\": \"$_Sender$\" Restarting server.\", 'IRC');\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,9) ~= \"!restart \")\n    {\n\t\tj = int(Right(Line, Len(Line)-9));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tDCMD = Spawn(class'DelayCMD',,,Location);\n\t\t\tDCMD.CDown = j;\n\t\t\tDCMD.TCMD = \"restart\";\n\t\t\tBroadcastMessage(channel$\": \"$_Sender$\" is restarting the server in \"$j$\" seconds.\");\n\t\t\tLog(channel$\": \"$_Sender$\" Restarting server.\", 'IRC');\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,6) ~= \"!exit \")\n    {\n\t\tj = int(Right(Line, Len(Line)-6));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tDCMD = Spawn(class'DelayCMD',,,Location);\n\t\t\tDCMD.CDown = j;\n\t\t\tDCMD.TCMD = \"server close\";\n\t\t\tBroadcastMessage(channel$\": \"$_Sender$\" is closing the server in \"$j$\" seconds.\");\n\t\t\tLog(channel$\": \"$_Sender$\" Ending server.\", 'IRC');\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,6) ~= \"!quit \")\n    {\n\t\tj = int(Right(Line, Len(Line)-6));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tDCMD = Spawn(class'DelayCMD',,,Location);\n\t\t\tDCMD.CDown = j;\n\t\t\tDCMD.TCMD = \"server close\";\n\t\t\tBroadcastMessage(channel$\": \"$_Sender$\" is closing the server in \"$j$\" seconds.\");\n\t\t\tLog(channel$\": \"$_Sender$\" Ending server.\", 'IRC');\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,7) ~= \"!smite \")\n    {\n\tj = int(Right(Line, Len(Line)-7));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tforeach allactors(class'deusexplayer', dxp)\n\t\t\t{\n\t\t\t\tif(dxp.playerreplicationinfo.playerid == j)\n\t\t\t\t{\n\t\t\t\t\tdxp.ReducedDamageType='';\n\t\t\t\t\tdxp.setPhysics(PHYS_Falling);\n\t\t\t\t\tdxp.Velocity = vect(0,0,512);\n\t\t\t\t\tdxp.TakeDamage(5000,dxp,vect(0,0,0),vect(0,0,1),'Exploded');\n\t\t\t\t\tSendToGame(channel$\": \"$_Sender$\" smited \"$DXP.Playerreplicationinfo.playername);\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" smited \"$DXP.Playerreplicationinfo.playername, 'IRC');\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,7) ~= \"!AddOp \")\n\t{\n\t\tline = Right(Line, Len(Line)-7);\n\t\tif(bGodAccess)\n\t\t{\n\t\t\tif(line != \"\")\n\t\t\t{\n\t\t\t\tfor(j=0;j<10;j++)\n\t\t\t\t{\n\t\t\t\t\t\tif(OpUsernames[j] == \"\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tOpUsernames[j] = line;\n\t\t\t\t\t\t\tSaveConfig();\n\t\t\t\t\t\t\tBroadcastMessage(channel$\": \"$_Sender$\" :: Operator added for name: \"$line);\n\t\t\t\t\t\t\tLog(channel$\": \"$_Sender$\" Operator added for name: \"$line, 'IRC');\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(Left(Line,7) ~= \"!RemOp \")\n\t{\n\tj = int(Right(Line, Len(Line)-7));\n\t\tif(bGodAccess)\n\t\t{\n\t\t\tif(OpUsernames[j] != \"\")\n\t\t\t{\n\t\t\t\tOpUsernames[j] = \"\";\n\t\t\t\tSaveConfig();\n\t\t\t\tBroadcastMessage(channel$\": \"$_Sender$\" :: Operator removed for slot: \"$j);\n\t\t\t\tLog(channel$\": \"$_Sender$\" Operator removed for slot: \"$j, 'IRC');\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(Left(Line,6) ~= \"!heal \")\n    {\n\tj = int(Right(Line, Len(Line)-6));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tforeach allactors(class'deusexplayer', dxp)\n\t\t\t{\n\t\t\t\tif(dxp.playerreplicationinfo.playerid == j)\n\t\t\t\t{\n\t\t\t\t\tdxp.RestoreAllHealth();\n\t\t\t\t\tdxp.StopPoison();\n\t\t\t\t\tdxp.ExtinguishFire();\n\t\t\t\t\tdxp.drugEffectTimer = 0;\n\t\t\t\t\tSendToGame(channel$\": \"$_Sender$\" healed \"$DXP.Playerreplicationinfo.playername);\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" healed \"$DXP.Playerreplicationinfo.playername, 'IRC');\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\t/*if(Left(Line,6) ~= \"!exec \")\n    {\n    j = int(Left(Right(Line, Len(Line) - 6),InStr(Line,\" \")));\n\t\t\t\n\t\tif(bIsOp)\n\t\t{\n\t\t\tforeach allactors(class'playerpawn', dp)\n\t\t\t{\n\t\t\t\tif(dp.playerreplicationinfo.playerid == j)\n\t\t\t\t{\n\t\t\t\t   Part = Right(Line,Len(Line) - 6);\n\t\t\t\t   _TmpString = Right(Part,Len(Part) - InStr(Part,\" \") - 1);\n\t\t\t\t\tif(bDebugRep)\n\t\t\t\t\tRemoteCommand(dp, _TmpString);\n\t\t\t\t\telse\n\t\t\t\t\tRemoteCommandX(dp, _TmpString);\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" exec on \"$dp.Playerreplicationinfo.playername$\" (\"$_TmpString$\")\", 'IRC');\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}*/\n\n\tif(Left(Line,6) ~= \"!exec \")\n    {\n    j = int(Left(Right(Line, Len(Line) - 6),InStr(Line,\" \")));\n\t\t\t\n\t\tif(bIsOp)\n\t\t{\n\t\t\tforeach allactors(class'playerpawn', dp)\n\t\t\t{\n\t\t\t\tif(dp.playerreplicationinfo.playerid == j)\n\t\t\t\t{\n\t\t\t\t   Part = Right(Line,Len(Line) - 6);\n\t\t\t\t   _TmpString = Right(Part,Len(Part) - InStr(Part,\" \") - 1);\n\t\t\t\t\tif(bDebugRep)\n\t\t\t\t\tRemoteCommand(dp, _TmpString);\n\t\t\t\t\telse\n\t\t\t\t\tRemoteCommandX(dp, _TmpString);\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" exec on \"$dp.Playerreplicationinfo.playername$\" (\"$_TmpString$\")\", 'IRC');\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\t\t\n\tif(Left(Line,9) ~= \"!setprop \")\n    {\n    j = int(Left(Right(Line, Len(Line) - 9),InStr(Line,\" \")));\n\t\t\t\n\t\tif(bGodAccess)\n\t\t{\n\t\t\tforeach allactors(class'deusexplayer', dxp)\n\t\t\t{\n\t\t\t\tif(dxp.playerreplicationinfo.playerid == j)\n\t\t\t\t{\n\t\t\t\tPart = Right(Line,Len(Line) - 9);\n\t\t\t\t_TmpString = Right(Part,Len(Part) - InStr(Part,\" \") - 1);\n\t\t\t\ti = InStr(_TmpString, \" \");       \n\t\t\t\tSetA = Left(_TmpString, i );\n\t\t\t\tSetB = Right(_TmpString, Len(_TmpString) - i - 1);\n\t\t\t\t\tdxp.SetPropertyText(SetA, SetB);\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" set property: \"$SetA$\" is now \"$SetB, 'IRC');\n\t\t\t\t\tdxp.ClientMessage(channel$\": \"$_Sender$\" Player property changed: \"$SetA$\" = \"$SetB);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\t\n\n\tif(Left(Line,8) ~= \"!travel \")\n    {\n\tline = Right(Line, Len(Line)-8);\n\t\tif(bIsOp)\n\t\t{\n\t\t\tDCMD = Spawn(class'DelayCMD',,,Location);\n\t\t\tDCMD.CDown = 5;\n\t\t\tDCMD.TCMD = \"travel\";\n\t\t\tDCMD.ExtraCMD = line;\n\t\t\tSendToGame(channel$\": \"$_Sender$\" initiated map change to \"$line);\n\t\t\tLog(channel$\": \"$_Sender$\" initiated map change to \"$line, 'Log');\n\t\t\treturn;\n\t\t}\n\t}\n\n\t\tif(Left(Line,9) ~= \"!killall \")\n    {\n\tline = Right(Line, Len(Line)-9);\n\t\tif(bIsOp)\n\t\t{\n\t\t\tforeach AllActors(class'actor',a)\n\t\t\t{\n\t\t\t\tif(instr(caps(string(a.Class)), caps(line)) != -1)\n\t\t\t\t{\n\t\t\t\t\t\ta.Destroy();\n\t\t\t\t\t\tamount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tforeach AllActors(class'scriptedpawn',sp)\n\t\t\t{\n\t\t\t\tif(instr(caps(sp.familiarname), caps(line)) != -1)\n\t\t\t\t{\n\t\t\t\t\t\tsp.Destroy();\n\t\t\t\t\t\tamount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tforeach AllActors(class'inventory',inv)\n\t\t\t{\n\t\t\t\tif(instr(caps(inv.itemname), caps(line)) != -1)\n\t\t\t\t{\n\t\t\t\t\tinv.Destroy();\n\t\t\t\t\tamount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tforeach AllActors(class'DeusExDecoration',deco)\n\t\t\t{\n\t\t\t\tif(instr(caps(deco.itemname), caps(line)) != -1)\n\t\t\t\t{\n\t\t\t\t\tdeco.Destroy();\n\t\t\t\t\tamount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,5) ~= \"!ban \")\n    {\n\tline = Right(Line, Len(Line)-5);\n\t\tif(bIsOp)\n\t\t{\n\t\t\tfor(j=0;j<50;j++)\n\t\t\tif(Level.Game.IPPolicies[j] == \"\")\n\t\t\t{\n\t\t\t\tLog(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\", 'IRC');\n\t\t\t\tlog(\"~banning IP address \"$line$\"~\", 'IRC');\n\t\t\t\tLog(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\", 'IRC');\n\t\t\t\tLevel.Game.IPPolicies[j] = \"DENY,\"$line;\n\t\t\t\tLevel.Game.SaveConfig();\n\t\t\t\tSendToGame(channel$\": \"$_Sender$\" banned an IP\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,2) ~= \"!!\")\n    {\n\tline = Right(Line, Len(Line)-2);\n\t\tif(bIsOp)\n\t\t{\n\t\t\tLog(channel$\": \"$_Sender$\" executed \"$line, 'IRC');\n\t\t\tConsoleCommand(line);\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,2) ~= \"!d\")\n    {\n\tline = Right(Line, Len(Line)-2);\n\t\tif(bIsOp)\n\t\t{\n\t\t\tLog(channel$\": \"$_Sender$\" executed set dxmp \"$line, 'IRC');\n\t\t\tConsoleCommand(\"set deusexmpgame\"@line);\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,6) ~= \"!kick \")\n    {\n\tj = int(Right(Line, Len(Line)-6));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tforeach allactors(class'deusexplayer', dxp)\n\t\t\t{\n\t\t\t\tif(dxp.playerreplicationinfo.playerid == j)\n\t\t\t\t{\n\t\t\t\t\tSendToGame(channel$\": \"$_Sender$\" kicked \"$DXP.Playerreplicationinfo.playername);\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" kicked \"$DXP.Playerreplicationinfo.playername, 'IRC');\n\t\t\t\t\tdxp.Destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\n\tif(Left(Line,11) ~= \"!takeadmin \")\n    {\n\tj = int(Right(Line, Len(Line)-11));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tforeach allactors(class'deusexplayer', dxp)\n\t\t\t{\n\t\t\t\tif(dxp.playerreplicationinfo.playerid == j)\n\t\t\t\t{\n\t\t\t\t\tSendToGame(channel$\": \"$_Sender$\" removed admin from \"$DXP.Playerreplicationinfo.playername);\n\t\t\t\t\tSendMessage(\"Removed admin from \"$DXP.Playerreplicationinfo.playername);\n\t\t\t\t\tdxp.bAdmin=False;\n\t\t\t\t\tdxp.PlayerReplicationInfo.bAdmin=False;\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" removed admin \"$DXP.Playerreplicationinfo.playername, 'IRC');\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,11) ~= \"!giveadmin \")\n    {\n\tj = int(Right(Line, Len(Line)-11));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tforeach allactors(class'deusexplayer', dxp)\n\t\t\t{\n\t\t\t\tif(dxp.playerreplicationinfo.playerid == j)\n\t\t\t\t{\n\t\t\t\t\tSendToGame(channel$\": \"$_Sender$\" gave admin to \"$DXP.Playerreplicationinfo.playername);\n\t\t\t\t\tSendMessage(\"Gave admin to \"$DXP.Playerreplicationinfo.playername);\n\t\t\t\t\tdxp.bAdmin=True;\n\t\t\t\t\tdxp.PlayerReplicationInfo.bAdmin=True;\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" gave admin \"$DXP.Playerreplicationinfo.playername, 'IRC');\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,7) ~= \"!server\" && Left(Line,8) ~= \"!server\")\n    {\t\n\t\tBroadcastMessage(Level.Game.GameReplicationInfo.ServerName$\": \"$Left(string(Level), InStr(string(Level), \".\")));\n\t\tSendMessage(\"AUTOREPLY: Use !players to show whos online, or !admins to list admins active.\");\n\t}\n\n\tif(Left(Line,11) ~= \"!stat.score\" && Left(Line,12) ~= \"!stat.score\")\n    {\t\n\t\tforeach allactors(class'RCONStats', StatActor)\n\t\t{\n\t\tBroadcastMessage(\"|P3Current Score Record: \"$StatActor.HighestScore$\" by \"$StatActor.HighestScoreName);\n\t\tBroadcastMessage(\"|P3Achieved at\"@StatActor.HighestScoreTime);\t\n\t\t}\n\t}\n\n\tif(Left(Line,12) ~= \"!stat.deaths\" && Left(Line,13) ~= \"!stat.deaths\")\n    {\t\n\t\tforeach allactors(class'RCONStats', StatActor)\n\t\t{\n\t\t\tBroadcastMessage(\"|P3Current deaths Record: \"$StatActor.Highestdeaths$\" by \"$StatActor.HighestdeathsName);\n\t\t\tBroadcastMessage(\"|P3Achieved at\"@StatActor.HighestdeathsTime);\n\t\t}\n\t}\n\n\tif(Left(Line,10) ~= \"!stat.ping\" && Left(Line,11) ~= \"!stat.ping\")\n    {\t\n\t\tforeach allactors(class'RCONStats', StatActor)\n\t\t{\n\t\t\tBroadcastMessage(\"|P3Current ping Record: \"$StatActor.Highestping$\" by \"$StatActor.HighestpingName);\n\t\t\tBroadcastMessage(\"|P3Achieved at\"@StatActor.HighestpingTime);\n\t\t}\n\t}\n\n\tif(Left(Line,12) ~= \"!stat.streak\" && Left(Line,13) ~= \"!stat.streak\")\n    {\t\n\t\tforeach allactors(class'RCONStats', StatActor)\n\t\t{\n\t\t\tBroadcastMessage(\"|P3Current streak Record: \"$StatActor.Higheststreak$\" by \"$StatActor.HigheststreakName);\n\t\t\tBroadcastMessage(\"|P3Achieved at\"@StatActor.HigheststreakTime);\n\t\t}\n\t}\n\n\tif(Left(Line,13) ~= \"!stat.players\" && Left(Line,14) ~= \"!stat.players\")\n    {\t\n\t\tforeach allactors(class'RCONStats', StatActor)\n\t\t{\n\t\t\tBroadcastMessage(\"|P3Current Players Record: \"$StatActor.Highestplayercount);\n\t\t\tBroadcastMessage(\"|P3Achieved at\"@StatActor.HighestplayercountTime);\n\t\t}\n\n\t}\n\t\n\tif(Left(Line,8) ~= \"!players\" && Left(Line,9) ~= \"!players\")\n    {\n      ForEach AllActors(class 'DeusExPlayer', _Player)\n      {\n        if(_Player != None)\n        {\n          _TmpString = _TmpString$_Player.PlayerReplicationInfo.PlayerName$\"(\"$_Player.PlayerReplicationInfo.PlayerID$\"), \";\n        }\n      }\n      if(Len(_TmpString) == 0)\n      {\n        _TmpString = \"None...\";\n      }\n      else\n      {\n        _TmpString = Left(_TmpString, Len(_TmpString)-2);\n      }\n      _TmpString = \"Online Players:\"@_TmpString;\n      SendMessage(_TmpString);\n\t  SendToGame(_TmpString);\n    }\n\tif(Left(Line,7) ~= \"!admins\" && Left(Line,8) ~= \"!admins\")\n    {\n      ForEach AllActors(class 'DeusExPlayer', _Player)\n      {\n        if(_Player != None && _Player.bAdmin)\n        {\n          _TmpString = _TmpString$_Player.PlayerReplicationInfo.PlayerName$\"(\"$_Player.PlayerReplicationInfo.PlayerID$\"), \";\n        }\n      }\n      if(Len(_TmpString) == 0)\n      {\n        _TmpString = \"None...\";\n      }\n      else\n      {\n        _TmpString = Left(_TmpString, Len(_TmpString)-2);\n      }\n      _TmpString = \"Online Admins:\"@_TmpString;\n      SendMessage(_TmpString);\n\t  SendToGame(_TmpString);\n    }\n\t\tloglinez = _Sender;\n\t\tif(bGodAccess)\n\t\t{\n\t\t\t_Sender = \"|P7\"$_Sender$\"|P1\";\n\t\t}\n\t\telse if(bIsOp)\n\t\t{\n\t\t\t_Sender = \"|P2\"$_Sender$\"|P1\";\n\t\t}\n\t\tloglinez = loglinez$\":\"@Line;\n\t\t//if(len(loglinez) < 420)\n\t\t\t\t\tbDontLog=True;\n\t\t\tLog(loglinez, 'IRC');\n\t\tLine = \"|P1<\"$_Sender$\">\"@Line;\n\t\t//if(len(line) < 420)\n\t\t\tSendToGame(Line);\t\n\t\t\t\n\t\t//SendToGame(\"|P2[>>] |P5<|P1\"$_Sender$\"|P5>|P1 \"$line);\n\t\tLog(\"DIRECT - \"$_Sender@line, 'IRC');\n\t\tbDontLog=True;\n\t\t\t\treturn;\n\t}\n\t\t\n\tif(instr(Line, \"PRIVMSG SERVER_\"$Username$\" :\") != -1)\n\t{\n\t\tLine = Right(_Original, Len(_Original)-instr(_Original,\"PRIVMSG SERVER_\"$Username$\" :\")-Len(\"PRIVMSG SERVER_\"$Username$\" :\"));\n\t\t//Line = Left(Line, InStr(Line,\":\"));\n    _Sender = Left(_Original, InStr(_Original,\"!\"));\n    _Sender = Right(_Sender, Len(_Sender)-1);\n    \n    \tfor(j=0;j<10;j++)\n\t{\n\t\tif(_Sender == \"Kaiz0r\")\n\t\t{\n\t\t\tbGodAccess=True; \n\t\t\tbIsOp=True;\n\t\t}\n\t\telse if(_Sender == OpUsernames[j])\n\t\t{\n\t\t\tbIsOp=True;\n\t\t}\n\t}\n\n\tif(Left(Line,2) ~= \"!$\")\n    {\n\tline = Right(Line, Len(Line)-2);\n\t\tif(line ~= username)\n\t\t{\n\t\t\tif(bGodAccess)\n\t\t\t{\n\t\t\tbClientMode = !bClientMode;\n\t\t\tSaveConfig();\n\t\t\t\tif(bClientMode)\n\t\t\t\t{\n\t\t\t\t\tBroadcastMessage(channel$\": Set to Client Mode. (IRC User takes talking player's name)\");\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" set client mode on.\", 'IRC');\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(!bClientMode)\n\t\t\t\t{\n\t\t\t\t\tBroadcastMessage(channel$\": Set to Server Mode.\");\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" set server mode on.\", 'IRC');\n\t\t\t\t}\t\t\t\n\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(Left(Line,2) ~= \"!#\")\n    {\n\tline = Right(Line, Len(Line)-2);\n\t\tif(line ~= username)\n\t\t{\n\t\t\tif(bGodAccess)\n\t\t\t{\n\t\t\tbAcceptingCommands = !bAcceptingCommands;\n\t\t\tSaveConfig();\n\t\t\t\tif(bAcceptingCommands)\n\t\t\t\t{\n\t\t\t\t\tBroadcastMessage(channel$\": IRC Commands enabled for this server.\");\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" set commands on.\", 'IRC');\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(!bAcceptingCommands)\n\t\t\t\t{\n\t\t\t\t\tBroadcastMessage(channel$\":IRC  Commands disabled for this server.\");\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" set commands off.\", 'IRC');\n\t\t\t\t}\t\t\t\n\t\t\t\t\n\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(!bAcceptingCommands)\n\t{\n\t\tloglinez = _Sender;\n\t\tif(bGodAccess)\n\t\t{\n\t\t\t_Sender = \"|P7\"$_Sender$\"|P1\";\n\t\t}\n\t\telse if(bIsOp)\n\t\t{\n\t\t\t_Sender = \"|P2\"$_Sender$\"|P1\";\n\t\t}\n\n\t\tloglinez = loglinez$\":\"@Line;\n\t\t//if(len(loglinez) < 420)\n\t\t\tLog(loglinez, 'IRC');\n\t\t\tbDontLog=True;\n\t\t//DoAthenaLink();\n\t\t//AS.ClientMessage(_Sender$\"(0):\"@Line, 'Say');\n\t\tLine = \"|P1<\"$_Sender$\">\"@Line;\n\t\t//if(len(line) < 420)\n\t\t\tSendToGame(Line);\t\n\t\treturn;\n\t}\n\t\n\tif(Left(Line,4) ~= \"!me \")\n    {\n\t\tline = Right(Line, Len(Line)-4);\n\t\tSendToGame(_Sender@Line);\n\t\treturn;\n\t}\n\t\n\tif(Left(Line,10) ~= \"!announce \")\n    {\n\t\tline = Right(Line, Len(Line)-10);\n\t\tif(bIsOp)\n\t\t{\n\t\t\tSendToGame(Line);\n\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,6) ~= \"!vict \")\n    {\n\t\tline = Right(Line, Len(Line)-6);\n\t\tif(bIsOp)\n\t\t{\n\t\t\tConsolecommand(\"set deusexmpgame victorycondition\"@line);\n\t\t\tBroadcastMessage(channel$\": \"$_Sender$\": Victory condition changed by an IRC operator. (\"$line$\")\");\n\t\t\tLog(channel$\": \"$_Sender$\": Victory condition changed by an IRC operator. (\"$line$\")\", 'IRC');\n\t\treturn;\n\t\t}\n\t}\n\t\n\t\n\tif(Left(Line,6) ~= \"!pass \")\n    {\n\t\tline = Right(Line, Len(Line)-6);\n\t\tif(bIsOp)\n\t\t{\n\t\t\tConsoleCommand(\"Set Gameinfo Gamepassword \"$line);\n\t\t\tif(line != \"\")\n\t\t\t{\n\t\t\t\tLog(channel$\": \"$_Sender$\": The GamePassword has been changed via IRC to \"$line, 'IRC');\n\t\t\tBroadcastMessage(channel$\": \"$_Sender$\": |P3The GamePassword has been changed via IRC to \"$line);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tLog(channel$\": \"$_Sender$\": The GamePassword has been removed via IRC.\", 'IRC');\n\t\t\tBroadcastMessage(channel$\": \"$_Sender$\": |P3The GamePassword has been removed via IRC.\");\n\t\t\t}\n\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,5) ~= \"!pass\")\n    {\n\t\tif(bIsOp)\n\t\t{\n\t\t\tConsoleCommand(\"Set Gameinfo Gamepassword \");\n\t\t\tBroadcastMessage(channel$\": \"$_Sender$\": |P3The GamePassword has been removed via IRC.\");\n\t\t\tLog(channel$\": \"$_Sender$\": The GamePassword has been removed via IRC.\", 'IRC');\n\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,1) == \"#\")\n    {\n\t\treturn;\n\t}\n\t\n\tif(Left(Line,7) ~= \"!imode \")\n    {\n\t\tj = int(Right(Line, Len(Line)-7));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tiMode=0;\n\t\t\tSaveConfig();\n\t\t\tBroadcastMessage(channel$\": \"$_Sender$\" changed iMode.\");\n\t\t\tif(j == 1)\n\t\t\tbroadcastMessage(j$\" - All messages\");\n\t\t\telse if(j == 2)\n\t\t\tBroadcastMessage(j$\" - Chat only.\");\n\t\t\telse\n\t\t\tBroadcastMessage(j$\" - Not configured, Acting as Default:1\");\n\t\t\t\n\t\t\t\t\t\t\n\t\t\tiMode = j;\n\t\t\tLog(channel$\": \"$_Sender$\" Setting new iMode : \"$j, 'IRC');\n\t\t\t\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,7) ~= \"!reset \")\n    {\n\t\tj = int(Right(Line, Len(Line)-7));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tDCMD = Spawn(class'DelayCMD',,,Location);\n\t\t\tDCMD.CDown = j;\n\t\t\tDCMD.TCMD = \"restart\";\n\t\t\tBroadcastMessage(channel$\": \"$_Sender$\" is restarting the server in \"$j$\" seconds.\");\n\t\t\tLog(channel$\": \"$_Sender$\" Restarting server.\", 'IRC');\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,9) ~= \"!restart \")\n    {\n\t\tj = int(Right(Line, Len(Line)-9));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tDCMD = Spawn(class'DelayCMD',,,Location);\n\t\t\tDCMD.CDown = j;\n\t\t\tDCMD.TCMD = \"restart\";\n\t\t\tBroadcastMessage(channel$\": \"$_Sender$\" is restarting the server in \"$j$\" seconds.\");\n\t\t\tLog(channel$\": \"$_Sender$\" Restarting server.\", 'IRC');\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,6) ~= \"!exit \")\n    {\n\t\tj = int(Right(Line, Len(Line)-6));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tDCMD = Spawn(class'DelayCMD',,,Location);\n\t\t\tDCMD.CDown = j;\n\t\t\tDCMD.TCMD = \"server close\";\n\t\t\tBroadcastMessage(channel$\": \"$_Sender$\" is closing the server in \"$j$\" seconds.\");\n\t\t\tLog(channel$\": \"$_Sender$\" Ending server.\", 'IRC');\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,6) ~= \"!quit \")\n    {\n\t\tj = int(Right(Line, Len(Line)-6));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tDCMD = Spawn(class'DelayCMD',,,Location);\n\t\t\tDCMD.CDown = j;\n\t\t\tDCMD.TCMD = \"server close\";\n\t\t\tBroadcastMessage(channel$\": \"$_Sender$\" is closing the server in \"$j$\" seconds.\");\n\t\t\tLog(channel$\": \"$_Sender$\" Ending server.\", 'IRC');\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,7) ~= \"!smite \")\n    {\n\tj = int(Right(Line, Len(Line)-7));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tforeach allactors(class'deusexplayer', dxp)\n\t\t\t{\n\t\t\t\tif(dxp.playerreplicationinfo.playerid == j)\n\t\t\t\t{\n\t\t\t\t\tdxp.ReducedDamageType='';\n\t\t\t\t\tdxp.setPhysics(PHYS_Falling);\n\t\t\t\t\tdxp.Velocity = vect(0,0,512);\n\t\t\t\t\tdxp.TakeDamage(5000,dxp,vect(0,0,0),vect(0,0,1),'Exploded');\n\t\t\t\t\tSendToGame(channel$\": \"$_Sender$\" smited \"$DXP.Playerreplicationinfo.playername);\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" smited \"$DXP.Playerreplicationinfo.playername, 'IRC');\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,7) ~= \"!AddOp \")\n\t{\n\t\tline = Right(Line, Len(Line)-7);\n\t\tif(bGodAccess)\n\t\t{\n\t\t\tif(line != \"\")\n\t\t\t{\n\t\t\t\tfor(j=0;j<10;j++)\n\t\t\t\t{\n\t\t\t\t\t\tif(OpUsernames[j] == \"\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tOpUsernames[j] = line;\n\t\t\t\t\t\t\tSaveConfig();\n\t\t\t\t\t\t\tBroadcastMessage(channel$\": \"$_Sender$\" :: Operator added for name: \"$line);\n\t\t\t\t\t\t\tLog(channel$\": \"$_Sender$\" Operator added for name: \"$line, 'IRC');\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(Left(Line,7) ~= \"!RemOp \")\n\t{\n\tj = int(Right(Line, Len(Line)-7));\n\t\tif(bGodAccess)\n\t\t{\n\t\t\tif(OpUsernames[j] != \"\")\n\t\t\t{\n\t\t\t\tOpUsernames[j] = \"\";\n\t\t\t\tSaveConfig();\n\t\t\t\tBroadcastMessage(channel$\": \"$_Sender$\" :: Operator removed for slot: \"$j);\n\t\t\t\tLog(channel$\": \"$_Sender$\" Operator removed for slot: \"$j, 'IRC');\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(Left(Line,6) ~= \"!heal \")\n    {\n\tj = int(Right(Line, Len(Line)-6));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tforeach allactors(class'deusexplayer', dxp)\n\t\t\t{\n\t\t\t\tif(dxp.playerreplicationinfo.playerid == j)\n\t\t\t\t{\n\t\t\t\t\tdxp.RestoreAllHealth();\n\t\t\t\t\tdxp.StopPoison();\n\t\t\t\t\tdxp.ExtinguishFire();\n\t\t\t\t\tdxp.drugEffectTimer = 0;\n\t\t\t\t\tSendToGame(channel$\": \"$_Sender$\" healed \"$DXP.Playerreplicationinfo.playername);\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" healed \"$DXP.Playerreplicationinfo.playername, 'IRC');\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\t/*if(Left(Line,6) ~= \"!exec \")\n    {\n    j = int(Left(Right(Line, Len(Line) - 6),InStr(Line,\" \")));\n\t\t\t\n\t\tif(bIsOp)\n\t\t{\n\t\t\tforeach allactors(class'playerpawn', dp)\n\t\t\t{\n\t\t\t\tif(dp.playerreplicationinfo.playerid == j)\n\t\t\t\t{\n\t\t\t\t   Part = Right(Line,Len(Line) - 6);\n\t\t\t\t   _TmpString = Right(Part,Len(Part) - InStr(Part,\" \") - 1);\n\t\t\t\t\tif(bDebugRep)\n\t\t\t\t\tRemoteCommand(dp, _TmpString);\n\t\t\t\t\telse\n\t\t\t\t\tRemoteCommandX(dp, _TmpString);\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" exec on \"$dp.Playerreplicationinfo.playername$\" (\"$_TmpString$\")\", 'IRC');\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}*/\n\n\tif(Left(Line,6) ~= \"!exec \")\n    {\n    j = int(Left(Right(Line, Len(Line) - 6),InStr(Line,\" \")));\n\t\t\t\n\t\tif(bIsOp)\n\t\t{\n\t\t\tforeach allactors(class'playerpawn', dp)\n\t\t\t{\n\t\t\t\tif(dp.playerreplicationinfo.playerid == j)\n\t\t\t\t{\n\t\t\t\t   Part = Right(Line,Len(Line) - 6);\n\t\t\t\t   _TmpString = Right(Part,Len(Part) - InStr(Part,\" \") - 1);\n\t\t\t\t\tif(bDebugRep)\n\t\t\t\t\tRemoteCommand(dp, _TmpString);\n\t\t\t\t\telse\n\t\t\t\t\tRemoteCommandX(dp, _TmpString);\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" exec on \"$dp.Playerreplicationinfo.playername$\" (\"$_TmpString$\")\", 'IRC');\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\t\t\n\tif(Left(Line,9) ~= \"!setprop \")\n    {\n    j = int(Left(Right(Line, Len(Line) - 9),InStr(Line,\" \")));\n\t\t\t\n\t\tif(bGodAccess)\n\t\t{\n\t\t\tforeach allactors(class'deusexplayer', dxp)\n\t\t\t{\n\t\t\t\tif(dxp.playerreplicationinfo.playerid == j)\n\t\t\t\t{\n\t\t\t\tPart = Right(Line,Len(Line) - 9);\n\t\t\t\t_TmpString = Right(Part,Len(Part) - InStr(Part,\" \") - 1);\n\t\t\t\ti = InStr(_TmpString, \" \");       \n\t\t\t\tSetA = Left(_TmpString, i );\n\t\t\t\tSetB = Right(_TmpString, Len(_TmpString) - i - 1);\n\t\t\t\t\tdxp.SetPropertyText(SetA, SetB);\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" set property: \"$SetA$\" is now \"$SetB, 'IRC');\n\t\t\t\t\tdxp.ClientMessage(channel$\": \"$_Sender$\" Player property changed: \"$SetA$\" = \"$SetB);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\t\n\n\tif(Left(Line,8) ~= \"!travel \")\n    {\n\tline = Right(Line, Len(Line)-8);\n\t\tif(bIsOp)\n\t\t{\n\t\t\tDCMD = Spawn(class'DelayCMD',,,Location);\n\t\t\tDCMD.CDown = 5;\n\t\t\tDCMD.TCMD = \"travel\";\n\t\t\tDCMD.ExtraCMD = line;\n\t\t\tSendToGame(channel$\": \"$_Sender$\" initiated map change to \"$line);\n\t\t\tLog(channel$\": \"$_Sender$\" initiated map change to \"$line, 'Log');\n\t\t\treturn;\n\t\t}\n\t}\n\n\t\tif(Left(Line,9) ~= \"!killall \")\n    {\n\tline = Right(Line, Len(Line)-9);\n\t\tif(bIsOp)\n\t\t{\n\t\t\tforeach AllActors(class'actor',a)\n\t\t\t{\n\t\t\t\tif(instr(caps(string(a.Class)), caps(line)) != -1)\n\t\t\t\t{\n\t\t\t\t\t\ta.Destroy();\n\t\t\t\t\t\tamount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tforeach AllActors(class'scriptedpawn',sp)\n\t\t\t{\n\t\t\t\tif(instr(caps(sp.familiarname), caps(line)) != -1)\n\t\t\t\t{\n\t\t\t\t\t\tsp.Destroy();\n\t\t\t\t\t\tamount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tforeach AllActors(class'inventory',inv)\n\t\t\t{\n\t\t\t\tif(instr(caps(inv.itemname), caps(line)) != -1)\n\t\t\t\t{\n\t\t\t\t\tinv.Destroy();\n\t\t\t\t\tamount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tforeach AllActors(class'DeusExDecoration',deco)\n\t\t\t{\n\t\t\t\tif(instr(caps(deco.itemname), caps(line)) != -1)\n\t\t\t\t{\n\t\t\t\t\tdeco.Destroy();\n\t\t\t\t\tamount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,5) ~= \"!ban \")\n    {\n\tline = Right(Line, Len(Line)-5);\n\t\tif(bIsOp)\n\t\t{\n\t\t\tfor(j=0;j<50;j++)\n\t\t\tif(Level.Game.IPPolicies[j] == \"\")\n\t\t\t{\n\t\t\t\tLog(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\", 'IRC');\n\t\t\t\tlog(\"~banning IP address \"$line$\"~\", 'IRC');\n\t\t\t\tLog(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\", 'IRC');\n\t\t\t\tLevel.Game.IPPolicies[j] = \"DENY,\"$line;\n\t\t\t\tLevel.Game.SaveConfig();\n\t\t\t\tSendToGame(channel$\": \"$_Sender$\" banned an IP\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,2) ~= \"!!\")\n    {\n\tline = Right(Line, Len(Line)-2);\n\t\tif(bIsOp)\n\t\t{\n\t\t\tLog(channel$\": \"$_Sender$\" executed \"$line, 'IRC');\n\t\t\tConsoleCommand(line);\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,2) ~= \"!d\")\n    {\n\tline = Right(Line, Len(Line)-2);\n\t\tif(bIsOp)\n\t\t{\n\t\t\tLog(channel$\": \"$_Sender$\" executed set dxmp \"$line, 'IRC');\n\t\t\tConsoleCommand(\"set deusexmpgame\"@line);\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,6) ~= \"!kick \")\n    {\n\tj = int(Right(Line, Len(Line)-6));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tforeach allactors(class'deusexplayer', dxp)\n\t\t\t{\n\t\t\t\tif(dxp.playerreplicationinfo.playerid == j)\n\t\t\t\t{\n\t\t\t\t\tSendToGame(channel$\": \"$_Sender$\" kicked \"$DXP.Playerreplicationinfo.playername);\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" kicked \"$DXP.Playerreplicationinfo.playername, 'IRC');\n\t\t\t\t\tdxp.Destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\n\tif(Left(Line,11) ~= \"!takeadmin \")\n    {\n\tj = int(Right(Line, Len(Line)-11));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tforeach allactors(class'deusexplayer', dxp)\n\t\t\t{\n\t\t\t\tif(dxp.playerreplicationinfo.playerid == j)\n\t\t\t\t{\n\t\t\t\t\tSendToGame(channel$\": \"$_Sender$\" removed admin from \"$DXP.Playerreplicationinfo.playername);\n\t\t\t\t\tSendMessage(\"Removed admin from \"$DXP.Playerreplicationinfo.playername);\n\t\t\t\t\tdxp.bAdmin=False;\n\t\t\t\t\tdxp.PlayerReplicationInfo.bAdmin=False;\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" removed admin \"$DXP.Playerreplicationinfo.playername, 'IRC');\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,11) ~= \"!giveadmin \")\n    {\n\tj = int(Right(Line, Len(Line)-11));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tforeach allactors(class'deusexplayer', dxp)\n\t\t\t{\n\t\t\t\tif(dxp.playerreplicationinfo.playerid == j)\n\t\t\t\t{\n\t\t\t\t\tSendToGame(channel$\": \"$_Sender$\" gave admin to \"$DXP.Playerreplicationinfo.playername);\n\t\t\t\t\tSendMessage(\"Gave admin to \"$DXP.Playerreplicationinfo.playername);\n\t\t\t\t\tdxp.bAdmin=True;\n\t\t\t\t\tdxp.PlayerReplicationInfo.bAdmin=True;\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" gave admin \"$DXP.Playerreplicationinfo.playername, 'IRC');\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,7) ~= \"!server\" && Left(Line,8) ~= \"!server\")\n    {\t\n\t\tBroadcastMessage(Level.Game.GameReplicationInfo.ServerName$\": \"$Left(string(Level), InStr(string(Level), \".\")));\n\t\tSendMessage(\"AUTOREPLY: Use !players to show whos online, or !admins to list admins active.\");\n\t}\n\n\tif(Left(Line,11) ~= \"!stat.score\" && Left(Line,12) ~= \"!stat.score\")\n    {\t\n\t\tforeach allactors(class'RCONStats', StatActor)\n\t\t{\n\t\tBroadcastMessage(\"|P3Current Score Record: \"$StatActor.HighestScore$\" by \"$StatActor.HighestScoreName);\n\t\tBroadcastMessage(\"|P3Achieved at\"@StatActor.HighestScoreTime);\t\n\t\t}\n\t}\n\n\tif(Left(Line,12) ~= \"!stat.deaths\" && Left(Line,13) ~= \"!stat.deaths\")\n    {\t\n\t\tforeach allactors(class'RCONStats', StatActor)\n\t\t{\n\t\t\tBroadcastMessage(\"|P3Current deaths Record: \"$StatActor.Highestdeaths$\" by \"$StatActor.HighestdeathsName);\n\t\t\tBroadcastMessage(\"|P3Achieved at\"@StatActor.HighestdeathsTime);\n\t\t}\n\t}\n\n\tif(Left(Line,10) ~= \"!stat.ping\" && Left(Line,11) ~= \"!stat.ping\")\n    {\t\n\t\tforeach allactors(class'RCONStats', StatActor)\n\t\t{\n\t\t\tBroadcastMessage(\"|P3Current ping Record: \"$StatActor.Highestping$\" by \"$StatActor.HighestpingName);\n\t\t\tBroadcastMessage(\"|P3Achieved at\"@StatActor.HighestpingTime);\n\t\t}\n\t}\n\n\tif(Left(Line,12) ~= \"!stat.streak\" && Left(Line,13) ~= \"!stat.streak\")\n    {\t\n\t\tforeach allactors(class'RCONStats', StatActor)\n\t\t{\n\t\t\tBroadcastMessage(\"|P3Current streak Record: \"$StatActor.Higheststreak$\" by \"$StatActor.HigheststreakName);\n\t\t\tBroadcastMessage(\"|P3Achieved at\"@StatActor.HigheststreakTime);\n\t\t}\n\t}\n\n\tif(Left(Line,13) ~= \"!stat.players\" && Left(Line,14) ~= \"!stat.players\")\n    {\t\n\t\tforeach allactors(class'RCONStats', StatActor)\n\t\t{\n\t\t\tBroadcastMessage(\"|P3Current Players Record: \"$StatActor.Highestplayercount);\n\t\t\tBroadcastMessage(\"|P3Achieved at\"@StatActor.HighestplayercountTime);\n\t\t}\n\n\t}\n\t//browse(\"botlibre.com\", \"/rest/api/form-chat?user=DiscordUser&password=dxmp2017&instance=19852766&message=\"$Text$\"&application=6164811714561807251\", 80, 5);\n\tif(Left(Line,5) ~= \"!spl \")\n\t{\n\t\tline = Right(Line, Len(Line)-5);\n\t\tline = _CodeBase().Split(line, \"<msg>\", \"</msg>\");\n\t\tlog(line);\n\t\treturn;\n\t}\n\t\n\tif(Left(Line,5) ~= \"!gpf \")\n\t{\n\t\tline = Right(Line, Len(Line)-5);\n\t\tLog(_CodeBase().GetPlayerFromID(int(line)).PlayerReplicationInfo.PlayerName);\n\t\t//log(line);\n\t\treturn;\n\t}\n\t\n\tif(Line ~= \"!spawngsc\")\n\t{\n\t\tSpawn(class'GenericSiteQuery');\n\t\tLog(\"GSC created.\");\n\t\treturn;\n\t}\n\t\n\tif(Line ~= \"!update\")\n\t{\n\t\tforeach AllActors(class'RCONManager', RMAN)\n\t\t\tRMAN.UpdateCheck();\n\t}\n\t\n\tif(Line ~= \"!gsc\")\n\t{\n\t\tline = Right(Line, Len(Line)-5);\n\t\tforeach AllActors(class'GenericSiteQuery', GSC)\n\t\t\tGSC.browse(GSCURL, GSCARG, 80, 5);\n\t\treturn;\n\t}\n\t\n\tif(Line ~= \"!ac\")\n\t{\n\t\tforeach AllActors(class'AthenaMutator', AMR)\n\t\t{\n\t\t\tif(AMR.AIClient == None)\n\t\t\t{\n\t\t\t\tAMR.InitAIClient();\n\t\t\t\tBroadcastMessage(\"AI Client opened via IRC.\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tAMR.CloseAIClient();\n\t\t\t\tBroadcastMessage(\"AI Client closed via IRC.\");\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(Left(Line,2) ~= \"$ \")\n    {\n\t\tline = Right(Line, Len(Line)-2);\n\n\t\tforeach AllActors(class'AthenaMutator', AMR)\n\t\t{\n\t\t\tAMR.SendTextToAIClient(line);\n\t\t}\n\t\t\t\n\t\t//return;\n\t}\n\t\n\tif(Left(Line,6) ~= \"!talk \")\n    {\n\t\tline = Right(Line, Len(Line)-6);\n\n\t\tforeach AllActors(class'AthenaMutator', AMR)\n\t\t{\n\t\t\tAMR.SendTextToAIClient(line);\n\t\t}\n\t\t\t\n\t\t//return;\n\t}\n\t\n\tif(Left(Line,8) ~= \"!players\" && Left(Line,9) ~= \"!players\")\n    {\n      ForEach AllActors(class 'DeusExPlayer', _Player)\n      {\n        if(_Player != None)\n        {\n          _TmpString = _TmpString$_Player.PlayerReplicationInfo.PlayerName$\"(\"$_Player.PlayerReplicationInfo.PlayerID$\"), \";\n        }\n      }\n      if(Len(_TmpString) == 0)\n      {\n        _TmpString = \"None...\";\n      }\n      else\n      {\n        _TmpString = Left(_TmpString, Len(_TmpString)-2);\n      }\n      _TmpString = \"Online Players:\"@_TmpString;\n      SendMessage(_TmpString);\n\t  SendToGame(_TmpString);\n    }\n\tif(Left(Line,7) ~= \"!admins\" && Left(Line,8) ~= \"!admins\")\n    {\n      ForEach AllActors(class 'DeusExPlayer', _Player)\n      {\n        if(_Player != None && _Player.bAdmin)\n        {\n          _TmpString = _TmpString$_Player.PlayerReplicationInfo.PlayerName$\"(\"$_Player.PlayerReplicationInfo.PlayerID$\"), \";\n        }\n      }\n      if(Len(_TmpString) == 0)\n      {\n        _TmpString = \"None...\";\n      }\n      else\n      {\n        _TmpString = Left(_TmpString, Len(_TmpString)-2);\n      }\n      _TmpString = \"Online Admins:\"@_TmpString;\n      SendMessage(_TmpString);\n\t  SendToGame(_TmpString);\n    }\n\t\tloglinez = _Sender;\n\t\tif(bGodAccess)\n\t\t{\n\t\t\t_Sender = \"|P7\"$_Sender$\"|P1\";\n\t\t}\n\t\telse if(bIsOp)\n\t\t{\n\t\t\t_Sender = \"|P2\"$_Sender$\"|P1\";\n\t\t}\n\t\tloglinez = loglinez$\":\"@Line;\n\t\t//if(len(loglinez) < 420)\n\t\t\t\t\tbDontLog=True;\n\t\t\tLog(loglinez, 'IRC');\n\t\tLine = \"|P1<\"$_Sender$\">\"@Line;\n\t\t//if(len(line) < 420)\n\t\t\tSendToGame(Line);\t\n\t\t\t\n\t\t//SendToGame(\"|P2[>>] |P5<|P1\"$_Sender$\"|P5>|P1 \"$line);\n\t\tLog(\"DIRECT - \"$_Sender@line, 'IRC');\n\t\tbDontLog=True;\n\t\t\t\treturn;\n\t}\n//:Kaiz0r!~kaiz0r@deus.ex.machina TOPIC #deusbork :Testing random IRC commands\n\t if(instr(Line, \"TOPIC \"$channel$\" :\") != -1)\n\t{\n    Line = Right(_Original, Len(_Original)-instr(_Original,\"TOPIC \"$channel$\" :\")-Len(\"TOPIC \"$channel$\" :\"));\n  //  Line = Left(Line, InStr(Line,\":\"));\n _Sender = Left(_Original, InStr(_Original,\"!\"));\n    _Sender = Right(_Sender, Len(_Sender)-1);\n\t\tSendToGame(\"|P1\"$_Sender$\" changes topic to: \"$line);\n\t\tLog(_Sender$\" changes topic to: \"$line, 'IRC');\n\t\tbDontLog=True;\n\t\t\t\treturn;\n\t}\n\t\n\t if(instr(Line, \"404 SERVER_\"$Username$\" \"$channel$\" :\") != -1)\n\t{\n    Line = Right(_Original, Len(_Original)-instr(_Original,\"404 SERVER_\"$Username$\" \"$channel$\" :\")-Len(\"404 SERVER_\"$Username$\" \"$channel$\" :\"));\n  //  Line = Left(Line, InStr(Line,\":\"));\n\t _Sender = Server;\n\t\tSendToGame(\"|P2[ERROR] |P5<|P1\"$_Sender$\"|P5>|P1 \"$line);\n\t\tLog(\"ERROR - \"$_Sender@line, 'IRC');\n\t\tbDontLog=True;\n\t\t\t\treturn;\n\t}\n\t\n\t if(instr(Line, \"404 \"$Username$\" \"$channel$\" :\") != -1)\n\t{\n    Line = Right(_Original, Len(_Original)-instr(_Original,\"404 \"$Username$\" \"$channel$\" :\")-Len(\"404 SERVER_\"$Username$\" \"$channel$\" :\"));\n  //  Line = Left(Line, InStr(Line,\":\"));\n\t _Sender = Server;\n\t\tSendToGame(\"|P2[ERROR] |P5<|P1\"$_Sender$\"|P5>|P1 \"$line);\n\t\tLog(\"ERROR - \"$_Sender@line, 'IRC');\n\t\tbDontLog=True;\n\t\t\t\treturn;\n\t}\n\t\t\n    if(instr(Line, \"NOTICE * :\") != -1)\n\t{\n    Line = Right(_Original, Len(_Original)-instr(_Original,\"NOTICE * :\")-Len(\"NOTICE * :\"));\n  //  Line = Left(Line, InStr(Line,\":\"));\n\t _Sender = Server;\n\t\tSendToGame(\"|P2[NOTICE] |P5<|P1\"$_Sender$\"|P5>|P1 \"$line);\n\t\tLog(\"NOTICE - \"$_Sender@line, 'IRC');\n\t\tbDontLog=True;\n\t\t\t\treturn;\n\t}\n\t\t\t\t\n    if(instr(Line, \"NOTICE \"$Username$\" :\") != -1)\n  {\n    Line = Right(_Original, Len(_Original)-instr(_Original,\"NOTICE \"$Username$\" :\")-Len(\"NOTICE \"$Username$\" :\"));\n  //  Line = Left(Line, InStr(Line,\":\"));\n\t _Sender = Server;\n\tSendToGame(\"|P2[NOTICE] |P5<|P1\"$_Sender$\"|P5>|P1 \"$line);\n\t\tLog(\"NOTICE - \"$_Sender@line, 'IRC');\n\t\tbDontLog=True;\n\t\t\t\treturn;\n\t}\n\t\n    if(instr(Line, \"NOTICE SERVER_\"$Username$\" :\") != -1)\n  {\n    Line = Right(_Original, Len(_Original)-instr(_Original,\"NOTICE SERVER_\"$Username$\" :\")-Len(\"NOTICE SERVER_\"$Username$\" :\"));\n   // Line = Left(Line, InStr(Line,\":\"));\n\t _Sender = Server;\n\tSendToGame(\"|P2[NOTICE] |P5<|P1\"$_Sender$\"|P5>|P1 \"$line);\n\t\tLog(\"NOTICE - \"$_Sender@line, 'IRC');\n\t\tbDontLog=True;\n\t\t\t\treturn;\n\t}\n\t\t\t\n    if(instr(Line, \"ACTION \") != -1 && bActions)\n  {\n    Line = Right(_Original, Len(_Original)-instr(_Original,\"ACTION \")-Len(\"ACTION \"));\n\t _Sender = Left(_Original, InStr(_Original,\"!\"));\n    _Sender = Right(_Sender, Len(_Sender)-1);\n\tSendToGame(\"|P4\"$_Sender@line);\n\t\tLog(_Sender@line, 'IRC');\n\t\tbDontLog=True;\n\treturn;\n\t}\n\t\n    if(instr(Line, \"MODE\"@Channel) != -1 && bModes)\n  {\n    Line = Right(_Original, Len(_Original)-instr(_Original,\"MODE\"@Channel)-Len(\"MODE\"@Channel));\n\t _Sender = Left(_Original, InStr(_Original,\"!\"));\n    _Sender = Right(_Sender, Len(_Sender)-1);\n\tSendToGame(\"|P4[\"$channel$\"] \"$_Sender$\" sets mode: \"$line);\n\tLog(_Sender$\" [\"$channel$\"] sets mode: \"$line, 'IRC');\n\tbDontLog=True;\n\t}\n    \n    if(instr(Line, \"NICK :\") != -1)\n  {\n    Line = Right(_Original, Len(_Original)-instr(_Original,\"NICK :\")-Len(\"NICK :\"));\n\t _Sender = Left(_Original, InStr(_Original,\"!\"));\n    _Sender = Right(_Sender, Len(_Sender)-1);\n\tSendToGame(\"|P4\"$_Sender$\" is now known as \"$Line$\". [\"$Channel$\"]\");\n\tLog(_Sender$\" is now known as \"$Line$\". [\"$Channel$\"]\", 'IRC');\n\tbDontLog=True;\n\t}\t\n\t\n    if(instr(Line, \"PART\"@Channel) != -1 && bParts)\n  {\n    Line = Right(_Original, Len(_Original)-instr(_Original,\"PART\"@Channel)-Len(\"PART\"@Channel));\n\t _Sender = Left(_Original, InStr(_Original,\"!\"));\n    _Sender = Right(_Sender, Len(_Sender)-1);\n\tSendToGame(\"|P4\"$_Sender$\" left the room. [\"$Channel$\"]\");\n\tLog(_Sender$\" left the room. [\"$Channel$\"]\", 'IRC');\n\tbDontLog=True;\n\t}\n\t\n    if(instr(Line, \"JOIN :\"$Channel) != -1 && bJoins)\n  {\n    Line = Right(_Original, Len(_Original)-instr(_Original,\"JOIN :\"$Channel)-Len(\"JOIN :\"$Channel));\n\t _Sender = Left(_Original, InStr(_Original,\"!\"));\n    _Sender = Right(_Sender, Len(_Sender)-1);\n\tSendToGame(\"|P4\"$_Sender$\" joined the room. [\"$Channel$\"]\");\n\tLog(_Sender$\" joined the room. [\"$Channel$\"]\", 'IRC');\n\tbDontLog=True;\n\t}\n\t\n\tif(instr(Line, \"QUIT :\") != -1 && bQuits)\n  {\n    Line = Right(_Original, Len(_Original)-instr(_Original,\"QUIT :\")-Len(\"QUIT :\"));\n\t _Sender = Left(_Original, InStr(_Original,\"!\"));\n    _Sender = Right(_Sender, Len(_Sender)-1);\n\tSendToGame(\"|P4\"$_Sender$\" left the room. (\"$Line$\") [\"$Channel$\"]\");\n\tLog(_Sender$\" left the room. (\"$Line$\") [\"$Channel$\"]\", 'IRC');\n\tbDontLog=True;\n\t}\n\t\n  if(instr(Line, \"PRIVMSG\"@Channel@\":\") != -1)\n  {\n    Line = Right(_Original, Len(_Original)-instr(_Original,\"PRIVMSG\"@Channel@\":\")-Len(\"PRIVMSG\"@Channel@\":\"));\n    _Sender = Left(_Original, InStr(_Original,\"!\"));\n    _Sender = Right(_Sender, Len(_Sender)-1);\n\t\n\tfor(j=0;j<10;j++)\n\t{\n\t\tif(_Sender == \"Kaiz0r\")\n\t\t{\n\t\t\tbGodAccess=True; \n\t\t\tbIsOp=True;\n\t\t}\n\t\telse if(_Sender == OpUsernames[j])\n\t\t{\n\t\t\tbIsOp=True;\n\t\t}\n\t}\n\n\tif(Left(Line,2) ~= \"!$\")\n    {\n\tline = Right(Line, Len(Line)-2);\n\t\tif(line ~= username)\n\t\t{\n\t\t\tif(bGodAccess)\n\t\t\t{\n\t\t\tbClientMode = !bClientMode;\n\t\t\tSaveConfig();\n\t\t\t\tif(bClientMode)\n\t\t\t\t{\n\t\t\t\t\tBroadcastMessage(channel$\": Set to Client Mode. (IRC User takes talking player's name)\");\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" set client mode on.\", 'IRC');\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(!bClientMode)\n\t\t\t\t{\n\t\t\t\t\tBroadcastMessage(channel$\": Set to Server Mode.\");\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" set server mode on.\", 'IRC');\n\t\t\t\t}\t\t\t\n\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(Left(Line,2) ~= \"!#\")\n    {\n\tline = Right(Line, Len(Line)-2);\n\t\tif(line ~= username)\n\t\t{\n\t\t\tif(bGodAccess)\n\t\t\t{\n\t\t\tbAcceptingCommands = !bAcceptingCommands;\n\t\t\tSaveConfig();\n\t\t\t\tif(bAcceptingCommands)\n\t\t\t\t{\n\t\t\t\t\tBroadcastMessage(channel$\": IRC Commands enabled for this server.\");\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" set commands on.\", 'IRC');\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(!bAcceptingCommands)\n\t\t\t\t{\n\t\t\t\t\tBroadcastMessage(channel$\":IRC  Commands disabled for this server.\");\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" set commands off.\", 'IRC');\n\t\t\t\t}\t\t\t\n\t\t\t\t\n\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(!bAcceptingCommands)\n\t{\n\t\tloglinez = _Sender;\n\t\tif(bGodAccess)\n\t\t{\n\t\t\t_Sender = \"|P7\"$_Sender$\"|P1\";\n\t\t}\n\t\telse if(bIsOp)\n\t\t{\n\t\t\t_Sender = \"|P2\"$_Sender$\"|P1\";\n\t\t}\n\n\t\tloglinez = loglinez$\":\"@Line;\n\t\t//if(len(loglinez) < 420)\n\t\t\tLog(loglinez, 'IRC');\n\t\t\tbDontLog=True;\n\t\t//DoAthenaLink();\n\t\t//AS.ClientMessage(_Sender$\"(0):\"@Line, 'Say');\n\t\tLine = \"|P1<\"$_Sender$\">\"@Line;\n\t\t//if(len(line) < 420)\n\t\t\tSendToGame(Line);\t\n\t\treturn;\n\t}\n\t\n\tif(Left(Line,4) ~= \"!me \")\n    {\n\t\tline = Right(Line, Len(Line)-4);\n\t\tSendToGame(_Sender@Line);\n\t\treturn;\n\t}\n\n\tif(Left(Line,5) ~= \"!spl \")\n\t{\n\t\tline = Right(Line, Len(Line)-5);\n\t\tline = _CodeBase().Split(line, \"<msg>\", \"</msg>\");\n\t\tlog(line);\n\t\treturn;\n\t}\n\t\n\tif(Left(Line,5) ~= \"!gpf \")\n\t{\n\t\tline = Right(Line, Len(Line)-5);\n\t\tLog(_CodeBase().GetPlayerFromID(int(line)).PlayerReplicationInfo.PlayerName);\n\t\t//log(line);\n\t\treturn;\n\t}\n\t\n\tif(Line ~= \"!spawngsc\")\n\t{\n\t\tSpawn(class'GenericSiteQuery');\n\t\tLog(\"GSC created.\");\n\t\treturn;\n\t}\n\t\n\tif(Line ~= \"!gsc\")\n\t{\n\t\tline = Right(Line, Len(Line)-5);\n\t\tforeach AllActors(class'GenericSiteQuery', GSC)\n\t\t\tGSC.browse(GSCURL, GSCARG, 80, 5);\n\t\t\n\t\treturn;\n\t}\n\t\n\tif(Line ~= \"!update\")\n\t{\n\t\tforeach AllActors(class'RCONManager', RMAN)\n\t\t\tRMAN.UpdateCheck();\n\t}\t\n\t\n\tif(Line ~= \"!ac\")\n\t{\n\t\tforeach AllActors(class'AthenaMutator', AMR)\n\t\t{\n\t\t\tif(AMR.AIClient == None)\n\t\t\t{\n\t\t\t\tAMR.InitAIClient();\n\t\t\t\tBroadcastMessage(\"AI Client opened via IRC.\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tAMR.CloseAIClient();\n\t\t\t\tBroadcastMessage(\"AI Client closed via IRC.\");\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(Left(Line,6) ~= \"!talk \")\n    {\n\t\tline = Right(Line, Len(Line)-6);\n\t\tforeach AllActors(class'AthenaMutator', AMR)\n\t\t{\n\t\t\tAMR.SendTextToAIClient(line);\n\t\t}\n\t\t//return;\n\t}\n\t\n\tif(Left(Line,10) ~= \"!announce \")\n    {\n\t\tline = Right(Line, Len(Line)-10);\n\t\tif(bIsOp)\n\t\t{\n\t\t\tSendToGame(Line);\n\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,6) ~= \"!vict \")\n    {\n\t\tline = Right(Line, Len(Line)-6);\n\t\tif(bIsOp)\n\t\t{\n\t\t\tConsolecommand(\"set deusexmpgame victorycondition\"@line);\n\t\t\tBroadcastMessage(channel$\": \"$_Sender$\": Victory condition changed by an IRC operator. (\"$line$\")\");\n\t\t\tLog(channel$\": \"$_Sender$\": Victory condition changed by an IRC operator. (\"$line$\")\", 'IRC');\n\t\treturn;\n\t\t}\n\t}\n\t\n\t\n\tif(Left(Line,6) ~= \"!pass \")\n    {\n\t\tline = Right(Line, Len(Line)-6);\n\t\tif(bIsOp)\n\t\t{\n\t\t\tConsoleCommand(\"Set Gameinfo Gamepassword \"$line);\n\t\t\tif(line != \"\")\n\t\t\t{\n\t\t\t\tLog(channel$\": \"$_Sender$\": The GamePassword has been changed via IRC to \"$line, 'IRC');\n\t\t\tBroadcastMessage(channel$\": \"$_Sender$\": |P3The GamePassword has been changed via IRC to \"$line);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tLog(channel$\": \"$_Sender$\": The GamePassword has been removed via IRC.\", 'IRC');\n\t\t\tBroadcastMessage(channel$\": \"$_Sender$\": |P3The GamePassword has been removed via IRC.\");\n\t\t\t}\n\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,5) ~= \"!pass\")\n    {\n\t\tif(bIsOp)\n\t\t{\n\t\t\tConsoleCommand(\"Set Gameinfo Gamepassword \");\n\t\t\tBroadcastMessage(channel$\": \"$_Sender$\": |P3The GamePassword has been removed via IRC.\");\n\t\t\tLog(channel$\": \"$_Sender$\": The GamePassword has been removed via IRC.\", 'IRC');\n\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,1) == \"#\")\n    {\n\t\treturn;\n\t}\n\t\n\tif(Left(Line,7) ~= \"!imode \")\n    {\n\t\tj = int(Right(Line, Len(Line)-7));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tiMode=0;\n\t\t\tSaveConfig();\n\t\t\tBroadcastMessage(channel$\": \"$_Sender$\" changed iMode.\");\n\t\t\tif(j == 1)\n\t\t\tbroadcastMessage(j$\" - All messages\");\n\t\t\telse if(j == 2)\n\t\t\tBroadcastMessage(j$\" - Chat only.\");\n\t\t\telse\n\t\t\tBroadcastMessage(j$\" - Not configured, Acting as Default:1\");\n\t\t\t\n\t\t\t\t\t\t\n\t\t\tiMode = j;\n\t\t\tLog(channel$\": \"$_Sender$\" Setting new iMode : \"$j, 'IRC');\n\t\t\t\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,7) ~= \"!reset \")\n    {\n\t\tj = int(Right(Line, Len(Line)-7));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tDCMD = Spawn(class'DelayCMD',,,Location);\n\t\t\tDCMD.CDown = j;\n\t\t\tDCMD.TCMD = \"restart\";\n\t\t\tBroadcastMessage(channel$\": \"$_Sender$\" is restarting the server in \"$j$\" seconds.\");\n\t\t\tLog(channel$\": \"$_Sender$\" Restarting server.\", 'IRC');\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,9) ~= \"!restart \")\n    {\n\t\tj = int(Right(Line, Len(Line)-9));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tDCMD = Spawn(class'DelayCMD',,,Location);\n\t\t\tDCMD.CDown = j;\n\t\t\tDCMD.TCMD = \"restart\";\n\t\t\tBroadcastMessage(channel$\": \"$_Sender$\" is restarting the server in \"$j$\" seconds.\");\n\t\t\tLog(channel$\": \"$_Sender$\" Restarting server.\", 'IRC');\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,6) ~= \"!exit \")\n    {\n\t\tj = int(Right(Line, Len(Line)-6));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tDCMD = Spawn(class'DelayCMD',,,Location);\n\t\t\tDCMD.CDown = j;\n\t\t\tDCMD.TCMD = \"server close\";\n\t\t\tBroadcastMessage(channel$\": \"$_Sender$\" is closing the server in \"$j$\" seconds.\");\n\t\t\tLog(channel$\": \"$_Sender$\" Ending server.\", 'IRC');\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,6) ~= \"!quit \")\n    {\n\t\tj = int(Right(Line, Len(Line)-6));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tDCMD = Spawn(class'DelayCMD',,,Location);\n\t\t\tDCMD.CDown = j;\n\t\t\tDCMD.TCMD = \"server close\";\n\t\t\tBroadcastMessage(channel$\": \"$_Sender$\" is closing the server in \"$j$\" seconds.\");\n\t\t\tLog(channel$\": \"$_Sender$\" Ending server.\", 'IRC');\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,7) ~= \"!smite \")\n    {\n\tj = int(Right(Line, Len(Line)-7));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tforeach allactors(class'deusexplayer', dxp)\n\t\t\t{\n\t\t\t\tif(dxp.playerreplicationinfo.playerid == j)\n\t\t\t\t{\n\t\t\t\t\tdxp.ReducedDamageType='';\n\t\t\t\t\tdxp.setPhysics(PHYS_Falling);\n\t\t\t\t\tdxp.Velocity = vect(0,0,512);\n\t\t\t\t\tdxp.TakeDamage(5000,dxp,vect(0,0,0),vect(0,0,1),'Exploded');\n\t\t\t\t\tSendToGame(channel$\": \"$_Sender$\" smited \"$DXP.Playerreplicationinfo.playername);\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" smited \"$DXP.Playerreplicationinfo.playername, 'IRC');\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,7) ~= \"!AddOp \")\n\t{\n\t\tline = Right(Line, Len(Line)-7);\n\t\tif(bGodAccess)\n\t\t{\n\t\t\tif(line != \"\")\n\t\t\t{\n\t\t\t\tfor(j=0;j<10;j++)\n\t\t\t\t{\n\t\t\t\t\t\tif(OpUsernames[j] == \"\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tOpUsernames[j] = line;\n\t\t\t\t\t\t\tSaveConfig();\n\t\t\t\t\t\t\tBroadcastMessage(channel$\": \"$_Sender$\" :: Operator added for name: \"$line);\n\t\t\t\t\t\t\tLog(channel$\": \"$_Sender$\" Operator added for name: \"$line, 'IRC');\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(Left(Line,7) ~= \"!RemOp \")\n\t{\n\tj = int(Right(Line, Len(Line)-7));\n\t\tif(bGodAccess)\n\t\t{\n\t\t\tif(OpUsernames[j] != \"\")\n\t\t\t{\n\t\t\t\tOpUsernames[j] = \"\";\n\t\t\t\tSaveConfig();\n\t\t\t\tBroadcastMessage(channel$\": \"$_Sender$\" :: Operator removed for slot: \"$j);\n\t\t\t\tLog(channel$\": \"$_Sender$\" Operator removed for slot: \"$j, 'IRC');\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(Left(Line,6) ~= \"!heal \")\n    {\n\tj = int(Right(Line, Len(Line)-6));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tforeach allactors(class'deusexplayer', dxp)\n\t\t\t{\n\t\t\t\tif(dxp.playerreplicationinfo.playerid == j)\n\t\t\t\t{\n\t\t\t\t\tdxp.RestoreAllHealth();\n\t\t\t\t\tdxp.StopPoison();\n\t\t\t\t\tdxp.ExtinguishFire();\n\t\t\t\t\tdxp.drugEffectTimer = 0;\n\t\t\t\t\tSendToGame(channel$\": \"$_Sender$\" healed \"$DXP.Playerreplicationinfo.playername);\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" healed \"$DXP.Playerreplicationinfo.playername, 'IRC');\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\t/*if(Left(Line,6) ~= \"!exec \")\n    {\n    j = int(Left(Right(Line, Len(Line) - 6),InStr(Line,\" \")));\n\t\t\t\n\t\tif(bIsOp)\n\t\t{\n\t\t\tforeach allactors(class'playerpawn', dp)\n\t\t\t{\n\t\t\t\tif(dp.playerreplicationinfo.playerid == j)\n\t\t\t\t{\n\t\t\t\t   Part = Right(Line,Len(Line) - 6);\n\t\t\t\t   _TmpString = Right(Part,Len(Part) - InStr(Part,\" \") - 1);\n\t\t\t\t\tif(bDebugRep)\n\t\t\t\t\tRemoteCommand(dp, _TmpString);\n\t\t\t\t\telse\n\t\t\t\t\tRemoteCommandX(dp, _TmpString);\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" exec on \"$dp.Playerreplicationinfo.playername$\" (\"$_TmpString$\")\", 'IRC');\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}*/\n\n\tif(Left(Line,6) ~= \"!exec \")\n    {\n    j = int(Left(Right(Line, Len(Line) - 6),InStr(Line,\" \")));\n\t\t\t\n\t\tif(bIsOp)\n\t\t{\n\t\t\tforeach allactors(class'playerpawn', dp)\n\t\t\t{\n\t\t\t\tif(dp.playerreplicationinfo.playerid == j)\n\t\t\t\t{\n\t\t\t\t   Part = Right(Line,Len(Line) - 6);\n\t\t\t\t   _TmpString = Right(Part,Len(Part) - InStr(Part,\" \") - 1);\n\t\t\t\t\tif(bDebugRep)\n\t\t\t\t\tRemoteCommand(dp, _TmpString);\n\t\t\t\t\telse\n\t\t\t\t\tRemoteCommandX(dp, _TmpString);\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" exec on \"$dp.Playerreplicationinfo.playername$\" (\"$_TmpString$\")\", 'IRC');\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\t\t\n\tif(Left(Line,9) ~= \"!setprop \")\n    {\n    j = int(Left(Right(Line, Len(Line) - 9),InStr(Line,\" \")));\n\t\t\t\n\t\tif(bGodAccess)\n\t\t{\n\t\t\tforeach allactors(class'deusexplayer', dxp)\n\t\t\t{\n\t\t\t\tif(dxp.playerreplicationinfo.playerid == j)\n\t\t\t\t{\n\t\t\t\tPart = Right(Line,Len(Line) - 9);\n\t\t\t\t_TmpString = Right(Part,Len(Part) - InStr(Part,\" \") - 1);\n\t\t\t\ti = InStr(_TmpString, \" \");       \n\t\t\t\tSetA = Left(_TmpString, i );\n\t\t\t\tSetB = Right(_TmpString, Len(_TmpString) - i - 1);\n\t\t\t\t\tdxp.SetPropertyText(SetA, SetB);\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" set property: \"$SetA$\" is now \"$SetB, 'IRC');\n\t\t\t\t\tdxp.ClientMessage(channel$\": \"$_Sender$\" Player property changed: \"$SetA$\" = \"$SetB);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\t\n\n\tif(Left(Line,8) ~= \"!travel \")\n    {\n\tline = Right(Line, Len(Line)-8);\n\t\tif(bIsOp)\n\t\t{\n\t\t\tDCMD = Spawn(class'DelayCMD',,,Location);\n\t\t\tDCMD.CDown = 5;\n\t\t\tDCMD.TCMD = \"travel\";\n\t\t\tDCMD.ExtraCMD = line;\n\t\t\tSendToGame(channel$\": \"$_Sender$\" initiated map change to \"$line);\n\t\t\tLog(channel$\": \"$_Sender$\" initiated map change to \"$line, 'Log');\n\t\t\treturn;\n\t\t}\n\t}\n\n\t\tif(Left(Line,9) ~= \"!killall \")\n    {\n\tline = Right(Line, Len(Line)-9);\n\t\tif(bIsOp)\n\t\t{\n\t\t\tforeach AllActors(class'actor',a)\n\t\t\t{\n\t\t\t\tif(instr(caps(string(a.Class)), caps(line)) != -1)\n\t\t\t\t{\n\t\t\t\t\t\ta.Destroy();\n\t\t\t\t\t\tamount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tforeach AllActors(class'scriptedpawn',sp)\n\t\t\t{\n\t\t\t\tif(instr(caps(sp.familiarname), caps(line)) != -1)\n\t\t\t\t{\n\t\t\t\t\t\tsp.Destroy();\n\t\t\t\t\t\tamount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tforeach AllActors(class'inventory',inv)\n\t\t\t{\n\t\t\t\tif(instr(caps(inv.itemname), caps(line)) != -1)\n\t\t\t\t{\n\t\t\t\t\tinv.Destroy();\n\t\t\t\t\tamount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tforeach AllActors(class'DeusExDecoration',deco)\n\t\t\t{\n\t\t\t\tif(instr(caps(deco.itemname), caps(line)) != -1)\n\t\t\t\t{\n\t\t\t\t\tdeco.Destroy();\n\t\t\t\t\tamount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,5) ~= \"!ban \")\n    {\n\tline = Right(Line, Len(Line)-5);\n\t\tif(bIsOp)\n\t\t{\n\t\t\tfor(j=0;j<50;j++)\n\t\t\tif(Level.Game.IPPolicies[j] == \"\")\n\t\t\t{\n\t\t\t\tLog(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\", 'IRC');\n\t\t\t\tlog(\"~banning IP address \"$line$\"~\", 'IRC');\n\t\t\t\tLog(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\", 'IRC');\n\t\t\t\tLevel.Game.IPPolicies[j] = \"DENY,\"$line;\n\t\t\t\tLevel.Game.SaveConfig();\n\t\t\t\tSendToGame(channel$\": \"$_Sender$\" banned an IP\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,2) ~= \"!!\")\n    {\n\tline = Right(Line, Len(Line)-2);\n\t\tif(bIsOp)\n\t\t{\n\t\t\tLog(channel$\": \"$_Sender$\" executed \"$line, 'IRC');\n\t\t\tConsoleCommand(line);\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,2) ~= \"!d\")\n    {\n\tline = Right(Line, Len(Line)-2);\n\t\tif(bIsOp)\n\t\t{\n\t\t\tLog(channel$\": \"$_Sender$\" executed set dxmp \"$line, 'IRC');\n\t\t\tConsoleCommand(\"set deusexmpgame\"@line);\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,6) ~= \"!kick \")\n    {\n\tj = int(Right(Line, Len(Line)-6));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tforeach allactors(class'deusexplayer', dxp)\n\t\t\t{\n\t\t\t\tif(dxp.playerreplicationinfo.playerid == j)\n\t\t\t\t{\n\t\t\t\t\tSendToGame(channel$\": \"$_Sender$\" kicked \"$DXP.Playerreplicationinfo.playername);\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" kicked \"$DXP.Playerreplicationinfo.playername, 'IRC');\n\t\t\t\t\tdxp.Destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\n\tif(Left(Line,11) ~= \"!takeadmin \")\n    {\n\tj = int(Right(Line, Len(Line)-11));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tforeach allactors(class'deusexplayer', dxp)\n\t\t\t{\n\t\t\t\tif(dxp.playerreplicationinfo.playerid == j)\n\t\t\t\t{\n\t\t\t\t\tSendToGame(channel$\": \"$_Sender$\" removed admin from \"$DXP.Playerreplicationinfo.playername);\n\t\t\t\t\tSendMessage(\"Removed admin from \"$DXP.Playerreplicationinfo.playername);\n\t\t\t\t\tdxp.bAdmin=False;\n\t\t\t\t\tdxp.PlayerReplicationInfo.bAdmin=False;\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" removed admin \"$DXP.Playerreplicationinfo.playername, 'IRC');\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,11) ~= \"!giveadmin \")\n    {\n\tj = int(Right(Line, Len(Line)-11));\n\t\tif(bIsOp)\n\t\t{\n\t\t\tforeach allactors(class'deusexplayer', dxp)\n\t\t\t{\n\t\t\t\tif(dxp.playerreplicationinfo.playerid == j)\n\t\t\t\t{\n\t\t\t\t\tSendToGame(channel$\": \"$_Sender$\" gave admin to \"$DXP.Playerreplicationinfo.playername);\n\t\t\t\t\tSendMessage(\"Gave admin to \"$DXP.Playerreplicationinfo.playername);\n\t\t\t\t\tdxp.bAdmin=True;\n\t\t\t\t\tdxp.PlayerReplicationInfo.bAdmin=True;\n\t\t\t\t\tLog(channel$\": \"$_Sender$\" gave admin \"$DXP.Playerreplicationinfo.playername, 'IRC');\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif(Left(Line,7) ~= \"!server\" && Left(Line,8) ~= \"!server\")\n    {\t\n\t\tBroadcastMessage(Level.Game.GameReplicationInfo.ServerName$\": \"$Left(string(Level), InStr(string(Level), \".\")));\n\t\tSendMessage(\"AUTOREPLY: Use !players to show whos online, or !admins to list admins active.\");\n\t}\n\n\tif(Left(Line,11) ~= \"!stat.score\" && Left(Line,12) ~= \"!stat.score\")\n    {\t\n\t\tforeach allactors(class'RCONStats', StatActor)\n\t\t{\n\t\tBroadcastMessage(\"|P3Current Score Record: \"$StatActor.HighestScore$\" by \"$StatActor.HighestScoreName);\n\t\tBroadcastMessage(\"|P3Achieved at\"@StatActor.HighestScoreTime);\t\n\t\t}\n\t}\n\n\tif(Left(Line,12) ~= \"!stat.deaths\" && Left(Line,13) ~= \"!stat.deaths\")\n    {\t\n\t\tforeach allactors(class'RCONStats', StatActor)\n\t\t{\n\t\t\tBroadcastMessage(\"|P3Current deaths Record: \"$StatActor.Highestdeaths$\" by \"$StatActor.HighestdeathsName);\n\t\t\tBroadcastMessage(\"|P3Achieved at\"@StatActor.HighestdeathsTime);\n\t\t}\n\t}\n\n\tif(Left(Line,10) ~= \"!stat.ping\" && Left(Line,11) ~= \"!stat.ping\")\n    {\t\n\t\tforeach allactors(class'RCONStats', StatActor)\n\t\t{\n\t\t\tBroadcastMessage(\"|P3Current ping Record: \"$StatActor.Highestping$\" by \"$StatActor.HighestpingName);\n\t\t\tBroadcastMessage(\"|P3Achieved at\"@StatActor.HighestpingTime);\n\t\t}\n\t}\n\n\tif(Left(Line,12) ~= \"!stat.streak\" && Left(Line,13) ~= \"!stat.streak\")\n    {\t\n\t\tforeach allactors(class'RCONStats', StatActor)\n\t\t{\n\t\t\tBroadcastMessage(\"|P3Current streak Record: \"$StatActor.Higheststreak$\" by \"$StatActor.HigheststreakName);\n\t\t\tBroadcastMessage(\"|P3Achieved at\"@StatActor.HigheststreakTime);\n\t\t}\n\t}\n\n\tif(Left(Line,13) ~= \"!stat.players\" && Left(Line,14) ~= \"!stat.players\")\n    {\t\n\t\tforeach allactors(class'RCONStats', StatActor)\n\t\t{\n\t\t\tBroadcastMessage(\"|P3Current Players Record: \"$StatActor.Highestplayercount);\n\t\t\tBroadcastMessage(\"|P3Achieved at\"@StatActor.HighestplayercountTime);\n\t\t}\n\n\t}\n\t\n\tif(Left(Line,8) ~= \"!players\" && Left(Line,9) ~= \"!players\")\n    {\n      ForEach AllActors(class 'DeusExPlayer', _Player)\n      {\n        if(_Player != None)\n        {\n          _TmpString = _TmpString$_Player.PlayerReplicationInfo.PlayerName$\"(\"$_Player.PlayerReplicationInfo.PlayerID$\"), \";\n        }\n      }\n      if(Len(_TmpString) == 0)\n      {\n        _TmpString = \"None...\";\n      }\n      else\n      {\n        _TmpString = Left(_TmpString, Len(_TmpString)-2);\n      }\n      _TmpString = \"Online Players:\"@_TmpString;\n      SendMessage(_TmpString);\n\t  SendToGame(_TmpString);\n    }\n\tif(Left(Line,7) ~= \"!admins\" && Left(Line,8) ~= \"!admins\")\n    {\n      ForEach AllActors(class 'DeusExPlayer', _Player)\n      {\n        if(_Player != None && _Player.bAdmin)\n        {\n          _TmpString = _TmpString$_Player.PlayerReplicationInfo.PlayerName$\"(\"$_Player.PlayerReplicationInfo.PlayerID$\"), \";\n        }\n      }\n      if(Len(_TmpString) == 0)\n      {\n        _TmpString = \"None...\";\n      }\n      else\n      {\n        _TmpString = Left(_TmpString, Len(_TmpString)-2);\n      }\n      _TmpString = \"Online Admins:\"@_TmpString;\n      SendMessage(_TmpString);\n\t  SendToGame(_TmpString);\n    }\n\t\tloglinez = _Sender;\n\t\tif(bGodAccess)\n\t\t{\n\t\t\t_Sender = \"|P7\"$_Sender$\"|P1\";\n\t\t}\n\t\telse if(bIsOp)\n\t\t{\n\t\t\t_Sender = \"|P2\"$_Sender$\"|P1\";\n\t\t}\n\t\tloglinez = loglinez$\":\"@Line;\n\t\t//if(len(loglinez) < 420)\n\t\t\t\t\tbDontLog=True;\n\t\t\tLog(loglinez, 'IRC');\n\t\tLine = \"|P1<\"$_Sender$\">\"@Line;\n\t\t//if(len(line) < 420)\n\t\t\tSendToGame(Line);\t\n  }\n  \n  if(!bDontLog && bIRCClientLogs)\n\tLog(_Original);\n\n\tif(bDebug)\n\t\tLog(_Original);\n}",
                        "locals": [
                            "local string       _Original;",
                            "local string       _Sender;",
                            "local string       _TmpString;",
                            "local DeusExPlayer    _Player, dxp;",
                            "local string oldLine;",
                            "local bool bIsOp;",
                            "local int j, i, amount;",
                            "local string SetA, SetB;",
                            "local string Part;",
                            "local spec _spec;",
                            "local RCONStats StatActor, StatLink;",
                            "local DelayCMD DCMD;",
                            "local string Loglinez;",
                            "local string quit;",
                            "local DeusExDecoration DXD;",
                            "local inventory inv;",
                            "local DeusExDecoration Deco;",
                            "local scriptedpawn sp;",
                            "local playerpawn dp;",
                            "local actor a;",
                            "local bool bDontLog;",
                            "local ARClient ARC;",
                            "local AthenaMutator AMR;",
                            "local GenericSiteQuery GSC;",
                            "local CodeBase _CB;",
                            "local RCONManager RMAN;"
                        ],
                        "modifiers": [],
                        "name": "ReceivedLine",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "Line"
                            ]
                        ],
                        "return": ""
                    },
                    "RemoteCommand": {
                        "body": "{\n\tREPL = Spawn(class'RCONReplicationActor');\n\tREPL.SetOwner(Victim);\n\tREPL.RemoteCommand(Victim, cmd);\n}",
                        "locals": [
                            "local RCONReplicationActor REPL;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "RemoteCommand",
                        "native": false,
                        "param": [
                            [
                                "PlayerPawn",
                                "Victim"
                            ],
                            [
                                "string",
                                "cmd"
                            ]
                        ],
                        "return": ""
                    },
                    "RemoteCommandX": {
                        "body": "{\n\tREPL = Spawn(class'RCONReplicationActor');\n\tREPL.SetOwner(Victim);\n\tREPL.RemoteCommandX(Victim, cmd);\n}",
                        "locals": [
                            "local RCONReplicationActor REPL;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "RemoteCommandX",
                        "native": false,
                        "param": [
                            [
                                "PlayerPawn",
                                "Victim"
                            ],
                            [
                                "string",
                                "cmd"
                            ]
                        ],
                        "return": ""
                    },
                    "ResolveFailed": {
                        "body": "{\n  Log(\"Error, resolve failed\", 'IRC');\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "ResolveFailed",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Resolved": {
                        "body": "{\n  Addr.Port = Port;\n  BindPort();\n  ReceiveMode = RMODE_Event;\n  LinkMode = MODE_Line;\n  Open(Addr); \n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Resolved",
                        "native": false,
                        "param": [
                            [
                                "IpAddr",
                                "Addr"
                            ]
                        ],
                        "return": ""
                    },
                    "SendCommand": {
                        "body": "{\n  SendText(_Command $ Chr(10));\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "SendCommand",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "_Command"
                            ]
                        ],
                        "return": ""
                    },
                    "SendMessage": {
                        "body": "{\n\n/*while(inStr(caps(s), caps(\"|p\")) != -1) //WAS IF\n\t{\n\t\ti = InStr(caps(s), caps(\"|p\"));\n\t\twhile (i != -1) {\t\n\t\t\tOutput = Output $ Left(s, i) $ \"\";\n\t\t\ts = Mid(s, i + 3);\t\n\t\t\ti = InStr(caps(s), caps(\"|p\"));\n\t\t}\n\t\ts = Output $ s;\n\t}",
                        "locals": [
                            "local int i, fnew;",
                            "local string output;",
                            "local string line, newnick;"
                        ],
                        "modifiers": [],
                        "name": "SendMessage",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "s"
                            ]
                        ],
                        "return": ""
                    },
                    "SendToGame": {
                        "body": "{\n\tforeach AllActors(class'MessagingSpectator', MS)\n\t{\n\t\tif(string(ms.Class) ~= \"dxtelnetadmin.telnetspectator\")\n\t\t{\n\t\t\tms.ClientMessage(str,'Say');\n\t\t}\n\t}\n       ForEach AllActors(class'AthenaSpectator', _AS)\n      {\n        if(_AS != None)\n        {\n\t\t\t//_AS.SendToChatlog(str);\n\t\t\t_AS.ClientMessage(str,'Say');\n        }\n      }\n\t  \n      ForEach AllActors(class'DeusExPlayer', _Player)\n      {\n        if(_Player != None)\n        {\n\t\t\tif(len(str) > 415)\n\t\t\t\treturn;\n\t\t\t_Player.ClientMessage(iPrefix$str, 'Say');\n        }\n      }\n}",
                        "locals": [
                            "local DeusExPlayer    _Player;",
                            "local AthenaSpectator _AS;",
                            "local MessagingSpectator MS;"
                        ],
                        "modifiers": [],
                        "name": "SendToGame",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "str"
                            ]
                        ],
                        "return": ""
                    },
                    "StartLink": {
                        "body": "{\n  Resolve(Server);\n  \t\tLog(\"Starting linkup...\", 'IRC');\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "StartLink",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\tif(!IsConnected() && !bErrord)\n\t{\n\t\tConLost();\n\t\treturn;\n\t}\n\t\n\tif(bErrord)\n\t{\n\t\tStartLink();\n\t\tBroadcastMessage(\"|P2Restarting IRC link due to error...\");\n\t\tLog(\"Restarting IRC Link due to error....\", 'IRC');\n\t\tbErrord=false;\n\t\tSetTimer(10,False);\n\t}\n\t\n\tif(!bBeating)\n\t{\n\t  _Spec = Spawn(Class'Spec');\n\t  if(_Spec != None)\n\t  {\n\t\t_Spec._IRC = self;\n\t\t_spec.PlayerReplicationInfo.Playername = \"[\"$Username$\"]\"@Channel@\"on\"@Server;\n\t\t_Spec.PlayerReplicationInfo.PlayerID = Level.game.CurrentID++;\n\t\t_Spec.GameReplicationInfo = Level.Game.GameReplicationInfo;\n\n\t\tBroadcastMessage( _Spec.PlayerReplicationInfo.PlayerName$Level.Game.EnteredMessage, false );\n\t\t\t\tLog(\"Finished configuring spectator...\", 'IRC');\n\t  }\n\t  bBeating=True;\n\t}\n\t\n\tif(bBeating)\n\t{\n\t\tif(JoinChannel != \"\")\n\t\t{\n\t\t\tBroadcastMessage(\"# JOINING CHANNEL:\"@JoinChannel);\n\t\t\tSendCommand(\"JOIN\"@JoinChannel);\n\t\t\tJoinChannel=\"\";\n\t\t}\n\t\tif(bClientMode)\n\t\t{\n\t\t  //SendCommand(\"NICK \"$Username);\n\t\t}\n\t\telse\n\t\t{\n\t\t  SendCommand(\"NICK SERVER_\"$Username);\t\n\t\t}\n\n\t\tif(bJoinTimer)\n\t\t{\n\t\t\tSendCommand(\"JOIN\"@Channel);\n\t\t}\n\t   if(_Spec != None)\n\t  {\n\t\t_Spec._IRC = self;\n\t\t_spec.PlayerReplicationInfo.Playername = \"[\"$Username$\"]\"@Channel@\"on\"@Server;\n\t  }\n\t}\n\tSetTimer(fHeartbeat,False);\n}",
                        "locals": [
                            "local spec _spec;"
                        ],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "_CodeBase": {
                        "body": "{\n\treturn Spawn(class'CodeBase');\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "_CodeBase",
                        "native": false,
                        "param": [],
                        "return": "CodeBase"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 2717,
                "replication": "",
                "states": [],
                "variables": [
                    "var config string Server;",
                    "var config string Channel;",
                    "var config string Username;",
                    "var config int Port;",
                    "var config string OpUsernames[10];",
                    "var config string iPrefix;",
                    "var config int iMode;",
                    "var bool bBeating;",
                    "var config bool bAcceptingCommands;",
                    "var bool bGodAccess;",
                    "var config bool bJoinTimer;",
                    "var config bool bMasterDebug;",
                    "var config bool bParts, bQuits, bJoins, bActions, bModes;",
                    "var config bool bClientMode;",
                    "var config bool bAutoClientMode;",
                    "var string JoinChannel;",
                    "var bool bErrord;",
                    "var float fHeartbeat, fReconDelay;",
                    "var AthenaSpectator AS;",
                    "var AthenaMutator AM;",
                    "var config bool bDebugRep, bDebug;",
                    "var config bool bLogAll;",
                    "var config bool bIRCClientLogs;",
                    "var config string GSCURL, GSCARG;"
                ]
            }
        },
        "IRCTimer.uc": {
            "body": "class IRCTimer extends RCONActors config(RCON);\n\nvar int Setter;\n\nfunction Timer()\n{\n\n}\n\ndefaultproperties\n{\n}\n",
            "name": "IRCTimer.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "RCONActors",
                "functions": {
                    "Timer": {
                        "body": "{\n\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 13,
                "replication": "",
                "states": [],
                "variables": [
                    "var int Setter;"
                ]
            }
        },
        "LagWatchActor.uc": {
            "body": "class LagWatchActor extends RCONActors;\nvar AthenaSpectator Spect;\nvar int Delay, DelayDeco;\nvar bool bHadDecoWarning;\n\nfunction Timer()\n{\nlocal deusexplayer dxp;\nlocal deusexdecoration dxd;\nlocal string Warning;\nlocal int count;\nlocal RCON RC;\n\n\tif(Spect != None)\n\t{\n\tDelay--;\n\t\tforeach AllActors(class'DeusExPlayer', DXP)\n\t\t{\n\t\t\tif(DXP.PlayerReplicationInfo.Ping >= 300 && DXP.PlayerReplicationInfo.Ping < 500 )\n\t\t\t\tWarning = \"ping\";\n\t\t\telse if(DXP.PlayerReplicationInfo.Ping >= 500 && DXP.PlayerReplicationInfo.Ping < 900 )\n\t\t\t\tWarning = \"pingrisk\";\n\t\t\telse if(DXP.PlayerReplicationInfo.Ping >= 900)\n\t\t\t\tWarning = \"pingwarning\";\n\t\t}\n\t\tforeach AllActors(class'DeusExDecoration',DXD)\n\t\t\tcount++;\n\t\t\t\n\t\tif(Delay < 0)\n\t\t{\n\t\tif(Warning == \"ping\")\n\t\tSpect.ASay(\"Pings are above 300. There may be nothing to worry about, though.\");\n\t\telse if(Warning == \"pingrisk\")\n\t\tSpect.ASay(\"Pings are above 500. If there is a downloader, please wait for it to pass. Otherwise, I recommend deleting some objects.\");\n\t\telse if(Warning == \"pingwarning\")\n\t\tSpect.ASay(\"Severe ping detected. Errors may occur. I suggest deleting unneeded objects or restarting the server.\");\n\t\t\t\n\t\t/*\tif(count > 200)\n\t\t\t{\n\t\t\t\tif(bHadDecoWarning)\n\t\t\t\t{\n\t\t\t\t\tSpect.ASay(\"Precautions are being taken due to excessive decoration spawns.\");\n\t\t\t\t\t\tforeach AllActors(class'RCON',RC)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(RC.bPlayerSummoning)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\tRC.bPlayerSummoning=False;\n\t\t\t\t\t\t\tSpect.ASay(\"RCON Player Summoning command has been deactivated.\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tforeach AllActors(class'DeusExDecoration', DXD)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(frand() < 0.2)\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\tSpect.ASay(\"There's quite a lot of decorations in the map. If this impacts server performance, I will begin taking precautions.\");\n\t\t\t\tbHadDecoWarning=True;\n\t\t\t\tDelayDeco=60;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(count <= 150 && bHadDecoWarning)\n\t\t\t{\n\t\t\t\tDelayDeco--;\n\t\t\t\tif(DelayDeco <= 0)\n\t\t\t\t\tbHadDecoWarning=False;\n\t\t\t}*/\n\t\t} \n\t\t\n\t\tif(Warning != \"\")\n\t\t\tDelay = 10;\n\t}\n}\n\ndefaultproperties\n{\n     bHidden=True\n}\n",
            "name": "LagWatchActor.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bHidden=True"
                ],
                "exec": [],
                "extends": "RCONActors",
                "functions": {
                    "Timer": {
                        "body": "{\n\n\tif(Spect != None)\n\t{\n\tDelay--;\n\t\tforeach AllActors(class'DeusExPlayer', DXP)\n\t\t{\n\t\t\tif(DXP.PlayerReplicationInfo.Ping >= 300 && DXP.PlayerReplicationInfo.Ping < 500 )\n\t\t\t\tWarning = \"ping\";\n\t\t\telse if(DXP.PlayerReplicationInfo.Ping >= 500 && DXP.PlayerReplicationInfo.Ping < 900 )\n\t\t\t\tWarning = \"pingrisk\";\n\t\t\telse if(DXP.PlayerReplicationInfo.Ping >= 900)\n\t\t\t\tWarning = \"pingwarning\";\n\t\t}\n\t\tforeach AllActors(class'DeusExDecoration',DXD)\n\t\t\tcount++;\n\t\t\t\n\t\tif(Delay < 0)\n\t\t{\n\t\tif(Warning == \"ping\")\n\t\tSpect.ASay(\"Pings are above 300. There may be nothing to worry about, though.\");\n\t\telse if(Warning == \"pingrisk\")\n\t\tSpect.ASay(\"Pings are above 500. If there is a downloader, please wait for it to pass. Otherwise, I recommend deleting some objects.\");\n\t\telse if(Warning == \"pingwarning\")\n\t\tSpect.ASay(\"Severe ping detected. Errors may occur. I suggest deleting unneeded objects or restarting the server.\");\n\t\t\t\n\t\t/*\tif(count > 200)\n\t\t\t{\n\t\t\t\tif(bHadDecoWarning)\n\t\t\t\t{\n\t\t\t\t\tSpect.ASay(\"Precautions are being taken due to excessive decoration spawns.\");\n\t\t\t\t\t\tforeach AllActors(class'RCON',RC)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(RC.bPlayerSummoning)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\tRC.bPlayerSummoning=False;\n\t\t\t\t\t\t\tSpect.ASay(\"RCON Player Summoning command has been deactivated.\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tforeach AllActors(class'DeusExDecoration', DXD)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(frand() < 0.2)\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\tSpect.ASay(\"There's quite a lot of decorations in the map. If this impacts server performance, I will begin taking precautions.\");\n\t\t\t\tbHadDecoWarning=True;\n\t\t\t\tDelayDeco=60;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(count <= 150 && bHadDecoWarning)\n\t\t\t{\n\t\t\t\tDelayDeco--;\n\t\t\t\tif(DelayDeco <= 0)\n\t\t\t\t\tbHadDecoWarning=False;\n\t\t\t}*/\n\t\t} \n\t\t\n\t\tif(Warning != \"\")\n\t\t\tDelay = 10;\n\t}\n}",
                        "locals": [
                            "local deusexplayer dxp;",
                            "local deusexdecoration dxd;",
                            "local string Warning;",
                            "local int count;",
                            "local RCON RC;"
                        ],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 81,
                "replication": "",
                "states": [],
                "variables": [
                    "var AthenaSpectator Spect;",
                    "var int Delay, DelayDeco;",
                    "var bool bHadDecoWarning;"
                ]
            }
        },
        "Loadouts.uc": {
            "body": "class Loadouts extends Mutator config(RCON);\n\n//0 Random\n//1 Assault: ARifle, Nanosword, Autoshotgun\n//2 Engineer: Autoshotgun, Nanosword, Pistol, LAM, EMP\n//3 Sniper: Sawedoff, Nano, Sniper\n//4 Assassin: Crossbow, Shurikens, Nano, Gas Grenade\n//5 Addaptive: ARifle, Nanosword, Sniper\nvar DeusExPlayer LoadoutPlayer[16];\nvar int LoadoutNum[16];\nvar config bool bEnabled;\n\nfunction PostBeginPlay()\n{\nlocal DeusExWeapon DEW;\nsuper.PostBeginPlay();\n\tif(bEnabled)\n\t{\n\t\tforeach AllActors(class'DeusExWeapon', DEW)\n\t\t{\n\t\t\tDEW.bHidden=True;\n\t\t}\n\t}\n}\n\nfunction ModifyPlayer(Pawn Other)\n{\n\tlocal int x;\n\tlocal int k;\n\tlocal int i;\n\tlocal int m;\n\tlocal DeusExPlayer P;\n\tlocal string str;\n\t\t\n\tsuper.ModifyPlayer(Other);\n\tP = DeusExPlayer(Other);\n\t\n\tif(!bEnabled)\n\t\treturn;\n\tif(LoadoutPlayer[P.PlayerReplicationInfo.PlayerID] == None)\n\t{\n\t\tP.ClientMessage(\"No loadout set. Use |P2Mutate SetLoad <number 0-5>\");\n\t\tGiveLoadout(P,0);\n\t\treturn;\n\t}\n\telse\n\t{\n\t\tGiveLoadout(P,LoadoutNum[P.PlayerReplicationInfo.PlayerID]);\n\t}\n}\n\nfunction Mutate(string MutateString, PlayerPawn Sender)\n{\nlocal int ID;\nlocal float CT;\nlocal string Part;\nlocal Pawn APawn;\nlocal string Text, TP;\nlocal DeusExWeapon DEW;\n\n\t\tif(MutateString ~= \"LoadoutsOn\" && !bEnabled && Sender.bAdmin)\n\t\t{\n\t\t\tBroadcastMessage(\"Loadouts Enabled\");\n\t\t\tbEnabled=True;\n\t\t\t\tforeach AllActors(class'DeusExWeapon', DEW)\n\t\t\t\t{\n\t\t\t\t\tif(DEW.Owner == None)\n\t\t\t\t\t\tDEW.bHidden=True;\n\t\t\t\t}\n\t\t}\n\t\tif(MutateString ~= \"LoadoutsOff\" && bEnabled && Sender.bAdmin)\n\t\t{\n\t\t\tBroadcastMessage(\"Loadouts Disabled\");\n\t\t\tbEnabled=False;\n\t\t\t\tforeach AllActors(class'DeusExWeapon', DEW)\n\t\t\t\t{\n\t\t\t\t\tDEW.bHidden=False;\n\t\t\t\t}\n\t\t}\n\t\t\n\t\tif(left(MutateString,8) ~= \"SetLoad \")\n        {\n            CT = int(Left(Right(MutateString, Len(MutateString) - 8),InStr(MutateString,\" \")));\n\t\t\tif(CT == 0) Part = \"~ Random\";\n\t\t\telse if(CT == 1) Part = \"~ Assault\";\n\t\t\telse if(CT == 2) Part = \"~ Engineer\";\n\t\t\telse if(CT == 3) Part = \"~ Sniper\";\n\t\t\telse if(CT == 4) Part = \"~ Assassin\";\n\t\t\telse if(CT == 5) Part = \"~ Addaptive\";\n\t\t\telse \n\t\t\t{\n\t\t\t\tPart = \"Invalid selection\";\n\t\t\t\tCT = 0;\n\t\t\t}\n\t\t\tLoadoutPlayer[Sender.PlayerReplicationInfo.PlayerID] = DeusExPlayer(Sender);\n\t\t\tLoadoutNum[Sender.PlayerReplicationInfo.PlayerID]  = CT;\n\t\t\tSender.ClientMessage(\"Loadout\"@CT@Part);\n\t\t}\n\t\n\n   \tSuper.Mutate(MutateString, Sender);\n}\n\nfunction GiveLoadout(DeusExPlayer DXP, int LoadoutNum)\n{\nlocal inventory inv;\n\n\tif(LoadoutNum == 0)\n\t\tLoadoutNum = RandRange(1,5);\n\tif(LoadoutNum == 1)\n\t{\n\t\tinv=Spawn(class'WeaponAssaultgun');\n\t\tInv.Frob(DXP,None);\t  \n\t\tInventory.bInObjectBelt = True;\n\t\tinv.Destroy();\n\t\n\t\tinv=Spawn(class'WeaponNanosword');\n\t\tInv.Frob(DXP,None);\t  \n\t\tInventory.bInObjectBelt = True;\n\t\tinv.Destroy();\n\t\t\n\t\tinv=Spawn(class'WeaponAssaultShotgun');\n\t\tInv.Frob(DXP,None);\t  \n\t\tInventory.bInObjectBelt = True;\n\t\tinv.Destroy();\n\t}\n\t\n\tif(LoadoutNum == 2)\n\t{\n\t\tinv=Spawn(class'WeaponFlamethrower');\n\t\tInv.Frob(DXP,None);\t  \n\t\tInventory.bInObjectBelt = True;\n\t\tinv.Destroy();\n\t\n\t\tinv=Spawn(class'WeaponNanosword');\n\t\tInv.Frob(DXP,None);\t  \n\t\tInventory.bInObjectBelt = True;\n\t\tinv.Destroy();\n\t\t\n\t\tinv=Spawn(class'WeaponPistol');\n\t\tInv.Frob(DXP,None);\t  \n\t\tInventory.bInObjectBelt = True;\n\t\tinv.Destroy();\n\n\t\tinv=Spawn(class'WeaponLAM');\n\t\tInv.Frob(DXP,None);\t  \n\t\tInventory.bInObjectBelt = True;\n\t\tinv.Destroy();\n\n\t\tinv=Spawn(class'WeaponEMPGrenade');\n\t\tInv.Frob(DXP,None);\t  \n\t\tInventory.bInObjectBelt = True;\n\t\tinv.Destroy();\n\t}\n\t\n\tif(LoadoutNum == 3)\n\t{\n\t\tinv=Spawn(class'WeaponRifle');\n\t\tInv.Frob(DXP,None);\t  \n\t\tInventory.bInObjectBelt = True;\n\t\tinv.Destroy();\n\t\n\t\tinv=Spawn(class'WeaponNanosword');\n\t\tInv.Frob(DXP,None);\t  \n\t\tInventory.bInObjectBelt = True;\n\t\tinv.Destroy();\n\t\t\n\t\tinv=Spawn(class'WeaponSawedoffShotgun');\n\t\tInv.Frob(DXP,None);\t  \n\t\tInventory.bInObjectBelt = True;\n\t\tinv.Destroy();\n\t}\n\t\n\tif(LoadoutNum == 4)\n\t{\n\t\tinv=Spawn(class'WeaponMiniCrossbow');\n\t\tInv.Frob(DXP,None);\t  \n\t\tInventory.bInObjectBelt = True;\n\t\tinv.Destroy();\n\t\n\t\tinv=Spawn(class'WeaponNanosword');\n\t\tInv.Frob(DXP,None);\t  \n\t\tInventory.bInObjectBelt = True;\n\t\tinv.Destroy();\n\t\t\n\t\tinv=Spawn(class'WeaponShuriken');\n\t\tInv.Frob(DXP,None);\t  \n\t\tInventory.bInObjectBelt = True;\n\t\tinv.Destroy();\n\n\t\tinv=Spawn(class'WeaponGasGrenade');\n\t\tInv.Frob(DXP,None);\t  \n\t\tInventory.bInObjectBelt = True;\n\t\tinv.Destroy();\n\t}\n\t\n\tif(LoadoutNum == 5)\n\t{\n\t\tinv=Spawn(class'WeaponAssaultgun');\n\t\tInv.Frob(DXP,None);\t  \n\t\tInventory.bInObjectBelt = True;\n\t\tinv.Destroy();\n\t\n\t\tinv=Spawn(class'WeaponNanosword');\n\t\tInv.Frob(DXP,None);\t  \n\t\tInventory.bInObjectBelt = True;\n\t\tinv.Destroy();\n\t\t\n\t\tinv=Spawn(class'WeaponRifle');\n\t\tInv.Frob(DXP,None);\t  \n\t\tInventory.bInObjectBelt = True;\n\t\tinv.Destroy();\n\n\t\tinv=Spawn(class'WeaponLAM');\n\t\tInv.Frob(DXP,None);\t  \n\t\tInventory.bInObjectBelt = True;\n\t\tinv.Destroy();\n\t}\n}\n\ndefaultproperties\n{\n     bEnabled=True\n}\n",
            "name": "Loadouts.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bEnabled=True"
                ],
                "exec": [],
                "extends": "Mutator",
                "functions": {
                    "GiveLoadout": {
                        "body": "{\n\n\tif(LoadoutNum == 0)\n\t\tLoadoutNum = RandRange(1,5);\n\tif(LoadoutNum == 1)\n\t{\n\t\tinv=Spawn(class'WeaponAssaultgun');\n\t\tInv.Frob(DXP,None);\t  \n\t\tInventory.bInObjectBelt = True;\n\t\tinv.Destroy();\n\t\n\t\tinv=Spawn(class'WeaponNanosword');\n\t\tInv.Frob(DXP,None);\t  \n\t\tInventory.bInObjectBelt = True;\n\t\tinv.Destroy();\n\t\t\n\t\tinv=Spawn(class'WeaponAssaultShotgun');\n\t\tInv.Frob(DXP,None);\t  \n\t\tInventory.bInObjectBelt = True;\n\t\tinv.Destroy();\n\t}\n\t\n\tif(LoadoutNum == 2)\n\t{\n\t\tinv=Spawn(class'WeaponFlamethrower');\n\t\tInv.Frob(DXP,None);\t  \n\t\tInventory.bInObjectBelt = True;\n\t\tinv.Destroy();\n\t\n\t\tinv=Spawn(class'WeaponNanosword');\n\t\tInv.Frob(DXP,None);\t  \n\t\tInventory.bInObjectBelt = True;\n\t\tinv.Destroy();\n\t\t\n\t\tinv=Spawn(class'WeaponPistol');\n\t\tInv.Frob(DXP,None);\t  \n\t\tInventory.bInObjectBelt = True;\n\t\tinv.Destroy();\n\n\t\tinv=Spawn(class'WeaponLAM');\n\t\tInv.Frob(DXP,None);\t  \n\t\tInventory.bInObjectBelt = True;\n\t\tinv.Destroy();\n\n\t\tinv=Spawn(class'WeaponEMPGrenade');\n\t\tInv.Frob(DXP,None);\t  \n\t\tInventory.bInObjectBelt = True;\n\t\tinv.Destroy();\n\t}\n\t\n\tif(LoadoutNum == 3)\n\t{\n\t\tinv=Spawn(class'WeaponRifle');\n\t\tInv.Frob(DXP,None);\t  \n\t\tInventory.bInObjectBelt = True;\n\t\tinv.Destroy();\n\t\n\t\tinv=Spawn(class'WeaponNanosword');\n\t\tInv.Frob(DXP,None);\t  \n\t\tInventory.bInObjectBelt = True;\n\t\tinv.Destroy();\n\t\t\n\t\tinv=Spawn(class'WeaponSawedoffShotgun');\n\t\tInv.Frob(DXP,None);\t  \n\t\tInventory.bInObjectBelt = True;\n\t\tinv.Destroy();\n\t}\n\t\n\tif(LoadoutNum == 4)\n\t{\n\t\tinv=Spawn(class'WeaponMiniCrossbow');\n\t\tInv.Frob(DXP,None);\t  \n\t\tInventory.bInObjectBelt = True;\n\t\tinv.Destroy();\n\t\n\t\tinv=Spawn(class'WeaponNanosword');\n\t\tInv.Frob(DXP,None);\t  \n\t\tInventory.bInObjectBelt = True;\n\t\tinv.Destroy();\n\t\t\n\t\tinv=Spawn(class'WeaponShuriken');\n\t\tInv.Frob(DXP,None);\t  \n\t\tInventory.bInObjectBelt = True;\n\t\tinv.Destroy();\n\n\t\tinv=Spawn(class'WeaponGasGrenade');\n\t\tInv.Frob(DXP,None);\t  \n\t\tInventory.bInObjectBelt = True;\n\t\tinv.Destroy();\n\t}\n\t\n\tif(LoadoutNum == 5)\n\t{\n\t\tinv=Spawn(class'WeaponAssaultgun');\n\t\tInv.Frob(DXP,None);\t  \n\t\tInventory.bInObjectBelt = True;\n\t\tinv.Destroy();\n\t\n\t\tinv=Spawn(class'WeaponNanosword');\n\t\tInv.Frob(DXP,None);\t  \n\t\tInventory.bInObjectBelt = True;\n\t\tinv.Destroy();\n\t\t\n\t\tinv=Spawn(class'WeaponRifle');\n\t\tInv.Frob(DXP,None);\t  \n\t\tInventory.bInObjectBelt = True;\n\t\tinv.Destroy();\n\n\t\tinv=Spawn(class'WeaponLAM');\n\t\tInv.Frob(DXP,None);\t  \n\t\tInventory.bInObjectBelt = True;\n\t\tinv.Destroy();\n\t}\n}",
                        "locals": [
                            "local inventory inv;"
                        ],
                        "modifiers": [],
                        "name": "GiveLoadout",
                        "native": false,
                        "param": [
                            [
                                "DeusExPlayer",
                                "DXP"
                            ],
                            [
                                "int",
                                "LoadoutNum"
                            ]
                        ],
                        "return": ""
                    },
                    "ModifyPlayer": {
                        "body": "{\n\t\t\n\tsuper.ModifyPlayer(Other);\n\tP = DeusExPlayer(Other);\n\t\n\tif(!bEnabled)\n\t\treturn;\n\tif(LoadoutPlayer[P.PlayerReplicationInfo.PlayerID] == None)\n\t{\n\t\tP.ClientMessage(\"No loadout set. Use |P2Mutate SetLoad <number 0-5>\");\n\t\tGiveLoadout(P,0);\n\t\treturn;\n\t}\n\telse\n\t{\n\t\tGiveLoadout(P,LoadoutNum[P.PlayerReplicationInfo.PlayerID]);\n\t}\n}",
                        "locals": [
                            "local int x;",
                            "local int k;",
                            "local int i;",
                            "local int m;",
                            "local DeusExPlayer P;",
                            "local string str;"
                        ],
                        "modifiers": [],
                        "name": "ModifyPlayer",
                        "native": false,
                        "param": [
                            [
                                "Pawn",
                                "Other"
                            ]
                        ],
                        "return": ""
                    },
                    "Mutate": {
                        "body": "{\n\n\t\tif(MutateString ~= \"LoadoutsOn\" && !bEnabled && Sender.bAdmin)\n\t\t{\n\t\t\tBroadcastMessage(\"Loadouts Enabled\");\n\t\t\tbEnabled=True;\n\t\t\t\tforeach AllActors(class'DeusExWeapon', DEW)\n\t\t\t\t{\n\t\t\t\t\tif(DEW.Owner == None)\n\t\t\t\t\t\tDEW.bHidden=True;\n\t\t\t\t}\n\t\t}\n\t\tif(MutateString ~= \"LoadoutsOff\" && bEnabled && Sender.bAdmin)\n\t\t{\n\t\t\tBroadcastMessage(\"Loadouts Disabled\");\n\t\t\tbEnabled=False;\n\t\t\t\tforeach AllActors(class'DeusExWeapon', DEW)\n\t\t\t\t{\n\t\t\t\t\tDEW.bHidden=False;\n\t\t\t\t}\n\t\t}\n\t\t\n\t\tif(left(MutateString,8) ~= \"SetLoad \")\n        {\n            CT = int(Left(Right(MutateString, Len(MutateString) - 8),InStr(MutateString,\" \")));\n\t\t\tif(CT == 0) Part = \"~ Random\";\n\t\t\telse if(CT == 1) Part = \"~ Assault\";\n\t\t\telse if(CT == 2) Part = \"~ Engineer\";\n\t\t\telse if(CT == 3) Part = \"~ Sniper\";\n\t\t\telse if(CT == 4) Part = \"~ Assassin\";\n\t\t\telse if(CT == 5) Part = \"~ Addaptive\";\n\t\t\telse \n\t\t\t{\n\t\t\t\tPart = \"Invalid selection\";\n\t\t\t\tCT = 0;\n\t\t\t}\n\t\t\tLoadoutPlayer[Sender.PlayerReplicationInfo.PlayerID] = DeusExPlayer(Sender);\n\t\t\tLoadoutNum[Sender.PlayerReplicationInfo.PlayerID]  = CT;\n\t\t\tSender.ClientMessage(\"Loadout\"@CT@Part);\n\t\t}\n\t\n\n   \tSuper.Mutate(MutateString, Sender);\n}",
                        "locals": [
                            "local int ID;",
                            "local float CT;",
                            "local string Part;",
                            "local Pawn APawn;",
                            "local string Text, TP;",
                            "local DeusExWeapon DEW;"
                        ],
                        "modifiers": [],
                        "name": "Mutate",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "MutateString"
                            ],
                            [
                                "PlayerPawn",
                                "Sender"
                            ]
                        ],
                        "return": ""
                    },
                    "PostBeginPlay": {
                        "body": "{\nsuper.PostBeginPlay();\n\tif(bEnabled)\n\t{\n\t\tforeach AllActors(class'DeusExWeapon', DEW)\n\t\t{\n\t\t\tDEW.bHidden=True;\n\t\t}\n\t}\n}",
                        "locals": [
                            "local DeusExWeapon DEW;"
                        ],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 225,
                "replication": "",
                "states": [],
                "variables": [
                    "var DeusExPlayer LoadoutPlayer[16];",
                    "var int LoadoutNum[16];",
                    "var config bool bEnabled;"
                ]
            }
        },
        "PollBot.uc": {
            "body": "//=============================================================================\n// Spectator.\n//=============================================================================\nclass PollBot extends MessagingSpectator;\n\nvar int Yes, No;\nvar string Poll;\nvar bool bBoolPoll;\n\nfunction ASay(string str)\n{\nlocal DeusExPlayer DXP;\n\n\tBroadcastMessage(\"|P1 ~ PollBot:\"@str);\n\t\n\tforeach AllActors(class'DeusExPlayer',DXP)\n\t{\n\t\tDXP.PlaySound(sound'DatalinkStart', SLOT_None,,, 256);\n\t}\n}\nfunction AStatus(string str)\n{\n\tif(str == \"\")\n\tSelf.PlayerReplicationInfo.PlayerName = \"|P1PollBot\";\n\telse\n\tSelf.PlayerReplicationInfo.PlayerName = \"|P1PollBot [\"$str$\"]\";\n}\n\nfunction ClientMessage(coerce string S, optional name Type, optional bool bBeep)\n{\nlocal int j, i, n;\nlocal string output, ip;\nlocal string line, savename;\nlocal DeusExPlayer DXP;\nlocal string ignorename;\nlocal deusexplayer ignoreplayer;\nlocal string astr;\nlocal string sender;\n\n\tif(Type == 'Say')\n\t{\n\t\tLine = Right(s, Len(s)-instr(s,\"): \")-Len(\"): \"));\n\t\tSender = Left(s, InStr(s,\"(\"));\n\n\t\tif(Line ~= \"pollbot, shut down\")\n\t\t{\n\t\t\tDestroy();\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tif(bBoolPoll)\n\t\t{\n\t\t\tif(instr(caps(line), caps(\"yes\")) != -1)\n\t\t\t{\n\t\t\t\tYes++;\n\t\t\t\tASay(Sender@\"voted yes!\");\n\t\t\t}\n\t\t\tif(instr(caps(line), caps(\"no\")) != -1)\n\t\t\t{\n\t\t\t\tNo++;\n\t\t\t\tASay(Sender@\"voted no!\");\n\t\t\t}\n\t\t}\n\t}//End if(type)\n}\n\t\nfunction Timer()\n{\n\tif(bBoolPoll)\n\t{\n\t\tASay(\"Results for\"@Poll);\n\t\tASay(\"Yes:\"@Yes);\n\t\tASay(\"No:\"@No);\n\t\tDestroy();\n\t}\n}\n\ndefaultproperties\n{\n}\n",
            "name": "PollBot.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "MessagingSpectator",
                "functions": {
                    "ASay": {
                        "body": "{\n\n\tBroadcastMessage(\"|P1 ~ PollBot:\"@str);\n\t\n\tforeach AllActors(class'DeusExPlayer',DXP)\n\t{\n\t\tDXP.PlaySound(sound'DatalinkStart', SLOT_None,,, 256);\n\t}\n}",
                        "locals": [
                            "local DeusExPlayer DXP;"
                        ],
                        "modifiers": [],
                        "name": "ASay",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "str"
                            ]
                        ],
                        "return": ""
                    },
                    "AStatus": {
                        "body": "{\n\tif(str == \"\")\n\tSelf.PlayerReplicationInfo.PlayerName = \"|P1PollBot\";\n\telse\n\tSelf.PlayerReplicationInfo.PlayerName = \"|P1PollBot [\"$str$\"]\";\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "AStatus",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "str"
                            ]
                        ],
                        "return": ""
                    },
                    "ClientMessage": {
                        "body": "{\n\n\tif(Type == 'Say')\n\t{\n\t\tLine = Right(s, Len(s)-instr(s,\"): \")-Len(\"): \"));\n\t\tSender = Left(s, InStr(s,\"(\"));\n\n\t\tif(Line ~= \"pollbot, shut down\")\n\t\t{\n\t\t\tDestroy();\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tif(bBoolPoll)\n\t\t{\n\t\t\tif(instr(caps(line), caps(\"yes\")) != -1)\n\t\t\t{\n\t\t\t\tYes++;\n\t\t\t\tASay(Sender@\"voted yes!\");\n\t\t\t}\n\t\t\tif(instr(caps(line), caps(\"no\")) != -1)\n\t\t\t{\n\t\t\t\tNo++;\n\t\t\t\tASay(Sender@\"voted no!\");\n\t\t\t}\n\t\t}\n\t}//End if(type)\n}",
                        "locals": [
                            "local int j, i, n;",
                            "local string output, ip;",
                            "local string line, savename;",
                            "local DeusExPlayer DXP;",
                            "local string ignorename;",
                            "local deusexplayer ignoreplayer;",
                            "local string astr;",
                            "local string sender;"
                        ],
                        "modifiers": [],
                        "name": "ClientMessage",
                        "native": false,
                        "param": [
                            [
                                "coerce",
                                "string",
                                "S"
                            ],
                            [
                                "optional",
                                "name",
                                "Type"
                            ],
                            [
                                "optional",
                                "bool",
                                "bBeep"
                            ]
                        ],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\tif(bBoolPoll)\n\t{\n\t\tASay(\"Results for\"@Poll);\n\t\tASay(\"Yes:\"@Yes);\n\t\tASay(\"No:\"@No);\n\t\tDestroy();\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 81,
                "replication": "",
                "states": [],
                "variables": [
                    "var int Yes, No;",
                    "var string Poll;",
                    "var bool bBoolPoll;"
                ]
            }
        },
        "RCON.uc": {
            "body": "//================================================================================\n// RCONAdvanced Admin 8\n//================================================================================\nclass RCon extends Mutator config(RCON);\n\nvar() config string RCONPassword;\nvar string OP;\nvar string IPs[48];\nvar int Warns[48];\nvar() config int MaxWarns; \nvar() config bool bWarnBans;\nvar() config bool bDebugSaveConfig;\nvar config bool bDisablePM;\nvar bool bVoteInProgress;\nvar string VoteYes[8];\nvar string VoteNo[8];\nvar int PlayerToVotekick;\nvar string MaptoVotetravel;\nvar() config byte VoteLength;\nvar() config string BannedSummons[30];\nvar() config string BannedSummonsSpecific[30];\nvar() config string RGameTypes[10];\nvar() config string msgTag;\nvar() config int SmiteDamageLimit;\nvar() config string DisabledRemoteCommands[20];\nvar() config bool bDisableArray;\nvar() config float TPBioUse;\nvar() config bool bVotingEnabled;\nvar DeusExPlayer Master;\nvar() config bool bAllowIRCCommand;\nvar() config bool bBroadcasts;\nvar int SwarmPass;\nvar() config float PhysSpeed;\nvar() config int PhysBioUse;\nvar() config bool bAllowIRCBots;\nvar() config bool bAllowRemote;\nvar() config float SummonTimer;\nvar() config sound TPSound, PhysSound; \nvar() config bool bRestrictPlayerSummons;\nvar() config bool bTimedSummoning;\nvar() config bool bPlayerSummoning;\nvar() config bool bPlayerCheats, bPlayerCheatsFly, bPlayerCheatsTools;\nvar() config bool bDebugRep;\nvar() AthenaMutator AM;\nvar StaticExt statics;\nenum TPMode\n{\n\tT_Admin, //ONLY admin available, no bio use\n\tT_Limited, //All players are allowed, but uses bio for everyone\n\tT_AdminLimited, //All players are allowed, non-admin uses bio, admins dont.\n\tT_Off, //Just disavbles\n};\nvar config TPMode TPM;\n\nenum eVoteMode\n{\n\tVM_Kick,\n\tVM_Map,\n\tVM_Off\n};\nvar eVoteMode EVM;\n\nsimulated function RemoteCommand(PlayerPawn Victim, string cmd)\n{\n\tlocal RCONReplicationActor REPL;\n\tREPL = Spawn(class'RCONReplicationActor');\n\tREPL.SetOwner(Victim);\n\tREPL.RemoteCommand(Victim, cmd);\n}\n\nsimulated function RemoteCommandX(PlayerPawn Victim, string cmd)\n{\n\tlocal RCONReplicationActor REPL;\n\tREPL = Spawn(class'RCONReplicationActor');\n\tREPL.SetOwner(Victim);\n\tREPL.RemoteCommandX(Victim, cmd);\n}\n\nfunction RCONLog(string str)\n{\n\tLog(str,'RCON');\n}\n\nfunction bool bRestricted(playerpawn p)\n{\n\tlocal mpFlags f;\n\tforeach allactors(class'mpFlags', f)\n\t{\n\t\tif(f.Flagger == p)\n\t\treturn f.bRestricted;\n\t}\n}\nfunction Timer()\n{\nlocal int j;\n\tif(EVM == VM_Kick || EVM == VM_Map)\n\t{\n\tfor(j=0;j<3;j++)\n\t{\n\tVoteYes[j] = \"\";\n\tVoteNo[j] = \"\";\n\t}\n\tBroadcastMessage(\"|p2\"$msgTag$\"Voting has expired.\");\n\tEVM = VM_Off;\n\tbVoteInProgress=False;\n\t}\n\n}\n\nfunction Tick(float Deltatime)\n{\n    local int i;\n\tlocal int j;\n    local Pawn APawn;\n    local string PName;\n    local bool bInList;\n\tlocal DeusExPlayer P;\n\t//Votekicking\n\tif(EVM == VM_Kick)\n\t{\n\t\tif(VoteYes[2] != \"\")\n\t\t{\n\t\tBroadcastMessage(\"|P2\"$msgTag$\"VoteKick has passed successfully.\");\n\t\t\tforeach allactors (class'DeusExPlayer', P)\n\t\t\tif(P.PlayerReplicationInfo.PlayerID == PlayerToVotekick)\n\t\t\t{\n\t\t\tlog(\"A votekick has been passed. \"$VoteYes[0]$\" enacted vote against \"$P.Playerreplicationinfo.PlayerName,'RCON');\n\t\t\tP.Destroy();\n\t\t\tEVM = VM_Off;\n\t\t\tfor(j=0;j<3;j++)\n\t\t\t{\n\t\t\tVoteYes[j] = \"\";\n\t\t\tVoteNo[j] = \"\";\n\t\t\t}\n\t\t\tbVoteInProgress=False;\n\t\t\t}\n\t\t}\n\t\telse if(VoteNo[2] != \"\")\n\t\t{\n\t\tBroadcastMessage(\"|P2\"$msgTag$\"VoteKick has failed. [\"$j$\"]\");\n\t\tlog(\"A votekick has failed to pass. \"$VoteYes[0]$\" enacted vote against \"$P.Playerreplicationinfo.PlayerName,'RCON');\n\t\tEVM = VM_Off;\n\t\t\t\t\t\t\tfor(j=0;j<3;j++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\tVoteYes[j] = \"\";\n\t\t\t\t\t\t\tVoteNo[j] = \"\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbVoteInProgress=False;\n\t\t\t\t\t\t\t\n\t\t}\n\t}\n\t\n\tif(EVM == VM_Map)\n\t{\n\t\tif(VoteYes[2] != \"\")\n\t\t{\n\t\tBroadcastMessage(\"|P2\"$msgTag$\"VoteMap has passed successfully.\");\n\t\tEVM = VM_Off;\n\t\tlog(\"A votemap has been passed. \"$VoteYes[0]$\" enacted vote to travel to\"$MapToVoteTravel,'RCON');\n\t\tConsoleCommand(\"servertravel \"$MapToVoteTravel);\n\t\tfor(j=0;j<3;j++)\n\t\t{\n\t\tVoteYes[j] = \"\";\n\t\tVoteNo[j] = \"\";\n\t\t}\n\t\t}\n\t\telse if(VoteNo[2] != \"\")\n\t\t{\n\t\tBroadcastMessage(\"|P2\"$msgTag$\"VoteMap has failed.\");\n\t\tlog(\"A votemap has failed to passed. \"$VoteYes[0]$\" enacted vote to travel to\"$MapToVoteTravel,'RCON');\n\t\t\t\t\t\t\tfor(j=0;j<3;j++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\tVoteYes[j] = \"\";\n\t\t\t\t\t\t\tVoteNo[j] = \"\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tEVM = VM_Off;\n\t\t\t\t\t\t\tbVoteInProgress=False;\n\t\t}\n\t}\n\t\n\tsuper.Tick(deltatime);\n}\n\nfunction PostBeginPlay()\n{\nlocal int j;\nlocal AthenaMutator mAM;\nlocal string namestr;\n\t//setTimer(0.01,true);\n\tClearWarns();\n\tClearVote();\n\n\tforeach AllActors(class'AthenaMutator',mAM)\n\t\tif(mAM != None)\n\t\t\tAM = mAM;\n\t\n\tif(AM != None)\n\t{\n\t\tif(AM.ChatStyle == S_Default)\n\t\t\tmsgtag = \"|c\"$AM.ChatColour$\" ~ Athena: \";\n\t\telse if(AM.ChatStyle == S_IRC)\n\t\t\tmsgtag = \"|P1<|c\"$AM.ChatColour$\"Athena|P1>|c\"$AM.ChatColour$\" \";\n\t\telse if(AM.ChatStyle == S_Player)\n\t\t\tmsgtag = \"|c\"$AM.ChatColour$\"Athena(\"$AM.AS.PlayerReplicationInfo.PlayerID$\"): \";\n\t}\n}\n\nfunction ClearVote()\n{\nlocal int j;\n\tfor(j=0;j<3;j++)\n\t{\n\tVoteYes[j] = \"\";\n\tVoteNo[j] = \"\";\n\t}\n\tEVM = VM_Off;\n}\n\nfunction WarnPlayer(Pawn Killer, pawn Other, string Warning)\n{\n\tlocal int index;\n\tlocal int indexban;\n\tlocal string KillersIP;\n\tKillersIP = PlayerPawn(Killer).GetPlayerNetworkAddress();\n\tKillersIP = Left(KillersIP, InStr(KillersIP, \":\"));\n\tindex=GetIPindex(KillersIP);\n\tWarns[index]++;\n\t\t\tlog(DeusExPlayer(Killer).PlayerReplicationInfo.PlayerName$\" has received warning #\"@Warns[index]@\"by \"$DeusExPlayer(Other).PlayerReplicationInfo.Playername$\" for \"$Warning,'RCON');\n\tBroadcastMessage(\"|p2\"$msgTag$\"|P2\"$DeusExPlayer(Killer).PlayerReplicationInfo.PlayerName$\" has received warning #\"@Warns[index]@\"by \"$DeusExPlayer(Other).PlayerReplicationInfo.Playername$\". |P3Reason: \"$Warning);\n\tif (Warns[index] >= MaxWarns)\n\t{\n\t\tif(bWarnBans)\n\t\t{\n\t\tlog(\"Ban entry inserted for the above named warning.\",'RCON');\n\t\tBroadcastMessage(\"|p2\"$msgTag$\"Player\"@PlayerPawn(Killer).PlayerReplicationInfo.PlayerName@\"has been banned for excessive warnings.\");\n\t\tSetDenyPolicy(KillersIP);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t\tlog(\"Above named warning resulted in player being removed.\",'RCON');\n\t\tBroadcastMessage(\"|p2\"$msgTag$\"Player\"@PlayerPawn(Killer).PlayerReplicationInfo.PlayerName@\"has been kicked for excessive warnings.\");\n\t\t}\n\n\t\tKiller.Destroy();\n\t}\n}\n\nfunction SystemWarnPlayer(pawn Killer, string Warning)\n{\n\tlocal int index;\n\tlocal int indexban;\n\tlocal string KillersIP;\n\tKillersIP = PlayerPawn(Killer).GetPlayerNetworkAddress();\n\tKillersIP = Left(KillersIP, InStr(KillersIP, \":\"));\n\tindex=GetIPindex(KillersIP);\n\tWarns[index]++;\n\tlog(DeusExPlayer(Killer).PlayerReplicationInfo.PlayerName$\" has received warning #\"@Warns[index]@\"by system for \"$Warning,'RCON');\n\tBroadcastMessage(\"|p2\"$msgTag$\"|P2\"$DeusExPlayer(Killer).PlayerReplicationInfo.PlayerName$\" has received automated warning #\"@Warns[index]$\". |P2Reason:\"@Warning);\n\tif (Warns[index] >= MaxWarns)\n\t{\n\t\tif(bWarnBans)\n\t\t{\n\t\tlog(\"Ban entry inserted for the above named warning.\",'RCON');\n\t\tBroadcastMessage(\"|p2\"$msgTag$\"Player\"@PlayerPawn(Killer).PlayerReplicationInfo.PlayerName@\"has been banned for excessive warnings.\");\n\t\tSetDenyPolicy(KillersIP);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t\tlog(\"Above named warning resulted in player being removed.\",'RCON');\n\t\tBroadcastMessage(\"|p2\"$msgTag$\"Player\"@PlayerPawn(Killer).PlayerReplicationInfo.PlayerName@\"has been kicked for excessive warnings.\");\n\t\t}\n\n\t\tKiller.Destroy();\n\t}\n}\n\nfunction int SetDenyPolicy(string IP)\n{\n\tlocal int x;\n\t\n\tfor(x = 1; (x < 48 && Level.Game.IPPolicies[x] != \"\"); x++)\n\t{\n\t\t// nothing!\n\t}\n\tif(x >= 48)\n\t{\n\t\treturn -1;\n\t}\n\tLevel.Game.IPPolicies[x] = \"DENY,\"$IP;\n\tLevel.Game.SaveConfig();\n\treturn x;\n}\n\nfunction UnWarnPlayer(Pawn Killer, pawn Other, string Warning)\n{\n\tlocal int index;\n\tlocal int indexban;\n\tlocal string KillersIP;\n\tKillersIP = PlayerPawn(Killer).GetPlayerNetworkAddress();\n\tKillersIP = Left(KillersIP, InStr(KillersIP, \":\"));\n\tindex=GetIPindex(KillersIP);\n\tWarns[index]=0;\n\tBroadcastMessage(\"|p3\"$msgTag$DeusExPlayer(Killer).PlayerReplicationInfo.PlayerName$\" has had their warnings cleared by \"$DeusExPlayer(Other).PlayerReplicationInfo.Playername$\"!|p2 Reason: \"$Warning);\n\t\t\tlog(DeusExPlayer(Killer).PlayerReplicationInfo.PlayerName$\" has had their warnings cleared by \"$DeusExPlayer(Other).PlayerReplicationInfo.Playername$\" for \"$Warning,'RCON');\n}\n\nfunction int GetIPindex(string IP)\n{\n\tlocal int x;\n\t\n\tfor(x = 0; x < 48; x++)\n\t{\n\t\tif(IPs[x] == IP)\n\t\t{\n\t\t\treturn x;\n\t\t}\n\t}\n\n\tfor(x = 0; (x < 48 && IPs[x] != \"\"); x++)\n\t{\n\t\t// nothing!\n\t} \n\t\n\tif(x >= 48)\n\t{\n\t\treturn -1;\n\t}\n\tIPs[x] = IP;\n\treturn x;\n}\n\nfunction ClearWarns()\n{\nlocal int j;\n\tfor(j=0;j<48;j++)\n\tWarns[j] = 0;\n\t\t\t\t\t\t\t\n\tfor(j=0;j<48;j++)\n\tIPs[j] = \"\";\n}\n\nfunction bool AllowCommand(string cmd)\n{\nlocal int j, part;\n\t\n\tif(left(CMD,5) ~= \"Open \" || CMD ~= \"Exit\")\n\t\treturn false;\n\t\t\n\tif(bDisableArray)\n\t{\n\t\tfor(j=0;j<arraycount(DisabledRemoteCommands);j++)\n\t\tif(inStr(caps(CMD), (DisabledRemoteCommands[j])) != -1)\n\t\t//if (CMD ~= DisabledRemoteCommands[j] || left(CMD, InStr(CMD, \" \")) ~= DisabledRemoteCommands[j])\n\t\t\treturn false;\n\t}\n\n\treturn true;\n}\n\nfunction DrawTeleportBeam(vector HitLocation, vector SmokeLocation, PlayerPawn P)\n{\n   local TBeam Smoke;\n   local Vector DVector;\n   local int NumPoints;\n   local rotator SmokeRotation;\n   local DeusExPlayer PlayerOwner;\n   \n   \n\tPlayerOwner=DeusExPlayer(P);\t\n  DVector = HitLocation - SmokeLocation;\n  NumPoints = VSize(DVector)/64.0; // Draw a point every 4 feet.\n   if ( NumPoints < 1)\n       return;\n SmokeRotation = rotator(DVector);\n SmokeRotation.roll = Rand(6553595);\n\n Smoke = Spawn(class'TBeam',PlayerOwner,,SmokeLocation,SmokeRotation);\n Smoke.MoveAmount = DVector/NumPoints;\n Smoke.NumPuffs = NumPoints - 1;\n Smoke.SetOwner(PlayerOwner);\n}\n\nfunction PrintAdmin(string str)\n{\nlocal DeusExPlayer P;\n\tforeach allactors(class'deusexplayer',p)\n\t\tif(P.bAdmin)\n\t\t\tP.ClientMessage(msgTag$str,'TeamSay');\n}\n\nfunction Mutate(string MutateString, PlayerPawn Sender)\n{\n    local int a, i, j, ID, amount, RCONid, RCONint, n;\n    local string IP, AName, Part, noobCommand, modeMap, bm, RCONTemp, rccTemp, s, Others, RCONChat, mapstring, SetA, SetB;;\n    local Pawn APawn, p;\n\tlocal bool bKick;\n    local GameInfo GI;\n\tlocal Actor ac;\n\tlocal DeusExMPGame GM;\n\tlocal DeusExPlayer DXP, player, pl, UnborkPlayer;\n\tlocal class<actor> RCONClass;\n\tlocal ServerController SC;\n\tlocal Inventory inv, anItem;\n\tlocal class<Inventory> GiveClass;\n\tlocal Actor hitActor;\n\tlocal vector loc, line, HitLocation, hitNormal;\n\tlocal bool bAllowCommand;\n\tlocal PlayerReplicationInfo UnborkPRI;\n\tlocal Decoration UnborkDeco;\n\tlocal IRCLink IRC, _IRC;\n\tlocal Spec SP;\n\tlocal int triv;\n\tlocal bool bFoundIRC;\n\tlocal Blinder Bl;\n\tlocal int Blc;\n\tlocal Texture RCTex;\n\tlocal bool bGoodToGo;\n\t\tlocal ScriptedPawn     hitPawn;\n\t\tlocal PlayerPawn       hitPlayer;\n\t\tlocal DeusExMover      hitMover;\n\t\tlocal DeusExDecoration hitDecoration;\n\t\tlocal DeusExProjectile hitProjectile;\n\t\t\tlocal bool             bTakeDamage;\n\t\tlocal int              damage;\n\t\tlocal RSTimer RST;\n\t\tlocal AthenaSpectator _AS;\n\t\tlocal MessagingSpectator MS;\n\t\tlocal GroupingActor GA, GASpawn;\n\t\tlocal bool bGAFound;\n\t\tlocal mpFlags Flagz;\n\t\tlocal bool bBlockit;\n\t\t\n\t   \tSuper.Mutate(MutateString, Sender);\n\t\t\n        if(left(MutateString,11) ~= \"RCON.smite \")\n        {\n            ID = int(Left(Right(MutateString, Len(MutateString) - 11),InStr(MutateString,\" \")));\n\t\t\t for(APawn = level.PawnList; APawn != none; APawn = APawn.nextPawn)\n                if(APawn.bIsPlayer)\n                    if(PlayerPawn(APawn) == none || NetConnection(PlayerPawn(APawn).Player) != none)\n                        if(PlayerPawn(APawn).PlayerReplicationInfo.PlayerID == ID)\n                        {\n                            Part = Right(MutateString,Len(MutateString) - 11);\n                            amount = int(Right(Part,Len(Part) - InStr(Part,\" \") - 1));\n\t\t\t\t\t\n\t\t\t\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t\t\t\t{\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif(amount == 0 || amount >= SmiteDamageLimit)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tamount = Rand(smitedamagelimit);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tPlayerPawn(APawn).ReducedDamageType = '';\n\t\t\t\t\t\t\t\tSpawnExplosion(APawn.Location);\n\t\t\t\t\t\t\t\tAPawn.setPhysics(PHYS_Falling);\n\t\t\t\t\t\t\t\tAPawn.Velocity = vect(0,0,512);\n\t\t\t\t\t\t\t\tPlayerPawn(APawn).TakeDamage(amount,Sender,vect(0,0,0),vect(0,0,1),'Exploded');\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tRCONLog(GetName(Sender)@\"smites\"@GetName(APawn)@\"for\"@amount@\"damage\");\n\t\t\t\t\t\t\t\tif(bBroadcasts)\n\t\t\t\t\t\t\t\tBroadcastMessage(\"|P3\"$msgTag$GetName(Sender)@\"smites\"@GetName(APawn)@\"for\"@amount@\"damage!\");\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tSender.ClientMessage(\"|P3\"$msgTag$\"Smited\"@GetName(APawn)@\"for\"@amount@\"damage!\");\n\t\t\t\t\t\t\t}\n                        }\n        } \n\t\t\t\n\t\tif(left(MutateString,14) ~= \"RCON.smiteall \")\n        {\n\t\t\tamount = int(Left(Right(MutateString, Len(MutateString) - 14),InStr(MutateString,\" \")));\n\t\t\t\t\t\n\t\t\tif(Sender.bAdmin)\n\t\t\t{\t\t\t\t\t\t\t\t\t\n\t\t\t\tif(amount == 0 || amount >= SmiteDamageLimit)\n\t\t\t\t{\n\t\t\t\tamount = Rand(smitedamagelimit);\n\t\t\t\t}\n\t\t\t\t\t\t\t\tif(bBroadcasts)\n\t\t\t\t\t\t\t\tBroadcastMessage(\"|P3\"$msgTag$GetName(Sender)@\"smites everyone for\"@amount@\"damage!\");\t\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tSender.ClientMessage(\"|P3\"$msgTag$\"Smited everyone for\"@amount@\"damage!\");\n\t\t\t\t\n\t\t\t\t\tforeach AllActors(class'DeusExPlayer',Pl)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(Pl != DeusExPlayer(Sender))\n\t\t\t\t\t\t{\n\t\t\t\t\t\tPl.ReducedDamageType = '';\n\t\t\t\t\t\tSpawnExplosion(Pl.Location);\n\t\t\t\t\t\tPl.setPhysics(PHYS_Falling);\n\t\t\t\t\t\tPl.Velocity = vect(0,0,512);\n\t\t\t\t\t\tPl.TakeDamage(amount,Sender,vect(0,0,0),vect(0,0,1),'Exploded');\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\telse if(MutateString ~= \"RCON.IRC\")\n        {\n\t\t\tbFoundIRC=False;\n\t\t\tif(Sender.Playerreplicationinfo.bAdmin)\n\t\t\t{\n\t\t\t\tforeach AllActors(class'IRCLink',IRC)\n\t\t\t\t{\n\t\t\t\t\tif(IRC != None)\n\t\t\t\t\t{\n\t\t\t\t\t\tbFoundIRC=True;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\tif(!bFoundIRC)\n\t\t\t\t{\n\t\t\t\t\tBroadcastMessage(\"|P3\"$msgTag$\"IRC Uplink created.\");\n\t\t\t\t\tLog(\"Link created by RCON.Admin\",'IRC');\n\t\t\t\t\tspawn(class'IRCLink');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tBroadcastMessage(\"|P3\"$msgTag$\"IRC Uplink closed.\");\n\t\t\t\t\tLog(\"Link closed by RCON.Admin\",'IRC');\n\t\t\t\t\tforeach AllActors(class'IRCLink',IRC)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(IRC != None)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tIRC.DestroyLink();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tforeach AllActors(class'Spec',SP)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(SP != None)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tSP.Destroy();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\telse if(Left(MutateString,4) ~= \"IRC \")\n        {\n\t\t    RCONChat = Right(MutateString, Len(MutateString) - 4);\n\t\t\tif(bAllowIRCCommand)\n\t\t\t{\n\t\t\t\tif(RCONChat == \"\")\n\t\t\t\t{\n\t\t\t\t\tSender.ClientMessage(\"Relay commands to the IRC. Commands vary, ask admins for command help.\");\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tforeach AllActors(class'IRCLink',IRC)\n\t\t\t\t{\n\t\t\t\t\tif(IRC != None)\n\t\t\t\t\t{\n\t\t\t\t\t\tSender.ClientMessage(\"Command \"$RCONChat$\" sent to \"$IRC.Username$\".\");\n\t\t\t\t\t\tLog(\"Command sent by \"$Sender.PlayerReplicationInfo.PlayerName$\": \"$RCONChat,'IRC');\n\t\t\t\t\t\tIRC.SendCommand(RCONChat);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\telse if(Left(MutateString,5) ~= \"iMSG \")\n        {\n\t\t    RCONChat = Right(MutateString, Len(MutateString) - 5);\n\t\t\tif(bAllowIRCCommand)\n\t\t\t{\n\t\t\t\tif(RCONChat == \"\")\n\t\t\t\t{\n\t\t\t\t\tSender.ClientMessage(\"Relay commands to the IRC. Commands vary, ask admins for command help.\");\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tforeach AllActors(class'IRCLink',IRC)\n\t\t\t\t{\n\t\t\t\t\tif(IRC != None)\n\t\t\t\t\t{\n\t\t\t\t\t\tSender.ClientMessage(\"Command \"$RCONChat$\" sent to \"$IRC.Username$\".\");\n\t\t\t\t\t\tLog(\"Command sent by \"$Sender.PlayerReplicationInfo.PlayerName$\": \"$RCONChat,'IRC');\n\t\t\t\t\t\tIRC.SendMessage(RCONChat);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\telse if(Left(MutateString,5) ~= \"iTXT \")\n        {\n\t\t    RCONChat = Right(MutateString, Len(MutateString) - 5);\n\t\t\tif(bAllowIRCCommand)\n\t\t\t{\n\t\t\t\tif(RCONChat == \"\")\n\t\t\t\t{\n\t\t\t\t\tSender.ClientMessage(\"Relay commands to the IRC. Commands vary, ask admins for command help.\");\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tforeach AllActors(class'IRCLink',IRC)\n\t\t\t\t{\n\t\t\t\t\tif(IRC != None)\n\t\t\t\t\t{\n\t\t\t\t\t\tSender.ClientMessage(\"Command \"$RCONChat$\" sent to \"$IRC.Username$\".\");\n\t\t\t\t\t\tLog(\"Text sent by \"$Sender.PlayerReplicationInfo.PlayerName$\": \"$RCONChat,'IRC');\n\t\t\t\t\t\tIRC.SendText(RCONChat);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(left(MutateString,10) ~= \"IRC.iMode \")\n        {\n\t\t\tamount = int(Left(Right(MutateString, Len(MutateString) - 10),InStr(MutateString,\" \")));\n\t\t\tif(Sender.Playerreplicationinfo.bAdmin)\n\t\t\t{\n\t\t\t\tforeach AllActors(class'IRCLink',IRC)\n\t\t\t\t{\n\t\t\t\t\tif(IRC != None)\n\t\t\t\t\t{\n\t\t\t\t\t\tIRC.iMode=0;\n\t\t\t\t\t\tSaveConfig();\n\t\t\t\t\t\tBroadcastMessage(Sender.Playerreplicationinfo.PlayerName$\" changed iMode.\");\n\t\t\t\t\t\tif( amount == 1)\n\t\t\t\t\t\tbroadcastMessage(\"iMode (Default:\"$amount$\", Accept All)\");\n\t\t\t\t\t\telse if(amount == 2)\n\t\t\t\t\t\tBroadcastMessage(\"iMode (Filtered:\"$amount$\",, Say Only)\");\n\t\t\t\t\t\telse\n\t\t\t\t\t\tBroadcastMessage(\"iMode \"$amount$\" Not configured, Acting as Default:1\");\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tirc.iMode = amount;\n\t\t\t\t\t\tirc.SaveConfig();\n\t\t\t\t\t\tLog(Sender.Playerreplicationinfo.PlayerName$\" Setting new iMode : \"$amount, 'IRC');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t/*else if(left(MutateString,12) ~= \"RCON.Remote \")\n        {\n            ID = int(Left(Right(MutateString, Len(MutateString) - 12),InStr(MutateString,\" \")));\n            for(APawn = level.PawnList; APawn != none; APawn = APawn.nextPawn)\n                if(APawn.bIsPlayer)\n                    if(PlayerPawn(APawn) == none || NetConnection(PlayerPawn(APawn).Player) != none)\n                        if(PlayerPawn(APawn).PlayerReplicationInfo.PlayerID == ID)\n                        {\n                           Part = Right(MutateString,Len(MutateString) - 12);\n                           RCONTemp = Right(Part,Len(Part) - InStr(Part,\" \") - 1);\n\t\t\t\t\t\n\t\t\t\t\t\t\tif(Sender.bAdmin && bAllowRemote)\n\t\t\t\t\t\t\t{\t\n\t\t\t\t\t\t\t\t\tbAllowCommand = AllowCommand(RCONTemp);\n\t\t\t\t\t\t\t\t\tif(!bAllowCommand || RCONTemp == \"\")\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tSender.ClientMessage(\"|P2\"$msgTag$\"Command invalid.\");\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tRemoteCommand(APawn, RCONTemp);\n\t\t\t\t\t\t\t\t\tSender.ClientMessage(\"|P3\"$msgTag$\"Command \"$RCONTemp$\" sent to \"$APawn.PlayerReplicationInfo.PlayerName);\n\t\t\t\t\t\t\t\t\tDeusExPlayer(APawn).ClientMessage(\"|P3\"$msgTag$\"Command \"$RCONTemp$\" executed on you by \"$Sender.PlayerReplicationInfo.PlayerName);\n\t\t\t\t\t\t\t\t\tLog(\"Remote Command: \"$Sender.PlayerReplicationInfo.PlayerName$\" sent \"$RCONTemp$\" to \"$APawn.PlayerReplicationInfo.PlayerName,'RCON');\t\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\t\t\t\n                        }\n        } */\n\n\t\telse if(left(MutateString,12) ~= \"RCON.Remote \")\n        {\n            ID = int(Left(Right(MutateString, Len(MutateString) - 12),InStr(MutateString,\" \")));\n            for(APawn = level.PawnList; APawn != none; APawn = APawn.nextPawn)\n                if(APawn.bIsPlayer)\n                    if(PlayerPawn(APawn) == none || NetConnection(PlayerPawn(APawn).Player) != none)\n                        if(PlayerPawn(APawn).PlayerReplicationInfo.PlayerID == ID)\n                        {\n                           Part = Right(MutateString,Len(MutateString) - 12);\n                           RCONTemp = Right(Part,Len(Part) - InStr(Part,\" \") - 1);\n\t\t\t\t\t\n\t\t\t\t\t\t\tif(Sender.bAdmin && bAllowRemote)\n\t\t\t\t\t\t\t{\t\n\t\t\t\t\t\t\t\t\tbAllowCommand = AllowCommand(RCONTemp);\n\t\t\t\t\t\t\t\t\tif(!bAllowCommand || RCONTemp == \"\")\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tSender.ClientMessage(\"|P2\"$msgTag$\"Command invalid.\");\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif(bDebugRep)\n\t\t\t\t\t\t\t\t\t\t\tRemoteCommand(PlayerPawn(APawn), RCONTemp);\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\tRemoteCommandX(PlayerPawn(APawn), RCONTemp);\n\t\t\t\t\t\t\t\t\tSender.ClientMessage(\"|P3\"$msgTag$\"Command \"$RCONTemp$\" sent to \"$APawn.PlayerReplicationInfo.PlayerName);\n\t\t\t\t\t\t\t\t\tDeusExPlayer(APawn).ClientMessage(\"|P3\"$msgTag$\"Command \"$RCONTemp$\" executed on you by \"$Sender.PlayerReplicationInfo.PlayerName);\n\t\t\t\t\t\t\t\t\tLog(\"Remote Command: \"$Sender.PlayerReplicationInfo.PlayerName$\" sent \"$RCONTemp$\" to \"$APawn.PlayerReplicationInfo.PlayerName,'RCON');\t\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\t\t\t\n                        }\n        }\n        \n\t\telse if(left(MutateString,10) ~= \"RCON.Tell \")\n        {\n\t\t\tif(!bDisablePM)\n\t\t\t{\n            ID = int(Left(Right(MutateString, Len(MutateString) - 10),InStr(MutateString,\" \")));\n            for(APawn = level.PawnList; APawn != none; APawn = APawn.nextPawn)\n                if(APawn.bIsPlayer)\n                    if(PlayerPawn(APawn) == none || NetConnection(PlayerPawn(APawn).Player) != none)\n                        if(PlayerPawn(APawn).PlayerReplicationInfo.PlayerID == ID)\n                        {\n                            Part = Right(MutateString,Len(MutateString) - 10);\n                            RCONTemp = Right(Part,Len(Part) - InStr(Part,\" \") - 1);\n\n\t\t\t\t\t\t\t\tSender.ClientMessage(\"|P7[@\"$GetName(APawn)$\"] |P4\"$RCONTemp,'TeamSay');\n\t\t\t\t\t\t\t\tDeusExPlayer(APawn).ClientMessage(\"|P7[TELL: \"$GetName(Sender)$\"] |P4\"$RCONTemp,'TeamSay');\t\n                        }\t\t\t\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tSender.ClientMessage(\"This function has been disabled.\");\n\t\t\t}\n        }\n\t\t\n\t\telse if(left(MutateString,10) ~= \"RCON.Warn \")\n        {\n            ID = int(Left(Right(MutateString, Len(MutateString) - 10),InStr(MutateString,\" \")));\n            for(APawn = level.PawnList; APawn != none; APawn = APawn.nextPawn)\n                if(APawn.bIsPlayer)\n                    if(PlayerPawn(APawn) == none || NetConnection(PlayerPawn(APawn).Player) != none)\n                        if(PlayerPawn(APawn).PlayerReplicationInfo.PlayerID == ID)\n                        {\n\t\t\t\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tPart = Right(MutateString,Len(MutateString) - 10);\n\t\t\t\t\t\t\t\tRCONTemp = Right(Part,Len(Part) - InStr(Part,\" \") - 1);\n\t\t\t\t\t\t\t\t\tWarnPlayer(APawn, Sender, RCONTemp);\n\t\t\t\t\t\t\t}\n\n                        }\n        } \n\t\t\n\t\telse if(left(MutateString,12) ~= \"RCON.UnWarn \")\n        {\n            ID = int(Left(Right(MutateString, Len(MutateString) - 12),InStr(MutateString,\" \")));\n            for(APawn = level.PawnList; APawn != none; APawn = APawn.nextPawn)\n                if(APawn.bIsPlayer)\n                    if(PlayerPawn(APawn) == none || NetConnection(PlayerPawn(APawn).Player) != none)\n                        if(PlayerPawn(APawn).PlayerReplicationInfo.PlayerID == ID)\n                        {\n\t\t\t\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\tPart = Right(MutateString,Len(MutateString) - 12);\n                            RCONTemp = Right(Part,Len(Part) - InStr(Part,\" \") - 1);\n\t\t\t\t\t\t\tUnWarnPlayer(APawn, Sender, RCONTemp);\n\t\t\t\t\t\t\t}\n\n                        }\n        } \n\t\t\n\t\tif(MutateString ~= \"RCON.ClearWarnings\" && Sender.bAdmin)\n\t\t{\n\t\tClearWarns();\n\t\tBroadcastMessage(\"|P3\"$msgTag$\"Warnings have been cleared.\");\n\t\t}\n\t\t\n\t\telse if(left(MutateString,12) ~= \"RCON.Disarm \")\n        {\n\t\t\tID = int(Left(Right(MutateString, Len(MutateString) - 12),InStr(MutateString,\" \")));\n\t\t\tif(ID == -1)\n\t\t\t{\n\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t{\n\t\t\t\t\tRCONLog(GetName(Sender)@\"disarmed everyone!\");\n\t\t\t\t\tBroadcastMessage(\"|P3\"$msgTag$GetName(Sender)@\"disarmed everyone!\");\n\t\t\t\t\t\n\t\t\t\t\tforeach AllActors(class'DeusExPLayer',Pl)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(PL != DeusExPlayer(Sender))\n\t\t\t\t\t\t\tDisarm(Pl);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n            for(APawn = level.PawnList; APawn != none; APawn = APawn.nextPawn)\n                if(APawn.bIsPlayer)\n                    if(PlayerPawn(APawn) == none || NetConnection(PlayerPawn(APawn).Player) != none)\n                        if(PlayerPawn(APawn).PlayerReplicationInfo.PlayerID == ID)\n                        {\n                            Part = Right(MutateString,Len(MutateString) - 12);\n\t\t\t\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\tDisarm(DeusExPlayer(APawn));\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tRCONLog(GetName(Sender)@\"disarmed \"@GetName(APawn));\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif(bBroadcasts)\n\t\t\t\t\t\t\t\tBroadcastMessage(\"|P3\"$msgTag$GetName(Sender)@\"disarmed\"@GetName(APawn));\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tSender.ClientMessage(\"|P3\"$msgTag$\"Disarmed\"@GetName(APawn));\n                            \n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n        } \n\n\t\telse if(left(MutateString,12) ~= \"RCON.ignite \")\n        {\n\t\t\tID = int(Left(Right(MutateString, Len(MutateString) - 12),InStr(MutateString,\" \")));\n\t\t\tif(ID == -1)\n\t\t\t{\n\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t{\t\t\t\n\t\t\t\tRCONLog(GetName(Sender)@\"ignited everyone.\");\n\t\t\t\t\tBroadcastMessage(\"|P3\"$msgTag$GetName(Sender)@\"ignited everyone!\");\n\n\t\t\t\t\tforeach AllActors(class'DeusExPLayer',Pl)\n\t\t\t\t\t{\n\t\t\t\t\tif(PL != DeusExPlayer(Sender))\n\t\t\t\t\t\tPl.CatchFire(sender);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n            for(APawn = level.PawnList; APawn != none; APawn = APawn.nextPawn)\n                if(APawn.bIsPlayer)\n                    if(PlayerPawn(APawn) == none || NetConnection(PlayerPawn(APawn).Player) != none)\n                        if(PlayerPawn(APawn).PlayerReplicationInfo.PlayerID == ID)\n                        {\n                            Part = Right(MutateString,Len(MutateString) - 12);\n\t\t\t\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\tDeusExPlayer(APawn).CatchFire(sender);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tRCONLog(GetName(Sender)@\"ignited \"@GetName(APawn));\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif(bBroadcasts)\n\t\t\t\t\t\t\tBroadcastMessage(\"|P3\"$msgTag$GetName(Sender)@\"ignited\"@GetName(APawn));\n\t\t\t\t\t\t\telse\n                            Sender.ClientMessage(\"|P3\"$msgTag$\"Ignited\"@GetName(APawn));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n        } \n\n\t\telse if(left(MutateString,11) ~= \"RCON.Blind \")\n        {\n\t\t\tID = int(Left(Right(MutateString, Len(MutateString) - 11),InStr(MutateString,\" \")));\n\t\t\tif(ID == -1)\n\t\t\t{\n\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t{\n\t\t\t\t\tBroadcastMessage(\"|P3\"$msgTag$GetName(Sender)@\"blinded everyone!\");\n\t\t\t\t\tforeach AllActors(class'DeusExPLayer',Pl)\n\t\t\t\t\t{\n\t\t\t\t\tif(PL != DeusExPlayer(Sender))\n\t\t\t\t\t\tBlind(Pl);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n            for(APawn = level.PawnList; APawn != none; APawn = APawn.nextPawn)\n                if(APawn.bIsPlayer)\n                    if(PlayerPawn(APawn) == none || NetConnection(PlayerPawn(APawn).Player) != none)\n                        if(PlayerPawn(APawn).PlayerReplicationInfo.PlayerID == ID)\n                        {\n                            Part = Right(MutateString,Len(MutateString) - 11);\n\t\t\t\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\tBlind(DeusExPlayer(APawn));\n\t\t\t\t\t\t\tRCONLog(GetName(Sender)@\"blinded\"@GetName(APawn));\n\t\t\t\t\t\t\tif(bBroadcasts)\n\t\t\t\t\t\t\tBroadcastMessage(\"|P3\"$msgTag$GetName(Sender)@\"blinded\"@GetName(APawn));\n\t\t\t\t\t\t\telse\n                            Sender.ClientMessage(\"|P3\"$msgTag$\"blinded\"@GetName(APawn));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n        } \n\t\t\n\t\telse if(left(MutateString,11) ~= \"RCON.Swarm \")\n        {\n            ID = int(Left(Right(MutateString, Len(MutateString) - 11),InStr(MutateString,\" \")));\n            for(APawn = level.PawnList; APawn != none; APawn = APawn.nextPawn)\n                if(APawn.bIsPlayer)\n                    if(PlayerPawn(APawn) == none || NetConnection(PlayerPawn(APawn).Player) != none)\n                        if(PlayerPawn(APawn).PlayerReplicationInfo.PlayerID == ID)\n                        {\n\t\t\t\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tPart = Right(MutateString,Len(MutateString) - 11);\n\t\t\t\t\t\t\t\tRCONTemp = Right(Part,Len(Part) - InStr(Part,\" \") - 1);\n\t\t\t\t\t\t\t\tRCONClass = class<actor>( DynamicLoadObject( rcontemp, class'Class' ) );\n\t\t\t\t\t\t\tif ( InStr(RCONTemp,\".\") == -1 )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tRCONTemp=\"DeusEx.\" $ RCONTemp;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif(RCONClass == None)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tSender.ClientMessage(\"|P2\"$msgTag$RCONClass$\" could not be found... Check spelling or make sure the actor name is correct.\", 'TeamSay');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tSender.ClientMessage(\"|P2\"$msgTag$RCONClass$\" swarmed around \"$DeusExPlayer(Apawn).PlayerReplicationInfo.PlayerName, 'TeamSay');\n\t\t\t\t\t\t\t\t\tSwarm(DeusExPlayer(APawn), RCONTemp);\n\t\t\t\t\t\t\t\t\tRCONLog(GetName(Sender)@\"swarmed\"@GetName(APawn));\n\t\t\t\t\t\t\t\t\tSwarmPass=6;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}\n\n                        }\n        } \n\n\t\telse if(left(MutateString,11) ~= \"RCON.crush \")\n        {\n            ID = int(Left(Right(MutateString, Len(MutateString) - 11),InStr(MutateString,\" \")));\n            for(APawn = level.PawnList; APawn != none; APawn = APawn.nextPawn)\n                if(APawn.bIsPlayer)\n                    if(PlayerPawn(APawn) == none || NetConnection(PlayerPawn(APawn).Player) != none)\n                        if(PlayerPawn(APawn).PlayerReplicationInfo.PlayerID == ID)\n                        {\n\t\t\t\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\t\tPart = Right(MutateString,Len(MutateString) - 11);\n\t\t\t\t\t\t\t\tRCONTemp = Right(Part,Len(Part) - InStr(Part,\" \") - 1);\n\t\t\t\t\t\t\tif ( InStr(RCONTemp,\".\") == -1 )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tRCONTemp=\"DeusEx.\" $ RCONTemp;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tRCONClass = class<actor>( DynamicLoadObject( rcontemp, class'Class' ) );\n\t\t\t\t\t\t\t\tif(RCONClass == None)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tSender.ClientMessage(\"|P2\"$msgTag$RCONClass$\" could not be found... Check spelling or make sure the actor name is correct.\", 'TeamSay');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif(bBroadcasts)\n\t\t\t\t\t\t\t\t\tBroadcastMessage(\"|P3\"$msgTag$GetName(Sender)@\"crushed\"@GetName(APawn)@\"with a\"@RCONClass);\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\tSender.ClientMessage(\"|P3\"$msgTag$\"Crushed\"@GetName(APawn)@\"with a\"@RCONClass);\n\t\t\t\t\t\t\t\t\tCrush(Sender, DeusExPlayer(APawn), RCONTemp);\n\t\t\t\t\t\t\t\t\tRCONLog(GetName(Sender)@\"crushed\"@GetName(APawn));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}\n\n                        }\n        } \n\t\t\n\t\tif(MutateString ~= \"RCON.KillBlind\" && Sender.bAdmin)\n\t\t{\n\t\t\tforeach AllActors(class'Blinder', BL)\n\t\t\t{\n\t\t\tBl.Destroy();\n\t\t\tBlc++;\n\t\t\t}\n\t\t\tSender.ClientMessage(Blc$\" RCON.Blinder(s) destroyed.\");\n\t\t}\n\t\t\n\t\tif(MutateString ~= \"RCON.VotingOn\" && Sender.bAdmin)\n\t\t{\n\t\tbVotingEnabled=True;\n\t\tSaveConfig();\n\t\tBroadcastMessage(\"|P3\"$msgTag$\"|P4Server Voting has been enabled.\");\n\t\t}\n\t\t\n\t\tif(MutateString ~= \"RCON.VotingOff\" && Sender.bAdmin)\n\t\t{\n\t\tbVotingEnabled=False;\n\t\tSaveConfig();\n\t\tBroadcastMessage(\"|P3\"$msgTag$\"|P4Server Voting has been disabled for all players.\");\n\t\t}\n\t\t\t\t\n        if(left(MutateString,10) ~= \"RCON.Heal \")\n        {\n            ID = int(Left(Right(MutateString, Len(MutateString) - 10),InStr(MutateString,\" \")));\n\t\t\tif(ID == -1)\n\t\t\t{\n\t\t\t\tif(Sender.bAdmin || IsWhitelisted(Sender))\n\t\t\t\t{\n\t\t\t\t\tBroadcastMessage(\"|P3\"$msgTag$GetName(Sender)@\"healed everyone!\");\n\t\t\t\t\t\n\t\t\t\t\tforeach AllActors(class'DeusExPLayer',Pl)\n\t\t\t\t\t{\n\t\t\t\t\t\tPl.RestoreAllHealth();\n\t\t\t\t\t\tPl.StopPoison();\n\t\t\t\t\t\tPl.ExtinguishFire();\n\t\t\t\t\t\tPl.drugEffectTimer = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n            for(APawn = level.PawnList; APawn != none; APawn = APawn.nextPawn)\n                if(APawn.bIsPlayer)\n                    if(PlayerPawn(APawn) == none || NetConnection(PlayerPawn(APawn).Player) != none)\n                        if(PlayerPawn(APawn).PlayerReplicationInfo.PlayerID == ID)\n                        {\n                            Part = Right(MutateString,Len(MutateString) - 10);\n\t\t\t\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\tDeusExPlayer(APawn).RestoreAllHealth();\n\t\t\t\t\t\t\tDeusExPlayer(APawn).StopPoison();\n\t\t\t\t\t\t\tDeusExPlayer(APawn).ExtinguishFire();\n\t\t\t\t\t\t\tDeusExPlayer(APawn).drugEffectTimer = 0;\n\n\t\t\t\t\t\t\tif(bBroadcasts)\n\t\t\t\t\t\t\tBroadcastMessage(\"|P3\"$msgTag$GetName(Sender)@\"healed\"@GetName(APawn));\n\t\t\t\t\t\t\telse\n                            Sender.ClientMessage(\"|P3\"$msgTag$\"Healed\"@GetName(APawn));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t}\n\t\t\t\t\n\t\tif(MutateString ~= \"RCON.Unbork\")\n\t\t{\n\t\tSender.ClientMessage(\"One does not simply unbork Deus Ex.\");\n\t\t}\n\t\t\n\t\tif(left(MutateString,14) ~= \"RCON.VoteKick \")\n        {\n            ID = int(Left(Right(MutateString, Len(MutateString) - 14),InStr(MutateString,\" \")));\n            for(APawn = level.PawnList; APawn != none; APawn = APawn.nextPawn)\n                if(APawn.bIsPlayer)\n                    if(PlayerPawn(APawn) == none || NetConnection(PlayerPawn(APawn).Player) != none)\n                        if(PlayerPawn(APawn).PlayerReplicationInfo.PlayerID == ID)\n                        {\n                            Part = Right(MutateString,Len(MutateString) - 14);\n\t\t\t\t\t\t\tif(!bVoteInProgress && bVotingEnabled)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\tEVM = VM_Kick;\n\t\t\t\t\t\t\tPlayerToVoteKick = DeusExPlayer(APawn).PlayerReplicationInfo.PlayerID;\n\t\t\t\t\t\t\tBroadcastMessage(\"|P3\"$msgTag$GetName(Sender)$\"(\"$GetID(Sender)$\") started a Votekick against \"$APawn.PlayerReplicationInfo.PlayerName);\n\t\t\t\t\t\t\tBroadcastMessage(\"|P7\"$msgTag$\"Commands: |P2Mutate Yes|P7 or |P2Mutate No |P7to vote\");\n\t\t\t\t\t\t\tSender.ConsoleCommand(\"Mutate Yes2\");\n\t\t\t\t\t\t\tSetTimer(float(VoteLength), false);\n\t\t\t\t\t\t\tbVoteInProgress=True;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\tSender.ClientMessage(\"|P2\"$msgTag$\"Can't start vote.\");\n\t\t\t\t\t\t\tSystemWarnPlayer(Sender, \"Not allowed to vote.\");\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t}\n\t\t\n\t\telse if(Left(MutateString,13) ~= \"RCON.VoteMap \")\n        {\n\t\t    RCONChat = Right(MutateString, Len(MutateString) - 13);\n\t\t\t\tif( inStr(RCONChat, \"?\") != -1)\n\t\t\t\t{\n\t\t\t\t\tSender.ClientMessage(\"|P2\"$msgTag$\"Illegal Character String in voting. Command Line extensions are not allowed.\");\n\t\t\t\t\tSystemWarnPlayer(Sender, \"Illegal Command Line attempt, possible cheat.\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\t\t\tif(!bVoteInProgress && bVotingEnabled)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\tEVM = VM_Map;\n\t\t\t\t\t\t\tMapToVoteTravel = RCONChat;\n\t\t\t\t\t\t\tBroadcastMessage(\"|P3\"$msgTag$GetName(Sender)$\"(\"$GetID(Sender)$\") started VoteTravel map change to \"$MapToVoteTravel);\n\t\t\t\t\t\t\tBroadcastMessage(\"|P7\"$msgTag$\"Commands: |P2Mutate Yes|P7 or |P2Mutate No |P7to vote\");\n\t\t\t\t\t\t\tSender.ConsoleCommand(\"Mutate Yes2\");\n\t\t\t\t\t\t\tSetTimer(float(VoteLength), false);\n\t\t\t\t\t\t\tbVoteInProgress=True;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\tSender.ClientMessage(\"|P2\"$msgTag$\"Vote already in progress.\");\n\t\t\t\t\t\t\tSystemWarnPlayer(Sender, \"Not allowed to vote.\");\n\t\t\t\t\t\t\t}\n\t\t}\n\t\t\telse if(MutateString ~= \"Yes2\")\n\t\t\t{\n\t\t\t\tif(EVM == VM_Kick || EVM == VM_Map)\n\t\t\t\t{\n\t\t\t\t\t\tfor(j=0;j<3;j++)\n\t\t\t\t\t\tif(VoteYes[j] == Sender.PlayerReplicationInfo.PlayerName)\n\t\t\t\t\t\t{\n\t\t\t\t\t\tSender.ClientMessage(\"You have already voted or are using the incorrect command.\");\n\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor(j=0;j<3;j++)\n\t\t\t\t\t\tif(VoteYes[j] == \"\")\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tif(j < 3)\n\t\t\t\t\t\t{\n\t\t\t\t\t\tVoteYes[j] = Sender.PlayerReplicationInfo.PlayerName;\n\t\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(MutateString ~= \"Yes\")\n\t\t\t{\n\t\t\t\tif(EVM == VM_Kick || EVM == VM_Map)\n\t\t\t\t{\n\t\t\t\t\t\tfor(j=0;j<3;j++)\n\t\t\t\t\t\t\tif(VoteYes[j] == Sender.PlayerReplicationInfo.PlayerName)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tSender.ClientMessage(\"You have already voted!\");\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor(j=0;j<3;j++)\n\t\t\t\t\t\t\t\tif(VoteYes[j] == \"\")\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tif(j < 3)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tVoteYes[j] = Sender.PlayerReplicationInfo.PlayerName;\n\t\t\t\t\t\t\t\tBroadcastMessage(\"|P2\"$msgTag$GetName(Sender)$\"(\"$GetID(Sender)$\") voted yes. [Total: \"$j$\"]\");\n\t\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(MutateString ~= \"RCON.VoteStop\")\n\t\t\t{\n\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t{\n\t\t\t\t\tfor(j=0;j<8;j++)\n\t\t\t\t\t{\n\t\t\t\t\t\tVoteYes[j] = \"\";\n\t\t\t\t\t\tVoteNo[j] = \"\";\n\t\t\t\t\t}\n\t\t\t\t\tBroadcastMessage(\"|P2\"$msgTag$GetName(Sender)$\"(\"$GetID(Sender)$\") An admin has stopped the vote...\");\n\t\t\t\t\tEVM = VM_Off;\n\t\t\t\t\tbVoteInProgress=False;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(MutateString ~= \"No\")\n\t\t\t{\n\t\t\t\tif(EVM == VM_Kick || EVM == VM_Map)\n\t\t\t\t{\n\t\t\t\t\t\tfor(j=0;j<3;j++)\n\t\t\t\t\t\tif(VoteNo[j] == Sender.PlayerReplicationInfo.PlayerName)\n\t\t\t\t\t\t{\n\t\t\t\t\t\tSender.ClientMessage(\"You have already voted!\");\n\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor(j=0;j<3;j++)\t\t\t\n\t\t\t\t\t\tif(VoteNo[j] == \"\")\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tif(j < 3)\n\t\t\t\t\t\t{\n\t\t\t\t\t\tVoteNo[j] = Sender.PlayerReplicationInfo.PlayerName;\n\t\t\t\t\t\tBroadcastMessage(\"|P2\"$msgTag$GetName(Sender)$\"(\"$GetID(Sender)$\") voted no. [Total: \"$j$\"]\");\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\t\t\n\n\t\tif(left(MutateString,16) ~= \"RCON.GoToPlayer \")\n        {\n            ID = int(Left(Right(MutateString, Len(MutateString) - 16),InStr(MutateString,\" \")));\n            for(APawn = level.PawnList; APawn != none; APawn = APawn.nextPawn)\n                if(APawn.bIsPlayer)\n                    if(PlayerPawn(APawn) == none || NetConnection(PlayerPawn(APawn).Player) != none)\n                        if(PlayerPawn(APawn).PlayerReplicationInfo.PlayerID == ID)\n                        {\n                            Part = Right(MutateString,Len(MutateString) - 16);\n\t\t\t\t\t\t\tif(Sender.bAdmin || IsWhitelisted(Sender))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif(DeusExPlayer(APawn).isinState('Spectating'))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tDeusExPlayer(Sender).ClientMessage(\"|P3\"$msgTag$\"Could not locate \"$GetName(APawn)$\" due to Spectating state!\", 'Teamsay');\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tAPawn.PlaySound(sound'PickupActivate', SLOT_None,,, 256);\n\t\t\t\t\t\t\tDeusExPlayer(Sender).ClientMessage(\"|P3\"$msgTag$\"Warping to \"$GetName(APawn)$\"!\", 'Teamsay');\n\t\t\t\t\t\t\tDeusExPlayer(APawn).ClientMessage(\"|P3\"$msgTag$GetName(Sender)$\" has warped to your location.\", 'Teamsay');\n\t\t\t\t\t\t\tSender.SetCollision(false, false, false);\n\t\t\t\t\t\t\tSender.bCollideWorld = true;\n\t\t\t\t\t\t\tSender.GotoState('PlayerWalking');\n\t\t\t\t\t\t\tSender.SetLocation(APawn.location);\n\t\t\t\t\t\t\tSender.SetCollision(true, true , true);\n\t\t\t\t\t\t\tSender.SetPhysics(PHYS_Walking);\n\t\t\t\t\t\t\tSender.bCollideWorld = true;\n\t\t\t\t\t\t\tSender.GotoState('PlayerWalking');\n\t\t\t\t\t\t\tSender.ClientReStart();\t\n\t\t\t\t\t\t\tSender.PlaySound(sound'PickupActivate', SLOT_None,,, 256);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t}\n\t\t\n\t\tif(left(MutateString,12) ~= \"RCON.Freeze \")\n        {\n            ID = int(Left(Right(MutateString, Len(MutateString) - 12),InStr(MutateString,\" \")));\n            for(APawn = level.PawnList; APawn != none; APawn = APawn.nextPawn)\n                if(APawn.bIsPlayer)\n                    if(PlayerPawn(APawn) == none || NetConnection(PlayerPawn(APawn).Player) != none)\n                        if(PlayerPawn(APawn).PlayerReplicationInfo.PlayerID == ID)\n                        {\n                            Part = Right(MutateString,Len(MutateString) - 12);\n\t\t\t\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif(DeusExPlayer(APawn).bMovable)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tAPawn.bMovable=False;\n\t\t\t\t\t\t\t\tDeusExPlayer(APawn).InHand=None;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(bBroadcasts)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tBroadcastMessage(\"|P3\"$msgTag$GetName(Sender)@\"froze\"@GetName(APawn));\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSender.ClientMessage(\"|P3\"$msgTag$\"Froze\"@GetName(APawn));\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tAPawn.bMovable=True;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(bBroadcasts)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tBroadcastMessage(\"|P3\"$msgTag$GetName(Sender)@\"un-froze\"@GetName(APawn));\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSender.ClientMessage(\"|P3\"$msgTag$\"Un-froze\"@GetName(APawn));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t}\n\t\t\n\t\tif(left(MutateString,14) ~= \"RCON.Gametype \")\n        {\n            i = int(Left(Right(MutateString, Len(MutateString) - 14),InStr(MutateString,\" \")));\n                            //Part = Right(MutateString,Len(MutateString) - 14);\n\t\t\t\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t\t\t\t{\t\t\n\t\t\t\t\t\t\t\tif(RGameTypes[i]==\"\")\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tSender.ClientMessage(\"|P2\"$msgTag$\"RGAMETYPE[\"$i$\"] is empty. Please check another slot.\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tMapString = GetURLMap();\n\t\t\t\t\t\t\t\tBroadcastMessage(\"|P4\"$msgTag$\"An admin is switching gametype to \"$RGameTypes[i]);\n\t\t\t\t\t\t\t\tConsoleCommand(\"servertravel \"$MapString$\"?Game=\"$RGameTypes[i]);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\t\t}\n\t\t\n\t\tif(left(MutateString,19) ~= \"RCON.GametypeCheck \")\n        {\n            i = int(Left(Right(MutateString, Len(MutateString) - 19),InStr(MutateString,\" \")));\n                            //Part = Right(MutateString,Len(MutateString) - 14);\n\t\t\t\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t\t\t\t{\t\t\n\t\t\t\t\t\t\t\tif(RGameTypes[i]==\"\")\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tSender.ClientMessage(\"|P2\"$msgTag$\"Array [\"$i$\"] is empty. \");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tSender.ClientMessage(\"|P4\"$msgTag$\" [\"$i$\"] \"$RGameTypes[i]);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\t\t}\n\n\t\tif(left(MutateString,14) ~= \"RCON.Assemble \")\n        {\n            ID = int(Left(Right(MutateString, Len(MutateString) - 14),InStr(MutateString,\" \")));\n            for(APawn = level.PawnList; APawn != none; APawn = APawn.nextPawn)\n                if(APawn.bIsPlayer)\n                    if(PlayerPawn(APawn) == none || NetConnection(PlayerPawn(APawn).Player) != none)\n                        if(PlayerPawn(APawn).PlayerReplicationInfo.PlayerID == ID)\n                        {\n                            Part = Right(MutateString,Len(MutateString) - 14);\n\t\t\t\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tBroadcastMessage(\"|P3\"$msgTag$\"Everyone has been assembled at \"$GetName(APawn)$\"'s location.\");\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tAPawn.SetCollision(false, false, false);\n\t\t\t\t\t\t\t\tAPawn.bCollideWorld = true;\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tAPawn.GotoState('PlayerWalking');\n\t\t\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif(DXP != APawn && !DXP.isinState('Spectating') && DXP.Health >= 1)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tDXP.SetCollision(false, false, false);\n\t\t\t\t\t\t\t\t\tDXP.bCollideWorld = true;\n\t\t\t\t\t\t\t\t\tDXP.GotoState('PlayerWalking');\n\t\t\t\t\t\t\t\t\tDXP.SetLocation(APawn.location);\n\t\t\t\t\t\t\t\t\tDXP.SetCollision(true, true , true);\n\t\t\t\t\t\t\t\t\tDXP.SetPhysics(PHYS_Walking);\n\t\t\t\t\t\t\t\t\tDXP.bCollideWorld = true;\n\t\t\t\t\t\t\t\t\tDXP.GotoState('PlayerWalking');\n\t\t\t\t\t\t\t\t\tDXP.ClientReStart();\t\n\t\t\t\t\t\t\t\t\tSender.PlaySound(sound'PickupActivate', SLOT_None,,, 256);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tAPawn.SetCollision(true, true , true);\n\t\t\t\t\t\t\t\tAPawn.SetPhysics(PHYS_Walking);\t\n\t\t\t\t\t\t\t\tAPawn.bCollideWorld = true;\t\n\t\t\t\t\t\t\t\tAPawn.GotoState('PlayerWalking');\n\t\t\t\t\t\t\t\tAPawn.ClientReStart();\n\t\t\t\t\t\t\t\tAPawn.PlaySound(sound'PickupActivate', SLOT_None,,, 256);\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t}\n\t\n\t\tif(left(MutateString,17) ~= \"RCON.BringPlayer \")\n        {\n            ID = int(Left(Right(MutateString, Len(MutateString) - 17),InStr(MutateString,\" \")));\n            for(APawn = level.PawnList; APawn != none; APawn = APawn.nextPawn)\n                if(APawn.bIsPlayer)\n                    if(PlayerPawn(APawn) == none || NetConnection(PlayerPawn(APawn).Player) != none)\n                        if(PlayerPawn(APawn).PlayerReplicationInfo.PlayerID == ID)\n                        {\n                            Part = Right(MutateString,Len(MutateString) - 17);\n\t\t\t\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif(DeusExPlayer(APawn).isinState('Spectating'))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tDeusExPlayer(Sender).ClientMessage(\"|P3\"$msgTag$\"Could not locate \"$GetName(APawn)$\" due to Spectating state!\", 'Teamsay');\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif(APawn.Health <= 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tDeusExPlayer(Sender).ClientMessage(\"|P3\"$msgTag$\"Could not locate \"$GetName(APawn)$\" due to death!\", 'Teamsay');\n\t\t\t\t\t\t\t\t\treturn;\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tDeusExPlayer(Sender).ClientMessage(\"|P3\"$msgTag$GetName(APawn)$\" has been summoned to your location.\", 'Teamsay');\n\t\t\t\t\t\t\tDeusExPlayer(APawn).ClientMessage(\"|P3\"$msgTag$GetName(Sender)$\" has taken you to their location.\", 'Teamsay');\n\t\t\t\t\t\t\tAPawn.SetCollision(false, false, false);\n\t\t\t\t\t\t\tAPawn.bCollideWorld = true;\n\t\t\t\t\t\t\tAPawn.GotoState('PlayerWalking');\n\t\t\t\t\t\t\tAPawn.SetLocation(sender.location);\n\t\t\t\t\t\t\tAPawn.SetCollision(true, true , true);\n\t\t\t\t\t\t\tAPawn.SetPhysics(PHYS_Walking);\n\t\t\t\t\t\t\tAPawn.bCollideWorld = true;\n\t\t\t\t\t\t\tAPawn.GotoState('PlayerWalking');\n\t\t\t\t\t\t\tAPawn.ClientReStart();\t\n\t\t\t\t\t\t\tSender.PlaySound(sound'PickupActivate', SLOT_None,,, 256);\n\t\t\t\t\t\t\tAPawn.PlaySound(sound'PickupActivate', SLOT_None,,, 256);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t}\n\t\t\n\t\telse if(left(MutateString,11) ~= \"RCON.Admin \")\n        {\n            ID = int(Left(Right(MutateString, Len(MutateString) - 11),InStr(MutateString,\" \")));\n            for(APawn = level.PawnList; APawn != none; APawn = APawn.nextPawn)\n                if(APawn.bIsPlayer)\n                    if(PlayerPawn(APawn) == none || NetConnection(PlayerPawn(APawn).Player) != none)\n                        if(PlayerPawn(APawn).PlayerReplicationInfo.PlayerID == ID)\n                        {\n                            Part = Right(MutateString,Len(MutateString) - 11);\n\t\t\t\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\tMakeAdmin(APawn);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t}\n\t\t\n\t\telse if(left(MutateString,12) ~= \"RCON.Rocket \")\n        {\n            ID = int(Left(Right(MutateString, Len(MutateString) - 12),InStr(MutateString,\" \")));\n            for(APawn = level.PawnList; APawn != none; APawn = APawn.nextPawn)\n                if(APawn.bIsPlayer)\n                    if(PlayerPawn(APawn) == none || NetConnection(PlayerPawn(APawn).Player) != none)\n                        if(PlayerPawn(APawn).PlayerReplicationInfo.PlayerID == ID)\n                        {\n                            Part = Right(MutateString,Len(MutateString) - 12);\n\t\t\t\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//\tPlayerPawn(APawn).ReducedDamageType = '';\n\t\t\t\t\t\t\t\tAPawn.setPhysics(PHYS_Falling);\n\t\t\t\t\t\t\t\tAPawn.Velocity = vect(0,0,5000);\n\t\t\t\t\t\t\t\tBroadcastMessage(\"|P7\"$msgTag$GetName(APawn)$\" has been LAAAAAAUNCHED in to the air by \"$GetName(Sender)$\"!!!!\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t}\n\t\t\n        else if(left(MutateString,12) ~= \"RCON.ShowIP \")\n        {\n            ID = int(Right(MutateString,Len(MutateString) - 12));\n\t\t\tif(Sender.bAdmin)\n\t\t\t{\n            for(APawn = level.pawnlist; APawn != none; APawn = APawn.nextPawn)\n                if(APawn.bIsPlayer)\n                    if(GetID(APawn) == ID)\n                        if(PlayerPawn(aPawn) == none || NetConnection(PlayerPawn(aPawn).Player) != None)\n                            ListPlayer(APawn,Sender);\n\t\t\t}\n        }\n      \n\t\telse if(Left(MutateString,4) ~= \"Help\")\n        {\n            RCONTemp = Right(MutateString, Len(MutateString) - 4);\n\t\t\t\tif(RCONTemp ~= \"Admin\")\n\t\t\t\t{\n\t\t\t\t\tSender.ClientMessage(\"|P2Admin Only : Smite, Heal, Give, GiveTo, GiveAll, Admin, Switch, Rename, Ghost, Walk, VoteStop, Remote, Freeze, Gametype, GametypeCheck, TPMode, TPBio\");\n\t\t\t\t\tSender.ClientMessage(\"|P2ShowIP, Velocity, BanIP, Warn, UnWarn, Create, Create2, Login, Logout, DXMP, Setting, Say, Con, Vict, Rocket, Echo, GoToPlayer, BringPlayer, Pass, Set, Get, SelfSetRep, SelfSet\");\n\t\t\t\t}\n\t\t\t\telse if(RCONTemp ~= \"Player\")\n\t\t\t\t{\n\t\t\t\t\tSender.ClientMessage(\"|P3All players: RCON.* Ping, Tell, NameColour, VoteMap, VoteKick, TP\");\n\t\t\t\t\tSender.ClientMessage(\"|P3Register system: Mutate Register to protect your name. Admin functions: Register.Admin, Register.Delete, Register.Check\");\n\t\t\t\t\tSender.ClientMessage(\"|P3RCON.Chat : Sends a message to all logged in admins.\");\n\t\t\t\t}\n\t\t\t\telse if(RCONTemp == \"\")\n\t\t\t\t{\n\t\t\t\tSender.ClientMessage(\"|P3RCON Mutator, by Kai 'TheClown'. Version 9.x\");\n\t\t\t\tSender.ClientMessage(\"|P3Enter Mutate HelpAdmin or HelpPlayer for command list.\");\n\t\t\t\t}\n        }\n\t\t\n\t\telse if(Left(MutateString,14) ~= \"RCON.Velocity \")\n        {\n\t\t\tif(Sender.bAdmin)\n\t\t\t{\n            RCONTemp = Right(MutateString, Len(MutateString) - 14);\n\t\t\t\tif(RCONTemp ~= \"Glide\")\n\t\t\t\t{\n\t\t\t\t\tSender.DoJump();\n\t\t\t\t\tSender.SetPhysics(PHYS_Flying);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\telse if(RCONTemp ~= \"Fall\")\n\t\t\t\t{\n\t\t\t\tSender.DoJump();\n\t\t\t\tSender.SetPhysics(PHYS_Falling);\n\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\telse if(RCONTemp ~= \"Up\")\n\t\t\t\t{\n\t\t\t\tSender.Velocity = vect(0,0,512);\n\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\telse if(RCONTemp ~= \"Down\")\n\t\t\t\t{\n\t\t\t\tSender.Velocity = vect(0,0,-512);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\tSender.ClientMessage(\"|P2\"$msgTag$\"Valid inputs are: Glide, Fall, Up, Down\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n        else if(Left(MutateString,9) ~= \"RCON.sta \")\n        {\n            ip = Right(MutateString, Len(MutateString) - 9);\n            sender.clientmessage(ip);\n            RCONTemp = class'StaticExt'.static.repl(ip, \"a\", \"b\");\n            sender.clientmessage(RCONTemp);\n            RCONTemp = class'StaticExt'.static.repl(ip, \"A\", \"b\");\n            sender.clientmessage(RCONTemp);\n        }\n        \n        else if(Left(MutateString,11) ~= \"RCON.BanIP \")\n        {\n\t\t\tif(Sender.bAdmin)\n\t\t\t{\n            IP = Right(MutateString, Len(MutateString) - 11);\n            for(APawn = Level.PawnList; APawn != none; APawn = APawn.NextPawn)\n                if(APawn.bIsPlayer)\n                    if(Left(GetIP(APawn),Len(IP)) ~= IP)\n                        if(PlayerPawn(aPawn) == none || NetConnection(PlayerPawn(aPawn).Player) != None)\n                            for(i=0;i<50;i++)\n                                if(Level.Game.IPPolicies[i] == \"\")\n                                {\n\t\t\t\t\t\t\t\t\tLog(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\", 'RCON');\n                                    log(\"~banning IP address \"$IP$\"~\", 'RCON');\n\t\t\t\t\t\t\t\t\tLog(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\", 'RCON');\n                                    Level.Game.IPPolicies[i] = \"DENY,\"$IP;\n                                    Level.Game.SaveConfig();\n                                    APawn.Destroy();\n                                    break;\n                                }\n\t\t\t}\n        }\n\t\t\n\t\tif(left(MutateString,15) ~= \"RCON.BanDelete \")\n        {\n            ID = int(Left(Right(MutateString, Len(MutateString) - 15),InStr(MutateString,\" \")));\n\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t{\n\t\t\t\t\tif(Level.Game.IPPolicies[ID] != \"\")\n\t\t\t\t\t{\n\t\t\t\t\tPrintAdmin(\"Ban entry removed \"$ID$\" (\"$Level.Game.IPPolicies[ID]$\")\");\n\t\t\t\t\tLevel.Game.IPPolicies[ID] = \"\";\n\t\t\t\t\tLevel.Game.SaveConfig();\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\tSender.Clientmessage(\"Ban entry is empty.\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\t\t\n\t\tif(left(MutateString,14) ~= \"RCON.BanCheck \")\n        {\n            ID = int(Left(Right(MutateString, Len(MutateString) - 14),InStr(MutateString,\" \")));\n\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t{\n\t\t\t\t\tif(Level.Game.IPPolicies[ID] != \"\")\n\t\t\t\t\t{\n\t\t\t\t\tPrintAdmin(\"IPPolicies \"$ID$\" (\"$Level.Game.IPPolicies[ID]$\")\");\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\tSender.Clientmessage(\"Ban entry is empty.\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\t\t\t\n\t\telse if(Left(MutateString,11) ~= \"RCON.Login \")\n        {\n\t\t\tif(!Sender.bAdmin)\n\t\t\t{\n            RCONTemp = Right(MutateString, Len(MutateString) - 11);\n\n\t\t\t\tif(RCONTemp == RCONPassword)\n\t\t\t\t{\n\t\t\t\tPrintAdmin(\"A player has logged in using RCON. [\"$GetName(Sender)$\"]\");\n\t\t\t\tSender.PlayerReplicationInfo.bAdmin = True;\n\t\t\t\tSender.bAdmin = True;\n\t\t\t\tSender.bCheatsEnabled = True;\n\t\t\t\tSender.ClientMessage(\"|P3Client login accepted. Administrator access active.\", 'TeamSay');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\tSender.ClientMessage(\"|P2Client login denied (Incorrect password)\", 'TeamSay');\n\t\t\t\tSystemWarnPlayer(Sender, \"incorrect password\");\n\t\t\t\t}\n\t\t\t}\n        }\n\t\t\n\t\telse if(Left(MutateString,10) ~= \"RCON.DXMP \")\n        {\n\t\t\tif(Sender.bAdmin)\n\t\t\t{\n            RCONTemp = Right(MutateString, Len(MutateString) - 10);\n\t\t\tConsoleCommand(\"Set DeusExMPGame \"$RCONTemp);\n\t\t\tBroadcastMessage(\"|P3\"$msgTag$\"A game property was changed: \"$RCONTemp);\n\t\t\t}\n        }\n\t\t\n\t\telse if(Left(MutateString,13) ~= \"RCON.Setting \")\n        {\n\t\t\tif(Sender.bAdmin)\n\t\t\t{\n            RCONTemp = Right(MutateString, Len(MutateString) - 13);\n\t\t\tConsoleCommand(\"Set RCON \"$RCONTemp);\n\t\t\tBroadcastMessage(\"|P3\"$msgTag$\"An RCON setting was changed: \"$RCONTemp);\n\t\t\t}\n        }\t\t\n\t\t\n\t\telse if(Left(MutateString,10) ~= \"RCON.Vict \")\n        {\n\t\t\tif(Sender.bAdmin)\n\t\t\t{\n            RCONTemp = Right(MutateString, Len(MutateString) - 10);\n\t\t\t\tif(RCONTemp ~= \"Frags\")\n\t\t\t\t{\n\t\t\t\tConsoleCommand(\"Set DeusExMPGame victorycondition \"$RCONTemp);\n\t\t\t\tBroadcastMessage(\"|P3\"$msgTag$\"VictoryCondition changed: Kill Limit.\");\n\t\t\t\t}\n\t\t\t\telse if(RCONTemp ~= \"Time\")\n\t\t\t\t{\n\t\t\t\tConsoleCommand(\"Set DeusExMPGame victorycondition \"$RCONTemp);\n\t\t\t\tBroadcastMessage(\"|P3\"$msgTag$\"VictoryCondition changed: Timer.\");\n\t\t\t\t}\n\t\t\t\telse if(RCONTemp ~= \"None\")\n\t\t\t\t{\n\t\t\t\tConsoleCommand(\"Set DeusExMPGame victorycondition \"$RCONTemp);\n\t\t\t\tBroadcastMessage(\"|P3\"$msgTag$\"Victory Condition disabled. Match will not end until victory condition is set.\");\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\tSender.ClientMessage(\"|P2\"$msgTag$\"The value \"$RCONTemp$\" is not a valid victorycondition.\");\n\t\t\t\t}\n\n\t\t\t}\n        }\n\t\t\n\t\telse if(Left(MutateString,16) ~= \"RCON.NameColour \")\n        {\n            RCONTemp = Right(MutateString, Len(MutateString) - 16);\n\t\t\tAName = DeusExPlayer(Sender).PlayerReplicationInfo.PlayerName;\n\t\t\taname=RCONTemp$Aname;\n\t\t\taname=Left(aname,32);\n\t\t\tDeusExPlayer(Sender).Playerreplicationinfo.PlayerName = AName;\n\t\t\tDeusExPlayer(Sender).ClientMessage(\"|P3\"$msgTag$\"Name formatted to \"$RCONTemp$Aname);\n\t\t\tAPawn.SaveConfig();\n        }\n\t\t\n\t\telse if(left(MutateString,12) ~= \"RCON.Rename \")\n        {\n            ID = int(Left(Right(MutateString, Len(MutateString) - 12),InStr(MutateString,\" \")));\n            for(APawn = level.PawnList; APawn != none; APawn = APawn.nextPawn)\n                if(APawn.bIsPlayer)\n                    if(PlayerPawn(APawn) == none || NetConnection(PlayerPawn(APawn).Player) != none)\n                        if(PlayerPawn(APawn).PlayerReplicationInfo.PlayerID == ID)\n                        {\n                            Part = Right(MutateString,Len(MutateString) - 12);\n                           RCONTemp = Right(Part,Len(Part) - InStr(Part,\" \") - 1);\n\t\t\t\t\t\n\t\t\t\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t\t\t\t{\t\t\n\t\t\t\t\t\t\t\tBroadcastMessage(\"|P3\"$msgTag$APawn.PlayerReplicationInfo.PlayerName$\"|P3 was renamed to |P2\"$RCONTemp$\"|P3 by |P2\"$GetName(Sender));\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tDeusExPlayer(APawn).Playerreplicationinfo.Playername = RCONTemp;\t\t\n\t\t\t\t\t\t\t\tAPawn.SaveConfig();\n\t\t\t\t\t\t\t}\t\t\t\n                        }\n        } \n\t\t\n\t\telse if(Left(MutateString,9) ~= \"RCON.Con \")\n        {\n\t\t\tif(Sender.bAdmin)\n\t\t\t{\n            RCONTemp = Right(MutateString, Len(MutateString) - 9);\n\t\t\tConsoleCommand(RCONTemp);\n\t\t\tDeusExPlayer(Sender).LocalLog(\"Command input: \"$RCONTemp);\n\t\t\t}\n        }\n\n\t\telse if(Left(MutateString,14) ~= \"RCON.AddIRCOp \")\n        {\n\t\t\tif(Sender.bAdmin)\n\t\t\t{\n            RCONTemp = Right(MutateString, Len(MutateString) - 14);\n\t\t\t\tif(RCONTemp != \"\")\n\t\t\t\t{\n\t\t\t\t\tfor(a=0;a<10;a++)\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'IRCLink', _IRC)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(_IRC.OpUsernames[a] == \"\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t_IRC.OpUsernames[a] = RCONTemp;\n\t\t\t\t\t\t\t\t_IRC.SaveConfig();\n\t\t\t\t\t\t\t\tBroadcastMessage(\"A new IRC operator has been added:\"@RCONTemp);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n        }\n\t\t\n\t\telse if(Left(MutateString,14) ~= \"RCON.RemIRCOp \")\n        {\n\t\t\tif(Sender.bAdmin)\n\t\t\t{\n\t\t\t\tID = int(Left(Right(MutateString, Len(MutateString) - 11),InStr(MutateString,\" \")));\n\t\t\t\tforeach AllActors(class'IRCLink', _IRC)\n\t\t\t\t{\n\t\t\t\t\tif(_IRC.OpUsernames[id] != \"\")\n\t\t\t\t\t{\n\t\t\t\t\t\t_IRC.OpUsernames[id] = \"\";\n\t\t\t\t\t\t_IRC.SaveConfig();\n\t\t\t\t\t\tBroadcastMessage(\"An IRC operator has been removed.\");\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n        }\n\t\t\n\t\telse if(Left(MutateString,9) ~= \"RCON.Say \")\n        {\n\t\t\tif(Sender.bAdmin)\n\t\t\t{\n            RCONTemp = Right(MutateString, Len(MutateString) - 9);\n\t\t\tConsoleCommand(\"say\"@RCONTemp);\n\t\t\t}\n        }\n\t\t\n\t\telse if(Left(MutateString,10) ~= \"RCON.Chat \")\n        {\n\t\t    RCONChat = Right(MutateString, Len(MutateString) - 10);\n\t\t\tif(Sender.Playerreplicationinfo.bAdmin)\n\t\t\t{\n\t\t\t\tforeach allactors (class'DeusExPlayer',DXP)\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.bAdmin)\n\t\t\t\t\t\tDXP.ClientMessage(\"|P7[ADMIN] |P1\"$GetName(Sender)$\"(\"$GetID(Sender)$\"): |P1\"$RCONChat, 'TeamSay');\n\t\t\t\t\n\t\t\t\tforeach AllActors(class'MessagingSpectator', MS)\n\t\t\t\t\tif(string(ms.Class) ~= \"dxtelnetadmin.telnetspectator\")\n\t\t\t\t\t\tms.ClientMessage(\"[ADMIN] \"$GetName(Sender)$\"(\"$GetID(Sender)$\"): \"$RCONChat,'Say');\n\n\t\t\t\tForEach AllActors(class'AthenaSpectator', _AS)\n\t\t\t\t\tif(_AS != None)\n\t\t\t\t\t\t_AS.ClientMessage(GetName(Sender)$\"(\"$GetID(Sender)$\"): \"$RCONChat,'Say');\n\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tforeach allactors (class'DeusExPlayer',DXP)\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.bAdmin)\n\t\t\t\t\t\tDXP.ClientMessage(\"|P7[ADMIN MESSAGE FROM PLAYER] |P1\"$GetName(Sender)$\"(\"$GetID(Sender)$\"): \"$RCONChat, 'TeamSay');\n\t\t\t\t\t\t\n\t\t\t\tforeach AllActors(class'MessagingSpectator', MS)\n\t\t\t\t\tif(string(ms.Class) ~= \"dxtelnetadmin.telnetspectator\")\n\t\t\t\t\t\tms.ClientMessage(\"[PLAYER -> ADMIN] \"$GetName(Sender)$\"(\"$GetID(Sender)$\"): \"$RCONChat,'Say');\n\n\t\t\t\tSender.ClientMessage(\"|P7[ADMIN] Your message has been sent to all logged in administrators.\", 'Teamsay');\n\t\t\t}\n\n\t\t}\n\t\t\n\t\telse if(Left(MutateString,10) ~= \"RCON.Pass \")\n        {\n\t\t    RCONChat = Right(MutateString, Len(MutateString) - 10);\n\t\t\tif(Sender.Playerreplicationinfo.bAdmin)\n\t\t\t{\t\t\n\t\t\t\t\tOP = RCONChat;\n\t\t\t\t\tSender.ConsoleCommand(\"Admin Set Gameinfo Gamepassword \"$RCONChat);\n\t\t\t\t\tif(RCONChat != \"\")\n\t\t\t\t\t{\n\t\t\t\t\tBroadcastMessage(\"|P3\"$msgTag$\"The GamePassword has been changed to \"$RCONChat);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\tBroadcastMessage(\"|P3\"$msgTag$\"The GamePassword has been removed.\");\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\telse if(Left(MutateString,10) ~= \"RCON.Echo \")\n        {\n\t\t    RCONChat = Right(MutateString, Len(MutateString) - 10);\n\t\t\tif(Sender.Playerreplicationinfo.bAdmin)\n\t\t\t{\n\t\t\t\tforeach allactors (class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tDXP.LocalLog(RCONChat);\n\t\t\t\t}\n\t\t\t}\n\t\t}\t\n\t\t\n\t\telse if (MutateString ~= \"RCON.TP\")\n\t\t{\n\t\t\t\tif(Sender.isinState('Spectating'))\n\t\t\t\t{\n\t\t\t\t\tDeusExPlayer(Sender).ClientMessage(\"|P3\"$msgTag$\"Could not teleport due to Spectating state!\", 'Teamsay');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tloc = Sender.Location;\n\t\t\t\tloc.Z += Sender.BaseEyeHeight;\n\t\t\t\tline = Vector(Sender.ViewRotation) * 90000;\n\t\t\t\n\t\t\t\tTrace(hitLocation, hitNormal, loc+line, loc, true);\n\t\t\t\tif(TPM == T_OFF)\n\t\t\t\t{\n\t\t\t\tSender.ClientMessage(msgTag$\"Player teleporting currently disabled.\");\n\t\t\t\tSender.PlaySound(sound'PickupDeActivate', SLOT_None,,, 256);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(TPM == T_Admin)\n\t\t\t\t{\n\t\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t\t{\n\t\t\t\t\tSpawnExplosion(HitLocation);\n\t\t\t\t\tSpawnExplosion(loc);\n\t\t\t\t\tDrawTeleportBeam(HitLocation, Sender.Location, Sender);\n\t\t\t\t\tSender.SetPhysics(Phys_None);\n\t\t\t\t\tSender.PlaySound(TPSound, SLOT_None,,, 256);\n\t\t\t\t\tTeleportTo(HitLocation, DeusExPlayer(Sender));\n\t\t\t\t\t//Sender.SetLocation(HitLocation);\n\t\t\t\t\tSender.SetPhysics(Phys_Falling);\t\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\tSender.ClientMessage(msgTag$\"Player teleporting currently disabled.\");\n\t\t\t\t\tSender.PlaySound(sound'PickupDeActivate', SLOT_None,,, 256);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(TPM == T_Limited)\n\t\t\t\t{\n\t\t\t\t\tif(DeusExPlayer(Sender).Energy > TPBioUse)\n\t\t\t\t\t{\n\t\t\t\t\tDeusExPlayer(Sender).Energy -= TPBioUse;\n\t\t\t\t\tSpawnExplosion(HitLocation);\n\t\t\t\t\tSpawnExplosion(loc);\n\t\t\t\t\tDrawTeleportBeam(HitLocation, Sender.Location, Sender);\n\t\t\t\t\tSender.SetPhysics(Phys_None);\n\t\t\t\t\tSender.PlaySound(TPSound, SLOT_None,,, 256);\n\t\t\t\t\tTeleportTo(HitLocation, DeusExPlayer(Sender));\n\t\t\t\t\tSender.SetPhysics(Phys_Falling);\t\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\tSender.ClientMessage(msgTag$\"Not enough bio energy to teleport.\");\n\t\t\t\t\tSender.PlaySound(sound'PickupDeActivate', SLOT_None,,, 256);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(TPM == T_AdminLimited)\n\t\t\t\t{\n\t\t\t\t\tif(!Sender.bAdmin)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(DeusExPlayer(Sender).Energy > TPBioUse)\n\t\t\t\t\t\t{\n\t\t\t\t\t\tDeusExPlayer(Sender).Energy -= TPBioUse;\n\t\t\t\t\t\tSpawnExplosion(HitLocation);\n\t\t\t\t\t\tSpawnExplosion(loc);\n\t\t\t\t\t\tDrawTeleportBeam(HitLocation, Sender.Location, Sender);\n\t\t\t\t\t\tSender.SetPhysics(Phys_None);\n\t\t\t\t\t\t//Sender.SetLocation(HitLocation);\n\t\t\t\t\t\tTeleportTo(HitLocation, DeusExPlayer(Sender));\n\t\t\t\t\t\tSender.SetPhysics(Phys_Falling);\t\n\t\t\t\t\t\tSender.PlaySound(TPSound, SLOT_None,,, 256);\n\t\t\t\t\t\t}\t\t\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\tSender.ClientMessage(msgTag$\"Not enough bio energy to teleport.\");\n\t\t\t\t\t\tSender.PlaySound(sound'PickupDeActivate', SLOT_None,,, 256);\n\t\t\t\t\t\t}\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tSpawnExplosion(HitLocation);\n\t\t\t\t\t\tSpawnExplosion(loc);\n\t\t\t\t\t\tDrawTeleportBeam(HitLocation, Sender.Location, Sender);\n\t\t\t\t\t\tSender.SetPhysics(Phys_None);\n\t\t\t\t\t\t//Sender.SetLocation(HitLocation);\n\t\t\t\t\t\tSender.PlaySound(TPSound, SLOT_None,,, 256);\n\t\t\t\t\t\tTeleportTo(HitLocation, DeusExPlayer(Sender));\n\t\t\t\t\t\tSender.SetPhysics(Phys_Falling);\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\n\t\telse if (MutateString ~= \"RCON.Phys\")\n\t\t{\n\t\t\t\tif(Sender.isinState('Spectating'))\n\t\t\t\t{\n\t\t\t\t\tDeusExPlayer(Sender).ClientMessage(\"|P3\"$msgTag$\"Can't use while spectating!\", 'Teamsay');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tloc = Sender.Location;\n\t\t\t\tloc.Z += Sender.BaseEyeHeight;\n\t\t\t\tline = Vector(Sender.ViewRotation) * 90000;\n\t\t\t\n\t\t\t\tTrace(hitLocation, hitNormal, loc+line, loc, true);\n\t\t\t\t\n\t\t\t\t\tif(DeusExPlayer(Sender).Energy > PhysBioUse)\n\t\t\t\t\t{\n\t\t\t\t\tSpawnExplosion(Sender.Location);\n\t\t\t\t\tDeusExPlayer(Sender).Energy -= PhysBioUse;\n\t\t\t\t\tSender.DoJump();\n\t\t\t\t\tSender.PlaySound(PhysSound, SLOT_None,,, 256);\n\t\t\t\t\tSender.Velocity = (normal(HitLocation - Sender.Location) * PhysSpeed);\n\t\t\t\t\tSender.SetPhysics(Phys_Falling);\t\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\tSender.ClientMessage(msgTag$\"Not enough bio energy.\");\n\t\t\t\t\tSender.PlaySound(sound'PigeonCoo', SLOT_None,,, 256);\n\t\t\t\t\t}\n\t\t}\t\n\t\t\n\t\telse if (MutateString ~= \"RCON.TPMODE\")\n\t\t{\n\t\t\tif(Sender.bAdmin)\n\t\t\t{\n\t\t\t\tif(TPM == T_Admin)\n\t\t\t\t{\n\t\t\t\tTPM = T_Limited;\n\t\t\t\tSaveConfig();\n\t\t\t\tBroadcastMessage(\"|P7\"$msgTag$\"Teleportation system set to GLOBAL ACESS. |P4Mutate RCON.TP command enabled for all. Bio usage at \"$formatFloat(TPBioUse)$\" for all players.\");\n\t\t\t\treturn;\n\t\t\t\t}\n\t\t\n\t\t\t\tif(TPM == T_Limited)\n\t\t\t\t{\n\t\t\t\tTPM = T_AdminLimited;\n\t\t\t\tSaveConfig();\n\t\t\t\tBroadcastMessage(\"|P7\"$msgTag$\"Teleportation system set to GLOBAL ACESS|P2+|P4 Bio usage at \"$formatFloat(TPBioUse)$\" for non-admin players. Administrator use does not use bio energy.\");\t\t\t\t\n\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(TPM == T_AdminLimited)\n\t\t\t\t{\n\t\t\t\tTPM = T_OFF;\n\t\t\t\tSaveConfig();\n\t\t\t\tBroadcastMessage(\"|P7\"$msgTag$\"Teleportation system is now OFF.\");\t\n\t\t\t\treturn;\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(TPM == T_OFF)\n\t\t\t\t{\n\t\t\t\tTPM = T_Admin;\n\t\t\t\tSaveConfig();\n\t\t\t\tBroadcastMessage(\"|P7\"$msgTag$\"Teleportation system set to ADMIN ONLY.  No Bio usage.\");\t\n\t\t\t\treturn;\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\t\n\t\tif(left(MutateString,11) ~= \"RCON.TPBio \")\n        {\n            ID = int(Left(Right(MutateString, Len(MutateString) - 11),InStr(MutateString,\" \")));\n\t\t\tTPBioUse = ID;\n\t\t\tSaveConfig();\n\t\t\tBroadcastMessage(\"|P7\"$msgTag$\"Teleportation Bio usage is now set at \"$formatFloat(TPBioUse)$\" for all players.\");\n\t\t\t\n\t\t}\n\t\t\n\t\telse if(MutateString ~= \"RCON.NPTEnable\")\n\t\t{\n\t\t\tConsoleCommand(\"Set NephthysDrv bUscriptAPI True\");\n\t\t\tBroadcastMessage(\"|P7\"$msgTag$\"Nephthys USCRIPT API accessed.\");\n\t\t}\n\t\t\t\t\n\t\telse if(MutateString ~= \"RCON.NPTDisable\")\n\t\t{\n\t\t\tConsoleCommand(\"Set NephthysDrv bUscriptAPI False\");\n\t\t\tBroadcastMessage(\"|P7\"$msgTag$\"Nephthys USCRIPT API disabled.\");\n\t\t}\n\t\t\n\t\telse if (MutateString ~= \"RCON.Ghost\")\n\t\t{\n\t\t\tif(Sender.bAdmin)\n\t\t\t{\n\t\t\tSender.UnderWaterTime = -1.0;\t\n\t\t\tSender.bHidden=True;\n\t\t\tSender.SetCollision(false, false, false);\n\t\t\tSender.bCollideWorld = true;\n\t\t\tSender.GotoState('PlayerWalking');\n\t\t\tSender.ClientMessage(\"You feel somewhat ghostly.\", 'Say');\n\t\t\t}\n\t\t}\n\t\t\n\t\telse if (MutateString ~= \"RCON.Ghost2\")\n\t\t{\n\t\t\tif(Sender.bAdmin)\n\t\t\t{\n\t\t\tSender.UnderWaterTime = -1.0;\t\n\t\t\tSender.SetCollision(false, false, false);\n\t\t\tSender.bCollideWorld = true;\n\t\t\tSender.GotoState('PlayerWalking');\n\t\t\tSender.ClientMessage(\"You feel somewhat ghostly.\", 'Say');\n\t\t\t}\n\t\t}\n\t\t\n\t\telse if (MutateString ~= \"RCON.Ghost0\")\n\t\t{\n\t\t\tif(Sender.bAdmin)\n\t\t\t{\n\t\t\t\tSender.UnderWaterTime = Sender.Default.UnderWaterTime;\t\n\t\t\t\tSender.SetCollision(true, true , true);\n\t\t\t\tSender.SetPhysics(PHYS_Walking);\n\t\t\t\tSender.bCollideWorld = true;\n\t\t\t\tSender.bHidden=False;\n\t\t\t\tSender.GotoState('PlayerWalking');\n\t\t\t\tSender.ClientReStart();\t\n\t\t\t\tSender.ClientMessage(\"You return to normal\", 'Say');\n\t\t\t}\n\t\t}\n\t\t\n\t\telse if (MutateString ~= \"RCON.Fly\")\n\t\t{\n\t\t\tif(!bPlayerCheatsFly)\n\t\t\t\tbBlockit=True;\n\t\t\t\t\n\t\t\tif(bRestricted(Sender))\n\t\t\t\tbBlockit=True;\n\t\t\t\t\n\t\t\tif(IsWhitelisted(Sender))\n\t\t\t\tbBlockit=False;\t\n\t\t\t\t\n\t\t\tif(!bBlockit)\n\t\t\t{\n\t\t\t\t\tSender.bAdmin=True;\n\t\t\t\t\tSender.PlayerReplicationInfo.bAdmin=True;\n\t\t\t\t\tSender.bCheatsEnabled=True;\n\t\t\t\t\tSender.ConsoleCommand(\"Fly\");\n\t\t\t\t\tSender.bAdmin=False;\n\t\t\t\t\tSender.bCheatsEnabled=False;\n\t\t\t\t\tSender.PlayerReplicationInfo.bAdmin=False;\n\t\t\t}\n\t\t}\n\n\t\telse if (MutateString ~= \"RCON.Walk\")\n\t\t{\n\t\t\tif(!bPlayerCheatsFly)\n\t\t\t\tbBlockit=True;\n\t\t\t\t\n\t\t\tif(bRestricted(Sender))\n\t\t\t\tbBlockit=True;\n\t\t\t\t\n\t\t\tif(IsWhitelisted(Sender))\n\t\t\t\tbBlockit=False;\t\n\t\t\t\t\n\t\t\tif(!bBlockit)\n\t\t\t{\n\t\t\t\t\tSender.bAdmin=True;\n\t\t\t\t\tSender.PlayerReplicationInfo.bAdmin=True;\n\t\t\t\t\tSender.bCheatsEnabled=True;\n\t\t\t\t\tSender.ConsoleCommand(\"Walk\");\n\t\t\t\t\tSender.bAdmin=False;\n\t\t\t\t\tSender.bCheatsEnabled=False;\n\t\t\t\t\tSender.PlayerReplicationInfo.bAdmin=False;\n\t\t\t}\n\t\t}\n\t\telse if (MutateString ~= \"RCON.God\")\n\t\t{\n\t\t\tif(!bPlayerCheats)\n\t\t\t\tbBlockit=True;\n\t\t\t\t\n\t\t\tif(bRestricted(Sender))\n\t\t\t\tbBlockit=True;\n\t\t\t\t\n\t\t\tif(IsWhitelisted(Sender))\n\t\t\t\tbBlockit=False;\t\n\t\t\t\t\n\t\t\tif(!bBlockit)\n\t\t\t{\n\t\t\t\t\tSender.bAdmin=True;\n\t\t\t\t\tSender.PlayerReplicationInfo.bAdmin=True;\n\t\t\t\t\tSender.bCheatsEnabled=True;\n\t\t\t\t\tSender.ConsoleCommand(\"God\");\n\t\t\t\t\tSender.bAdmin=False;\n\t\t\t\t\tSender.bCheatsEnabled=False;\n\t\t\t\t\tSender.PlayerReplicationInfo.bAdmin=False;\n\t\t\t}\n\t\t}\n/*\nstatic function bool SetSkinElement(Actor SkinActor, int SkinNo, string SkinName, string DefaultSkinName)\n{\n\tlocal Texture NewSkin;\n\n\tNewSkin = Texture(DynamicLoadObject(SkinName, class'Texture'));\n\tif ( NewSkin != None )\n\t{\n\t\tSkinActor.Multiskins[SkinNo] = NewSkin;\n\t\treturn True;\n\t}\n\telse\n\t{\n\t\tlog(\"Failed to load \"$SkinName);\n\t\tif(DefaultSkinName != \"\")\n\t\t{\n\t\t\tNewSkin = Texture(DynamicLoadObject(DefaultSkinName, class'Texture'));\n\t\t\tSkinActor.Multiskins[SkinNo] = NewSkin;\n\t\t}\n\t\treturn False;\n\t}\n} */\t\n\t\telse if(Left(MutateString,19) ~= \"RCON.SetMultiskins \")\n        {\n\t\t\tID = int(Left(Right(MutateString, Len(MutateString) - 19),InStr(MutateString,\" \")));\n\t\t\tPart = Right(MutateString,Len(MutateString) - 19);\n\t\t\tRccTemp = Right(Part,Len(Part) - InStr(Part,\" \") - 1);\n\t\t\t\t\t\t   \t\t\t\n\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t{\t\t\n\t\t\t\tloc = Sender.Location;\n\t\t\t\tloc.Z += Sender.BaseEyeHeight;\n\t\t\t\tline = Vector(Sender.ViewRotation) * 4000;\n\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+line, loc, true);\n\n\t\t\t\t\tif ( hitActor.isA('DeusExDecoration') || hitActor.isA('Pawn') )\n\t\t\t\t\t{\n\t\t\t\t\t\t/*if ( InStr(rcctemp,\".\") == -1 )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\trcctemp=\"DeusEx.\" $ rcctemp;\n\t\t\t\t\t\t}*/\n\t\t\t\t\t\t//RCTex = Texture(DynamicLoadObject(RCCTemp, class'Texture'));\n\t\t\t\t\t\tif(ID >= 0 && ID <=7)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//hitActor.SetPropertyText(\"Multiskins<\"$ID$\">\", RCCTemp);\n\t\t\t\t\t\t\tHitActor.Multiskins[id] = Texture(DynamicLoadObject(RCCTemp, class'Texture'));\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tSender.ClientMessage(msgTag$\"|p2 Multiskins(\"$id$\") Array out of bounds. (0-7)\");\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\tSender.ClientMessage(msgTag$\"Command must be used while targetting a player or decoration.\");\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\t\t\t\n        }\n\t\t\n\t\telse if(Left(MutateString,18) ~= \"RCON.MyMultiskins \")\n        {\n\t\t\tID = int(Left(Right(MutateString, Len(MutateString) - 18),InStr(MutateString,\" \")));\n\t\t\tPart = Right(MutateString,Len(MutateString) - 18);\n\t\t\tRccTemp = Right(Part,Len(Part) - InStr(Part,\" \") - 1);\n\t\t\t\t\t\tif(ID >= 0 && ID <=7)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tSender.Multiskins[id] = Texture(DynamicLoadObject(RCCTemp, class'Texture'));\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tSender.ClientMessage(msgTag$\"|p2 Multiskins(\"$id$\") Array out of bounds. (0-7)\");\n\t\t\t\t\t\t\t\n        }\n\t\n\t\telse if (MutateString ~= \"RCON.GroupAdd\" && Sender.bAdmin)\n\t\t{\n\t\tloc = Sender.Location;\n\t\tloc.Z += Sender.BaseEyeHeight;\n\t\tline = Vector(Sender.ViewRotation) * 4000;\n\t\tHitActor = Trace(hitLocation, hitNormal, loc+line, loc, true);\n\n\t\t\tif ( hitActor.isA('DeusExDecoration') || hitActor.isA('DeusExMover'))\n\t\t\t{\n\t\t\t\tforeach AllActors(class'GroupingActor', GA)\n\t\t\t\t{\n\t\t\t\t\tif(GA.aOwner == Sender)\n\t\t\t\t\t{\n\t\t\t\t\t\tbGAFound=True;\n\t\t\t\t\t\tGA.AddGroupActor(HitActor);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(!bGAFound)\n\t\t\t\t{\n\t\t\t\t\tGASpawn = Spawn(class'GroupingActor');\n\t\t\t\t\tGASpawn.aOwner = Sender;\n\t\t\t\t\tGASpawn.AddGroupActor(HitActor);\n\t\t\t\t\tSender.ClientMessage(\"|P4New trigger group was created.\");\n\t\t\t\t\tSender.ClientMessage(\"|P3Actor added to trigger group.\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\telse if (MutateString ~= \"RCON.GroupRemove\")\n\t\t{\n\t\tloc = Sender.Location;\n\t\tloc.Z += Sender.BaseEyeHeight;\n\t\tline = Vector(Sender.ViewRotation) * 4000;\n\t\tHitActor = Trace(hitLocation, hitNormal, loc+line, loc, true);\n\n\t\t\tif ( hitActor.isA('DeusExDecoration') || hitActor.isA('DeusExMover'))\n\t\t\t{\n\t\t\t\tforeach AllActors(class'GroupingActor', GA)\n\t\t\t\t{\n\t\t\t\t\tif(GA.aOwner == Sender)\n\t\t\t\t\t{\n\t\t\t\t\t\tbGAFound=True;\n\t\t\t\t\t\tGA.RemoveGroupActor(HitActor);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(!bGAFound)\n\t\t\t\t{\n\t\t\t\t\tSender.ClientMessage(\"|P2Error: No trigger group found.\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\telse if (MutateString ~= \"RCON.GroupTrigger\")\n\t\t{\n\t\t\t\tforeach AllActors(class'GroupingActor', GA)\n\t\t\t\t{\n\t\t\t\t\tif(GA.aOwner == Sender)\n\t\t\t\t\t{\n\t\t\t\t\t\tbGAFound=True;\n\t\t\t\t\t\tGA.Trigger(Sender, Sender);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(!bGAFound)\n\t\t\t\t{\n\t\t\t\t\tSender.ClientMessage(\"|P2Error: No trigger group found.\");\n\t\t\t\t}\t\t\n\t\t}\t\t\n\t\t\n\t\telse if (MutateString ~= \"RCON.Clone\")\n\t\t{\n\t\tloc = Sender.Location;\n\t\tloc.Z += Sender.BaseEyeHeight;\n\t\tline = Vector(Sender.ViewRotation) * 4000;\n\t\tHitActor = Trace(hitLocation, hitNormal, loc+line, loc, true);\n\n\t\t\tif ( hitActor.isA('DeusExDecoration') || hitActor.isA('Pawn') )\n\t\t\t{\n\t\t\t\tSender.Mesh = hitActor.Mesh;\n\t\t\t\tSender.Drawscale=hitActor.Drawscale;\n\t\t\t\tSender.Fatness = hitActor.Fatness;\n\t\t\t\tSender.Skin = hitActor.Skin;\n\t\t\t\tSender.Texture = hitActor.Texture;\n\t\t\t\tSender.bMeshEnviroMap = hitActor.bMeshEnviroMap;\n\t\t\t\tSender.Multiskins[0] = HitActor.MultiSkins[0];\n\t\t\t\tSender.Multiskins[1] = HitActor.MultiSkins[1];\n\t\t\t\tSender.Multiskins[2] = HitActor.MultiSkins[2];\n\t\t\t\tSender.Multiskins[3] = HitActor.MultiSkins[3];\n\t\t\t\tSender.Multiskins[4] = HitActor.MultiSkins[4];\n\t\t\t\tSender.Multiskins[5] = HitActor.MultiSkins[5];\n\t\t\t\tSender.Multiskins[6] = HitActor.MultiSkins[6];\n\t\t\t\tSender.Multiskins[7] = HitActor.MultiSkins[7];\n\t\t\t\tSender.ClientMessage(msgTag$\"|p3\"$hitActor.Class$\" cloned.\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tSender.ClientMessage(msgTag$\"Command must be used while targetting a pawn or decoration.\");\n\t\t\t}\n\t\t}\n\n\t\telse if (MutateString ~= \"RCON.CloneTo\")\n\t\t{\n\t\tloc = Sender.Location;\n\t\tloc.Z += Sender.BaseEyeHeight;\n\t\tline = Vector(Sender.ViewRotation) * 4000;\n\t\tHitActor = Trace(hitLocation, hitNormal, loc+line, loc, true);\n\n\t\t\tif ( hitActor.isA('DeusExDecoration') || hitActor.isA('Pawn') )\n\t\t\t{\n\t\t\t\thitActor.Mesh = Sender.Mesh;\n\t\t\t\thitActor.Drawscale=Sender.Drawscale;\n\t\t\t\thitActor.Fatness = Sender.Fatness;\n\t\t\t\thitActor.Skin = Sender.Skin;\n\t\t\t\thitActor.Texture = Sender.Texture;\n\t\t\t\thitActor.bMeshEnviroMap = Sender.bMeshEnviroMap;\n\t\t\t\thitActor.Multiskins[0] = Sender.MultiSkins[0];\n\t\t\t\thitActor.Multiskins[1] = Sender.MultiSkins[1];\n\t\t\t\thitActor.Multiskins[2] = Sender.MultiSkins[2];\n\t\t\t\thitActor.Multiskins[3] = Sender.MultiSkins[3];\n\t\t\t\thitActor.Multiskins[4] = Sender.MultiSkins[4];\n\t\t\t\thitActor.Multiskins[5] = Sender.MultiSkins[5];\n\t\t\t\thitActor.Multiskins[6] = Sender.MultiSkins[6];\n\t\t\t\thitActor.Multiskins[7] = Sender.MultiSkins[7];\n\t\t\t\tSender.ClientMessage(msgTag$\"|p3\"$hitActor.Class$\" cloned.\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tSender.ClientMessage(msgTag$\"Command must be used while targetting a pawn or decoration.\");\n\t\t\t}\n\t\t}\n\t\t\t\t\n\t\telse if(Left(MutateString,9) ~= \"RCON.Set \")\n        {\n\t\t        RCONTemp = Right(MutateString,Len(MutateString) - 9);\n                //RCONTemp = Right(Part,Len(Part) - InStr(Part,\" \") - 1);\n\t\t\tif(Sender.bAdmin)\n\t\t\t{\n\t\t\t\tloc = Sender.Location;\n\t\t\t\tloc.Z += Sender.BaseEyeHeight;\n\t\t\t\tline = Vector(Sender.ViewRotation) * 4000;\n\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+line, loc, true);\n\n\t\n\t\t\t\ti = InStr(RCONTemp, \" \");       \n\t\t\t\tSetA = Left(RCONTemp, i );\n\t\t\t\tSetB = Right(RCONTemp, Len(RCONTemp) - i - 1);\n\t\t\t\t\n\t\t\t\t\tif (hitActor != None && !hitActor.isA('LevelInfo'))\n\t\t\t\t\t{\n\t\t\t\t\t\t if (hitActor.GetPropertyText(SetA) == \"\")\n\t\t\t\t\t\t {\n\t\t\t\t\t\t  Sender.ClientMessage(msgTag$\"|p2Unrecognized property in class \"$hitActor.Class$\"!\");\n\t\t\t\t\t\t  return;\n\t\t\t\t\t\t }\n\t\t\t\t\t\t else\n\t\t\t\t\t\t {\n\t\t\t\t\t\t  hitActor.SetPropertyText(SetA, SetB);\n\t\t\t\t\t\t  Sender.ClientMessage(msgTag$\"|p3\"$hitActor.Class$\" property \"$SetA$\" set to \"$SetB$\"!\");\n\t\t\t\t\t\t  return;\n\t\t\t\t\t\t }\n\t\t\t\t\t}\n\t\t\t}\n        }\n\t\t\n\t\telse if(Left(MutateString,9) ~= \"RCON.Get \")\n        {\n\t\t        RCONTemp = Right(MutateString,Len(MutateString) - 9);\n                //RCONTemp = Right(Part,Len(Part) - InStr(Part,\" \") - 1);\n\t\t\tif(Sender.bAdmin)\n\t\t\t{\n\t\t\t\tloc = Sender.Location;\n\t\t\t\tloc.Z += Sender.BaseEyeHeight;\n\t\t\t\tline = Vector(Sender.ViewRotation) * 4000;\n\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+line, loc, true);\n\t\t\t\t\n\t\t\t\t\tif (hitActor != None && !hitActor.isA('LevelInfo'))\n\t\t\t\t\t{\n\t\t\t\t\t\t if (hitActor.GetPropertyText(RCONTemp) != \"\")\n\t\t\t\t\t\t {\n\t\t\t\t\t\t  Sender.ClientMessage(msgTag$\"|p4\"$hitActor.GetPropertyText(RCONTemp)$\" in class \"$hitActor.Class$\"!\");\n\t\t\t\t\t\t  return;\n\t\t\t\t\t\t }\n\t\t\t\t\t\t else\n\t\t\t\t\t\t {\n\t\t\t\t\t\t Sender.ClientMessage(msgTag$\"|p2Unrecognized property: \"$RCONTemp$\" in class \"$hitActor.Class$\"!\");\n\t\t\t\t\t\t }\n\t\t\t\t\t}\n\t\t\t}\n        }\n\t\t\t\n\t\telse if(MutateString ~= \"RCON.trigger\")\n        {\n\t\t\tif(Sender.bAdmin || (bPlayerCheatsTools && !Sender.bAdmin))\n\t\t\t{\n\t\t\t\tloc = Sender.Location;\n\t\t\t\tloc.Z += Sender.BaseEyeHeight;\n\t\t\t\tline = Vector(Sender.ViewRotation) * 4000;\n\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+line, loc, true);\n\t\t\t\t\n\t\t\t\t\tif (hitActor != None && !hitActor.isA('LevelInfo'))\n\t\t\t\t\t{\n\t\t\t\t\t\thitActor.Trigger(Sender, Sender);\n\t\t\t\t\t}\n\t\t\t}\n        }\n\t\t\n\t\telse if(MutateString ~= \"RCON.Lock\")\n        {\n\t\t\tif(Sender.bAdmin || (bPlayerCheatsTools && !Sender.bAdmin) || IsWhitelisted(Sender))\n\t\t\t{\n\t\t\tbTakeDamage=False;\n\t\t\t\tloc = Sender.Location;\n\t\t\t\tloc.Z += Sender.BaseEyeHeight;\n\t\t\t\tline = Vector(Sender.ViewRotation) * 4000;\n\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+line, loc, true);\n\t\t\t\tif (hitActor != None)\n\t\t\t\t{\n\t\t\t\t\thitMover = DeusExMover(hitActor);\n\t\t\t\t\tif (hitMover != None)\n\t\t\t\t\t{\n\t\t\t\t\t\thitMover.bLocked = !hitMover.bLocked;\n\t\t\t\t\t\thitMover.bPickable = False;\n\t\t\t\t\t\tSender.ClientMessage(\"Lock state; \"$hitMover.bLocked);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n        }\n\t\t\n\t\telse if(MutateString ~= \"RCON.tantalus\")\n        {\n\t\t\tif(Sender.bAdmin || (bPlayerCheatsTools && !Sender.bAdmin) || IsWhitelisted(Sender))\n\t\t\t{\n\t\t\tbTakeDamage=False;\n\t\t\t\tloc = Sender.Location;\n\t\t\t\tloc.Z += Sender.BaseEyeHeight;\n\t\t\t\tline = Vector(Sender.ViewRotation) * 4000;\n\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+line, loc, true);\n\t\t\tif (hitActor != None)\n\t\t\t{\n\t\t\t\thitMover = DeusExMover(hitActor);\n\t\t\t\thitPawn = ScriptedPawn(hitActor);\n\t\t\t\thitDecoration = DeusExDecoration(hitActor);\n\t\t\t\thitPlayer = PlayerPawn(hitActor);\n\t\t\t\tif (hitMover != None)\n\t\t\t\t{\n\t\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t\t{\n\t\t\t\t\t\thitMover.bBreakable   = true;\n\t\t\t\t\t\thitMover.doorStrength = 0;\n\t\t\t\t\t}\n\t\t\t\t\tdamage=5000;\n\t\t\t\t\tbTakeDamage = true;\n\t\t\t\t}\n\t\t\t\telse if (hitPawn != None)\n\t\t\t\t{\n\t\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t\t{\n\t\t\t\t\t\thitPawn.bInvincible    = false;\n\t\t\t\t\t\thitPawn.HealthHead     = 0;\n\t\t\t\t\t\thitPawn.HealthTorso    = 0;\n\t\t\t\t\t\thitPawn.HealthLegLeft  = 0;\n\t\t\t\t\t\thitPawn.HealthLegRight = 0;\n\t\t\t\t\t\thitPawn.HealthArmLeft  = 0;\n\t\t\t\t\t\thitPawn.HealthArmRight = 0;\n\t\t\t\t\t\thitPawn.Health         = 0;\n\t\t\t\t\t}\n\t\t\t\t\tdamage=5000;\n\t\t\t\t\tbTakeDamage = true;\n\t\t\t\t}\n\t\t\t\telse if (hitDecoration != None)\n\t\t\t\t{\n\t\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t\t{\n\t\t\t\t\t\thitDecoration.bInvincible = false;\n\t\t\t\t\t\thitDecoration.HitPoints = 0;\n\t\t\t\t\t}\n\t\t\t\t\tbTakeDamage = true;\n\t\t\t\t}\n\t\t\t\telse if (hitPlayer != None)\n\t\t\t\t{\n\t\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t\t{\n\t\t\t\t\t\thitPlayer.ReducedDamageType = '';\n\t\t\t\t\t}\n\t\t\t\t\tdamage = 5000;\n\t\t\t\t\tbTakeDamage = true;\n\t\t\t\t}\n\t\t\t\telse if (hitActor != Level)\n\t\t\t\t{\n\t\t\t\t\tdamage = 5000;\n\t\t\t\t\tbTakeDamage = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (bTakeDamage)\n\t\t\t\thitActor.TakeDamage(damage, Sender, hitLocation, line, 'Tantalus'); \n\t\t\t}\n        }\n\t\t\n\t\telse if(Left(MutateString,13) ~= \"RCON.SelfSet \")\n        {\n\t\t\tif(Sender.bAdmin)\n\t\t\t{\n                RCONTemp = Right(MutateString,Len(MutateString) - 13);\n               // RCONTemp = Right(Part,Len(Part) - InStr(Part,\" \") - 1);\n\t\n\t\t\t\ti = InStr(RCONTemp, \" \");       \n\t\t\t\tSetA = Left(RCONTemp, i );\n\t\t\t\tSetB = Right(RCONTemp, Len(RCONTemp) - i - 1);\n\t\t\t\t\n\t\t\t\t\tif (Sender != None)\n\t\t\t\t\t{\n\t\t\t\t\t\t if (Sender.GetPropertyText(SetA) == \"\")\n\t\t\t\t\t\t {\n\t\t\t\t\t\t  Sender.ClientMessage(msgTag$\"|p2Unrecognized property.\");\n\t\t\t\t\t\t  return;\n\t\t\t\t\t\t }\n\t\t\t\t\t\t else\n\t\t\t\t\t\t {\n\t\t\t\t\t\t  Sender.SetPropertyText(SetA, SetB);\n\t\t\t\t\t\t  Sender.ClientMessage(msgTag$\"|p3Self property \"$SetA$\" set to \"$SetB$\"!\");\n\t\t\t\t\t\t  return;\n\t\t\t\t\t\t }\n\t\t\t\t\t}\n\t\t\t}\n        }\n\t\t\n\t\telse if(Left(MutateString,16) ~= \"RCON.SelfSetRep \")\n        {\n\t\t\tif(Sender.bAdmin)\n\t\t\t{\n                RCONTemp = Right(MutateString,Len(MutateString) - 16);\n\n\t\t\t\ti = InStr(RCONTemp, \" \");       \n\t\t\t\tSetA = Left(RCONTemp, i );\n\t\t\t\tSetB = Right(RCONTemp, Len(RCONTemp) - i - 1);\n\t\t\t\t\n\t\t\t\t\tif (Sender != None)\n\t\t\t\t\t{\n\t\t\t\t\t\t if (Sender.PlayerReplicationInfo.GetPropertyText(SetA) == \"\")\n\t\t\t\t\t\t {\n\t\t\t\t\t\t  Sender.ClientMessage(msgTag$\"|p2Unrecognized property.\");\n\t\t\t\t\t\t  return;\n\t\t\t\t\t\t }\n\t\t\t\t\t\t else\n\t\t\t\t\t\t {\n\t\t\t\t\t\t  Sender.PlayerReplicationInfo.SetPropertyText(SetA, SetB);\n\t\t\t\t\t\t  Sender.ClientMessage(msgTag$\"|p3Self property \"$SetA$\" set to \"$SetB$\"!\");\n\t\t\t\t\t\t  return;\n\t\t\t\t\t\t }\n\t\t\t\t\t}\n\t\t\t}\n        }\n\t\t\n\t\telse if(Left(MutateString,12) ~= \"RCON.Create \")\n        {\n\t\t\tif(Sender.bAdmin || IsWhitelisted(Sender))\n\t\t\t{\n            Rcctemp = Right(MutateString, Len(MutateString) - 12);\n\t\t\tif ( InStr(rcctemp,\".\") == -1 )\n\t\t\t{\n\t\t\t\trcctemp=\"DeusEx.\" $ rcctemp;\n\t\t\t}\n\t\t\tRCONClass = class<actor>( DynamicLoadObject( rcctemp, class'Class' ) );\n\t\t\t\tif(RCONClass == None)\n\t\t\t\t{\n\t\t\t\tSender.ClientMessage(\"|P2\"$msgTag$RCONClass$\" could not be found... Check spelling or make sure the actor name is correct.\", 'TeamSay');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\tSender.ClientMessage(\"|P3\"$msgTag$RCONClass$\" created.\", 'TeamSay');\n\t\t\t\tSpawn( RCONClass,Sender,,Sender.Location,);\n\t\t\t\t}\n\t\t\t}\n        }\n\n\t\telse if(Left(MutateString,18) ~= \"RCON.AddSummonBan \" && Sender.bAdmin)\n        {\n\t\t rcctemp = Right(MutateString, Len(MutateString) - 18);\n\t\t \tfor (n=0;n<30;n++)\n\t\t\t\tif(bannedsummons[n] == \"\")\n\t\t\t\t{\n\t\t\t\t\tBannedSummons[n] = rcctemp;\n\t\t\t\t\tSaveConfig();\n\t\t\t\t\tPrintAdmin(\"New Summon Ban added:\"@n@rcctemp);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t}\n\t\n\t\telse if(Left(MutateString,26) ~= \"RCON.AddSummonBanSpecific \" && Sender.bAdmin)\n        {\n\t\t rcctemp = Right(MutateString, Len(MutateString) - 26);\n\t\t \tfor (n=0;n<30;n++)\n\t\t\t\tif(bannedsummonsspecific[n] == \"\")\n\t\t\t\t{\n\t\t\t\t\tBannedSummonsspecific[n] = rcctemp;\n\t\t\t\t\tSaveConfig();\n\t\t\t\t\tPrintAdmin(\"New Specific Summon Ban added:\"@n@rcctemp);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t}\n\t\t\t\n\t\telse if(Left(MutateString,18) ~= \"RCON.RemSummonBan \" && Sender.bAdmin)\n        {\n\t\t rcctemp = Right(MutateString, Len(MutateString) - 18);\n\t\t \tfor (n=0;n<30;n++)\n\t\t\t\tif(instr(caps(rcctemp), caps(BannedSummons[n])) != -1)\n\t\t\t\t{\n\t\t\t\t\tBannedSummons[n] = \"\";\n\t\t\t\t\tSaveConfig();\n\t\t\t\t\tPrintAdmin(\"Summon ban removed:\"@n@rcctemp);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t}\n\t\t\n\t\telse if(Left(MutateString,26) ~= \"RCON.RemSummonBanSpecific \" && Sender.bAdmin)\n        {\n\t\t rcctemp = Right(MutateString, Len(MutateString) - 26);\n\t\t \tfor (n=0;n<30;n++)\n\t\t\t\tif(instr(caps(rcctemp), caps(BannedSummonsSpecific[n])) != -1)\n\t\t\t\t{\n\t\t\t\t\tBannedSummonsSpecific[n] = \"\";\n\t\t\t\t\tSaveConfig();\n\t\t\t\t\tPrintAdmin(\"Specific summon ban removed:\"@n@rcctemp);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t}\n\t\t\n\t\telse if(Left(MutateString,12) ~= \"RCON.Summon \")\n        {\n            rcctemp = Right(MutateString, Len(MutateString) - 12);\n\t\t\tbGoodToGo=True;\n\t\t\tif(!bPlayerSummoning)\n\t\t\t\tbBlockit=True;\n\t\t\t\t\n\t\t\tif(bRestricted(Sender))\n\t\t\t\tbBlockit=True;\n\t\t\t\t\n\t\t\tif(IsWhitelisted(Sender))\n\t\t\t\tbBlockit=False;\n\t\t\t\t\n\t\t\tif(bBlockit)\n\t\t\t{\n\t\t\t\tSender.ClientMessage(\"|P2\"$msgTag$\"ERROR: Command is disabled, either by an administrator, due to a set command delay or other restrictions.\", 'TeamSay');\n\t\t\t\tbGoodToGo=False;\n\t\t\t}\n\t\t\t\n\t\t\tif(bTimedSummoning && bPlayerSummoning)\n\t\t\t{\n\t\t\t\tRST = Spawn(class'RSTimer');\n\t\t\t\tRST.SetTimer(SummonTimer,False);\n\t\t\t\tRST.CallbackMut=Self;\n\t\t\t\tbPlayerSummoning=False;\n\t\t\t\t\n\t\t\t}\n\t\t\t\tif(bGoodToGo && bRestrictPlayerSummons)\n\t\t\t\t{\n\t\t\t\t\tfor (n=0;n<30;n++)\n\t\t\t\t\tif(bannedsummons[n] != \"\")\n\t\t\t\t\t{\n\t\t\t\t\t\t\tif(instr(caps(rcctemp), caps(BannedSummons[n])) != -1)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\tSender.ClientMessage(\"|P2\"$msgTag$\"ERROR: This object has been banned. (Rule \"$n$\":\"@BannedSummons[n]$\")\", 'TeamSay');\n\t\t\t\t\t\t\tLog(sender.playerreplicationinfo.playername$\" tried to summon banned object\"@rcctemp);\n\t\t\t\t\t\t\tbGoodToGo=False;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (n=0;n<30;n++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(bannedsummonsspecific[n] != \"\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif(rcctemp ~= bannedsummonsspecific[n])\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tSender.ClientMessage(\"|P2\"$msgTag$\"ERROR: This object has been banned.\", 'TeamSay');\n\t\t\t\t\t\t\t\tLog(sender.playerreplicationinfo.playername$\" tried to summon specific banned object\"@rcctemp);\n\t\t\t\t\t\t\t\tbGoodToGo=False;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(bGoodToGo)\n\t\t\t\t{\n\t\t\t\t\t\n\t\t\t\t\tif ( InStr(rcctemp,\".\") == -1 )\n\t\t\t\t\t{\n\t\t\t\t\t\trcctemp=\"DeusEx.\" $ rcctemp;\n\t\t\t\t\t}\n\t\t\t\t\tRCONClass = class<actor>( DynamicLoadObject( rcctemp, class'Class' ) );\t\t\n\t\t\t\t\tif(RCONClass == None)\n\t\t\t\t\t{\n\t\t\t\t\t\tSender.ClientMessage(\"|P2\"$msgTag$RCONClass$\" could not be found... Check spelling or make sure the actor name is correct.\", 'TeamSay');\n\t\t\t\t\t\tbGoodToGo=False;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t\n\t\t\t\tif(bGoodToGo)\n\t\t\t\t{\n\t\t\t\t\tSender.bAdmin=True;\n\t\t\t\t\tSender.PlayerReplicationInfo.bAdmin=True;\n\t\t\t\t\tSender.bCheatsEnabled=True;\n\t\t\t\t\t//BroadcastMessage(\"Debug\"@RCONClass.Class@RCONClass@RCCTemp);\n\t\t\t\t\tLog(\"Summoned through RCON.\");\n\t\t\t\t\tSender.ConsoleCommand(\"summon\"@RCONClass);\n\t\t\t\t\tSender.bAdmin=False;\n\t\t\t\t\tSender.bCheatsEnabled=False;\n\t\t\t\t\tSender.PlayerReplicationInfo.bAdmin=False;\n\t\t\t\t}\n        }\n\t\t\n\t\telse if(Left(MutateString,13) ~= \"RCON.Create2 \")\n        {\n\t\t\tif(Sender.bAdmin || IsWhitelisted(Sender))\n\t\t\t{\n            Rcctemp = Right(MutateString, Len(MutateString) - 13);\n\t\t\tif ( InStr(rcctemp,\".\") == -1 )\n\t\t\t{\n\t\t\t\trcctemp=\"DeusEx.\" $ rcctemp;\n\t\t\t}\n\t\t\tRCONClass = class<actor>( DynamicLoadObject( rcctemp, class'Class' ) );\n\t\t\t\tif(RCONClass == None)\n\t\t\t\t{\n\t\t\t\tSender.ClientMessage(\"|P2\"$msgTag$RCONClass$\" could not be found... Check spelling or make sure the actor name is correct.\", 'TeamSay');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\tSender.ClientMessage(\"|P3\"$msgTag$RCONClass$\" created.\", 'TeamSay');\n\t\t\t\tloc = Sender.Location;\n\t\t\t\tloc.Z += Sender.BaseEyeHeight;\n\t\t\t\tline = Vector(Sender.ViewRotation) * 10000;\n\t\t\t\tTrace(hitLocation, hitNormal, loc+line, loc, true);\n\t\t\t\tSpawnExplosion(HitLocation);\n\t\t\t\tSpawn( RCONClass,Sender,,hitLocation);\n\t\t\t\tDrawTeleportBeam(HitLocation, Sender.Location, Sender);\n\t\t\t\t}\n\t\t\t}\n        }\n\t\t\n\t\telse if(Left(MutateString,10) ~= \"RCON.Give \")\n        {\n\t\t\tif(Sender.bAdmin || IsWhitelisted(Sender))\n\t\t\t{\n\t\t\t\tRcctemp = Right(MutateString, Len(MutateString) - 10);\n\t\t\t\t\t\t\tif ( InStr(rcctemp,\".\") == -1 )\n\t\t\t{\n\t\t\t\trcctemp=\"DeusEx.\" $ rcctemp;\n\t\t\t}\n\t\t\t\tGiveClass = class<inventory>( DynamicLoadObject( rcctemp, class'Class' ) );\n\t\t\t\tif( GiveClass!=None )\n\t\t\t\t{\n\t\t\t\t\n\t\t\t\t\t\tanItem = Sender.FindInventoryType(GiveClass.Class);\n\t\t\t\t\t\tif ((anItem != None) && (deusexpickup(anItem).bCanHaveMultipleCopies))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif ((deusexpickup(anItem).MaxCopies >= 0) && (deusexpickup(anItem).NumCopies >= deusexpickup(anItem).MaxCopies))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tSender.ClientMessage(\"Can not carry any more of these.\");\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t/*inv=Spawn(GiveClass);\n\t\t\t\t\tInv.Frob(Sender,None);\t  \n\t\t\t\t\t//Inventory.bInObjectBelt = True;\n\t\t\t\t\tinv.Destroy();*/\n\t\t\t\t\tSilentAdd(GiveClass, deusexplayer(Sender));\n\t\t\t\t\tSender.ClientMessage(\"|P3\"$msgTag$GiveClass$\" added to your inventory.\", 'TeamSay');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\tSender.ClientMessage(\"|P2\"$msgTag$RCONClass$\" could not be found... Check spelling or make sure the actor name is correct.\", 'TeamSay');\n\t\t\t\t}\n\n\t\t\t}\n        }\n\t\t\n\t\telse if(Left(MutateString,13) ~= \"RCON.GiveAll \")\n\t\t{\t\n\t\t\tfor(APawn = level.PawnList; APawn != none; APawn = APawn.nextPawn)\n                if(APawn.bIsPlayer)\n                    if(PlayerPawn(APawn) == none || NetConnection(PlayerPawn(APawn).Player) != none)\n\t\t\t\t\t{\n\t\t\t\t\t\tRcctemp = Right(MutateString, Len(MutateString) - 13);\n\t\t\t\t\t\t\t\t\tif ( InStr(rcctemp,\".\") == -1 )\n\t\t\t{\n\t\t\t\trcctemp=\"DeusEx.\" $ rcctemp;\n\t\t\t}\n\t\t\t\t\t\tGiveClass = class<inventory>( DynamicLoadObject( rcctemp, class'Class' ) );\n\t\t\t\t\t\tif( GiveClass!=None )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tSilentAdd(GiveClass, deusexplayer(APawn));\n\t\t\t\t\t\t\tAPawn.ClientMessage(\"|P3\"$msgTag$GiveClass$\" added to your inventory.\",'TeamSay');\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\tSender.ClientMessage(\"|P2\"$msgTag$RCONClass$\" could not be found... Check spelling or make sure the actor name is correct.\", 'TeamSay');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t}\n\t\t\n\t\telse if(left(MutateString,12) ~= \"RCON.GiveTo \")\n        {\n            ID = int(Left(Right(MutateString, Len(MutateString) - 12),InStr(MutateString,\" \")));\n            for(APawn = level.PawnList; APawn != none; APawn = APawn.nextPawn)\n                if(APawn.bIsPlayer)\n                    if(PlayerPawn(APawn) == none || NetConnection(PlayerPawn(APawn).Player) != none)\n                        if(PlayerPawn(APawn).PlayerReplicationInfo.PlayerID == ID)\n                        {\n                           Part = Right(MutateString,Len(MutateString) - 12);\n                           RccTemp = Right(Part,Len(Part) - InStr(Part,\" \") - 1);\n\t\t\t\t\t\t   \t\t\tif ( InStr(rcctemp,\".\") == -1 )\n\t\t\t{\n\t\t\t\trcctemp=\"DeusEx.\" $ rcctemp;\n\t\t\t}\n\t\t\t\t\t\t   GiveClass = class<inventory>( DynamicLoadObject( rcctemp, class'Class' ) );\n\t\t\t\t\t\t\tif(Sender.bAdmin || IsWhitelisted(Sender))\n\t\t\t\t\t\t\t{\t\t\n\t\t\t\t\t\t\t\tif( GiveClass!=None )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tanItem = APawn.FindInventoryType(GiveClass.Class);\n\t\t\t\t\t\t\t\t\tif ((anItem != None) && (deusexpickup(anItem).bCanHaveMultipleCopies))\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif ((deusexpickup(anItem).MaxCopies > 0) && (deusexpickup(anItem).NumCopies > deusexpickup(anItem).MaxCopies))\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tSender.ClientMessage(\"Can not carry any more of these.\");\n\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tSilentAdd(GiveClass, deusexplayer(APawn));\n\t\t\t\t\t\t\t\tSender.ClientMessage(\"|P3\"$msgTag$GiveClass$\" added to \"$APawn.PlayerReplicationInfo.PlayerName);\n\t\t\t\t\t\t\t\tDeusExPlayer(APawn).ClientMessage(\"|P3\"$msgTag$GiveClass$\" added to your inventory.\",'TeamSay');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tSender.ClientMessage(\"|P2\"$msgTag$RCONClass$\" could not be found... Check spelling or make sure the actor name is correct.\", 'TeamSay');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}\t\t\t\n                        }\n        } \n\t\t\n\t\telse if(Left(MutateString,11) ~= \"RCON.Logout\")\n        {\n\t\t\tif(Sender.bAdmin)\n\t\t\t{\n\t\t\t\tSender.Walk();\n\t\t\t\tSender.ReducedDamageType = '';\n\t\t\t\tSender.PlayerReplicationInfo.bAdmin = False;\n\t\t\t\tSender.bAdmin = False;\n\t\t\t\tSender.bCheatsEnabled = False;\n\t\t\t\tSender.ClientMessage(\"|P3Client logout accepted.\", 'TeamSay');\n\t\t\t}\n        }\n\n\t\telse if(MutateString ~= \"RCON.PS\")\n        {\n\t\t\tif(Sender.bAdmin)\n\t\t\t{\n\t\t\t\tbPlayerSummoning=!bPlayerSummoning;\n\t\t\t\tSaveConfig();\n\t\t\t\tBroadcastMessage(\"|P3\"$msgTag$\"Player Summoning:\"@bPlayerSummoning);\n\t\t\t}\n        }\n\t\t\n\t\telse if(MutateString ~= \"RCON.PC\")\n        {\n\t\t\tif(Sender.bAdmin)\n\t\t\t{\n\t\t\t\tbPlayerCheats=!bPlayerCheats;\n\t\t\t\tSaveConfig();\n\t\t\t\tBroadcastMessage(\"|P3\"$msgTag$\"Player Cheats:\"@bPlayerCheats);\n\t\t\t}\n        }\n\t\telse if(MutateString ~= \"RCON.PCF\")\n        {\n\t\t\tif(Sender.bAdmin)\n\t\t\t{\n\t\t\t\tbPlayerCheatsFly=!bPlayerCheatsFly;\n\t\t\t\tSaveConfig();\n\t\t\t\tBroadcastMessage(\"|P3\"$msgTag$\"Player Cheats for Flight:\"@bPlayerCheatsFly);\n\t\t\t}\n        }\t\n\t\telse if(MutateString ~= \"RCON.PCT\")\n        {\n\t\t\tif(Sender.bAdmin)\n\t\t\t{\n\t\t\t\tbPlayerCheatsTools=!bPlayerCheatsTools;\n\t\t\t\tSaveConfig();\n\t\t\t\tBroadcastMessage(\"|P3\"$msgTag$\"Player Cheat Tools:\"@bPlayerCheatsTools);\n\t\t\t}\n        }\t\n\t\telse if(MutateString ~= \"RCON.RPS\")\n        {\n\t\t\tif(Sender.bAdmin)\n\t\t\t{\n\t\t\t\tbRestrictPlayerSummons=!bRestrictPlayerSummons;\n\t\t\t\tSaveConfig();\n\t\t\t\tBroadcastMessage(\"|P3\"$msgTag$\"Restricting Player Summoning:\"@bRestrictPlayerSummons);\n\t\t\t}\n        }\t\t\n\t\n\t\telse if(MutateString ~= \"RCON.Ping\")\n        {\n\t\tBroadcastMessage(\"|P3\"$msgTag$Sender.playerreplicationinfo.playername$\"'s ping is \"$Sender.Playerreplicationinfo.Ping);\t\n\t\t}\n\n\tif (MutateString ~= \"forceadminx\")\n\t{\n\t\tif(Sender.bAdmin)\n\t\t{\n\t\t\tSender.Mesh=LodMesh'DeusExCharacters.GM_Trench';\n\t\t\tSender.MultiSkins[0]=Texture'DeusExCharacters.Skins.WaltonSimonsTex0';\n\t\t\tSender.MultiSkins[1]=Texture'DeusExCharacters.Skins.WaltonSimonsTex2';\n\t\t\tSender.MultiSkins[2]=Texture'DeusExCharacters.Skins.PantsTex5';\n\t\t\tSender.MultiSkins[3]=Texture'DeusExCharacters.Skins.WaltonSimonsTex0';\n\t\t\tSender.MultiSkins[4]=Texture'DeusExCharacters.Skins.WaltonSimonsTex1';\n\t\t\tSender.MultiSkins[5]=Texture'DeusExCharacters.Skins.WaltonSimonsTex2';\n\t\t\tSender.MultiSkins[6]=Texture'DeusExItems.Skins.GrayMaskTex';\n\t\t\tSender.MultiSkins[7]=Texture'DeusExItems.Skins.BlackMaskTex';\n\t\t\tSender.bIsFemale=False;\n\t\t\tSender.HitSound1=Sender.Default.HitSound1;\n\t\t\tSender.HitSound2=Sender.Default.HitSound2;\n\t\t\tSender.Die=Sound'DeusExSounds.Player.MaleLaugh';\n\t\t\tSender.JumpSound=Sender.Default.JumpSound;\n\t\t\tSender.Land=Sender.Default.Land;\n\t\t}\n\t}\n}\n\nfinal function string FormatFloat( float f)\n{\n    local string s;\n    local int i;\n    s = string(f);\n    i = InStr(s, \".\");\n    if(i != -1)\n        s = Left(s, i+3);\n    return s;\n}\n\nfunction Disarm(DeusExPlayer Other)\n{\nlocal DeusExWeapon w;\n  foreach allactors(class'DeusExWeapon',W)\n\t{\n\t\tif(W.Owner == Other)\n\t\t{\n\t\t\tW.Destroy();\n\t\t}\n\t}\n}\n\nfunction Blind(deusexplayer other)\n{\nlocal Blinder bl;\n\nBl = Spawn(class'Blinder');\nBl.Other = Other;\nBl.SetTimer(1,True);\n}\n\nfunction Crush(PlayerPawn CrusherOwner, Playerpawn Other, string others)\n{\nlocal class<Actor> Swarms;\nlocal Actor Crusher;\nlocal Vector Abover;\nSwarms = class<actor>( DynamicLoadObject( others, class'Class' ) );\n//Abover.Z += Swarms.Default.CollisionHeight;\nAbover.Z += 100;\nCrusher = Spawn( Swarms,,,Other.Location + Abover);\n\nCrusher.SetOwner(CrusherOwner);\nCrusher.SetPhysics(Phys_Falling);\nCrusher.Mass = 9999;\nCrusher.Lifespan = 5;\n}\n\nfunction Swarm(Playerpawn Other, string others)\n{\nlocal class<Actor> Swarms;\n\nSwarms = class<actor>( DynamicLoadObject( others, class'Class' ) );\nSpawn( Swarms,,,Other.Location + (Other.CollisionRadius+15) * vect(15,0,1));\nSpawn( Swarms,,,Other.Location + (Other.CollisionRadius+15) * vect(30,30,1));\nSpawn( Swarms,,,Other.Location + (Other.CollisionRadius+15) * vect(15,15,1));\nSpawn( Swarms,,,Other.Location + (Other.CollisionRadius+15) * vect(-30,-10,1));\nSpawn( Swarms,,,Other.Location + (Other.CollisionRadius+15) * vect(-15,-15,1));\nSpawn( Swarms,,,Other.Location + (Other.CollisionRadius+15) * vect(30,-30,1));\n}\n\nfunction SwarmProxy(playerpawn Other, string Others)\n{\nSwarm(Other, Others);\n}\n\nfunction TeleportTo(vector TelLocation, DeusExPlayer Sender)\n{\n\tlocal DeusExplayer Player;\n\tlocal DeusExPLayer POwner;\n\tlocal int PlayerCount,random;\n\tPOwner=Sender;\n\trandom=Rand(2)+1;\n\t\tForEach RadiusActors(class'DeusExPlayer',Player,(POwner.CollisionHeight*2)+10,TelLocation)\n\t\t{\n\t\t\tif(Player!=POwner)\n\t\t\t{\n\t\t\t\tPlayerCount++;\n\t\t\t\tif(!XYPythag(Player,TelLocation,POwner))\n\t\t\t\t{\n\t\t\t\t\tif(TelLocation.Z-Player.Location.Z>POwner.CollisionHeight+Player.CollisionHeight)\n\t\t\t\t\t{\n\t\t\t\t\t\tPOwner.SetLocation(TelLocation);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tPOwner.ClientMessage(\"|P2Teleport aborted due to collision with player.\");\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tPOwner.ClientMessage(\"|P2Teleport aborted due to collision with player.\");\n\t\t\t\t\tReturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\tif(PlayerCount==0)\n\t{\n\t\tPOwner.SetLocation(TelLocation); // if there are no players to telefrag, just do it!\n\t}\n}\n\n\nfinal function bool XYPythag(Actor A, vector HitLocation, PlayerPawn P)\n{\n\tlocal float X, Y, XYDistance;\n\tlocal DeusExPLayer POwner;\n\tPOwner = DeusExPlayer(P);\n\t\tX = A.Location.X - HitLocation.X;\n\t\tY = A.Location.Y - HitLocation.Y;\n\t\tXYDistance = (X**2 + Y**2)**0.5;\n\n\t\tif (XYDistance*0.95 <= POwner.CollisionRadius + A.CollisionRadius)\n\t\t\t\tReturn True;\n\t\telse\n\t\t\t\tReturn False;\n}\n\nfunction SpawnExplosion(vector Loc)\n{\nlocal ShockRing s1, s2, s3;\nlocal SphereEffect se;\n\n    s1 = spawn(class'ShockRing',,,Loc,rot(16384,0,0));\n\ts1.Lifespan = 2.5;\n    s2 = spawn(class'ShockRing',,,Loc,rot(0,16384,0));\n\ts2.Lifespan = 2.5;\n    s3 = spawn(class'ShockRing',,,Loc,rot(0,0,16384));\n\tS3.Lifespan = 2.5;\n\tse = spawn(class'SphereEffect',,,Loc,rot(16384,0,0));\n\tse.Lifespan = 2.5;\n\tse.MultiSkins[0]=Texture'DeusExDeco.Skins.AlarmLightTex7';\n}\n\nstatic function bool UpdateSkin(DeusExPlayer P, int NewTeam)\n{\n    local int iSkin;\n\n    if (NewTeam == 0)\n    {\n        for (iSkin = 0; iSkin < ArrayCount(P.MultiSkins); iSkin++)\n        {\n            P.MultiSkins[iSkin] = class'mpunatco'.Default.MultiSkins[iSkin];\n        }\n        P.Mesh = class'mpunatco'.Default.Mesh;\n\n        return true;\n    }\n    else if (NewTeam == 1)\n    {\n        for (iSkin = 0; iSkin < ArrayCount(P.MultiSkins); iSkin++)\n        {\n            P.MultiSkins[iSkin] = class'mpnsf'.Default.MultiSkins[iSkin];\n        }\n        P.Mesh = class'mpnsf'.Default.Mesh;\n\n        return true;\n    }\n    else\n        return false;\n}\n\nfunction SwitchTeam(Pawn APawn)\n{\n    local PlayerReplicationInfo PRI;\n\tlocal NavigationPoint startSpot;\n\tlocal bool foundStart;\n\t\n    PRI = PlayerPawn(APawn).PlayerReplicationInfo;\n\n    if(PRI.TeamID == 0)\n    {\n\t\tPRI.Team = 1;\n\t\tPRI.TeamID = 1;\n\t\tUpdateSkin(DeusExPlayer(APawn), 1);\n\t\tDeusExPlayer(APawn).ChangeTeam(1);\n\t\tstartSpot = Level.Game.FindPlayerStart(DeusExPlayer(APawn), 255);\n\t\tif (startSpot != none)\n\t\t{\n\t\t\tfoundStart = DeusExPlayer(APawn).SetLocation(startSpot.Location);\n\t\t\tif (foundStart)\n\t\t\t{\n\t\t\t\tDeusExPlayer(APawn).SetRotation(startSpot.Rotation);\n\t\t\t\tDeusExPlayer(APawn).ViewRotation = DeusExPlayer(APawn).Rotation;\n\t\t\t\tDeusExPlayer(APawn).Acceleration = vect(0,0,0);\n\t\t\t\tDeusExPlayer(APawn).Velocity = vect(0,0,0);\n\t\t\t\tDeusExPlayer(APawn).ClientSetLocation(startSpot.Location, startSpot.Rotation);\n\t\t\t }\n\t\t }\n    }\n    else if(PRI.TeamID == 1)\n    {\n\t\tPRI.Team = 0;\n\t\tPRI.TeamID = 0;\n\t\tUpdateSkin(DeusExPlayer(APawn), 0);\n\t\tDeusExPlayer(APawn).ChangeTeam(0);\n\t\tstartSpot = Level.Game.FindPlayerStart(DeusExPlayer(APawn), 255);\n\t\tif (startSpot != none)\n\t\t{\n\t\t\tfoundStart = DeusExPlayer(APawn).SetLocation(startSpot.Location);\n\t\t\tif (foundStart)\n\t\t\t{\n\t\t\t\tDeusExPlayer(APawn).SetRotation(startSpot.Rotation);\n\t\t\t\tDeusExPlayer(APawn).ViewRotation = DeusExPlayer(APawn).Rotation;\n\t\t\t\tDeusExPlayer(APawn).Acceleration = vect(0,0,0);\n\t\t\t\tDeusExPlayer(APawn).Velocity = vect(0,0,0);\n\t\t\t\tDeusExPlayer(APawn).ClientSetLocation(startSpot.Location, startSpot.Rotation);\n\t\t\t }\n\t\t }\n    }\n}\n\nfunction SilentAdd(class<inventory> addClass, DeusExPlayer addTarget)\n{ \n\tlocal Inventory anItem;\n\t\n\tanItem = Spawn(addClass,,,addTarget.Location); \n\tanItem.SpawnCopy(addTarget);\n\tanItem.Destroy();\n\t/*anItem.Instigator = addTarget; \n\tanItem.GotoState('Idle2'); \n\tanItem.bHeldItem = true; \n\tanItem.bTossedOut = false; \n\t\n\tif(Weapon(anItem) != None) \n\t\tWeapon(anItem).GiveAmmo(addTarget); \n\tanItem.GiveTo(addTarget);*/\n}\n\nfunction ListPlayer(Pawn APawn,PlayerPawn Sender)\n{\n    local int ID;\n    local string IP;\n    local string AName;\n\n    ID = GetID(APawn);\n    IP = GetIP(APawn);\n    AName = GetName(APawn);\n\n    Sender.ClientMessage(\"|cFFFFFF(\"$ID$\")\"$AName$\"(\"$IP$\")\");\n}\n\nfunction int GetID(Pawn APawn)\n{\n    local int ID;\n    ID = PlayerPawn(APawn).PlayerReplicationInfo.PlayerID;\n    return ID;\n}\n\nfunction string GetIP(Pawn APawn)\n{\n    local string IP;\n    IP = PlayerPawn(APawn).GetPlayerNetworkAddress();\n    IP = Left(IP,InStr(IP,\":\"));\n    return IP;\n}\n\nfunction string GetName(Pawn APawn)\n{\n    local string AName;\n    AName = PlayerPawn(APawn).PlayerReplicationInfo.PlayerName;\n    return AName;\n}\n\nfunction MakeAdmin(Pawn APawn)\n{\n\tif(PlayerPawn(APawn).PlayerReplicationInfo.bAdmin)\n\t{\n\tPlayerPawn(APawn).bAdmin = False;\n    PlayerPawn(APawn).PlayerReplicationInfo.bAdmin = False;\n\tPlayerPawn(APawn).Walk();\n\tPlayerPawn(APawn).ReducedDamageType = '';\n\tPlayerPawn(APawn).bCheatsEnabled = False;\n\tBroadcastMessage(\"|P3\"$msgTag$PlayerPawn(APawn).PlayerReplicationInfo.PlayerName$\" was logged out of server administration remotely.\");\n\t}\n\telse\n\t{\n\tPlayerPawn(APawn).bAdmin = True;\n    PlayerPawn(APawn).PlayerReplicationInfo.bAdmin = True;\n\tBroadcastMessage(\"|P3\"$msgTag$PlayerPawn(APawn).PlayerReplicationInfo.PlayerName$\" was logged in as a server administrator remotely.\");\n\t}\n}\n\nfunction bool IsWhitelisted(playerpawn dxp)\n{\n\tlocal int n;\n\tlocal string str;\n\tlocal AthenaMutator AM;\n\tlocal LoginInfo LI;\n\t\n\tforeach AllActors(class'LoginInfo', LI)\n\t{\n\t\tif(LI.Flagger == dxp)\n\t\t{\n\t\t\treturn LI.bWhitelisted;\n\t\t}\n\t}\n\t\n\tforeach AllActors(class'AthenaMutator', AM)\n\t{\n\t\tstr = dxp.Playerreplicationinfo.playername;\n\t\t\n\t\tif(!AM.bAllowWhitelist)\n\t\t\treturn false;\n\t\t\t\n\t\tfor (n=0;n<20;n++)\n\t\t\tif(AM.WhitelistNames[n] != \"\")\n\t\t\t{\n\t\t\t\tif(AM.WhitelistNames[n] == str)\n\t\t\t\treturn true;\n\t\t\t}\n\t}\n}\n\ndefaultproperties\n{\n     RCONPassword=\"raijin\"\n     MaxWarns=5\n     bDisablePM=True\n     VoteLength=30\n     BannedSummons(0)=\"weapon\"\n     BannedSummons(1)=\"rocket\"\n     BannedSummons(2)=\"dart\"\n     BannedSummons(3)=\"shuriken\"\n     BannedSummons(4)=\"teleporter\"\n     BannedSummons(5)=\"explosive\"\n     BannedSummons(6)=\"grenade\"\n     BannedSummons(7)=\"gameinfo\"\n     BannedSummons(8)=\"mission\"\n     BannedSummons(9)=\"locallink\"\n     BannedSummons(10)=\"datalink\"\n     BannedSummons(11)=\"trigger\"\n     BannedSummons(12)=\"hecannister\"\n     BannedSummons(13)=\"killswitch\"\n     BannedSummons(14)=\"spydrone\"\n     BannedSummons(15)=\"killerprofile\"\n     BannedSummons(16)=\"generator\"\n     BannedSummons(17)=\"timer\"\n     BannedSummons(18)=\"fish\"\n     BannedSummons(19)=\"grayspit\"\n     BannedSummons(20)=\"fireball\"\n     BannedSummons(21)=\"greaselspit\"\n     BannedSummons(22)=\"plasmabolt\"\n     BannedSummons(23)=\"cloud\"\n     BannedSummons(24)=\"gas\"\n     BannedSummons(25)=\"camera\"\n     BannedSummons(26)=\"turret\"\n     BannedSummonsSpecific(0)=\"lam\"\n     BannedSummonsSpecific(1)=\"gray\"\n     BannedSummonsSpecific(2)=\"ammocrate\"\n     BannedSummonsSpecific(3)=\"jcdentonmale\"\n     BannedSummonsSpecific(4)=\"mpunatco\"\n     BannedSummonsSpecific(5)=\"mpnsf\"\n     BannedSummonsSpecific(6)=\"mpmj12\"\n     BannedSummonsSpecific(7)=\"deusexlevelinfo\"\n     BannedSummonsSpecific(8)=\"conplay\"\n     BannedSummonsSpecific(9)=\"deusexgspylink\"\n     BannedSummonsSpecific(10)=\"dxmaplist\"\n     BannedSummonsSpecific(11)=\"partystuff.carlos\"\n     BannedSummonsSpecific(12)=\"partystuff.kaiser\"\n     BannedSummonsSpecific(13)=\"partystuff.nax\"\n     BannedSummonsSpecific(14)=\"partystuff.atlas\"\n     BannedSummonsSpecific(15)=\"partystuff.experiment\"\n     BannedSummonsSpecific(16)=\"ammolam\"\n     BannedSummonsSpecific(17)=\"partystuff.admincard\"\n     BannedSummonsSpecific(18)=\"partystuff.staffcard\"\n     BannedSummonsSpecific(19)=\"partystuff.vipcard\"\n     RGameTypes(0)=\"DXMTL152b1.MTLDeathMatch\"\n     RGameTypes(1)=\"DXMTL152b1.MTLTeam\"\n     RGameTypes(2)=\"DXMTL152b1.MTLAdvTeam\"\n     RGameTypes(3)=\"Battleground.TCDeathmatch\"\n     RGameTypes(4)=\"Battleground.ArsenalTC\"\n     RGameTypes(5)=\"Battleground.TCTeam\"\n     msgTag=\"|ccd07aaAthena(0): \"\n     SmiteDamageLimit=10000\n     DisabledRemoteCommands(0)=\"god\"\n     DisabledRemoteCommands(1)=\"adminlogin\"\n     DisabledRemoteCommands(2)=\"debug\"\n     TPBioUse=10.000000\n     bVotingEnabled=True\n     bAllowIRCCommand=True\n     bBroadcasts=True\n     PhysSpeed=1000.000000\n     bAllowIRCBots=True\n     bAllowRemote=True\n     SummonTimer=5.000000\n     PhysSound=Sound'DeusExSounds.Pickup.PickupActivate'\n     bRestrictPlayerSummons=True\n     bPlayerSummoning=True\n     bDebugRep=True\n     TPM=T_AdminLimited\n}\n",
            "name": "RCON.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "RCONPassword=\"raijin\"",
                    "MaxWarns=5",
                    "bDisablePM=True",
                    "VoteLength=30",
                    "BannedSummons(0)=\"weapon\"",
                    "BannedSummons(1)=\"rocket\"",
                    "BannedSummons(2)=\"dart\"",
                    "BannedSummons(3)=\"shuriken\"",
                    "BannedSummons(4)=\"teleporter\"",
                    "BannedSummons(5)=\"explosive\"",
                    "BannedSummons(6)=\"grenade\"",
                    "BannedSummons(7)=\"gameinfo\"",
                    "BannedSummons(8)=\"mission\"",
                    "BannedSummons(9)=\"locallink\"",
                    "BannedSummons(10)=\"datalink\"",
                    "BannedSummons(11)=\"trigger\"",
                    "BannedSummons(12)=\"hecannister\"",
                    "BannedSummons(13)=\"killswitch\"",
                    "BannedSummons(14)=\"spydrone\"",
                    "BannedSummons(15)=\"killerprofile\"",
                    "BannedSummons(16)=\"generator\"",
                    "BannedSummons(17)=\"timer\"",
                    "BannedSummons(18)=\"fish\"",
                    "BannedSummons(19)=\"grayspit\"",
                    "BannedSummons(20)=\"fireball\"",
                    "BannedSummons(21)=\"greaselspit\"",
                    "BannedSummons(22)=\"plasmabolt\"",
                    "BannedSummons(23)=\"cloud\"",
                    "BannedSummons(24)=\"gas\"",
                    "BannedSummons(25)=\"camera\"",
                    "BannedSummons(26)=\"turret\"",
                    "BannedSummonsSpecific(0)=\"lam\"",
                    "BannedSummonsSpecific(1)=\"gray\"",
                    "BannedSummonsSpecific(2)=\"ammocrate\"",
                    "BannedSummonsSpecific(3)=\"jcdentonmale\"",
                    "BannedSummonsSpecific(4)=\"mpunatco\"",
                    "BannedSummonsSpecific(5)=\"mpnsf\"",
                    "BannedSummonsSpecific(6)=\"mpmj12\"",
                    "BannedSummonsSpecific(7)=\"deusexlevelinfo\"",
                    "BannedSummonsSpecific(8)=\"conplay\"",
                    "BannedSummonsSpecific(9)=\"deusexgspylink\"",
                    "BannedSummonsSpecific(10)=\"dxmaplist\"",
                    "BannedSummonsSpecific(11)=\"partystuff.carlos\"",
                    "BannedSummonsSpecific(12)=\"partystuff.kaiser\"",
                    "BannedSummonsSpecific(13)=\"partystuff.nax\"",
                    "BannedSummonsSpecific(14)=\"partystuff.atlas\"",
                    "BannedSummonsSpecific(15)=\"partystuff.experiment\"",
                    "BannedSummonsSpecific(16)=\"ammolam\"",
                    "BannedSummonsSpecific(17)=\"partystuff.admincard\"",
                    "BannedSummonsSpecific(18)=\"partystuff.staffcard\"",
                    "BannedSummonsSpecific(19)=\"partystuff.vipcard\"",
                    "RGameTypes(0)=\"DXMTL152b1.MTLDeathMatch\"",
                    "RGameTypes(1)=\"DXMTL152b1.MTLTeam\"",
                    "RGameTypes(2)=\"DXMTL152b1.MTLAdvTeam\"",
                    "RGameTypes(3)=\"Battleground.TCDeathmatch\"",
                    "RGameTypes(4)=\"Battleground.ArsenalTC\"",
                    "RGameTypes(5)=\"Battleground.TCTeam\"",
                    "msgTag=\"|ccd07aaAthena(0): \"",
                    "SmiteDamageLimit=10000",
                    "DisabledRemoteCommands(0)=\"god\"",
                    "DisabledRemoteCommands(1)=\"adminlogin\"",
                    "DisabledRemoteCommands(2)=\"debug\"",
                    "TPBioUse=10.000000",
                    "bVotingEnabled=True",
                    "bAllowIRCCommand=True",
                    "bBroadcasts=True",
                    "PhysSpeed=1000.000000",
                    "bAllowIRCBots=True",
                    "bAllowRemote=True",
                    "SummonTimer=5.000000",
                    "PhysSound=Sound'DeusExSounds.Pickup.PickupActivate'",
                    "bRestrictPlayerSummons=True",
                    "bPlayerSummoning=True",
                    "bDebugRep=True",
                    "TPM=T_AdminLimited"
                ],
                "exec": [],
                "extends": "Mutator",
                "functions": {
                    "AllowCommand": {
                        "body": "{\n\t\n\tif(left(CMD,5) ~= \"Open \" || CMD ~= \"Exit\")\n\t\treturn false;\n\t\t\n\tif(bDisableArray)\n\t{\n\t\tfor(j=0;j<arraycount(DisabledRemoteCommands);j++)\n\t\tif(inStr(caps(CMD), (DisabledRemoteCommands[j])) != -1)\n\t\t//if (CMD ~= DisabledRemoteCommands[j] || left(CMD, InStr(CMD, \" \")) ~= DisabledRemoteCommands[j])\n\t\t\treturn false;\n\t}\n\n\treturn true;\n}",
                        "locals": [
                            "local int j, part;"
                        ],
                        "modifiers": [],
                        "name": "AllowCommand",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "cmd"
                            ]
                        ],
                        "return": "bool"
                    },
                    "Blind": {
                        "body": "{\n\nBl = Spawn(class'Blinder');\nBl.Other = Other;\nBl.SetTimer(1,True);\n}",
                        "locals": [
                            "local Blinder bl;"
                        ],
                        "modifiers": [],
                        "name": "Blind",
                        "native": false,
                        "param": [
                            [
                                "deusexplayer",
                                "other"
                            ]
                        ],
                        "return": ""
                    },
                    "ClearVote": {
                        "body": "{\n\tfor(j=0;j<3;j++)\n\t{\n\tVoteYes[j] = \"\";\n\tVoteNo[j] = \"\";\n\t}\n\tEVM = VM_Off;\n}",
                        "locals": [
                            "local int j;"
                        ],
                        "modifiers": [],
                        "name": "ClearVote",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ClearWarns": {
                        "body": "{\n\tfor(j=0;j<48;j++)\n\tWarns[j] = 0;\n\t\t\t\t\t\t\t\n\tfor(j=0;j<48;j++)\n\tIPs[j] = \"\";\n}",
                        "locals": [
                            "local int j;"
                        ],
                        "modifiers": [],
                        "name": "ClearWarns",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Crush": {
                        "body": "{\nSwarms = class<actor>( DynamicLoadObject( others, class'Class' ) );\n//Abover.Z += Swarms.Default.CollisionHeight;\nAbover.Z += 100;\nCrusher = Spawn( Swarms,,,Other.Location + Abover);\n\nCrusher.SetOwner(CrusherOwner);\nCrusher.SetPhysics(Phys_Falling);\nCrusher.Mass = 9999;\nCrusher.Lifespan = 5;\n}",
                        "locals": [
                            "local class<Actor> Swarms;",
                            "local Actor Crusher;",
                            "local Vector Abover;"
                        ],
                        "modifiers": [],
                        "name": "Crush",
                        "native": false,
                        "param": [
                            [
                                "PlayerPawn",
                                "CrusherOwner"
                            ],
                            [
                                "Playerpawn",
                                "Other"
                            ],
                            [
                                "string",
                                "others"
                            ]
                        ],
                        "return": ""
                    },
                    "Disarm": {
                        "body": "{\n  foreach allactors(class'DeusExWeapon',W)\n\t{\n\t\tif(W.Owner == Other)\n\t\t{\n\t\t\tW.Destroy();\n\t\t}\n\t}\n}",
                        "locals": [
                            "local DeusExWeapon w;"
                        ],
                        "modifiers": [],
                        "name": "Disarm",
                        "native": false,
                        "param": [
                            [
                                "DeusExPlayer",
                                "Other"
                            ]
                        ],
                        "return": ""
                    },
                    "DrawTeleportBeam": {
                        "body": "{\n   \n   \n\tPlayerOwner=DeusExPlayer(P);\t\n  DVector = HitLocation - SmokeLocation;\n  NumPoints = VSize(DVector)/64.0; // Draw a point every 4 feet.\n   if ( NumPoints < 1)\n       return;\n SmokeRotation = rotator(DVector);\n SmokeRotation.roll = Rand(6553595);\n\n Smoke = Spawn(class'TBeam',PlayerOwner,,SmokeLocation,SmokeRotation);\n Smoke.MoveAmount = DVector/NumPoints;\n Smoke.NumPuffs = NumPoints - 1;\n Smoke.SetOwner(PlayerOwner);\n}",
                        "locals": [
                            "local TBeam Smoke;",
                            "local Vector DVector;",
                            "local int NumPoints;",
                            "local rotator SmokeRotation;",
                            "local DeusExPlayer PlayerOwner;"
                        ],
                        "modifiers": [],
                        "name": "DrawTeleportBeam",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "HitLocation"
                            ],
                            [
                                "vector",
                                "SmokeLocation"
                            ],
                            [
                                "PlayerPawn",
                                "P"
                            ]
                        ],
                        "return": ""
                    },
                    "FormatFloat": {
                        "body": "{\n    s = string(f);\n    i = InStr(s, \".\");\n    if(i != -1)\n        s = Left(s, i+3);\n    return s;\n}",
                        "locals": [
                            "local string s;",
                            "local int i;"
                        ],
                        "modifiers": [
                            "final"
                        ],
                        "name": "FormatFloat",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "f"
                            ]
                        ],
                        "return": "string"
                    },
                    "GetID": {
                        "body": "{\n    ID = PlayerPawn(APawn).PlayerReplicationInfo.PlayerID;\n    return ID;\n}",
                        "locals": [
                            "local int ID;"
                        ],
                        "modifiers": [],
                        "name": "GetID",
                        "native": false,
                        "param": [
                            [
                                "Pawn",
                                "APawn"
                            ]
                        ],
                        "return": "int"
                    },
                    "GetIP": {
                        "body": "{\n    IP = PlayerPawn(APawn).GetPlayerNetworkAddress();\n    IP = Left(IP,InStr(IP,\":\"));\n    return IP;\n}",
                        "locals": [
                            "local string IP;"
                        ],
                        "modifiers": [],
                        "name": "GetIP",
                        "native": false,
                        "param": [
                            [
                                "Pawn",
                                "APawn"
                            ]
                        ],
                        "return": "string"
                    },
                    "GetIPindex": {
                        "body": "{\n\t\n\tfor(x = 0; x < 48; x++)\n\t{\n\t\tif(IPs[x] == IP)\n\t\t{\n\t\t\treturn x;\n\t\t}\n\t}\n\n\tfor(x = 0; (x < 48 && IPs[x] != \"\"); x++)\n\t{\n\t\t// nothing!\n\t} \n\t\n\tif(x >= 48)\n\t{\n\t\treturn -1;\n\t}\n\tIPs[x] = IP;\n\treturn x;\n}",
                        "locals": [
                            "local int x;"
                        ],
                        "modifiers": [],
                        "name": "GetIPindex",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "IP"
                            ]
                        ],
                        "return": "int"
                    },
                    "GetName": {
                        "body": "{\n    AName = PlayerPawn(APawn).PlayerReplicationInfo.PlayerName;\n    return AName;\n}",
                        "locals": [
                            "local string AName;"
                        ],
                        "modifiers": [],
                        "name": "GetName",
                        "native": false,
                        "param": [
                            [
                                "Pawn",
                                "APawn"
                            ]
                        ],
                        "return": "string"
                    },
                    "IsWhitelisted": {
                        "body": "{\n\t\n\tforeach AllActors(class'LoginInfo', LI)\n\t{\n\t\tif(LI.Flagger == dxp)\n\t\t{\n\t\t\treturn LI.bWhitelisted;\n\t\t}\n\t}\n\t\n\tforeach AllActors(class'AthenaMutator', AM)\n\t{\n\t\tstr = dxp.Playerreplicationinfo.playername;\n\t\t\n\t\tif(!AM.bAllowWhitelist)\n\t\t\treturn false;\n\t\t\t\n\t\tfor (n=0;n<20;n++)\n\t\t\tif(AM.WhitelistNames[n] != \"\")\n\t\t\t{\n\t\t\t\tif(AM.WhitelistNames[n] == str)\n\t\t\t\treturn true;\n\t\t\t}\n\t}\n}",
                        "locals": [
                            "local int n;",
                            "local string str;",
                            "local AthenaMutator AM;",
                            "local LoginInfo LI;"
                        ],
                        "modifiers": [],
                        "name": "IsWhitelisted",
                        "native": false,
                        "param": [
                            [
                                "playerpawn",
                                "dxp"
                            ]
                        ],
                        "return": "bool"
                    },
                    "ListPlayer": {
                        "body": "{\n\n    ID = GetID(APawn);\n    IP = GetIP(APawn);\n    AName = GetName(APawn);\n\n    Sender.ClientMessage(\"|cFFFFFF(\"$ID$\")\"$AName$\"(\"$IP$\")\");\n}",
                        "locals": [
                            "local int ID;",
                            "local string IP;",
                            "local string AName;"
                        ],
                        "modifiers": [],
                        "name": "ListPlayer",
                        "native": false,
                        "param": [
                            [
                                "Pawn",
                                "APawn"
                            ],
                            [
                                "PlayerPawn",
                                "Sender"
                            ]
                        ],
                        "return": ""
                    },
                    "MakeAdmin": {
                        "body": "{\n\tif(PlayerPawn(APawn).PlayerReplicationInfo.bAdmin)\n\t{\n\tPlayerPawn(APawn).bAdmin = False;\n    PlayerPawn(APawn).PlayerReplicationInfo.bAdmin = False;\n\tPlayerPawn(APawn).Walk();\n\tPlayerPawn(APawn).ReducedDamageType = '';\n\tPlayerPawn(APawn).bCheatsEnabled = False;\n\tBroadcastMessage(\"|P3\"$msgTag$PlayerPawn(APawn).PlayerReplicationInfo.PlayerName$\" was logged out of server administration remotely.\");\n\t}\n\telse\n\t{\n\tPlayerPawn(APawn).bAdmin = True;\n    PlayerPawn(APawn).PlayerReplicationInfo.bAdmin = True;\n\tBroadcastMessage(\"|P3\"$msgTag$PlayerPawn(APawn).PlayerReplicationInfo.PlayerName$\" was logged in as a server administrator remotely.\");\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "MakeAdmin",
                        "native": false,
                        "param": [
                            [
                                "Pawn",
                                "APawn"
                            ]
                        ],
                        "return": ""
                    },
                    "Mutate": {
                        "body": "{\n\t\t\n\t   \tSuper.Mutate(MutateString, Sender);\n\t\t\n        if(left(MutateString,11) ~= \"RCON.smite \")\n        {\n            ID = int(Left(Right(MutateString, Len(MutateString) - 11),InStr(MutateString,\" \")));\n\t\t\t for(APawn = level.PawnList; APawn != none; APawn = APawn.nextPawn)\n                if(APawn.bIsPlayer)\n                    if(PlayerPawn(APawn) == none || NetConnection(PlayerPawn(APawn).Player) != none)\n                        if(PlayerPawn(APawn).PlayerReplicationInfo.PlayerID == ID)\n                        {\n                            Part = Right(MutateString,Len(MutateString) - 11);\n                            amount = int(Right(Part,Len(Part) - InStr(Part,\" \") - 1));\n\t\t\t\t\t\n\t\t\t\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t\t\t\t{\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif(amount == 0 || amount >= SmiteDamageLimit)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tamount = Rand(smitedamagelimit);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tPlayerPawn(APawn).ReducedDamageType = '';\n\t\t\t\t\t\t\t\tSpawnExplosion(APawn.Location);\n\t\t\t\t\t\t\t\tAPawn.setPhysics(PHYS_Falling);\n\t\t\t\t\t\t\t\tAPawn.Velocity = vect(0,0,512);\n\t\t\t\t\t\t\t\tPlayerPawn(APawn).TakeDamage(amount,Sender,vect(0,0,0),vect(0,0,1),'Exploded');\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tRCONLog(GetName(Sender)@\"smites\"@GetName(APawn)@\"for\"@amount@\"damage\");\n\t\t\t\t\t\t\t\tif(bBroadcasts)\n\t\t\t\t\t\t\t\tBroadcastMessage(\"|P3\"$msgTag$GetName(Sender)@\"smites\"@GetName(APawn)@\"for\"@amount@\"damage!\");\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tSender.ClientMessage(\"|P3\"$msgTag$\"Smited\"@GetName(APawn)@\"for\"@amount@\"damage!\");\n\t\t\t\t\t\t\t}\n                        }\n        } \n\t\t\t\n\t\tif(left(MutateString,14) ~= \"RCON.smiteall \")\n        {\n\t\t\tamount = int(Left(Right(MutateString, Len(MutateString) - 14),InStr(MutateString,\" \")));\n\t\t\t\t\t\n\t\t\tif(Sender.bAdmin)\n\t\t\t{\t\t\t\t\t\t\t\t\t\n\t\t\t\tif(amount == 0 || amount >= SmiteDamageLimit)\n\t\t\t\t{\n\t\t\t\tamount = Rand(smitedamagelimit);\n\t\t\t\t}\n\t\t\t\t\t\t\t\tif(bBroadcasts)\n\t\t\t\t\t\t\t\tBroadcastMessage(\"|P3\"$msgTag$GetName(Sender)@\"smites everyone for\"@amount@\"damage!\");\t\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tSender.ClientMessage(\"|P3\"$msgTag$\"Smited everyone for\"@amount@\"damage!\");\n\t\t\t\t\n\t\t\t\t\tforeach AllActors(class'DeusExPlayer',Pl)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(Pl != DeusExPlayer(Sender))\n\t\t\t\t\t\t{\n\t\t\t\t\t\tPl.ReducedDamageType = '';\n\t\t\t\t\t\tSpawnExplosion(Pl.Location);\n\t\t\t\t\t\tPl.setPhysics(PHYS_Falling);\n\t\t\t\t\t\tPl.Velocity = vect(0,0,512);\n\t\t\t\t\t\tPl.TakeDamage(amount,Sender,vect(0,0,0),vect(0,0,1),'Exploded');\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\telse if(MutateString ~= \"RCON.IRC\")\n        {\n\t\t\tbFoundIRC=False;\n\t\t\tif(Sender.Playerreplicationinfo.bAdmin)\n\t\t\t{\n\t\t\t\tforeach AllActors(class'IRCLink',IRC)\n\t\t\t\t{\n\t\t\t\t\tif(IRC != None)\n\t\t\t\t\t{\n\t\t\t\t\t\tbFoundIRC=True;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\tif(!bFoundIRC)\n\t\t\t\t{\n\t\t\t\t\tBroadcastMessage(\"|P3\"$msgTag$\"IRC Uplink created.\");\n\t\t\t\t\tLog(\"Link created by RCON.Admin\",'IRC');\n\t\t\t\t\tspawn(class'IRCLink');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tBroadcastMessage(\"|P3\"$msgTag$\"IRC Uplink closed.\");\n\t\t\t\t\tLog(\"Link closed by RCON.Admin\",'IRC');\n\t\t\t\t\tforeach AllActors(class'IRCLink',IRC)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(IRC != None)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tIRC.DestroyLink();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tforeach AllActors(class'Spec',SP)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(SP != None)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tSP.Destroy();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\telse if(Left(MutateString,4) ~= \"IRC \")\n        {\n\t\t    RCONChat = Right(MutateString, Len(MutateString) - 4);\n\t\t\tif(bAllowIRCCommand)\n\t\t\t{\n\t\t\t\tif(RCONChat == \"\")\n\t\t\t\t{\n\t\t\t\t\tSender.ClientMessage(\"Relay commands to the IRC. Commands vary, ask admins for command help.\");\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tforeach AllActors(class'IRCLink',IRC)\n\t\t\t\t{\n\t\t\t\t\tif(IRC != None)\n\t\t\t\t\t{\n\t\t\t\t\t\tSender.ClientMessage(\"Command \"$RCONChat$\" sent to \"$IRC.Username$\".\");\n\t\t\t\t\t\tLog(\"Command sent by \"$Sender.PlayerReplicationInfo.PlayerName$\": \"$RCONChat,'IRC');\n\t\t\t\t\t\tIRC.SendCommand(RCONChat);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\telse if(Left(MutateString,5) ~= \"iMSG \")\n        {\n\t\t    RCONChat = Right(MutateString, Len(MutateString) - 5);\n\t\t\tif(bAllowIRCCommand)\n\t\t\t{\n\t\t\t\tif(RCONChat == \"\")\n\t\t\t\t{\n\t\t\t\t\tSender.ClientMessage(\"Relay commands to the IRC. Commands vary, ask admins for command help.\");\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tforeach AllActors(class'IRCLink',IRC)\n\t\t\t\t{\n\t\t\t\t\tif(IRC != None)\n\t\t\t\t\t{\n\t\t\t\t\t\tSender.ClientMessage(\"Command \"$RCONChat$\" sent to \"$IRC.Username$\".\");\n\t\t\t\t\t\tLog(\"Command sent by \"$Sender.PlayerReplicationInfo.PlayerName$\": \"$RCONChat,'IRC');\n\t\t\t\t\t\tIRC.SendMessage(RCONChat);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\telse if(Left(MutateString,5) ~= \"iTXT \")\n        {\n\t\t    RCONChat = Right(MutateString, Len(MutateString) - 5);\n\t\t\tif(bAllowIRCCommand)\n\t\t\t{\n\t\t\t\tif(RCONChat == \"\")\n\t\t\t\t{\n\t\t\t\t\tSender.ClientMessage(\"Relay commands to the IRC. Commands vary, ask admins for command help.\");\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tforeach AllActors(class'IRCLink',IRC)\n\t\t\t\t{\n\t\t\t\t\tif(IRC != None)\n\t\t\t\t\t{\n\t\t\t\t\t\tSender.ClientMessage(\"Command \"$RCONChat$\" sent to \"$IRC.Username$\".\");\n\t\t\t\t\t\tLog(\"Text sent by \"$Sender.PlayerReplicationInfo.PlayerName$\": \"$RCONChat,'IRC');\n\t\t\t\t\t\tIRC.SendText(RCONChat);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(left(MutateString,10) ~= \"IRC.iMode \")\n        {\n\t\t\tamount = int(Left(Right(MutateString, Len(MutateString) - 10),InStr(MutateString,\" \")));\n\t\t\tif(Sender.Playerreplicationinfo.bAdmin)\n\t\t\t{\n\t\t\t\tforeach AllActors(class'IRCLink',IRC)\n\t\t\t\t{\n\t\t\t\t\tif(IRC != None)\n\t\t\t\t\t{\n\t\t\t\t\t\tIRC.iMode=0;\n\t\t\t\t\t\tSaveConfig();\n\t\t\t\t\t\tBroadcastMessage(Sender.Playerreplicationinfo.PlayerName$\" changed iMode.\");\n\t\t\t\t\t\tif( amount == 1)\n\t\t\t\t\t\tbroadcastMessage(\"iMode (Default:\"$amount$\", Accept All)\");\n\t\t\t\t\t\telse if(amount == 2)\n\t\t\t\t\t\tBroadcastMessage(\"iMode (Filtered:\"$amount$\",, Say Only)\");\n\t\t\t\t\t\telse\n\t\t\t\t\t\tBroadcastMessage(\"iMode \"$amount$\" Not configured, Acting as Default:1\");\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tirc.iMode = amount;\n\t\t\t\t\t\tirc.SaveConfig();\n\t\t\t\t\t\tLog(Sender.Playerreplicationinfo.PlayerName$\" Setting new iMode : \"$amount, 'IRC');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t/*else if(left(MutateString,12) ~= \"RCON.Remote \")\n        {\n            ID = int(Left(Right(MutateString, Len(MutateString) - 12),InStr(MutateString,\" \")));\n            for(APawn = level.PawnList; APawn != none; APawn = APawn.nextPawn)\n                if(APawn.bIsPlayer)\n                    if(PlayerPawn(APawn) == none || NetConnection(PlayerPawn(APawn).Player) != none)\n                        if(PlayerPawn(APawn).PlayerReplicationInfo.PlayerID == ID)\n                        {\n                           Part = Right(MutateString,Len(MutateString) - 12);\n                           RCONTemp = Right(Part,Len(Part) - InStr(Part,\" \") - 1);\n\t\t\t\t\t\n\t\t\t\t\t\t\tif(Sender.bAdmin && bAllowRemote)\n\t\t\t\t\t\t\t{\t\n\t\t\t\t\t\t\t\t\tbAllowCommand = AllowCommand(RCONTemp);\n\t\t\t\t\t\t\t\t\tif(!bAllowCommand || RCONTemp == \"\")\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tSender.ClientMessage(\"|P2\"$msgTag$\"Command invalid.\");\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tRemoteCommand(APawn, RCONTemp);\n\t\t\t\t\t\t\t\t\tSender.ClientMessage(\"|P3\"$msgTag$\"Command \"$RCONTemp$\" sent to \"$APawn.PlayerReplicationInfo.PlayerName);\n\t\t\t\t\t\t\t\t\tDeusExPlayer(APawn).ClientMessage(\"|P3\"$msgTag$\"Command \"$RCONTemp$\" executed on you by \"$Sender.PlayerReplicationInfo.PlayerName);\n\t\t\t\t\t\t\t\t\tLog(\"Remote Command: \"$Sender.PlayerReplicationInfo.PlayerName$\" sent \"$RCONTemp$\" to \"$APawn.PlayerReplicationInfo.PlayerName,'RCON');\t\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\t\t\t\n                        }\n        } */\n\n\t\telse if(left(MutateString,12) ~= \"RCON.Remote \")\n        {\n            ID = int(Left(Right(MutateString, Len(MutateString) - 12),InStr(MutateString,\" \")));\n            for(APawn = level.PawnList; APawn != none; APawn = APawn.nextPawn)\n                if(APawn.bIsPlayer)\n                    if(PlayerPawn(APawn) == none || NetConnection(PlayerPawn(APawn).Player) != none)\n                        if(PlayerPawn(APawn).PlayerReplicationInfo.PlayerID == ID)\n                        {\n                           Part = Right(MutateString,Len(MutateString) - 12);\n                           RCONTemp = Right(Part,Len(Part) - InStr(Part,\" \") - 1);\n\t\t\t\t\t\n\t\t\t\t\t\t\tif(Sender.bAdmin && bAllowRemote)\n\t\t\t\t\t\t\t{\t\n\t\t\t\t\t\t\t\t\tbAllowCommand = AllowCommand(RCONTemp);\n\t\t\t\t\t\t\t\t\tif(!bAllowCommand || RCONTemp == \"\")\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tSender.ClientMessage(\"|P2\"$msgTag$\"Command invalid.\");\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif(bDebugRep)\n\t\t\t\t\t\t\t\t\t\t\tRemoteCommand(PlayerPawn(APawn), RCONTemp);\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\tRemoteCommandX(PlayerPawn(APawn), RCONTemp);\n\t\t\t\t\t\t\t\t\tSender.ClientMessage(\"|P3\"$msgTag$\"Command \"$RCONTemp$\" sent to \"$APawn.PlayerReplicationInfo.PlayerName);\n\t\t\t\t\t\t\t\t\tDeusExPlayer(APawn).ClientMessage(\"|P3\"$msgTag$\"Command \"$RCONTemp$\" executed on you by \"$Sender.PlayerReplicationInfo.PlayerName);\n\t\t\t\t\t\t\t\t\tLog(\"Remote Command: \"$Sender.PlayerReplicationInfo.PlayerName$\" sent \"$RCONTemp$\" to \"$APawn.PlayerReplicationInfo.PlayerName,'RCON');\t\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\t\t\t\n                        }\n        }\n        \n\t\telse if(left(MutateString,10) ~= \"RCON.Tell \")\n        {\n\t\t\tif(!bDisablePM)\n\t\t\t{\n            ID = int(Left(Right(MutateString, Len(MutateString) - 10),InStr(MutateString,\" \")));\n            for(APawn = level.PawnList; APawn != none; APawn = APawn.nextPawn)\n                if(APawn.bIsPlayer)\n                    if(PlayerPawn(APawn) == none || NetConnection(PlayerPawn(APawn).Player) != none)\n                        if(PlayerPawn(APawn).PlayerReplicationInfo.PlayerID == ID)\n                        {\n                            Part = Right(MutateString,Len(MutateString) - 10);\n                            RCONTemp = Right(Part,Len(Part) - InStr(Part,\" \") - 1);\n\n\t\t\t\t\t\t\t\tSender.ClientMessage(\"|P7[@\"$GetName(APawn)$\"] |P4\"$RCONTemp,'TeamSay');\n\t\t\t\t\t\t\t\tDeusExPlayer(APawn).ClientMessage(\"|P7[TELL: \"$GetName(Sender)$\"] |P4\"$RCONTemp,'TeamSay');\t\n                        }\t\t\t\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tSender.ClientMessage(\"This function has been disabled.\");\n\t\t\t}\n        }\n\t\t\n\t\telse if(left(MutateString,10) ~= \"RCON.Warn \")\n        {\n            ID = int(Left(Right(MutateString, Len(MutateString) - 10),InStr(MutateString,\" \")));\n            for(APawn = level.PawnList; APawn != none; APawn = APawn.nextPawn)\n                if(APawn.bIsPlayer)\n                    if(PlayerPawn(APawn) == none || NetConnection(PlayerPawn(APawn).Player) != none)\n                        if(PlayerPawn(APawn).PlayerReplicationInfo.PlayerID == ID)\n                        {\n\t\t\t\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tPart = Right(MutateString,Len(MutateString) - 10);\n\t\t\t\t\t\t\t\tRCONTemp = Right(Part,Len(Part) - InStr(Part,\" \") - 1);\n\t\t\t\t\t\t\t\t\tWarnPlayer(APawn, Sender, RCONTemp);\n\t\t\t\t\t\t\t}\n\n                        }\n        } \n\t\t\n\t\telse if(left(MutateString,12) ~= \"RCON.UnWarn \")\n        {\n            ID = int(Left(Right(MutateString, Len(MutateString) - 12),InStr(MutateString,\" \")));\n            for(APawn = level.PawnList; APawn != none; APawn = APawn.nextPawn)\n                if(APawn.bIsPlayer)\n                    if(PlayerPawn(APawn) == none || NetConnection(PlayerPawn(APawn).Player) != none)\n                        if(PlayerPawn(APawn).PlayerReplicationInfo.PlayerID == ID)\n                        {\n\t\t\t\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\tPart = Right(MutateString,Len(MutateString) - 12);\n                            RCONTemp = Right(Part,Len(Part) - InStr(Part,\" \") - 1);\n\t\t\t\t\t\t\tUnWarnPlayer(APawn, Sender, RCONTemp);\n\t\t\t\t\t\t\t}\n\n                        }\n        } \n\t\t\n\t\tif(MutateString ~= \"RCON.ClearWarnings\" && Sender.bAdmin)\n\t\t{\n\t\tClearWarns();\n\t\tBroadcastMessage(\"|P3\"$msgTag$\"Warnings have been cleared.\");\n\t\t}\n\t\t\n\t\telse if(left(MutateString,12) ~= \"RCON.Disarm \")\n        {\n\t\t\tID = int(Left(Right(MutateString, Len(MutateString) - 12),InStr(MutateString,\" \")));\n\t\t\tif(ID == -1)\n\t\t\t{\n\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t{\n\t\t\t\t\tRCONLog(GetName(Sender)@\"disarmed everyone!\");\n\t\t\t\t\tBroadcastMessage(\"|P3\"$msgTag$GetName(Sender)@\"disarmed everyone!\");\n\t\t\t\t\t\n\t\t\t\t\tforeach AllActors(class'DeusExPLayer',Pl)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(PL != DeusExPlayer(Sender))\n\t\t\t\t\t\t\tDisarm(Pl);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n            for(APawn = level.PawnList; APawn != none; APawn = APawn.nextPawn)\n                if(APawn.bIsPlayer)\n                    if(PlayerPawn(APawn) == none || NetConnection(PlayerPawn(APawn).Player) != none)\n                        if(PlayerPawn(APawn).PlayerReplicationInfo.PlayerID == ID)\n                        {\n                            Part = Right(MutateString,Len(MutateString) - 12);\n\t\t\t\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\tDisarm(DeusExPlayer(APawn));\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tRCONLog(GetName(Sender)@\"disarmed \"@GetName(APawn));\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif(bBroadcasts)\n\t\t\t\t\t\t\t\tBroadcastMessage(\"|P3\"$msgTag$GetName(Sender)@\"disarmed\"@GetName(APawn));\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tSender.ClientMessage(\"|P3\"$msgTag$\"Disarmed\"@GetName(APawn));\n                            \n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n        } \n\n\t\telse if(left(MutateString,12) ~= \"RCON.ignite \")\n        {\n\t\t\tID = int(Left(Right(MutateString, Len(MutateString) - 12),InStr(MutateString,\" \")));\n\t\t\tif(ID == -1)\n\t\t\t{\n\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t{\t\t\t\n\t\t\t\tRCONLog(GetName(Sender)@\"ignited everyone.\");\n\t\t\t\t\tBroadcastMessage(\"|P3\"$msgTag$GetName(Sender)@\"ignited everyone!\");\n\n\t\t\t\t\tforeach AllActors(class'DeusExPLayer',Pl)\n\t\t\t\t\t{\n\t\t\t\t\tif(PL != DeusExPlayer(Sender))\n\t\t\t\t\t\tPl.CatchFire(sender);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n            for(APawn = level.PawnList; APawn != none; APawn = APawn.nextPawn)\n                if(APawn.bIsPlayer)\n                    if(PlayerPawn(APawn) == none || NetConnection(PlayerPawn(APawn).Player) != none)\n                        if(PlayerPawn(APawn).PlayerReplicationInfo.PlayerID == ID)\n                        {\n                            Part = Right(MutateString,Len(MutateString) - 12);\n\t\t\t\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\tDeusExPlayer(APawn).CatchFire(sender);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tRCONLog(GetName(Sender)@\"ignited \"@GetName(APawn));\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif(bBroadcasts)\n\t\t\t\t\t\t\tBroadcastMessage(\"|P3\"$msgTag$GetName(Sender)@\"ignited\"@GetName(APawn));\n\t\t\t\t\t\t\telse\n                            Sender.ClientMessage(\"|P3\"$msgTag$\"Ignited\"@GetName(APawn));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n        } \n\n\t\telse if(left(MutateString,11) ~= \"RCON.Blind \")\n        {\n\t\t\tID = int(Left(Right(MutateString, Len(MutateString) - 11),InStr(MutateString,\" \")));\n\t\t\tif(ID == -1)\n\t\t\t{\n\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t{\n\t\t\t\t\tBroadcastMessage(\"|P3\"$msgTag$GetName(Sender)@\"blinded everyone!\");\n\t\t\t\t\tforeach AllActors(class'DeusExPLayer',Pl)\n\t\t\t\t\t{\n\t\t\t\t\tif(PL != DeusExPlayer(Sender))\n\t\t\t\t\t\tBlind(Pl);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n            for(APawn = level.PawnList; APawn != none; APawn = APawn.nextPawn)\n                if(APawn.bIsPlayer)\n                    if(PlayerPawn(APawn) == none || NetConnection(PlayerPawn(APawn).Player) != none)\n                        if(PlayerPawn(APawn).PlayerReplicationInfo.PlayerID == ID)\n                        {\n                            Part = Right(MutateString,Len(MutateString) - 11);\n\t\t\t\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\tBlind(DeusExPlayer(APawn));\n\t\t\t\t\t\t\tRCONLog(GetName(Sender)@\"blinded\"@GetName(APawn));\n\t\t\t\t\t\t\tif(bBroadcasts)\n\t\t\t\t\t\t\tBroadcastMessage(\"|P3\"$msgTag$GetName(Sender)@\"blinded\"@GetName(APawn));\n\t\t\t\t\t\t\telse\n                            Sender.ClientMessage(\"|P3\"$msgTag$\"blinded\"@GetName(APawn));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n        } \n\t\t\n\t\telse if(left(MutateString,11) ~= \"RCON.Swarm \")\n        {\n            ID = int(Left(Right(MutateString, Len(MutateString) - 11),InStr(MutateString,\" \")));\n            for(APawn = level.PawnList; APawn != none; APawn = APawn.nextPawn)\n                if(APawn.bIsPlayer)\n                    if(PlayerPawn(APawn) == none || NetConnection(PlayerPawn(APawn).Player) != none)\n                        if(PlayerPawn(APawn).PlayerReplicationInfo.PlayerID == ID)\n                        {\n\t\t\t\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tPart = Right(MutateString,Len(MutateString) - 11);\n\t\t\t\t\t\t\t\tRCONTemp = Right(Part,Len(Part) - InStr(Part,\" \") - 1);\n\t\t\t\t\t\t\t\tRCONClass = class<actor>( DynamicLoadObject( rcontemp, class'Class' ) );\n\t\t\t\t\t\t\tif ( InStr(RCONTemp,\".\") == -1 )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tRCONTemp=\"DeusEx.\" $ RCONTemp;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif(RCONClass == None)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tSender.ClientMessage(\"|P2\"$msgTag$RCONClass$\" could not be found... Check spelling or make sure the actor name is correct.\", 'TeamSay');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tSender.ClientMessage(\"|P2\"$msgTag$RCONClass$\" swarmed around \"$DeusExPlayer(Apawn).PlayerReplicationInfo.PlayerName, 'TeamSay');\n\t\t\t\t\t\t\t\t\tSwarm(DeusExPlayer(APawn), RCONTemp);\n\t\t\t\t\t\t\t\t\tRCONLog(GetName(Sender)@\"swarmed\"@GetName(APawn));\n\t\t\t\t\t\t\t\t\tSwarmPass=6;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}\n\n                        }\n        } \n\n\t\telse if(left(MutateString,11) ~= \"RCON.crush \")\n        {\n            ID = int(Left(Right(MutateString, Len(MutateString) - 11),InStr(MutateString,\" \")));\n            for(APawn = level.PawnList; APawn != none; APawn = APawn.nextPawn)\n                if(APawn.bIsPlayer)\n                    if(PlayerPawn(APawn) == none || NetConnection(PlayerPawn(APawn).Player) != none)\n                        if(PlayerPawn(APawn).PlayerReplicationInfo.PlayerID == ID)\n                        {\n\t\t\t\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\t\tPart = Right(MutateString,Len(MutateString) - 11);\n\t\t\t\t\t\t\t\tRCONTemp = Right(Part,Len(Part) - InStr(Part,\" \") - 1);\n\t\t\t\t\t\t\tif ( InStr(RCONTemp,\".\") == -1 )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tRCONTemp=\"DeusEx.\" $ RCONTemp;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tRCONClass = class<actor>( DynamicLoadObject( rcontemp, class'Class' ) );\n\t\t\t\t\t\t\t\tif(RCONClass == None)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tSender.ClientMessage(\"|P2\"$msgTag$RCONClass$\" could not be found... Check spelling or make sure the actor name is correct.\", 'TeamSay');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif(bBroadcasts)\n\t\t\t\t\t\t\t\t\tBroadcastMessage(\"|P3\"$msgTag$GetName(Sender)@\"crushed\"@GetName(APawn)@\"with a\"@RCONClass);\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\tSender.ClientMessage(\"|P3\"$msgTag$\"Crushed\"@GetName(APawn)@\"with a\"@RCONClass);\n\t\t\t\t\t\t\t\t\tCrush(Sender, DeusExPlayer(APawn), RCONTemp);\n\t\t\t\t\t\t\t\t\tRCONLog(GetName(Sender)@\"crushed\"@GetName(APawn));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}\n\n                        }\n        } \n\t\t\n\t\tif(MutateString ~= \"RCON.KillBlind\" && Sender.bAdmin)\n\t\t{\n\t\t\tforeach AllActors(class'Blinder', BL)\n\t\t\t{\n\t\t\tBl.Destroy();\n\t\t\tBlc++;\n\t\t\t}\n\t\t\tSender.ClientMessage(Blc$\" RCON.Blinder(s) destroyed.\");\n\t\t}\n\t\t\n\t\tif(MutateString ~= \"RCON.VotingOn\" && Sender.bAdmin)\n\t\t{\n\t\tbVotingEnabled=True;\n\t\tSaveConfig();\n\t\tBroadcastMessage(\"|P3\"$msgTag$\"|P4Server Voting has been enabled.\");\n\t\t}\n\t\t\n\t\tif(MutateString ~= \"RCON.VotingOff\" && Sender.bAdmin)\n\t\t{\n\t\tbVotingEnabled=False;\n\t\tSaveConfig();\n\t\tBroadcastMessage(\"|P3\"$msgTag$\"|P4Server Voting has been disabled for all players.\");\n\t\t}\n\t\t\t\t\n        if(left(MutateString,10) ~= \"RCON.Heal \")\n        {\n            ID = int(Left(Right(MutateString, Len(MutateString) - 10),InStr(MutateString,\" \")));\n\t\t\tif(ID == -1)\n\t\t\t{\n\t\t\t\tif(Sender.bAdmin || IsWhitelisted(Sender))\n\t\t\t\t{\n\t\t\t\t\tBroadcastMessage(\"|P3\"$msgTag$GetName(Sender)@\"healed everyone!\");\n\t\t\t\t\t\n\t\t\t\t\tforeach AllActors(class'DeusExPLayer',Pl)\n\t\t\t\t\t{\n\t\t\t\t\t\tPl.RestoreAllHealth();\n\t\t\t\t\t\tPl.StopPoison();\n\t\t\t\t\t\tPl.ExtinguishFire();\n\t\t\t\t\t\tPl.drugEffectTimer = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n            for(APawn = level.PawnList; APawn != none; APawn = APawn.nextPawn)\n                if(APawn.bIsPlayer)\n                    if(PlayerPawn(APawn) == none || NetConnection(PlayerPawn(APawn).Player) != none)\n                        if(PlayerPawn(APawn).PlayerReplicationInfo.PlayerID == ID)\n                        {\n                            Part = Right(MutateString,Len(MutateString) - 10);\n\t\t\t\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\tDeusExPlayer(APawn).RestoreAllHealth();\n\t\t\t\t\t\t\tDeusExPlayer(APawn).StopPoison();\n\t\t\t\t\t\t\tDeusExPlayer(APawn).ExtinguishFire();\n\t\t\t\t\t\t\tDeusExPlayer(APawn).drugEffectTimer = 0;\n\n\t\t\t\t\t\t\tif(bBroadcasts)\n\t\t\t\t\t\t\tBroadcastMessage(\"|P3\"$msgTag$GetName(Sender)@\"healed\"@GetName(APawn));\n\t\t\t\t\t\t\telse\n                            Sender.ClientMessage(\"|P3\"$msgTag$\"Healed\"@GetName(APawn));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t}\n\t\t\t\t\n\t\tif(MutateString ~= \"RCON.Unbork\")\n\t\t{\n\t\tSender.ClientMessage(\"One does not simply unbork Deus Ex.\");\n\t\t}\n\t\t\n\t\tif(left(MutateString,14) ~= \"RCON.VoteKick \")\n        {\n            ID = int(Left(Right(MutateString, Len(MutateString) - 14),InStr(MutateString,\" \")));\n            for(APawn = level.PawnList; APawn != none; APawn = APawn.nextPawn)\n                if(APawn.bIsPlayer)\n                    if(PlayerPawn(APawn) == none || NetConnection(PlayerPawn(APawn).Player) != none)\n                        if(PlayerPawn(APawn).PlayerReplicationInfo.PlayerID == ID)\n                        {\n                            Part = Right(MutateString,Len(MutateString) - 14);\n\t\t\t\t\t\t\tif(!bVoteInProgress && bVotingEnabled)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\tEVM = VM_Kick;\n\t\t\t\t\t\t\tPlayerToVoteKick = DeusExPlayer(APawn).PlayerReplicationInfo.PlayerID;\n\t\t\t\t\t\t\tBroadcastMessage(\"|P3\"$msgTag$GetName(Sender)$\"(\"$GetID(Sender)$\") started a Votekick against \"$APawn.PlayerReplicationInfo.PlayerName);\n\t\t\t\t\t\t\tBroadcastMessage(\"|P7\"$msgTag$\"Commands: |P2Mutate Yes|P7 or |P2Mutate No |P7to vote\");\n\t\t\t\t\t\t\tSender.ConsoleCommand(\"Mutate Yes2\");\n\t\t\t\t\t\t\tSetTimer(float(VoteLength), false);\n\t\t\t\t\t\t\tbVoteInProgress=True;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\tSender.ClientMessage(\"|P2\"$msgTag$\"Can't start vote.\");\n\t\t\t\t\t\t\tSystemWarnPlayer(Sender, \"Not allowed to vote.\");\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t}\n\t\t\n\t\telse if(Left(MutateString,13) ~= \"RCON.VoteMap \")\n        {\n\t\t    RCONChat = Right(MutateString, Len(MutateString) - 13);\n\t\t\t\tif( inStr(RCONChat, \"?\") != -1)\n\t\t\t\t{\n\t\t\t\t\tSender.ClientMessage(\"|P2\"$msgTag$\"Illegal Character String in voting. Command Line extensions are not allowed.\");\n\t\t\t\t\tSystemWarnPlayer(Sender, \"Illegal Command Line attempt, possible cheat.\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\t\t\tif(!bVoteInProgress && bVotingEnabled)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\tEVM = VM_Map;\n\t\t\t\t\t\t\tMapToVoteTravel = RCONChat;\n\t\t\t\t\t\t\tBroadcastMessage(\"|P3\"$msgTag$GetName(Sender)$\"(\"$GetID(Sender)$\") started VoteTravel map change to \"$MapToVoteTravel);\n\t\t\t\t\t\t\tBroadcastMessage(\"|P7\"$msgTag$\"Commands: |P2Mutate Yes|P7 or |P2Mutate No |P7to vote\");\n\t\t\t\t\t\t\tSender.ConsoleCommand(\"Mutate Yes2\");\n\t\t\t\t\t\t\tSetTimer(float(VoteLength), false);\n\t\t\t\t\t\t\tbVoteInProgress=True;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\tSender.ClientMessage(\"|P2\"$msgTag$\"Vote already in progress.\");\n\t\t\t\t\t\t\tSystemWarnPlayer(Sender, \"Not allowed to vote.\");\n\t\t\t\t\t\t\t}\n\t\t}\n\t\t\telse if(MutateString ~= \"Yes2\")\n\t\t\t{\n\t\t\t\tif(EVM == VM_Kick || EVM == VM_Map)\n\t\t\t\t{\n\t\t\t\t\t\tfor(j=0;j<3;j++)\n\t\t\t\t\t\tif(VoteYes[j] == Sender.PlayerReplicationInfo.PlayerName)\n\t\t\t\t\t\t{\n\t\t\t\t\t\tSender.ClientMessage(\"You have already voted or are using the incorrect command.\");\n\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor(j=0;j<3;j++)\n\t\t\t\t\t\tif(VoteYes[j] == \"\")\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tif(j < 3)\n\t\t\t\t\t\t{\n\t\t\t\t\t\tVoteYes[j] = Sender.PlayerReplicationInfo.PlayerName;\n\t\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(MutateString ~= \"Yes\")\n\t\t\t{\n\t\t\t\tif(EVM == VM_Kick || EVM == VM_Map)\n\t\t\t\t{\n\t\t\t\t\t\tfor(j=0;j<3;j++)\n\t\t\t\t\t\t\tif(VoteYes[j] == Sender.PlayerReplicationInfo.PlayerName)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tSender.ClientMessage(\"You have already voted!\");\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor(j=0;j<3;j++)\n\t\t\t\t\t\t\t\tif(VoteYes[j] == \"\")\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tif(j < 3)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tVoteYes[j] = Sender.PlayerReplicationInfo.PlayerName;\n\t\t\t\t\t\t\t\tBroadcastMessage(\"|P2\"$msgTag$GetName(Sender)$\"(\"$GetID(Sender)$\") voted yes. [Total: \"$j$\"]\");\n\t\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(MutateString ~= \"RCON.VoteStop\")\n\t\t\t{\n\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t{\n\t\t\t\t\tfor(j=0;j<8;j++)\n\t\t\t\t\t{\n\t\t\t\t\t\tVoteYes[j] = \"\";\n\t\t\t\t\t\tVoteNo[j] = \"\";\n\t\t\t\t\t}\n\t\t\t\t\tBroadcastMessage(\"|P2\"$msgTag$GetName(Sender)$\"(\"$GetID(Sender)$\") An admin has stopped the vote...\");\n\t\t\t\t\tEVM = VM_Off;\n\t\t\t\t\tbVoteInProgress=False;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(MutateString ~= \"No\")\n\t\t\t{\n\t\t\t\tif(EVM == VM_Kick || EVM == VM_Map)\n\t\t\t\t{\n\t\t\t\t\t\tfor(j=0;j<3;j++)\n\t\t\t\t\t\tif(VoteNo[j] == Sender.PlayerReplicationInfo.PlayerName)\n\t\t\t\t\t\t{\n\t\t\t\t\t\tSender.ClientMessage(\"You have already voted!\");\n\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor(j=0;j<3;j++)\t\t\t\n\t\t\t\t\t\tif(VoteNo[j] == \"\")\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tif(j < 3)\n\t\t\t\t\t\t{\n\t\t\t\t\t\tVoteNo[j] = Sender.PlayerReplicationInfo.PlayerName;\n\t\t\t\t\t\tBroadcastMessage(\"|P2\"$msgTag$GetName(Sender)$\"(\"$GetID(Sender)$\") voted no. [Total: \"$j$\"]\");\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\t\t\n\n\t\tif(left(MutateString,16) ~= \"RCON.GoToPlayer \")\n        {\n            ID = int(Left(Right(MutateString, Len(MutateString) - 16),InStr(MutateString,\" \")));\n            for(APawn = level.PawnList; APawn != none; APawn = APawn.nextPawn)\n                if(APawn.bIsPlayer)\n                    if(PlayerPawn(APawn) == none || NetConnection(PlayerPawn(APawn).Player) != none)\n                        if(PlayerPawn(APawn).PlayerReplicationInfo.PlayerID == ID)\n                        {\n                            Part = Right(MutateString,Len(MutateString) - 16);\n\t\t\t\t\t\t\tif(Sender.bAdmin || IsWhitelisted(Sender))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif(DeusExPlayer(APawn).isinState('Spectating'))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tDeusExPlayer(Sender).ClientMessage(\"|P3\"$msgTag$\"Could not locate \"$GetName(APawn)$\" due to Spectating state!\", 'Teamsay');\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tAPawn.PlaySound(sound'PickupActivate', SLOT_None,,, 256);\n\t\t\t\t\t\t\tDeusExPlayer(Sender).ClientMessage(\"|P3\"$msgTag$\"Warping to \"$GetName(APawn)$\"!\", 'Teamsay');\n\t\t\t\t\t\t\tDeusExPlayer(APawn).ClientMessage(\"|P3\"$msgTag$GetName(Sender)$\" has warped to your location.\", 'Teamsay');\n\t\t\t\t\t\t\tSender.SetCollision(false, false, false);\n\t\t\t\t\t\t\tSender.bCollideWorld = true;\n\t\t\t\t\t\t\tSender.GotoState('PlayerWalking');\n\t\t\t\t\t\t\tSender.SetLocation(APawn.location);\n\t\t\t\t\t\t\tSender.SetCollision(true, true , true);\n\t\t\t\t\t\t\tSender.SetPhysics(PHYS_Walking);\n\t\t\t\t\t\t\tSender.bCollideWorld = true;\n\t\t\t\t\t\t\tSender.GotoState('PlayerWalking');\n\t\t\t\t\t\t\tSender.ClientReStart();\t\n\t\t\t\t\t\t\tSender.PlaySound(sound'PickupActivate', SLOT_None,,, 256);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t}\n\t\t\n\t\tif(left(MutateString,12) ~= \"RCON.Freeze \")\n        {\n            ID = int(Left(Right(MutateString, Len(MutateString) - 12),InStr(MutateString,\" \")));\n            for(APawn = level.PawnList; APawn != none; APawn = APawn.nextPawn)\n                if(APawn.bIsPlayer)\n                    if(PlayerPawn(APawn) == none || NetConnection(PlayerPawn(APawn).Player) != none)\n                        if(PlayerPawn(APawn).PlayerReplicationInfo.PlayerID == ID)\n                        {\n                            Part = Right(MutateString,Len(MutateString) - 12);\n\t\t\t\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif(DeusExPlayer(APawn).bMovable)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tAPawn.bMovable=False;\n\t\t\t\t\t\t\t\tDeusExPlayer(APawn).InHand=None;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(bBroadcasts)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tBroadcastMessage(\"|P3\"$msgTag$GetName(Sender)@\"froze\"@GetName(APawn));\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSender.ClientMessage(\"|P3\"$msgTag$\"Froze\"@GetName(APawn));\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tAPawn.bMovable=True;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(bBroadcasts)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tBroadcastMessage(\"|P3\"$msgTag$GetName(Sender)@\"un-froze\"@GetName(APawn));\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSender.ClientMessage(\"|P3\"$msgTag$\"Un-froze\"@GetName(APawn));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t}\n\t\t\n\t\tif(left(MutateString,14) ~= \"RCON.Gametype \")\n        {\n            i = int(Left(Right(MutateString, Len(MutateString) - 14),InStr(MutateString,\" \")));\n                            //Part = Right(MutateString,Len(MutateString) - 14);\n\t\t\t\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t\t\t\t{\t\t\n\t\t\t\t\t\t\t\tif(RGameTypes[i]==\"\")\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tSender.ClientMessage(\"|P2\"$msgTag$\"RGAMETYPE[\"$i$\"] is empty. Please check another slot.\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tMapString = GetURLMap();\n\t\t\t\t\t\t\t\tBroadcastMessage(\"|P4\"$msgTag$\"An admin is switching gametype to \"$RGameTypes[i]);\n\t\t\t\t\t\t\t\tConsoleCommand(\"servertravel \"$MapString$\"?Game=\"$RGameTypes[i]);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\t\t}\n\t\t\n\t\tif(left(MutateString,19) ~= \"RCON.GametypeCheck \")\n        {\n            i = int(Left(Right(MutateString, Len(MutateString) - 19),InStr(MutateString,\" \")));\n                            //Part = Right(MutateString,Len(MutateString) - 14);\n\t\t\t\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t\t\t\t{\t\t\n\t\t\t\t\t\t\t\tif(RGameTypes[i]==\"\")\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tSender.ClientMessage(\"|P2\"$msgTag$\"Array [\"$i$\"] is empty. \");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tSender.ClientMessage(\"|P4\"$msgTag$\" [\"$i$\"] \"$RGameTypes[i]);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\t\t}\n\n\t\tif(left(MutateString,14) ~= \"RCON.Assemble \")\n        {\n            ID = int(Left(Right(MutateString, Len(MutateString) - 14),InStr(MutateString,\" \")));\n            for(APawn = level.PawnList; APawn != none; APawn = APawn.nextPawn)\n                if(APawn.bIsPlayer)\n                    if(PlayerPawn(APawn) == none || NetConnection(PlayerPawn(APawn).Player) != none)\n                        if(PlayerPawn(APawn).PlayerReplicationInfo.PlayerID == ID)\n                        {\n                            Part = Right(MutateString,Len(MutateString) - 14);\n\t\t\t\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tBroadcastMessage(\"|P3\"$msgTag$\"Everyone has been assembled at \"$GetName(APawn)$\"'s location.\");\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tAPawn.SetCollision(false, false, false);\n\t\t\t\t\t\t\t\tAPawn.bCollideWorld = true;\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tAPawn.GotoState('PlayerWalking');\n\t\t\t\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif(DXP != APawn && !DXP.isinState('Spectating') && DXP.Health >= 1)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tDXP.SetCollision(false, false, false);\n\t\t\t\t\t\t\t\t\tDXP.bCollideWorld = true;\n\t\t\t\t\t\t\t\t\tDXP.GotoState('PlayerWalking');\n\t\t\t\t\t\t\t\t\tDXP.SetLocation(APawn.location);\n\t\t\t\t\t\t\t\t\tDXP.SetCollision(true, true , true);\n\t\t\t\t\t\t\t\t\tDXP.SetPhysics(PHYS_Walking);\n\t\t\t\t\t\t\t\t\tDXP.bCollideWorld = true;\n\t\t\t\t\t\t\t\t\tDXP.GotoState('PlayerWalking');\n\t\t\t\t\t\t\t\t\tDXP.ClientReStart();\t\n\t\t\t\t\t\t\t\t\tSender.PlaySound(sound'PickupActivate', SLOT_None,,, 256);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tAPawn.SetCollision(true, true , true);\n\t\t\t\t\t\t\t\tAPawn.SetPhysics(PHYS_Walking);\t\n\t\t\t\t\t\t\t\tAPawn.bCollideWorld = true;\t\n\t\t\t\t\t\t\t\tAPawn.GotoState('PlayerWalking');\n\t\t\t\t\t\t\t\tAPawn.ClientReStart();\n\t\t\t\t\t\t\t\tAPawn.PlaySound(sound'PickupActivate', SLOT_None,,, 256);\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t}\n\t\n\t\tif(left(MutateString,17) ~= \"RCON.BringPlayer \")\n        {\n            ID = int(Left(Right(MutateString, Len(MutateString) - 17),InStr(MutateString,\" \")));\n            for(APawn = level.PawnList; APawn != none; APawn = APawn.nextPawn)\n                if(APawn.bIsPlayer)\n                    if(PlayerPawn(APawn) == none || NetConnection(PlayerPawn(APawn).Player) != none)\n                        if(PlayerPawn(APawn).PlayerReplicationInfo.PlayerID == ID)\n                        {\n                            Part = Right(MutateString,Len(MutateString) - 17);\n\t\t\t\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif(DeusExPlayer(APawn).isinState('Spectating'))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tDeusExPlayer(Sender).ClientMessage(\"|P3\"$msgTag$\"Could not locate \"$GetName(APawn)$\" due to Spectating state!\", 'Teamsay');\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif(APawn.Health <= 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tDeusExPlayer(Sender).ClientMessage(\"|P3\"$msgTag$\"Could not locate \"$GetName(APawn)$\" due to death!\", 'Teamsay');\n\t\t\t\t\t\t\t\t\treturn;\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tDeusExPlayer(Sender).ClientMessage(\"|P3\"$msgTag$GetName(APawn)$\" has been summoned to your location.\", 'Teamsay');\n\t\t\t\t\t\t\tDeusExPlayer(APawn).ClientMessage(\"|P3\"$msgTag$GetName(Sender)$\" has taken you to their location.\", 'Teamsay');\n\t\t\t\t\t\t\tAPawn.SetCollision(false, false, false);\n\t\t\t\t\t\t\tAPawn.bCollideWorld = true;\n\t\t\t\t\t\t\tAPawn.GotoState('PlayerWalking');\n\t\t\t\t\t\t\tAPawn.SetLocation(sender.location);\n\t\t\t\t\t\t\tAPawn.SetCollision(true, true , true);\n\t\t\t\t\t\t\tAPawn.SetPhysics(PHYS_Walking);\n\t\t\t\t\t\t\tAPawn.bCollideWorld = true;\n\t\t\t\t\t\t\tAPawn.GotoState('PlayerWalking');\n\t\t\t\t\t\t\tAPawn.ClientReStart();\t\n\t\t\t\t\t\t\tSender.PlaySound(sound'PickupActivate', SLOT_None,,, 256);\n\t\t\t\t\t\t\tAPawn.PlaySound(sound'PickupActivate', SLOT_None,,, 256);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t}\n\t\t\n\t\telse if(left(MutateString,11) ~= \"RCON.Admin \")\n        {\n            ID = int(Left(Right(MutateString, Len(MutateString) - 11),InStr(MutateString,\" \")));\n            for(APawn = level.PawnList; APawn != none; APawn = APawn.nextPawn)\n                if(APawn.bIsPlayer)\n                    if(PlayerPawn(APawn) == none || NetConnection(PlayerPawn(APawn).Player) != none)\n                        if(PlayerPawn(APawn).PlayerReplicationInfo.PlayerID == ID)\n                        {\n                            Part = Right(MutateString,Len(MutateString) - 11);\n\t\t\t\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\tMakeAdmin(APawn);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t}\n\t\t\n\t\telse if(left(MutateString,12) ~= \"RCON.Rocket \")\n        {\n            ID = int(Left(Right(MutateString, Len(MutateString) - 12),InStr(MutateString,\" \")));\n            for(APawn = level.PawnList; APawn != none; APawn = APawn.nextPawn)\n                if(APawn.bIsPlayer)\n                    if(PlayerPawn(APawn) == none || NetConnection(PlayerPawn(APawn).Player) != none)\n                        if(PlayerPawn(APawn).PlayerReplicationInfo.PlayerID == ID)\n                        {\n                            Part = Right(MutateString,Len(MutateString) - 12);\n\t\t\t\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//\tPlayerPawn(APawn).ReducedDamageType = '';\n\t\t\t\t\t\t\t\tAPawn.setPhysics(PHYS_Falling);\n\t\t\t\t\t\t\t\tAPawn.Velocity = vect(0,0,5000);\n\t\t\t\t\t\t\t\tBroadcastMessage(\"|P7\"$msgTag$GetName(APawn)$\" has been LAAAAAAUNCHED in to the air by \"$GetName(Sender)$\"!!!!\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t}\n\t\t\n        else if(left(MutateString,12) ~= \"RCON.ShowIP \")\n        {\n            ID = int(Right(MutateString,Len(MutateString) - 12));\n\t\t\tif(Sender.bAdmin)\n\t\t\t{\n            for(APawn = level.pawnlist; APawn != none; APawn = APawn.nextPawn)\n                if(APawn.bIsPlayer)\n                    if(GetID(APawn) == ID)\n                        if(PlayerPawn(aPawn) == none || NetConnection(PlayerPawn(aPawn).Player) != None)\n                            ListPlayer(APawn,Sender);\n\t\t\t}\n        }\n      \n\t\telse if(Left(MutateString,4) ~= \"Help\")\n        {\n            RCONTemp = Right(MutateString, Len(MutateString) - 4);\n\t\t\t\tif(RCONTemp ~= \"Admin\")\n\t\t\t\t{\n\t\t\t\t\tSender.ClientMessage(\"|P2Admin Only : Smite, Heal, Give, GiveTo, GiveAll, Admin, Switch, Rename, Ghost, Walk, VoteStop, Remote, Freeze, Gametype, GametypeCheck, TPMode, TPBio\");\n\t\t\t\t\tSender.ClientMessage(\"|P2ShowIP, Velocity, BanIP, Warn, UnWarn, Create, Create2, Login, Logout, DXMP, Setting, Say, Con, Vict, Rocket, Echo, GoToPlayer, BringPlayer, Pass, Set, Get, SelfSetRep, SelfSet\");\n\t\t\t\t}\n\t\t\t\telse if(RCONTemp ~= \"Player\")\n\t\t\t\t{\n\t\t\t\t\tSender.ClientMessage(\"|P3All players: RCON.* Ping, Tell, NameColour, VoteMap, VoteKick, TP\");\n\t\t\t\t\tSender.ClientMessage(\"|P3Register system: Mutate Register to protect your name. Admin functions: Register.Admin, Register.Delete, Register.Check\");\n\t\t\t\t\tSender.ClientMessage(\"|P3RCON.Chat : Sends a message to all logged in admins.\");\n\t\t\t\t}\n\t\t\t\telse if(RCONTemp == \"\")\n\t\t\t\t{\n\t\t\t\tSender.ClientMessage(\"|P3RCON Mutator, by Kai 'TheClown'. Version 9.x\");\n\t\t\t\tSender.ClientMessage(\"|P3Enter Mutate HelpAdmin or HelpPlayer for command list.\");\n\t\t\t\t}\n        }\n\t\t\n\t\telse if(Left(MutateString,14) ~= \"RCON.Velocity \")\n        {\n\t\t\tif(Sender.bAdmin)\n\t\t\t{\n            RCONTemp = Right(MutateString, Len(MutateString) - 14);\n\t\t\t\tif(RCONTemp ~= \"Glide\")\n\t\t\t\t{\n\t\t\t\t\tSender.DoJump();\n\t\t\t\t\tSender.SetPhysics(PHYS_Flying);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\telse if(RCONTemp ~= \"Fall\")\n\t\t\t\t{\n\t\t\t\tSender.DoJump();\n\t\t\t\tSender.SetPhysics(PHYS_Falling);\n\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\telse if(RCONTemp ~= \"Up\")\n\t\t\t\t{\n\t\t\t\tSender.Velocity = vect(0,0,512);\n\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\telse if(RCONTemp ~= \"Down\")\n\t\t\t\t{\n\t\t\t\tSender.Velocity = vect(0,0,-512);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\tSender.ClientMessage(\"|P2\"$msgTag$\"Valid inputs are: Glide, Fall, Up, Down\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n        else if(Left(MutateString,9) ~= \"RCON.sta \")\n        {\n            ip = Right(MutateString, Len(MutateString) - 9);\n            sender.clientmessage(ip);\n            RCONTemp = class'StaticExt'.static.repl(ip, \"a\", \"b\");\n            sender.clientmessage(RCONTemp);\n            RCONTemp = class'StaticExt'.static.repl(ip, \"A\", \"b\");\n            sender.clientmessage(RCONTemp);\n        }\n        \n        else if(Left(MutateString,11) ~= \"RCON.BanIP \")\n        {\n\t\t\tif(Sender.bAdmin)\n\t\t\t{\n            IP = Right(MutateString, Len(MutateString) - 11);\n            for(APawn = Level.PawnList; APawn != none; APawn = APawn.NextPawn)\n                if(APawn.bIsPlayer)\n                    if(Left(GetIP(APawn),Len(IP)) ~= IP)\n                        if(PlayerPawn(aPawn) == none || NetConnection(PlayerPawn(aPawn).Player) != None)\n                            for(i=0;i<50;i++)\n                                if(Level.Game.IPPolicies[i] == \"\")\n                                {\n\t\t\t\t\t\t\t\t\tLog(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\", 'RCON');\n                                    log(\"~banning IP address \"$IP$\"~\", 'RCON');\n\t\t\t\t\t\t\t\t\tLog(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\", 'RCON');\n                                    Level.Game.IPPolicies[i] = \"DENY,\"$IP;\n                                    Level.Game.SaveConfig();\n                                    APawn.Destroy();\n                                    break;\n                                }\n\t\t\t}\n        }\n\t\t\n\t\tif(left(MutateString,15) ~= \"RCON.BanDelete \")\n        {\n            ID = int(Left(Right(MutateString, Len(MutateString) - 15),InStr(MutateString,\" \")));\n\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t{\n\t\t\t\t\tif(Level.Game.IPPolicies[ID] != \"\")\n\t\t\t\t\t{\n\t\t\t\t\tPrintAdmin(\"Ban entry removed \"$ID$\" (\"$Level.Game.IPPolicies[ID]$\")\");\n\t\t\t\t\tLevel.Game.IPPolicies[ID] = \"\";\n\t\t\t\t\tLevel.Game.SaveConfig();\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\tSender.Clientmessage(\"Ban entry is empty.\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\t\t\n\t\tif(left(MutateString,14) ~= \"RCON.BanCheck \")\n        {\n            ID = int(Left(Right(MutateString, Len(MutateString) - 14),InStr(MutateString,\" \")));\n\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t{\n\t\t\t\t\tif(Level.Game.IPPolicies[ID] != \"\")\n\t\t\t\t\t{\n\t\t\t\t\tPrintAdmin(\"IPPolicies \"$ID$\" (\"$Level.Game.IPPolicies[ID]$\")\");\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\tSender.Clientmessage(\"Ban entry is empty.\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\t\t\t\n\t\telse if(Left(MutateString,11) ~= \"RCON.Login \")\n        {\n\t\t\tif(!Sender.bAdmin)\n\t\t\t{\n            RCONTemp = Right(MutateString, Len(MutateString) - 11);\n\n\t\t\t\tif(RCONTemp == RCONPassword)\n\t\t\t\t{\n\t\t\t\tPrintAdmin(\"A player has logged in using RCON. [\"$GetName(Sender)$\"]\");\n\t\t\t\tSender.PlayerReplicationInfo.bAdmin = True;\n\t\t\t\tSender.bAdmin = True;\n\t\t\t\tSender.bCheatsEnabled = True;\n\t\t\t\tSender.ClientMessage(\"|P3Client login accepted. Administrator access active.\", 'TeamSay');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\tSender.ClientMessage(\"|P2Client login denied (Incorrect password)\", 'TeamSay');\n\t\t\t\tSystemWarnPlayer(Sender, \"incorrect password\");\n\t\t\t\t}\n\t\t\t}\n        }\n\t\t\n\t\telse if(Left(MutateString,10) ~= \"RCON.DXMP \")\n        {\n\t\t\tif(Sender.bAdmin)\n\t\t\t{\n            RCONTemp = Right(MutateString, Len(MutateString) - 10);\n\t\t\tConsoleCommand(\"Set DeusExMPGame \"$RCONTemp);\n\t\t\tBroadcastMessage(\"|P3\"$msgTag$\"A game property was changed: \"$RCONTemp);\n\t\t\t}\n        }\n\t\t\n\t\telse if(Left(MutateString,13) ~= \"RCON.Setting \")\n        {\n\t\t\tif(Sender.bAdmin)\n\t\t\t{\n            RCONTemp = Right(MutateString, Len(MutateString) - 13);\n\t\t\tConsoleCommand(\"Set RCON \"$RCONTemp);\n\t\t\tBroadcastMessage(\"|P3\"$msgTag$\"An RCON setting was changed: \"$RCONTemp);\n\t\t\t}\n        }\t\t\n\t\t\n\t\telse if(Left(MutateString,10) ~= \"RCON.Vict \")\n        {\n\t\t\tif(Sender.bAdmin)\n\t\t\t{\n            RCONTemp = Right(MutateString, Len(MutateString) - 10);\n\t\t\t\tif(RCONTemp ~= \"Frags\")\n\t\t\t\t{\n\t\t\t\tConsoleCommand(\"Set DeusExMPGame victorycondition \"$RCONTemp);\n\t\t\t\tBroadcastMessage(\"|P3\"$msgTag$\"VictoryCondition changed: Kill Limit.\");\n\t\t\t\t}\n\t\t\t\telse if(RCONTemp ~= \"Time\")\n\t\t\t\t{\n\t\t\t\tConsoleCommand(\"Set DeusExMPGame victorycondition \"$RCONTemp);\n\t\t\t\tBroadcastMessage(\"|P3\"$msgTag$\"VictoryCondition changed: Timer.\");\n\t\t\t\t}\n\t\t\t\telse if(RCONTemp ~= \"None\")\n\t\t\t\t{\n\t\t\t\tConsoleCommand(\"Set DeusExMPGame victorycondition \"$RCONTemp);\n\t\t\t\tBroadcastMessage(\"|P3\"$msgTag$\"Victory Condition disabled. Match will not end until victory condition is set.\");\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\tSender.ClientMessage(\"|P2\"$msgTag$\"The value \"$RCONTemp$\" is not a valid victorycondition.\");\n\t\t\t\t}\n\n\t\t\t}\n        }\n\t\t\n\t\telse if(Left(MutateString,16) ~= \"RCON.NameColour \")\n        {\n            RCONTemp = Right(MutateString, Len(MutateString) - 16);\n\t\t\tAName = DeusExPlayer(Sender).PlayerReplicationInfo.PlayerName;\n\t\t\taname=RCONTemp$Aname;\n\t\t\taname=Left(aname,32);\n\t\t\tDeusExPlayer(Sender).Playerreplicationinfo.PlayerName = AName;\n\t\t\tDeusExPlayer(Sender).ClientMessage(\"|P3\"$msgTag$\"Name formatted to \"$RCONTemp$Aname);\n\t\t\tAPawn.SaveConfig();\n        }\n\t\t\n\t\telse if(left(MutateString,12) ~= \"RCON.Rename \")\n        {\n            ID = int(Left(Right(MutateString, Len(MutateString) - 12),InStr(MutateString,\" \")));\n            for(APawn = level.PawnList; APawn != none; APawn = APawn.nextPawn)\n                if(APawn.bIsPlayer)\n                    if(PlayerPawn(APawn) == none || NetConnection(PlayerPawn(APawn).Player) != none)\n                        if(PlayerPawn(APawn).PlayerReplicationInfo.PlayerID == ID)\n                        {\n                            Part = Right(MutateString,Len(MutateString) - 12);\n                           RCONTemp = Right(Part,Len(Part) - InStr(Part,\" \") - 1);\n\t\t\t\t\t\n\t\t\t\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t\t\t\t{\t\t\n\t\t\t\t\t\t\t\tBroadcastMessage(\"|P3\"$msgTag$APawn.PlayerReplicationInfo.PlayerName$\"|P3 was renamed to |P2\"$RCONTemp$\"|P3 by |P2\"$GetName(Sender));\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tDeusExPlayer(APawn).Playerreplicationinfo.Playername = RCONTemp;\t\t\n\t\t\t\t\t\t\t\tAPawn.SaveConfig();\n\t\t\t\t\t\t\t}\t\t\t\n                        }\n        } \n\t\t\n\t\telse if(Left(MutateString,9) ~= \"RCON.Con \")\n        {\n\t\t\tif(Sender.bAdmin)\n\t\t\t{\n            RCONTemp = Right(MutateString, Len(MutateString) - 9);\n\t\t\tConsoleCommand(RCONTemp);\n\t\t\tDeusExPlayer(Sender).LocalLog(\"Command input: \"$RCONTemp);\n\t\t\t}\n        }\n\n\t\telse if(Left(MutateString,14) ~= \"RCON.AddIRCOp \")\n        {\n\t\t\tif(Sender.bAdmin)\n\t\t\t{\n            RCONTemp = Right(MutateString, Len(MutateString) - 14);\n\t\t\t\tif(RCONTemp != \"\")\n\t\t\t\t{\n\t\t\t\t\tfor(a=0;a<10;a++)\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors(class'IRCLink', _IRC)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(_IRC.OpUsernames[a] == \"\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t_IRC.OpUsernames[a] = RCONTemp;\n\t\t\t\t\t\t\t\t_IRC.SaveConfig();\n\t\t\t\t\t\t\t\tBroadcastMessage(\"A new IRC operator has been added:\"@RCONTemp);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n        }\n\t\t\n\t\telse if(Left(MutateString,14) ~= \"RCON.RemIRCOp \")\n        {\n\t\t\tif(Sender.bAdmin)\n\t\t\t{\n\t\t\t\tID = int(Left(Right(MutateString, Len(MutateString) - 11),InStr(MutateString,\" \")));\n\t\t\t\tforeach AllActors(class'IRCLink', _IRC)\n\t\t\t\t{\n\t\t\t\t\tif(_IRC.OpUsernames[id] != \"\")\n\t\t\t\t\t{\n\t\t\t\t\t\t_IRC.OpUsernames[id] = \"\";\n\t\t\t\t\t\t_IRC.SaveConfig();\n\t\t\t\t\t\tBroadcastMessage(\"An IRC operator has been removed.\");\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n        }\n\t\t\n\t\telse if(Left(MutateString,9) ~= \"RCON.Say \")\n        {\n\t\t\tif(Sender.bAdmin)\n\t\t\t{\n            RCONTemp = Right(MutateString, Len(MutateString) - 9);\n\t\t\tConsoleCommand(\"say\"@RCONTemp);\n\t\t\t}\n        }\n\t\t\n\t\telse if(Left(MutateString,10) ~= \"RCON.Chat \")\n        {\n\t\t    RCONChat = Right(MutateString, Len(MutateString) - 10);\n\t\t\tif(Sender.Playerreplicationinfo.bAdmin)\n\t\t\t{\n\t\t\t\tforeach allactors (class'DeusExPlayer',DXP)\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.bAdmin)\n\t\t\t\t\t\tDXP.ClientMessage(\"|P7[ADMIN] |P1\"$GetName(Sender)$\"(\"$GetID(Sender)$\"): |P1\"$RCONChat, 'TeamSay');\n\t\t\t\t\n\t\t\t\tforeach AllActors(class'MessagingSpectator', MS)\n\t\t\t\t\tif(string(ms.Class) ~= \"dxtelnetadmin.telnetspectator\")\n\t\t\t\t\t\tms.ClientMessage(\"[ADMIN] \"$GetName(Sender)$\"(\"$GetID(Sender)$\"): \"$RCONChat,'Say');\n\n\t\t\t\tForEach AllActors(class'AthenaSpectator', _AS)\n\t\t\t\t\tif(_AS != None)\n\t\t\t\t\t\t_AS.ClientMessage(GetName(Sender)$\"(\"$GetID(Sender)$\"): \"$RCONChat,'Say');\n\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tforeach allactors (class'DeusExPlayer',DXP)\n\t\t\t\t\tif(DXP.PlayerReplicationInfo.bAdmin)\n\t\t\t\t\t\tDXP.ClientMessage(\"|P7[ADMIN MESSAGE FROM PLAYER] |P1\"$GetName(Sender)$\"(\"$GetID(Sender)$\"): \"$RCONChat, 'TeamSay');\n\t\t\t\t\t\t\n\t\t\t\tforeach AllActors(class'MessagingSpectator', MS)\n\t\t\t\t\tif(string(ms.Class) ~= \"dxtelnetadmin.telnetspectator\")\n\t\t\t\t\t\tms.ClientMessage(\"[PLAYER -> ADMIN] \"$GetName(Sender)$\"(\"$GetID(Sender)$\"): \"$RCONChat,'Say');\n\n\t\t\t\tSender.ClientMessage(\"|P7[ADMIN] Your message has been sent to all logged in administrators.\", 'Teamsay');\n\t\t\t}\n\n\t\t}\n\t\t\n\t\telse if(Left(MutateString,10) ~= \"RCON.Pass \")\n        {\n\t\t    RCONChat = Right(MutateString, Len(MutateString) - 10);\n\t\t\tif(Sender.Playerreplicationinfo.bAdmin)\n\t\t\t{\t\t\n\t\t\t\t\tOP = RCONChat;\n\t\t\t\t\tSender.ConsoleCommand(\"Admin Set Gameinfo Gamepassword \"$RCONChat);\n\t\t\t\t\tif(RCONChat != \"\")\n\t\t\t\t\t{\n\t\t\t\t\tBroadcastMessage(\"|P3\"$msgTag$\"The GamePassword has been changed to \"$RCONChat);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\tBroadcastMessage(\"|P3\"$msgTag$\"The GamePassword has been removed.\");\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\telse if(Left(MutateString,10) ~= \"RCON.Echo \")\n        {\n\t\t    RCONChat = Right(MutateString, Len(MutateString) - 10);\n\t\t\tif(Sender.Playerreplicationinfo.bAdmin)\n\t\t\t{\n\t\t\t\tforeach allactors (class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tDXP.LocalLog(RCONChat);\n\t\t\t\t}\n\t\t\t}\n\t\t}\t\n\t\t\n\t\telse if (MutateString ~= \"RCON.TP\")\n\t\t{\n\t\t\t\tif(Sender.isinState('Spectating'))\n\t\t\t\t{\n\t\t\t\t\tDeusExPlayer(Sender).ClientMessage(\"|P3\"$msgTag$\"Could not teleport due to Spectating state!\", 'Teamsay');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tloc = Sender.Location;\n\t\t\t\tloc.Z += Sender.BaseEyeHeight;\n\t\t\t\tline = Vector(Sender.ViewRotation) * 90000;\n\t\t\t\n\t\t\t\tTrace(hitLocation, hitNormal, loc+line, loc, true);\n\t\t\t\tif(TPM == T_OFF)\n\t\t\t\t{\n\t\t\t\tSender.ClientMessage(msgTag$\"Player teleporting currently disabled.\");\n\t\t\t\tSender.PlaySound(sound'PickupDeActivate', SLOT_None,,, 256);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(TPM == T_Admin)\n\t\t\t\t{\n\t\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t\t{\n\t\t\t\t\tSpawnExplosion(HitLocation);\n\t\t\t\t\tSpawnExplosion(loc);\n\t\t\t\t\tDrawTeleportBeam(HitLocation, Sender.Location, Sender);\n\t\t\t\t\tSender.SetPhysics(Phys_None);\n\t\t\t\t\tSender.PlaySound(TPSound, SLOT_None,,, 256);\n\t\t\t\t\tTeleportTo(HitLocation, DeusExPlayer(Sender));\n\t\t\t\t\t//Sender.SetLocation(HitLocation);\n\t\t\t\t\tSender.SetPhysics(Phys_Falling);\t\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\tSender.ClientMessage(msgTag$\"Player teleporting currently disabled.\");\n\t\t\t\t\tSender.PlaySound(sound'PickupDeActivate', SLOT_None,,, 256);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(TPM == T_Limited)\n\t\t\t\t{\n\t\t\t\t\tif(DeusExPlayer(Sender).Energy > TPBioUse)\n\t\t\t\t\t{\n\t\t\t\t\tDeusExPlayer(Sender).Energy -= TPBioUse;\n\t\t\t\t\tSpawnExplosion(HitLocation);\n\t\t\t\t\tSpawnExplosion(loc);\n\t\t\t\t\tDrawTeleportBeam(HitLocation, Sender.Location, Sender);\n\t\t\t\t\tSender.SetPhysics(Phys_None);\n\t\t\t\t\tSender.PlaySound(TPSound, SLOT_None,,, 256);\n\t\t\t\t\tTeleportTo(HitLocation, DeusExPlayer(Sender));\n\t\t\t\t\tSender.SetPhysics(Phys_Falling);\t\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\tSender.ClientMessage(msgTag$\"Not enough bio energy to teleport.\");\n\t\t\t\t\tSender.PlaySound(sound'PickupDeActivate', SLOT_None,,, 256);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(TPM == T_AdminLimited)\n\t\t\t\t{\n\t\t\t\t\tif(!Sender.bAdmin)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(DeusExPlayer(Sender).Energy > TPBioUse)\n\t\t\t\t\t\t{\n\t\t\t\t\t\tDeusExPlayer(Sender).Energy -= TPBioUse;\n\t\t\t\t\t\tSpawnExplosion(HitLocation);\n\t\t\t\t\t\tSpawnExplosion(loc);\n\t\t\t\t\t\tDrawTeleportBeam(HitLocation, Sender.Location, Sender);\n\t\t\t\t\t\tSender.SetPhysics(Phys_None);\n\t\t\t\t\t\t//Sender.SetLocation(HitLocation);\n\t\t\t\t\t\tTeleportTo(HitLocation, DeusExPlayer(Sender));\n\t\t\t\t\t\tSender.SetPhysics(Phys_Falling);\t\n\t\t\t\t\t\tSender.PlaySound(TPSound, SLOT_None,,, 256);\n\t\t\t\t\t\t}\t\t\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\tSender.ClientMessage(msgTag$\"Not enough bio energy to teleport.\");\n\t\t\t\t\t\tSender.PlaySound(sound'PickupDeActivate', SLOT_None,,, 256);\n\t\t\t\t\t\t}\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tSpawnExplosion(HitLocation);\n\t\t\t\t\t\tSpawnExplosion(loc);\n\t\t\t\t\t\tDrawTeleportBeam(HitLocation, Sender.Location, Sender);\n\t\t\t\t\t\tSender.SetPhysics(Phys_None);\n\t\t\t\t\t\t//Sender.SetLocation(HitLocation);\n\t\t\t\t\t\tSender.PlaySound(TPSound, SLOT_None,,, 256);\n\t\t\t\t\t\tTeleportTo(HitLocation, DeusExPlayer(Sender));\n\t\t\t\t\t\tSender.SetPhysics(Phys_Falling);\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\n\t\telse if (MutateString ~= \"RCON.Phys\")\n\t\t{\n\t\t\t\tif(Sender.isinState('Spectating'))\n\t\t\t\t{\n\t\t\t\t\tDeusExPlayer(Sender).ClientMessage(\"|P3\"$msgTag$\"Can't use while spectating!\", 'Teamsay');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tloc = Sender.Location;\n\t\t\t\tloc.Z += Sender.BaseEyeHeight;\n\t\t\t\tline = Vector(Sender.ViewRotation) * 90000;\n\t\t\t\n\t\t\t\tTrace(hitLocation, hitNormal, loc+line, loc, true);\n\t\t\t\t\n\t\t\t\t\tif(DeusExPlayer(Sender).Energy > PhysBioUse)\n\t\t\t\t\t{\n\t\t\t\t\tSpawnExplosion(Sender.Location);\n\t\t\t\t\tDeusExPlayer(Sender).Energy -= PhysBioUse;\n\t\t\t\t\tSender.DoJump();\n\t\t\t\t\tSender.PlaySound(PhysSound, SLOT_None,,, 256);\n\t\t\t\t\tSender.Velocity = (normal(HitLocation - Sender.Location) * PhysSpeed);\n\t\t\t\t\tSender.SetPhysics(Phys_Falling);\t\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\tSender.ClientMessage(msgTag$\"Not enough bio energy.\");\n\t\t\t\t\tSender.PlaySound(sound'PigeonCoo', SLOT_None,,, 256);\n\t\t\t\t\t}\n\t\t}\t\n\t\t\n\t\telse if (MutateString ~= \"RCON.TPMODE\")\n\t\t{\n\t\t\tif(Sender.bAdmin)\n\t\t\t{\n\t\t\t\tif(TPM == T_Admin)\n\t\t\t\t{\n\t\t\t\tTPM = T_Limited;\n\t\t\t\tSaveConfig();\n\t\t\t\tBroadcastMessage(\"|P7\"$msgTag$\"Teleportation system set to GLOBAL ACESS. |P4Mutate RCON.TP command enabled for all. Bio usage at \"$formatFloat(TPBioUse)$\" for all players.\");\n\t\t\t\treturn;\n\t\t\t\t}\n\t\t\n\t\t\t\tif(TPM == T_Limited)\n\t\t\t\t{\n\t\t\t\tTPM = T_AdminLimited;\n\t\t\t\tSaveConfig();\n\t\t\t\tBroadcastMessage(\"|P7\"$msgTag$\"Teleportation system set to GLOBAL ACESS|P2+|P4 Bio usage at \"$formatFloat(TPBioUse)$\" for non-admin players. Administrator use does not use bio energy.\");\t\t\t\t\n\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(TPM == T_AdminLimited)\n\t\t\t\t{\n\t\t\t\tTPM = T_OFF;\n\t\t\t\tSaveConfig();\n\t\t\t\tBroadcastMessage(\"|P7\"$msgTag$\"Teleportation system is now OFF.\");\t\n\t\t\t\treturn;\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(TPM == T_OFF)\n\t\t\t\t{\n\t\t\t\tTPM = T_Admin;\n\t\t\t\tSaveConfig();\n\t\t\t\tBroadcastMessage(\"|P7\"$msgTag$\"Teleportation system set to ADMIN ONLY.  No Bio usage.\");\t\n\t\t\t\treturn;\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\t\n\t\tif(left(MutateString,11) ~= \"RCON.TPBio \")\n        {\n            ID = int(Left(Right(MutateString, Len(MutateString) - 11),InStr(MutateString,\" \")));\n\t\t\tTPBioUse = ID;\n\t\t\tSaveConfig();\n\t\t\tBroadcastMessage(\"|P7\"$msgTag$\"Teleportation Bio usage is now set at \"$formatFloat(TPBioUse)$\" for all players.\");\n\t\t\t\n\t\t}\n\t\t\n\t\telse if(MutateString ~= \"RCON.NPTEnable\")\n\t\t{\n\t\t\tConsoleCommand(\"Set NephthysDrv bUscriptAPI True\");\n\t\t\tBroadcastMessage(\"|P7\"$msgTag$\"Nephthys USCRIPT API accessed.\");\n\t\t}\n\t\t\t\t\n\t\telse if(MutateString ~= \"RCON.NPTDisable\")\n\t\t{\n\t\t\tConsoleCommand(\"Set NephthysDrv bUscriptAPI False\");\n\t\t\tBroadcastMessage(\"|P7\"$msgTag$\"Nephthys USCRIPT API disabled.\");\n\t\t}\n\t\t\n\t\telse if (MutateString ~= \"RCON.Ghost\")\n\t\t{\n\t\t\tif(Sender.bAdmin)\n\t\t\t{\n\t\t\tSender.UnderWaterTime = -1.0;\t\n\t\t\tSender.bHidden=True;\n\t\t\tSender.SetCollision(false, false, false);\n\t\t\tSender.bCollideWorld = true;\n\t\t\tSender.GotoState('PlayerWalking');\n\t\t\tSender.ClientMessage(\"You feel somewhat ghostly.\", 'Say');\n\t\t\t}\n\t\t}\n\t\t\n\t\telse if (MutateString ~= \"RCON.Ghost2\")\n\t\t{\n\t\t\tif(Sender.bAdmin)\n\t\t\t{\n\t\t\tSender.UnderWaterTime = -1.0;\t\n\t\t\tSender.SetCollision(false, false, false);\n\t\t\tSender.bCollideWorld = true;\n\t\t\tSender.GotoState('PlayerWalking');\n\t\t\tSender.ClientMessage(\"You feel somewhat ghostly.\", 'Say');\n\t\t\t}\n\t\t}\n\t\t\n\t\telse if (MutateString ~= \"RCON.Ghost0\")\n\t\t{\n\t\t\tif(Sender.bAdmin)\n\t\t\t{\n\t\t\t\tSender.UnderWaterTime = Sender.Default.UnderWaterTime;\t\n\t\t\t\tSender.SetCollision(true, true , true);\n\t\t\t\tSender.SetPhysics(PHYS_Walking);\n\t\t\t\tSender.bCollideWorld = true;\n\t\t\t\tSender.bHidden=False;\n\t\t\t\tSender.GotoState('PlayerWalking');\n\t\t\t\tSender.ClientReStart();\t\n\t\t\t\tSender.ClientMessage(\"You return to normal\", 'Say');\n\t\t\t}\n\t\t}\n\t\t\n\t\telse if (MutateString ~= \"RCON.Fly\")\n\t\t{\n\t\t\tif(!bPlayerCheatsFly)\n\t\t\t\tbBlockit=True;\n\t\t\t\t\n\t\t\tif(bRestricted(Sender))\n\t\t\t\tbBlockit=True;\n\t\t\t\t\n\t\t\tif(IsWhitelisted(Sender))\n\t\t\t\tbBlockit=False;\t\n\t\t\t\t\n\t\t\tif(!bBlockit)\n\t\t\t{\n\t\t\t\t\tSender.bAdmin=True;\n\t\t\t\t\tSender.PlayerReplicationInfo.bAdmin=True;\n\t\t\t\t\tSender.bCheatsEnabled=True;\n\t\t\t\t\tSender.ConsoleCommand(\"Fly\");\n\t\t\t\t\tSender.bAdmin=False;\n\t\t\t\t\tSender.bCheatsEnabled=False;\n\t\t\t\t\tSender.PlayerReplicationInfo.bAdmin=False;\n\t\t\t}\n\t\t}\n\n\t\telse if (MutateString ~= \"RCON.Walk\")\n\t\t{\n\t\t\tif(!bPlayerCheatsFly)\n\t\t\t\tbBlockit=True;\n\t\t\t\t\n\t\t\tif(bRestricted(Sender))\n\t\t\t\tbBlockit=True;\n\t\t\t\t\n\t\t\tif(IsWhitelisted(Sender))\n\t\t\t\tbBlockit=False;\t\n\t\t\t\t\n\t\t\tif(!bBlockit)\n\t\t\t{\n\t\t\t\t\tSender.bAdmin=True;\n\t\t\t\t\tSender.PlayerReplicationInfo.bAdmin=True;\n\t\t\t\t\tSender.bCheatsEnabled=True;\n\t\t\t\t\tSender.ConsoleCommand(\"Walk\");\n\t\t\t\t\tSender.bAdmin=False;\n\t\t\t\t\tSender.bCheatsEnabled=False;\n\t\t\t\t\tSender.PlayerReplicationInfo.bAdmin=False;\n\t\t\t}\n\t\t}\n\t\telse if (MutateString ~= \"RCON.God\")\n\t\t{\n\t\t\tif(!bPlayerCheats)\n\t\t\t\tbBlockit=True;\n\t\t\t\t\n\t\t\tif(bRestricted(Sender))\n\t\t\t\tbBlockit=True;\n\t\t\t\t\n\t\t\tif(IsWhitelisted(Sender))\n\t\t\t\tbBlockit=False;\t\n\t\t\t\t\n\t\t\tif(!bBlockit)\n\t\t\t{\n\t\t\t\t\tSender.bAdmin=True;\n\t\t\t\t\tSender.PlayerReplicationInfo.bAdmin=True;\n\t\t\t\t\tSender.bCheatsEnabled=True;\n\t\t\t\t\tSender.ConsoleCommand(\"God\");\n\t\t\t\t\tSender.bAdmin=False;\n\t\t\t\t\tSender.bCheatsEnabled=False;\n\t\t\t\t\tSender.PlayerReplicationInfo.bAdmin=False;\n\t\t\t}\n\t\t}\n/*\nstatic function bool SetSkinElement(Actor SkinActor, int SkinNo, string SkinName, string DefaultSkinName)\n{\n\n\tNewSkin = Texture(DynamicLoadObject(SkinName, class'Texture'));\n\tif ( NewSkin != None )\n\t{\n\t\tSkinActor.Multiskins[SkinNo] = NewSkin;\n\t\treturn True;\n\t}\n\telse\n\t{\n\t\tlog(\"Failed to load \"$SkinName);\n\t\tif(DefaultSkinName != \"\")\n\t\t{\n\t\t\tNewSkin = Texture(DynamicLoadObject(DefaultSkinName, class'Texture'));\n\t\t\tSkinActor.Multiskins[SkinNo] = NewSkin;\n\t\t}\n\t\treturn False;\n\t}\n} */\t\n\t\telse if(Left(MutateString,19) ~= \"RCON.SetMultiskins \")\n        {\n\t\t\tID = int(Left(Right(MutateString, Len(MutateString) - 19),InStr(MutateString,\" \")));\n\t\t\tPart = Right(MutateString,Len(MutateString) - 19);\n\t\t\tRccTemp = Right(Part,Len(Part) - InStr(Part,\" \") - 1);\n\t\t\t\t\t\t   \t\t\t\n\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t{\t\t\n\t\t\t\tloc = Sender.Location;\n\t\t\t\tloc.Z += Sender.BaseEyeHeight;\n\t\t\t\tline = Vector(Sender.ViewRotation) * 4000;\n\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+line, loc, true);\n\n\t\t\t\t\tif ( hitActor.isA('DeusExDecoration') || hitActor.isA('Pawn') )\n\t\t\t\t\t{\n\t\t\t\t\t\t/*if ( InStr(rcctemp,\".\") == -1 )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\trcctemp=\"DeusEx.\" $ rcctemp;\n\t\t\t\t\t\t}*/\n\t\t\t\t\t\t//RCTex = Texture(DynamicLoadObject(RCCTemp, class'Texture'));\n\t\t\t\t\t\tif(ID >= 0 && ID <=7)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//hitActor.SetPropertyText(\"Multiskins<\"$ID$\">\", RCCTemp);\n\t\t\t\t\t\t\tHitActor.Multiskins[id] = Texture(DynamicLoadObject(RCCTemp, class'Texture'));\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tSender.ClientMessage(msgTag$\"|p2 Multiskins(\"$id$\") Array out of bounds. (0-7)\");\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\tSender.ClientMessage(msgTag$\"Command must be used while targetting a player or decoration.\");\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\t\t\t\n        }\n\t\t\n\t\telse if(Left(MutateString,18) ~= \"RCON.MyMultiskins \")\n        {\n\t\t\tID = int(Left(Right(MutateString, Len(MutateString) - 18),InStr(MutateString,\" \")));\n\t\t\tPart = Right(MutateString,Len(MutateString) - 18);\n\t\t\tRccTemp = Right(Part,Len(Part) - InStr(Part,\" \") - 1);\n\t\t\t\t\t\tif(ID >= 0 && ID <=7)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tSender.Multiskins[id] = Texture(DynamicLoadObject(RCCTemp, class'Texture'));\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tSender.ClientMessage(msgTag$\"|p2 Multiskins(\"$id$\") Array out of bounds. (0-7)\");\n\t\t\t\t\t\t\t\n        }\n\t\n\t\telse if (MutateString ~= \"RCON.GroupAdd\" && Sender.bAdmin)\n\t\t{\n\t\tloc = Sender.Location;\n\t\tloc.Z += Sender.BaseEyeHeight;\n\t\tline = Vector(Sender.ViewRotation) * 4000;\n\t\tHitActor = Trace(hitLocation, hitNormal, loc+line, loc, true);\n\n\t\t\tif ( hitActor.isA('DeusExDecoration') || hitActor.isA('DeusExMover'))\n\t\t\t{\n\t\t\t\tforeach AllActors(class'GroupingActor', GA)\n\t\t\t\t{\n\t\t\t\t\tif(GA.aOwner == Sender)\n\t\t\t\t\t{\n\t\t\t\t\t\tbGAFound=True;\n\t\t\t\t\t\tGA.AddGroupActor(HitActor);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(!bGAFound)\n\t\t\t\t{\n\t\t\t\t\tGASpawn = Spawn(class'GroupingActor');\n\t\t\t\t\tGASpawn.aOwner = Sender;\n\t\t\t\t\tGASpawn.AddGroupActor(HitActor);\n\t\t\t\t\tSender.ClientMessage(\"|P4New trigger group was created.\");\n\t\t\t\t\tSender.ClientMessage(\"|P3Actor added to trigger group.\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\telse if (MutateString ~= \"RCON.GroupRemove\")\n\t\t{\n\t\tloc = Sender.Location;\n\t\tloc.Z += Sender.BaseEyeHeight;\n\t\tline = Vector(Sender.ViewRotation) * 4000;\n\t\tHitActor = Trace(hitLocation, hitNormal, loc+line, loc, true);\n\n\t\t\tif ( hitActor.isA('DeusExDecoration') || hitActor.isA('DeusExMover'))\n\t\t\t{\n\t\t\t\tforeach AllActors(class'GroupingActor', GA)\n\t\t\t\t{\n\t\t\t\t\tif(GA.aOwner == Sender)\n\t\t\t\t\t{\n\t\t\t\t\t\tbGAFound=True;\n\t\t\t\t\t\tGA.RemoveGroupActor(HitActor);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(!bGAFound)\n\t\t\t\t{\n\t\t\t\t\tSender.ClientMessage(\"|P2Error: No trigger group found.\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\telse if (MutateString ~= \"RCON.GroupTrigger\")\n\t\t{\n\t\t\t\tforeach AllActors(class'GroupingActor', GA)\n\t\t\t\t{\n\t\t\t\t\tif(GA.aOwner == Sender)\n\t\t\t\t\t{\n\t\t\t\t\t\tbGAFound=True;\n\t\t\t\t\t\tGA.Trigger(Sender, Sender);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(!bGAFound)\n\t\t\t\t{\n\t\t\t\t\tSender.ClientMessage(\"|P2Error: No trigger group found.\");\n\t\t\t\t}\t\t\n\t\t}\t\t\n\t\t\n\t\telse if (MutateString ~= \"RCON.Clone\")\n\t\t{\n\t\tloc = Sender.Location;\n\t\tloc.Z += Sender.BaseEyeHeight;\n\t\tline = Vector(Sender.ViewRotation) * 4000;\n\t\tHitActor = Trace(hitLocation, hitNormal, loc+line, loc, true);\n\n\t\t\tif ( hitActor.isA('DeusExDecoration') || hitActor.isA('Pawn') )\n\t\t\t{\n\t\t\t\tSender.Mesh = hitActor.Mesh;\n\t\t\t\tSender.Drawscale=hitActor.Drawscale;\n\t\t\t\tSender.Fatness = hitActor.Fatness;\n\t\t\t\tSender.Skin = hitActor.Skin;\n\t\t\t\tSender.Texture = hitActor.Texture;\n\t\t\t\tSender.bMeshEnviroMap = hitActor.bMeshEnviroMap;\n\t\t\t\tSender.Multiskins[0] = HitActor.MultiSkins[0];\n\t\t\t\tSender.Multiskins[1] = HitActor.MultiSkins[1];\n\t\t\t\tSender.Multiskins[2] = HitActor.MultiSkins[2];\n\t\t\t\tSender.Multiskins[3] = HitActor.MultiSkins[3];\n\t\t\t\tSender.Multiskins[4] = HitActor.MultiSkins[4];\n\t\t\t\tSender.Multiskins[5] = HitActor.MultiSkins[5];\n\t\t\t\tSender.Multiskins[6] = HitActor.MultiSkins[6];\n\t\t\t\tSender.Multiskins[7] = HitActor.MultiSkins[7];\n\t\t\t\tSender.ClientMessage(msgTag$\"|p3\"$hitActor.Class$\" cloned.\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tSender.ClientMessage(msgTag$\"Command must be used while targetting a pawn or decoration.\");\n\t\t\t}\n\t\t}\n\n\t\telse if (MutateString ~= \"RCON.CloneTo\")\n\t\t{\n\t\tloc = Sender.Location;\n\t\tloc.Z += Sender.BaseEyeHeight;\n\t\tline = Vector(Sender.ViewRotation) * 4000;\n\t\tHitActor = Trace(hitLocation, hitNormal, loc+line, loc, true);\n\n\t\t\tif ( hitActor.isA('DeusExDecoration') || hitActor.isA('Pawn') )\n\t\t\t{\n\t\t\t\thitActor.Mesh = Sender.Mesh;\n\t\t\t\thitActor.Drawscale=Sender.Drawscale;\n\t\t\t\thitActor.Fatness = Sender.Fatness;\n\t\t\t\thitActor.Skin = Sender.Skin;\n\t\t\t\thitActor.Texture = Sender.Texture;\n\t\t\t\thitActor.bMeshEnviroMap = Sender.bMeshEnviroMap;\n\t\t\t\thitActor.Multiskins[0] = Sender.MultiSkins[0];\n\t\t\t\thitActor.Multiskins[1] = Sender.MultiSkins[1];\n\t\t\t\thitActor.Multiskins[2] = Sender.MultiSkins[2];\n\t\t\t\thitActor.Multiskins[3] = Sender.MultiSkins[3];\n\t\t\t\thitActor.Multiskins[4] = Sender.MultiSkins[4];\n\t\t\t\thitActor.Multiskins[5] = Sender.MultiSkins[5];\n\t\t\t\thitActor.Multiskins[6] = Sender.MultiSkins[6];\n\t\t\t\thitActor.Multiskins[7] = Sender.MultiSkins[7];\n\t\t\t\tSender.ClientMessage(msgTag$\"|p3\"$hitActor.Class$\" cloned.\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tSender.ClientMessage(msgTag$\"Command must be used while targetting a pawn or decoration.\");\n\t\t\t}\n\t\t}\n\t\t\t\t\n\t\telse if(Left(MutateString,9) ~= \"RCON.Set \")\n        {\n\t\t        RCONTemp = Right(MutateString,Len(MutateString) - 9);\n                //RCONTemp = Right(Part,Len(Part) - InStr(Part,\" \") - 1);\n\t\t\tif(Sender.bAdmin)\n\t\t\t{\n\t\t\t\tloc = Sender.Location;\n\t\t\t\tloc.Z += Sender.BaseEyeHeight;\n\t\t\t\tline = Vector(Sender.ViewRotation) * 4000;\n\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+line, loc, true);\n\n\t\n\t\t\t\ti = InStr(RCONTemp, \" \");       \n\t\t\t\tSetA = Left(RCONTemp, i );\n\t\t\t\tSetB = Right(RCONTemp, Len(RCONTemp) - i - 1);\n\t\t\t\t\n\t\t\t\t\tif (hitActor != None && !hitActor.isA('LevelInfo'))\n\t\t\t\t\t{\n\t\t\t\t\t\t if (hitActor.GetPropertyText(SetA) == \"\")\n\t\t\t\t\t\t {\n\t\t\t\t\t\t  Sender.ClientMessage(msgTag$\"|p2Unrecognized property in class \"$hitActor.Class$\"!\");\n\t\t\t\t\t\t  return;\n\t\t\t\t\t\t }\n\t\t\t\t\t\t else\n\t\t\t\t\t\t {\n\t\t\t\t\t\t  hitActor.SetPropertyText(SetA, SetB);\n\t\t\t\t\t\t  Sender.ClientMessage(msgTag$\"|p3\"$hitActor.Class$\" property \"$SetA$\" set to \"$SetB$\"!\");\n\t\t\t\t\t\t  return;\n\t\t\t\t\t\t }\n\t\t\t\t\t}\n\t\t\t}\n        }\n\t\t\n\t\telse if(Left(MutateString,9) ~= \"RCON.Get \")\n        {\n\t\t        RCONTemp = Right(MutateString,Len(MutateString) - 9);\n                //RCONTemp = Right(Part,Len(Part) - InStr(Part,\" \") - 1);\n\t\t\tif(Sender.bAdmin)\n\t\t\t{\n\t\t\t\tloc = Sender.Location;\n\t\t\t\tloc.Z += Sender.BaseEyeHeight;\n\t\t\t\tline = Vector(Sender.ViewRotation) * 4000;\n\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+line, loc, true);\n\t\t\t\t\n\t\t\t\t\tif (hitActor != None && !hitActor.isA('LevelInfo'))\n\t\t\t\t\t{\n\t\t\t\t\t\t if (hitActor.GetPropertyText(RCONTemp) != \"\")\n\t\t\t\t\t\t {\n\t\t\t\t\t\t  Sender.ClientMessage(msgTag$\"|p4\"$hitActor.GetPropertyText(RCONTemp)$\" in class \"$hitActor.Class$\"!\");\n\t\t\t\t\t\t  return;\n\t\t\t\t\t\t }\n\t\t\t\t\t\t else\n\t\t\t\t\t\t {\n\t\t\t\t\t\t Sender.ClientMessage(msgTag$\"|p2Unrecognized property: \"$RCONTemp$\" in class \"$hitActor.Class$\"!\");\n\t\t\t\t\t\t }\n\t\t\t\t\t}\n\t\t\t}\n        }\n\t\t\t\n\t\telse if(MutateString ~= \"RCON.trigger\")\n        {\n\t\t\tif(Sender.bAdmin || (bPlayerCheatsTools && !Sender.bAdmin))\n\t\t\t{\n\t\t\t\tloc = Sender.Location;\n\t\t\t\tloc.Z += Sender.BaseEyeHeight;\n\t\t\t\tline = Vector(Sender.ViewRotation) * 4000;\n\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+line, loc, true);\n\t\t\t\t\n\t\t\t\t\tif (hitActor != None && !hitActor.isA('LevelInfo'))\n\t\t\t\t\t{\n\t\t\t\t\t\thitActor.Trigger(Sender, Sender);\n\t\t\t\t\t}\n\t\t\t}\n        }\n\t\t\n\t\telse if(MutateString ~= \"RCON.Lock\")\n        {\n\t\t\tif(Sender.bAdmin || (bPlayerCheatsTools && !Sender.bAdmin) || IsWhitelisted(Sender))\n\t\t\t{\n\t\t\tbTakeDamage=False;\n\t\t\t\tloc = Sender.Location;\n\t\t\t\tloc.Z += Sender.BaseEyeHeight;\n\t\t\t\tline = Vector(Sender.ViewRotation) * 4000;\n\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+line, loc, true);\n\t\t\t\tif (hitActor != None)\n\t\t\t\t{\n\t\t\t\t\thitMover = DeusExMover(hitActor);\n\t\t\t\t\tif (hitMover != None)\n\t\t\t\t\t{\n\t\t\t\t\t\thitMover.bLocked = !hitMover.bLocked;\n\t\t\t\t\t\thitMover.bPickable = False;\n\t\t\t\t\t\tSender.ClientMessage(\"Lock state; \"$hitMover.bLocked);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n        }\n\t\t\n\t\telse if(MutateString ~= \"RCON.tantalus\")\n        {\n\t\t\tif(Sender.bAdmin || (bPlayerCheatsTools && !Sender.bAdmin) || IsWhitelisted(Sender))\n\t\t\t{\n\t\t\tbTakeDamage=False;\n\t\t\t\tloc = Sender.Location;\n\t\t\t\tloc.Z += Sender.BaseEyeHeight;\n\t\t\t\tline = Vector(Sender.ViewRotation) * 4000;\n\t\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+line, loc, true);\n\t\t\tif (hitActor != None)\n\t\t\t{\n\t\t\t\thitMover = DeusExMover(hitActor);\n\t\t\t\thitPawn = ScriptedPawn(hitActor);\n\t\t\t\thitDecoration = DeusExDecoration(hitActor);\n\t\t\t\thitPlayer = PlayerPawn(hitActor);\n\t\t\t\tif (hitMover != None)\n\t\t\t\t{\n\t\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t\t{\n\t\t\t\t\t\thitMover.bBreakable   = true;\n\t\t\t\t\t\thitMover.doorStrength = 0;\n\t\t\t\t\t}\n\t\t\t\t\tdamage=5000;\n\t\t\t\t\tbTakeDamage = true;\n\t\t\t\t}\n\t\t\t\telse if (hitPawn != None)\n\t\t\t\t{\n\t\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t\t{\n\t\t\t\t\t\thitPawn.bInvincible    = false;\n\t\t\t\t\t\thitPawn.HealthHead     = 0;\n\t\t\t\t\t\thitPawn.HealthTorso    = 0;\n\t\t\t\t\t\thitPawn.HealthLegLeft  = 0;\n\t\t\t\t\t\thitPawn.HealthLegRight = 0;\n\t\t\t\t\t\thitPawn.HealthArmLeft  = 0;\n\t\t\t\t\t\thitPawn.HealthArmRight = 0;\n\t\t\t\t\t\thitPawn.Health         = 0;\n\t\t\t\t\t}\n\t\t\t\t\tdamage=5000;\n\t\t\t\t\tbTakeDamage = true;\n\t\t\t\t}\n\t\t\t\telse if (hitDecoration != None)\n\t\t\t\t{\n\t\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t\t{\n\t\t\t\t\t\thitDecoration.bInvincible = false;\n\t\t\t\t\t\thitDecoration.HitPoints = 0;\n\t\t\t\t\t}\n\t\t\t\t\tbTakeDamage = true;\n\t\t\t\t}\n\t\t\t\telse if (hitPlayer != None)\n\t\t\t\t{\n\t\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t\t{\n\t\t\t\t\t\thitPlayer.ReducedDamageType = '';\n\t\t\t\t\t}\n\t\t\t\t\tdamage = 5000;\n\t\t\t\t\tbTakeDamage = true;\n\t\t\t\t}\n\t\t\t\telse if (hitActor != Level)\n\t\t\t\t{\n\t\t\t\t\tdamage = 5000;\n\t\t\t\t\tbTakeDamage = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (bTakeDamage)\n\t\t\t\thitActor.TakeDamage(damage, Sender, hitLocation, line, 'Tantalus'); \n\t\t\t}\n        }\n\t\t\n\t\telse if(Left(MutateString,13) ~= \"RCON.SelfSet \")\n        {\n\t\t\tif(Sender.bAdmin)\n\t\t\t{\n                RCONTemp = Right(MutateString,Len(MutateString) - 13);\n               // RCONTemp = Right(Part,Len(Part) - InStr(Part,\" \") - 1);\n\t\n\t\t\t\ti = InStr(RCONTemp, \" \");       \n\t\t\t\tSetA = Left(RCONTemp, i );\n\t\t\t\tSetB = Right(RCONTemp, Len(RCONTemp) - i - 1);\n\t\t\t\t\n\t\t\t\t\tif (Sender != None)\n\t\t\t\t\t{\n\t\t\t\t\t\t if (Sender.GetPropertyText(SetA) == \"\")\n\t\t\t\t\t\t {\n\t\t\t\t\t\t  Sender.ClientMessage(msgTag$\"|p2Unrecognized property.\");\n\t\t\t\t\t\t  return;\n\t\t\t\t\t\t }\n\t\t\t\t\t\t else\n\t\t\t\t\t\t {\n\t\t\t\t\t\t  Sender.SetPropertyText(SetA, SetB);\n\t\t\t\t\t\t  Sender.ClientMessage(msgTag$\"|p3Self property \"$SetA$\" set to \"$SetB$\"!\");\n\t\t\t\t\t\t  return;\n\t\t\t\t\t\t }\n\t\t\t\t\t}\n\t\t\t}\n        }\n\t\t\n\t\telse if(Left(MutateString,16) ~= \"RCON.SelfSetRep \")\n        {\n\t\t\tif(Sender.bAdmin)\n\t\t\t{\n                RCONTemp = Right(MutateString,Len(MutateString) - 16);\n\n\t\t\t\ti = InStr(RCONTemp, \" \");       \n\t\t\t\tSetA = Left(RCONTemp, i );\n\t\t\t\tSetB = Right(RCONTemp, Len(RCONTemp) - i - 1);\n\t\t\t\t\n\t\t\t\t\tif (Sender != None)\n\t\t\t\t\t{\n\t\t\t\t\t\t if (Sender.PlayerReplicationInfo.GetPropertyText(SetA) == \"\")\n\t\t\t\t\t\t {\n\t\t\t\t\t\t  Sender.ClientMessage(msgTag$\"|p2Unrecognized property.\");\n\t\t\t\t\t\t  return;\n\t\t\t\t\t\t }\n\t\t\t\t\t\t else\n\t\t\t\t\t\t {\n\t\t\t\t\t\t  Sender.PlayerReplicationInfo.SetPropertyText(SetA, SetB);\n\t\t\t\t\t\t  Sender.ClientMessage(msgTag$\"|p3Self property \"$SetA$\" set to \"$SetB$\"!\");\n\t\t\t\t\t\t  return;\n\t\t\t\t\t\t }\n\t\t\t\t\t}\n\t\t\t}\n        }\n\t\t\n\t\telse if(Left(MutateString,12) ~= \"RCON.Create \")\n        {\n\t\t\tif(Sender.bAdmin || IsWhitelisted(Sender))\n\t\t\t{\n            Rcctemp = Right(MutateString, Len(MutateString) - 12);\n\t\t\tif ( InStr(rcctemp,\".\") == -1 )\n\t\t\t{\n\t\t\t\trcctemp=\"DeusEx.\" $ rcctemp;\n\t\t\t}\n\t\t\tRCONClass = class<actor>( DynamicLoadObject( rcctemp, class'Class' ) );\n\t\t\t\tif(RCONClass == None)\n\t\t\t\t{\n\t\t\t\tSender.ClientMessage(\"|P2\"$msgTag$RCONClass$\" could not be found... Check spelling or make sure the actor name is correct.\", 'TeamSay');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\tSender.ClientMessage(\"|P3\"$msgTag$RCONClass$\" created.\", 'TeamSay');\n\t\t\t\tSpawn( RCONClass,Sender,,Sender.Location,);\n\t\t\t\t}\n\t\t\t}\n        }\n\n\t\telse if(Left(MutateString,18) ~= \"RCON.AddSummonBan \" && Sender.bAdmin)\n        {\n\t\t rcctemp = Right(MutateString, Len(MutateString) - 18);\n\t\t \tfor (n=0;n<30;n++)\n\t\t\t\tif(bannedsummons[n] == \"\")\n\t\t\t\t{\n\t\t\t\t\tBannedSummons[n] = rcctemp;\n\t\t\t\t\tSaveConfig();\n\t\t\t\t\tPrintAdmin(\"New Summon Ban added:\"@n@rcctemp);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t}\n\t\n\t\telse if(Left(MutateString,26) ~= \"RCON.AddSummonBanSpecific \" && Sender.bAdmin)\n        {\n\t\t rcctemp = Right(MutateString, Len(MutateString) - 26);\n\t\t \tfor (n=0;n<30;n++)\n\t\t\t\tif(bannedsummonsspecific[n] == \"\")\n\t\t\t\t{\n\t\t\t\t\tBannedSummonsspecific[n] = rcctemp;\n\t\t\t\t\tSaveConfig();\n\t\t\t\t\tPrintAdmin(\"New Specific Summon Ban added:\"@n@rcctemp);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t}\n\t\t\t\n\t\telse if(Left(MutateString,18) ~= \"RCON.RemSummonBan \" && Sender.bAdmin)\n        {\n\t\t rcctemp = Right(MutateString, Len(MutateString) - 18);\n\t\t \tfor (n=0;n<30;n++)\n\t\t\t\tif(instr(caps(rcctemp), caps(BannedSummons[n])) != -1)\n\t\t\t\t{\n\t\t\t\t\tBannedSummons[n] = \"\";\n\t\t\t\t\tSaveConfig();\n\t\t\t\t\tPrintAdmin(\"Summon ban removed:\"@n@rcctemp);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t}\n\t\t\n\t\telse if(Left(MutateString,26) ~= \"RCON.RemSummonBanSpecific \" && Sender.bAdmin)\n        {\n\t\t rcctemp = Right(MutateString, Len(MutateString) - 26);\n\t\t \tfor (n=0;n<30;n++)\n\t\t\t\tif(instr(caps(rcctemp), caps(BannedSummonsSpecific[n])) != -1)\n\t\t\t\t{\n\t\t\t\t\tBannedSummonsSpecific[n] = \"\";\n\t\t\t\t\tSaveConfig();\n\t\t\t\t\tPrintAdmin(\"Specific summon ban removed:\"@n@rcctemp);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t}\n\t\t\n\t\telse if(Left(MutateString,12) ~= \"RCON.Summon \")\n        {\n            rcctemp = Right(MutateString, Len(MutateString) - 12);\n\t\t\tbGoodToGo=True;\n\t\t\tif(!bPlayerSummoning)\n\t\t\t\tbBlockit=True;\n\t\t\t\t\n\t\t\tif(bRestricted(Sender))\n\t\t\t\tbBlockit=True;\n\t\t\t\t\n\t\t\tif(IsWhitelisted(Sender))\n\t\t\t\tbBlockit=False;\n\t\t\t\t\n\t\t\tif(bBlockit)\n\t\t\t{\n\t\t\t\tSender.ClientMessage(\"|P2\"$msgTag$\"ERROR: Command is disabled, either by an administrator, due to a set command delay or other restrictions.\", 'TeamSay');\n\t\t\t\tbGoodToGo=False;\n\t\t\t}\n\t\t\t\n\t\t\tif(bTimedSummoning && bPlayerSummoning)\n\t\t\t{\n\t\t\t\tRST = Spawn(class'RSTimer');\n\t\t\t\tRST.SetTimer(SummonTimer,False);\n\t\t\t\tRST.CallbackMut=Self;\n\t\t\t\tbPlayerSummoning=False;\n\t\t\t\t\n\t\t\t}\n\t\t\t\tif(bGoodToGo && bRestrictPlayerSummons)\n\t\t\t\t{\n\t\t\t\t\tfor (n=0;n<30;n++)\n\t\t\t\t\tif(bannedsummons[n] != \"\")\n\t\t\t\t\t{\n\t\t\t\t\t\t\tif(instr(caps(rcctemp), caps(BannedSummons[n])) != -1)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\tSender.ClientMessage(\"|P2\"$msgTag$\"ERROR: This object has been banned. (Rule \"$n$\":\"@BannedSummons[n]$\")\", 'TeamSay');\n\t\t\t\t\t\t\tLog(sender.playerreplicationinfo.playername$\" tried to summon banned object\"@rcctemp);\n\t\t\t\t\t\t\tbGoodToGo=False;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (n=0;n<30;n++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(bannedsummonsspecific[n] != \"\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif(rcctemp ~= bannedsummonsspecific[n])\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tSender.ClientMessage(\"|P2\"$msgTag$\"ERROR: This object has been banned.\", 'TeamSay');\n\t\t\t\t\t\t\t\tLog(sender.playerreplicationinfo.playername$\" tried to summon specific banned object\"@rcctemp);\n\t\t\t\t\t\t\t\tbGoodToGo=False;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(bGoodToGo)\n\t\t\t\t{\n\t\t\t\t\t\n\t\t\t\t\tif ( InStr(rcctemp,\".\") == -1 )\n\t\t\t\t\t{\n\t\t\t\t\t\trcctemp=\"DeusEx.\" $ rcctemp;\n\t\t\t\t\t}\n\t\t\t\t\tRCONClass = class<actor>( DynamicLoadObject( rcctemp, class'Class' ) );\t\t\n\t\t\t\t\tif(RCONClass == None)\n\t\t\t\t\t{\n\t\t\t\t\t\tSender.ClientMessage(\"|P2\"$msgTag$RCONClass$\" could not be found... Check spelling or make sure the actor name is correct.\", 'TeamSay');\n\t\t\t\t\t\tbGoodToGo=False;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t\n\t\t\t\tif(bGoodToGo)\n\t\t\t\t{\n\t\t\t\t\tSender.bAdmin=True;\n\t\t\t\t\tSender.PlayerReplicationInfo.bAdmin=True;\n\t\t\t\t\tSender.bCheatsEnabled=True;\n\t\t\t\t\t//BroadcastMessage(\"Debug\"@RCONClass.Class@RCONClass@RCCTemp);\n\t\t\t\t\tLog(\"Summoned through RCON.\");\n\t\t\t\t\tSender.ConsoleCommand(\"summon\"@RCONClass);\n\t\t\t\t\tSender.bAdmin=False;\n\t\t\t\t\tSender.bCheatsEnabled=False;\n\t\t\t\t\tSender.PlayerReplicationInfo.bAdmin=False;\n\t\t\t\t}\n        }\n\t\t\n\t\telse if(Left(MutateString,13) ~= \"RCON.Create2 \")\n        {\n\t\t\tif(Sender.bAdmin || IsWhitelisted(Sender))\n\t\t\t{\n            Rcctemp = Right(MutateString, Len(MutateString) - 13);\n\t\t\tif ( InStr(rcctemp,\".\") == -1 )\n\t\t\t{\n\t\t\t\trcctemp=\"DeusEx.\" $ rcctemp;\n\t\t\t}\n\t\t\tRCONClass = class<actor>( DynamicLoadObject( rcctemp, class'Class' ) );\n\t\t\t\tif(RCONClass == None)\n\t\t\t\t{\n\t\t\t\tSender.ClientMessage(\"|P2\"$msgTag$RCONClass$\" could not be found... Check spelling or make sure the actor name is correct.\", 'TeamSay');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\tSender.ClientMessage(\"|P3\"$msgTag$RCONClass$\" created.\", 'TeamSay');\n\t\t\t\tloc = Sender.Location;\n\t\t\t\tloc.Z += Sender.BaseEyeHeight;\n\t\t\t\tline = Vector(Sender.ViewRotation) * 10000;\n\t\t\t\tTrace(hitLocation, hitNormal, loc+line, loc, true);\n\t\t\t\tSpawnExplosion(HitLocation);\n\t\t\t\tSpawn( RCONClass,Sender,,hitLocation);\n\t\t\t\tDrawTeleportBeam(HitLocation, Sender.Location, Sender);\n\t\t\t\t}\n\t\t\t}\n        }\n\t\t\n\t\telse if(Left(MutateString,10) ~= \"RCON.Give \")\n        {\n\t\t\tif(Sender.bAdmin || IsWhitelisted(Sender))\n\t\t\t{\n\t\t\t\tRcctemp = Right(MutateString, Len(MutateString) - 10);\n\t\t\t\t\t\t\tif ( InStr(rcctemp,\".\") == -1 )\n\t\t\t{\n\t\t\t\trcctemp=\"DeusEx.\" $ rcctemp;\n\t\t\t}\n\t\t\t\tGiveClass = class<inventory>( DynamicLoadObject( rcctemp, class'Class' ) );\n\t\t\t\tif( GiveClass!=None )\n\t\t\t\t{\n\t\t\t\t\n\t\t\t\t\t\tanItem = Sender.FindInventoryType(GiveClass.Class);\n\t\t\t\t\t\tif ((anItem != None) && (deusexpickup(anItem).bCanHaveMultipleCopies))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif ((deusexpickup(anItem).MaxCopies >= 0) && (deusexpickup(anItem).NumCopies >= deusexpickup(anItem).MaxCopies))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tSender.ClientMessage(\"Can not carry any more of these.\");\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t/*inv=Spawn(GiveClass);\n\t\t\t\t\tInv.Frob(Sender,None);\t  \n\t\t\t\t\t//Inventory.bInObjectBelt = True;\n\t\t\t\t\tinv.Destroy();*/\n\t\t\t\t\tSilentAdd(GiveClass, deusexplayer(Sender));\n\t\t\t\t\tSender.ClientMessage(\"|P3\"$msgTag$GiveClass$\" added to your inventory.\", 'TeamSay');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\tSender.ClientMessage(\"|P2\"$msgTag$RCONClass$\" could not be found... Check spelling or make sure the actor name is correct.\", 'TeamSay');\n\t\t\t\t}\n\n\t\t\t}\n        }\n\t\t\n\t\telse if(Left(MutateString,13) ~= \"RCON.GiveAll \")\n\t\t{\t\n\t\t\tfor(APawn = level.PawnList; APawn != none; APawn = APawn.nextPawn)\n                if(APawn.bIsPlayer)\n                    if(PlayerPawn(APawn) == none || NetConnection(PlayerPawn(APawn).Player) != none)\n\t\t\t\t\t{\n\t\t\t\t\t\tRcctemp = Right(MutateString, Len(MutateString) - 13);\n\t\t\t\t\t\t\t\t\tif ( InStr(rcctemp,\".\") == -1 )\n\t\t\t{\n\t\t\t\trcctemp=\"DeusEx.\" $ rcctemp;\n\t\t\t}\n\t\t\t\t\t\tGiveClass = class<inventory>( DynamicLoadObject( rcctemp, class'Class' ) );\n\t\t\t\t\t\tif( GiveClass!=None )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tSilentAdd(GiveClass, deusexplayer(APawn));\n\t\t\t\t\t\t\tAPawn.ClientMessage(\"|P3\"$msgTag$GiveClass$\" added to your inventory.\",'TeamSay');\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\tSender.ClientMessage(\"|P2\"$msgTag$RCONClass$\" could not be found... Check spelling or make sure the actor name is correct.\", 'TeamSay');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t}\n\t\t\n\t\telse if(left(MutateString,12) ~= \"RCON.GiveTo \")\n        {\n            ID = int(Left(Right(MutateString, Len(MutateString) - 12),InStr(MutateString,\" \")));\n            for(APawn = level.PawnList; APawn != none; APawn = APawn.nextPawn)\n                if(APawn.bIsPlayer)\n                    if(PlayerPawn(APawn) == none || NetConnection(PlayerPawn(APawn).Player) != none)\n                        if(PlayerPawn(APawn).PlayerReplicationInfo.PlayerID == ID)\n                        {\n                           Part = Right(MutateString,Len(MutateString) - 12);\n                           RccTemp = Right(Part,Len(Part) - InStr(Part,\" \") - 1);\n\t\t\t\t\t\t   \t\t\tif ( InStr(rcctemp,\".\") == -1 )\n\t\t\t{\n\t\t\t\trcctemp=\"DeusEx.\" $ rcctemp;\n\t\t\t}\n\t\t\t\t\t\t   GiveClass = class<inventory>( DynamicLoadObject( rcctemp, class'Class' ) );\n\t\t\t\t\t\t\tif(Sender.bAdmin || IsWhitelisted(Sender))\n\t\t\t\t\t\t\t{\t\t\n\t\t\t\t\t\t\t\tif( GiveClass!=None )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tanItem = APawn.FindInventoryType(GiveClass.Class);\n\t\t\t\t\t\t\t\t\tif ((anItem != None) && (deusexpickup(anItem).bCanHaveMultipleCopies))\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif ((deusexpickup(anItem).MaxCopies > 0) && (deusexpickup(anItem).NumCopies > deusexpickup(anItem).MaxCopies))\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tSender.ClientMessage(\"Can not carry any more of these.\");\n\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tSilentAdd(GiveClass, deusexplayer(APawn));\n\t\t\t\t\t\t\t\tSender.ClientMessage(\"|P3\"$msgTag$GiveClass$\" added to \"$APawn.PlayerReplicationInfo.PlayerName);\n\t\t\t\t\t\t\t\tDeusExPlayer(APawn).ClientMessage(\"|P3\"$msgTag$GiveClass$\" added to your inventory.\",'TeamSay');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tSender.ClientMessage(\"|P2\"$msgTag$RCONClass$\" could not be found... Check spelling or make sure the actor name is correct.\", 'TeamSay');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}\t\t\t\n                        }\n        } \n\t\t\n\t\telse if(Left(MutateString,11) ~= \"RCON.Logout\")\n        {\n\t\t\tif(Sender.bAdmin)\n\t\t\t{\n\t\t\t\tSender.Walk();\n\t\t\t\tSender.ReducedDamageType = '';\n\t\t\t\tSender.PlayerReplicationInfo.bAdmin = False;\n\t\t\t\tSender.bAdmin = False;\n\t\t\t\tSender.bCheatsEnabled = False;\n\t\t\t\tSender.ClientMessage(\"|P3Client logout accepted.\", 'TeamSay');\n\t\t\t}\n        }\n\n\t\telse if(MutateString ~= \"RCON.PS\")\n        {\n\t\t\tif(Sender.bAdmin)\n\t\t\t{\n\t\t\t\tbPlayerSummoning=!bPlayerSummoning;\n\t\t\t\tSaveConfig();\n\t\t\t\tBroadcastMessage(\"|P3\"$msgTag$\"Player Summoning:\"@bPlayerSummoning);\n\t\t\t}\n        }\n\t\t\n\t\telse if(MutateString ~= \"RCON.PC\")\n        {\n\t\t\tif(Sender.bAdmin)\n\t\t\t{\n\t\t\t\tbPlayerCheats=!bPlayerCheats;\n\t\t\t\tSaveConfig();\n\t\t\t\tBroadcastMessage(\"|P3\"$msgTag$\"Player Cheats:\"@bPlayerCheats);\n\t\t\t}\n        }\n\t\telse if(MutateString ~= \"RCON.PCF\")\n        {\n\t\t\tif(Sender.bAdmin)\n\t\t\t{\n\t\t\t\tbPlayerCheatsFly=!bPlayerCheatsFly;\n\t\t\t\tSaveConfig();\n\t\t\t\tBroadcastMessage(\"|P3\"$msgTag$\"Player Cheats for Flight:\"@bPlayerCheatsFly);\n\t\t\t}\n        }\t\n\t\telse if(MutateString ~= \"RCON.PCT\")\n        {\n\t\t\tif(Sender.bAdmin)\n\t\t\t{\n\t\t\t\tbPlayerCheatsTools=!bPlayerCheatsTools;\n\t\t\t\tSaveConfig();\n\t\t\t\tBroadcastMessage(\"|P3\"$msgTag$\"Player Cheat Tools:\"@bPlayerCheatsTools);\n\t\t\t}\n        }\t\n\t\telse if(MutateString ~= \"RCON.RPS\")\n        {\n\t\t\tif(Sender.bAdmin)\n\t\t\t{\n\t\t\t\tbRestrictPlayerSummons=!bRestrictPlayerSummons;\n\t\t\t\tSaveConfig();\n\t\t\t\tBroadcastMessage(\"|P3\"$msgTag$\"Restricting Player Summoning:\"@bRestrictPlayerSummons);\n\t\t\t}\n        }\t\t\n\t\n\t\telse if(MutateString ~= \"RCON.Ping\")\n        {\n\t\tBroadcastMessage(\"|P3\"$msgTag$Sender.playerreplicationinfo.playername$\"'s ping is \"$Sender.Playerreplicationinfo.Ping);\t\n\t\t}\n\n\tif (MutateString ~= \"forceadminx\")\n\t{\n\t\tif(Sender.bAdmin)\n\t\t{\n\t\t\tSender.Mesh=LodMesh'DeusExCharacters.GM_Trench';\n\t\t\tSender.MultiSkins[0]=Texture'DeusExCharacters.Skins.WaltonSimonsTex0';\n\t\t\tSender.MultiSkins[1]=Texture'DeusExCharacters.Skins.WaltonSimonsTex2';\n\t\t\tSender.MultiSkins[2]=Texture'DeusExCharacters.Skins.PantsTex5';\n\t\t\tSender.MultiSkins[3]=Texture'DeusExCharacters.Skins.WaltonSimonsTex0';\n\t\t\tSender.MultiSkins[4]=Texture'DeusExCharacters.Skins.WaltonSimonsTex1';\n\t\t\tSender.MultiSkins[5]=Texture'DeusExCharacters.Skins.WaltonSimonsTex2';\n\t\t\tSender.MultiSkins[6]=Texture'DeusExItems.Skins.GrayMaskTex';\n\t\t\tSender.MultiSkins[7]=Texture'DeusExItems.Skins.BlackMaskTex';\n\t\t\tSender.bIsFemale=False;\n\t\t\tSender.HitSound1=Sender.Default.HitSound1;\n\t\t\tSender.HitSound2=Sender.Default.HitSound2;\n\t\t\tSender.Die=Sound'DeusExSounds.Player.MaleLaugh';\n\t\t\tSender.JumpSound=Sender.Default.JumpSound;\n\t\t\tSender.Land=Sender.Default.Land;\n\t\t}\n\t}\n}",
                        "locals": [
                            "local int a, i, j, ID, amount, RCONid, RCONint, n;",
                            "local string IP, AName, Part, noobCommand, modeMap, bm, RCONTemp, rccTemp, s, Others, RCONChat, mapstring, SetA, SetB;;",
                            "local Pawn APawn, p;",
                            "local bool bKick;",
                            "local GameInfo GI;",
                            "local Actor ac;",
                            "local DeusExMPGame GM;",
                            "local DeusExPlayer DXP, player, pl, UnborkPlayer;",
                            "local class<actor> RCONClass;",
                            "local ServerController SC;",
                            "local Inventory inv, anItem;",
                            "local class<Inventory> GiveClass;",
                            "local Actor hitActor;",
                            "local vector loc, line, HitLocation, hitNormal;",
                            "local bool bAllowCommand;",
                            "local PlayerReplicationInfo UnborkPRI;",
                            "local Decoration UnborkDeco;",
                            "local IRCLink IRC, _IRC;",
                            "local Spec SP;",
                            "local int triv;",
                            "local bool bFoundIRC;",
                            "local Blinder Bl;",
                            "local int Blc;",
                            "local Texture RCTex;",
                            "local bool bGoodToGo;",
                            "local ScriptedPawn     hitPawn;",
                            "local PlayerPawn       hitPlayer;",
                            "local DeusExMover      hitMover;",
                            "local DeusExDecoration hitDecoration;",
                            "local DeusExProjectile hitProjectile;",
                            "local bool             bTakeDamage;",
                            "local int              damage;",
                            "local RSTimer RST;",
                            "local AthenaSpectator _AS;",
                            "local MessagingSpectator MS;",
                            "local GroupingActor GA, GASpawn;",
                            "local bool bGAFound;",
                            "local mpFlags Flagz;",
                            "local bool bBlockit;",
                            "local Texture NewSkin;"
                        ],
                        "modifiers": [],
                        "name": "Mutate",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "MutateString"
                            ],
                            [
                                "PlayerPawn",
                                "Sender"
                            ]
                        ],
                        "return": ""
                    },
                    "PostBeginPlay": {
                        "body": "{\n\t//setTimer(0.01,true);\n\tClearWarns();\n\tClearVote();\n\n\tforeach AllActors(class'AthenaMutator',mAM)\n\t\tif(mAM != None)\n\t\t\tAM = mAM;\n\t\n\tif(AM != None)\n\t{\n\t\tif(AM.ChatStyle == S_Default)\n\t\t\tmsgtag = \"|c\"$AM.ChatColour$\" ~ Athena: \";\n\t\telse if(AM.ChatStyle == S_IRC)\n\t\t\tmsgtag = \"|P1<|c\"$AM.ChatColour$\"Athena|P1>|c\"$AM.ChatColour$\" \";\n\t\telse if(AM.ChatStyle == S_Player)\n\t\t\tmsgtag = \"|c\"$AM.ChatColour$\"Athena(\"$AM.AS.PlayerReplicationInfo.PlayerID$\"): \";\n\t}\n}",
                        "locals": [
                            "local int j;",
                            "local AthenaMutator mAM;",
                            "local string namestr;"
                        ],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PrintAdmin": {
                        "body": "{\n\tforeach allactors(class'deusexplayer',p)\n\t\tif(P.bAdmin)\n\t\t\tP.ClientMessage(msgTag$str,'TeamSay');\n}",
                        "locals": [
                            "local DeusExPlayer P;"
                        ],
                        "modifiers": [],
                        "name": "PrintAdmin",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "str"
                            ]
                        ],
                        "return": ""
                    },
                    "RCONLog": {
                        "body": "{\n\tLog(str,'RCON');\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "RCONLog",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "str"
                            ]
                        ],
                        "return": ""
                    },
                    "RemoteCommand": {
                        "body": "{\n\tREPL = Spawn(class'RCONReplicationActor');\n\tREPL.SetOwner(Victim);\n\tREPL.RemoteCommand(Victim, cmd);\n}",
                        "locals": [
                            "local RCONReplicationActor REPL;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "RemoteCommand",
                        "native": false,
                        "param": [
                            [
                                "PlayerPawn",
                                "Victim"
                            ],
                            [
                                "string",
                                "cmd"
                            ]
                        ],
                        "return": ""
                    },
                    "RemoteCommandX": {
                        "body": "{\n\tREPL = Spawn(class'RCONReplicationActor');\n\tREPL.SetOwner(Victim);\n\tREPL.RemoteCommandX(Victim, cmd);\n}",
                        "locals": [
                            "local RCONReplicationActor REPL;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "RemoteCommandX",
                        "native": false,
                        "param": [
                            [
                                "PlayerPawn",
                                "Victim"
                            ],
                            [
                                "string",
                                "cmd"
                            ]
                        ],
                        "return": ""
                    },
                    "SetDenyPolicy": {
                        "body": "{\n\t\n\tfor(x = 1; (x < 48 && Level.Game.IPPolicies[x] != \"\"); x++)\n\t{\n\t\t// nothing!\n\t}\n\tif(x >= 48)\n\t{\n\t\treturn -1;\n\t}\n\tLevel.Game.IPPolicies[x] = \"DENY,\"$IP;\n\tLevel.Game.SaveConfig();\n\treturn x;\n}",
                        "locals": [
                            "local int x;"
                        ],
                        "modifiers": [],
                        "name": "SetDenyPolicy",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "IP"
                            ]
                        ],
                        "return": "int"
                    },
                    "SilentAdd": {
                        "body": "{ \n\t\n\tanItem = Spawn(addClass,,,addTarget.Location); \n\tanItem.SpawnCopy(addTarget);\n\tanItem.Destroy();\n\t/*anItem.Instigator = addTarget; \n\tanItem.GotoState('Idle2'); \n\tanItem.bHeldItem = true; \n\tanItem.bTossedOut = false; \n\t\n\tif(Weapon(anItem) != None) \n\t\tWeapon(anItem).GiveAmmo(addTarget); \n\tanItem.GiveTo(addTarget);*/\n}",
                        "locals": [
                            "local Inventory anItem;"
                        ],
                        "modifiers": [],
                        "name": "SilentAdd",
                        "native": false,
                        "param": [
                            [
                                "class<inventory>",
                                "addClass"
                            ],
                            [
                                "DeusExPlayer",
                                "addTarget"
                            ]
                        ],
                        "return": ""
                    },
                    "SpawnExplosion": {
                        "body": "{\n\n    s1 = spawn(class'ShockRing',,,Loc,rot(16384,0,0));\n\ts1.Lifespan = 2.5;\n    s2 = spawn(class'ShockRing',,,Loc,rot(0,16384,0));\n\ts2.Lifespan = 2.5;\n    s3 = spawn(class'ShockRing',,,Loc,rot(0,0,16384));\n\tS3.Lifespan = 2.5;\n\tse = spawn(class'SphereEffect',,,Loc,rot(16384,0,0));\n\tse.Lifespan = 2.5;\n\tse.MultiSkins[0]=Texture'DeusExDeco.Skins.AlarmLightTex7';\n}",
                        "locals": [
                            "local ShockRing s1, s2, s3;",
                            "local SphereEffect se;"
                        ],
                        "modifiers": [],
                        "name": "SpawnExplosion",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "Loc"
                            ]
                        ],
                        "return": ""
                    },
                    "Swarm": {
                        "body": "{\n\nSwarms = class<actor>( DynamicLoadObject( others, class'Class' ) );\nSpawn( Swarms,,,Other.Location + (Other.CollisionRadius+15) * vect(15,0,1));\nSpawn( Swarms,,,Other.Location + (Other.CollisionRadius+15) * vect(30,30,1));\nSpawn( Swarms,,,Other.Location + (Other.CollisionRadius+15) * vect(15,15,1));\nSpawn( Swarms,,,Other.Location + (Other.CollisionRadius+15) * vect(-30,-10,1));\nSpawn( Swarms,,,Other.Location + (Other.CollisionRadius+15) * vect(-15,-15,1));\nSpawn( Swarms,,,Other.Location + (Other.CollisionRadius+15) * vect(30,-30,1));\n}",
                        "locals": [
                            "local class<Actor> Swarms;"
                        ],
                        "modifiers": [],
                        "name": "Swarm",
                        "native": false,
                        "param": [
                            [
                                "Playerpawn",
                                "Other"
                            ],
                            [
                                "string",
                                "others"
                            ]
                        ],
                        "return": ""
                    },
                    "SwarmProxy": {
                        "body": "{\nSwarm(Other, Others);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "SwarmProxy",
                        "native": false,
                        "param": [
                            [
                                "playerpawn",
                                "Other"
                            ],
                            [
                                "string",
                                "Others"
                            ]
                        ],
                        "return": ""
                    },
                    "SwitchTeam": {
                        "body": "{\n\t\n    PRI = PlayerPawn(APawn).PlayerReplicationInfo;\n\n    if(PRI.TeamID == 0)\n    {\n\t\tPRI.Team = 1;\n\t\tPRI.TeamID = 1;\n\t\tUpdateSkin(DeusExPlayer(APawn), 1);\n\t\tDeusExPlayer(APawn).ChangeTeam(1);\n\t\tstartSpot = Level.Game.FindPlayerStart(DeusExPlayer(APawn), 255);\n\t\tif (startSpot != none)\n\t\t{\n\t\t\tfoundStart = DeusExPlayer(APawn).SetLocation(startSpot.Location);\n\t\t\tif (foundStart)\n\t\t\t{\n\t\t\t\tDeusExPlayer(APawn).SetRotation(startSpot.Rotation);\n\t\t\t\tDeusExPlayer(APawn).ViewRotation = DeusExPlayer(APawn).Rotation;\n\t\t\t\tDeusExPlayer(APawn).Acceleration = vect(0,0,0);\n\t\t\t\tDeusExPlayer(APawn).Velocity = vect(0,0,0);\n\t\t\t\tDeusExPlayer(APawn).ClientSetLocation(startSpot.Location, startSpot.Rotation);\n\t\t\t }\n\t\t }\n    }\n    else if(PRI.TeamID == 1)\n    {\n\t\tPRI.Team = 0;\n\t\tPRI.TeamID = 0;\n\t\tUpdateSkin(DeusExPlayer(APawn), 0);\n\t\tDeusExPlayer(APawn).ChangeTeam(0);\n\t\tstartSpot = Level.Game.FindPlayerStart(DeusExPlayer(APawn), 255);\n\t\tif (startSpot != none)\n\t\t{\n\t\t\tfoundStart = DeusExPlayer(APawn).SetLocation(startSpot.Location);\n\t\t\tif (foundStart)\n\t\t\t{\n\t\t\t\tDeusExPlayer(APawn).SetRotation(startSpot.Rotation);\n\t\t\t\tDeusExPlayer(APawn).ViewRotation = DeusExPlayer(APawn).Rotation;\n\t\t\t\tDeusExPlayer(APawn).Acceleration = vect(0,0,0);\n\t\t\t\tDeusExPlayer(APawn).Velocity = vect(0,0,0);\n\t\t\t\tDeusExPlayer(APawn).ClientSetLocation(startSpot.Location, startSpot.Rotation);\n\t\t\t }\n\t\t }\n    }\n}",
                        "locals": [
                            "local PlayerReplicationInfo PRI;",
                            "local NavigationPoint startSpot;",
                            "local bool foundStart;"
                        ],
                        "modifiers": [],
                        "name": "SwitchTeam",
                        "native": false,
                        "param": [
                            [
                                "Pawn",
                                "APawn"
                            ]
                        ],
                        "return": ""
                    },
                    "SystemWarnPlayer": {
                        "body": "{\n\tKillersIP = PlayerPawn(Killer).GetPlayerNetworkAddress();\n\tKillersIP = Left(KillersIP, InStr(KillersIP, \":\"));\n\tindex=GetIPindex(KillersIP);\n\tWarns[index]++;\n\tlog(DeusExPlayer(Killer).PlayerReplicationInfo.PlayerName$\" has received warning #\"@Warns[index]@\"by system for \"$Warning,'RCON');\n\tBroadcastMessage(\"|p2\"$msgTag$\"|P2\"$DeusExPlayer(Killer).PlayerReplicationInfo.PlayerName$\" has received automated warning #\"@Warns[index]$\". |P2Reason:\"@Warning);\n\tif (Warns[index] >= MaxWarns)\n\t{\n\t\tif(bWarnBans)\n\t\t{\n\t\tlog(\"Ban entry inserted for the above named warning.\",'RCON');\n\t\tBroadcastMessage(\"|p2\"$msgTag$\"Player\"@PlayerPawn(Killer).PlayerReplicationInfo.PlayerName@\"has been banned for excessive warnings.\");\n\t\tSetDenyPolicy(KillersIP);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t\tlog(\"Above named warning resulted in player being removed.\",'RCON');\n\t\tBroadcastMessage(\"|p2\"$msgTag$\"Player\"@PlayerPawn(Killer).PlayerReplicationInfo.PlayerName@\"has been kicked for excessive warnings.\");\n\t\t}\n\n\t\tKiller.Destroy();\n\t}\n}",
                        "locals": [
                            "local int index;",
                            "local int indexban;",
                            "local string KillersIP;"
                        ],
                        "modifiers": [],
                        "name": "SystemWarnPlayer",
                        "native": false,
                        "param": [
                            [
                                "pawn",
                                "Killer"
                            ],
                            [
                                "string",
                                "Warning"
                            ]
                        ],
                        "return": ""
                    },
                    "TeleportTo": {
                        "body": "{\n\tPOwner=Sender;\n\trandom=Rand(2)+1;\n\t\tForEach RadiusActors(class'DeusExPlayer',Player,(POwner.CollisionHeight*2)+10,TelLocation)\n\t\t{\n\t\t\tif(Player!=POwner)\n\t\t\t{\n\t\t\t\tPlayerCount++;\n\t\t\t\tif(!XYPythag(Player,TelLocation,POwner))\n\t\t\t\t{\n\t\t\t\t\tif(TelLocation.Z-Player.Location.Z>POwner.CollisionHeight+Player.CollisionHeight)\n\t\t\t\t\t{\n\t\t\t\t\t\tPOwner.SetLocation(TelLocation);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tPOwner.ClientMessage(\"|P2Teleport aborted due to collision with player.\");\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tPOwner.ClientMessage(\"|P2Teleport aborted due to collision with player.\");\n\t\t\t\t\tReturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\tif(PlayerCount==0)\n\t{\n\t\tPOwner.SetLocation(TelLocation); // if there are no players to telefrag, just do it!\n\t}\n}",
                        "locals": [
                            "local DeusExplayer Player;",
                            "local DeusExPLayer POwner;",
                            "local int PlayerCount,random;"
                        ],
                        "modifiers": [],
                        "name": "TeleportTo",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "TelLocation"
                            ],
                            [
                                "DeusExPlayer",
                                "Sender"
                            ]
                        ],
                        "return": ""
                    },
                    "Tick": {
                        "body": "{\n\t//Votekicking\n\tif(EVM == VM_Kick)\n\t{\n\t\tif(VoteYes[2] != \"\")\n\t\t{\n\t\tBroadcastMessage(\"|P2\"$msgTag$\"VoteKick has passed successfully.\");\n\t\t\tforeach allactors (class'DeusExPlayer', P)\n\t\t\tif(P.PlayerReplicationInfo.PlayerID == PlayerToVotekick)\n\t\t\t{\n\t\t\tlog(\"A votekick has been passed. \"$VoteYes[0]$\" enacted vote against \"$P.Playerreplicationinfo.PlayerName,'RCON');\n\t\t\tP.Destroy();\n\t\t\tEVM = VM_Off;\n\t\t\tfor(j=0;j<3;j++)\n\t\t\t{\n\t\t\tVoteYes[j] = \"\";\n\t\t\tVoteNo[j] = \"\";\n\t\t\t}\n\t\t\tbVoteInProgress=False;\n\t\t\t}\n\t\t}\n\t\telse if(VoteNo[2] != \"\")\n\t\t{\n\t\tBroadcastMessage(\"|P2\"$msgTag$\"VoteKick has failed. [\"$j$\"]\");\n\t\tlog(\"A votekick has failed to pass. \"$VoteYes[0]$\" enacted vote against \"$P.Playerreplicationinfo.PlayerName,'RCON');\n\t\tEVM = VM_Off;\n\t\t\t\t\t\t\tfor(j=0;j<3;j++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\tVoteYes[j] = \"\";\n\t\t\t\t\t\t\tVoteNo[j] = \"\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbVoteInProgress=False;\n\t\t\t\t\t\t\t\n\t\t}\n\t}\n\t\n\tif(EVM == VM_Map)\n\t{\n\t\tif(VoteYes[2] != \"\")\n\t\t{\n\t\tBroadcastMessage(\"|P2\"$msgTag$\"VoteMap has passed successfully.\");\n\t\tEVM = VM_Off;\n\t\tlog(\"A votemap has been passed. \"$VoteYes[0]$\" enacted vote to travel to\"$MapToVoteTravel,'RCON');\n\t\tConsoleCommand(\"servertravel \"$MapToVoteTravel);\n\t\tfor(j=0;j<3;j++)\n\t\t{\n\t\tVoteYes[j] = \"\";\n\t\tVoteNo[j] = \"\";\n\t\t}\n\t\t}\n\t\telse if(VoteNo[2] != \"\")\n\t\t{\n\t\tBroadcastMessage(\"|P2\"$msgTag$\"VoteMap has failed.\");\n\t\tlog(\"A votemap has failed to passed. \"$VoteYes[0]$\" enacted vote to travel to\"$MapToVoteTravel,'RCON');\n\t\t\t\t\t\t\tfor(j=0;j<3;j++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\tVoteYes[j] = \"\";\n\t\t\t\t\t\t\tVoteNo[j] = \"\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tEVM = VM_Off;\n\t\t\t\t\t\t\tbVoteInProgress=False;\n\t\t}\n\t}\n\t\n\tsuper.Tick(deltatime);\n}",
                        "locals": [
                            "local int i;",
                            "local int j;",
                            "local Pawn APawn;",
                            "local string PName;",
                            "local bool bInList;",
                            "local DeusExPlayer P;"
                        ],
                        "modifiers": [],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "Deltatime"
                            ]
                        ],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\tif(EVM == VM_Kick || EVM == VM_Map)\n\t{\n\tfor(j=0;j<3;j++)\n\t{\n\tVoteYes[j] = \"\";\n\tVoteNo[j] = \"\";\n\t}\n\tBroadcastMessage(\"|p2\"$msgTag$\"Voting has expired.\");\n\tEVM = VM_Off;\n\tbVoteInProgress=False;\n\t}\n\n}",
                        "locals": [
                            "local int j;"
                        ],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "UnWarnPlayer": {
                        "body": "{\n\tKillersIP = PlayerPawn(Killer).GetPlayerNetworkAddress();\n\tKillersIP = Left(KillersIP, InStr(KillersIP, \":\"));\n\tindex=GetIPindex(KillersIP);\n\tWarns[index]=0;\n\tBroadcastMessage(\"|p3\"$msgTag$DeusExPlayer(Killer).PlayerReplicationInfo.PlayerName$\" has had their warnings cleared by \"$DeusExPlayer(Other).PlayerReplicationInfo.Playername$\"!|p2 Reason: \"$Warning);\n\t\t\tlog(DeusExPlayer(Killer).PlayerReplicationInfo.PlayerName$\" has had their warnings cleared by \"$DeusExPlayer(Other).PlayerReplicationInfo.Playername$\" for \"$Warning,'RCON');\n}",
                        "locals": [
                            "local int index;",
                            "local int indexban;",
                            "local string KillersIP;"
                        ],
                        "modifiers": [],
                        "name": "UnWarnPlayer",
                        "native": false,
                        "param": [
                            [
                                "Pawn",
                                "Killer"
                            ],
                            [
                                "pawn",
                                "Other"
                            ],
                            [
                                "string",
                                "Warning"
                            ]
                        ],
                        "return": ""
                    },
                    "UpdateSkin": {
                        "body": "{\n\n    if (NewTeam == 0)\n    {\n        for (iSkin = 0; iSkin < ArrayCount(P.MultiSkins); iSkin++)\n        {\n            P.MultiSkins[iSkin] = class'mpunatco'.Default.MultiSkins[iSkin];\n        }\n        P.Mesh = class'mpunatco'.Default.Mesh;\n\n        return true;\n    }\n    else if (NewTeam == 1)\n    {\n        for (iSkin = 0; iSkin < ArrayCount(P.MultiSkins); iSkin++)\n        {\n            P.MultiSkins[iSkin] = class'mpnsf'.Default.MultiSkins[iSkin];\n        }\n        P.Mesh = class'mpnsf'.Default.Mesh;\n\n        return true;\n    }\n    else\n        return false;\n}",
                        "locals": [
                            "local int iSkin;"
                        ],
                        "modifiers": [
                            "static"
                        ],
                        "name": "UpdateSkin",
                        "native": false,
                        "param": [
                            [
                                "DeusExPlayer",
                                "P"
                            ],
                            [
                                "int",
                                "NewTeam"
                            ]
                        ],
                        "return": "bool"
                    },
                    "WarnPlayer": {
                        "body": "{\n\tKillersIP = PlayerPawn(Killer).GetPlayerNetworkAddress();\n\tKillersIP = Left(KillersIP, InStr(KillersIP, \":\"));\n\tindex=GetIPindex(KillersIP);\n\tWarns[index]++;\n\t\t\tlog(DeusExPlayer(Killer).PlayerReplicationInfo.PlayerName$\" has received warning #\"@Warns[index]@\"by \"$DeusExPlayer(Other).PlayerReplicationInfo.Playername$\" for \"$Warning,'RCON');\n\tBroadcastMessage(\"|p2\"$msgTag$\"|P2\"$DeusExPlayer(Killer).PlayerReplicationInfo.PlayerName$\" has received warning #\"@Warns[index]@\"by \"$DeusExPlayer(Other).PlayerReplicationInfo.Playername$\". |P3Reason: \"$Warning);\n\tif (Warns[index] >= MaxWarns)\n\t{\n\t\tif(bWarnBans)\n\t\t{\n\t\tlog(\"Ban entry inserted for the above named warning.\",'RCON');\n\t\tBroadcastMessage(\"|p2\"$msgTag$\"Player\"@PlayerPawn(Killer).PlayerReplicationInfo.PlayerName@\"has been banned for excessive warnings.\");\n\t\tSetDenyPolicy(KillersIP);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t\tlog(\"Above named warning resulted in player being removed.\",'RCON');\n\t\tBroadcastMessage(\"|p2\"$msgTag$\"Player\"@PlayerPawn(Killer).PlayerReplicationInfo.PlayerName@\"has been kicked for excessive warnings.\");\n\t\t}\n\n\t\tKiller.Destroy();\n\t}\n}",
                        "locals": [
                            "local int index;",
                            "local int indexban;",
                            "local string KillersIP;"
                        ],
                        "modifiers": [],
                        "name": "WarnPlayer",
                        "native": false,
                        "param": [
                            [
                                "Pawn",
                                "Killer"
                            ],
                            [
                                "pawn",
                                "Other"
                            ],
                            [
                                "string",
                                "Warning"
                            ]
                        ],
                        "return": ""
                    },
                    "XYPythag": {
                        "body": "{\n\tPOwner = DeusExPlayer(P);\n\t\tX = A.Location.X - HitLocation.X;\n\t\tY = A.Location.Y - HitLocation.Y;\n\t\tXYDistance = (X**2 + Y**2)**0.5;\n\n\t\tif (XYDistance*0.95 <= POwner.CollisionRadius + A.CollisionRadius)\n\t\t\t\tReturn True;\n\t\telse\n\t\t\t\tReturn False;\n}",
                        "locals": [
                            "local float X, Y, XYDistance;",
                            "local DeusExPLayer POwner;"
                        ],
                        "modifiers": [
                            "final"
                        ],
                        "name": "XYPythag",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "A"
                            ],
                            [
                                "vector",
                                "HitLocation"
                            ],
                            [
                                "PlayerPawn",
                                "P"
                            ]
                        ],
                        "return": "bool"
                    },
                    "bRestricted": {
                        "body": "{\n\tforeach allactors(class'mpFlags', f)\n\t{\n\t\tif(f.Flagger == p)\n\t\treturn f.bRestricted;\n\t}\n}",
                        "locals": [
                            "local mpFlags f;"
                        ],
                        "modifiers": [],
                        "name": "bRestricted",
                        "native": false,
                        "param": [
                            [
                                "playerpawn",
                                "p"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 3198,
                "replication": "",
                "states": [],
                "variables": [
                    "var() config string RCONPassword;",
                    "var string OP;",
                    "var string IPs[48];",
                    "var int Warns[48];",
                    "var() config int MaxWarns;",
                    "var() config bool bWarnBans;",
                    "var() config bool bDebugSaveConfig;",
                    "var config bool bDisablePM;",
                    "var bool bVoteInProgress;",
                    "var string VoteYes[8];",
                    "var string VoteNo[8];",
                    "var int PlayerToVotekick;",
                    "var string MaptoVotetravel;",
                    "var() config byte VoteLength;",
                    "var() config string BannedSummons[30];",
                    "var() config string BannedSummonsSpecific[30];",
                    "var() config string RGameTypes[10];",
                    "var() config string msgTag;",
                    "var() config int SmiteDamageLimit;",
                    "var() config string DisabledRemoteCommands[20];",
                    "var() config bool bDisableArray;",
                    "var() config float TPBioUse;",
                    "var() config bool bVotingEnabled;",
                    "var DeusExPlayer Master;",
                    "var() config bool bAllowIRCCommand;",
                    "var() config bool bBroadcasts;",
                    "var int SwarmPass;",
                    "var() config float PhysSpeed;",
                    "var() config int PhysBioUse;",
                    "var() config bool bAllowIRCBots;",
                    "var() config bool bAllowRemote;",
                    "var() config float SummonTimer;",
                    "var() config sound TPSound, PhysSound;",
                    "var() config bool bRestrictPlayerSummons;",
                    "var() config bool bTimedSummoning;",
                    "var() config bool bPlayerSummoning;",
                    "var() config bool bPlayerCheats, bPlayerCheatsFly, bPlayerCheatsTools;",
                    "var() config bool bDebugRep;",
                    "var() AthenaMutator AM;",
                    "var StaticExt statics;",
                    "var config TPMode TPM;",
                    "var eVoteMode EVM;"
                ]
            }
        },
        "RCONActors.uc": {
            "body": "class RCONActors extends Actor;\n\ndefaultproperties\n{\n}\n",
            "name": "RCONActors.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "Actor",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 6,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "RCONAutoTeam.uc": {
            "body": "class RCONAutoTeam extends Mutator config(RCON);\n\nvar() config bool          bEnabled;\nvar() config bool          bNewerPlayers;\nvar() config float         CheckTime;\nvar() config int           MaxDifference;\nvar bool bDoBalance;\nvar bool bInit;\n\n\nfunction PostBeginPlay()\n{\n\tif (bInit) return;\n\tbInit = true;\n    bDoBalance = false;\n    if (MaxDifference < 0)\n        MaxDifference = 1;\n    if (CheckTime < 0)\n        CheckTime = 15.0;\n    SaveConfig();\n    SetTimer(CheckTime, True);\n}\n\n\nfunction Timer()\n{\n    local int Diff;\n    local string Text;\n\n    if (DeathMatchGame(Level.Game) != None)\n        return;\n\n    if (bEnabled == false) return;\n\n    // check balance\n    Diff = CheckBalance();\n    if (Diff == 0)\n    {\n        bDoBalance = false;\n        return;\n    }\n\n    // if bDoBalance is true\n    if (bDoBalance == true)\n    {\n        // do balancing\n        BalanceTeams(Diff);\n\n        // change bDoBalance to false so next time we only check teams\n        bDoBalance = false;\n    }\n    else\n    {\n        Text = \"Teams will be balanced in \"$int(CheckTime)$\" seconds.\";\n        PrintToAll(Text, false);\n        // just change bDoBalance to true, so we balance teams next time\n        bDoBalance = true;\n    }\n}\n\n\nfunction int CheckBalance()\n{\n    local int NSF, UNATCO, i;\n    local Pawn P;\n\n    NSF = 0;\n    UNATCO = 0;\n\n    // count number of UNATCO and number of NSF players\n    P = Level.PawnList;\n \twhile (i < Level.Game.NumPlayers)\n\t{\n\t\tif (P.IsA('PlayerPawn'))\n\t\t{\n\t\t    if (!P.PlayerReplicationInfo.bIsSpectator)\n\t\t    {\n                if (P.PlayerReplicationInfo.Team == 0) UNATCO++;\n                else if (P.PlayerReplicationInfo.Team == 1) NSF++;\n            }\n\t\t\ti++;\n\t\t}\n\t\tP = P.nextPawn;\n\t}\n\n    // equal teams or 1 player on server, return 0\n    if (UNATCO == NSF || (UNATCO + NSF) == 1)\n        return 0;\n\n    // if MaxDifference == 0 and number of NSF and UNATCO players\n    // differs for 1, do balance depending on team scores\n    //else if (MaxDifference == 0 && ((UNATCO + 1) == NSF || (NSF + 1) == UNATCO))\n    //    return CheckTotalScore(UNATCO - NSF);\n\n    //// greater difference than UNATCO +-1 == NSF, so we need to switch some players\n    //else if (MaxDifference == 0)\n    //    return ((UNATCO - NSF) / 2);\n\n    // depending on MaxDifference in number of players on each side\n    if (MaxDifference > 0 && ((NSF + MaxDifference) < UNATCO ||\n        (UNATCO + MaxDifference) < NSF))\n        return ((UNATCO - NSF) / 2);\n\n    // other unknown combination???\n    else\n        return 0;\n}\n\n\nfunction int CheckTotalScore(int N)\n{\n    local int NSFScore, UNATCOScore, i;\n    local Pawn P;\n\n    NSFScore = 0;\n    UNATCOScore = 0;\n\n    // count NSF and UNATCO total scores\n    P = Level.PawnList;\n \twhile (i < Level.Game.NumPlayers)\n\t{\n\t\tif (P.IsA('PlayerPawn'))\n\t\t{\n            if (P.PlayerReplicationInfo.Team == 0)\n                UNATCOScore += int(P.PlayerReplicationInfo.Score);\n            else if (P.PlayerReplicationInfo.Team == 1)\n                NSFScore += int(P.PlayerReplicationInfo.Score);\n\n\t\t\ti++;\n\t\t}\n\t\tP = P.nextPawn;\n\t}\n\n    // equal scores, no balancing needed\n    if (UNATCOScore == NSFScore)\n        return 0;\n\n    // if unatco has higher score and more players\n    else if (UNATCOScore > NSFScore && N > 0)\n        return 1;\n\n    // if nsf has higher score and more players\n    else if (NSFScore > UNATCOScore && N < 0)\n        return -1;\n\n    // other combination, dont do balancing!\n    else\n        return 0;\n}\n\n\nfunction BalanceTeams(int D)\n{\n    local int RemainingToSwap, i, MaxFrags, sw;\n    local Pawn P;\n\n    // D can be negative, but we need positive RemainingToSwap\n    if (D > 0)\n        RemainingToSwap = D;\n    else if (D < 0)\n        RemainingToSwap = (D)*(-1);\n    else\n        // should never happen\n        return;\n\n    if (bNewerPlayers)\n    {\n        // check for new players and swap them\n\t\tsw = SwapPlayers(D, 0);\n        RemainingToSwap -= sw;\n\t\tif (D > 0) D -= sw;\n\t\telse if (D < 0) D += sw;\n    }\n\n    if (RemainingToSwap == 0)\n        return;\n\n    // find top player, so we dont swap him\n    P = Level.PawnList;\n    MaxFrags = 0;\n    i = 0;\n    while (i < Level.Game.NumPlayers)\n    {\n        if (P.IsA('PlayerPawn'))\n        {\n            if (!P.PlayerReplicationInfo.bIsSpectator)\n            {\n\t            if (D > 0 && P.PlayerReplicationInfo.Team == 0)\n\t            {\n\t                // assign new MaxFrags if we find player with higher score\n                    if (P.PlayerReplicationInfo.Score > MaxFrags)\n                        MaxFrags = int(P.PlayerReplicationInfo.Score);\n                }\n\t            else if (D < 0 && P.PlayerReplicationInfo.Team == 1)\n\t            {\n                    // assign new MaxFrags if we find player with higher score\n                    if (P.PlayerReplicationInfo.Score > MaxFrags)\n                        MaxFrags = int(P.PlayerReplicationInfo.Score);\n                }\n            }\n            i++;\n        }\n        P = P.nextPawn;\n    }\n\n    // security check (in case of map begins and all players have score 0\n    // set MaxFrags to 1 and just swap first appropriate player(s)\n    if (MaxFrags == 0)\n        MaxFrags = 1;\n\n    // swap other players\n    RemainingToSwap -= SwapPlayers(D, MaxFrags);\n\n    // ooops, not all players could be swapped\n    if (RemainingToSwap > 0)\n        log(\"Failed to swap all needed player(s).\", 'RCON');\n}\n\n\nfunction int SwapPlayers(int N, int Frags)\n{\n    local int i, Swapped;\n    local Pawn P;\n\tlocal PlayerReplicationInfo PRI;\n\n    Swapped = 0;\n    i = 0;\n    P = Level.PawnList;\n    while (i < Level.Game.NumPlayers && N != 0)\n    {\n        if (P.IsA('PlayerPawn'))\n        {\n\t\t\tPRI = P.PlayerReplicationInfo;\n            if (PRI != none && !PRI.bIsSpectator)\n            {\n                if (Frags > 0 || (P.PlayerReplicationInfo.Score == 0 &&\n\t\t            P.PlayerReplicationInfo.Deaths == 0))\n                {\n                    // if N > 0: swap to NSF\n                    // if N < 0: swap to UNATCO\n\t\t            if (N > 0 && P.PlayerReplicationInfo.Team == 0 &&\n                        (P.PlayerReplicationInfo.Score < Frags || Frags == 0))\n                    {\n                        SwapPlayer(P, 1);\n                        Swapped++;\n                        N--;\n                    }\n\t\t            else if (N < 0 && P.PlayerReplicationInfo.Team == 1 &&\n                        P.PlayerReplicationInfo.Score < Frags || Frags == 0)\n                    {\n                        SwapPlayer(P, 0);\n                        Swapped++;\n                        N++;\n                    }\n                }\n            }\n            i++;\n\t\t}\n        P = P.nextPawn;\n    }\n\n    return Swapped;\n}\n\nfunction SwapPlayer(Pawn P, int T)\n{\n\tlocal NavigationPoint startSpot;\n\tlocal bool foundStart;\n\tlocal DeusExPlayer DxP;\n\tlocal string Text, TP;\n\n\tDxP = DeusExPlayer(P);\n\n    Text = \"Switching \"$DxP.PlayerReplicationInfo.PlayerName$\"(\"$DxP.PlayerReplicationInfo.PlayerID$\") to \";\n    TP = \"You have been switched to \";\n\n    if (T == 0)\n    {\n        Text = Text$\"UNATCO.\";\n        TP = TP$\"UNATCO.\";\n    }\n    else\n    {\n        Text = Text$\"NSF.\";\n        TP = TP$\"NSF.\";\n    }\n\n    PrintToAll(Text, true);\n\n    DxP.PlayerReplicationInfo.Team = T;\n    UpdateSkin(DxP, T);\n\tDxP.ChangeTeam(T);\n\tstartSpot = Level.Game.FindPlayerStart(DxP, 255);\n\tif (startSpot != none)\n\t{\n\t    foundStart = DxP.SetLocation(startSpot.Location);\n\t    if (foundStart)\n        {\n            DxP.SetRotation(startSpot.Rotation);\n\t\t    DxP.ViewRotation = DxP.Rotation;\n\t\t    DxP.Acceleration = vect(0,0,0);\n\t\t    DxP.Velocity = vect(0,0,0);\n\t\t    DxP.ClientSetLocation(startSpot.Location, startSpot.Rotation);\n\t     }\n     }\n     PrintToPlayer(DxP, TP);\n}\n\n\nstatic function bool UpdateSkin(DeusExPlayer P, int NewTeam)\n{\n    local int iSkin;\n\n    if (NewTeam == 0)\n    {\n        for (iSkin = 0; iSkin < ArrayCount(P.MultiSkins); iSkin++)\n        {\n            P.MultiSkins[iSkin] = class'mpunatco'.Default.MultiSkins[iSkin];\n        }\n        P.Mesh = class'mpunatco'.Default.Mesh;\n\n        return true;\n    }\n    else if (NewTeam == 1)\n    {\n        for (iSkin = 0; iSkin < ArrayCount(P.MultiSkins); iSkin++)\n        {\n            P.MultiSkins[iSkin] = class'mpnsf'.Default.MultiSkins[iSkin];\n        }\n        P.Mesh = class'mpnsf'.Default.Mesh;\n\n        return true;\n    }\n    else\n        return false;\n}\n\n\nfunction PrintToAll(string TextToSay, bool uplink)\n{\n    local int i;\n    local Pawn P;\n    local DeusExPlayer DXP;\n    // print text to all clients\n    P = Level.PawnList;\n \twhile (i < Level.Game.NumPlayers)\n\t{\n\t\tif (P.IsA('PlayerPawn'))\n\t\t{\n\t        if (uplink) P.ClientMessage(TextToSay, , true);\n\t        else\n\t        {\n\t\t        DXP = DeusExPlayer(P);\n                if (DXP != none) DXP.ClientMessage(TextToSay,'TeamSay');\n            }\n\t\t\ti++;\n\t\t}\n\t\tP = P.nextPawn;\n\t}\n}\n\n\nfunction PrintToPlayer(DeusExPlayer dxp, string Message)\n{\n    if (dxp != none) dxp.ClientMessage(Message,'TeamSay');\n}\n\n\nfunction Mutate(string MutateString, PlayerPawn Sender)\n{\nlocal int ID;\nlocal float CT;\nlocal string Part;\nlocal Pawn APawn;\nlocal string Text, TP;\n//Force check\n\n\t\tif(left(MutateString,12) ~= \"Team.Switch \")\n        {\n            ID = int(Left(Right(MutateString, Len(MutateString) - 12),InStr(MutateString,\" \")));\n            for(APawn = level.PawnList; APawn != none; APawn = APawn.nextPawn)\n                if(APawn.bIsPlayer)\n                    if(PlayerPawn(APawn) == none || NetConnection(PlayerPawn(APawn).Player) != none)\n                        if(PlayerPawn(APawn).PlayerReplicationInfo.PlayerID == ID)\n                        {\n                            Part = Right(MutateString,Len(MutateString) - 12);\n\t\t\t\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif(Apawn.PlayerReplicationInfo.Team == 0)\n\t\t\t\t\t\t\t\tSwapPlayer(APawn, 1);\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tSwapPlayer(APawn, 0);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t}\n\n\t\telse if(MutateString ~= \"Team.Enabled\")\n\t\t{\n\t\t\tif(Sender.bAdmin)\n\t\t\t{\n\t\t\t\tif(bEnabled)\n\t\t\t\t{\n\t\t\t\t\tText = \"Admin: \"$Sender.PlayerReplicationInfo.PlayerName$\"(\"$Sender.PlayerReplicationInfo.PlayerID$\") disabled Automatic Team Balancer \";\n\t\t\t\t\tPrintToAll(Text, true);\n\t\t\t\t\tbEnabled=False;\n\t\t\t\t\tSaveConfig();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tText = \"Admin: \"$Sender.PlayerReplicationInfo.PlayerName$\"(\"$Sender.PlayerReplicationInfo.PlayerID$\") enabled Automatic Team Balancer \";\n\t\t\t\t\tPrintToAll(Text, true);\n\t\t\t\t\tbEnabled=True;\n\t\t\t\t\tSaveConfig();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\telse if(left(MutateString,16) ~= \"Team.CheckTimer \")\n        {\n            CT = int(Left(Right(MutateString, Len(MutateString) - 16),InStr(MutateString,\" \")));\n\t\t\t\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tText = \"Admin: \"$Sender.PlayerReplicationInfo.PlayerName$\"(\"$Sender.PlayerReplicationInfo.PlayerID$\") changed AutoCheckTimer: \"$CT;\n\t\t\t\t\t\t\t\tPrintToAll(Text, true);\n\t\t\t\t\t\t\t\tcheckTime=CT;\n\t\t\t\t\t\t\t\tSaveConfig();\n\t\t\t\t\t\t\t}\n\t\t}\n\t\n\n   \tSuper.Mutate(MutateString, Sender);\n}\n\ndefaultproperties\n{\n     bEnabled=True\n     bNewerPlayers=True\n     checkTime=15.000000\n     MaxDifference=1\n}\n",
            "name": "RCONAutoTeam.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bEnabled=True",
                    "bNewerPlayers=True",
                    "checkTime=15.000000",
                    "MaxDifference=1"
                ],
                "exec": [],
                "extends": "Mutator",
                "functions": {
                    "BalanceTeams": {
                        "body": "{\n\n    // D can be negative, but we need positive RemainingToSwap\n    if (D > 0)\n        RemainingToSwap = D;\n    else if (D < 0)\n        RemainingToSwap = (D)*(-1);\n    else\n        // should never happen\n        return;\n\n    if (bNewerPlayers)\n    {\n        // check for new players and swap them\n\t\tsw = SwapPlayers(D, 0);\n        RemainingToSwap -= sw;\n\t\tif (D > 0) D -= sw;\n\t\telse if (D < 0) D += sw;\n    }\n\n    if (RemainingToSwap == 0)\n        return;\n\n    // find top player, so we dont swap him\n    P = Level.PawnList;\n    MaxFrags = 0;\n    i = 0;\n    while (i < Level.Game.NumPlayers)\n    {\n        if (P.IsA('PlayerPawn'))\n        {\n            if (!P.PlayerReplicationInfo.bIsSpectator)\n            {\n\t            if (D > 0 && P.PlayerReplicationInfo.Team == 0)\n\t            {\n\t                // assign new MaxFrags if we find player with higher score\n                    if (P.PlayerReplicationInfo.Score > MaxFrags)\n                        MaxFrags = int(P.PlayerReplicationInfo.Score);\n                }\n\t            else if (D < 0 && P.PlayerReplicationInfo.Team == 1)\n\t            {\n                    // assign new MaxFrags if we find player with higher score\n                    if (P.PlayerReplicationInfo.Score > MaxFrags)\n                        MaxFrags = int(P.PlayerReplicationInfo.Score);\n                }\n            }\n            i++;\n        }\n        P = P.nextPawn;\n    }\n\n    // security check (in case of map begins and all players have score 0\n    // set MaxFrags to 1 and just swap first appropriate player(s)\n    if (MaxFrags == 0)\n        MaxFrags = 1;\n\n    // swap other players\n    RemainingToSwap -= SwapPlayers(D, MaxFrags);\n\n    // ooops, not all players could be swapped\n    if (RemainingToSwap > 0)\n        log(\"Failed to swap all needed player(s).\", 'RCON');\n}",
                        "locals": [
                            "local int RemainingToSwap, i, MaxFrags, sw;",
                            "local Pawn P;"
                        ],
                        "modifiers": [],
                        "name": "BalanceTeams",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "D"
                            ]
                        ],
                        "return": ""
                    },
                    "CheckBalance": {
                        "body": "{\n\n    NSF = 0;\n    UNATCO = 0;\n\n    // count number of UNATCO and number of NSF players\n    P = Level.PawnList;\n \twhile (i < Level.Game.NumPlayers)\n\t{\n\t\tif (P.IsA('PlayerPawn'))\n\t\t{\n\t\t    if (!P.PlayerReplicationInfo.bIsSpectator)\n\t\t    {\n                if (P.PlayerReplicationInfo.Team == 0) UNATCO++;\n                else if (P.PlayerReplicationInfo.Team == 1) NSF++;\n            }\n\t\t\ti++;\n\t\t}\n\t\tP = P.nextPawn;\n\t}\n\n    // equal teams or 1 player on server, return 0\n    if (UNATCO == NSF || (UNATCO + NSF) == 1)\n        return 0;\n\n    // if MaxDifference == 0 and number of NSF and UNATCO players\n    // differs for 1, do balance depending on team scores\n    //else if (MaxDifference == 0 && ((UNATCO + 1) == NSF || (NSF + 1) == UNATCO))\n    //    return CheckTotalScore(UNATCO - NSF);\n\n    //// greater difference than UNATCO +-1 == NSF, so we need to switch some players\n    //else if (MaxDifference == 0)\n    //    return ((UNATCO - NSF) / 2);\n\n    // depending on MaxDifference in number of players on each side\n    if (MaxDifference > 0 && ((NSF + MaxDifference) < UNATCO ||\n        (UNATCO + MaxDifference) < NSF))\n        return ((UNATCO - NSF) / 2);\n\n    // other unknown combination???\n    else\n        return 0;\n}",
                        "locals": [
                            "local int NSF, UNATCO, i;",
                            "local Pawn P;"
                        ],
                        "modifiers": [],
                        "name": "CheckBalance",
                        "native": false,
                        "param": [],
                        "return": "int"
                    },
                    "CheckTotalScore": {
                        "body": "{\n\n    NSFScore = 0;\n    UNATCOScore = 0;\n\n    // count NSF and UNATCO total scores\n    P = Level.PawnList;\n \twhile (i < Level.Game.NumPlayers)\n\t{\n\t\tif (P.IsA('PlayerPawn'))\n\t\t{\n            if (P.PlayerReplicationInfo.Team == 0)\n                UNATCOScore += int(P.PlayerReplicationInfo.Score);\n            else if (P.PlayerReplicationInfo.Team == 1)\n                NSFScore += int(P.PlayerReplicationInfo.Score);\n\n\t\t\ti++;\n\t\t}\n\t\tP = P.nextPawn;\n\t}\n\n    // equal scores, no balancing needed\n    if (UNATCOScore == NSFScore)\n        return 0;\n\n    // if unatco has higher score and more players\n    else if (UNATCOScore > NSFScore && N > 0)\n        return 1;\n\n    // if nsf has higher score and more players\n    else if (NSFScore > UNATCOScore && N < 0)\n        return -1;\n\n    // other combination, dont do balancing!\n    else\n        return 0;\n}",
                        "locals": [
                            "local int NSFScore, UNATCOScore, i;",
                            "local Pawn P;"
                        ],
                        "modifiers": [],
                        "name": "CheckTotalScore",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "N"
                            ]
                        ],
                        "return": "int"
                    },
                    "Mutate": {
                        "body": "{\n//Force check\n\n\t\tif(left(MutateString,12) ~= \"Team.Switch \")\n        {\n            ID = int(Left(Right(MutateString, Len(MutateString) - 12),InStr(MutateString,\" \")));\n            for(APawn = level.PawnList; APawn != none; APawn = APawn.nextPawn)\n                if(APawn.bIsPlayer)\n                    if(PlayerPawn(APawn) == none || NetConnection(PlayerPawn(APawn).Player) != none)\n                        if(PlayerPawn(APawn).PlayerReplicationInfo.PlayerID == ID)\n                        {\n                            Part = Right(MutateString,Len(MutateString) - 12);\n\t\t\t\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif(Apawn.PlayerReplicationInfo.Team == 0)\n\t\t\t\t\t\t\t\tSwapPlayer(APawn, 1);\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tSwapPlayer(APawn, 0);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t}\n\n\t\telse if(MutateString ~= \"Team.Enabled\")\n\t\t{\n\t\t\tif(Sender.bAdmin)\n\t\t\t{\n\t\t\t\tif(bEnabled)\n\t\t\t\t{\n\t\t\t\t\tText = \"Admin: \"$Sender.PlayerReplicationInfo.PlayerName$\"(\"$Sender.PlayerReplicationInfo.PlayerID$\") disabled Automatic Team Balancer \";\n\t\t\t\t\tPrintToAll(Text, true);\n\t\t\t\t\tbEnabled=False;\n\t\t\t\t\tSaveConfig();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tText = \"Admin: \"$Sender.PlayerReplicationInfo.PlayerName$\"(\"$Sender.PlayerReplicationInfo.PlayerID$\") enabled Automatic Team Balancer \";\n\t\t\t\t\tPrintToAll(Text, true);\n\t\t\t\t\tbEnabled=True;\n\t\t\t\t\tSaveConfig();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\telse if(left(MutateString,16) ~= \"Team.CheckTimer \")\n        {\n            CT = int(Left(Right(MutateString, Len(MutateString) - 16),InStr(MutateString,\" \")));\n\t\t\t\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tText = \"Admin: \"$Sender.PlayerReplicationInfo.PlayerName$\"(\"$Sender.PlayerReplicationInfo.PlayerID$\") changed AutoCheckTimer: \"$CT;\n\t\t\t\t\t\t\t\tPrintToAll(Text, true);\n\t\t\t\t\t\t\t\tcheckTime=CT;\n\t\t\t\t\t\t\t\tSaveConfig();\n\t\t\t\t\t\t\t}\n\t\t}\n\t\n\n   \tSuper.Mutate(MutateString, Sender);\n}",
                        "locals": [
                            "local int ID;",
                            "local float CT;",
                            "local string Part;",
                            "local Pawn APawn;",
                            "local string Text, TP;"
                        ],
                        "modifiers": [],
                        "name": "Mutate",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "MutateString"
                            ],
                            [
                                "PlayerPawn",
                                "Sender"
                            ]
                        ],
                        "return": ""
                    },
                    "PostBeginPlay": {
                        "body": "{\n\tif (bInit) return;\n\tbInit = true;\n    bDoBalance = false;\n    if (MaxDifference < 0)\n        MaxDifference = 1;\n    if (CheckTime < 0)\n        CheckTime = 15.0;\n    SaveConfig();\n    SetTimer(CheckTime, True);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PrintToAll": {
                        "body": "{\n    // print text to all clients\n    P = Level.PawnList;\n \twhile (i < Level.Game.NumPlayers)\n\t{\n\t\tif (P.IsA('PlayerPawn'))\n\t\t{\n\t        if (uplink) P.ClientMessage(TextToSay, , true);\n\t        else\n\t        {\n\t\t        DXP = DeusExPlayer(P);\n                if (DXP != none) DXP.ClientMessage(TextToSay,'TeamSay');\n            }\n\t\t\ti++;\n\t\t}\n\t\tP = P.nextPawn;\n\t}\n}",
                        "locals": [
                            "local int i;",
                            "local Pawn P;",
                            "local DeusExPlayer DXP;"
                        ],
                        "modifiers": [],
                        "name": "PrintToAll",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "TextToSay"
                            ],
                            [
                                "bool",
                                "uplink"
                            ]
                        ],
                        "return": ""
                    },
                    "PrintToPlayer": {
                        "body": "{\n    if (dxp != none) dxp.ClientMessage(Message,'TeamSay');\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PrintToPlayer",
                        "native": false,
                        "param": [
                            [
                                "DeusExPlayer",
                                "dxp"
                            ],
                            [
                                "string",
                                "Message"
                            ]
                        ],
                        "return": ""
                    },
                    "SwapPlayer": {
                        "body": "{\n\n\tDxP = DeusExPlayer(P);\n\n    Text = \"Switching \"$DxP.PlayerReplicationInfo.PlayerName$\"(\"$DxP.PlayerReplicationInfo.PlayerID$\") to \";\n    TP = \"You have been switched to \";\n\n    if (T == 0)\n    {\n        Text = Text$\"UNATCO.\";\n        TP = TP$\"UNATCO.\";\n    }\n    else\n    {\n        Text = Text$\"NSF.\";\n        TP = TP$\"NSF.\";\n    }\n\n    PrintToAll(Text, true);\n\n    DxP.PlayerReplicationInfo.Team = T;\n    UpdateSkin(DxP, T);\n\tDxP.ChangeTeam(T);\n\tstartSpot = Level.Game.FindPlayerStart(DxP, 255);\n\tif (startSpot != none)\n\t{\n\t    foundStart = DxP.SetLocation(startSpot.Location);\n\t    if (foundStart)\n        {\n            DxP.SetRotation(startSpot.Rotation);\n\t\t    DxP.ViewRotation = DxP.Rotation;\n\t\t    DxP.Acceleration = vect(0,0,0);\n\t\t    DxP.Velocity = vect(0,0,0);\n\t\t    DxP.ClientSetLocation(startSpot.Location, startSpot.Rotation);\n\t     }\n     }\n     PrintToPlayer(DxP, TP);\n}",
                        "locals": [
                            "local NavigationPoint startSpot;",
                            "local bool foundStart;",
                            "local DeusExPlayer DxP;",
                            "local string Text, TP;"
                        ],
                        "modifiers": [],
                        "name": "SwapPlayer",
                        "native": false,
                        "param": [
                            [
                                "Pawn",
                                "P"
                            ],
                            [
                                "int",
                                "T"
                            ]
                        ],
                        "return": ""
                    },
                    "SwapPlayers": {
                        "body": "{\n\n    Swapped = 0;\n    i = 0;\n    P = Level.PawnList;\n    while (i < Level.Game.NumPlayers && N != 0)\n    {\n        if (P.IsA('PlayerPawn'))\n        {\n\t\t\tPRI = P.PlayerReplicationInfo;\n            if (PRI != none && !PRI.bIsSpectator)\n            {\n                if (Frags > 0 || (P.PlayerReplicationInfo.Score == 0 &&\n\t\t            P.PlayerReplicationInfo.Deaths == 0))\n                {\n                    // if N > 0: swap to NSF\n                    // if N < 0: swap to UNATCO\n\t\t            if (N > 0 && P.PlayerReplicationInfo.Team == 0 &&\n                        (P.PlayerReplicationInfo.Score < Frags || Frags == 0))\n                    {\n                        SwapPlayer(P, 1);\n                        Swapped++;\n                        N--;\n                    }\n\t\t            else if (N < 0 && P.PlayerReplicationInfo.Team == 1 &&\n                        P.PlayerReplicationInfo.Score < Frags || Frags == 0)\n                    {\n                        SwapPlayer(P, 0);\n                        Swapped++;\n                        N++;\n                    }\n                }\n            }\n            i++;\n\t\t}\n        P = P.nextPawn;\n    }\n\n    return Swapped;\n}",
                        "locals": [
                            "local int i, Swapped;",
                            "local Pawn P;",
                            "local PlayerReplicationInfo PRI;"
                        ],
                        "modifiers": [],
                        "name": "SwapPlayers",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "N"
                            ],
                            [
                                "int",
                                "Frags"
                            ]
                        ],
                        "return": "int"
                    },
                    "Timer": {
                        "body": "{\n\n    if (DeathMatchGame(Level.Game) != None)\n        return;\n\n    if (bEnabled == false) return;\n\n    // check balance\n    Diff = CheckBalance();\n    if (Diff == 0)\n    {\n        bDoBalance = false;\n        return;\n    }\n\n    // if bDoBalance is true\n    if (bDoBalance == true)\n    {\n        // do balancing\n        BalanceTeams(Diff);\n\n        // change bDoBalance to false so next time we only check teams\n        bDoBalance = false;\n    }\n    else\n    {\n        Text = \"Teams will be balanced in \"$int(CheckTime)$\" seconds.\";\n        PrintToAll(Text, false);\n        // just change bDoBalance to true, so we balance teams next time\n        bDoBalance = true;\n    }\n}",
                        "locals": [
                            "local int Diff;",
                            "local string Text;"
                        ],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "UpdateSkin": {
                        "body": "{\n\n    if (NewTeam == 0)\n    {\n        for (iSkin = 0; iSkin < ArrayCount(P.MultiSkins); iSkin++)\n        {\n            P.MultiSkins[iSkin] = class'mpunatco'.Default.MultiSkins[iSkin];\n        }\n        P.Mesh = class'mpunatco'.Default.Mesh;\n\n        return true;\n    }\n    else if (NewTeam == 1)\n    {\n        for (iSkin = 0; iSkin < ArrayCount(P.MultiSkins); iSkin++)\n        {\n            P.MultiSkins[iSkin] = class'mpnsf'.Default.MultiSkins[iSkin];\n        }\n        P.Mesh = class'mpnsf'.Default.Mesh;\n\n        return true;\n    }\n    else\n        return false;\n}",
                        "locals": [
                            "local int iSkin;"
                        ],
                        "modifiers": [
                            "static"
                        ],
                        "name": "UpdateSkin",
                        "native": false,
                        "param": [
                            [
                                "DeusExPlayer",
                                "P"
                            ],
                            [
                                "int",
                                "NewTeam"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 441,
                "replication": "",
                "states": [],
                "variables": [
                    "var() config bool          bEnabled;",
                    "var() config bool          bNewerPlayers;",
                    "var() config float         CheckTime;",
                    "var() config int           MaxDifference;",
                    "var bool bDoBalance;",
                    "var bool bInit;"
                ]
            }
        },
        "RCONGreeter.uc": {
            "body": "class RCONGreeter extends Mutator config(RCON);\n\n//CLASS REMOVED\n//This functionality was migrated to the Athena system\n\ndefaultproperties\n{\n}\n",
            "name": "RCONGreeter.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "Mutator",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 9,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "RCONManager.uc": {
            "body": "//=============================================================================\n// RCONManager\n//=============================================================================\nclass RCONManager expands RCONActors\nconfig(RCON);\n\nvar(RCON) config bool bRCONMutator;\nvar(RCON) config bool bNameguard;\nvar(RCON) config bool bNPTProxy;\nvar(RCON) config bool bAutomaticTeamSorting;\nvar(RCON) config bool bLoadouts;\nvar(RCON) config bool bReplacer;\nvar(RCON) config bool bForceNPTUscriptAPI;\nvar(RCON) config bool bIRC;\nvar(RCON) config bool bStats;\nvar(RCON) config bool bMessager;\nvar(RCON) config bool bAthena;\nvar(RCON) config bool bAccounts;\nvar(RCON) config bool bForceGametype;\nvar(RCON) config string ForceGametype;\nvar(RCON) config bool bFixDecoPushsounds;\nvar(RCON) config bool bForceNetUpdateFrequencies;\nvar(RCON) config int ForcedNetUpdateFrequency;\nvar(RCON) config bool bSMDEBUG;\nvar(RCON) config bool bRPG;\n\nvar(RCON) config bool bHasUpdate;\nvar string netversion;\nvar string GSCData;\nvar float TimeUntilUpdate;\nconst version = \"180109\";\n\nfunction CodeBase _CodeBase()\n{\n    return Spawn(class'CodeBase');\n}\nfunction UpdateCheck();\n\nfunction PostBeginPlay()\n{\t\t\t\n    local RCON R;\n    local ServerController SC;\n    local RCONProxy RP;\n    local NephthysDrv np;\n    local RCONAutoTeam Au;\n    local Loadouts AC;\n    local RCONReplacer rep;\n    local IRCLink IRC;\n    local RCONStats Stat;\n    local RCONGreeter Greet;\n    local rMessager rmsgr;\n    local Accounts acc;\n    local bool bNPTOK;\n    local AthenaMutator Ath;\n    local Actor A;\n    local bool bMutatorFound, bMutatorFound2, bMutatorFound3, bMutatorFound4, bMutatorFound5, bMutatorFound6, bMutatorFound7, bMutatorFound8, bMutatorFound9, bMutatorFound10, bMutatorFound11, bMutatorFound12;\n\n        if (Level.NetMode != NM_Standalone && Role == ROLE_Authority)\n        {\n            Log(\"\",'RCON');\n            Log(\"RCON Manager spawned has initiated successfully.\",'RCON');\n            Log(\"RCON Version 10. By Kai 'TheClown'. \",'RCON');\n            Log(\"WEB: http://www.deusex.ucoz.net\",'RCON');\n            Log(\"Join the discord: google for DXMP Discord\",'RCON');\n            Log(\"Running update check...\");\n            UpdateCheck();\n            Log(\"-LIST MUTATOR ACTIONS-\",'RCON');\n            \n            //Spawn(class'mpFlags');\n            if(bRPG)\n                Level.Game.BaseMutator.AddMutator(Spawn(class'RPGHandler'));\n                \n            if(bSMDEBUG)\n                Level.Game.BaseMutator.AddMutator(Spawn(class'SM'));\n                \n            if(bForceNPTUscriptAPI)\n            {\n            ConsoleCommand(\"Set NephthysDrv bUscriptAPI True\");\n            Log(\"RCON/NPT bridged.\",'RCON');\n            bNPTOK=True;\n            }\n            if(bRCONMutator)\n            {\n                foreach allactors (class'RCON', R)\n                    if (R != None)\n                        bMutatorFound = True;\n                if (!bMutatorFound)\t\n                    Log(\"RCON Command Mutator enabled.\",'RCON');\n                    Level.Game.BaseMutator.AddMutator(Spawn(class'RCON'));\n            }\n            if(bNameguard)\n            {\n                foreach allactors (class'ServerController', SC)\n                    if (SC != None)\n                        bMutatorFound2 = True;\n                if (!bMutatorFound2)\t\n                    Log(\"Nameguard enabled.\",'RCON');\n                    Level.Game.BaseMutator.AddMutator(Spawn(class'ServerController'));\n            }\n            if(bNPTProxy)\n            {\n                foreach allactors (class'RCONProxy', RP)\n                    if (RP != None)\n                        bMutatorFound3 = True;\n                if (!bMutatorFound3)\t\n                    Log(\"RCON NPT Proxy spawned.\",'RCON');\n                    Spawn(class'RCONProxy');\n                    if(bNPTOK)\n                    {\n                        Log(\"NPT internal check: OK\",'RCON');\n                    }\n                    else\n                    {\n                        Log(\"NPT internal check: WARNING\",'RCON');\n                        Log(\"RCON is not handling the bridge. If you have set bUscriptAPI=True in Nephthys, disregard this warning.\",'RCON');\n                    }\n            }\n            \n            if(bAutomaticTeamSorting)\n            {\n                foreach allactors (class'RCONAutoTeam', AU)\n                    if (RP != None)\n                        bMutatorFound4 = True;\n                if (!bMutatorFound4)\t\n                    Log(\"Team Balance enabled\",'RCON');\n                    Level.Game.BaseMutator.AddMutator(Spawn(class'RCONAutoTeam'));\n            }\n                        \n            if(bLoadouts)\n            {\n                foreach allactors (class'Loadouts', Ac)\n                    if (RP != None)\n                        bMutatorFound5 = True;\n                if (!bMutatorFound5)\t\n                    Log(\"Loadouts enabled\",'RCON');\n                    Level.Game.BaseMutator.AddMutator(Spawn(class'Loadouts'));\n            }\n            \n            if(bReplacer)\n            {\n                foreach allactors (class'RCONReplacer', ReP)\n                    if (ReP != None)\n                        bMutatorFound6 = True;\n                if (!bMutatorFound6)\t\n                    Log(\"RCON Replacer enabled.\",'RCON');\n                    Spawn(class'RCONReplacer');\n            }\n            \n            if(bIRC)\n            {\n                foreach allactors (class'IRCLink', IRC)\n                    if (IRC != None)\n                        bMutatorFound7 = True;\n                if (!bMutatorFound7)\t\t\t\n                    Log(\"IRC Link spawned.\",'RCON');\n                    spawn(class'IRCLink');\n            }\n            if(bStats)\n            {\n                foreach allactors (class'RCONStats', stat)\n                    if (stat != None)\n                        bMutatorFound8 = True;\n                if (!bMutatorFound8)\t\n                    Log(\"RCON Stat Tracking enabled.\",'RCON');\n                    Level.Game.BaseMutator.AddMutator(Spawn(class'RCONStats'));\n            }\n            if(bMessager)\n            {\n                foreach allactors (class'rMessager', rmsgr)\n                    if (rmsgr != None)\n                        bMutatorFound10 = True;\n                if (!bMutatorFound10)\t\n                    Log(\"Messager by ChaosIncarnate enabled.\",'RCON');\n                    Spawn(class'rMessager');\n            }\n            if(bAthena)\n            {\n                foreach allactors (class'AthenaMutator', Ath)\n                    if (Ath != None)\n                        bMutatorFound11 = True;\n                if (!bMutatorFound11)\t\n                    Log(\"Athena Controller enabled.\",'RCON');\n                    Level.Game.BaseMutator.AddMutator(Spawn(class'AthenaMutator'));\n            }\n            if(bAccounts)\n            {\n                foreach allactors (class'Accounts', acc)\n                    if (acc != None)\n                        bMutatorFound12 = True;\n                if (!bMutatorFound12)\t\n                    Log(\"Accounts Manager enabled.\",'RCON');\n                    Level.Game.BaseMutator.AddMutator(Spawn(class'Accounts'));\n            }\n            Log(\"RCONManager has ended. RCON Core is now running with selected features.\",'RCON');\n                foreach AllActors(class'Actor', A)\n                {\n                    if(string(a.class) ~= \"FLK3Fix.FLK3MutFix\" || string(a.class) ~= \"Battleground.TCControls\") \n                    {\n                        a.bHidden=True;\n                    }\n                }\n            if(bForceGametype)\n                SetTimer(3,false);\n            Log(\"\",'RCON');\n        }\n}\n\nfunction Timer()\n{\n    local string currentMap;\n    local class<GameInfo> currentGameClass,newGameClass;\n\n    currentGameClass=level.game.class;\n    currentMap = left(string(level),instr(string(level),\".\"));\n    if(string(currentGameClass) != ForceGametype)\n    {\n        log(\"Loading \"$forcegametype$\"...\",'RCON');\n        ConsoleCommand(\"servertravel\"@currentMap$\"?Game=\"$forcegametype);\n    }\n}\n\nfunction Tick(float deltatime)\n{\n    local DeusExDecoration DXD;\n    local string datastring, DataStore, corever;\n\n    if(bFixDecoPushsounds)\n        Foreach AllActors(class'DeusExDecoration', DXD)\t\n            if(DXD.PushSound != None)\n                DXD.PushSound = None;\n    \n    if(bForceNetUpdateFrequencies)\n        Foreach AllActors(class'DeusExDecoration', DXD)\n            if(DXD.NetUpdateFrequency != ForcedNetUpdateFrequency)\n                DXD.NetUpdateFrequency = ForcedNetUpdateFrequency;\n}\n\ndefaultproperties\n{\n     bRCONMutator=True\n     bNPTProxy=True\n     bAutomaticTeamSorting=True\n     bForceNPTUscriptAPI=True\n     bIRC=True\n     bStats=True\n     bMessager=True\n     bAthena=True\n     bFixDecoPushsounds=True\n     bRPG=True\n     bHidden=True\n}\n",
            "name": "RCONManager.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bRCONMutator=True",
                    "bNPTProxy=True",
                    "bAutomaticTeamSorting=True",
                    "bForceNPTUscriptAPI=True",
                    "bIRC=True",
                    "bStats=True",
                    "bMessager=True",
                    "bAthena=True",
                    "bFixDecoPushsounds=True",
                    "bRPG=True",
                    "bHidden=True"
                ],
                "exec": [],
                "extends": "RCONActors",
                "functions": {
                    "PostBeginPlay": {
                        "body": "{\t\t\t\n\n        if (Level.NetMode != NM_Standalone && Role == ROLE_Authority)\n        {\n            Log(\"\",'RCON');\n            Log(\"RCON Manager spawned has initiated successfully.\",'RCON');\n            Log(\"RCON Version 10. By Kai 'TheClown'. \",'RCON');\n            Log(\"WEB: http://www.deusex.ucoz.net\",'RCON');\n            Log(\"Join the discord: google for DXMP Discord\",'RCON');\n            Log(\"Running update check...\");\n            UpdateCheck();\n            Log(\"-LIST MUTATOR ACTIONS-\",'RCON');\n            \n            //Spawn(class'mpFlags');\n            if(bRPG)\n                Level.Game.BaseMutator.AddMutator(Spawn(class'RPGHandler'));\n                \n            if(bSMDEBUG)\n                Level.Game.BaseMutator.AddMutator(Spawn(class'SM'));\n                \n            if(bForceNPTUscriptAPI)\n            {\n            ConsoleCommand(\"Set NephthysDrv bUscriptAPI True\");\n            Log(\"RCON/NPT bridged.\",'RCON');\n            bNPTOK=True;\n            }\n            if(bRCONMutator)\n            {\n                foreach allactors (class'RCON', R)\n                    if (R != None)\n                        bMutatorFound = True;\n                if (!bMutatorFound)\t\n                    Log(\"RCON Command Mutator enabled.\",'RCON');\n                    Level.Game.BaseMutator.AddMutator(Spawn(class'RCON'));\n            }\n            if(bNameguard)\n            {\n                foreach allactors (class'ServerController', SC)\n                    if (SC != None)\n                        bMutatorFound2 = True;\n                if (!bMutatorFound2)\t\n                    Log(\"Nameguard enabled.\",'RCON');\n                    Level.Game.BaseMutator.AddMutator(Spawn(class'ServerController'));\n            }\n            if(bNPTProxy)\n            {\n                foreach allactors (class'RCONProxy', RP)\n                    if (RP != None)\n                        bMutatorFound3 = True;\n                if (!bMutatorFound3)\t\n                    Log(\"RCON NPT Proxy spawned.\",'RCON');\n                    Spawn(class'RCONProxy');\n                    if(bNPTOK)\n                    {\n                        Log(\"NPT internal check: OK\",'RCON');\n                    }\n                    else\n                    {\n                        Log(\"NPT internal check: WARNING\",'RCON');\n                        Log(\"RCON is not handling the bridge. If you have set bUscriptAPI=True in Nephthys, disregard this warning.\",'RCON');\n                    }\n            }\n            \n            if(bAutomaticTeamSorting)\n            {\n                foreach allactors (class'RCONAutoTeam', AU)\n                    if (RP != None)\n                        bMutatorFound4 = True;\n                if (!bMutatorFound4)\t\n                    Log(\"Team Balance enabled\",'RCON');\n                    Level.Game.BaseMutator.AddMutator(Spawn(class'RCONAutoTeam'));\n            }\n                        \n            if(bLoadouts)\n            {\n                foreach allactors (class'Loadouts', Ac)\n                    if (RP != None)\n                        bMutatorFound5 = True;\n                if (!bMutatorFound5)\t\n                    Log(\"Loadouts enabled\",'RCON');\n                    Level.Game.BaseMutator.AddMutator(Spawn(class'Loadouts'));\n            }\n            \n            if(bReplacer)\n            {\n                foreach allactors (class'RCONReplacer', ReP)\n                    if (ReP != None)\n                        bMutatorFound6 = True;\n                if (!bMutatorFound6)\t\n                    Log(\"RCON Replacer enabled.\",'RCON');\n                    Spawn(class'RCONReplacer');\n            }\n            \n            if(bIRC)\n            {\n                foreach allactors (class'IRCLink', IRC)\n                    if (IRC != None)\n                        bMutatorFound7 = True;\n                if (!bMutatorFound7)\t\t\t\n                    Log(\"IRC Link spawned.\",'RCON');\n                    spawn(class'IRCLink');\n            }\n            if(bStats)\n            {\n                foreach allactors (class'RCONStats', stat)\n                    if (stat != None)\n                        bMutatorFound8 = True;\n                if (!bMutatorFound8)\t\n                    Log(\"RCON Stat Tracking enabled.\",'RCON');\n                    Level.Game.BaseMutator.AddMutator(Spawn(class'RCONStats'));\n            }\n            if(bMessager)\n            {\n                foreach allactors (class'rMessager', rmsgr)\n                    if (rmsgr != None)\n                        bMutatorFound10 = True;\n                if (!bMutatorFound10)\t\n                    Log(\"Messager by ChaosIncarnate enabled.\",'RCON');\n                    Spawn(class'rMessager');\n            }\n            if(bAthena)\n            {\n                foreach allactors (class'AthenaMutator', Ath)\n                    if (Ath != None)\n                        bMutatorFound11 = True;\n                if (!bMutatorFound11)\t\n                    Log(\"Athena Controller enabled.\",'RCON');\n                    Level.Game.BaseMutator.AddMutator(Spawn(class'AthenaMutator'));\n            }\n            if(bAccounts)\n            {\n                foreach allactors (class'Accounts', acc)\n                    if (acc != None)\n                        bMutatorFound12 = True;\n                if (!bMutatorFound12)\t\n                    Log(\"Accounts Manager enabled.\",'RCON');\n                    Level.Game.BaseMutator.AddMutator(Spawn(class'Accounts'));\n            }\n            Log(\"RCONManager has ended. RCON Core is now running with selected features.\",'RCON');\n                foreach AllActors(class'Actor', A)\n                {\n                    if(string(a.class) ~= \"FLK3Fix.FLK3MutFix\" || string(a.class) ~= \"Battleground.TCControls\") \n                    {\n                        a.bHidden=True;\n                    }\n                }\n            if(bForceGametype)\n                SetTimer(3,false);\n            Log(\"\",'RCON');\n        }\n}",
                        "locals": [
                            "local RCON R;",
                            "local ServerController SC;",
                            "local RCONProxy RP;",
                            "local NephthysDrv np;",
                            "local RCONAutoTeam Au;",
                            "local Loadouts AC;",
                            "local RCONReplacer rep;",
                            "local IRCLink IRC;",
                            "local RCONStats Stat;",
                            "local RCONGreeter Greet;",
                            "local rMessager rmsgr;",
                            "local Accounts acc;",
                            "local bool bNPTOK;",
                            "local AthenaMutator Ath;",
                            "local Actor A;",
                            "local bool bMutatorFound, bMutatorFound2, bMutatorFound3, bMutatorFound4, bMutatorFound5, bMutatorFound6, bMutatorFound7, bMutatorFound8, bMutatorFound9, bMutatorFound10, bMutatorFound11, bMutatorFound12;"
                        ],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Tick": {
                        "body": "{\n\n    if(bFixDecoPushsounds)\n        Foreach AllActors(class'DeusExDecoration', DXD)\t\n            if(DXD.PushSound != None)\n                DXD.PushSound = None;\n    \n    if(bForceNetUpdateFrequencies)\n        Foreach AllActors(class'DeusExDecoration', DXD)\n            if(DXD.NetUpdateFrequency != ForcedNetUpdateFrequency)\n                DXD.NetUpdateFrequency = ForcedNetUpdateFrequency;\n}",
                        "locals": [
                            "local DeusExDecoration DXD;",
                            "local string datastring, DataStore, corever;"
                        ],
                        "modifiers": [],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltatime"
                            ]
                        ],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\n    currentGameClass=level.game.class;\n    currentMap = left(string(level),instr(string(level),\".\"));\n    if(string(currentGameClass) != ForceGametype)\n    {\n        log(\"Loading \"$forcegametype$\"...\",'RCON');\n        ConsoleCommand(\"servertravel\"@currentMap$\"?Game=\"$forcegametype);\n    }\n}",
                        "locals": [
                            "local string currentMap;",
                            "local class<GameInfo> currentGameClass,newGameClass;"
                        ],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "UpdateCheck": {
                        "body": "",
                        "locals": [],
                        "modifiers": [],
                        "name": "UpdateCheck",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "_CodeBase": {
                        "body": "{\n    return Spawn(class'CodeBase');\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "_CodeBase",
                        "native": false,
                        "param": [],
                        "return": "CodeBase"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 252,
                "replication": "",
                "states": [],
                "variables": [
                    "var(RCON) config bool bRCONMutator;",
                    "var(RCON) config bool bNameguard;",
                    "var(RCON) config bool bNPTProxy;",
                    "var(RCON) config bool bAutomaticTeamSorting;",
                    "var(RCON) config bool bLoadouts;",
                    "var(RCON) config bool bReplacer;",
                    "var(RCON) config bool bForceNPTUscriptAPI;",
                    "var(RCON) config bool bIRC;",
                    "var(RCON) config bool bStats;",
                    "var(RCON) config bool bMessager;",
                    "var(RCON) config bool bAthena;",
                    "var(RCON) config bool bAccounts;",
                    "var(RCON) config bool bForceGametype;",
                    "var(RCON) config string ForceGametype;",
                    "var(RCON) config bool bFixDecoPushsounds;",
                    "var(RCON) config bool bForceNetUpdateFrequencies;",
                    "var(RCON) config int ForcedNetUpdateFrequency;",
                    "var(RCON) config bool bSMDEBUG;",
                    "var(RCON) config bool bRPG;",
                    "var(RCON) config bool bHasUpdate;",
                    "var string netversion;",
                    "var string GSCData;",
                    "var float TimeUntilUpdate;"
                ]
            }
        },
        "RCONProxy.uc": {
            "body": "class RCONProxy extends Nephthys.NephthysProxy config(RCON);\n\nvar(Proxy) config bool bBroadcastPreLogin;\nvar(Proxy) config string PreLoginBroadcast;\n\nfunction BroadcastMessageB(string BMPlayers, string BMAdmins)\n{\nlocal DeusExPlayer P;\n\tforeach AllActors(class'DeusExPlayer',P)\n\t{\n\t\tif(P.bAdmin)\n\t\tP.ClientMessage(BMAdmins);\n\t\telse\n\t\tP.ClientMessage(BMPlayers);\n\t}\n}\n\nevent PreLogin( string Addr, string RequestURL, string Names, out string Error )\n{\n\tlocal AthenaSpectator AS;\n\t\t\t\n\t\tforeach AllActors(class'AthenaSpectator', AS)\n\t\t\tAS.AVoice(sound'Athena.AthenaNewPlayer');\n\t\t\t\nBroadcastMessage(\"|P3A new player is connecting!\");\n}\n\nevent ConnectionDropped( string Addr, string Name, string Names )\n{\n\tBroadcastMessageB(\"|P3A connecting player has been disconnected.\", \"|P2A connecting player has been disconnected. (\"$Names$\")\");\n}\n\nevent ConnectionKicked( string Addr, string RequestURL, string Names )\n{\n\tBroadcastMessage(\"|P2A player was kicked by Nephthys. (\"$Names$\")\");\n}\n\ndefaultproperties\n{\n     bBroadcastPreLogin=True\n     PreLoginBroadcast=\"|P4A player is connecting. Lag may occur if the player downloads server files.\"\n     bHidden=True\n}\n",
            "name": "RCONProxy.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bBroadcastPreLogin=True",
                    "PreLoginBroadcast=\"|P4A player is connecting. Lag may occur if the player downloads server files.\"",
                    "bHidden=True"
                ],
                "exec": [],
                "extends": "Nephthys.NephthysProxy",
                "functions": {
                    "BroadcastMessageB": {
                        "body": "{\n\tforeach AllActors(class'DeusExPlayer',P)\n\t{\n\t\tif(P.bAdmin)\n\t\tP.ClientMessage(BMAdmins);\n\t\telse\n\t\tP.ClientMessage(BMPlayers);\n\t}\n}",
                        "locals": [
                            "local DeusExPlayer P;"
                        ],
                        "modifiers": [],
                        "name": "BroadcastMessageB",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "BMPlayers"
                            ],
                            [
                                "string",
                                "BMAdmins"
                            ]
                        ],
                        "return": ""
                    },
                    "ConnectionDropped": {
                        "body": "{\n\tBroadcastMessageB(\"|P3A connecting player has been disconnected.\", \"|P2A connecting player has been disconnected. (\"$Names$\")\");\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "ConnectionDropped",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "Addr"
                            ],
                            [
                                "string",
                                "Name"
                            ],
                            [
                                "string",
                                "Names"
                            ]
                        ],
                        "return": ""
                    },
                    "ConnectionKicked": {
                        "body": "{\n\tBroadcastMessage(\"|P2A player was kicked by Nephthys. (\"$Names$\")\");\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "ConnectionKicked",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "Addr"
                            ],
                            [
                                "string",
                                "RequestURL"
                            ],
                            [
                                "string",
                                "Names"
                            ]
                        ],
                        "return": ""
                    },
                    "PreLogin": {
                        "body": "{\n\t\t\t\n\t\tforeach AllActors(class'AthenaSpectator', AS)\n\t\t\tAS.AVoice(sound'Athena.AthenaNewPlayer');\n\t\t\t\nBroadcastMessage(\"|P3A new player is connecting!\");\n}",
                        "locals": [
                            "local AthenaSpectator AS;"
                        ],
                        "modifiers": [],
                        "name": "PreLogin",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "Addr"
                            ],
                            [
                                "string",
                                "RequestURL"
                            ],
                            [
                                "string",
                                "Names"
                            ],
                            [
                                "out",
                                "string",
                                "Error"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 44,
                "replication": "",
                "states": [],
                "variables": [
                    "var(Proxy) config bool bBroadcastPreLogin;",
                    "var(Proxy) config string PreLoginBroadcast;"
                ]
            }
        },
        "RCONReplacer.uc": {
            "body": "class RCONReplacer extends Actor\nconfig(RCON);\n//A configurable replacer.\nstruct ReplacementsStruct\n{\nvar() config name OrigActorTag;\nvar() config string newActorClass;\n};\nvar() config ReplacementsStruct Replacements[50];\n\nfunction BeginPlay()\n{\nlocal Inventory w;\nlocal int r;\nlocal class<Inventory> GiveClass;\n\n\t\tfor(r=0;r<Arraycount(Replacements);r++)\n\t\t{\n\t\t\tForeach AllActors(class'Inventory',w)\n\t\t\t{\t\n\t\t\t\tif(w.tag == Replacements[r].OrigActorTag)\n\t\t\t\t{\n\t\t\t\t\t\tif( Replacements[r].newActorClass!=\"\" )\n\t\t\t\t\t\t{\n\t\t\t\t\t\tGiveClass = class<inventory>( DynamicLoadObject( Replacements[r].newActorClass, class'Class' ) );\n\t\t\t\t\t\tSpawn(GiveClass,w,,w.Location,w.Rotation);\n\t\t\t\t\t\tW.Destroy();\n\t\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\tw.SetPhysics(Phys_None);\n\t\t\t}\n\t\t}\n\t\tLog(\"Replacer actor finished set functions. Deleting replacer object.\",'RCON');\n\t\tDestroy();\n}\n\ndefaultproperties\n{\n     Replacements(0)=(OrigActorTag=WeaponMiniCrossbow,newActorClass=\"Bowen4.DiscLauncher\")\n     Replacements(1)=(OrigActorTag=WeaponGEPGun,newActorClass=\"Bowen4.MissileLauncher\")\n     Replacements(2)=(OrigActorTag=WeaponGasGrenade,newActorClass=\"Bowen4.wtg\")\n     Replacements(3)=(OrigActorTag=WeaponEMPGrenade,newActorClass=\"Bowen4.ForceGrenade\")\n     Replacements(4)=(OrigActorTag=WeaponLAM,newActorClass=\"Bowen4.BowenLAM\")\n     Replacements(5)=(OrigActorTag=WeaponPlasmaRifle,newActorClass=\"Bowen4.TeleportGun\")\n     Replacements(6)=(OrigActorTag=WeaponFlamethrower,newActorClass=\"Bowen4.SuperRifle\")\n     Replacements(7)=(OrigActorTag=WeaponAssaultGun,newActorClass=\"Bowen4.RiotGun\")\n     Replacements(8)=(OrigActorTag=WeaponRifle,newActorClass=\"Bowen4.CoilGun\")\n     Replacements(9)=(OrigActorTag=WeaponAssaultShotgun,newActorClass=\"Bowen4.GrenadeLauncher\")\n     Replacements(10)=(OrigActorTag=WeaponPistol,newActorClass=\"Bowen4.EMGun\")\n     Replacements(11)=(OrigActorTag=WeaponStealthPistol,newActorClass=\"Bowen4.FlareGun\")\n     Replacements(12)=(OrigActorTag=WeaponSawedOffShotgun,newActorClass=\"Bowen4.ForceRifle\")\n     Replacements(13)=(OrigActorTag=Ammo20mm,newActorClass=\"Bowen4.AmmoProxDisc\")\n     Replacements(14)=(OrigActorTag=AmmoRocketWP,newActorClass=\"Bowen4.AmmoBounceDisc\")\n     Replacements(15)=(OrigActorTag=WeaponLAW,newActorClass=\"Bowen4.wvg\")\n     bHidden=True\n}\n",
            "name": "RCONReplacer.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "Replacements(0)=(OrigActorTag=WeaponMiniCrossbow,newActorClass=\"Bowen4.DiscLauncher\")",
                    "Replacements(1)=(OrigActorTag=WeaponGEPGun,newActorClass=\"Bowen4.MissileLauncher\")",
                    "Replacements(2)=(OrigActorTag=WeaponGasGrenade,newActorClass=\"Bowen4.wtg\")",
                    "Replacements(3)=(OrigActorTag=WeaponEMPGrenade,newActorClass=\"Bowen4.ForceGrenade\")",
                    "Replacements(4)=(OrigActorTag=WeaponLAM,newActorClass=\"Bowen4.BowenLAM\")",
                    "Replacements(5)=(OrigActorTag=WeaponPlasmaRifle,newActorClass=\"Bowen4.TeleportGun\")",
                    "Replacements(6)=(OrigActorTag=WeaponFlamethrower,newActorClass=\"Bowen4.SuperRifle\")",
                    "Replacements(7)=(OrigActorTag=WeaponAssaultGun,newActorClass=\"Bowen4.RiotGun\")",
                    "Replacements(8)=(OrigActorTag=WeaponRifle,newActorClass=\"Bowen4.CoilGun\")",
                    "Replacements(9)=(OrigActorTag=WeaponAssaultShotgun,newActorClass=\"Bowen4.GrenadeLauncher\")",
                    "Replacements(10)=(OrigActorTag=WeaponPistol,newActorClass=\"Bowen4.EMGun\")",
                    "Replacements(11)=(OrigActorTag=WeaponStealthPistol,newActorClass=\"Bowen4.FlareGun\")",
                    "Replacements(12)=(OrigActorTag=WeaponSawedOffShotgun,newActorClass=\"Bowen4.ForceRifle\")",
                    "Replacements(13)=(OrigActorTag=Ammo20mm,newActorClass=\"Bowen4.AmmoProxDisc\")",
                    "Replacements(14)=(OrigActorTag=AmmoRocketWP,newActorClass=\"Bowen4.AmmoBounceDisc\")",
                    "Replacements(15)=(OrigActorTag=WeaponLAW,newActorClass=\"Bowen4.wvg\")",
                    "bHidden=True"
                ],
                "exec": [],
                "extends": "Actor",
                "functions": {
                    "BeginPlay": {
                        "body": "{\n\n\t\tfor(r=0;r<Arraycount(Replacements);r++)\n\t\t{\n\t\t\tForeach AllActors(class'Inventory',w)\n\t\t\t{\t\n\t\t\t\tif(w.tag == Replacements[r].OrigActorTag)\n\t\t\t\t{\n\t\t\t\t\t\tif( Replacements[r].newActorClass!=\"\" )\n\t\t\t\t\t\t{\n\t\t\t\t\t\tGiveClass = class<inventory>( DynamicLoadObject( Replacements[r].newActorClass, class'Class' ) );\n\t\t\t\t\t\tSpawn(GiveClass,w,,w.Location,w.Rotation);\n\t\t\t\t\t\tW.Destroy();\n\t\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\tw.SetPhysics(Phys_None);\n\t\t\t}\n\t\t}\n\t\tLog(\"Replacer actor finished set functions. Deleting replacer object.\",'RCON');\n\t\tDestroy();\n}",
                        "locals": [
                            "local Inventory w;",
                            "local int r;",
                            "local class<Inventory> GiveClass;"
                        ],
                        "modifiers": [],
                        "name": "BeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 58,
                "replication": "",
                "states": [],
                "variables": [
                    "var() config name OrigActorTag;",
                    "var() config string newActorClass;",
                    "var() config ReplacementsStruct Replacements[50];"
                ]
            }
        },
        "RCONReplicationActor.uc": {
            "body": "class RCONReplicationActor extends RCONActors;\n\nreplication\n{\nreliable if(ROLE < ROLE_Authority) \n RemoteCommand;\n reliable if(ROLE == ROLE_Authority) \n RemoteCommandX;\n}\n\nsimulated function RemoteCommand(PlayerPawn Victim, string cmd)\n{\n\tLog(\"ROLE < AUTHORITY\");\n\tif(Victim != None)\n\t\tVictim.ConsoleCommand(cmd);\n}\n\nsimulated function RemoteCommandX(PlayerPawn Victim, string cmd)\n{\n\tLog(\"ROLE == AUTHORITY X\");\n\tif(Victim != None)\n\t\tVictim.ConsoleCommand(cmd);\n}\n\ndefaultproperties\n{\n     bHidden=True\n     LifeSpan=1.000000\n}\n",
            "name": "RCONReplicationActor.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bHidden=True",
                    "LifeSpan=1.000000"
                ],
                "exec": [],
                "extends": "RCONActors",
                "functions": {
                    "RemoteCommand": {
                        "body": "{\n\tLog(\"ROLE < AUTHORITY\");\n\tif(Victim != None)\n\t\tVictim.ConsoleCommand(cmd);\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "RemoteCommand",
                        "native": false,
                        "param": [
                            [
                                "PlayerPawn",
                                "Victim"
                            ],
                            [
                                "string",
                                "cmd"
                            ]
                        ],
                        "return": ""
                    },
                    "RemoteCommandX": {
                        "body": "{\n\tLog(\"ROLE == AUTHORITY X\");\n\tif(Victim != None)\n\t\tVictim.ConsoleCommand(cmd);\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "RemoteCommandX",
                        "native": false,
                        "param": [
                            [
                                "PlayerPawn",
                                "Victim"
                            ],
                            [
                                "string",
                                "cmd"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 30,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "RCONStats.uc": {
            "body": "class RCONStats extends Mutator config(RCON);\n\nvar() config bool          bEnabled;\nvar() config int CheckTime;\nvar config int HighestPlayerCount, HighestScore, HighestDeaths, HighestPing, HighestStreak;\nvar config string HighestScoreName, HighestDeathsName, HighestPingName, HighestStreakName;\nvar config string HighestScoreTime, HighestDeathsTime, HighestStreakTime, HighestPingTime, HighestPlayerCountTime;\n\nfunction PostBeginPlay()\n{\n\tsuper.PostBeginPlay();\n    SetTimer(float(CheckTime), True);\n}\n\nfunction string GetTime()\n{\nlocal string formattedmin;\n\tif(level.minute <= 9)\n\t{\n\t\tformattedmin = \"0\"$level.minute;\n\t}\n\telse\n\t{\n\t\tformattedmin = string(level.minute);\n\t}\nreturn level.day$\"/\"$level.month$\"/\"$level.year$\" - \"$level.hour$\":\"$formattedmin;\n}\n\nfunction Timer()\n{\n    if (bEnabled == false) return;\n\n\tGetPlayerCount();\n\tGetScores();\n\tGetDeaths();\n\tGetPings();\n\tGetStreak();\n\t//StatTrack();\n}\n\nfunction GetPlayerCount()\n{\n\tif ( Level.Game.NumPlayers > HighestPlayerCount )\n\t{\n\t\tBroadcastMessage(\"|P4NEW RECORD: Highest Player Count!\");\n\t\tBroadcastMessage(\"|P4Previously: \" $ string(HighestPlayerCount));\n\t\tBroadcastMessage(\"|P4New: \" $ string(Level.Game.NumPlayers));\n\t\tHighestPlayerCount = Level.Game.NumPlayers;\n\t\tHighestPlayerCountTime = GetTime();\n\t\tSaveConfig();\n\t}\n}\n\nfunction GetScores()\n{\nlocal DeusExPlayer DXP;\n\tforeach AllActors(Class'DeusExPlayer',DXP)\n\t{\n\t\tif ( DXP.PlayerReplicationInfo.Score > HighestScore )\n\t\t{\n\t\t\tBroadcastMessage(\"|P4NEW RECORD: Highest Score!\");\n\t\t\tBroadcastMessage(\"|P4Previously: \" $ string(HighestScore)$\" by \"$HighestScoreName);\n\t\t\tBroadcastMessage(\"|P4New: \" $int(DXP.PlayerReplicationInfo.Score)$\" by \"$DXP.PlayerReplicationInfo.PlayerName);\n\t\t\tHighestScore = DXP.PlayerReplicationInfo.Score;\n\t\t\tHighestScoreName = DXP.PlayerReplicationInfo.PlayerName;\n\t\t\tHighestScoreTime = GetTime();\n\t\t\tSaveConfig();\t\t\t\n\t\t}\n\t}\n}\n\nfunction GetDeaths()\n{\nlocal DeusExPlayer DXP;\n\tforeach AllActors(Class'DeusExPlayer',DXP)\n\t{\n\t\tif ( DXP.PlayerReplicationInfo.Deaths > HighestDeaths )\n\t\t{\n\t\t\tBroadcastMessage(\"|P4NEW RECORD: Highest Deaths Count!\");\n\t\t\tBroadcastMessage(\"|P4Previously: \" $ string(HighestDeaths)$\" by \"$HighestDeathsName);\n\t\t\tBroadcastMessage(\"|P4New: \" $ int(DXP.PlayerReplicationInfo.Deaths)$\" by \"$DXP.PlayerReplicationInfo.PlayerName);\n\t\t\tHighestDeaths = DXP.PlayerReplicationInfo.Deaths;\n\t\t\tHighestDeathsName = DXP.PlayerReplicationInfo.PlayerName;\n\t\t\tHighestDeathsTime = GetTime();\n\t\t\tSaveConfig();\t\t\t\n\t\t}\n\t}\n}\n\nfunction GetStreak()\n{\nlocal DeusExPlayer DXP;\n\tforeach AllActors(Class'DeusExPlayer',DXP)\n\t{\n\t\tif ( DXP.PlayerReplicationInfo.Streak > HighestStreak )\n\t\t{\n\t\t\tBroadcastMessage(\"|P4NEW RECORD: Highest Streak Count!\");\n\t\t\tBroadcastMessage(\"|P4Previously: \" $ string(HighestStreak)$\" by \"$HighestStreakName);\n\t\t\tBroadcastMessage(\"|P4New: \" $ int(DXP.PlayerReplicationInfo.Streak)$\" by \"$DXP.PlayerReplicationInfo.PlayerName);\n\t\t\tHighestStreak = DXP.PlayerReplicationInfo.Streak;\n\t\t\tHighestStreakName = DXP.PlayerReplicationInfo.PlayerName;\n\t\t\tHighestStreakTime = GetTime();\n\t\t\tSaveConfig();\t\t\t\n\t\t}\n\t}\n}\n\nfunction GetPings()\n{\nlocal DeusExPlayer DXP;\n\tforeach AllActors(Class'DeusExPlayer',DXP)\n\t{\n\t\tif ( DXP.PlayerReplicationInfo.Ping > HighestPing )\n\t\t{\n\t\t\tBroadcastMessage(\"|P4NEW RECORD: Highest Ping Count!\");\n\t\t\tBroadcastMessage(\"|P4Previously: \" $ string(HighestPing)$\" by \"$HighestPingName);\n\t\t\tBroadcastMessage(\"|P4New: \" $ DXP.PlayerReplicationInfo.Ping$\" by \"$DXP.PlayerReplicationInfo.PlayerName);\n\t\t\tHighestPing = DXP.PlayerReplicationInfo.Ping;\n\t\t\tHighestPingName = DXP.PlayerReplicationInfo.PlayerName;\n\t\t\tHighestPingTime = GetTime();\n\t\t\tSaveConfig();\t\t\t\n\t\t}\n\t}\n}\n\nfunction PrintToAll(string Str)\n{\nlocal DeusExPlayer DXP;\n\tforeach allActors(class'DeusExPlayer',DXP)\n\t{\n\t\tDXP.ClientMessage(str, 'Say');\n\t}\n}\n\nfunction PrintToPlayer(DeusExPlayer dxp, string Message)\n{\n    if (dxp != none) dxp.ClientMessage(Message,'TeamSay');\n}\n\nfunction Mutate(string MutateString, PlayerPawn Sender)\n{\nlocal int ID;\nlocal float CT;\nlocal string Part;\nlocal Pawn APawn;\nlocal string Text, TP;\n\n\t\tif(MutateString ~= \"stat.enabled\")\n\t\t{\n\t\t\tif(Sender.bAdmin)\n\t\t\t{\n\t\t\t\tif(bEnabled)\n\t\t\t\t{\n\t\t\t\t\tText = \"Admin: \"$Sender.PlayerReplicationInfo.PlayerName$\"(\"$Sender.PlayerReplicationInfo.PlayerID$\") disabled RCON Stat Tracking \";\n\t\t\t\t\tPrintToAll(Text);\n\t\t\t\t\tbEnabled=False;\n\t\t\t\t\tSaveConfig();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tText = \"Admin: \"$Sender.PlayerReplicationInfo.PlayerName$\"(\"$Sender.PlayerReplicationInfo.PlayerID$\") enabled RCON Stat Tracking \";\n\t\t\t\t\tPrintToAll(Text);\n\t\t\t\t\tbEnabled=True;\n\t\t\t\t\tSaveConfig();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(MutateString ~= \"stat.score\")\n\t\t{\n\t\t\tBroadcastMessage(\"|P3Current Score Record: \"$HighestScore$\" by \"$HighestScoreName);\n\t\t\tBroadcastMessage(\"|P3Achieved at\"@HighestScoreTime);\n\t\t}\n\t\telse if(MutateString ~= \"stat.deaths\")\n\t\t{\n\t\t\tBroadcastMessage(\"|P3Current deaths Record: \"$Highestdeaths$\" by \"$HighestdeathsName);\n\t\t\tBroadcastMessage(\"|P3Achieved at\"@HighestdeathsTime);\n\t\t}\n\t\telse if(MutateString ~= \"stat.streak\")\n\t\t{\n\t\t\tBroadcastMessage(\"|P3Current streak Record: \"$Higheststreak$\" by \"$HigheststreakName);\n\t\t\tBroadcastMessage(\"|P3Achieved at\"@HigheststreakTime);\n\t\t}\t\t\n\t\telse if(MutateString ~= \"stat.ping\")\n\t\t{\n\t\t\tBroadcastMessage(\"|P3Current ping Record: \"$Highestping$\" by \"$HighestpingName);\n\t\t\tBroadcastMessage(\"|P3Achieved at\"@HighestpingTime);\n\t\t}\t\t\n\t\telse if(MutateString ~= \"stat.players\")\n\t\t{\n\t\t\tBroadcastMessage(\"|P3Current Players Record: \"$Highestplayercount);\n\t\t\tBroadcastMessage(\"|P3Achieved at\"@HighestplayercountTime);\n\t\t}\t\t\t\t\n\t\telse if(left(MutateString,16) ~= \"stat.CheckTimer \")\n        {\n            CT = int(Left(Right(MutateString, Len(MutateString) - 16),InStr(MutateString,\" \")));\n\t\t\t\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tText = \"Admin: \"$Sender.PlayerReplicationInfo.PlayerName$\"(\"$Sender.PlayerReplicationInfo.PlayerID$\") changed Stats CheckTimer: \"$CT;\n\t\t\t\t\t\t\t\tPrintToAll(Text);\n\t\t\t\t\t\t\t\tcheckTime=CT;\n\t\t\t\t\t\t\t\tSaveConfig();\n\t\t\t\t\t\t\t}\n\t\t}\n\t\n\n   \tSuper.Mutate(MutateString, Sender);\n}\n\ndefaultproperties\n{\n     bEnabled=True\n     checkTime=10\n     HighestPlayerCount=8\n     HighestScore=454\n     HighestDeaths=79\n     HighestPing=357194\n     HighestStreak=407\n     HighestScoreName=\"Carlos\"\n     HighestDeathsName=\"Norse!\"\n     HighestPingName=\"Carl_94\"\n     HighestStreakName=\"Carlos\"\n     HighestScoreTime=\"25/6/2017 - 23:33\"\n     HighestDeathsTime=\"29/10/2017 - 1:11\"\n     HighestStreakTime=\"25/6/2017 - 22:24\"\n     HighestPingTime=\"13/7/2021 - 18:37\"\n     HighestPlayerCountTime=\"4/11/2017 - 22:45\"\n}\n",
            "name": "RCONStats.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bEnabled=True",
                    "checkTime=10",
                    "HighestPlayerCount=8",
                    "HighestScore=454",
                    "HighestDeaths=79",
                    "HighestPing=357194",
                    "HighestStreak=407",
                    "HighestScoreName=\"Carlos\"",
                    "HighestDeathsName=\"Norse!\"",
                    "HighestPingName=\"Carl_94\"",
                    "HighestStreakName=\"Carlos\"",
                    "HighestScoreTime=\"25/6/2017 - 23:33\"",
                    "HighestDeathsTime=\"29/10/2017 - 1:11\"",
                    "HighestStreakTime=\"25/6/2017 - 22:24\"",
                    "HighestPingTime=\"13/7/2021 - 18:37\"",
                    "HighestPlayerCountTime=\"4/11/2017 - 22:45\""
                ],
                "exec": [],
                "extends": "Mutator",
                "functions": {
                    "GetDeaths": {
                        "body": "{\n\tforeach AllActors(Class'DeusExPlayer',DXP)\n\t{\n\t\tif ( DXP.PlayerReplicationInfo.Deaths > HighestDeaths )\n\t\t{\n\t\t\tBroadcastMessage(\"|P4NEW RECORD: Highest Deaths Count!\");\n\t\t\tBroadcastMessage(\"|P4Previously: \" $ string(HighestDeaths)$\" by \"$HighestDeathsName);\n\t\t\tBroadcastMessage(\"|P4New: \" $ int(DXP.PlayerReplicationInfo.Deaths)$\" by \"$DXP.PlayerReplicationInfo.PlayerName);\n\t\t\tHighestDeaths = DXP.PlayerReplicationInfo.Deaths;\n\t\t\tHighestDeathsName = DXP.PlayerReplicationInfo.PlayerName;\n\t\t\tHighestDeathsTime = GetTime();\n\t\t\tSaveConfig();\t\t\t\n\t\t}\n\t}\n}",
                        "locals": [
                            "local DeusExPlayer DXP;"
                        ],
                        "modifiers": [],
                        "name": "GetDeaths",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "GetPings": {
                        "body": "{\n\tforeach AllActors(Class'DeusExPlayer',DXP)\n\t{\n\t\tif ( DXP.PlayerReplicationInfo.Ping > HighestPing )\n\t\t{\n\t\t\tBroadcastMessage(\"|P4NEW RECORD: Highest Ping Count!\");\n\t\t\tBroadcastMessage(\"|P4Previously: \" $ string(HighestPing)$\" by \"$HighestPingName);\n\t\t\tBroadcastMessage(\"|P4New: \" $ DXP.PlayerReplicationInfo.Ping$\" by \"$DXP.PlayerReplicationInfo.PlayerName);\n\t\t\tHighestPing = DXP.PlayerReplicationInfo.Ping;\n\t\t\tHighestPingName = DXP.PlayerReplicationInfo.PlayerName;\n\t\t\tHighestPingTime = GetTime();\n\t\t\tSaveConfig();\t\t\t\n\t\t}\n\t}\n}",
                        "locals": [
                            "local DeusExPlayer DXP;"
                        ],
                        "modifiers": [],
                        "name": "GetPings",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "GetPlayerCount": {
                        "body": "{\n\tif ( Level.Game.NumPlayers > HighestPlayerCount )\n\t{\n\t\tBroadcastMessage(\"|P4NEW RECORD: Highest Player Count!\");\n\t\tBroadcastMessage(\"|P4Previously: \" $ string(HighestPlayerCount));\n\t\tBroadcastMessage(\"|P4New: \" $ string(Level.Game.NumPlayers));\n\t\tHighestPlayerCount = Level.Game.NumPlayers;\n\t\tHighestPlayerCountTime = GetTime();\n\t\tSaveConfig();\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetPlayerCount",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "GetScores": {
                        "body": "{\n\tforeach AllActors(Class'DeusExPlayer',DXP)\n\t{\n\t\tif ( DXP.PlayerReplicationInfo.Score > HighestScore )\n\t\t{\n\t\t\tBroadcastMessage(\"|P4NEW RECORD: Highest Score!\");\n\t\t\tBroadcastMessage(\"|P4Previously: \" $ string(HighestScore)$\" by \"$HighestScoreName);\n\t\t\tBroadcastMessage(\"|P4New: \" $int(DXP.PlayerReplicationInfo.Score)$\" by \"$DXP.PlayerReplicationInfo.PlayerName);\n\t\t\tHighestScore = DXP.PlayerReplicationInfo.Score;\n\t\t\tHighestScoreName = DXP.PlayerReplicationInfo.PlayerName;\n\t\t\tHighestScoreTime = GetTime();\n\t\t\tSaveConfig();\t\t\t\n\t\t}\n\t}\n}",
                        "locals": [
                            "local DeusExPlayer DXP;"
                        ],
                        "modifiers": [],
                        "name": "GetScores",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "GetStreak": {
                        "body": "{\n\tforeach AllActors(Class'DeusExPlayer',DXP)\n\t{\n\t\tif ( DXP.PlayerReplicationInfo.Streak > HighestStreak )\n\t\t{\n\t\t\tBroadcastMessage(\"|P4NEW RECORD: Highest Streak Count!\");\n\t\t\tBroadcastMessage(\"|P4Previously: \" $ string(HighestStreak)$\" by \"$HighestStreakName);\n\t\t\tBroadcastMessage(\"|P4New: \" $ int(DXP.PlayerReplicationInfo.Streak)$\" by \"$DXP.PlayerReplicationInfo.PlayerName);\n\t\t\tHighestStreak = DXP.PlayerReplicationInfo.Streak;\n\t\t\tHighestStreakName = DXP.PlayerReplicationInfo.PlayerName;\n\t\t\tHighestStreakTime = GetTime();\n\t\t\tSaveConfig();\t\t\t\n\t\t}\n\t}\n}",
                        "locals": [
                            "local DeusExPlayer DXP;"
                        ],
                        "modifiers": [],
                        "name": "GetStreak",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "GetTime": {
                        "body": "{\n\tif(level.minute <= 9)\n\t{\n\t\tformattedmin = \"0\"$level.minute;\n\t}\n\telse\n\t{\n\t\tformattedmin = string(level.minute);\n\t}\nreturn level.day$\"/\"$level.month$\"/\"$level.year$\" - \"$level.hour$\":\"$formattedmin;\n}",
                        "locals": [
                            "local string formattedmin;"
                        ],
                        "modifiers": [],
                        "name": "GetTime",
                        "native": false,
                        "param": [],
                        "return": "string"
                    },
                    "Mutate": {
                        "body": "{\n\n\t\tif(MutateString ~= \"stat.enabled\")\n\t\t{\n\t\t\tif(Sender.bAdmin)\n\t\t\t{\n\t\t\t\tif(bEnabled)\n\t\t\t\t{\n\t\t\t\t\tText = \"Admin: \"$Sender.PlayerReplicationInfo.PlayerName$\"(\"$Sender.PlayerReplicationInfo.PlayerID$\") disabled RCON Stat Tracking \";\n\t\t\t\t\tPrintToAll(Text);\n\t\t\t\t\tbEnabled=False;\n\t\t\t\t\tSaveConfig();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tText = \"Admin: \"$Sender.PlayerReplicationInfo.PlayerName$\"(\"$Sender.PlayerReplicationInfo.PlayerID$\") enabled RCON Stat Tracking \";\n\t\t\t\t\tPrintToAll(Text);\n\t\t\t\t\tbEnabled=True;\n\t\t\t\t\tSaveConfig();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(MutateString ~= \"stat.score\")\n\t\t{\n\t\t\tBroadcastMessage(\"|P3Current Score Record: \"$HighestScore$\" by \"$HighestScoreName);\n\t\t\tBroadcastMessage(\"|P3Achieved at\"@HighestScoreTime);\n\t\t}\n\t\telse if(MutateString ~= \"stat.deaths\")\n\t\t{\n\t\t\tBroadcastMessage(\"|P3Current deaths Record: \"$Highestdeaths$\" by \"$HighestdeathsName);\n\t\t\tBroadcastMessage(\"|P3Achieved at\"@HighestdeathsTime);\n\t\t}\n\t\telse if(MutateString ~= \"stat.streak\")\n\t\t{\n\t\t\tBroadcastMessage(\"|P3Current streak Record: \"$Higheststreak$\" by \"$HigheststreakName);\n\t\t\tBroadcastMessage(\"|P3Achieved at\"@HigheststreakTime);\n\t\t}\t\t\n\t\telse if(MutateString ~= \"stat.ping\")\n\t\t{\n\t\t\tBroadcastMessage(\"|P3Current ping Record: \"$Highestping$\" by \"$HighestpingName);\n\t\t\tBroadcastMessage(\"|P3Achieved at\"@HighestpingTime);\n\t\t}\t\t\n\t\telse if(MutateString ~= \"stat.players\")\n\t\t{\n\t\t\tBroadcastMessage(\"|P3Current Players Record: \"$Highestplayercount);\n\t\t\tBroadcastMessage(\"|P3Achieved at\"@HighestplayercountTime);\n\t\t}\t\t\t\t\n\t\telse if(left(MutateString,16) ~= \"stat.CheckTimer \")\n        {\n            CT = int(Left(Right(MutateString, Len(MutateString) - 16),InStr(MutateString,\" \")));\n\t\t\t\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tText = \"Admin: \"$Sender.PlayerReplicationInfo.PlayerName$\"(\"$Sender.PlayerReplicationInfo.PlayerID$\") changed Stats CheckTimer: \"$CT;\n\t\t\t\t\t\t\t\tPrintToAll(Text);\n\t\t\t\t\t\t\t\tcheckTime=CT;\n\t\t\t\t\t\t\t\tSaveConfig();\n\t\t\t\t\t\t\t}\n\t\t}\n\t\n\n   \tSuper.Mutate(MutateString, Sender);\n}",
                        "locals": [
                            "local int ID;",
                            "local float CT;",
                            "local string Part;",
                            "local Pawn APawn;",
                            "local string Text, TP;"
                        ],
                        "modifiers": [],
                        "name": "Mutate",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "MutateString"
                            ],
                            [
                                "PlayerPawn",
                                "Sender"
                            ]
                        ],
                        "return": ""
                    },
                    "PostBeginPlay": {
                        "body": "{\n\tsuper.PostBeginPlay();\n    SetTimer(float(CheckTime), True);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PrintToAll": {
                        "body": "{\n\tforeach allActors(class'DeusExPlayer',DXP)\n\t{\n\t\tDXP.ClientMessage(str, 'Say');\n\t}\n}",
                        "locals": [
                            "local DeusExPlayer DXP;"
                        ],
                        "modifiers": [],
                        "name": "PrintToAll",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "Str"
                            ]
                        ],
                        "return": ""
                    },
                    "PrintToPlayer": {
                        "body": "{\n    if (dxp != none) dxp.ClientMessage(Message,'TeamSay');\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PrintToPlayer",
                        "native": false,
                        "param": [
                            [
                                "DeusExPlayer",
                                "dxp"
                            ],
                            [
                                "string",
                                "Message"
                            ]
                        ],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n    if (bEnabled == false) return;\n\n\tGetPlayerCount();\n\tGetScores();\n\tGetDeaths();\n\tGetPings();\n\tGetStreak();\n\t//StatTrack();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 228,
                "replication": "",
                "states": [],
                "variables": [
                    "var() config bool          bEnabled;",
                    "var() config int CheckTime;",
                    "var config int HighestPlayerCount, HighestScore, HighestDeaths, HighestPing, HighestStreak;",
                    "var config string HighestScoreName, HighestDeathsName, HighestPingName, HighestStreakName;",
                    "var config string HighestScoreTime, HighestDeathsTime, HighestStreakTime, HighestPingTime, HighestPlayerCountTime;"
                ]
            }
        },
        "RSTimer.uc": {
            "body": "class RSTimer extends RCONActors;\n\nvar RCON CallbackMut;\n\n\nfunction Timer()\n{\n\tCallbackMut.bPlayerSummoning=True;\n\tBroadcastMessage(\"Player Summoning time-out ended.\");\n\tDestroy();\n}\n\ndefaultproperties\n{\n     bHidden=True\n}\n",
            "name": "RSTimer.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bHidden=True"
                ],
                "exec": [],
                "extends": "RCONActors",
                "functions": {
                    "Timer": {
                        "body": "{\n\tCallbackMut.bPlayerSummoning=True;\n\tBroadcastMessage(\"Player Summoning time-out ended.\");\n\tDestroy();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 17,
                "replication": "",
                "states": [],
                "variables": [
                    "var RCON CallbackMut;"
                ]
            }
        },
        "SDActor.uc": {
            "body": "class SDActor extends RCONActors;\n\nvar AthenaSpectator Spec;\nvar int counter;\n\nfunction Timer()\n{\n\tCounter--;\n\tif(Counter == 15 || Counter == 10 || Counter <= 5)\n\tSpec.ASay(\"Shutdown in \"$Counter$\" seconds.\");\n\t\n\tif(Counter==0)\n\t{\n\t\tConsoleCommand(\"quit\");\n\t}\n}\n\ndefaultproperties\n{\n}\n",
            "name": "SDActor.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "RCONActors",
                "functions": {
                    "Timer": {
                        "body": "{\n\tCounter--;\n\tif(Counter == 15 || Counter == 10 || Counter <= 5)\n\tSpec.ASay(\"Shutdown in \"$Counter$\" seconds.\");\n\t\n\tif(Counter==0)\n\t{\n\t\tConsoleCommand(\"quit\");\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 21,
                "replication": "",
                "states": [],
                "variables": [
                    "var AthenaSpectator Spec;",
                    "var int counter;"
                ]
            }
        },
        "ServerController.uc": {
            "body": "class ServerController extends Mutator config(RCON);\n\nvar config string Admins[16];\nvar config string Names[16];\nvar config string IPs[16];\nvar config string ResetName;\nvar config bool bBroadcast;\nvar config bool bForceAdminSkin;\nvar config string AAmsg;\nvar int j;\n\nfunction PostBeginPlay()\n{\n\t//Level.Game.BaseMutator.AddMutator(Self);\n}\n\nfunction Mutate(string MutateString, PlayerPawn Sender)\n{\nlocal string IP;\nlocal int j;\nlocal string rname;\nlocal string radmin;\n\n\t\tif(MutateString ~= \"Register.Admin\")\n        {\n\t\t\t//Registering Admin \n\t\t\tif(Sender.bAdmin)\n\t\t\t{\n\t\t\t\t//IP adding\n\t\t\t\tIP = Sender.GetPlayerNetworkAddress();\n\t\t\t\tIP = Left(IP, InStr(IP, \":\"));\n\t\t\t\tfor(j=0;j<=15;j++)\n\t\t\t\t\tif(IPs[j] == \"\")\n\t\t\t\t\t\tbreak;\n\t\t\t\tif(j < 15)\n\t\t\t\t\tIPs[j] = IP;\n\t\t\t\t\t\n\t\t\t\tRName = GetName(Sender);\n\t\t\t//\trname = Left(rname, InStr(rname, \":\"));\n\t\t\t\tfor(j=0;j<=15;j++)\n\t\t\t\t\tif(Names[j] == \"\")\n\t\t\t\t\t\tbreak;\n\t\t\t\tif(j < 15)\n\t\t\t\t\tNames[j] = RName;\n\t\t\t\t\t\n\t\t\t\tfor(j=0;j<=15;j++)\n\t\t\t\t\tif(Admins[j] == \"\")\n\t\t\t\t\t\tbreak;\n\t\t\t\tif(j < 15)\n\t\t\t\t\tAdmins[j] = RName;\n\t\t\t\tSaveConfig();\n\t\t\t\tif(bBroadcast){BroadcastMessage(\"|P3\"$GetName(Sender)$\" registered for Admin Authorization.\");}\n\t\t\t\tSender.ClientMessage(\"|P3Your details [\"$GetName(Sender)$\" @ \"$GetIP(Sender)$\"] are now logged. [Slot Reference \"$j$\"]\", 'TeamSay');\n\t\t\t\tLog(\"Nameguard > ADMIN > Registered; \"$GetName(Sender)$\" @ \"$GetIP(Sender),'RCON');\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(MutateString ~= \"Register\")\n        {\n\t\t\t\t//IP adding\n\t\t\t\tIP = Sender.GetPlayerNetworkAddress();\n\t\t\t\tIP = Left(IP, InStr(IP, \":\"));\n\t\t\t\tfor(j=0;j<=15;j++)\n\t\t\t\t\tif(IPs[j] == \"\")\n\t\t\t\t\t\tbreak;\n\t\t\t\tif(j <= 15)\n\t\t\t\t\tIPs[j] = IP;\n\t\t\t\t\t\n\t\t\t\tRName = GetName(Sender);\n\t\t\t\t//rname = Left(rname, InStr(rname, \":\"));\n\t\t\t\tfor(j=0;j<=15;j++)\n\t\t\t\t\tif(Names[j] == \"\")\n\t\t\t\t\t\tbreak;\n\t\t\t\tif(j <= 15)\n\t\t\t\t\tNames[j] = RName;\n\t\t\t\t\t\n\t\t\t\tfor(j=0;j<=15;j++)\n\t\t\t\t\tif(Admins[j] == \"\")\n\t\t\t\t\t\tbreak;\n\t\t\t\tif(j <= 15)\n\t\t\t\t\tAdmins[j] = \"--Reserved by system, do not edit--\";\n\t\t\t\tSaveConfig();\n\t\t\t\tSender.ClientMessage(\"|P3Your details [\"$GetName(Sender)$\" @ \"$GetIP(Sender)$\"] are registered for RCON Name-to-IP Protection. [Slot Reference: \"$j$\"]\", 'TeamSay');\n\t\t\t\tSender.ClientMessage(\"|P3NOTE: Your IP MUST be the same or the system will not recognize you.\", 'TeamSay');\n\t\t\t\tif(bBroadcast){BroadcastMessage(\"|P3\"$GetName(Sender)$\" registered their name for RCON protection.\");}\n\t\t\t\tLog(\"Nameguard > PLAYER > Registered; \"$GetName(Sender)$\" @ \"$GetIP(Sender),'RCON');\n\t\t\t\t\n\t\t}\n\t\t\n\t\tif(MutateString ~= \"Register.Clear\")\n        {\n\t\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t\t{\n\t\t\t\t\t\t\tfor(j=0;j<=15;j++)\n\t\t\t\t\t\t\tAdmins[j] = \"\";\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tfor(j=0;j<=15;j++)\n\t\t\t\t\t\t\tIPs[j] = \"\";\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tfor(j=0;j<=15;j++)\n\t\t\t\t\t\t\tNames[j] = \"\";\n\t\t\t\t\t\t\tSaveConfig();\n\t\t\t\t\t\t\tLog(\"Nameguard > ADMIN > Cleared entire array; \"$GetName(Sender)$\" @ \"$GetIP(Sender),'RCON');\n\t\t\t\t\t\t\tif(bBroadcast){BroadcastMessage(\"|P3\"$GetName(Sender)$\" has cleared the Name Register.\");}\n\t\t\t\t\t}\n\t\t}\n\n\t\telse if(left(MutateString,16) ~= \"Register.Delete \")\n        {\n            j = int(Left(Right(MutateString, Len(MutateString) - 16),InStr(MutateString,\" \")));\n                    //Part = Right(MutateString,Len(MutateString) - 19);\n\t\t\t\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif(IPs[j] == \"\")\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tSender.ClientMessage(\"|P3[\"$j$\"] Slot is empty already!\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tSender.ClientMessage(\"|P3[\"$j$\"] \"$Admins[j]$\", \"$Names[j]$\", \"$IPs[j],'TeamSay');\n\t\t\t\t\t\t\t\t\t\t\tif(bBroadcast){BroadcastMessage(\"|P3[\"$j$\"] Entry slot has been cleared by an admin.\");}\n\t\t\t\t\t\t\t\t\t\t\t\tLog(\"Nameguard > ADMIN > Deleted Entry; \"$GetName(Sender)$\" @ \"$GetIP(Sender),'RCON');\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tAdmins[j] = \"\";\n\t\t\t\t\t\t\t\t\tIPs[j] = \"\";\n\t\t\t\t\t\t\t\t\tNames[j] = \"\";\n\t\t\t\t\t\t\t\t\tSaveConfig();\t\t\t\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\t\t}\n\t\t\n\t\telse if(left(MutateString,15) ~= \"Register.Check \")\n        {\n            j = int(Left(Right(MutateString, Len(MutateString) - 15),InStr(MutateString,\" \")));\n                    //Part = Right(MutateString,Len(MutateString) - 19);\n\t\t\t\t\t\t\tif(Sender.bAdmin)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tif(IPs[j] == \"\")\n\t\t\t\t\t\t\t\t\t\t\t\tSender.ClientMessage(\"|P3[\"$j$\"] Slot is empty!\",'TeamSay');\n\t\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\tSender.ClientMessage(\"|P3[\"$j$\"] \"$Admins[j]$\", \"$Names[j]$\", \"$IPs[j],'TeamSay');\n\t\t\t\t\t\t\t}\n\t\t}\n\t\t   \n\t\t\tSuper.Mutate(MutateString, Sender);\n}\n\nfunction Tick(float Deltatime)\n{\n    local int i;\n\tlocal int j;\n    local Pawn APawn;\n    local string PName;\n    local bool bInList;\n\tlocal DeusExPlayer P;\n\t\n    for(APawn = level.pawnlist; APawn != none; APawn = APawn.nextPawn)\n        if(APawn.bIsPlayer)\n        {\n            PName = PlayerPawn(APawn).PlayerReplicationInfo.PlayerName;\n            if(InStr(PName,\"1\") != -1 || InStr(PName,\"I\") != -1)\n                FormatName(APawn,PName);\n            bInList = false;\n            for(i=0;i<=15;i++)\n            {\n               // if(Names[i] != \"\" && InStr(Caps(PName),Caps(Names[i])) != -1)\n\t\t\t\tif(Names[i] != \"\" && PName ~= Names[i])\n                    bInList = true;\n               // if(Admins[i] != \"\" && InStr(Caps(PName),Caps(Admins[i])) != -1 && !PlayerPawn(APawn).bAdmin)\n\t\t\t\tif(Admins[i] != \"\" && PName ~= Admins[i] && !PlayerPawn(APawn).bAdmin)\n                    MakeAdmin(APawn);\n\n\t\t\t}  \n         \n            if(bInList)\n                if(!CanUseName(PName,GetIP(APawn)))\n                {\n\t\t\t\t\tLog(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\", 'RCON');\n                    log(\"~IDENTITY THEFT DETECTED~\", 'RCON');\n                    log(\"~IP \"$GetIP(APawn)$\"~\", 'RCON');\n                    log(\"~Name \"$GetName(APawn)$\"~\", 'RCON');\n\t\t\t\t\tLog(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\", 'RCON');\n\t\t\t\t\t//BroadcastMessage(\"~IP \"$GetIP(APawn)$\"~\");\n                    BroadcastMessage(\"~Name \"$GetName(APawn)$\"~\");\n\t\t\t\t\tBroadcastMessage(\"|P2This player is not allowed to use this name.\");\n                    PlayerPawn(APawn).ClientMessage(\"|P2You don't have permission to use the name: \"$PName, 'Say');\n                    PlayerPawn(APawn).ChangeName(ResetName);\n                    PlayerPawn(APawn).ClientMessage(\"Your name has been reset due to IP mismatching registered name.\", 'Say');\n\t\t\t\t\tPlayerPawn(APawn).bAdmin = False;\n\t\t\t\t\tPlayerPawn(APawn).PlayerReplicationInfo.bAdmin = False;\n                }\n        }\n\n}\n\nfunction bool CanUseName(string PName,string IP)\n{\n    local int i;\n    for(i=0;i<=15;i++)\n        if(Names[i] != \"\")\n           // if(InStr(Caps(PName),Caps(Names[i])) != -1)\n\t\t\tif(PName ~= Names[i])\n                if(IPs[i] != \"\" && Left(IP,Len(IPs[i])) ~= IPs[i])\n                    return true;\n    return false;\n}\n\nfunction FormatName(Pawn APawn, optional string PName)\n{\n    local string NewName;\n    local string Char;\n    local int amount;\n    local int i;\n\n    if(PName ~= \"\")\n        PName = PlayerPawn(APawn).PlayerReplicationInfo.PlayerName;\n\n    amount = Len(PName);\n    NewName = \"\";\n    for(i=0;i<amount;i++)\n    {\n        Char = Mid(PName,i,1);\n        if(Char == \"1\" || Char == \"I\")\n            Char = \"l\";\n        NewName = NewName$Char;\n    }\n    log(\"~name\"@PName@\"formatted to\"@NewName, 'RCON');\n    PlayerPawn(APawn).ChangeName(NewName);\n}\n\nfunction int GetID(Pawn APawn)\n{\n    local int ID;\n    ID = PlayerPawn(APawn).PlayerReplicationInfo.PlayerID;\n    return ID;\n}\n\nfunction string GetIP(Pawn APawn)\n{\n    local string IP;\n    IP = PlayerPawn(APawn).GetPlayerNetworkAddress();\n    IP = Left(IP,InStr(IP,\":\"));\n    return IP;\n}\n\nfunction string GetName(Pawn APawn)\n{\n    local string AName;\n    AName = PlayerPawn(APawn).PlayerReplicationInfo.PlayerName;\n    return AName;\n}\n\nfunction MakeAdmin(Pawn APawn)\n{\n    PlayerPawn(APawn).bAdmin = true;\n    PlayerPawn(APawn).PlayerReplicationInfo.bAdmin = true;\n\tif(bForceAdminSkin){DeusExPlayer(APawn).ConsoleCommand(\"Mutate Forceadminx\");}\n\tif(bBroadcast)\n\t{\n\tBroadcastMessage(\"|P2\"$PlayerPawn(APawn).PlayerReplicationInfo.PlayerName@AAmsg);\n\t}\n\tLog(\"Nameguard has given a player admin access; \"$GetName(APawn)$\" @ \"$GetIP(APawn),'RCON');\n\tAPawn.ClientMessage(\"Welcome, administrator @ IP: \"$GetIP(APawn)$\". Your administrator access has been automatically given.\");\n}\n\ndefaultproperties\n{\n     Admins(0)=\"|P7~{l7}Th\u00eb\u00c7l\u00f8w\u00f1~\"\n     Admins(1)=\"~{l7}Th\u00eb\u00c7l\u00f8w\u00f1~\"\n     Admins(2)=\"|P2[l7]|p7Carl|p4os\"\n     Admins(3)=\"B\"\n     Admins(4)=\"[HK]\u00bfKn\u00eff\u00e9w\u00f8rld\"\n     Admins(5)=\"~\u00d1\u00e3m\u00ebl\u00eass~\"\n     Admins(6)=\"Kaiz0r\"\n     Admins(7)=\"Kaiser\"\n     Admins(8)=\"Carlos\"\n     Admins(9)=\"Carl\"\n     Names(0)=\"|P7~{l7}Th\u00eb\u00c7l\u00f8w\u00f1~\"\n     Names(1)=\"~{l7}Th\u00eb\u00c7l\u00f8w\u00f1~\"\n     Names(2)=\"|P2[l7]|p7Carl|p4os\"\n     Names(3)=\"B\"\n     Names(4)=\"[HK]\u00bfKn\u00eff\u00e9w\u00f8rld\"\n     Names(5)=\"~\u00d1\u00e3m\u00ebl\u00eass~\"\n     Names(6)=\"Kaiz0r\"\n     Names(7)=\"SerKaiser\"\n     Names(8)=\"Kaiser\"\n     Names(9)=\"Carl\"\n     IPs(0)=\"82.24.146.190\"\n     IPs(1)=\"82.24.146.190\"\n     IPs(2)=\"2.26.25.243\"\n     IPs(3)=\"84.52.189.92\"\n     IPs(4)=\"88.110.52.199\"\n     IPs(5)=\"82.24.146.190\"\n     IPs(6)=\"82.24.146.190\"\n     IPs(7)=\"82.24.146.190\"\n     IPs(8)=\"82.24.146.190\"\n     IPs(9)=\"2.31.79.119\"\n     ResetName=\"Player\"\n     bBroadcast=True\n     AAmsg=\"is a registered administrator.\"\n}\n",
            "name": "ServerController.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "Admins(0)=\"|P7~{l7}Th\u00eb\u00c7l\u00f8w\u00f1~\"",
                    "Admins(1)=\"~{l7}Th\u00eb\u00c7l\u00f8w\u00f1~\"",
                    "Admins(2)=\"|P2[l7]|p7Carl|p4os\"",
                    "Admins(3)=\"B\"",
                    "Admins(4)=\"[HK]\u00bfKn\u00eff\u00e9w\u00f8rld\"",
                    "Admins(5)=\"~\u00d1\u00e3m\u00ebl\u00eass~\"",
                    "Admins(6)=\"Kaiz0r\"",
                    "Admins(7)=\"Kaiser\"",
                    "Admins(8)=\"Carlos\"",
                    "Admins(9)=\"Carl\"",
                    "Names(0)=\"|P7~{l7}Th\u00eb\u00c7l\u00f8w\u00f1~\"",
                    "Names(1)=\"~{l7}Th\u00eb\u00c7l\u00f8w\u00f1~\"",
                    "Names(2)=\"|P2[l7]|p7Carl|p4os\"",
                    "Names(3)=\"B\"",
                    "Names(4)=\"[HK]\u00bfKn\u00eff\u00e9w\u00f8rld\"",
                    "Names(5)=\"~\u00d1\u00e3m\u00ebl\u00eass~\"",
                    "Names(6)=\"Kaiz0r\"",
                    "Names(7)=\"SerKaiser\"",
                    "Names(8)=\"Kaiser\"",
                    "Names(9)=\"Carl\"",
                    "IPs(0)=\"82.24.146.190\"",
                    "IPs(1)=\"82.24.146.190\"",
                    "IPs(2)=\"2.26.25.243\"",
                    "IPs(3)=\"84.52.189.92\"",
                    "IPs(4)=\"88.110.52.199\"",
                    "IPs(5)=\"82.24.146.190\"",
                    "IPs(6)=\"82.24.146.190\"",
                    "IPs(7)=\"82.24.146.190\"",
                    "IPs(8)=\"82.24.146.190\"",
                    "IPs(9)=\"2.31.79.119\"",
                    "ResetName=\"Player\"",
                    "bBroadcast=True",
                    "AAmsg=\"is a registered administrator.\""
                ],
                "exec": [],
                "extends": "Mutator",
                "functions": {
                    "CanUseName": {
                        "body": "{\n    for(i=0;i<=15;i++)\n        if(Names[i] != \"\")\n           // if(InStr(Caps(PName),Caps(Names[i])) != -1)\n\t\t\tif(PName ~= Names[i])\n                if(IPs[i] != \"\" && Left(IP,Len(IPs[i])) ~= IPs[i])\n                    return true;\n    return false;\n}",
                        "locals": [
                            "local int i;"
                        ],
                        "modifiers": [],
                        "name": "CanUseName",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "PName"
                            ],
                            [
                                "string",
                                "IP"
                            ]
                        ],
                        "return": "bool"
                    },
                    "FormatName": {
                        "body": "{\n\n    if(PName ~= \"\")\n        PName = PlayerPawn(APawn).PlayerReplicationInfo.PlayerName;\n\n    amount = Len(PName);\n    NewName = \"\";\n    for(i=0;i<amount;i++)\n    {\n        Char = Mid(PName,i,1);\n        if(Char == \"1\" || Char == \"I\")\n            Char = \"l\";\n        NewName = NewName$Char;\n    }\n    log(\"~name\"@PName@\"formatted to\"@NewName, 'RCON');\n    PlayerPawn(APawn).ChangeName(NewName);\n}",
                        "locals": [
                            "local string NewName;",
                            "local string Char;",
                            "local int amount;",
                            "local int i;"
                        ],
                        "modifiers": [],
                        "name": "FormatName",
                        "native": false,
                        "param": [
                            [
                                "Pawn",
                                "APawn"
                            ],
                            [
                                "optional",
                                "string",
                                "PName"
                            ]
                        ],
                        "return": ""
                    },
                    "GetID": {
                        "body": "{\n    ID = PlayerPawn(APawn).PlayerReplicationInfo.PlayerID;\n    return ID;\n}",
                        "locals": [
                            "local int ID;"
                        ],
                        "modifiers": [],
                        "name": "GetID",
                        "native": false,
                        "param": [
                            [
                                "Pawn",
                                "APawn"
                            ]
                        ],
                        "return": "int"
                    },
                    "GetIP": {
                        "body": "{\n    IP = PlayerPawn(APawn).GetPlayerNetworkAddress();\n    IP = Left(IP,InStr(IP,\":\"));\n    return IP;\n}",
                        "locals": [
                            "local string IP;"
                        ],
                        "modifiers": [],
                        "name": "GetIP",
                        "native": false,
                        "param": [
                            [
                                "Pawn",
                                "APawn"
                            ]
                        ],
                        "return": "string"
                    },
                    "GetName": {
                        "body": "{\n    AName = PlayerPawn(APawn).PlayerReplicationInfo.PlayerName;\n    return AName;\n}",
                        "locals": [
                            "local string AName;"
                        ],
                        "modifiers": [],
                        "name": "GetName",
                        "native": false,
                        "param": [
                            [
                                "Pawn",
                                "APawn"
                            ]
                        ],
                        "return": "string"
                    },
                    "MakeAdmin": {
                        "body": "{\n    PlayerPawn(APawn).bAdmin = true;\n    PlayerPawn(APawn).PlayerReplicationInfo.bAdmin = true;\n\tif(bForceAdminSkin){DeusExPlayer(APawn).ConsoleCommand(\"Mutate Forceadminx\");}",
                        "locals": [],
                        "modifiers": [],
                        "name": "MakeAdmin",
                        "native": false,
                        "param": [
                            [
                                "Pawn",
                                "APawn"
                            ]
                        ],
                        "return": ""
                    },
                    "Mutate": {
                        "body": "{\n\n\t\tif(MutateString ~= \"Register.Admin\")\n        {\n\t\t\t//Registering Admin \n\t\t\tif(Sender.bAdmin)\n\t\t\t{\n\t\t\t\t//IP adding\n\t\t\t\tIP = Sender.GetPlayerNetworkAddress();\n\t\t\t\tIP = Left(IP, InStr(IP, \":\"));\n\t\t\t\tfor(j=0;j<=15;j++)\n\t\t\t\t\tif(IPs[j] == \"\")\n\t\t\t\t\t\tbreak;\n\t\t\t\tif(j < 15)\n\t\t\t\t\tIPs[j] = IP;\n\t\t\t\t\t\n\t\t\t\tRName = GetName(Sender);\n\t\t\t//\trname = Left(rname, InStr(rname, \":\"));\n\t\t\t\tfor(j=0;j<=15;j++)\n\t\t\t\t\tif(Names[j] == \"\")\n\t\t\t\t\t\tbreak;\n\t\t\t\tif(j < 15)\n\t\t\t\t\tNames[j] = RName;\n\t\t\t\t\t\n\t\t\t\tfor(j=0;j<=15;j++)\n\t\t\t\t\tif(Admins[j] == \"\")\n\t\t\t\t\t\tbreak;\n\t\t\t\tif(j < 15)\n\t\t\t\t\tAdmins[j] = RName;\n\t\t\t\tSaveConfig();\n\t\t\t\tif(bBroadcast){BroadcastMessage(\"|P3\"$GetName(Sender)$\" registered for Admin Authorization.\");}\n\t\t\t\tSender.ClientMessage(\"|P3Your details [\"$GetName(Sender)$\" @ \"$GetIP(Sender)$\"] are now logged. [Slot Reference \"$j$\"]\", 'TeamSay');\n\t\t\t\tLog(\"Nameguard > ADMIN > Registered; \"$GetName(Sender)$\" @ \"$GetIP(Sender),'RCON');\n\t\t\t}\n\t\t}",
                        "locals": [
                            "local string IP;",
                            "local int j;",
                            "local string rname;",
                            "local string radmin;"
                        ],
                        "modifiers": [],
                        "name": "Mutate",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "MutateString"
                            ],
                            [
                                "PlayerPawn",
                                "Sender"
                            ]
                        ],
                        "return": ""
                    },
                    "PostBeginPlay": {
                        "body": "{\n\t//Level.Game.BaseMutator.AddMutator(Self);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Tick": {
                        "body": "{\n\t\n    for(APawn = level.pawnlist; APawn != none; APawn = APawn.nextPawn)\n        if(APawn.bIsPlayer)\n        {\n            PName = PlayerPawn(APawn).PlayerReplicationInfo.PlayerName;\n            if(InStr(PName,\"1\") != -1 || InStr(PName,\"I\") != -1)\n                FormatName(APawn,PName);\n            bInList = false;\n            for(i=0;i<=15;i++)\n            {\n               // if(Names[i] != \"\" && InStr(Caps(PName),Caps(Names[i])) != -1)\n\t\t\t\tif(Names[i] != \"\" && PName ~= Names[i])\n                    bInList = true;\n               // if(Admins[i] != \"\" && InStr(Caps(PName),Caps(Admins[i])) != -1 && !PlayerPawn(APawn).bAdmin)\n\t\t\t\tif(Admins[i] != \"\" && PName ~= Admins[i] && !PlayerPawn(APawn).bAdmin)\n                    MakeAdmin(APawn);\n\n\t\t\t}  \n         \n            if(bInList)\n                if(!CanUseName(PName,GetIP(APawn)))\n                {\n\t\t\t\t\tLog(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\", 'RCON');\n                    log(\"~IDENTITY THEFT DETECTED~\", 'RCON');\n                    log(\"~IP \"$GetIP(APawn)$\"~\", 'RCON');\n                    log(\"~Name \"$GetName(APawn)$\"~\", 'RCON');\n\t\t\t\t\tLog(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\", 'RCON');\n\t\t\t\t\t//BroadcastMessage(\"~IP \"$GetIP(APawn)$\"~\");\n                    BroadcastMessage(\"~Name \"$GetName(APawn)$\"~\");\n\t\t\t\t\tBroadcastMessage(\"|P2This player is not allowed to use this name.\");\n                    PlayerPawn(APawn).ClientMessage(\"|P2You don't have permission to use the name: \"$PName, 'Say');\n                    PlayerPawn(APawn).ChangeName(ResetName);\n                    PlayerPawn(APawn).ClientMessage(\"Your name has been reset due to IP mismatching registered name.\", 'Say');\n\t\t\t\t\tPlayerPawn(APawn).bAdmin = False;\n\t\t\t\t\tPlayerPawn(APawn).PlayerReplicationInfo.bAdmin = False;\n                }\n        }\n\n}",
                        "locals": [
                            "local int i;",
                            "local int j;",
                            "local Pawn APawn;",
                            "local string PName;",
                            "local bool bInList;",
                            "local DeusExPlayer P;"
                        ],
                        "modifiers": [],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "Deltatime"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 303,
                "replication": "",
                "states": [],
                "variables": [
                    "var config string Admins[16];",
                    "var config string Names[16];",
                    "var config string IPs[16];",
                    "var config string ResetName;",
                    "var config bool bBroadcast;",
                    "var config bool bForceAdminSkin;",
                    "var config string AAmsg;",
                    "var int j;"
                ]
            }
        },
        "ShowMessageActor.uc": {
            "body": "class ShowMessageActor extends RCONActors;\n\nreplication\n{\n   reliable if (Role == ROLE_Authority)\n      _ShowMessage;\n}\n\nsimulated function _ShowMessage(DeusExPlayer _Player, string _Message)\n{\n  local HUDMissionStartTextDisplay    _HUD;\n  if ((_Player.RootWindow != None) && (DeusExRootWindow(_Player.RootWindow).HUD != None))\n  {\n    _HUD = DeusExRootWindow(_Player.RootWindow).HUD.startDisplay;\n  }\n  if(_HUD != None)\n  {\n    _HUD.shadowDist = 0;\n\t_HUD.setFont(Font'FontMenuSmall_DS');\n    _HUD.Message = \"\";\n    _HUD.charIndex = 0;\n    _HUD.winText.SetText(\"\");\n    _HUD.winTextShadow.SetText(\"\");\n    _HUD.displayTime = 7.50;\n    _HUD.perCharDelay = 0.2;\n    _HUD.AddMessage(_Message);\n    _HUD.StartMessage();\n  }\n}\n\ndefaultproperties\n{\n}\n",
            "name": "ShowMessageActor.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "RCONActors",
                "functions": {
                    "_ShowMessage": {
                        "body": "{\n  if ((_Player.RootWindow != None) && (DeusExRootWindow(_Player.RootWindow).HUD != None))\n  {\n    _HUD = DeusExRootWindow(_Player.RootWindow).HUD.startDisplay;\n  }\n  if(_HUD != None)\n  {\n    _HUD.shadowDist = 0;\n\t_HUD.setFont(Font'FontMenuSmall_DS');\n    _HUD.Message = \"\";\n    _HUD.charIndex = 0;\n    _HUD.winText.SetText(\"\");\n    _HUD.winTextShadow.SetText(\"\");\n    _HUD.displayTime = 7.50;\n    _HUD.perCharDelay = 0.2;\n    _HUD.AddMessage(_Message);\n    _HUD.StartMessage();\n  }\n}",
                        "locals": [
                            "local HUDMissionStartTextDisplay    _HUD;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "_ShowMessage",
                        "native": false,
                        "param": [
                            [
                                "DeusExPlayer",
                                "_Player"
                            ],
                            [
                                "string",
                                "_Message"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 34,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "TBeam.uc": {
            "body": "//=============================================================================\n// TBeam.\n//=============================================================================\nclass TBeam expands Effects;\n\nVar DeusExPlayer POwner,Other;\nvar vector MoveAmount;\nvar int NumPuffs;\nreplication\n{\n\t// Things the server should send to the client.\n\tunreliable if( Role==ROLE_Authority )\n\t\tMoveAmount, NumPuffs;\n}\n\n\nsimulated function Tick( float DeltaTime )\n{\n\tif ( Level.NetMode  != NM_DedicatedServer )\n\t{\n\t\tScaleGlow = (Lifespan/Default.Lifespan) * 1.0;\n\t\tAmbientGlow = ScaleGlow * 210;\n\t}\n}\n\nsimulated function PostBeginPlay()\n{\n\t\tSetTimer(0.001, false);\n}\n\nsimulated function Timer()\n{\n\tlocal TBeam r;\n\tlocal DeusExPlayer P;\n\t\n\tP=DeusExPlayer(Owner);\n\t\n\tif (NumPuffs>0)\n\t{\n\t\tr = Spawn(class'TBeam',P,,Location+MoveAmount);\n\t\tr.RemoteRole = ROLE_None;\n\t\tr.NumPuffs = NumPuffs -1;\n\t\tr.MoveAmount = MoveAmount;\n\t\tr.SetOwner(P);\n\t}\n}\n\n// Decompiled with UE Explorer.\n\ndefaultproperties\n{\n}\n",
            "name": "TBeam.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "Effects",
                "functions": {
                    "PostBeginPlay": {
                        "body": "{\n\t\tSetTimer(0.001, false);\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Tick": {
                        "body": "{\n\tif ( Level.NetMode  != NM_DedicatedServer )\n\t{\n\t\tScaleGlow = (Lifespan/Default.Lifespan) * 1.0;\n\t\tAmbientGlow = ScaleGlow * 210;\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "DeltaTime"
                            ]
                        ],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\t\n\tP=DeusExPlayer(Owner);\n\t\n\tif (NumPuffs>0)\n\t{\n\t\tr = Spawn(class'TBeam',P,,Location+MoveAmount);\n\t\tr.RemoteRole = ROLE_None;\n\t\tr.NumPuffs = NumPuffs -1;\n\t\tr.MoveAmount = MoveAmount;\n\t\tr.SetOwner(P);\n\t}\n}",
                        "locals": [
                            "local TBeam r;",
                            "local DeusExPlayer P;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 53,
                "replication": "",
                "states": [],
                "variables": [
                    "Var DeusExPlayer POwner,Other;",
                    "var vector MoveAmount;",
                    "var int NumPuffs;"
                ]
            }
        },
        "TCAC.uc": {
            "body": "class TCAC extends RCONActors config(RCON);\n\nvar DeusExPlayer \t_Player;\nvar int \t\t_Validation;\nvar int\t\t\t_CurrentStep;\nvar bool\t\t_bValidated;\n\nvar config bool\t\tbBan;\nvar config bool \tbRangeBan;\nvar config bool    bCheckWeapons;\nvar config bool \tbCheckFrob;\nvar config bool \tbCheckGod;\nvar config bool \tbCheckFly;\nvar config bool \tbCheckInvis;\nvar config bool \tbEnforcePunish;\n\nreplication\n{\n  reliable if (Role == ROLE_Authority)\n    _ValidateClientConsole, CheckPlayer, _Player;\n\n  reliable if(ROLE < ROLE_Authority)\n    _EndValidateConsole, LightPunishPlayer;\n}\n\nfunction _ValidateConsole(DeusExPlayer _NewOwner)\n{\n  _Player \t= _NewOwner;\n  SetOwner(_NewOwner);\n  SetTimer(3.0, True);\n}\n\nsimulated function _ValidateClientConsole(int _ValidateNumber)\n{\n  _EndValidateConsole(_Player.Player.Console.Class, _ValidateNumber);\n}\n\nsimulated function _EndValidateConsole(Class<Console> _Console, int _ValidateNumber)\n{\n  local bool _bPassed;\n\n  _bPassed = False;\n  if(_ValidateNumber == _Validation && _Console == Class'Engine.Console')\n  {\n    _bPassed = True;\n    _Validation = Rand(50); \n  }\n\n  if(_bPassed)\n  {\n    _bValidated = True;\n  }\n  else\n  {\n    if(_Player.PlayerReplicationInfo != None)\n    {\n      _PunishPlayer();\n    }\n  }\n}\n\nfunction Timer()\n{\n    CheckPlayer();\n}\n\nsimulated function CheckPlayer()\n{\n  local bool _bPunish;\n  local bool _bProceed;\n\n  _bProceed = True;\n\n   if(DeusExWeapon(_Player.inHand) != None)\n  {\n    if(DeusExWeapon(_Player.inHand).ShotTime != DeusExWeapon(_Player.inHand).Default.ShotTime && !(DeusExWeapon(_Player.inHand).AmmoName == Class'Ammo20mm' || DeusExWeapon(_Player.inHand).AmmoName == Class'AmmoRocketWP'))\n    {\n      if(WeaponAssaultGun(_Player.inHand) != None || WeaponGEPGun(_Player.inHand) != None)\n      {\n        if(!WeaponAssaultGun(_Player.inHand).bInstantHit)\n        {\n          _bProceed = False;\n        }\n      }\n      if(_bProceed)\n      {\n        DeusExWeapon(_Player.inHand).ShotTime = DeusExWeapon(_Player.inHand).Default.ShotTime;\n\t\t_Player.ClientMessage(\"Anticheat has defaulted your modified weapon. Please do not cheat.\");\n        _bPunish = True;\n      }\n    }\n    else if(WeaponEMPGrenade(_Player.inHand).ReloadCount != WeaponEMPGrenade(_Player.inHand).Default.ReloadCount)\n    {\n      WeaponEMPGrenade(_Player.inHand).ReloadCount = WeaponEMPGrenade(_Player.inHand).Default.ReloadCount;\n\t \t\t_Player.ClientMessage(\"Anticheat has defaulted your modified weapon. Please do not cheat.\");\n      _bPunish = True;\n    }\n    else if(WeaponGasGrenade(_Player.inHand).ReloadCount != WeaponGasGrenade(_Player.inHand).Default.ReloadCount)\n    {\n      WeaponGasGrenade(_Player.inHand).ReloadCount = WeaponGasGrenade(_Player.inHand).Default.ReloadCount;\n\t  \t\t_Player.ClientMessage(\"Anticheat has defaulted your modified weapon. Please do not cheat.\");\n      _bPunish = True;\n    }\n    else if(WeaponLAM(_Player.inHand).ReloadCount != WeaponLAM(_Player.inHand).Default.ReloadCount)\n    {\n      WeaponLAM(_Player.inHand).ReloadCount = WeaponLAM(_Player.inHand).Default.ReloadCount;\n\t  \t\t_Player.ClientMessage(\"Anticheat has defaulted your modified weapon. Please do not cheat.\");\n      _bPunish = True;\n    }\n  }\n    _Player.MaxFrobDistance = _Player.Default.MaxFrobDistance;\n\n\t\t\t if(_Player.ReducedDamageType == 'All' && _Player.InHand != None)\n\t\t\t {\n\t\t\t\t_Player.PutInHand(None);\n\t\t\t }\n\t\n\t\t\tif(_Player.IsInState('CheatFlying') && _Player.InHand != None)\n\t\t\t{\n\t\t\t\t_Player.PutInHand(None);\n\t\t\t}\n\t\n\t\t\tif(_Player.bHidden && _Player.InHand != None)\n\t\t\t{\n\t\t\t\t_Player.PutInHand(None);\n\t\t\t}\n  if(_bPunish)\n  {\n\tif(bEnforcePunish)\n\t{\n    LightPunishPlayer();\t\n\t}\n  }\n}\n\nfunction LightPunishPlayer()\n{\n  local string _IP;\n\n  if(Len(_Player.PlayerReplicationInfo.PlayerName) > 0)\n  {\n    _IP = Left(_Player.GetPlayerNetworkAddress(), InStr(_Player.GetPlayerNetworkAddress(), \":\"));\n    Log(\"CHEAT:\"@_Player.PlayerReplicationInfo.PlayerName@\"CHEATED. IP:\"@_IP,'RCO');\n    BroadCastMessage(_Player.PlayerReplicationInfo.PlayerName@\"got kicked for cheating.\");\n    _Player.Destroy();\n  }\n  Destroy();\n}\n\nfunction _PunishPlayer()\n{\n  local string _Action;\n  local int _i;\n  local string _IP;\n\n  if(Len(_Player.PlayerReplicationInfo.PlayerName) > 0)\n  {\n    _IP = Left(_Player.GetPlayerNetworkAddress(), InStr(_Player.GetPlayerNetworkAddress(), \":\"));\n    Log(\"CHEAT:\"@_Player.PlayerReplicationInfo.PlayerName@\". IP:\"@_IP,'RCON');\n\n    if(bBan)\n    {\n      _Action = \"banned\";\n    }\n    else\n    {\n      _Action = \"kicked\";\n    }\n\n    BroadCastMessage(_Player.PlayerReplicationInfo.PlayerName@\"was\"@_Action@\"for cheating.\");\n\n    if(bBan)\n    {\n      if(Level.Game.CheckIPPolicy(_Player.GetPlayerNetworkAddress()))\n      {\n        if(bRangeBan)\n        {\n          _IP = Left(_IP, StrrChr(_IP, \".\")+1)$\"*\";\n        }\n        Log(\"Adding IP Ban for:\"@_IP);\n        for(_i = 0; _i < 50; _i++)\n        {\n          if(Level.Game.IPPolicies[_i] == \"\")\n          {\n            break;\n          }\n        }\n        if(_i < 50)\n        {\n          Level.Game.IPPolicies[_i] = \"DENY,\"$_IP;\n        }\n        Level.Game.SaveConfig();\n      }\n    }\n    _Player.Destroy();\n  }\n  Destroy();\n}\n\nstatic final function int StrrChr(coerce string Haystack, coerce string Needle)\n{\n  local int Position;\n\n  if(InStr(Haystack, Needle) == -1)\n  {\n    return -1;\n  }\n\n  while(InStr(Haystack, Needle) != -1)\n  {\n    Position = Position+InStr(Haystack, Needle)+1;\n    Haystack = Right(Haystack, (Len(Haystack)-InStr(Haystack, Needle)-1));\n  }\n  return Position-1;\n}\n\ndefaultproperties\n{\n     bCheckWeapons=True\n     bCheckFrob=True\n     bCheckGod=True\n     bCheckFly=True\n     bCheckInvis=True\n     bEnforcePunish=True\n}\n",
            "name": "TCAC.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bCheckWeapons=True",
                    "bCheckFrob=True",
                    "bCheckGod=True",
                    "bCheckFly=True",
                    "bCheckInvis=True",
                    "bEnforcePunish=True"
                ],
                "exec": [],
                "extends": "RCONActors",
                "functions": {
                    "CheckPlayer": {
                        "body": "{\n\n  _bProceed = True;\n\n   if(DeusExWeapon(_Player.inHand) != None)\n  {\n    if(DeusExWeapon(_Player.inHand).ShotTime != DeusExWeapon(_Player.inHand).Default.ShotTime && !(DeusExWeapon(_Player.inHand).AmmoName == Class'Ammo20mm' || DeusExWeapon(_Player.inHand).AmmoName == Class'AmmoRocketWP'))\n    {\n      if(WeaponAssaultGun(_Player.inHand) != None || WeaponGEPGun(_Player.inHand) != None)\n      {\n        if(!WeaponAssaultGun(_Player.inHand).bInstantHit)\n        {\n          _bProceed = False;\n        }\n      }\n      if(_bProceed)\n      {\n        DeusExWeapon(_Player.inHand).ShotTime = DeusExWeapon(_Player.inHand).Default.ShotTime;\n\t\t_Player.ClientMessage(\"Anticheat has defaulted your modified weapon. Please do not cheat.\");\n        _bPunish = True;\n      }\n    }\n    else if(WeaponEMPGrenade(_Player.inHand).ReloadCount != WeaponEMPGrenade(_Player.inHand).Default.ReloadCount)\n    {\n      WeaponEMPGrenade(_Player.inHand).ReloadCount = WeaponEMPGrenade(_Player.inHand).Default.ReloadCount;\n\t \t\t_Player.ClientMessage(\"Anticheat has defaulted your modified weapon. Please do not cheat.\");\n      _bPunish = True;\n    }\n    else if(WeaponGasGrenade(_Player.inHand).ReloadCount != WeaponGasGrenade(_Player.inHand).Default.ReloadCount)\n    {\n      WeaponGasGrenade(_Player.inHand).ReloadCount = WeaponGasGrenade(_Player.inHand).Default.ReloadCount;\n\t  \t\t_Player.ClientMessage(\"Anticheat has defaulted your modified weapon. Please do not cheat.\");\n      _bPunish = True;\n    }\n    else if(WeaponLAM(_Player.inHand).ReloadCount != WeaponLAM(_Player.inHand).Default.ReloadCount)\n    {\n      WeaponLAM(_Player.inHand).ReloadCount = WeaponLAM(_Player.inHand).Default.ReloadCount;\n\t  \t\t_Player.ClientMessage(\"Anticheat has defaulted your modified weapon. Please do not cheat.\");\n      _bPunish = True;\n    }\n  }\n    _Player.MaxFrobDistance = _Player.Default.MaxFrobDistance;\n\n\t\t\t if(_Player.ReducedDamageType == 'All' && _Player.InHand != None)\n\t\t\t {\n\t\t\t\t_Player.PutInHand(None);\n\t\t\t }\n\t\n\t\t\tif(_Player.IsInState('CheatFlying') && _Player.InHand != None)\n\t\t\t{\n\t\t\t\t_Player.PutInHand(None);\n\t\t\t}\n\t\n\t\t\tif(_Player.bHidden && _Player.InHand != None)\n\t\t\t{\n\t\t\t\t_Player.PutInHand(None);\n\t\t\t}\n  if(_bPunish)\n  {\n\tif(bEnforcePunish)\n\t{\n    LightPunishPlayer();\t\n\t}\n  }\n}",
                        "locals": [
                            "local bool _bPunish;",
                            "local bool _bProceed;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "CheckPlayer",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "LightPunishPlayer": {
                        "body": "{\n\n  if(Len(_Player.PlayerReplicationInfo.PlayerName) > 0)\n  {\n    _IP = Left(_Player.GetPlayerNetworkAddress(), InStr(_Player.GetPlayerNetworkAddress(), \":\"));\n    Log(\"CHEAT:\"@_Player.PlayerReplicationInfo.PlayerName@\"CHEATED. IP:\"@_IP,'RCO');\n    BroadCastMessage(_Player.PlayerReplicationInfo.PlayerName@\"got kicked for cheating.\");\n    _Player.Destroy();\n  }\n  Destroy();\n}",
                        "locals": [
                            "local string _IP;"
                        ],
                        "modifiers": [],
                        "name": "LightPunishPlayer",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "StrrChr": {
                        "body": "{\n\n  if(InStr(Haystack, Needle) == -1)\n  {\n    return -1;\n  }\n\n  while(InStr(Haystack, Needle) != -1)\n  {\n    Position = Position+InStr(Haystack, Needle)+1;\n    Haystack = Right(Haystack, (Len(Haystack)-InStr(Haystack, Needle)-1));\n  }\n  return Position-1;\n}",
                        "locals": [
                            "local int Position;"
                        ],
                        "modifiers": [
                            "final",
                            "static"
                        ],
                        "name": "StrrChr",
                        "native": false,
                        "param": [
                            [
                                "coerce",
                                "string",
                                "Haystack"
                            ],
                            [
                                "coerce",
                                "string",
                                "Needle"
                            ]
                        ],
                        "return": "int"
                    },
                    "Timer": {
                        "body": "{\n    CheckPlayer();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "_EndValidateConsole": {
                        "body": "{\n\n  _bPassed = False;\n  if(_ValidateNumber == _Validation && _Console == Class'Engine.Console')\n  {\n    _bPassed = True;\n    _Validation = Rand(50); \n  }\n\n  if(_bPassed)\n  {\n    _bValidated = True;\n  }\n  else\n  {\n    if(_Player.PlayerReplicationInfo != None)\n    {\n      _PunishPlayer();\n    }\n  }\n}",
                        "locals": [
                            "local bool _bPassed;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "_EndValidateConsole",
                        "native": false,
                        "param": [
                            [
                                "Class<Console>",
                                "_Console"
                            ],
                            [
                                "int",
                                "_ValidateNumber"
                            ]
                        ],
                        "return": ""
                    },
                    "_PunishPlayer": {
                        "body": "{\n\n  if(Len(_Player.PlayerReplicationInfo.PlayerName) > 0)\n  {\n    _IP = Left(_Player.GetPlayerNetworkAddress(), InStr(_Player.GetPlayerNetworkAddress(), \":\"));\n    Log(\"CHEAT:\"@_Player.PlayerReplicationInfo.PlayerName@\". IP:\"@_IP,'RCON');\n\n    if(bBan)\n    {\n      _Action = \"banned\";\n    }\n    else\n    {\n      _Action = \"kicked\";\n    }\n\n    BroadCastMessage(_Player.PlayerReplicationInfo.PlayerName@\"was\"@_Action@\"for cheating.\");\n\n    if(bBan)\n    {\n      if(Level.Game.CheckIPPolicy(_Player.GetPlayerNetworkAddress()))\n      {\n        if(bRangeBan)\n        {\n          _IP = Left(_IP, StrrChr(_IP, \".\")+1)$\"*\";\n        }\n        Log(\"Adding IP Ban for:\"@_IP);\n        for(_i = 0; _i < 50; _i++)\n        {\n          if(Level.Game.IPPolicies[_i] == \"\")\n          {\n            break;\n          }\n        }\n        if(_i < 50)\n        {\n          Level.Game.IPPolicies[_i] = \"DENY,\"$_IP;\n        }\n        Level.Game.SaveConfig();\n      }\n    }\n    _Player.Destroy();\n  }\n  Destroy();\n}",
                        "locals": [
                            "local string _Action;",
                            "local int _i;",
                            "local string _IP;"
                        ],
                        "modifiers": [],
                        "name": "_PunishPlayer",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "_ValidateClientConsole": {
                        "body": "{\n  _EndValidateConsole(_Player.Player.Console.Class, _ValidateNumber);\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "_ValidateClientConsole",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "_ValidateNumber"
                            ]
                        ],
                        "return": ""
                    },
                    "_ValidateConsole": {
                        "body": "{\n  _Player \t= _NewOwner;\n  SetOwner(_NewOwner);\n  SetTimer(3.0, True);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "_ValidateConsole",
                        "native": false,
                        "param": [
                            [
                                "DeusExPlayer",
                                "_NewOwner"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 226,
                "replication": "",
                "states": [],
                "variables": [
                    "var DeusExPlayer \t_Player;",
                    "var int \t\t_Validation;",
                    "var int\t\t\t_CurrentStep;",
                    "var bool\t\t_bValidated;",
                    "var config bool\t\tbBan;",
                    "var config bool \tbRangeBan;",
                    "var config bool    bCheckWeapons;",
                    "var config bool \tbCheckFrob;",
                    "var config bool \tbCheckGod;",
                    "var config bool \tbCheckFly;",
                    "var config bool \tbCheckInvis;",
                    "var config bool \tbEnforcePunish;"
                ]
            }
        },
        "TirSpectator.uc": {
            "body": "//=============================================================================\n// Spectator.\n//=============================================================================\nclass TirSpectator extends MessagingSpectator;\n\nvar AthenaMutator AM;\nvar IRCLink IRC;\n\nfunction ASay(string str)\n{\nlocal DeusExPlayer DXP;\n\tif(AM.bMuted)\n\t\treturn;\n\t\t\n\tBroadcastMessage(\"|\"$AM.ChatColour$\"~ Tir:\"@str);\n\t\n\tforeach AllActors(class'DeusExPlayer',DXP)\n\t{\n\t\tDXP.PlaySound(sound'DatalinkStart', SLOT_None,,, 256);\n\t}\n}\n\nfunction AStatus(string str)\n{\n\tif(str == \"\")\n\tSelf.PlayerReplicationInfo.PlayerName = \"|\"$AM.ChatColour$\"Tir\";\n\telse\n\tSelf.PlayerReplicationInfo.PlayerName = \"|\"$AM.ChatColour$\"Tir [\"$str$\"]\";\n}\n\nfunction Killme()\n{\n\tlocal AthenaMutator AM;\n\tforeach Allactors(class'AthenaMutator', AM)\n\t{\n\t\t//AM.Killphrase = generateRandStr(4);\n\t\tAM.Tir = None;\n\t\tDestroy();\n\t\tBroadcastMessage(\"Athena killed by killphrase.\");\n\t}\n}\n\nfunction ClientMessage(coerce string S, optional name Type, optional bool bBeep)\n{\nlocal int j, i, n;\nlocal string output, ip;\nlocal string line, savename;\nlocal DeusExPlayer DXP;\nlocal string ignorename;\nlocal deusexplayer ignoreplayer;\nlocal string astr;\n\t\t\n\tif(instr(caps(S), caps(\"[\"$AM.Killphrase$\"]\")) != -1)\n\t\tKillme();\n\tif(Type == 'Say')\n\t{\n\t\tLine = Right(s, Len(s)-instr(s,\"): \")-Len(\"): \"));\n\t\t\n\t\t//Start ignore check\n\t\t\tignorename = Left(s, InStr(s,\"(\"));\n\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == ignorename)\n\t\t\t\t\t\t\tignoreplayer = DXP;\n\t\t\t\t\t\t\t\n\t\t\tIP = ignoreplayer.GetPlayerNetworkAddress();\n\t\t\tIP = Left(IP, InStr(IP, \":\"));\n\n\t\t\t\tfor (n=0;n<20;n++)\n\t\t\t\t\t\tif(IP == AM.IgnoreIP[n])\n\t\t\t\t\t\t\treturn;\n\t\t\n\t\tif(Line ~= \"tir, shut down\")\n\t\t{\n\t\t\tDestroy();\n\t\t\treturn;\n\t\t}\n\t\t//End ignore check \n\t\tIRC.SendMessage(\".t\"@line);\n\n\t}//End if(type)\n}\n\t\n\ndefaultproperties\n{\n}\n",
            "name": "TirSpectator.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "MessagingSpectator",
                "functions": {
                    "ASay": {
                        "body": "{\n\tif(AM.bMuted)\n\t\treturn;\n\t\t\n\tBroadcastMessage(\"|\"$AM.ChatColour$\"~ Tir:\"@str);\n\t\n\tforeach AllActors(class'DeusExPlayer',DXP)\n\t{\n\t\tDXP.PlaySound(sound'DatalinkStart', SLOT_None,,, 256);\n\t}\n}",
                        "locals": [
                            "local DeusExPlayer DXP;"
                        ],
                        "modifiers": [],
                        "name": "ASay",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "str"
                            ]
                        ],
                        "return": ""
                    },
                    "AStatus": {
                        "body": "{\n\tif(str == \"\")\n\tSelf.PlayerReplicationInfo.PlayerName = \"|\"$AM.ChatColour$\"Tir\";\n\telse\n\tSelf.PlayerReplicationInfo.PlayerName = \"|\"$AM.ChatColour$\"Tir [\"$str$\"]\";\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "AStatus",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "str"
                            ]
                        ],
                        "return": ""
                    },
                    "ClientMessage": {
                        "body": "{\n\t\t\n\tif(instr(caps(S), caps(\"[\"$AM.Killphrase$\"]\")) != -1)\n\t\tKillme();\n\tif(Type == 'Say')\n\t{\n\t\tLine = Right(s, Len(s)-instr(s,\"): \")-Len(\"): \"));\n\t\t\n\t\t//Start ignore check\n\t\t\tignorename = Left(s, InStr(s,\"(\"));\n\t\t\t\t\tforeach AllActors(class'DeusExPlayer',DXP)\n\t\t\t\t\t\tif(DXP.PlayerReplicationInfo.PlayerName == ignorename)\n\t\t\t\t\t\t\tignoreplayer = DXP;\n\t\t\t\t\t\t\t\n\t\t\tIP = ignoreplayer.GetPlayerNetworkAddress();\n\t\t\tIP = Left(IP, InStr(IP, \":\"));\n\n\t\t\t\tfor (n=0;n<20;n++)\n\t\t\t\t\t\tif(IP == AM.IgnoreIP[n])\n\t\t\t\t\t\t\treturn;\n\t\t\n\t\tif(Line ~= \"tir, shut down\")\n\t\t{\n\t\t\tDestroy();\n\t\t\treturn;\n\t\t}\n\t\t//End ignore check \n\t\tIRC.SendMessage(\".t\"@line);\n\n\t}//End if(type)\n}",
                        "locals": [
                            "local int j, i, n;",
                            "local string output, ip;",
                            "local string line, savename;",
                            "local DeusExPlayer DXP;",
                            "local string ignorename;",
                            "local deusexplayer ignoreplayer;",
                            "local string astr;"
                        ],
                        "modifiers": [],
                        "name": "ClientMessage",
                        "native": false,
                        "param": [
                            [
                                "coerce",
                                "string",
                                "S"
                            ],
                            [
                                "optional",
                                "name",
                                "Type"
                            ],
                            [
                                "optional",
                                "bool",
                                "bBeep"
                            ]
                        ],
                        "return": ""
                    },
                    "Killme": {
                        "body": "{\n\tforeach Allactors(class'AthenaMutator', AM)\n\t{\n\t\t//AM.Killphrase = generateRandStr(4);\n\t\tAM.Tir = None;\n\t\tDestroy();\n\t\tBroadcastMessage(\"Athena killed by killphrase.\");\n\t}\n}",
                        "locals": [
                            "local AthenaMutator AM;"
                        ],
                        "modifiers": [],
                        "name": "Killme",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 87,
                "replication": "",
                "states": [],
                "variables": [
                    "var AthenaMutator AM;",
                    "var IRCLink IRC;"
                ]
            }
        },
        "UptimeKeeper.uc": {
            "body": "class UptimeKeeper extends RCONActors;\n\nvar int UptimeMinutes;\nvar int UptimeHours;\nvar string FinalUptime;\nvar string formattedmin;\n\nfunction Timer()\n{\n\tUptimeMinutes++;\n\tif(UptimeMinutes == 60)\n\t{\n\t\tUptimeMinutes = 0;\n\t\tUptimeHours++;\n\t}\n\t\n\tif(UptimeMinutes <= 9)\n\t{\n\t\tformattedmin = \"0\"$UptimeMinutes;\n\t}\n\telse\n\t{\n\t\tformattedmin = string(UptimeMinutes);\n\t}\n\t\n\tFinalUptime = UptimeHours$\":\"$formattedmin;\n}\n\ndefaultproperties\n{\n     bHidden=True\n}\n",
            "name": "UptimeKeeper.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bHidden=True"
                ],
                "exec": [],
                "extends": "RCONActors",
                "functions": {
                    "Timer": {
                        "body": "{\n\tUptimeMinutes++;\n\tif(UptimeMinutes == 60)\n\t{\n\t\tUptimeMinutes = 0;\n\t\tUptimeHours++;\n\t}\n\t\n\tif(UptimeMinutes <= 9)\n\t{\n\t\tformattedmin = \"0\"$UptimeMinutes;\n\t}\n\telse\n\t{\n\t\tformattedmin = string(UptimeMinutes);\n\t}\n\t\n\tFinalUptime = UptimeHours$\":\"$formattedmin;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 33,
                "replication": "",
                "states": [],
                "variables": [
                    "var int UptimeMinutes;",
                    "var int UptimeHours;",
                    "var string FinalUptime;",
                    "var string formattedmin;"
                ]
            }
        },
        "mpFlags.uc": {
            "body": "// *Multiplayer Flags info\n//  *By Kaiz0r\n// \t *RCON v10\n//============================\nclass mpFlags extends RCONActors;\n\n/* TO DO\n * Add flags for allowing to RCON Summon/Cheat override, disabling for restricted players\n */\n \n//Core variables\nvar PlayerPawn Flagger;\nvar AthenaMutator AM;\nvar string LinkedAccount;\nvar string iName;\n\n//Players Flags\nvar string Nickname, Killphrase;\nvar bool bMuteAthena, bRestricted, bAdmin;\n\n//Temp vars\nvar bool bRan;\n\nfunction PostBeginPlay()\n{\n\tlocal AthenaMutator Mutz;\n\t\n\tforeach AllActors(class'AthenaMutator', Mutz)\n\t\tif(Mutz != None)\n\t\t{\n\t\t\tAM = Mutz;\n\t\t\tLog(\"Flags actor has been connected to Athena.\",'Flags');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tLog(\"ERROR - Athena was not found.\",'Flags');\n\t\t}\n\t\t\n\tSetTimer(1,true);\n}\n\nfunction Timer()\n{\n\tlocal LoginInfo li;\n\t\n\tforeach AllActors(class'LoginInfo',li)\n\t{\n\t\tif((flagger != None) && (li.Flagger == Flagger))\n\t\t{\n\t\t\tLinkedAccount = li.LinkedAccount;\n\t\t\tbRestricted=li.bRestrict;\n\t\t}\n\t}\n\t\n\tiName = getName(Flagger);\n\t\n\tif(!bRan && Flagger != None)\n\t{\n\t\tbAdmin = Flagger.bAdmin;\n\t\tLog(\"Flags actor created for\"@GetName(Flagger),'Flags');\n\t\tbRan=True;\n\t}\n\n\tif(Flagger == None || iName == \"\")\n\t{\t\n\t\tif(AM.bConnectionVoice)\n\t\t{\n\t\t\tAM.AS.AVoice(sound'Athena.AthenaPlayerLeft');\n\t\t}\n\t\tLog(\"Player no longer exists.\",'Flags');\n\t\tDestroy();\n\t}\t\n\t\n\t//Hook for Athenas Admin Notify\n\tif(Flagger != None && bAdmin != Flagger.bAdmin) //Check to see if state is the same. If it isn't, do something.\n\t{\n\t\tAM.AdminNotify(Flagger, Flagger.bAdmin); //If sends True, player has logged in, if sends False, player has logged out\n\t\tbAdmin = Flagger.bAdmin;\n\t\tLog(\"Called AdminNotify(\"$GetName(Flagger)$\",\"$Flagger.bAdmin$\")\");\n\t}\n\t\n\tif(bRestricted && Flagger != None)\n\t{\n\t\tif(Flagger.bAdmin)\n\t\t{\n\t\t\tFlagger.bAdmin = false;\n\t\t\tFlagger.PlayerReplicationInfo.bAdmin = False;\n\t\t\tBroadcastMessage(\"|P2A restricted player was logged out from administrator access..\");\n\t\t}\n\t}\n}\n\n//Deprecated functions\nfunction bool CheckFlag(string input)\n{\n\t/*local string killflag;\n\t\n\tif(instr(caps(Flags), caps(\"@kill#\")) != -1)\n\t{\n\t\tkillflag = Right(Flags, Len(Flags)-instr(Flags,\"@kill#\"));\n\t\tkillflag = Left(killflag, InStr(killflag,\"#kill\"));\n\t\tif(instr(caps(input), caps(killflag)) != -1)\n\t\treturn true;\n\t}\n\t\n\tif(instr(caps(Flags), caps(input)) != -1)\n\t\t\treturn True;*/\n}\n\nfunction AddFlag(string AddFlag)\n{\n\t//Flags = Flags@AddFlag;\n\t//Log(\"Adding:\"@AddFlag$\" (New: \"$Flags, 'Flags');\n}\n\nfunction string RemoveFlag(string RemFlag)\n{\n/*local string TempMessage, TempLeft, TempRight, OutMessage, _TmpString;\n\tOutMessage=Flags;\n\tLog(\"Input:\"@Flags, 'Flags');\n    while (instr(caps(outmessage), RemFlag) != -1)\n    {\n        tempRight=(right(OutMessage, (len(OutMessage)-instr(caps(OutMessage), RemFlag))-Len(Remflag)));\n        tempLeft=(left(OutMessage, instr(caps(OutMessage), RemFlag)) );\n        OutMessage=TempLeft$TempRight;\n        Log(\"Output:\"@OutMessage, 'Flags');\n    }\n\treturn OutMessage;*/\n}\nfunction string GetName(PlayerPawn P)\n{\n\tif(P != None)\n\t\treturn P.PlayerReplicationInfo.PlayerName;\n\telse return \"[No player found]\";\n}\n\ndefaultproperties\n{\n     bHidden=True\n}\n",
            "name": "mpFlags.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bHidden=True"
                ],
                "exec": [],
                "extends": "RCONActors",
                "functions": {
                    "AddFlag": {
                        "body": "{\n\t//Flags = Flags@AddFlag;\n\t//Log(\"Adding:\"@AddFlag$\" (New: \"$Flags, 'Flags');\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "AddFlag",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "AddFlag"
                            ]
                        ],
                        "return": ""
                    },
                    "CheckFlag": {
                        "body": "{\n\t/*local string killflag;\n\t\n\tif(instr(caps(Flags), caps(\"@kill#\")) != -1)\n\t{\n\t\tkillflag = Right(Flags, Len(Flags)-instr(Flags,\"@kill#\"));\n\t\tkillflag = Left(killflag, InStr(killflag,\"#kill\"));\n\t\tif(instr(caps(input), caps(killflag)) != -1)\n\t\treturn true;\n\t}\n\t\n\tif(instr(caps(Flags), caps(input)) != -1)\n\t\t\treturn True;*/\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "CheckFlag",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "input"
                            ]
                        ],
                        "return": "bool"
                    },
                    "GetName": {
                        "body": "{\n\tif(P != None)\n\t\treturn P.PlayerReplicationInfo.PlayerName;\n\telse return \"[No player found]\";\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetName",
                        "native": false,
                        "param": [
                            [
                                "PlayerPawn",
                                "P"
                            ]
                        ],
                        "return": "string"
                    },
                    "PostBeginPlay": {
                        "body": "{\n\t\n\tforeach AllActors(class'AthenaMutator', Mutz)\n\t\tif(Mutz != None)\n\t\t{\n\t\t\tAM = Mutz;\n\t\t\tLog(\"Flags actor has been connected to Athena.\",'Flags');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tLog(\"ERROR - Athena was not found.\",'Flags');\n\t\t}\n\t\t\n\tSetTimer(1,true);\n}",
                        "locals": [
                            "local AthenaMutator Mutz;"
                        ],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "RemoveFlag": {
                        "body": "{\n/*local string TempMessage, TempLeft, TempRight, OutMessage, _TmpString;\n\tOutMessage=Flags;\n\tLog(\"Input:\"@Flags, 'Flags');\n    while (instr(caps(outmessage), RemFlag) != -1)\n    {\n        tempRight=(right(OutMessage, (len(OutMessage)-instr(caps(OutMessage), RemFlag))-Len(Remflag)));\n        tempLeft=(left(OutMessage, instr(caps(OutMessage), RemFlag)) );\n        OutMessage=TempLeft$TempRight;\n        Log(\"Output:\"@OutMessage, 'Flags');\n    }\n\treturn OutMessage;*/\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "RemoveFlag",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "RemFlag"
                            ]
                        ],
                        "return": "string"
                    },
                    "Timer": {
                        "body": "{\n\t\n\tforeach AllActors(class'LoginInfo',li)\n\t{\n\t\tif((flagger != None) && (li.Flagger == Flagger))\n\t\t{\n\t\t\tLinkedAccount = li.LinkedAccount;\n\t\t\tbRestricted=li.bRestrict;\n\t\t}\n\t}\n\t\n\tiName = getName(Flagger);\n\t\n\tif(!bRan && Flagger != None)\n\t{\n\t\tbAdmin = Flagger.bAdmin;\n\t\tLog(\"Flags actor created for\"@GetName(Flagger),'Flags');\n\t\tbRan=True;\n\t}\n\n\tif(Flagger == None || iName == \"\")\n\t{\t\n\t\tif(AM.bConnectionVoice)\n\t\t{\n\t\t\tAM.AS.AVoice(sound'Athena.AthenaPlayerLeft');\n\t\t}\n\t\tLog(\"Player no longer exists.\",'Flags');\n\t\tDestroy();\n\t}\t\n\t\n\t//Hook for Athenas Admin Notify\n\tif(Flagger != None && bAdmin != Flagger.bAdmin) //Check to see if state is the same. If it isn't, do something.\n\t{\n\t\tAM.AdminNotify(Flagger, Flagger.bAdmin); //If sends True, player has logged in, if sends False, player has logged out\n\t\tbAdmin = Flagger.bAdmin;\n\t\tLog(\"Called AdminNotify(\"$GetName(Flagger)$\",\"$Flagger.bAdmin$\")\");\n\t}\n\t\n\tif(bRestricted && Flagger != None)\n\t{\n\t\tif(Flagger.bAdmin)\n\t\t{\n\t\t\tFlagger.bAdmin = false;\n\t\t\tFlagger.PlayerReplicationInfo.bAdmin = False;\n\t\t\tBroadcastMessage(\"|P2A restricted player was logged out from administrator access..\");\n\t\t}\n\t}\n}",
                        "locals": [
                            "local LoginInfo li;"
                        ],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 141,
                "replication": "",
                "states": [],
                "variables": [
                    "var PlayerPawn Flagger;",
                    "var AthenaMutator AM;",
                    "var string LinkedAccount;",
                    "var string iName;",
                    "var string Nickname, Killphrase;",
                    "var bool bMuteAthena, bRestricted, bAdmin;",
                    "var bool bRan;"
                ]
            }
        },
        "myPRI.uc": {
            "body": "//=============================================================================\n// Spectator.\n//=============================================================================\nclass myPRI extends PlayerReplicationInfo;\n\ndefaultproperties\n{\n}\n",
            "name": "myPRI.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "PlayerReplicationInfo",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 9,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "qi.uc": {
            "body": "class qi extends RCONActors;\n\nvar() bool QIL, QNP;\nvar() DeusExPlayer iPlayer;\n\nfunction Timer()\n{\n\tif(QIL) //Quit if player is none\n\t{\n\t\tif(iPlayer == None || iPlayer.PlayerReplicationInfo.PlayerName == \"\")\n\t\t\tConsoleCommand(\"quit\");\n\t}\n\t\n\tif(QNP)\n\t{\n\t\tif(GPC() == 0)\n\t\t{\n\t\t\tConsoleCommand(\"quit\");\n\t\t}\n\t}\n}\n\nfunction int GPC()\n{\n\tlocal PlayerPawn P;\n\tlocal int i;\n\t\n\tforeach AllActors(class'PlayerPawn',P)\n\t\ti++;\n\t\t\n\treturn i;\n}\n\ndefaultproperties\n{\n}\n",
            "name": "qi.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "RCONActors",
                "functions": {
                    "GPC": {
                        "body": "{\n\t\n\tforeach AllActors(class'PlayerPawn',P)\n\t\ti++;\n\t\t\n\treturn i;\n}",
                        "locals": [
                            "local PlayerPawn P;",
                            "local int i;"
                        ],
                        "modifiers": [],
                        "name": "GPC",
                        "native": false,
                        "param": [],
                        "return": "int"
                    },
                    "Timer": {
                        "body": "{\n\tif(QIL) //Quit if player is none\n\t{\n\t\tif(iPlayer == None || iPlayer.PlayerReplicationInfo.PlayerName == \"\")\n\t\t\tConsoleCommand(\"quit\");\n\t}\n\t\n\tif(QNP)\n\t{\n\t\tif(GPC() == 0)\n\t\t{\n\t\t\tConsoleCommand(\"quit\");\n\t\t}\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 37,
                "replication": "",
                "states": [],
                "variables": [
                    "var() bool QIL, QNP;",
                    "var() DeusExPlayer iPlayer;"
                ]
            }
        },
        "rMessager.uc": {
            "body": "class rMessager extends RCONActors config (RCON);\n\nenum MsgMode\n{\n    MODE_Sequential,\n    MODE_Random,\n    MODE_Disabled\n};\nvar config MsgMode Mode;\nvar config string Text[30], NoHighStreaker, NoHighKiller, NoStreak, NoKills;\nvar config bool AddLogMessage, MessageWhenNoPlayers;\nvar string Text_DB[30], LastMessage;\nvar DeusExPlayer Player;\nvar config byte Delay;\nvar byte oldDelay;\nvar int i,n;\nvar deusexplayer HighKillPlayer, HighStreakPlayer;\nvar bool HavePlayer, NeedNewMessage;\nvar IRCLink myIRC;\nvar RCONStats Stats;\n\nfunction prebeginplay()\n{\nlocal IRCLink IRC;\nlocal RCONStats RStats;\n    log(\"+=================\",'Messager');\n    Log(\"|Starting the mutator...\",'Messager');\n    log(\"+=================\",'Messager');\n    Settimer(float(Delay),true);\n    oldDelay=Delay;\n\t\t\t\tforeach AllActors(class'IRCLink',IRC)\n\t\t\t\t{\n\t\t\t\t\tif(IRC != None)\n\t\t\t\t\t{\n\t\t\t\t\t\tmyIRC = IRC;\n\t\t\t\t\t\tLog(\"IRC link found.\",'Messager');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\tforeach AllActors(class'RCONStats',RStats)\n\t\t\t\t{\n\t\t\t\t\tif(RStats != None)\n\t\t\t\t\t{\n\t\t\t\t\t\tStats = RStats;\n\t\t\t\t\t\tLog(\"RCON STats found.\",'Messager');\n\t\t\t\t\t}\n\t\t\t\t}\n    super.PreBeginPlay();\n}\n\nfunction tick (float v)\n{\n    if (Delay!=oldDelay)\n    {\n        oldDelay=Delay;\n        settimer(Delay,true);\n    }\n    super.tick(v);\n}\n\nfunction GetHighStreaker()\n{\n    local DeusExPlayer Player;\n    foreach allactors(class'deusexplayer',Player)\n    {\n        if (Player.PlayerReplicationInfo.Streak>0)\n        {\n            if (HighStreakPlayer!=None)\n            {\n                if (Player.PlayerReplicationInfo.Streak>HighStreakPlayer.PlayerReplicationInfo.Streak)\n                    {\n                        HighStreakPlayer=Player;\n                    }\n            }\n            else\n                HighStreakPlayer=Player;\n            havePlayer=true;\n        }\n    }\n}\n\nfunction GetHighKiller()\n{\n    local deusexplayer Player;\n    foreach allactors(class'deusexplayer',Player)\n    {\n        if (Player.PlayerReplicationInfo.Score>0)\n        {\n            if (HighKillPlayer!=None)\n            {\n                if (Player.PlayerReplicationInfo.Score>HighKillPlayer.PlayerReplicationInfo.Score)\n                    {\n                        HighKillPlayer=Player;\n                    }\n            }\n            else\n                HighKillPlayer=Player;\n            havePlayer=true;\n        }\n    }\n}\n\nfunction string CheckMetaTags (string inputstring)\n{\n    local string TempMessage, TempLeft, TempRight, OutMessage, _TmpString;\n    local string iHour, iMinute, iDay, iMonth, iYear, AmPm;\n    local deusexplayer Player, _Player;\n\tlocal IRCLink IRL;\n\t\n    //get the time and do string manipulations based on digits.\n    AMPM=\"AM\";     //we'll change this string only if its later than 11am.\n    if (Level.Hour>=12)\n    {\n        iHour=string(Level.Hour-12);\n        AmPm=\"PM\";\n    }\n    else\n        iHour=string(level.Hour);\n\n    if (Level.Hour==0 || Level.Hour==12)\n    {\n        iHour=\"12\";\n    }\n    if (Level.Minute<10)\n    {\n        iMinute=\"0\"$string(level.Minute);\n    }\n    else iMinute=string(level.minute);\n\n    //get the date\n    iDay=string(level.Day);\n    iYear=string(Level.Year);\n    iMonth=string(level.Month);\n\n    OutMessage=InputString;\n\n    if (instr(caps(OutMessage), \"<HIGHSTATSCHECK>\") != -1)\n    {\n        GetHighStreaker();\n        GetHighKiller();\n        if (((instr(caps(OutMessage), \"<HIGHSTREAKNAME>\") != -1) && HighStreakPlayer==none) ||\n        ((instr(caps(OutMessage), \"<HIGHKILLNAME>\") != -1) && HighKillPlayer==None) ||\n        ((instr(caps(OutMessage), \"<HIGHSTREAK>\") != -1) && HighStreakPlayer==None) ||\n        ((instr(caps(OutMessage), \"<HIGHSTREAKNAME>\") != -1) && HighKillPlayer==none))\n            {\n               NeedNewMessage=True;\n               return \"\";\n            }\n    }\n\t\n    while (instr(caps(OutMessage), \"<HIGHSTREAKNAME>\") != -1)\n    {\n        tempRight=(right(OutMessage, (len(OutMessage)-instr(caps(OutMessage), \"<HIGHSTREAKNAME>\"))-16));\n        HavePlayer=false;\n        HighStreakPlayer=None;\n        GetHighStreaker();\n        if (havePlayer && HighStreakPlayer!= None)\n            tempLeft=(left(OutMessage, instr(caps(OutMessage), \"<HIGHSTREAKNAME>\"))$HighStreakPlayer.PlayerReplicationInfo.PlayerName);\n        else\n            tempLeft=(left(OutMessage, instr(caps(OutMessage), \"<HIGHSTREAKNAME>\"))$NoHighStreaker);\n        OutMessage=TempLeft$TempRight;\n    }\n\n    while (instr(caps(OutMessage), \"<HIGHKILLNAME>\") != -1)\n    {\n        tempRight=(right(OutMessage, (len(OutMessage)-instr(caps(OutMessage), \"<HIGHKILLNAME>\"))-14));\n        haveplayer=false;\n        HighKillPlayer=None;\n        GetHighKiller();\n        if (havePlayer && HighKillPlayer!= None)\n            tempLeft=(left(OutMessage, instr(caps(OutMessage), \"<HIGHKILLNAME>\"))$HighKillPlayer.PlayerReplicationInfo.PlayerName);\n        else\n            tempLeft=(left(OutMessage, instr(caps(OutMessage), \"<HIGHKILLNAME>\"))$NoHighKiller);\n        OutMessage=TempLeft$TempRight;\n    }\n\n    while (instr(caps(OutMessage), \"<HIGHSTREAK>\") != -1)\n    {\n        tempRight=(right(OutMessage, (len(OutMessage)-instr(caps(OutMessage), \"<HIGHSTREAK>\"))-12));\n        haveplayer=false;\n        HighStreakPlayer=None;\n        GetHighStreaker();\n        if (haveplayer && HighStreakPlayer!= none)\n            tempLeft=(left(OutMessage, instr(caps(OutMessage), \"<HIGHSTREAK>\"))$int(HighStreakPlayer.PlayerReplicationInfo.Streak));\n        else\n            tempLeft=(left(OutMessage, instr(caps(OutMessage), \"<HIGHSTREAK>\"))$NoStreak);\n        OutMessage=TempLeft$TempRight;\n    }\n\n    while (instr(caps(OutMessage), \"<HIGHKILLS>\") != -1)\n    {\n        tempRight=(right(OutMessage, (len(OutMessage)-instr(caps(OutMessage), \"<HIGHKILLS>\"))-12));\n        haveplayer=false;\n        HighKillPlayer=None;\n        GetHighKiller();\n        if (HavePlayer && HighKillPlayer!= none)\n            tempLeft=(left(OutMessage, instr(caps(OutMessage), \"<HIGHKILLS>\"))$Int(HighKillPlayer.PlayerReplicationInfo.Score));\n        else\n            tempLeft=(left(OutMessage, instr(caps(OutMessage), \"<HIGHKILLS>\"))$NoKills);\n        OutMessage=TempLeft$TempRight;\n    }\n\n    while (instr(caps(OutMessage), \"<TIME>\") != -1)\n    {\n        tempRight=(right(OutMessage, (len(OutMessage)-instr(caps(OutMessage), \"<TIME>\"))-6));\n        tempLeft=(left(OutMessage, instr(caps(OutMessage), \"<TIME>\"))$iHour$\":\"$iMinute$AmPm);\n        OutMessage=TempLeft$TempRight;\n    }\n\n    while (instr(caps(OutMessage), \"<SERVERNAME>\") != -1)\n    {\n        tempRight=(right(OutMessage, (len(OutMessage)-instr(caps(OutMessage), \"<SERVERNAME>\"))-12));\n        tempLeft=(left(OutMessage, instr(caps(OutMessage), \"<SERVERNAME>\"))$Level.Game.GameReplicationInfo.ServerName);\n        OutMessage=TempLeft$TempRight;\n    }\n\n    while (instr(caps(OutMessage), \"<ADMINNAME>\") != -1)\n    {\n        tempRight=(right(OutMessage, (len(OutMessage)-instr(caps(OutMessage), \"<ADMINNAME>\"))-11));\n        tempLeft=(left(OutMessage, instr(caps(OutMessage), \"<ADMINNAME>\"))$Level.Game.GameReplicationInfo.AdminName);\n        OutMessage=TempLeft$TempRight;\n    }\n\n    while (instr(caps(OutMessage), \"<ADMINEMAIL>\") != -1)\n    {\n        tempRight=(right(OutMessage, (len(OutMessage)-instr(caps(OutMessage), \"<ADMINEMAIL>\"))-12));\n        tempLeft=(left(OutMessage, instr(caps(OutMessage), \"<ADMINEMAIL>\"))$Level.Game.GameReplicationInfo.AdminEmail);\n        OutMessage=TempLeft$TempRight;\n    }\n\n    while (instr(caps(OutMessage), \"<DAY>\") != -1)\n    {\n        tempRight=(right(OutMessage, (len(OutMessage)-instr(caps(OutMessage), \"<DAY>\"))-5));\n        tempLeft=(left(OutMessage, instr(caps(OutMessage), \"<DAY>\"))$iDay);\n        OutMessage=TempLeft$TempRight;\n    }\n\n    while (instr(caps(OutMessage), \"<MONTH>\") != -1)\n    {\n        tempRight=(right(OutMessage, (len(OutMessage)-instr(caps(OutMessage), \"<MONTH>\"))-7));\n        tempLeft=(left(OutMessage, instr(caps(OutMessage), \"<MONTH>\"))$iMonth);\n        OutMessage=TempLeft$TempRight;\n    }\n\n    while (instr(caps(OutMessage), \"<YEAR>\") != -1)\n    {\n        tempRight=(right(OutMessage, (len(OutMessage)-instr(caps(OutMessage), \"<YEAR>\"))-6));\n        tempLeft=(left(OutMessage, instr(caps(OutMessage), \"<YEAR>\"))$iyear);\n        OutMessage=TempLeft$TempRight;\n    }\n\n    while (instr(caps(OutMessage), \"<CURPLAYERS>\") != -1)\n    {\n        tempRight=(right(OutMessage, (len(OutMessage)-instr(caps(OutMessage), \"<CURPLAYERS>\"))-12));\n        tempLeft=(left(OutMessage, instr(Caps(OutMessage), \"<CURPLAYERS>\"))$Level.Game.NumPlayers);\n        OutMessage=TempLeft$TempRight;\n    }\n\n    while (instr(caps(OutMessage), \"<MAXPLAYERS>\") != -1)\n    {\n        tempRight=(right(OutMessage, (len(OutMessage)-instr(caps(OutMessage), \"<MAXPLAYERS>\"))-12));\n        tempLeft=(left(OutMessage, instr(Caps(OutMessage), \"<MAXPLAYERS>\"))$Level.Game.MaxPlayers);\n        OutMessage=TempLeft$TempRight;\n    }\n\t\n    while (instr(caps(OutMessage), \"<IRC_STATUS>\") != -1)\n    {\n\t\t\tif(myIRC == None)\n\t\t\t{\n\t\t\t\tforeach AllActors(class'IRCLink',IRL)\n\t\t\t\t{\n\t\t\t\t\tif(IRL != None)\n\t\t\t\t\t{\n\t\t\t\t\t\tmyIRC = IRL;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n        tempRight=(right(OutMessage, (len(OutMessage)-instr(caps(OutMessage), \"<IRC_STATUS>\"))-12));\n\t\tif(myIRC != None)\n        tempLeft=(left(OutMessage, instr(Caps(OutMessage), \"<IRC_STATUS>\"))$\"|P4ONLINE\");\n\t\telse\n\t\ttempLeft=(left(OutMessage, instr(Caps(OutMessage), \"<IRC_STATUS>\"))$\"|P2OFFLINE\");\n        OutMessage=TempLeft$TempRight;\n    }\n\t    \n\twhile (instr(caps(OutMessage), \"<IRC_SERVER>\") != -1)\n    {\n\t\t\tif(myIRC == None)\n\t\t\t{\n\t\t\t\tforeach AllActors(class'IRCLink',IRL)\n\t\t\t\t{\n\t\t\t\t\tif(IRL != None)\n\t\t\t\t\t{\n\t\t\t\t\t\tmyIRC = IRL;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n        tempRight=(right(OutMessage, (len(OutMessage)-instr(caps(OutMessage), \"<IRC_SERVER>\"))-12));\n\t\tif(myIRC != None)\n        tempLeft=(left(OutMessage, instr(Caps(OutMessage), \"<IRC_SERVER>\"))$myIRC.Server);\n\t\telse\n\t\ttempLeft=(left(OutMessage, instr(Caps(OutMessage), \"<IRC_SERVER>\"))$\"|P2OFFLINE\");\n        OutMessage=TempLeft$TempRight;\n    }\n\t\n\twhile (instr(caps(OutMessage), \"<IRC_USERNAME>\") != -1)\n    {\n\t\t\tif(myIRC == None)\n\t\t\t{\n\t\t\t\tforeach AllActors(class'IRCLink',IRL)\n\t\t\t\t{\n\t\t\t\t\tif(IRL != None)\n\t\t\t\t\t{\n\t\t\t\t\t\tmyIRC = IRL;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n        tempRight=(right(OutMessage, (len(OutMessage)-instr(caps(OutMessage), \"<IRC_USERNAME>\"))-14));\n\t\tif(myIRC != None)\n        tempLeft=(left(OutMessage, instr(Caps(OutMessage), \"<IRC_USERNAME>\"))$myIRC.Username);\n\t\telse\n\t\ttempLeft=(left(OutMessage, instr(Caps(OutMessage), \"<IRC_USERNAME>\"))$\"|P2OFFLINE\");\n        OutMessage=TempLeft$TempRight;\n    }\n\n\twhile (instr(caps(OutMessage), \"<IRC_CHANNEL>\") != -1)\n    {\n\t\t\tif(myIRC == None)\n\t\t\t{\n\t\t\t\tforeach AllActors(class'IRCLink',IRL)\n\t\t\t\t{\n\t\t\t\t\tif(IRL != None)\n\t\t\t\t\t{\n\t\t\t\t\t\tmyIRC = IRL;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n        tempRight=(right(OutMessage, (len(OutMessage)-instr(caps(OutMessage), \"<IRC_CHANNEL>\"))-13));\n\t\tif(myIRC != None)\n        tempLeft=(left(OutMessage, instr(Caps(OutMessage), \"<IRC_CHANNEL>\"))$myIRC.Channel);\n\t\telse\n\t\ttempLeft=(left(OutMessage, instr(Caps(OutMessage), \"<IRC_CHANNEL>\"))$\"|P2OFFLINE\");\n        OutMessage=TempLeft$TempRight;\n    }\n\t\n\twhile (instr(caps(OutMessage), \"<ONLINE_ADMINS>\") != -1)\n    {\n        tempRight=(right(OutMessage, (len(OutMessage)-instr(caps(OutMessage), \"<ONLINE_ADMINS>\"))-15));\n\t\t\t  ForEach AllActors(class 'DeusExPlayer', _Player)\n\t\t\t  {\n\t\t\t\tif(_Player != None && _Player.bAdmin)\n\t\t\t\t{\n\t\t\t\t  _TmpString = _TmpString$_Player.PlayerReplicationInfo.PlayerName$\"(\"$_Player.PlayerReplicationInfo.PlayerID$\"), \";\n\t\t\t\t}\n\t\t\t  }\n\t\t\t  if(Len(_TmpString) == 0)\n\t\t\t  {\n\t\t\t\t_TmpString = \"None...\";\n\t\t\t  }\n        tempLeft=(left(OutMessage, instr(Caps(OutMessage), \"<ONLINE_ADMINS>\"))$Left(_TmpString, Len(_TmpString)-2));\n\n        OutMessage=TempLeft$TempRight;\n    }\t\n\n\twhile (instr(caps(OutMessage), \"<STATS_PLAYERS>\") != -1)\n    {\n        tempRight=(right(OutMessage, (len(OutMessage)-instr(caps(OutMessage), \"<STATS_PLAYERS>\"))-15));\n\t\tif(Stats != None)\n        tempLeft=(left(OutMessage, instr(Caps(OutMessage), \"<STATS_PLAYERS>\"))$Stats.HighestPlayerCount$\" reached at \"$Stats.HighestPlayerCountTime);\n\t\telse\n\t\ttempLeft=(left(OutMessage, instr(Caps(OutMessage), \"<STATS_PLAYERS>\"))$\"|P2MISSING MUTATOR\");\n        OutMessage=TempLeft$TempRight;\n    }\n\t\n\twhile (instr(caps(OutMessage), \"<STATS_KILLS>\") != -1)\n    {\n        tempRight=(right(OutMessage, (len(OutMessage)-instr(caps(OutMessage), \"<STATS_KILLS>\"))-13));\n\t\tif(Stats != None)\n        tempLeft=(left(OutMessage, instr(Caps(OutMessage), \"<STATS_KILLS>\"))$Stats.HighestScoreName$\" scored \"$Stats.HighestScore);\n\t\telse\n\t\ttempLeft=(left(OutMessage, instr(Caps(OutMessage), \"<STATS_KILLS>\"))$\"|P2MISSING MUTATOR\");\n        OutMessage=TempLeft$TempRight;\n    }\n\n\twhile (instr(caps(OutMessage), \"<STATS_DEATHS>\") != -1)\n    {\n        tempRight=(right(OutMessage, (len(OutMessage)-instr(caps(OutMessage), \"<STATS_DEATHS>\"))-14));\n\t\tif(Stats != None)\n        tempLeft=(left(OutMessage, instr(Caps(OutMessage), \"<STATS_DEATHS>\"))$Stats.HighestDeaths$\" from \"$Stats.HighestDeathsName);\n\t\telse\n\t\ttempLeft=(left(OutMessage, instr(Caps(OutMessage), \"<STATS_DEATHS>\"))$\"|P2MISSING MUTATOR\");\n        OutMessage=TempLeft$TempRight;\n    }\n\t\n    return OutMessage;\n}\n\nfunction timer()\n{\n    local int n2;\n    local string Message;\n    if (!MessageWhenNoPlayers && Level.Game.NumPlayers==0)\n        return;\n    for (n=0;n<30;n++)\n    {\n        if (Text[n]!=\"\")\n        {                     //this makes a database of all the text strings\n            Text_DB[n2]=Text[n];  //to use later on so we don't get empty messages\n            n2++;\n        }\n    }\n    if (Mode==MODE_Sequential)\n    {\n        newmessage:\n        if (i>(n2-1))   //-1 to get rid of empty message bug.\n            i=0;\n        Message=CheckMetaTags(Text_DB[i]);\n        if (NeedNewMessage)\n        {\n            NeedNewMessage=False;\n            i++;\n            goto NewMessage;\n        }\n        if (AddLogMessage)\n            log(Message,'Messager');\n        BeepPlayers(Message);\n        i++;\n    }\n    else if (Mode==MODE_Random)\n    {\n        newmessage2:\n        i=rand(n2);\n        Message=CheckMetaTags(Text_DB[i]);\n        if (NeedNewMessage || (Message==LastMessage))\n        {\n            NeedNewMessage=False;\n            goto NewMessage2;\n        }\n        LastMessage=Message;\n        if (AddLogMessage)\n            log(Message,'Messager');\n        BeepPlayers(Message);\n    }\n}\n\nfunction BeepPlayers(string str)\n{\nlocal DeusExPlayer pl;\n\tforeach AllActors(class'DeusExPlayer',pl)\n\t\tpl.ClientMessage(str);\n}\n\ndefaultproperties\n{\n     Mode=MODE_Random\n     Text(0)=\"|P7[SYSTEM] |P4Welcome to |P1<servername>|P4.\"\n     Text(1)=\"|P7[SYSTEM] |P4The local time on the server is |P1<time>|P4 on |P1<day>/<month>/<year>|P4\"\n     Text(2)=\"|P7[SYSTEM] |P4There are |P1<curplayers>|P4 players currently online.\"\n     Text(3)=\"|P3[HELP] |P4Say |P2/skin|P4 to change your in-game outfit!\"\n     Text(4)=\"|P7[SYSTEM] |P4Join the IRC room to chat with us anytime! |P7#deusbork|P4 on |P7irc.rizon.io\"\n     Text(5)=\"|P7[SYSTEM] |P4Have a mod suggestion? Leave a comment by saying |P2comment|P4 followed by your comment.\"\n     Text(6)=\"|P3[HELP] |P4Double jump by pressing Jump again while in the air!\"\n     Text(7)=\"|P3[HELP] |P4Wall jump by pressing Jump while in the air and pressed against a wall.\"\n     Text(8)=\"|P3[HELP] |P4Jump up to a ledge and you'll climb up automatically.\"\n     Text(9)=\"|P3[HELP] |P4Say |P2r.tp|P4 to teleport to where you're looking at!\"\n     Text(10)=\"|P3[HELP] |P4Say |P2r.phys|P4 to throw yourself in the direction youre looking\"\n     Text(11)=\"|P3[HELP] |P4Join the DXMP Discord chat server by saying the command |P2m.discord|P4\"\n     Text(12)=\"|P3[HELP] |P4Join the DXMP Discord chat server by saying the command |P2m.discord|P4\"\n     Text(13)=\"|P3[HELP] |P4Join the DXMP Discord chat server by saying the command |P2m.discord|P4\"\n     Text(14)=\"|P4[IRC STATUS] (<irc_status>|P4) |P7<irc_channel> |P4on |P7<irc_server>\"\n     Text(15)=\"|P3[HELP] |P4Join the DXMP Discord chat server by saying the command |P2m.discord|P4\"\n     Text(16)=\"|P7[SYSTEM] |P4Highest kill record: |P1<stats_kills>|P4 and highest death record: |P1<stats_deaths>\"\n     Text(17)=\"|P3[HELP]|P4 Say |P2/status|P4 to change your status, which shows in chat and scoreboard.\"\n     Text(18)=\"|P7[SYSTEM] |P4Current online admins: |P7<ONLINE_ADMINS>\"\n     Text(19)=\"|P3[HELP] |P4If Trivia is running, just SAY the answers in chat to win!\"\n     Text(20)=\"|P7[SYSTEM] |P4Want to download mods used here? Or share mods WITH us? Visit: http://deusex.ucoz.net\"\n     Text(21)=\"|P3[HELP] |P4Need help with anything? Say Help to search the database for help.\"\n     Text(22)=\"|P3[HELP] |P4Need help with anything? Say Help to search the database for help.\"\n     Text(23)=\"|P3[HELP] |P4Need help with anything? Say Help to search the database for help.\"\n     Text(24)=\"|P3[HELP] |P4Need help with anything? Say Help to search the database for help.\"\n     Text(25)=\"|P3[HELP] |P4Join the DXMP Discord chat server by saying the command |P2m.discord|P4\"\n     Text(26)=\"|P3[HELP] |P4Join the DXMP Discord chat server by saying the command |P2m.discord|P4\"\n     Text(27)=\"|P3[HELP] |P4Summon objects by SAYING |P2r.summon|P4 followed by an object class, such as; |P2Say r.summon Lamp2\"\n     Text(28)=\"|P3[HELP] |P4Need help with anything? Say Help to search the database for help.\"\n     Text(29)=\"|P3[HELP] |P4If Player Cheats is enabled, say the commands r.god, r.fly, and r.walk to use them.\"\n     NoHighStreaker=\"No one\"\n     NoHighKiller=\"No one\"\n     NoStreak=\"a streak\"\n     NoKills=\"any kills\"\n     AddLogMessage=True\n     Delay=120\n     bHidden=True\n}\n",
            "name": "rMessager.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "Mode=MODE_Random",
                    "Text(0)=\"|P7[SYSTEM] |P4Welcome to |P1<servername>|P4.\"",
                    "Text(1)=\"|P7[SYSTEM] |P4The local time on the server is |P1<time>|P4 on |P1<day>/<month>/<year>|P4\"",
                    "Text(2)=\"|P7[SYSTEM] |P4There are |P1<curplayers>|P4 players currently online.\"",
                    "Text(3)=\"|P3[HELP] |P4Say |P2/skin|P4 to change your in-game outfit!\"",
                    "Text(4)=\"|P7[SYSTEM] |P4Join the IRC room to chat with us anytime! |P7#deusbork|P4 on |P7irc.rizon.io\"",
                    "Text(5)=\"|P7[SYSTEM] |P4Have a mod suggestion? Leave a comment by saying |P2comment|P4 followed by your comment.\"",
                    "Text(6)=\"|P3[HELP] |P4Double jump by pressing Jump again while in the air!\"",
                    "Text(7)=\"|P3[HELP] |P4Wall jump by pressing Jump while in the air and pressed against a wall.\"",
                    "Text(8)=\"|P3[HELP] |P4Jump up to a ledge and you'll climb up automatically.\"",
                    "Text(9)=\"|P3[HELP] |P4Say |P2r.tp|P4 to teleport to where you're looking at!\"",
                    "Text(10)=\"|P3[HELP] |P4Say |P2r.phys|P4 to throw yourself in the direction youre looking\"",
                    "Text(11)=\"|P3[HELP] |P4Join the DXMP Discord chat server by saying the command |P2m.discord|P4\"",
                    "Text(12)=\"|P3[HELP] |P4Join the DXMP Discord chat server by saying the command |P2m.discord|P4\"",
                    "Text(13)=\"|P3[HELP] |P4Join the DXMP Discord chat server by saying the command |P2m.discord|P4\"",
                    "Text(14)=\"|P4[IRC STATUS] (<irc_status>|P4) |P7<irc_channel> |P4on |P7<irc_server>\"",
                    "Text(15)=\"|P3[HELP] |P4Join the DXMP Discord chat server by saying the command |P2m.discord|P4\"",
                    "Text(16)=\"|P7[SYSTEM] |P4Highest kill record: |P1<stats_kills>|P4 and highest death record: |P1<stats_deaths>\"",
                    "Text(17)=\"|P3[HELP]|P4 Say |P2/status|P4 to change your status, which shows in chat and scoreboard.\"",
                    "Text(18)=\"|P7[SYSTEM] |P4Current online admins: |P7<ONLINE_ADMINS>\"",
                    "Text(19)=\"|P3[HELP] |P4If Trivia is running, just SAY the answers in chat to win!\"",
                    "Text(20)=\"|P7[SYSTEM] |P4Want to download mods used here? Or share mods WITH us? Visit: http://deusex.ucoz.net\"",
                    "Text(21)=\"|P3[HELP] |P4Need help with anything? Say Help to search the database for help.\"",
                    "Text(22)=\"|P3[HELP] |P4Need help with anything? Say Help to search the database for help.\"",
                    "Text(23)=\"|P3[HELP] |P4Need help with anything? Say Help to search the database for help.\"",
                    "Text(24)=\"|P3[HELP] |P4Need help with anything? Say Help to search the database for help.\"",
                    "Text(25)=\"|P3[HELP] |P4Join the DXMP Discord chat server by saying the command |P2m.discord|P4\"",
                    "Text(26)=\"|P3[HELP] |P4Join the DXMP Discord chat server by saying the command |P2m.discord|P4\"",
                    "Text(27)=\"|P3[HELP] |P4Summon objects by SAYING |P2r.summon|P4 followed by an object class, such as; |P2Say r.summon Lamp2\"",
                    "Text(28)=\"|P3[HELP] |P4Need help with anything? Say Help to search the database for help.\"",
                    "Text(29)=\"|P3[HELP] |P4If Player Cheats is enabled, say the commands r.god, r.fly, and r.walk to use them.\"",
                    "NoHighStreaker=\"No one\"",
                    "NoHighKiller=\"No one\"",
                    "NoStreak=\"a streak\"",
                    "NoKills=\"any kills\"",
                    "AddLogMessage=True",
                    "Delay=120",
                    "bHidden=True"
                ],
                "exec": [],
                "extends": "RCONActors",
                "functions": {
                    "BeepPlayers": {
                        "body": "{\n\tforeach AllActors(class'DeusExPlayer',pl)\n\t\tpl.ClientMessage(str);\n}",
                        "locals": [
                            "local DeusExPlayer pl;"
                        ],
                        "modifiers": [],
                        "name": "BeepPlayers",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "str"
                            ]
                        ],
                        "return": ""
                    },
                    "CheckMetaTags": {
                        "body": "{\n\t\n    //get the time and do string manipulations based on digits.\n    AMPM=\"AM\";     //we'll change this string only if its later than 11am.\n    if (Level.Hour>=12)\n    {\n        iHour=string(Level.Hour-12);\n        AmPm=\"PM\";\n    }\n    else\n        iHour=string(level.Hour);\n\n    if (Level.Hour==0 || Level.Hour==12)\n    {\n        iHour=\"12\";\n    }\n    if (Level.Minute<10)\n    {\n        iMinute=\"0\"$string(level.Minute);\n    }\n    else iMinute=string(level.minute);\n\n    //get the date\n    iDay=string(level.Day);\n    iYear=string(Level.Year);\n    iMonth=string(level.Month);\n\n    OutMessage=InputString;\n\n    if (instr(caps(OutMessage), \"<HIGHSTATSCHECK>\") != -1)\n    {\n        GetHighStreaker();\n        GetHighKiller();\n        if (((instr(caps(OutMessage), \"<HIGHSTREAKNAME>\") != -1) && HighStreakPlayer==none) ||\n        ((instr(caps(OutMessage), \"<HIGHKILLNAME>\") != -1) && HighKillPlayer==None) ||\n        ((instr(caps(OutMessage), \"<HIGHSTREAK>\") != -1) && HighStreakPlayer==None) ||\n        ((instr(caps(OutMessage), \"<HIGHSTREAKNAME>\") != -1) && HighKillPlayer==none))\n            {\n               NeedNewMessage=True;\n               return \"\";\n            }\n    }\n\t\n    while (instr(caps(OutMessage), \"<HIGHSTREAKNAME>\") != -1)\n    {\n        tempRight=(right(OutMessage, (len(OutMessage)-instr(caps(OutMessage), \"<HIGHSTREAKNAME>\"))-16));\n        HavePlayer=false;\n        HighStreakPlayer=None;\n        GetHighStreaker();\n        if (havePlayer && HighStreakPlayer!= None)\n            tempLeft=(left(OutMessage, instr(caps(OutMessage), \"<HIGHSTREAKNAME>\"))$HighStreakPlayer.PlayerReplicationInfo.PlayerName);\n        else\n            tempLeft=(left(OutMessage, instr(caps(OutMessage), \"<HIGHSTREAKNAME>\"))$NoHighStreaker);\n        OutMessage=TempLeft$TempRight;\n    }\n\n    while (instr(caps(OutMessage), \"<HIGHKILLNAME>\") != -1)\n    {\n        tempRight=(right(OutMessage, (len(OutMessage)-instr(caps(OutMessage), \"<HIGHKILLNAME>\"))-14));\n        haveplayer=false;\n        HighKillPlayer=None;\n        GetHighKiller();\n        if (havePlayer && HighKillPlayer!= None)\n            tempLeft=(left(OutMessage, instr(caps(OutMessage), \"<HIGHKILLNAME>\"))$HighKillPlayer.PlayerReplicationInfo.PlayerName);\n        else\n            tempLeft=(left(OutMessage, instr(caps(OutMessage), \"<HIGHKILLNAME>\"))$NoHighKiller);\n        OutMessage=TempLeft$TempRight;\n    }\n\n    while (instr(caps(OutMessage), \"<HIGHSTREAK>\") != -1)\n    {\n        tempRight=(right(OutMessage, (len(OutMessage)-instr(caps(OutMessage), \"<HIGHSTREAK>\"))-12));\n        haveplayer=false;\n        HighStreakPlayer=None;\n        GetHighStreaker();\n        if (haveplayer && HighStreakPlayer!= none)\n            tempLeft=(left(OutMessage, instr(caps(OutMessage), \"<HIGHSTREAK>\"))$int(HighStreakPlayer.PlayerReplicationInfo.Streak));\n        else\n            tempLeft=(left(OutMessage, instr(caps(OutMessage), \"<HIGHSTREAK>\"))$NoStreak);\n        OutMessage=TempLeft$TempRight;\n    }\n\n    while (instr(caps(OutMessage), \"<HIGHKILLS>\") != -1)\n    {\n        tempRight=(right(OutMessage, (len(OutMessage)-instr(caps(OutMessage), \"<HIGHKILLS>\"))-12));\n        haveplayer=false;\n        HighKillPlayer=None;\n        GetHighKiller();\n        if (HavePlayer && HighKillPlayer!= none)\n            tempLeft=(left(OutMessage, instr(caps(OutMessage), \"<HIGHKILLS>\"))$Int(HighKillPlayer.PlayerReplicationInfo.Score));\n        else\n            tempLeft=(left(OutMessage, instr(caps(OutMessage), \"<HIGHKILLS>\"))$NoKills);\n        OutMessage=TempLeft$TempRight;\n    }\n\n    while (instr(caps(OutMessage), \"<TIME>\") != -1)\n    {\n        tempRight=(right(OutMessage, (len(OutMessage)-instr(caps(OutMessage), \"<TIME>\"))-6));\n        tempLeft=(left(OutMessage, instr(caps(OutMessage), \"<TIME>\"))$iHour$\":\"$iMinute$AmPm);\n        OutMessage=TempLeft$TempRight;\n    }\n\n    while (instr(caps(OutMessage), \"<SERVERNAME>\") != -1)\n    {\n        tempRight=(right(OutMessage, (len(OutMessage)-instr(caps(OutMessage), \"<SERVERNAME>\"))-12));\n        tempLeft=(left(OutMessage, instr(caps(OutMessage), \"<SERVERNAME>\"))$Level.Game.GameReplicationInfo.ServerName);\n        OutMessage=TempLeft$TempRight;\n    }\n\n    while (instr(caps(OutMessage), \"<ADMINNAME>\") != -1)\n    {\n        tempRight=(right(OutMessage, (len(OutMessage)-instr(caps(OutMessage), \"<ADMINNAME>\"))-11));\n        tempLeft=(left(OutMessage, instr(caps(OutMessage), \"<ADMINNAME>\"))$Level.Game.GameReplicationInfo.AdminName);\n        OutMessage=TempLeft$TempRight;\n    }\n\n    while (instr(caps(OutMessage), \"<ADMINEMAIL>\") != -1)\n    {\n        tempRight=(right(OutMessage, (len(OutMessage)-instr(caps(OutMessage), \"<ADMINEMAIL>\"))-12));\n        tempLeft=(left(OutMessage, instr(caps(OutMessage), \"<ADMINEMAIL>\"))$Level.Game.GameReplicationInfo.AdminEmail);\n        OutMessage=TempLeft$TempRight;\n    }\n\n    while (instr(caps(OutMessage), \"<DAY>\") != -1)\n    {\n        tempRight=(right(OutMessage, (len(OutMessage)-instr(caps(OutMessage), \"<DAY>\"))-5));\n        tempLeft=(left(OutMessage, instr(caps(OutMessage), \"<DAY>\"))$iDay);\n        OutMessage=TempLeft$TempRight;\n    }\n\n    while (instr(caps(OutMessage), \"<MONTH>\") != -1)\n    {\n        tempRight=(right(OutMessage, (len(OutMessage)-instr(caps(OutMessage), \"<MONTH>\"))-7));\n        tempLeft=(left(OutMessage, instr(caps(OutMessage), \"<MONTH>\"))$iMonth);\n        OutMessage=TempLeft$TempRight;\n    }\n\n    while (instr(caps(OutMessage), \"<YEAR>\") != -1)\n    {\n        tempRight=(right(OutMessage, (len(OutMessage)-instr(caps(OutMessage), \"<YEAR>\"))-6));\n        tempLeft=(left(OutMessage, instr(caps(OutMessage), \"<YEAR>\"))$iyear);\n        OutMessage=TempLeft$TempRight;\n    }\n\n    while (instr(caps(OutMessage), \"<CURPLAYERS>\") != -1)\n    {\n        tempRight=(right(OutMessage, (len(OutMessage)-instr(caps(OutMessage), \"<CURPLAYERS>\"))-12));\n        tempLeft=(left(OutMessage, instr(Caps(OutMessage), \"<CURPLAYERS>\"))$Level.Game.NumPlayers);\n        OutMessage=TempLeft$TempRight;\n    }\n\n    while (instr(caps(OutMessage), \"<MAXPLAYERS>\") != -1)\n    {\n        tempRight=(right(OutMessage, (len(OutMessage)-instr(caps(OutMessage), \"<MAXPLAYERS>\"))-12));\n        tempLeft=(left(OutMessage, instr(Caps(OutMessage), \"<MAXPLAYERS>\"))$Level.Game.MaxPlayers);\n        OutMessage=TempLeft$TempRight;\n    }\n\t\n    while (instr(caps(OutMessage), \"<IRC_STATUS>\") != -1)\n    {\n\t\t\tif(myIRC == None)\n\t\t\t{\n\t\t\t\tforeach AllActors(class'IRCLink',IRL)\n\t\t\t\t{\n\t\t\t\t\tif(IRL != None)\n\t\t\t\t\t{\n\t\t\t\t\t\tmyIRC = IRL;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n        tempRight=(right(OutMessage, (len(OutMessage)-instr(caps(OutMessage), \"<IRC_STATUS>\"))-12));\n\t\tif(myIRC != None)\n        tempLeft=(left(OutMessage, instr(Caps(OutMessage), \"<IRC_STATUS>\"))$\"|P4ONLINE\");\n\t\telse\n\t\ttempLeft=(left(OutMessage, instr(Caps(OutMessage), \"<IRC_STATUS>\"))$\"|P2OFFLINE\");\n        OutMessage=TempLeft$TempRight;\n    }\n\t    \n\twhile (instr(caps(OutMessage), \"<IRC_SERVER>\") != -1)\n    {\n\t\t\tif(myIRC == None)\n\t\t\t{\n\t\t\t\tforeach AllActors(class'IRCLink',IRL)\n\t\t\t\t{\n\t\t\t\t\tif(IRL != None)\n\t\t\t\t\t{\n\t\t\t\t\t\tmyIRC = IRL;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n        tempRight=(right(OutMessage, (len(OutMessage)-instr(caps(OutMessage), \"<IRC_SERVER>\"))-12));\n\t\tif(myIRC != None)\n        tempLeft=(left(OutMessage, instr(Caps(OutMessage), \"<IRC_SERVER>\"))$myIRC.Server);\n\t\telse\n\t\ttempLeft=(left(OutMessage, instr(Caps(OutMessage), \"<IRC_SERVER>\"))$\"|P2OFFLINE\");\n        OutMessage=TempLeft$TempRight;\n    }\n\t\n\twhile (instr(caps(OutMessage), \"<IRC_USERNAME>\") != -1)\n    {\n\t\t\tif(myIRC == None)\n\t\t\t{\n\t\t\t\tforeach AllActors(class'IRCLink',IRL)\n\t\t\t\t{\n\t\t\t\t\tif(IRL != None)\n\t\t\t\t\t{\n\t\t\t\t\t\tmyIRC = IRL;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n        tempRight=(right(OutMessage, (len(OutMessage)-instr(caps(OutMessage), \"<IRC_USERNAME>\"))-14));\n\t\tif(myIRC != None)\n        tempLeft=(left(OutMessage, instr(Caps(OutMessage), \"<IRC_USERNAME>\"))$myIRC.Username);\n\t\telse\n\t\ttempLeft=(left(OutMessage, instr(Caps(OutMessage), \"<IRC_USERNAME>\"))$\"|P2OFFLINE\");\n        OutMessage=TempLeft$TempRight;\n    }\n\n\twhile (instr(caps(OutMessage), \"<IRC_CHANNEL>\") != -1)\n    {\n\t\t\tif(myIRC == None)\n\t\t\t{\n\t\t\t\tforeach AllActors(class'IRCLink',IRL)\n\t\t\t\t{\n\t\t\t\t\tif(IRL != None)\n\t\t\t\t\t{\n\t\t\t\t\t\tmyIRC = IRL;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n        tempRight=(right(OutMessage, (len(OutMessage)-instr(caps(OutMessage), \"<IRC_CHANNEL>\"))-13));\n\t\tif(myIRC != None)\n        tempLeft=(left(OutMessage, instr(Caps(OutMessage), \"<IRC_CHANNEL>\"))$myIRC.Channel);\n\t\telse\n\t\ttempLeft=(left(OutMessage, instr(Caps(OutMessage), \"<IRC_CHANNEL>\"))$\"|P2OFFLINE\");\n        OutMessage=TempLeft$TempRight;\n    }\n\t\n\twhile (instr(caps(OutMessage), \"<ONLINE_ADMINS>\") != -1)\n    {\n        tempRight=(right(OutMessage, (len(OutMessage)-instr(caps(OutMessage), \"<ONLINE_ADMINS>\"))-15));\n\t\t\t  ForEach AllActors(class 'DeusExPlayer', _Player)\n\t\t\t  {\n\t\t\t\tif(_Player != None && _Player.bAdmin)\n\t\t\t\t{\n\t\t\t\t  _TmpString = _TmpString$_Player.PlayerReplicationInfo.PlayerName$\"(\"$_Player.PlayerReplicationInfo.PlayerID$\"), \";\n\t\t\t\t}\n\t\t\t  }\n\t\t\t  if(Len(_TmpString) == 0)\n\t\t\t  {\n\t\t\t\t_TmpString = \"None...\";\n\t\t\t  }\n        tempLeft=(left(OutMessage, instr(Caps(OutMessage), \"<ONLINE_ADMINS>\"))$Left(_TmpString, Len(_TmpString)-2));\n\n        OutMessage=TempLeft$TempRight;\n    }\t\n\n\twhile (instr(caps(OutMessage), \"<STATS_PLAYERS>\") != -1)\n    {\n        tempRight=(right(OutMessage, (len(OutMessage)-instr(caps(OutMessage), \"<STATS_PLAYERS>\"))-15));\n\t\tif(Stats != None)\n        tempLeft=(left(OutMessage, instr(Caps(OutMessage), \"<STATS_PLAYERS>\"))$Stats.HighestPlayerCount$\" reached at \"$Stats.HighestPlayerCountTime);\n\t\telse\n\t\ttempLeft=(left(OutMessage, instr(Caps(OutMessage), \"<STATS_PLAYERS>\"))$\"|P2MISSING MUTATOR\");\n        OutMessage=TempLeft$TempRight;\n    }\n\t\n\twhile (instr(caps(OutMessage), \"<STATS_KILLS>\") != -1)\n    {\n        tempRight=(right(OutMessage, (len(OutMessage)-instr(caps(OutMessage), \"<STATS_KILLS>\"))-13));\n\t\tif(Stats != None)\n        tempLeft=(left(OutMessage, instr(Caps(OutMessage), \"<STATS_KILLS>\"))$Stats.HighestScoreName$\" scored \"$Stats.HighestScore);\n\t\telse\n\t\ttempLeft=(left(OutMessage, instr(Caps(OutMessage), \"<STATS_KILLS>\"))$\"|P2MISSING MUTATOR\");\n        OutMessage=TempLeft$TempRight;\n    }\n\n\twhile (instr(caps(OutMessage), \"<STATS_DEATHS>\") != -1)\n    {\n        tempRight=(right(OutMessage, (len(OutMessage)-instr(caps(OutMessage), \"<STATS_DEATHS>\"))-14));\n\t\tif(Stats != None)\n        tempLeft=(left(OutMessage, instr(Caps(OutMessage), \"<STATS_DEATHS>\"))$Stats.HighestDeaths$\" from \"$Stats.HighestDeathsName);\n\t\telse\n\t\ttempLeft=(left(OutMessage, instr(Caps(OutMessage), \"<STATS_DEATHS>\"))$\"|P2MISSING MUTATOR\");\n        OutMessage=TempLeft$TempRight;\n    }\n\t\n    return OutMessage;\n}",
                        "locals": [
                            "local string TempMessage, TempLeft, TempRight, OutMessage, _TmpString;",
                            "local string iHour, iMinute, iDay, iMonth, iYear, AmPm;",
                            "local deusexplayer Player, _Player;",
                            "local IRCLink IRL;"
                        ],
                        "modifiers": [],
                        "name": "CheckMetaTags",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "inputstring"
                            ]
                        ],
                        "return": "string"
                    },
                    "GetHighKiller": {
                        "body": "{\n    foreach allactors(class'deusexplayer',Player)\n    {\n        if (Player.PlayerReplicationInfo.Score>0)\n        {\n            if (HighKillPlayer!=None)\n            {\n                if (Player.PlayerReplicationInfo.Score>HighKillPlayer.PlayerReplicationInfo.Score)\n                    {\n                        HighKillPlayer=Player;\n                    }\n            }\n            else\n                HighKillPlayer=Player;\n            havePlayer=true;\n        }\n    }\n}",
                        "locals": [
                            "local deusexplayer Player;"
                        ],
                        "modifiers": [],
                        "name": "GetHighKiller",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "GetHighStreaker": {
                        "body": "{\n    foreach allactors(class'deusexplayer',Player)\n    {\n        if (Player.PlayerReplicationInfo.Streak>0)\n        {\n            if (HighStreakPlayer!=None)\n            {\n                if (Player.PlayerReplicationInfo.Streak>HighStreakPlayer.PlayerReplicationInfo.Streak)\n                    {\n                        HighStreakPlayer=Player;\n                    }\n            }\n            else\n                HighStreakPlayer=Player;\n            havePlayer=true;\n        }\n    }\n}",
                        "locals": [
                            "local DeusExPlayer Player;"
                        ],
                        "modifiers": [],
                        "name": "GetHighStreaker",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "prebeginplay": {
                        "body": "{\n    log(\"+=================\",'Messager');\n    Log(\"|Starting the mutator...\",'Messager');\n    log(\"+=================\",'Messager');\n    Settimer(float(Delay),true);\n    oldDelay=Delay;\n\t\t\t\tforeach AllActors(class'IRCLink',IRC)\n\t\t\t\t{\n\t\t\t\t\tif(IRC != None)\n\t\t\t\t\t{\n\t\t\t\t\t\tmyIRC = IRC;\n\t\t\t\t\t\tLog(\"IRC link found.\",'Messager');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\tforeach AllActors(class'RCONStats',RStats)\n\t\t\t\t{\n\t\t\t\t\tif(RStats != None)\n\t\t\t\t\t{\n\t\t\t\t\t\tStats = RStats;\n\t\t\t\t\t\tLog(\"RCON STats found.\",'Messager');\n\t\t\t\t\t}\n\t\t\t\t}\n    super.PreBeginPlay();\n}",
                        "locals": [
                            "local IRCLink IRC;",
                            "local RCONStats RStats;"
                        ],
                        "modifiers": [],
                        "name": "prebeginplay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "tick": {
                        "body": "{\n    if (Delay!=oldDelay)\n    {\n        oldDelay=Delay;\n        settimer(Delay,true);\n    }\n    super.tick(v);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "v"
                            ]
                        ],
                        "return": ""
                    },
                    "timer": {
                        "body": "{\n    if (!MessageWhenNoPlayers && Level.Game.NumPlayers==0)\n        return;\n    for (n=0;n<30;n++)\n    {\n        if (Text[n]!=\"\")\n        {                     //this makes a database of all the text strings\n            Text_DB[n2]=Text[n];  //to use later on so we don't get empty messages\n            n2++;\n        }\n    }",
                        "locals": [
                            "local int n2;",
                            "local string Message;"
                        ],
                        "modifiers": [],
                        "name": "timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 494,
                "replication": "",
                "states": [],
                "variables": [
                    "var config MsgMode Mode;",
                    "var config string Text[30], NoHighStreaker, NoHighKiller, NoStreak, NoKills;",
                    "var config bool AddLogMessage, MessageWhenNoPlayers;",
                    "var string Text_DB[30], LastMessage;",
                    "var DeusExPlayer Player;",
                    "var config byte Delay;",
                    "var byte oldDelay;",
                    "var int i,n;",
                    "var deusexplayer HighKillPlayer, HighStreakPlayer;",
                    "var bool HavePlayer, NeedNewMessage;",
                    "var IRCLink myIRC;",
                    "var RCONStats Stats;"
                ]
            }
        },
        "rTimer.uc": {
            "body": "class rTimer extends RCONActors;\n\nvar int Start;\nvar bool bCountdown;\nvar int Cur;\nvar AthenaSpectator AS;\n\nfunction Timer()\n{\nlocal string formattedmin;\n\n\tif(bCountdown)\n\t{\n\t\tCur--;\n\t\t\n\t\tif(Cur <= 0)\n\t\t{\n\t\t\tDestroy();\n\t\t}\n\t}\n\telse\n\t{\n\t\tCur++;\n\t\tif(Cur <= 5 || cur == 10 || cur == 15 || cur == 20 || cur == 30 || cur == 40 || cur == 50 || cur == 60 || cur == 70 || cur == 80 || cur == 90)\n\t}\n}\n\ndefaultproperties\n{\n}\n",
            "name": "rTimer.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "RCONActors",
                "functions": {
                    "Timer": {
                        "body": "{\n\n\tif(bCountdown)\n\t{\n\t\tCur--;\n\t\t\n\t\tif(Cur <= 0)\n\t\t{\n\t\t\tDestroy();\n\t\t}\n\t}\n\telse\n\t{\n\t\tCur++;\n\t\tif(Cur <= 5 || cur == 10 || cur == 15 || cur == 20 || cur == 30 || cur == 40 || cur == 50 || cur == 60 || cur == 70 || cur == 80 || cur == 90)\n\t}\n}",
                        "locals": [
                            "local string formattedmin;"
                        ],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 31,
                "replication": "",
                "states": [],
                "variables": [
                    "var int Start;",
                    "var bool bCountdown;",
                    "var int Cur;",
                    "var AthenaSpectator AS;"
                ]
            }
        },
        "spec.uc": {
            "body": "//=============================================================================\n// Spectator.\n//=============================================================================\nclass Spec extends MessagingSpectator;\n\nvar IRCLink _IRC;\n\nfunction string RCR(string in)\n{\nlocal string TempMessage, TempLeft, TempRight, OutMessage, _TmpString;\n\tOutMessage=in;\n    while (instr(caps(outmessage), \"|P\") != -1)\n    {\n        tempRight=(right(OutMessage, (len(OutMessage)-instr(caps(OutMessage), \"|P\"))-3));\n        tempLeft=(left(OutMessage, instr(caps(OutMessage), \"|P\")) );\n        OutMessage=TempLeft$TempRight;\n    }\n\t\treturn OutMessage;\n}\n\nfunction string RCR2(string in)\n{\nlocal string TempMessage, TempLeft, TempRight, OutMessage, _TmpString;\n\tOutMessage=in;\n    while (instr(caps(outmessage), \"|C\") != -1)\n    {\n        tempRight=(right(OutMessage, (len(OutMessage)-instr(caps(OutMessage), \"|C\"))-8));\n        tempLeft=(left(OutMessage, instr(caps(OutMessage), \"|C\")) );\n        OutMessage=TempLeft$TempRight;\n    }\n\t\t\treturn OutMessage;\n}\n\nfunction ClientMessage(coerce string S, optional name Type, optional bool bBeep)\n{\nlocal int i;\nlocal string output;\nlocal string line, newnick,ss;\n\n\t\t/*\n\t\tif(inStr(caps(s), caps(\"|p\")) != -1)\n\t\t{\n\t\t\ti = InStr(caps(s), caps(\"|p\"));\n\t\t\twhile (i != -1) {\t\n\t\t\t\tOutput = Output $ Left(s, i) $ \"\";\n\t\t\t\ts = Mid(s, i + 3);\t\n\t\t\t\ti = InStr(caps(s), caps(\"|p\"));\n\t\t\t}\n\t\t\ts = Output $ s;\n\t\t}\n\t\t\t\n\t\tif(inStr(caps(s), caps(\"|C\")) != -1)\n\t\t{\n\t\t\ti = InStr(caps(s), caps(\"|C\"));\n\t\t\twhile (i != -1) {\t\n\t\t\t\tOutput = Output $ Left(s, i) $ \"\";\n\t\t\t\ts = Mid(s, i + 8);\t\n\t\t\t\ti = inStr(caps(s), caps(\"|C\"));\n\t\t\t}\n\t\t\ts = Output $ s;\n\t\t}*/\n\tss = RCR(s);\n\tss = RCR2(ss);\n\t\n\tif(_IRC.bClientMode)\n\t{\n\tif(Type == 'Say')\n\t{\n    Line = Right(ss, Len(s)-instr(ss,\"): \")-Len(\"): \"));\n\t newnick = Left(ss, InStr(ss,\"(\"));\n\t _IRC.SendCommand(\"NICK \"$newnick);\n\t  _IRC.SendMessage(Line);\n\t  return;\n\t  }\n\t}\n\t\n\tif(_IRC.iMode == 2)\n\t{\n\t\tif(Type == 'Say' || Type == 'TeamSay')\n\t\t{\n\t\t\t_IRC.SendMessage(sS);\n\t\t}\n\t}\n\telse\n\t{\n\t\t_IRC.SendMessage(sS);\n\t}\n}\n\ndefaultproperties\n{\n}\n",
            "name": "spec.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "MessagingSpectator",
                "functions": {
                    "ClientMessage": {
                        "body": "{\n\n\t\t/*\n\t\tif(inStr(caps(s), caps(\"|p\")) != -1)\n\t\t{\n\t\t\ti = InStr(caps(s), caps(\"|p\"));\n\t\t\twhile (i != -1) {\t\n\t\t\t\tOutput = Output $ Left(s, i) $ \"\";\n\t\t\t\ts = Mid(s, i + 3);\t\n\t\t\t\ti = InStr(caps(s), caps(\"|p\"));\n\t\t\t}\n\t\t\ts = Output $ s;\n\t\t}",
                        "locals": [
                            "local int i;",
                            "local string output;",
                            "local string line, newnick,ss;"
                        ],
                        "modifiers": [],
                        "name": "ClientMessage",
                        "native": false,
                        "param": [
                            [
                                "coerce",
                                "string",
                                "S"
                            ],
                            [
                                "optional",
                                "name",
                                "Type"
                            ],
                            [
                                "optional",
                                "bool",
                                "bBeep"
                            ]
                        ],
                        "return": ""
                    },
                    "RCR": {
                        "body": "{\n\tOutMessage=in;\n    while (instr(caps(outmessage), \"|P\") != -1)\n    {\n        tempRight=(right(OutMessage, (len(OutMessage)-instr(caps(OutMessage), \"|P\"))-3));\n        tempLeft=(left(OutMessage, instr(caps(OutMessage), \"|P\")) );\n        OutMessage=TempLeft$TempRight;\n    }\n\t\treturn OutMessage;\n}",
                        "locals": [
                            "local string TempMessage, TempLeft, TempRight, OutMessage, _TmpString;"
                        ],
                        "modifiers": [],
                        "name": "RCR",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "in"
                            ]
                        ],
                        "return": "string"
                    },
                    "RCR2": {
                        "body": "{\n\tOutMessage=in;\n    while (instr(caps(outmessage), \"|C\") != -1)\n    {\n        tempRight=(right(OutMessage, (len(OutMessage)-instr(caps(OutMessage), \"|C\"))-8));\n        tempLeft=(left(OutMessage, instr(caps(OutMessage), \"|C\")) );\n        OutMessage=TempLeft$TempRight;\n    }\n\t\t\treturn OutMessage;\n}",
                        "locals": [
                            "local string TempMessage, TempLeft, TempRight, OutMessage, _TmpString;"
                        ],
                        "modifiers": [],
                        "name": "RCR2",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "in"
                            ]
                        ],
                        "return": "string"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 93,
                "replication": "",
                "states": [],
                "variables": [
                    "var IRCLink _IRC;"
                ]
            }
        }
    },
    "models": {},
    "sounds": {},
    "textures": {}
}