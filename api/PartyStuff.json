{
    "classes": {
        "ACShard.uc": {
            "body": "class ACShard extends CraftingMaterial;\n\ndefaultproperties\n{\n     DecoResult=Class'PartyStuff.acrate'\n     NumNeeded=5\n     DispStr=\"Requires 5x to make Ammo Crate\"\n     ItemName=\"Ammo Crate shard\"\n     beltDescription=\"AC\"\n}\n",
            "name": "ACShard.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "DecoResult=Class'PartyStuff.acrate'",
                    "NumNeeded=5",
                    "DispStr=\"Requires 5x to make Ammo Crate\"",
                    "ItemName=\"Ammo Crate shard\"",
                    "beltDescription=\"AC\""
                ],
                "exec": [],
                "extends": "CraftingMaterial",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 11,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "AdminArmour.uc": {
            "body": "//=============================================================================\n// AdaptiveArmor.\n//=============================================================================\nclass AdminArmour extends DeusExPickup;\n#exec OBJ LOAD FILE=\"..\\Textures\\Extras.utx\"\nvar() bool bAAOn;\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\ndefaultproperties\n{\n     bAAOn=True\n     ItemName=\"Admin Armour\"\n     ItemArticle=\"some\"\n     PlayerViewOffset=(X=30.000000,Z=-12.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.AdaptiveArmor'\n     PickupViewMesh=LodMesh'DeusExItems.AdaptiveArmor'\n     ThirdPersonMesh=LodMesh'DeusExItems.AdaptiveArmor'\n     Charge=500\n     LandSound=Sound'DeusExSounds.Generic.PaperHit2'\n     Icon=Texture'DeusExUI.Icons.BeltIconArmorAdaptive'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconArmorAdaptive'\n     largeIconWidth=35\n     largeIconHeight=49\n     Description=\"Integrating woven fiber-optics and an advanced computing system, thermoptic camo can render an agent invisible to both humans and bots by dynamically refracting light and radar waves; however, the high power drain makes it impractial for more than short-term use, after which the circuitry is fused and it becomes useless.\"\n     beltDescription=\"ADMIN\"\n     Mesh=LodMesh'DeusExItems.AdaptiveArmor'\n     MultiSkins(1)=Texture'Extras.Eggs.Matrix_A00'\n     CollisionRadius=11.500000\n     CollisionHeight=13.810000\n     Mass=30.000000\n     Buoyancy=20.000000\n}\n",
            "name": "AdminArmour.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bAAOn=True",
                    "ItemName=\"Admin Armour\"",
                    "ItemArticle=\"some\"",
                    "PlayerViewOffset=(X=30.000000,Z=-12.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.AdaptiveArmor'",
                    "PickupViewMesh=LodMesh'DeusExItems.AdaptiveArmor'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.AdaptiveArmor'",
                    "Charge=500",
                    "LandSound=Sound'DeusExSounds.Generic.PaperHit2'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconArmorAdaptive'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconArmorAdaptive'",
                    "largeIconWidth=35",
                    "largeIconHeight=49",
                    "Description=\"Integrating woven fiber-optics and an advanced computing system, thermoptic camo can render an agent invisible to both humans and bots by dynamically refracting light and radar waves; however, the high power drain makes it impractial for more than short-term use, after which the circuitry is fused and it becomes useless.\"",
                    "beltDescription=\"ADMIN\"",
                    "Mesh=LodMesh'DeusExItems.AdaptiveArmor'",
                    "MultiSkins(1)=Texture'Extras.Eggs.Matrix_A00'",
                    "CollisionRadius=11.500000",
                    "CollisionHeight=13.810000",
                    "Mass=30.000000",
                    "Buoyancy=20.000000"
                ],
                "exec": [
                    "#exec OBJ LOAD FILE=\"..\\Textures\\Extras.utx\""
                ],
                "extends": "DeusExPickup",
                "functions": {
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 36,
                "replication": "",
                "states": [],
                "variables": [
                    "var() bool bAAOn;"
                ]
            }
        },
        "AdminCard.uc": {
            "body": "//=============================================================================\n// AdminCard.\n//=============================================================================\nclass AdminCard expands DeusExPickup;\n\n// ----------------------------------------------------------------------\n// TestMPBeltSpot()\n// Returns true if the suggested belt location is ok for the object in mp.\n// ----------------------------------------------------------------------\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\ndefaultproperties\n{\n     bCanHaveMultipleCopies=True\n     ItemName=\"Admin Pass\"\n     PlayerViewOffset=(X=30.000000,Z=-12.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.Credits'\n     PickupViewMesh=LodMesh'DeusExItems.Credits'\n     ThirdPersonMesh=LodMesh'DeusExItems.Credits'\n     LandSound=Sound'DeusExSounds.Generic.PlasticHit1'\n     Icon=Texture'DeusExUI.Icons.BeltIconCredits'\n     beltDescription=\"Admin Pass\"\n     Mesh=LodMesh'DeusExItems.Credits'\n     MultiSkins(0)=Texture'DeusExUI.UserInterface.ComputerLogonLogoIlluminati'\n     CollisionRadius=7.000000\n     CollisionHeight=0.550000\n     Mass=2.000000\n     Buoyancy=3.000000\n}\n",
            "name": "AdminCard.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bCanHaveMultipleCopies=True",
                    "ItemName=\"Admin Pass\"",
                    "PlayerViewOffset=(X=30.000000,Z=-12.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.Credits'",
                    "PickupViewMesh=LodMesh'DeusExItems.Credits'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.Credits'",
                    "LandSound=Sound'DeusExSounds.Generic.PlasticHit1'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconCredits'",
                    "beltDescription=\"Admin Pass\"",
                    "Mesh=LodMesh'DeusExItems.Credits'",
                    "MultiSkins(0)=Texture'DeusExUI.UserInterface.ComputerLogonLogoIlluminati'",
                    "CollisionRadius=7.000000",
                    "CollisionHeight=0.550000",
                    "Mass=2.000000",
                    "Buoyancy=3.000000"
                ],
                "exec": [],
                "extends": "DeusExPickup",
                "functions": {
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 34,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "AlarmLight2.uc": {
            "body": "//=============================================================================\n// AlarmLight.\n//=============================================================================\nclass AlarmLight2 extends AlarmLight;\n\nfunction Trigger(Actor Other, Pawn Instigator)\n{\n\tif (!bIsOn)\n\t{\n\t\tbIsOn = True;\n\t\tSetLightColor(SkinColor);\n\t\tLightType = LT_Steady;\n\t\tbFixedRotationDir = True;\n\t}\n\telse\n\t{\n\t\tbIsOn = False;\n\t\tMultiSkins[1] = Texture'BlackMaskTex';\n\t\tLightType = LT_None;\n\t\tbFixedRotationDir = False;\n\t}\n\tSuper.Trigger(Other, Instigator);\n}\n\n// if we are untriggered, turn us off\nfunction UnTrigger(Actor Other, Pawn Instigator)\n{\n\tif (bIsOn)\n\t{\n\t\tbIsOn = False;\n\t\tMultiSkins[1] = Texture'BlackMaskTex';\n\t\tLightType = LT_None;\n\t\tbFixedRotationDir = False;\n\t}\n\n\tSuper.UnTrigger(Other, Instigator);\n}\n\ndefaultproperties\n{\n}\n",
            "name": "AlarmLight2.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "AlarmLight",
                "functions": {
                    "Trigger": {
                        "body": "{\n\tif (!bIsOn)\n\t{\n\t\tbIsOn = True;\n\t\tSetLightColor(SkinColor);\n\t\tLightType = LT_Steady;\n\t\tbFixedRotationDir = True;\n\t}\n\telse\n\t{\n\t\tbIsOn = False;\n\t\tMultiSkins[1] = Texture'BlackMaskTex';\n\t\tLightType = LT_None;\n\t\tbFixedRotationDir = False;\n\t}\n\tSuper.Trigger(Other, Instigator);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Trigger",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Other"
                            ],
                            [
                                "Pawn",
                                "Instigator"
                            ]
                        ],
                        "return": ""
                    },
                    "UnTrigger": {
                        "body": "{\n\tif (bIsOn)\n\t{\n\t\tbIsOn = False;\n\t\tMultiSkins[1] = Texture'BlackMaskTex';\n\t\tLightType = LT_None;\n\t\tbFixedRotationDir = False;\n\t}\n\n\tSuper.UnTrigger(Other, Instigator);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "UnTrigger",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Other"
                            ],
                            [
                                "Pawn",
                                "Instigator"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 42,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "AlarmUnit2.uc": {
            "body": "//=============================================================================\n// AlarmUnit.\n//=============================================================================\nclass AlarmUnit2 extends DeusExDecoration;\n\n#exec OBJ LOAD FILE=Ambient\nvar bool bActive;\nvar float alarmTimeout;\nvar DeusExplayer myIns;\nvar() name AUGroup;\nvar() string AlarmPanelIdent;\nvar bool bTimedOut;\n\nvar() bool bUseMannequinSecurity;\nvar() name MannequinTag; \nfunction Tick(float deltaTime)\n{\n\tSuper.Tick(deltaTime);\n\n\tTag = AUGroup;\n\t\n\tif (!bActive)\n\t\treturn;\n\n\t\t// flash the light and texture\n\t\tif ((Level.TimeSeconds % 0.5) > 0.25)\n\t\t{\n\t\t\tLightType = LT_Steady;\n\t\t\tMultiSkins[1] = Texture'AlarmUnitTex2';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tLightType = LT_None;\n\t\t\tMultiSkins[1] = Texture'PinkMaskTex';\n\t\t}\n}\n\nfunction Frob(Actor Frobber, Inventory frobWith)\n{\nlocal AlarmUnit2 AU;\n\n\tif(!bTimedOut)\n\t{\n\t\tPGTrigger(DeusExPlayer(Frobber));\n\t\tif(bActive)\n\t\t{\n\t\t\tBroadcastMessage(\"|P2\"$DeusExPlayer(Frobber).PlayerReplicationinfo.PlayerName$\" triggered alarm! (\"$AUGroup$\")\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tBroadcastMessage(\"|P2\"$DeusExPlayer(Frobber).PlayerReplicationinfo.PlayerName$\" deactivated alarm! (\"$AUGroup$\")\");\n\t\t}\n\t\t\n\t\tforeach AllActors(class'AlarmUnit2',AU)\n\t\t{\n\t\t\tif(AU.Tag == Tag && AU != Self)\n\t\t\t{\n\t\t\t\tAU.PGTrigger(DeusExPlayer(Frobber));\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction DoTriggers(playerpawn triginst, bool bOn)\n{\n\tlocal Actor A;\n\t//local Mannequin Man;\n\t//local LivingMannequin LivMan;\n\tif(Event != '' && Event != 'None')\n\t\tforeach AllActors(class'Actor', a)\n\t\t\tif(A.Tag == Event)\n\t\t\t\tA.Trigger(Self, triginst);\n\t\t\t\n\t/*if(bOn && bUseMannequinSecurity)\n\t{\n\t\tforeach Allactors(class'Mannequin', Man)\n\t\t\tif(Man.Tag == MannequinTag)\n\t\t\t\tMan.GiveLife();\n\t}\n\t\n\tif(!bOn && bUseMannequinSecurity)\n\t{\n\t\tforeach AllActors(class'LivingMannequin', LivMan)\n\t\t\tif(LivMan.Tag == MannequinTag)\n\t\t\t\tLivMan.goToState('Dying');\n\t}*/\n}\n\nfunction PGTrigger(deusexplayer Inst)\n{\n\tif (!bActive)\n\t{\n\t\tDoTriggers(inst,True);\n\t\tbActive = True;\n\t\tAmbientSound = Sound'Klaxon4';\n\t\tSoundRadius = 64;\n\t\tSoundVolume = 128;\n\t\tLightType = LT_Steady;\n\t\tMultiSkins[1] = Texture'AlarmUnitTex2';\n\t\tSetTimer(AlarmTimeout,False);\n\t\tmyIns = Inst;\n\t\treturn;\n\t}\n\t\n\tif (bActive)\n\t{\n\t\tDoTriggers(inst,False);\n\t\tbActive = False;\n\t\tAmbientSound = Default.AmbientSound;\n\t\tSoundRadius = 16;\n\t\tSoundVolume = 192;\n\t\tLightType = LT_None;\n\t\tMultiSkins[1] = Texture'PinkMaskTex';\n\t\t\tbTimedOut=True;\n\t\t\tSetTimer(10,False);\n\t\treturn;\n\t}\n}\n\nfunction Timer()\n{\n\tif(bTimedOut)\n\t{\n\t\tbTimedOut=False;\n\t}\n\t\n\tif (bActive)\n\t{\n\t\tbActive = False;\n\t\tDoTriggers(None, False);\n\t\tAmbientSound = Default.AmbientSound;\n\t\tSoundRadius = 16;\n\t\tSoundVolume = 192;\n\t\tLightType = LT_None;\n\t\tMultiSkins[1] = Texture'PinkMaskTex';\n\t\tBroadcastMessage(\"Alarm\"@AUGroup@\"timed out.\");\n\t}\n}\n\ndefaultproperties\n{\n     alarmTimeout=60.000000\n     AUGroup=Default\n     bInvincible=True\n     ItemName=\"Alarm Network Panel [X]\"\n     bPushable=False\n     Mesh=LodMesh'DeusExDeco.AlarmUnit'\n     MultiSkins(1)=Texture'DeusExItems.Skins.PinkMaskTex'\n     SoundRadius=56\n     SoundVolume=192\n     AmbientSound=Sound'DeusExSounds.Generic.AlarmUnitHum'\n     CollisionRadius=9.720000\n     CollisionHeight=9.720000\n     LightBrightness=255\n     LightRadius=1\n     Mass=10.000000\n     Buoyancy=5.000000\n}\n",
            "name": "AlarmUnit2.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "alarmTimeout=60.000000",
                    "AUGroup=Default",
                    "bInvincible=True",
                    "ItemName=\"Alarm Network Panel [X]\"",
                    "bPushable=False",
                    "Mesh=LodMesh'DeusExDeco.AlarmUnit'",
                    "MultiSkins(1)=Texture'DeusExItems.Skins.PinkMaskTex'",
                    "SoundRadius=56",
                    "SoundVolume=192",
                    "AmbientSound=Sound'DeusExSounds.Generic.AlarmUnitHum'",
                    "CollisionRadius=9.720000",
                    "CollisionHeight=9.720000",
                    "LightBrightness=255",
                    "LightRadius=1",
                    "Mass=10.000000",
                    "Buoyancy=5.000000"
                ],
                "exec": [
                    "#exec OBJ LOAD FILE=Ambient"
                ],
                "extends": "DeusExDecoration",
                "functions": {
                    "DoTriggers": {
                        "body": "{\n\t//local Mannequin Man;\n\t//local LivingMannequin LivMan;\n\tif(Event != '' && Event != 'None')\n\t\tforeach AllActors(class'Actor', a)\n\t\t\tif(A.Tag == Event)\n\t\t\t\tA.Trigger(Self, triginst);\n\t\t\t\n\t/*if(bOn && bUseMannequinSecurity)\n\t{\n\t\tforeach Allactors(class'Mannequin', Man)\n\t\t\tif(Man.Tag == MannequinTag)\n\t\t\t\tMan.GiveLife();\n\t}\n\t\n\tif(!bOn && bUseMannequinSecurity)\n\t{\n\t\tforeach AllActors(class'LivingMannequin', LivMan)\n\t\t\tif(LivMan.Tag == MannequinTag)\n\t\t\t\tLivMan.goToState('Dying');\n\t}*/\n}",
                        "locals": [
                            "local Actor A;"
                        ],
                        "modifiers": [],
                        "name": "DoTriggers",
                        "native": false,
                        "param": [
                            [
                                "playerpawn",
                                "triginst"
                            ],
                            [
                                "bool",
                                "bOn"
                            ]
                        ],
                        "return": ""
                    },
                    "Frob": {
                        "body": "{\n\n\tif(!bTimedOut)\n\t{\n\t\tPGTrigger(DeusExPlayer(Frobber));\n\t\tif(bActive)\n\t\t{\n\t\t\tBroadcastMessage(\"|P2\"$DeusExPlayer(Frobber).PlayerReplicationinfo.PlayerName$\" triggered alarm! (\"$AUGroup$\")\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tBroadcastMessage(\"|P2\"$DeusExPlayer(Frobber).PlayerReplicationinfo.PlayerName$\" deactivated alarm! (\"$AUGroup$\")\");\n\t\t}\n\t\t\n\t\tforeach AllActors(class'AlarmUnit2',AU)\n\t\t{\n\t\t\tif(AU.Tag == Tag && AU != Self)\n\t\t\t{\n\t\t\t\tAU.PGTrigger(DeusExPlayer(Frobber));\n\t\t\t}\n\t\t}\n\t}\n}",
                        "locals": [
                            "local AlarmUnit2 AU;"
                        ],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    },
                    "PGTrigger": {
                        "body": "{\n\tif (!bActive)\n\t{\n\t\tDoTriggers(inst,True);\n\t\tbActive = True;\n\t\tAmbientSound = Sound'Klaxon4';\n\t\tSoundRadius = 64;\n\t\tSoundVolume = 128;\n\t\tLightType = LT_Steady;\n\t\tMultiSkins[1] = Texture'AlarmUnitTex2';\n\t\tSetTimer(AlarmTimeout,False);\n\t\tmyIns = Inst;\n\t\treturn;\n\t}\n\t\n\tif (bActive)\n\t{\n\t\tDoTriggers(inst,False);\n\t\tbActive = False;\n\t\tAmbientSound = Default.AmbientSound;\n\t\tSoundRadius = 16;\n\t\tSoundVolume = 192;\n\t\tLightType = LT_None;\n\t\tMultiSkins[1] = Texture'PinkMaskTex';\n\t\t\tbTimedOut=True;\n\t\t\tSetTimer(10,False);\n\t\treturn;\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PGTrigger",
                        "native": false,
                        "param": [
                            [
                                "deusexplayer",
                                "Inst"
                            ]
                        ],
                        "return": ""
                    },
                    "Tick": {
                        "body": "{\n\tSuper.Tick(deltaTime);\n\n\tTag = AUGroup;\n\t\n\tif (!bActive)\n\t\treturn;\n\n\t\t// flash the light and texture\n\t\tif ((Level.TimeSeconds % 0.5) > 0.25)\n\t\t{\n\t\t\tLightType = LT_Steady;\n\t\t\tMultiSkins[1] = Texture'AlarmUnitTex2';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tLightType = LT_None;\n\t\t\tMultiSkins[1] = Texture'PinkMaskTex';\n\t\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltaTime"
                            ]
                        ],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\tif(bTimedOut)\n\t{\n\t\tbTimedOut=False;\n\t}\n\t\n\tif (bActive)\n\t{\n\t\tbActive = False;\n\t\tDoTriggers(None, False);\n\t\tAmbientSound = Default.AmbientSound;\n\t\tSoundRadius = 16;\n\t\tSoundVolume = 192;\n\t\tLightType = LT_None;\n\t\tMultiSkins[1] = Texture'PinkMaskTex';\n\t\tBroadcastMessage(\"Alarm\"@AUGroup@\"timed out.\");\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 159,
                "replication": "",
                "states": [],
                "variables": [
                    "var bool bActive;",
                    "var float alarmTimeout;",
                    "var DeusExplayer myIns;",
                    "var() name AUGroup;",
                    "var() string AlarmPanelIdent;",
                    "var bool bTimedOut;",
                    "var() bool bUseMannequinSecurity;",
                    "var() name MannequinTag;"
                ]
            }
        },
        "AllySpawnPoint.uc": {
            "body": "class AllySpawnPoint extends Actor;\n\nvar() string AllyGroup;\nvar DXScriptedPawn SpawnedAlly;\nvar() int Cooldown;\nvar bool bCooling;\n\nfunction Timer()\n{\n\tbCooling=False;\n}\n\ndefaultproperties\n{\n     Cooldown=255\n     bHidden=True\n}\n",
            "name": "AllySpawnPoint.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "Cooldown=255",
                    "bHidden=True"
                ],
                "exec": [],
                "extends": "Actor",
                "functions": {
                    "Timer": {
                        "body": "{\n\tbCooling=False;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 18,
                "replication": "",
                "states": [],
                "variables": [
                    "var() string AllyGroup;",
                    "var DXScriptedPawn SpawnedAlly;",
                    "var() int Cooldown;",
                    "var bool bCooling;"
                ]
            }
        },
        "AmmoClaymore.uc": {
            "body": "//=============================================================================\n// AmmoTripB.\n//=============================================================================\nclass AmmoClaymore extends DeusExAmmo;\n\ndefaultproperties\n{\n     AmmoAmount=6\n     MaxAmmo=6\n     PickupViewMesh=LodMesh'DeusExItems.TestBox'\n     Icon=Texture'DeusExUI.Icons.BeltIconLAM'\n     beltDescription=\"CLAY\"\n     Mesh=LodMesh'DeusExItems.TestBox'\n     CollisionRadius=22.500000\n     CollisionHeight=16.000000\n     bCollideActors=True\n}\n",
            "name": "AmmoClaymore.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "AmmoAmount=6",
                    "MaxAmmo=6",
                    "PickupViewMesh=LodMesh'DeusExItems.TestBox'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconLAM'",
                    "beltDescription=\"CLAY\"",
                    "Mesh=LodMesh'DeusExItems.TestBox'",
                    "CollisionRadius=22.500000",
                    "CollisionHeight=16.000000",
                    "bCollideActors=True"
                ],
                "exec": [],
                "extends": "DeusExAmmo",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 18,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "AmmoCredits.uc": {
            "body": "//========================================\n// Ammocredits - special type for card\n//========================================\nClass AmmoCredits extends AmmoNapalm;\n\ndefaultproperties\n{\n     AmmoAmount=100000\n     MaxAmmo=1000000\n     ItemName=\"Credits\"\n     ItemArticle=\"some\"\n     PickupViewMesh=LodMesh'DeusExItems.Credits'\n     Icon=Texture'DeusExUI.Icons.BeltIconCredits'\n     largeIcon=Texture'DeusExUI.Icons.BeltIconCredits'\n     beltDescription=\"Credits\"\n     Mesh=LodMesh'DeusExItems.Credits'\n     CollisionHeight=4.480000\n}\n",
            "name": "AmmoCredits.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "AmmoAmount=100000",
                    "MaxAmmo=1000000",
                    "ItemName=\"Credits\"",
                    "ItemArticle=\"some\"",
                    "PickupViewMesh=LodMesh'DeusExItems.Credits'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconCredits'",
                    "largeIcon=Texture'DeusExUI.Icons.BeltIconCredits'",
                    "beltDescription=\"Credits\"",
                    "Mesh=LodMesh'DeusExItems.Credits'",
                    "CollisionHeight=4.480000"
                ],
                "exec": [],
                "extends": "AmmoNapalm",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 19,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "AmmoDG.uc": {
            "body": "class AmmoDG expands DeusExAmmo;\n\ndefaultproperties\n{\n     AmmoAmount=2\n     MaxAmmo=5\n     ItemName=\"DG\"\n     Description=\"It'll lite\"\n     beltDescription=\"DG\"\n}\n",
            "name": "AmmoDG.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "AmmoAmount=2",
                    "MaxAmmo=5",
                    "ItemName=\"DG\"",
                    "Description=\"It'll lite\"",
                    "beltDescription=\"DG\""
                ],
                "exec": [],
                "extends": "DeusExAmmo",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 11,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "AmmoDrone.uc": {
            "body": "//========================================\n// Ammo, special for the drone system\n//========================================\nClass AmmoDrone extends AmmoNapalm;\n\ndefaultproperties\n{\n     AmmoAmount=100000\n     MaxAmmo=1000000\n     ItemName=\"Drone Rockets\"\n     ItemArticle=\"some\"\n     PickupViewMesh=LodMesh'DeusExItems.Credits'\n     Icon=Texture'DeusExUI.Icons.BeltIconCredits'\n     largeIcon=Texture'DeusExUI.Icons.BeltIconCredits'\n     beltDescription=\"Rockets\"\n     Mesh=LodMesh'DeusExItems.Credits'\n     CollisionHeight=4.480000\n}\n",
            "name": "AmmoDrone.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "AmmoAmount=100000",
                    "MaxAmmo=1000000",
                    "ItemName=\"Drone Rockets\"",
                    "ItemArticle=\"some\"",
                    "PickupViewMesh=LodMesh'DeusExItems.Credits'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconCredits'",
                    "largeIcon=Texture'DeusExUI.Icons.BeltIconCredits'",
                    "beltDescription=\"Rockets\"",
                    "Mesh=LodMesh'DeusExItems.Credits'",
                    "CollisionHeight=4.480000"
                ],
                "exec": [],
                "extends": "AmmoNapalm",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 19,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "AmmoFlashBang.uc": {
            "body": "class AmmoFlashBang expands DeusExAmmo;\n\ndefaultproperties\n{\n     AmmoAmount=2\n     MaxAmmo=10\n     ItemName=\"Flash Bangs\"\n     beltDescription=\"F-Bangs\"\n}\n",
            "name": "AmmoFlashBang.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "AmmoAmount=2",
                    "MaxAmmo=10",
                    "ItemName=\"Flash Bangs\"",
                    "beltDescription=\"F-Bangs\""
                ],
                "exec": [],
                "extends": "DeusExAmmo",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 10,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "AmmoFreezeGrenade.uc": {
            "body": "class AmmoFreezeGrenade expands DeusExAmmo;\n\ndefaultproperties\n{\n     AmmoAmount=2\n     MaxAmmo=10\n     ItemName=\"FreezeGrenade\"\n     beltDescription=\"ICER\"\n}\n",
            "name": "AmmoFreezeGrenade.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "AmmoAmount=2",
                    "MaxAmmo=10",
                    "ItemName=\"FreezeGrenade\"",
                    "beltDescription=\"ICER\""
                ],
                "exec": [],
                "extends": "DeusExAmmo",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 10,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "AmmoKB.uc": {
            "body": "class AmmoKB expands DeusExAmmo;\n\ndefaultproperties\n{\n     AmmoAmount=2\n     MaxAmmo=5\n     ItemName=\"Knife Grenades\"\n     Description=\"It'll shred\"\n     beltDescription=\"KB\"\n}\n",
            "name": "AmmoKB.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "AmmoAmount=2",
                    "MaxAmmo=5",
                    "ItemName=\"Knife Grenades\"",
                    "Description=\"It'll shred\"",
                    "beltDescription=\"KB\""
                ],
                "exec": [],
                "extends": "DeusExAmmo",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 11,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "AmmoLS.uc": {
            "body": "class AmmoLS expands DeusExAmmo;\n\ndefaultproperties\n{\n     AmmoAmount=2\n     MaxAmmo=5\n     ItemName=\"Lightshows\"\n     Description=\"It'll lite\"\n     beltDescription=\"LS\"\n}\n",
            "name": "AmmoLS.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "AmmoAmount=2",
                    "MaxAmmo=5",
                    "ItemName=\"Lightshows\"",
                    "Description=\"It'll lite\"",
                    "beltDescription=\"LS\""
                ],
                "exec": [],
                "extends": "DeusExAmmo",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 11,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "AmmoNails.uc": {
            "body": "//=============================================================================\n// AmmoNails.   (C) 101 Street Killers\n//=============================================================================\nclass AmmoNails extends DeusExAmmo;\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n      AmmoAmount = 6;\n}\n\ndefaultproperties\n{\n     bShowInfo=True\n     AmmoAmount=15\n     MaxAmmo=50\n     ItemName=\"Nails\"\n     ItemArticle=\"some\"\n     PickupViewMesh=LodMesh'DeusExItems.AmmoDart'\n     LandSound=Sound'DeusExSounds.Generic.PaperHit2'\n     Icon=Texture'DeusExUI.Icons.BeltIconAmmoDartsNormal'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconAmmoDartsNormal'\n     largeIconWidth=20\n     largeIconHeight=47\n     Description=\"Specialy designed nails.Designed to pierce flesh more than wood!\"\n     beltDescription=\"NAILS\"\n     Mesh=LodMesh'DeusExItems.AmmoDart'\n     CollisionRadius=8.500000\n     CollisionHeight=2.000000\n     bCollideActors=True\n}\n",
            "name": "AmmoNails.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bShowInfo=True",
                    "AmmoAmount=15",
                    "MaxAmmo=50",
                    "ItemName=\"Nails\"",
                    "ItemArticle=\"some\"",
                    "PickupViewMesh=LodMesh'DeusExItems.AmmoDart'",
                    "LandSound=Sound'DeusExSounds.Generic.PaperHit2'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconAmmoDartsNormal'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconAmmoDartsNormal'",
                    "largeIconWidth=20",
                    "largeIconHeight=47",
                    "Description=\"Specialy designed nails.Designed to pierce flesh more than wood!\"",
                    "beltDescription=\"NAILS\"",
                    "Mesh=LodMesh'DeusExItems.AmmoDart'",
                    "CollisionRadius=8.500000",
                    "CollisionHeight=2.000000",
                    "bCollideActors=True"
                ],
                "exec": [],
                "extends": "DeusExAmmo",
                "functions": {
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n      AmmoAmount = 6;\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 35,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "AmmoNuclearBattery.uc": {
            "body": "//=============================================================================\n// AmmoNuclearBattery.  \n//=============================================================================\nclass AmmoNuclearBattery extends DeusExAmmo;\n\ndefaultproperties\n{\n     bShowInfo=True\n     AmmoAmount=25\n     MaxAmmo=50\n     ItemName=\"Nuclear Battery\"\n     ItemArticle=\"a\"\n     PickupViewMesh=LodMesh'DeusExItems.AmmoPlasma'\n     LandSound=Sound'DeusExSounds.Generic.PlasticHit2'\n     Icon=Texture'DeusExUI.Icons.BeltIconAmmoPlasma'\n     largeIconWidth=22\n     largeIconHeight=46\n     Description=\"A battery straight from 101 labs.It contains enough energy to keep the city of chicago running for 2 hours!\"\n     beltDescription=\"|p5NBATT\"\n     Mesh=LodMesh'DeusExItems.AmmoPlasma'\n     CollisionRadius=4.300000\n     CollisionHeight=8.440000\n     bCollideActors=True\n}\n",
            "name": "AmmoNuclearBattery.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bShowInfo=True",
                    "AmmoAmount=25",
                    "MaxAmmo=50",
                    "ItemName=\"Nuclear Battery\"",
                    "ItemArticle=\"a\"",
                    "PickupViewMesh=LodMesh'DeusExItems.AmmoPlasma'",
                    "LandSound=Sound'DeusExSounds.Generic.PlasticHit2'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconAmmoPlasma'",
                    "largeIconWidth=22",
                    "largeIconHeight=46",
                    "Description=\"A battery straight from 101 labs.It contains enough energy to keep the city of chicago running for 2 hours!\"",
                    "beltDescription=\"|p5NBATT\"",
                    "Mesh=LodMesh'DeusExItems.AmmoPlasma'",
                    "CollisionRadius=4.300000",
                    "CollisionHeight=8.440000",
                    "bCollideActors=True"
                ],
                "exec": [],
                "extends": "DeusExAmmo",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 25,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "AmmoPoisonKnife.uc": {
            "body": "class AmmoPoisonKnife extends AmmoShuriken;\n\ndefaultproperties\n{\n     ItemName=\"Poisoned Throwing Knives\"\n}\n",
            "name": "AmmoPoisonKnife.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "ItemName=\"Poisoned Throwing Knives\""
                ],
                "exec": [],
                "extends": "AmmoShuriken",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 7,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "AmmoSkull.uc": {
            "body": "// AmmoSkull - by mouserpg@yahoo.com\n\nclass AmmoSkull extends DeusExAmmo;\n\ndefaultproperties\n{\n     bShowInfo=True\n     AmmoAmount=17\n     MaxAmmo=100\n     ItemName=\"Skull Clip\"\n     ItemArticle=\"a\"\n     PickupViewMesh=LodMesh'DeusExDeco.BoneSkull'\n     LandSound=Sound'DeusExSounds.Generic.PlasticHit2'\n     Icon=Texture'DeusExUI.Icons.BeltIconAmmoPlasma'\n     largeIconWidth=22\n     largeIconHeight=46\n     Description=\"A clip of Human Skulls, average sized Human Skulls that can be heated and delivered with a redundant devastating effect using the Skull Gun. My gun of choice -- Gunther Hermann\"\n     beltDescription=\"BONE\"\n     Mesh=LodMesh'DeusExDeco.BoneSkull'\n     CollisionRadius=4.300000\n     CollisionHeight=8.440000\n     bCollideActors=True\n}\n",
            "name": "AmmoSkull.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bShowInfo=True",
                    "AmmoAmount=17",
                    "MaxAmmo=100",
                    "ItemName=\"Skull Clip\"",
                    "ItemArticle=\"a\"",
                    "PickupViewMesh=LodMesh'DeusExDeco.BoneSkull'",
                    "LandSound=Sound'DeusExSounds.Generic.PlasticHit2'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconAmmoPlasma'",
                    "largeIconWidth=22",
                    "largeIconHeight=46",
                    "Description=\"A clip of Human Skulls, average sized Human Skulls that can be heated and delivered with a redundant devastating effect using the Skull Gun. My gun of choice -- Gunther Hermann\"",
                    "beltDescription=\"BONE\"",
                    "Mesh=LodMesh'DeusExDeco.BoneSkull'",
                    "CollisionRadius=4.300000",
                    "CollisionHeight=8.440000",
                    "bCollideActors=True"
                ],
                "exec": [],
                "extends": "DeusExAmmo",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 24,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "AmmoSlow.uc": {
            "body": "class AmmoSlow expands DeusExAmmo;\n\ndefaultproperties\n{\n     AmmoAmount=2\n     MaxAmmo=10\n     ItemName=\"Slow\"\n     beltDescription=\"Slow\"\n}\n",
            "name": "AmmoSlow.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "AmmoAmount=2",
                    "MaxAmmo=10",
                    "ItemName=\"Slow\"",
                    "beltDescription=\"Slow\""
                ],
                "exec": [],
                "extends": "DeusExAmmo",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 10,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "AmmoSmokeGrenade.uc": {
            "body": "//=============================================================================\n// AmmoSmokeGrenade - by Deadalus08.\n//=============================================================================\nclass AmmoSmokeGrenade extends DeusExAmmo;\n\ndefaultproperties\n{\n     AmmoAmount=1\n     MaxAmmo=10\n     PickupViewMesh=LodMesh'DeusExItems.TestBox'\n     Icon=Texture'DeusExUI.Icons.BeltIconGasGrenade'\n     beltDescription=\"SMOKE GREN\"\n     Mesh=LodMesh'DeusExItems.TestBox'\n     CollisionRadius=22.500000\n     CollisionHeight=16.000000\n     bCollideActors=True\n}\n",
            "name": "AmmoSmokeGrenade.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "AmmoAmount=1",
                    "MaxAmmo=10",
                    "PickupViewMesh=LodMesh'DeusExItems.TestBox'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconGasGrenade'",
                    "beltDescription=\"SMOKE GREN\"",
                    "Mesh=LodMesh'DeusExItems.TestBox'",
                    "CollisionRadius=22.500000",
                    "CollisionHeight=16.000000",
                    "bCollideActors=True"
                ],
                "exec": [],
                "extends": "DeusExAmmo",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 18,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "AmmoSpazmGas.uc": {
            "body": "//=============================================================================\n// AmmoSpazmGas.\n//=============================================================================\nclass AmmoSpazmGas expands DeusExAmmo;\n\ndefaultproperties\n{\n     AmmoAmount=100\n     MaxAmmo=500\n     ItemName=\"Spazm Gas Ammo\"\n     ItemArticle=\"some\"\n     PickupViewMesh=LodMesh'DeusExItems.AmmoPepper'\n     Description=\"These cartriges contain gas that disturbs he natural brain's electric impulses, effectivly giving the target a seizure.\"\n     Mesh=LodMesh'DeusExItems.AmmoPepper'\n     CollisionRadius=3.000000\n     CollisionHeight=4.000000\n}\n",
            "name": "AmmoSpazmGas.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "AmmoAmount=100",
                    "MaxAmmo=500",
                    "ItemName=\"Spazm Gas Ammo\"",
                    "ItemArticle=\"some\"",
                    "PickupViewMesh=LodMesh'DeusExItems.AmmoPepper'",
                    "Description=\"These cartriges contain gas that disturbs he natural brain's electric impulses, effectivly giving the target a seizure.\"",
                    "Mesh=LodMesh'DeusExItems.AmmoPepper'",
                    "CollisionRadius=3.000000",
                    "CollisionHeight=4.000000"
                ],
                "exec": [],
                "extends": "DeusExAmmo",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 18,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "AmmoSpeed.uc": {
            "body": "class AmmoSpeed expands DeusExAmmo;\n\ndefaultproperties\n{\n     AmmoAmount=2\n     MaxAmmo=10\n     ItemName=\"Speed\"\n     beltDescription=\"Speed\"\n}\n",
            "name": "AmmoSpeed.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "AmmoAmount=2",
                    "MaxAmmo=10",
                    "ItemName=\"Speed\"",
                    "beltDescription=\"Speed\""
                ],
                "exec": [],
                "extends": "DeusExAmmo",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 10,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "AmmoTelefrag.uc": {
            "body": "class AmmoTelefrag expands DeusExAmmo;\n\ndefaultproperties\n{\n     AmmoAmount=2\n     MaxAmmo=5\n     ItemName=\"Telefrag Grenades\"\n     Description=\"It'll telefrag\"\n     beltDescription=\"T-FRAG\"\n}\n",
            "name": "AmmoTelefrag.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "AmmoAmount=2",
                    "MaxAmmo=5",
                    "ItemName=\"Telefrag Grenades\"",
                    "Description=\"It'll telefrag\"",
                    "beltDescription=\"T-FRAG\""
                ],
                "exec": [],
                "extends": "DeusExAmmo",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 11,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "AmmoTripB.uc": {
            "body": "//=============================================================================\n// AmmoTripB.\n//=============================================================================\nclass AmmoTripB extends DeusExAmmo;\n\ndefaultproperties\n{\n     AmmoAmount=6\n     MaxAmmo=6\n     PickupViewMesh=LodMesh'DeusExItems.TestBox'\n     beltDescription=\"TripBomb\"\n     Mesh=LodMesh'DeusExItems.TestBox'\n     CollisionRadius=22.500000\n     CollisionHeight=16.000000\n     bCollideActors=True\n}\n",
            "name": "AmmoTripB.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "AmmoAmount=6",
                    "MaxAmmo=6",
                    "PickupViewMesh=LodMesh'DeusExItems.TestBox'",
                    "beltDescription=\"TripBomb\"",
                    "Mesh=LodMesh'DeusExItems.TestBox'",
                    "CollisionRadius=22.500000",
                    "CollisionHeight=16.000000",
                    "bCollideActors=True"
                ],
                "exec": [],
                "extends": "DeusExAmmo",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 17,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "AmmoTripBEMP.uc": {
            "body": "//=============================================================================\n// AmmoTripB.\n//=============================================================================\nclass AmmoTripBEMP extends DeusExAmmo;\n\ndefaultproperties\n{\n     AmmoAmount=6\n     MaxAmmo=6\n     PickupViewMesh=LodMesh'DeusExItems.TestBox'\n     beltDescription=\"TripBombEMP\"\n     Mesh=LodMesh'DeusExItems.TestBox'\n     CollisionRadius=22.500000\n     CollisionHeight=16.000000\n     bCollideActors=True\n}\n",
            "name": "AmmoTripBEMP.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "AmmoAmount=6",
                    "MaxAmmo=6",
                    "PickupViewMesh=LodMesh'DeusExItems.TestBox'",
                    "beltDescription=\"TripBombEMP\"",
                    "Mesh=LodMesh'DeusExItems.TestBox'",
                    "CollisionRadius=22.500000",
                    "CollisionHeight=16.000000",
                    "bCollideActors=True"
                ],
                "exec": [],
                "extends": "DeusExAmmo",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 17,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "AmmoTripBFire.uc": {
            "body": "//=============================================================================\n// AmmoTripB.\n//=============================================================================\nclass AmmoTripBFire extends DeusExAmmo;\n\ndefaultproperties\n{\n     AmmoAmount=6\n     MaxAmmo=6\n     PickupViewMesh=LodMesh'DeusExItems.TestBox'\n     beltDescription=\"TripBombFire\"\n     Mesh=LodMesh'DeusExItems.TestBox'\n     CollisionRadius=22.500000\n     CollisionHeight=16.000000\n     bCollideActors=True\n}\n",
            "name": "AmmoTripBFire.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "AmmoAmount=6",
                    "MaxAmmo=6",
                    "PickupViewMesh=LodMesh'DeusExItems.TestBox'",
                    "beltDescription=\"TripBombFire\"",
                    "Mesh=LodMesh'DeusExItems.TestBox'",
                    "CollisionRadius=22.500000",
                    "CollisionHeight=16.000000",
                    "bCollideActors=True"
                ],
                "exec": [],
                "extends": "DeusExAmmo",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 17,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "AmmoWPGrenade.uc": {
            "body": "class AmmoWPGrenade extends AmmoGasGrenade;\n\ndefaultproperties\n{\n     beltDescription=\"WP GREN\"\n}\n",
            "name": "AmmoWPGrenade.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "beltDescription=\"WP GREN\""
                ],
                "exec": [],
                "extends": "AmmoGasGrenade",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 7,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "ArmourShard.uc": {
            "body": "class ArmourShard extends CraftingMaterial;\n\ndefaultproperties\n{\n     InvResult=Class'PartyStuff.PowerArmour'\n     NumNeeded=5\n     DispStr=\"Requires 5x to make Power Armour\"\n     ItemName=\"Armour shard\"\n     beltDescription=\"ARM\"\n}\n",
            "name": "ArmourShard.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "InvResult=Class'PartyStuff.PowerArmour'",
                    "NumNeeded=5",
                    "DispStr=\"Requires 5x to make Power Armour\"",
                    "ItemName=\"Armour shard\"",
                    "beltDescription=\"ARM\""
                ],
                "exec": [],
                "extends": "CraftingMaterial",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 11,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "Augrist.uc": {
            "body": "//=============================================================================\n// Fly.\n//=============================================================================\nclass Augrist extends Animal;\n\nvar() int spell, lve, lvl;\n\nfunction Frob(Actor Frobber, Inventory frobWith) \n{\n\tlocal DeusExPlayer SP;\n\tlocal weaponaugrist ga;\n\tSP = DeusExPlayer(Frobber);\n\n\tif(SP != None)\n\t{\n\t\tGA=Spawn(class'WeaponAugrist', Self,, Location, Rotation);\n\t\tGA.spell = spell;\n\t\tGA.lve = lve;\n\t\tGA.lvl = lvl;\n\t\tGA.SpawnCopy(DeusExPlayer(Frobber));\n\t\tGA.Destroy();\n\t\tDestroy();\n\t}\n}\n\n\nfunction bool IsNearHome(vector position)\n{\n\tlocal bool bNear;\n\n\tbNear = true;\n\tif (bUseHome)\n\t\tif (VSize(HomeLoc-position) > HomeExtent)\n\t\t\tbNear = false;\n\n\treturn bNear;\n}\n\n\nfunction ReactToInjury(Pawn instigatedBy, Name damageType, EHitLocation hitPos) {}\n\nstate Wandering\n{\n\tevent HitWall(vector HitNormal, actor HitWall)\n\t{\n\t\tlocal rotator dir;\n\t\tlocal float   elasticity;\n\t\tlocal float   minVel, maxHVel;\n\t\tlocal vector  tempVect;\n\n\t\telasticity = 0.3;\n\t\tVelocity = elasticity*((Velocity dot HitNormal) * HitNormal * (-2.0) + Velocity);\n\t\tDesiredRotation = Rotation;\n\t}\n\n\tfunction Tick(float deltaTime)\n\t{\n\t\tSuper.Tick(deltatime);\n\t}\n\n\tfunction vector PickDirection()\n\t{\n\t\tlocal vector  dirVector;\n\t\tlocal rotator rot;\n\n\t\tif (!IsNearHome(Location))\n\t\t\tdirVector = Normal(homeLoc - Location)*AirSpeed*4;\n\t\telse\n\t\t\tdirVector = Velocity;\n\t\tdirVector += VRand()*AirSpeed*2;\n\t\tdirVector = Normal(dirVector);\n\t\trot = Rotator(dirVector);\n\t\tif (VSize(Velocity) < AirSpeed*0.5)\n\t\t{\n\t\t\tAcceleration = dirVector*AirSpeed;\n\t\t\tSetRotation(rot);\n\t\t}\n\t\treturn vector(rot)*200+Location;\n\t}\n\n\tfunction BeginState()\n\t{\n\t\tSuper.BeginState();\n\t\tBlockReactions();\n\t\tAcceleration = vector(Rotation)*AccelRate;\n\t}\n\nBegin:\n\tbBounce = True;\n\tdestPoint = None;\n\tMoveTo(Location+Vector(Rotation)*(CollisionRadius+5), 1);\n\nInit:\n\tbAcceptBump = false;\n\tTweenToWalking(0.15);\n\tWaitForLanding();\n\tFinishAnim();\n\nWander:\n\tPlayWalking();\n\nMoving:\n\tTurnTo(PickDirection());\n\tSleep(0.0);\n\tGoto('Moving');\n\nContinueWander:\nContinueFromDoor:\n\tPlayWalking();\n\tGoto('Wander');\n}\n\n\nfunction PlayWalking()\n{\n\tLoopAnimPivot('Still');\n}\nfunction TweenToWalking(float tweentime)\n{\n\tTweenAnimPivot('Still', tweentime);\n}\n\n\n\n// Approximately five million stubbed out functions...\nfunction PlayRunningAndFiring() {}\nfunction TweenToShoot(float tweentime) {}\nfunction PlayShoot() {}\nfunction TweenToAttack(float tweentime) {}\nfunction PlayAttack() {}\nfunction PlayPanicRunning() {}\nfunction PlaySittingDown() {}\nfunction PlaySitting() {}\nfunction PlayStandingUp() {}\nfunction PlayRubbingEyesStart() {}\nfunction PlayRubbingEyes() {}\nfunction PlayRubbingEyesEnd() {}\nfunction PlayStunned() {}\nfunction PlayFalling() {}\nfunction PlayLanded(float impactVel) {}\nfunction PlayDuck() {}\nfunction PlayRising() {}\nfunction PlayCrawling() {}\nfunction PlayPushing() {}\nfunction PlayFiring() {}\nfunction PlayTakingHit(EHitLocation hitPos) {}\n\nfunction PlayTurning() {}\nfunction TweenToRunning(float tweentime) {}\nfunction PlayRunning() {}\nfunction TweenToWaiting(float tweentime) {}\nfunction PlayWaiting() {}\nfunction TweenToSwimming(float tweentime) {}\nfunction PlaySwimming() {}\n\ndefaultproperties\n{\n     WalkingSpeed=1.000000\n     bInvincible=True\n     bHasShadow=False\n     bHighlight=False\n     bSpawnBubbles=False\n     bCanFly=True\n     GroundSpeed=100.000000\n     WaterSpeed=100.000000\n     AirSpeed=100.000000\n     AccelRate=500.000000\n     JumpZ=0.000000\n     MaxStepHeight=1.000000\n     MinHitWall=0.000000\n     BaseEyeHeight=1.000000\n     Health=1\n     UnderWaterTime=20.000000\n     bTransient=True\n     Mesh=LodMesh'DeusExItems.NanoSwordPickup'\n     MultiSkins(1)=Texture'DeusExItems.Skins.PinkMaskTex'\n     MultiSkins(2)=Texture'DeusExItems.Skins.PinkMaskTex'\n     MultiSkins(6)=Texture'DeusExItems.Skins.PinkMaskTex'\n     MultiSkins(7)=Texture'DeusExItems.Skins.PinkMaskTex'\n     CollisionRadius=32.000000\n     CollisionHeight=2.400000\n     bBlockActors=False\n     bBlockPlayers=False\n     bBounce=True\n     Mass=0.100000\n     Buoyancy=0.100000\n     RotationRate=(Pitch=16384,Yaw=100000)\n     BindName=\"Augrist\"\n     FamiliarName=\"Augrist\"\n     UnfamiliarName=\"Augrist\"\n}\n",
            "name": "Augrist.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "WalkingSpeed=1.000000",
                    "bInvincible=True",
                    "bHasShadow=False",
                    "bHighlight=False",
                    "bSpawnBubbles=False",
                    "bCanFly=True",
                    "GroundSpeed=100.000000",
                    "WaterSpeed=100.000000",
                    "AirSpeed=100.000000",
                    "AccelRate=500.000000",
                    "JumpZ=0.000000",
                    "MaxStepHeight=1.000000",
                    "MinHitWall=0.000000",
                    "BaseEyeHeight=1.000000",
                    "Health=1",
                    "UnderWaterTime=20.000000",
                    "bTransient=True",
                    "Mesh=LodMesh'DeusExItems.NanoSwordPickup'",
                    "MultiSkins(1)=Texture'DeusExItems.Skins.PinkMaskTex'",
                    "MultiSkins(2)=Texture'DeusExItems.Skins.PinkMaskTex'",
                    "MultiSkins(6)=Texture'DeusExItems.Skins.PinkMaskTex'",
                    "MultiSkins(7)=Texture'DeusExItems.Skins.PinkMaskTex'",
                    "CollisionRadius=32.000000",
                    "CollisionHeight=2.400000",
                    "bBlockActors=False",
                    "bBlockPlayers=False",
                    "bBounce=True",
                    "Mass=0.100000",
                    "Buoyancy=0.100000",
                    "RotationRate=(Pitch=16384,Yaw=100000)",
                    "BindName=\"Augrist\"",
                    "FamiliarName=\"Augrist\"",
                    "UnfamiliarName=\"Augrist\""
                ],
                "exec": [],
                "extends": "Animal",
                "functions": {
                    "BeginState": {
                        "body": "{\n\t\tSuper.BeginState();\n\t\tBlockReactions();\n\t\tAcceleration = vector(Rotation)*AccelRate;\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "BeginState",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Frob": {
                        "body": "{\n\tSP = DeusExPlayer(Frobber);\n\n\tif(SP != None)\n\t{\n\t\tGA=Spawn(class'WeaponAugrist', Self,, Location, Rotation);\n\t\tGA.spell = spell;\n\t\tGA.lve = lve;\n\t\tGA.lvl = lvl;\n\t\tGA.SpawnCopy(DeusExPlayer(Frobber));\n\t\tGA.Destroy();\n\t\tDestroy();\n\t}\n}",
                        "locals": [
                            "local DeusExPlayer SP;",
                            "local weaponaugrist ga;"
                        ],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    },
                    "HitWall": {
                        "body": "{\n\n\t\telasticity = 0.3;\n\t\tVelocity = elasticity*((Velocity dot HitNormal) * HitNormal * (-2.0) + Velocity);\n\t\tDesiredRotation = Rotation;\n\t}",
                        "locals": [
                            "local rotator dir;",
                            "local float   elasticity;",
                            "local float   minVel, maxHVel;",
                            "local vector  tempVect;"
                        ],
                        "modifiers": [],
                        "name": "HitWall",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "HitNormal"
                            ],
                            [
                                "actor",
                                "HitWall"
                            ]
                        ],
                        "return": ""
                    },
                    "IsNearHome": {
                        "body": "{\n\n\tbNear = true;\n\tif (bUseHome)\n\t\tif (VSize(HomeLoc-position) > HomeExtent)\n\t\t\tbNear = false;\n\n\treturn bNear;\n}",
                        "locals": [
                            "local bool bNear;"
                        ],
                        "modifiers": [],
                        "name": "IsNearHome",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "position"
                            ]
                        ],
                        "return": "bool"
                    },
                    "PickDirection": {
                        "body": "{\n\n\t\tif (!IsNearHome(Location))\n\t\t\tdirVector = Normal(homeLoc - Location)*AirSpeed*4;\n\t\telse\n\t\t\tdirVector = Velocity;\n\t\tdirVector += VRand()*AirSpeed*2;\n\t\tdirVector = Normal(dirVector);\n\t\trot = Rotator(dirVector);\n\t\tif (VSize(Velocity) < AirSpeed*0.5)\n\t\t{\n\t\t\tAcceleration = dirVector*AirSpeed;\n\t\t\tSetRotation(rot);\n\t\t}\n\t\treturn vector(rot)*200+Location;\n\t}",
                        "locals": [
                            "local vector  dirVector;",
                            "local rotator rot;"
                        ],
                        "modifiers": [],
                        "name": "PickDirection",
                        "native": false,
                        "param": [],
                        "return": "vector"
                    },
                    "PlayWalking": {
                        "body": "{\n\tLoopAnimPivot('Still');\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PlayWalking",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Tick": {
                        "body": "{\n\t\tSuper.Tick(deltatime);\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltaTime"
                            ]
                        ],
                        "return": ""
                    },
                    "TweenToWalking": {
                        "body": "{\n\tTweenAnimPivot('Still', tweentime);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "TweenToWalking",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "tweentime"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 192,
                "replication": "",
                "states": [],
                "variables": [
                    "var() int spell, lve, lvl;"
                ]
            }
        },
        "Automed.uc": {
            "body": "Class Automed extends DeusExPickup;\n\nvar() bool bGlowHP, bButCharging;\nvar int TickDelay;\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t\tMaxCopies = 1;\n}\n\nstate Activated\n{\n\tfunction Activate()\n\t{\n\t\t// can't turn it off\n\t}\n\n\tfunction BeginState()\n\t{\n\t\tlocal DeusExPlayer player, hitplayer;\n\t\tlocal scriptedpawn hitpawn;\n\t\tlocal dxScriptedPawn hitpawn2;\n\t\tlocal Actor       hitActor;\n\t\tlocal Vector      hitLocation, hitNormal;\n\t\tlocal Vector      position, line;\n\t\tSuper.BeginState();\n\t\tplayer = DeusExPlayer(Owner);\n\t\tif(bButCharging)\n\t\t\tplayer.ClientMessage(\"|P2Charging...\");\n\t\telse\n\t\t\tplayer.ClientMessage(\"|P3Ready!\");\n\t\tforeach AllActors(class'Inventory', Inv)\n\t\t{\n\t\t\tif (Inv.Owner == player)\n\t\t\t{\n\t\t\t\tif (Inv.IsA('Medkit')) \n\t\t\t\t{\n\t\t\t\t\tplayer.ClientMessage(\"Automed will use Medkits. \"$Medkit(inv).NumCopies$\" remaining.\");\n\t\t\t\t}\n\t\t\t\tif (Inv.IsA('Estus')) \n\t\t\t\t{\n\t\t\t\t\tplayer.ClientMessage(\"Automed will use Estus. \"$Estus(inv).eUses$\" remaining.\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tGotoState('DeActivated');\n\t}\nBegin:\n}\n\nfunction InjectMedkit(string Purpose)\n{\n      local Inventory Inv;\n\t  local bool bDoneIt;\n\t  \n\t\tbButCharging=True;\n\t\tTickDelay=0;\n\t\tSetTimer(20,False);\n\tif(Purpose != \"bio\")\t\n\t{\n\t\tif(Purpose == \"critical\")\n\t\t{\n\t\t\tDeusExPlayer(Owner).PlaySound(sound'near_death', SLOT_Talk,2,,1024,);\n\t\t}\n\t\tif(Purpose == \"legless\")\n\t\t{\n\t\tDeusExPlayer(Owner).PlaySound(sound'major_fracture', SLOT_Talk,2,,1024,);\n\t\t}\t\n\t\tif(Purpose == \"drug\")\n\t\t{\n\t\tDeusExPlayer(Owner).PlaySound(sound'blood_toxins', SLOT_Talk,2,,1024,);\n\t\t}\t\t\n\t\tif(Purpose == \"fire\")\n\t\t{\n\t\tDeusExPlayer(Owner).PlaySound(sound'heat_damage', SLOT_Talk,2,,1024,);\n\t\t}\n\t\t\n\t\tforeach AllActors(class'Inventory', Inv)\n\t\t{\n\t\t\tif (Inv.Owner == DeusExPlayer(Owner))\n\t\t\t{\n\t\t\t\tif (Inv.IsA('Medkit')) \n\t\t\t\t{\n\t\t\t\t\tbDoneIt=True;\n\t\t\t\t\tInv.GotoState('Activated');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (Inv.IsA('Estus')) \n\t\t\t\t{\n\t\t\t\t\tif(Estus(inv).eUses > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tbDoneIt=True;\n\t\t\t\t\t\tInv.GotoState('Activated');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse if(Purpose == \"bio\")\n\t{\n\t\tforeach AllActors(class'Inventory', Inv)\n\t\t{\n\t\t\tif (Inv.Owner == DeusExPlayer(Owner))\n\t\t\t{\n\t\t\t\tif (Inv.IsA('Biocell')) \n\t\t\t\t{\n\t\t\t\t\tbDoneIt=True;\n\t\t\t\t\tInv.GotoState('Activated');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (Inv.IsA('Estus')) \n\t\t\t\t{\n\t\t\t\t\tif(Estus(inv).eUses > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tbDoneIt=True;\n\t\t\t\t\t\tInv.GotoState('Activated');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\tif(!bDoneIt)\n\t\t{\n\t\t\tDeusExPlayer(Owner).ClientMessage(\"No healing available....\");\n\t\t}\n\n}\n\nfunction Tick(float deltatime)\n{\n\tTickDelay++;\n\tif(Owner != None && Owner.IsA('Human'))\n\t{\n\t\tif(DeusExPlayer(Owner).HealthHead <= 15 || DeusExPlayer(Owner).HealthTorso <= 15 || DeusExPlayer(Owner).HealthLegLeft <= 0)\n\t\t{\n\t\t\tOwner.LightType=LT_Steady;\n\t\t\tOwner.LightEffect=LE_NonIncidence;\n\t\t\tOwner.LightSaturation=0;\n\t\t\tOwner.LightRadius=8;\n\t\t\tOwner.LightBrightness=64;\n\t\t\tOwner.LightHue = DeusExPlayer(Owner).Health;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tOwner.LightType = LT_None;\n\t\t}\n\t//Hack to prevent flamethrower bypassing the automed completely if hit repeatedly\n\t\tif(TickDelay <= 15)\n\t\t{\n\t\t\tif(DeusExPlayer(Owner).DrugEffectTimer > 0 || DeusExPlayer(Owner).bOnFire)\n\t\t\t{\n\t\t\tDeusExPlayer(Owner).StopPoison();\n\t\t\tDeusExPlayer(Owner).ExtinguishFire();\n\t\t\tDeusExPlayer(Owner).drugEffectTimer = 0;\n\t\t\t}\n\t\t}\n\t\tif(!bButCharging)\n\t\t{\n\t\t\tif(DeusExPlayer(Owner).HealthHead < 25 || DeusExPlayer(Owner).HealthTorso < 25)\n\t\t\t{\n\t\t\t\tInjectMedkit(\"critical\");\n\t\t\t}\n\t\t\tif(DeusExPlayer(Owner).HealthLegLeft == 0)\n\t\t\t{\n\t\t\t\tInjectMedkit(\"legless\");\n\t\t\t}\n\t\t\tif(DeusExPlayer(Owner).DrugEffectTimer > 0)\n\t\t\t{\n\t\t\t\tInjectMedkit(\"drug\");\n\t\t\t}\n\t\t\tif(DeusExPlayer(Owner).bOnFire)\n\t\t\t{\n\t\t\t\tInjectMedkit(\"fire\");\n\t\t\t}\n\t\t\tif(DeusExPlayer(Owner).Energy < 10)\n\t\t\t{\n\t\t\t\tInjectMedkit(\"bio\");\n\t\t\t}\n\t\t}\t\n\t}\n}\n\nfunction GiveTo( pawn Other )\n{\n    super.Giveto(Other);\n\tOther.PlaySound(sound'automedic_on');\n\tOther.ClientMessage(\"Automed activated. Medkits will be used when needed.\");\n}\n\nfunction Timer()\n{\n\tbButCharging=False;\n\tif(DeusExPlayer(Owner) != None)\n\t{\n\tDeusExPlayer(Owner).PlaySound(sound'automedic_on');\n\tDeusExPlayer(Owner).ClientMessage(\"Automed has recharged and can be used again.\");\n\t}\n}\n\nfunction bool UpdateInfo(Object winObject)\n{\n\tlocal PersonaInfoWindow winInfo;\n\tlocal string str;\n\n\twinInfo = PersonaInfoWindow(winObject);\n\tif (winInfo == None)\n\t\treturn False;\n\n\twinInfo.SetTitle(itemName);\n\twinInfo.SetText(Description $ winInfo.CR() $ winInfo.CR());\n//\twinInfo.AppendText(Sprintf(RechargesLabel, RechargeAmount));\n\n\t// Print the number of copies\n\tstr = CountLabel @ String(NumCopies);\n\twinInfo.AppendText(winInfo.CR() $ winInfo.CR() $ str);\n\n\treturn True;\n}\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) || (BeltSpot == 0) );\n}\n\ndefaultproperties\n{\n     maxCopies=1\n     bCanHaveMultipleCopies=True\n     bActivatable=True\n     ItemName=\"Automed\"\n     PlayerViewOffset=(X=30.000000,Z=-12.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.Credits'\n     PickupViewMesh=LodMesh'DeusExItems.Credits'\n     ThirdPersonMesh=LodMesh'DeusExItems.Credits'\n     LandSound=Sound'DeusExSounds.Generic.PlasticHit1'\n     Icon=Texture'DeusExUI.UserInterface.AugIconHealing'\n     M_Activated=\"\"\n     largeIconWidth=35\n     largeIconHeight=49\n     Description=\"s\"\n     beltDescription=\"AUTOMED\"\n     Mesh=LodMesh'DeusExItems.Credits'\n     MultiSkins(0)=Texture'DeusExUI.UserInterface.AugIconHealing_Small'\n     CollisionRadius=7.000000\n     CollisionHeight=0.550000\n     Mass=10.000000\n     Buoyancy=100.000000\n}\n",
            "name": "Automed.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "maxCopies=1",
                    "bCanHaveMultipleCopies=True",
                    "bActivatable=True",
                    "ItemName=\"Automed\"",
                    "PlayerViewOffset=(X=30.000000,Z=-12.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.Credits'",
                    "PickupViewMesh=LodMesh'DeusExItems.Credits'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.Credits'",
                    "LandSound=Sound'DeusExSounds.Generic.PlasticHit1'",
                    "Icon=Texture'DeusExUI.UserInterface.AugIconHealing'",
                    "M_Activated=\"\"",
                    "largeIconWidth=35",
                    "largeIconHeight=49",
                    "Description=\"s\"",
                    "beltDescription=\"AUTOMED\"",
                    "Mesh=LodMesh'DeusExItems.Credits'",
                    "MultiSkins(0)=Texture'DeusExUI.UserInterface.AugIconHealing_Small'",
                    "CollisionRadius=7.000000",
                    "CollisionHeight=0.550000",
                    "Mass=10.000000",
                    "Buoyancy=100.000000"
                ],
                "exec": [],
                "extends": "DeusExPickup",
                "functions": {
                    "Activate": {
                        "body": "{\n\t\t// can't turn it off\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Activate",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "BeginState": {
                        "body": "{\n\t\tSuper.BeginState();\n\t\tplayer = DeusExPlayer(Owner);\n\t\tif(bButCharging)\n\t\t\tplayer.ClientMessage(\"|P2Charging...\");\n\t\telse\n\t\t\tplayer.ClientMessage(\"|P3Ready!\");\n\t\tforeach AllActors(class'Inventory', Inv)\n\t\t{\n\t\t\tif (Inv.Owner == player)\n\t\t\t{\n\t\t\t\tif (Inv.IsA('Medkit')) \n\t\t\t\t{\n\t\t\t\t\tplayer.ClientMessage(\"Automed will use Medkits. \"$Medkit(inv).NumCopies$\" remaining.\");\n\t\t\t\t}\n\t\t\t\tif (Inv.IsA('Estus')) \n\t\t\t\t{\n\t\t\t\t\tplayer.ClientMessage(\"Automed will use Estus. \"$Estus(inv).eUses$\" remaining.\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tGotoState('DeActivated');\n\t}",
                        "locals": [
                            "local DeusExPlayer player, hitplayer;",
                            "local scriptedpawn hitpawn;",
                            "local dxScriptedPawn hitpawn2;",
                            "local Actor       hitActor;",
                            "local Vector      hitLocation, hitNormal;",
                            "local Vector      position, line;"
                        ],
                        "modifiers": [],
                        "name": "BeginState",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "GiveTo": {
                        "body": "{\n    super.Giveto(Other);\n\tOther.PlaySound(sound'automedic_on');\n\tOther.ClientMessage(\"Automed activated. Medkits will be used when needed.\");\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "GiveTo",
                        "native": false,
                        "param": [
                            [
                                "pawn",
                                "Other"
                            ]
                        ],
                        "return": ""
                    },
                    "InjectMedkit": {
                        "body": "{\n\t  \n\t\tbButCharging=True;\n\t\tTickDelay=0;\n\t\tSetTimer(20,False);\n\tif(Purpose != \"bio\")\t\n\t{\n\t\tif(Purpose == \"critical\")\n\t\t{\n\t\t\tDeusExPlayer(Owner).PlaySound(sound'near_death', SLOT_Talk,2,,1024,);\n\t\t}\n\t\tif(Purpose == \"legless\")\n\t\t{\n\t\tDeusExPlayer(Owner).PlaySound(sound'major_fracture', SLOT_Talk,2,,1024,);\n\t\t}\t\n\t\tif(Purpose == \"drug\")\n\t\t{\n\t\tDeusExPlayer(Owner).PlaySound(sound'blood_toxins', SLOT_Talk,2,,1024,);\n\t\t}\t\t\n\t\tif(Purpose == \"fire\")\n\t\t{\n\t\tDeusExPlayer(Owner).PlaySound(sound'heat_damage', SLOT_Talk,2,,1024,);\n\t\t}\n\t\t\n\t\tforeach AllActors(class'Inventory', Inv)\n\t\t{\n\t\t\tif (Inv.Owner == DeusExPlayer(Owner))\n\t\t\t{\n\t\t\t\tif (Inv.IsA('Medkit')) \n\t\t\t\t{\n\t\t\t\t\tbDoneIt=True;\n\t\t\t\t\tInv.GotoState('Activated');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (Inv.IsA('Estus')) \n\t\t\t\t{\n\t\t\t\t\tif(Estus(inv).eUses > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tbDoneIt=True;\n\t\t\t\t\t\tInv.GotoState('Activated');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse if(Purpose == \"bio\")\n\t{\n\t\tforeach AllActors(class'Inventory', Inv)\n\t\t{\n\t\t\tif (Inv.Owner == DeusExPlayer(Owner))\n\t\t\t{\n\t\t\t\tif (Inv.IsA('Biocell')) \n\t\t\t\t{\n\t\t\t\t\tbDoneIt=True;\n\t\t\t\t\tInv.GotoState('Activated');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (Inv.IsA('Estus')) \n\t\t\t\t{\n\t\t\t\t\tif(Estus(inv).eUses > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tbDoneIt=True;\n\t\t\t\t\t\tInv.GotoState('Activated');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\tif(!bDoneIt)\n\t\t{\n\t\t\tDeusExPlayer(Owner).ClientMessage(\"No healing available....\");\n\t\t}\n\n}",
                        "locals": [
                            "local Inventory Inv;",
                            "local bool bDoneIt;"
                        ],
                        "modifiers": [],
                        "name": "InjectMedkit",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "Purpose"
                            ]
                        ],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t\tMaxCopies = 1;\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) || (BeltSpot == 0) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    },
                    "Tick": {
                        "body": "{\n\tTickDelay++;\n\tif(Owner != None && Owner.IsA('Human'))\n\t{\n\t\tif(DeusExPlayer(Owner).HealthHead <= 15 || DeusExPlayer(Owner).HealthTorso <= 15 || DeusExPlayer(Owner).HealthLegLeft <= 0)\n\t\t{\n\t\t\tOwner.LightType=LT_Steady;\n\t\t\tOwner.LightEffect=LE_NonIncidence;\n\t\t\tOwner.LightSaturation=0;\n\t\t\tOwner.LightRadius=8;\n\t\t\tOwner.LightBrightness=64;\n\t\t\tOwner.LightHue = DeusExPlayer(Owner).Health;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tOwner.LightType = LT_None;\n\t\t}\n\t//Hack to prevent flamethrower bypassing the automed completely if hit repeatedly\n\t\tif(TickDelay <= 15)\n\t\t{\n\t\t\tif(DeusExPlayer(Owner).DrugEffectTimer > 0 || DeusExPlayer(Owner).bOnFire)\n\t\t\t{\n\t\t\tDeusExPlayer(Owner).StopPoison();\n\t\t\tDeusExPlayer(Owner).ExtinguishFire();\n\t\t\tDeusExPlayer(Owner).drugEffectTimer = 0;\n\t\t\t}\n\t\t}\n\t\tif(!bButCharging)\n\t\t{\n\t\t\tif(DeusExPlayer(Owner).HealthHead < 25 || DeusExPlayer(Owner).HealthTorso < 25)\n\t\t\t{\n\t\t\t\tInjectMedkit(\"critical\");\n\t\t\t}\n\t\t\tif(DeusExPlayer(Owner).HealthLegLeft == 0)\n\t\t\t{\n\t\t\t\tInjectMedkit(\"legless\");\n\t\t\t}\n\t\t\tif(DeusExPlayer(Owner).DrugEffectTimer > 0)\n\t\t\t{\n\t\t\t\tInjectMedkit(\"drug\");\n\t\t\t}\n\t\t\tif(DeusExPlayer(Owner).bOnFire)\n\t\t\t{\n\t\t\t\tInjectMedkit(\"fire\");\n\t\t\t}\n\t\t\tif(DeusExPlayer(Owner).Energy < 10)\n\t\t\t{\n\t\t\t\tInjectMedkit(\"bio\");\n\t\t\t}\n\t\t}\t\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltatime"
                            ]
                        ],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\tbButCharging=False;\n\tif(DeusExPlayer(Owner) != None)\n\t{\n\tDeusExPlayer(Owner).PlaySound(sound'automedic_on');\n\tDeusExPlayer(Owner).ClientMessage(\"Automed has recharged and can be used again.\");\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "UpdateInfo": {
                        "body": "{\n\n\twinInfo = PersonaInfoWindow(winObject);\n\tif (winInfo == None)\n\t\treturn False;\n\n\twinInfo.SetTitle(itemName);\n\twinInfo.SetText(Description $ winInfo.CR() $ winInfo.CR());\n//\twinInfo.AppendText(Sprintf(RechargesLabel, RechargeAmount));\n\n\t// Print the number of copies\n\tstr = CountLabel @ String(NumCopies);\n\twinInfo.AppendText(winInfo.CR() $ winInfo.CR() $ str);\n\n\treturn True;\n}",
                        "locals": [
                            "local PersonaInfoWindow winInfo;",
                            "local string str;"
                        ],
                        "modifiers": [],
                        "name": "UpdateInfo",
                        "native": false,
                        "param": [
                            [
                                "Object",
                                "winObject"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 255,
                "replication": "",
                "states": [],
                "variables": [
                    "var() bool bGlowHP, bButCharging;",
                    "var int TickDelay;"
                ]
            }
        },
        "AveDecal.uc": {
            "body": "//=============================================================================\n// DeusExDecal\n//=============================================================================\nclass AveDecal extends Decal\n\tabstract;\n\nvar bool bAttached, bStartedLife, bImportant;\n\nsimulated function PostBeginPlay()\n{\n\tSuper.PostBeginPlay();\n\tSetTimer(1.0, false);\n}\n\nfunction ReattachDecal(optional vector newrot)\n{\n\tDetachDecal();\n\tif (newrot != vect(0,0,0))\n\t\tAttachDecal(32, newrot);\n\telse\n\t\tAttachDecal(32);\n}\n\ndefaultproperties\n{\n     bAttached=True\n     bImportant=True\n}\n",
            "name": "AveDecal.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bAttached=True",
                    "bImportant=True"
                ],
                "exec": [],
                "extends": "Decal",
                "functions": {
                    "PostBeginPlay": {
                        "body": "{\n\tSuper.PostBeginPlay();\n\tSetTimer(1.0, false);\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ReattachDecal": {
                        "body": "{\n\tDetachDecal();\n\tif (newrot != vect(0,0,0))\n\t\tAttachDecal(32, newrot);\n\telse\n\t\tAttachDecal(32);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "ReattachDecal",
                        "native": false,
                        "param": [
                            [
                                "optional",
                                "vector",
                                "newrot"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 29,
                "replication": "",
                "states": [],
                "variables": [
                    "var bool bAttached, bStartedLife, bImportant;"
                ]
            }
        },
        "BB.uc": {
            "body": "class BB extends DeusExProjectile;\n\nvar ParticleGenerator pGen1;\nvar ParticleGenerator pGen2;\n\nvar float mpDamage;\nvar float mpBlastRadius;\n\n#exec OBJ LOAD FILE=Effects\n\nsimulated function DrawExplosionEffects(vector HitLocation, vector HitNormal)\n{\n\tlocal ParticleGenerator gen;\n\n\t// create a particle generator shooting out plasma spheres\n\tgen = Spawn(class'ParticleGenerator',,, HitLocation, Rotator(HitNormal));\n\tif (gen != None)\n\t{\n      gen.RemoteRole = ROLE_None;\n\t\tgen.particleDrawScale = 2.0;\n\t\tgen.checkTime = 0.10;\n\t\tgen.frequency = 2.0;\n\t\tgen.ejectSpeed = 100.0;\n\t\tgen.bGravity = True;\n\t\tgen.bRandomEject = True;\n\t\tgen.particleLifeSpan = 14.00;\n\t\tgen.particleTexture = FireTexture'Effects.Laser.LaserSpot2';\n\t\tgen.LifeSpan = 18.5;\n\t}\n}\n\nfunction PostBeginPlay()\n{\n\tSuper.PostBeginPlay();\n\n   if ((Level.NetMode == NM_Standalone) || (Level.NetMode == NM_ListenServer))\n      SpawnPlasmaEffects();\n}\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\tDamage = mpDamage;\n\tblastRadius = mpBlastRadius;\n}\n\nsimulated function PostNetBeginPlay()\n{\n      SpawnPlasmaEffects();\n}\n\n// DEUS_EX AMSD Should not be called as server propagating to clients.\nsimulated function SpawnPlasmaEffects()\n{\n\tlocal Rotator rot;\n   rot = Rotation;\n\trot.Yaw -= 32768;\n\n   pGen2 = Spawn(class'ParticleGenerator', Self,, Location, rot);\n\tif (pGen2 != None)\n\t{\n      pGen2.RemoteRole = ROLE_None;\n\t\tpGen2.particleTexture = FireTexture'Effects.Laser.LaserSpot2';\n\t\tpGen2.particleDrawScale = 2.0;\n\t\tpGen2.checkTime = 0.04;\n\t\tpGen2.riseRate = 0.0;\n\t\tpGen2.ejectSpeed = 100.0;\n\t\tpGen2.particleLifeSpan = 4.0;\n\t\tpGen2.bRandomEject = True;\n\t\tpGen2.SetBase(Self);\n\t}\n   \n}\n\nsimulated function Destroyed()\n{\n\tif (pGen1 != None)\n\t\tpGen1.DelayedDestroy();\n\tif (pGen2 != None)\n\t\tpGen2.DelayedDestroy();\n\n\tSuper.Destroyed();\n}\n\ndefaultproperties\n{\n     mpDamage=5.000000\n     mpBlastRadius=100.000000\n     bExplodes=True\n     blastRadius=128.000000\n     DamageType=Sabot\n     AccurateRange=14400\n     maxRange=24000\n     bIgnoresNanoDefense=True\n     ItemName=\"Energy Bolt\"\n     ItemArticle=\"an\"\n     speed=1500.000000\n     MaxSpeed=1500.000000\n     Damage=5.000000\n     MomentumTransfer=5000\n     ImpactSound=Sound'DeusExSounds.Weapons.PlasmaRifleHit'\n     ExplosionDecal=Class'DeusEx.ScorchMark'\n     Texture=FireTexture'Effects.Laser.LaserBeam2'\n     Mesh=LodMesh'DeusExItems.Tracer'\n     DrawScale=3.000000\n     bUnlit=True\n     LightBrightness=200\n     LightHue=80\n     LightSaturation=128\n     LightRadius=3\n     bFixedRotationDir=True\n}\n",
            "name": "BB.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "mpDamage=5.000000",
                    "mpBlastRadius=100.000000",
                    "bExplodes=True",
                    "blastRadius=128.000000",
                    "DamageType=Sabot",
                    "AccurateRange=14400",
                    "maxRange=24000",
                    "bIgnoresNanoDefense=True",
                    "ItemName=\"Energy Bolt\"",
                    "ItemArticle=\"an\"",
                    "speed=1500.000000",
                    "MaxSpeed=1500.000000",
                    "Damage=5.000000",
                    "MomentumTransfer=5000",
                    "ImpactSound=Sound'DeusExSounds.Weapons.PlasmaRifleHit'",
                    "ExplosionDecal=Class'DeusEx.ScorchMark'",
                    "Texture=FireTexture'Effects.Laser.LaserBeam2'",
                    "Mesh=LodMesh'DeusExItems.Tracer'",
                    "DrawScale=3.000000",
                    "bUnlit=True",
                    "LightBrightness=200",
                    "LightHue=80",
                    "LightSaturation=128",
                    "LightRadius=3",
                    "bFixedRotationDir=True"
                ],
                "exec": [
                    "#exec OBJ LOAD FILE=Effects"
                ],
                "extends": "DeusExProjectile",
                "functions": {
                    "Destroyed": {
                        "body": "{\n\tif (pGen1 != None)\n\t\tpGen1.DelayedDestroy();\n\tif (pGen2 != None)\n\t\tpGen2.DelayedDestroy();\n\n\tSuper.Destroyed();\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Destroyed",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "DrawExplosionEffects": {
                        "body": "{\n\n\t// create a particle generator shooting out plasma spheres\n\tgen = Spawn(class'ParticleGenerator',,, HitLocation, Rotator(HitNormal));\n\tif (gen != None)\n\t{\n      gen.RemoteRole = ROLE_None;\n\t\tgen.particleDrawScale = 2.0;\n\t\tgen.checkTime = 0.10;\n\t\tgen.frequency = 2.0;\n\t\tgen.ejectSpeed = 100.0;\n\t\tgen.bGravity = True;\n\t\tgen.bRandomEject = True;\n\t\tgen.particleLifeSpan = 14.00;\n\t\tgen.particleTexture = FireTexture'Effects.Laser.LaserSpot2';\n\t\tgen.LifeSpan = 18.5;\n\t}\n}",
                        "locals": [
                            "local ParticleGenerator gen;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "DrawExplosionEffects",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "HitLocation"
                            ],
                            [
                                "vector",
                                "HitNormal"
                            ]
                        ],
                        "return": ""
                    },
                    "PostBeginPlay": {
                        "body": "{\n\tSuper.PostBeginPlay();\n\n   if ((Level.NetMode == NM_Standalone) || (Level.NetMode == NM_ListenServer))\n      SpawnPlasmaEffects();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PostNetBeginPlay": {
                        "body": "{\n      SpawnPlasmaEffects();\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PostNetBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\tDamage = mpDamage;\n\tblastRadius = mpBlastRadius;\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "SpawnPlasmaEffects": {
                        "body": "{\n   rot = Rotation;\n\trot.Yaw -= 32768;\n\n   pGen2 = Spawn(class'ParticleGenerator', Self,, Location, rot);\n\tif (pGen2 != None)\n\t{\n      pGen2.RemoteRole = ROLE_None;\n\t\tpGen2.particleTexture = FireTexture'Effects.Laser.LaserSpot2';\n\t\tpGen2.particleDrawScale = 2.0;\n\t\tpGen2.checkTime = 0.04;\n\t\tpGen2.riseRate = 0.0;\n\t\tpGen2.ejectSpeed = 100.0;\n\t\tpGen2.particleLifeSpan = 4.0;\n\t\tpGen2.bRandomEject = True;\n\t\tpGen2.SetBase(Self);\n\t}\n   \n}",
                        "locals": [
                            "local Rotator rot;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "SpawnPlasmaEffects",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 114,
                "replication": "",
                "states": [],
                "variables": [
                    "var ParticleGenerator pGen1;",
                    "var ParticleGenerator pGen2;",
                    "var float mpDamage;",
                    "var float mpBlastRadius;"
                ]
            }
        },
        "BFG.uc": {
            "body": "//=============================================================================\n// BFG\n//=============================================================================\nclass BFG extends Rocket;\n\nvar() float shakeTime;\nvar() float shakeRollMagnitude;\nvar() float shakeVertMagnitude;\n\nvar SizableEffectSpawner efs;\n\nsimulated function SpawnRocketEffects()\n{\n\tefs = Spawn(class'SizableEffectSpawner',,,Location);\n\tif (efs != None)\n\t{\n\t\tefs.RemoteRole = ROLE_None;\n\t\tefs.SetBase(Self);\n\t\tefs.EffectClass=class'MagicRing';\n\t\tefs.EffectSkin = Texture'SkyBlueRay';\n\t\tefs.SizeofEffect = 3;\n\t\tefs.Interval = 0.01;\n\t\tefs.EffectLSpan = 1.0;\n   \t}\n}\n\nsimulated function DrawExplosionEffects(vector HitLocation, vector HitNormal)\n{\n        local ExplosionLarge expeffect;\n\tlocal DeusExPlayer player, pls;\n\tlocal pring sphere;\n\t//stop the other effect\n\tefs.Destroy();\n\n\tplayer = DeusExPlayer(Owner);\n\t\n\tforeach AllActors(class'DeusExPlayer', pls)\n\t{\n\t\tif (pls != None)\n\t\t{\n\t\t\tpls.ShakeView(shakeTime, shakeRollMagnitude, shakeVertMagnitude);\n\t\t}\n\t}\n\n\t// draw a pretty explosion\n\tefs = Spawn(class'SizableEffectSpawner',,, HitLocation);\n\tif (efs != None)\n\t{\n\t\tefs.RemoteRole = ROLE_None;\n\t\tefs.EffectClass=class'MagicRing';      \t\t\n\t\tefs.EffectSkin = Texture'SkyBlueRay';\n\t\tefs.SizeofEffect = 10;\n\t\tefs.Interval = 0.1;\n\t\tefs.TimeLimit=12;\n\t\tefs.EffectLSpan = 3.0;\n   \t}\n\tsphere = Spawn(class'pring',,, HitLocation);\n\tif (sphere != None)\n\t{\n\tsphere.RemoteRole = ROLE_None;\n\tsphere.size = blastradius;\n\tSphere.MultiSkins[0]=Texture'DeusExDeco.Skins.AlarmLightTex7';\n\t}\n   \texpeffect = Spawn(class'ExplosionLarge',,, HitLocation);\n   \tif (expeffect != None)\n   \t   expeffect.RemoteRole = ROLE_None;\t\n}\n\ndefaultproperties\n{\n     shaketime=3.000000\n     shakeRollMagnitude=512.000000\n     shakeVertMagnitude=48.000000\n     blastRadius=1024.000000\n     bTracking=False\n     ItemName=\"Big Fucking Blast\"\n     speed=500.000000\n     MaxSpeed=1000.000000\n     SpawnSound=None\n     ImpactSound=None\n     DrawType=DT_Sprite\n     Style=STY_Modulated\n     Texture=Texture'PGAssets.Skins.SkyBlueRay'\n     Mesh=None\n     DrawScale=5.000000\n     SoundRadius=0\n     SoundVolume=0\n     AmbientSound=None\n}\n",
            "name": "BFG.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "shaketime=3.000000",
                    "shakeRollMagnitude=512.000000",
                    "shakeVertMagnitude=48.000000",
                    "blastRadius=1024.000000",
                    "bTracking=False",
                    "ItemName=\"Big Fucking Blast\"",
                    "speed=500.000000",
                    "MaxSpeed=1000.000000",
                    "SpawnSound=None",
                    "ImpactSound=None",
                    "DrawType=DT_Sprite",
                    "Style=STY_Modulated",
                    "Texture=Texture'PGAssets.Skins.SkyBlueRay'",
                    "Mesh=None",
                    "DrawScale=5.000000",
                    "SoundRadius=0",
                    "SoundVolume=0",
                    "AmbientSound=None"
                ],
                "exec": [],
                "extends": "Rocket",
                "functions": {
                    "DrawExplosionEffects": {
                        "body": "{\n\t//stop the other effect\n\tefs.Destroy();\n\n\tplayer = DeusExPlayer(Owner);\n\t\n\tforeach AllActors(class'DeusExPlayer', pls)\n\t{\n\t\tif (pls != None)\n\t\t{\n\t\t\tpls.ShakeView(shakeTime, shakeRollMagnitude, shakeVertMagnitude);\n\t\t}\n\t}\n\n\t// draw a pretty explosion\n\tefs = Spawn(class'SizableEffectSpawner',,, HitLocation);\n\tif (efs != None)\n\t{\n\t\tefs.RemoteRole = ROLE_None;\n\t\tefs.EffectClass=class'MagicRing';      \t\t\n\t\tefs.EffectSkin = Texture'SkyBlueRay';\n\t\tefs.SizeofEffect = 10;\n\t\tefs.Interval = 0.1;\n\t\tefs.TimeLimit=12;\n\t\tefs.EffectLSpan = 3.0;\n   \t}\n\tsphere = Spawn(class'pring',,, HitLocation);\n\tif (sphere != None)\n\t{\n\tsphere.RemoteRole = ROLE_None;\n\tsphere.size = blastradius;\n\tSphere.MultiSkins[0]=Texture'DeusExDeco.Skins.AlarmLightTex7';\n\t}\n   \texpeffect = Spawn(class'ExplosionLarge',,, HitLocation);\n   \tif (expeffect != None)\n   \t   expeffect.RemoteRole = ROLE_None;\t\n}",
                        "locals": [
                            "local ExplosionLarge expeffect;",
                            "local DeusExPlayer player, pls;",
                            "local pring sphere;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "DrawExplosionEffects",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "HitLocation"
                            ],
                            [
                                "vector",
                                "HitNormal"
                            ]
                        ],
                        "return": ""
                    },
                    "SpawnRocketEffects": {
                        "body": "{\n\tefs = Spawn(class'SizableEffectSpawner',,,Location);\n\tif (efs != None)\n\t{\n\t\tefs.RemoteRole = ROLE_None;\n\t\tefs.SetBase(Self);\n\t\tefs.EffectClass=class'MagicRing';\n\t\tefs.EffectSkin = Texture'SkyBlueRay';\n\t\tefs.SizeofEffect = 3;\n\t\tefs.Interval = 0.01;\n\t\tefs.EffectLSpan = 1.0;\n   \t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "SpawnRocketEffects",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 90,
                "replication": "",
                "states": [],
                "variables": [
                    "var() float shakeTime;",
                    "var() float shakeRollMagnitude;",
                    "var() float shakeVertMagnitude;",
                    "var SizableEffectSpawner efs;"
                ]
            }
        },
        "BLTsandwich.uc": {
            "body": "class BLTsandwich extends sandwich;\n\ndefaultproperties\n{\n     ItemName=\"Bacon Lettuce And Tomato Sandwich\"\n     beltDescription=\"BLT.SDWCH\"\n     MultiSkins(1)=Texture'PGAssets.Skins.BLTTex1'\n}\n",
            "name": "BLTsandwich.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "ItemName=\"Bacon Lettuce And Tomato Sandwich\"",
                    "beltDescription=\"BLT.SDWCH\"",
                    "MultiSkins(1)=Texture'PGAssets.Skins.BLTTex1'"
                ],
                "exec": [],
                "extends": "sandwich",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 9,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "BasketballMP.uc": {
            "body": "class BasketballMP extends ThrownProjectile;\n\nvar bool bDoomedToDestroy;\nvar bool bAlreadyScored;\nvar bool bAllowBumping;\n\nsimulated function Timer()\n{\n\tif(!bAllowBumping)\n\t{\n\t\tbAllowBumping=True;\n\t}\n\tif (bDoomedToDestroy)\n\t{\n\t\tDestroy();\n\t}\n\treturn;\n}\n\nsimulated function Tick(float deltaTime)\n{\n\treturn;\n}\n\nsimulated function TakeDamage(int Damage, Pawn instigatedBy, Vector HitLocation, Vector Momentum, name damageType)\n{\n\treturn;\n}\n\nsimulated function Explode(vector HitLocation, vector HitNormal)\n{\n\treturn;\n}\n\nfunction Frob(Actor Frobber, Inventory frobWith)\n{\n\tlocal BasketballMP4Player FLB4P;\n\tif (!bDoomedToDestroy)\n\t{\n\t\tFLB4P = Spawn(Class'BasketballMP4Player',Frobber,,Location,Rotation);\n\t\tDeusExPlayer(Frobber).FrobTarget = FLB4P;\n\t\tDeusExPlayer(Frobber).GrabDecoration();\n\t\tSuper.Frob(Frobber, frobWith);\n\t\tDestroy();\n\t}\n\telse \n\t{\n\t\treturn;\n\t}\n}\n\nauto simulated state Flying\n{\n\tsimulated function HitWall(vector HitNormal, actor HitWall)\n\t{\n\t\tlocal float speed;\n\t\t\n\t\tVelocity = 0.8*((Velocity dot HitNormal) * HitNormal * (-2.0) + Velocity);\n\t\tspeed = VSize(Velocity);\n\t\tbFixedRotationDir = True;\n\t\tRotationRate = RotRand(False);\n\t\tif ((speed > 0) && (speed < 30) && (HitNormal.Z > 0.7))\n\t\t{\n\t\t\tSetPhysics(PHYS_None, HitWall);\n\t\t\tif (Physics == PHYS_None)\n\t\t\t\tbFixedRotationDir = False;\n\t\t}\n\t\n\t\tif (HitWall.IsA('Mover'))\n\t\t{\n\t\t\tHitWall.TakeDamage(speed/58, Pawn(Owner), HitWall.Location, MomentumTransfer*Normal(Velocity), 'Shot');\n\t\t}\n\t\t\n\t\telse if (speed > 30)\n\t\t{\t\n\t\t\tif ((FRand() >= 0.75) && (FRand() < 1.0))\n\t\t\t{\n\t\t\t\tPlaySound(sound'Bounce1', SLOT_None, 3);\n\t\t\t}\n\t\t\telse if ((FRand() >= 0.5) && (FRand() < 0.75))\n\t\t\t{\n\t\t\t\tPlaySound(sound'Bounce2', SLOT_None, 3);\t\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tPlaySound(sound'Bounce3', SLOT_None, 3);\t\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction bump(actor other)\n{\nlocal DeusExPlayer Player;\nPlayer = DeusExPlayer(other);\n\n\tif((other.IsA('DeusExPlayer')))\n\t{\n\t\tif(bAllowBumping && Player.Inhand == None)\n\t\t{\n\t\t\tfrob(Other,None);\n\t\t}\n\t}\n}\n\nsimulated function BeginPlay()\n{\n\tSuper.BeginPlay();\n}\n\ndefaultproperties\n{\n     bDisabled=True\n     bExplodes=False\n     bBlood=False\n     bEmitDanger=False\n     bIgnoresNanoDefense=True\n     ItemName=\"Basketball\"\n     LifeSpan=0.000000\n     bDirectional=False\n     Mesh=LodMesh'PGAssets.FLBasketball'\n     DrawScale=0.710000\n     CollisionRadius=10.000000\n     CollisionHeight=10.000000\n     bBlockActors=True\n     bBlockPlayers=True\n     Mass=8.000000\n     Buoyancy=10.000000\n}\n",
            "name": "BasketballMP.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bDisabled=True",
                    "bExplodes=False",
                    "bBlood=False",
                    "bEmitDanger=False",
                    "bIgnoresNanoDefense=True",
                    "ItemName=\"Basketball\"",
                    "LifeSpan=0.000000",
                    "bDirectional=False",
                    "Mesh=LodMesh'PGAssets.FLBasketball'",
                    "DrawScale=0.710000",
                    "CollisionRadius=10.000000",
                    "CollisionHeight=10.000000",
                    "bBlockActors=True",
                    "bBlockPlayers=True",
                    "Mass=8.000000",
                    "Buoyancy=10.000000"
                ],
                "exec": [],
                "extends": "ThrownProjectile",
                "functions": {
                    "BeginPlay": {
                        "body": "{\n\tSuper.BeginPlay();\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "BeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Explode": {
                        "body": "{\n\treturn;\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Explode",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "HitLocation"
                            ],
                            [
                                "vector",
                                "HitNormal"
                            ]
                        ],
                        "return": ""
                    },
                    "Frob": {
                        "body": "{\n\tif (!bDoomedToDestroy)\n\t{\n\t\tFLB4P = Spawn(Class'BasketballMP4Player',Frobber,,Location,Rotation);\n\t\tDeusExPlayer(Frobber).FrobTarget = FLB4P;\n\t\tDeusExPlayer(Frobber).GrabDecoration();\n\t\tSuper.Frob(Frobber, frobWith);\n\t\tDestroy();\n\t}\n\telse \n\t{\n\t\treturn;\n\t}\n}",
                        "locals": [
                            "local BasketballMP4Player FLB4P;"
                        ],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    },
                    "HitWall": {
                        "body": "{\n\t\t\n\t\tVelocity = 0.8*((Velocity dot HitNormal) * HitNormal * (-2.0) + Velocity);\n\t\tspeed = VSize(Velocity);\n\t\tbFixedRotationDir = True;\n\t\tRotationRate = RotRand(False);\n\t\tif ((speed > 0) && (speed < 30) && (HitNormal.Z > 0.7))\n\t\t{\n\t\t\tSetPhysics(PHYS_None, HitWall);\n\t\t\tif (Physics == PHYS_None)\n\t\t\t\tbFixedRotationDir = False;\n\t\t}\n\t\n\t\tif (HitWall.IsA('Mover'))\n\t\t{\n\t\t\tHitWall.TakeDamage(speed/58, Pawn(Owner), HitWall.Location, MomentumTransfer*Normal(Velocity), 'Shot');\n\t\t}\n\t\t\n\t\telse if (speed > 30)\n\t\t{\t\n\t\t\tif ((FRand() >= 0.75) && (FRand() < 1.0))\n\t\t\t{\n\t\t\t\tPlaySound(sound'Bounce1', SLOT_None, 3);\n\t\t\t}\n\t\t\telse if ((FRand() >= 0.5) && (FRand() < 0.75))\n\t\t\t{\n\t\t\t\tPlaySound(sound'Bounce2', SLOT_None, 3);\t\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tPlaySound(sound'Bounce3', SLOT_None, 3);\t\n\t\t\t}\n\t\t}\n\t}",
                        "locals": [
                            "local float speed;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "HitWall",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "HitNormal"
                            ],
                            [
                                "actor",
                                "HitWall"
                            ]
                        ],
                        "return": ""
                    },
                    "TakeDamage": {
                        "body": "{\n\treturn;\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TakeDamage",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "Damage"
                            ],
                            [
                                "Pawn",
                                "instigatedBy"
                            ],
                            [
                                "Vector",
                                "HitLocation"
                            ],
                            [
                                "Vector",
                                "Momentum"
                            ],
                            [
                                "name",
                                "damageType"
                            ]
                        ],
                        "return": ""
                    },
                    "Tick": {
                        "body": "{\n\treturn;\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltaTime"
                            ]
                        ],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\tif(!bAllowBumping)\n\t{\n\t\tbAllowBumping=True;\n\t}\n\tif (bDoomedToDestroy)\n\t{\n\t\tDestroy();\n\t}\n\treturn;\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "bump": {
                        "body": "{\nPlayer = DeusExPlayer(other);\n\n\tif((other.IsA('DeusExPlayer')))\n\t{\n\t\tif(bAllowBumping && Player.Inhand == None)\n\t\t{\n\t\t\tfrob(Other,None);\n\t\t}\n\t}\n}",
                        "locals": [
                            "local DeusExPlayer Player;"
                        ],
                        "modifiers": [],
                        "name": "bump",
                        "native": false,
                        "param": [
                            [
                                "actor",
                                "other"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 130,
                "replication": "",
                "states": [],
                "variables": [
                    "var bool bDoomedToDestroy;",
                    "var bool bAlreadyScored;",
                    "var bool bAllowBumping;"
                ]
            }
        },
        "BasketballMP4Player.uc": {
            "body": "class BasketballMP4Player extends DeusExDecoration;\n\nevent BaseChange()\n{\n\tlocal BasketballMP AdvB;\n\tif (bWasCarried)\n\t{\n\t\tAdvB = Spawn(Class'BasketballMP',Owner,,Location,Rotation);\n\t\tAdvB.Velocity = Velocity + 0.7 * Owner.Velocity;\n\t\tAdvB.SetTimer(0.5,False);\n\t\tDestroy();\n\t}\n}\n\ndefaultproperties\n{\n     bInvincible=True\n     ItemName=\"Basketball\"\n     Mesh=LodMesh'PGAssets.FLBasketball'\n     DrawScale=0.710000\n     CollisionRadius=10.000000\n     CollisionHeight=10.000000\n     bBounce=True\n     Mass=8.000000\n     Buoyancy=10.000000\n}\n",
            "name": "BasketballMP4Player.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bInvincible=True",
                    "ItemName=\"Basketball\"",
                    "Mesh=LodMesh'PGAssets.FLBasketball'",
                    "DrawScale=0.710000",
                    "CollisionRadius=10.000000",
                    "CollisionHeight=10.000000",
                    "bBounce=True",
                    "Mass=8.000000",
                    "Buoyancy=10.000000"
                ],
                "exec": [],
                "extends": "DeusExDecoration",
                "functions": {
                    "BaseChange": {
                        "body": "{\n\tif (bWasCarried)\n\t{\n\t\tAdvB = Spawn(Class'BasketballMP',Owner,,Location,Rotation);\n\t\tAdvB.Velocity = Velocity + 0.7 * Owner.Velocity;\n\t\tAdvB.SetTimer(0.5,False);\n\t\tDestroy();\n\t}\n}",
                        "locals": [
                            "local BasketballMP AdvB;"
                        ],
                        "modifiers": [],
                        "name": "BaseChange",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 27,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "BeamActor.uc": {
            "body": "//=============================================================================\n// TBeam.\n//=============================================================================\nclass BeamActor expands Effects;\n\nVar DeusExPlayer POwner,Other;\nvar vector MoveAmount;\nvar int NumPuffs;\nreplication\n{\n\t// Things the server should send to the client.\n\tunreliable if( Role==ROLE_Authority )\n\t\tMoveAmount, NumPuffs;\n}\n\n\nsimulated function Tick( float DeltaTime )\n{\n\tif ( Level.NetMode  != NM_DedicatedServer )\n\t{\n\t\tScaleGlow = (Lifespan/Default.Lifespan) * 1.0;\n\t\tAmbientGlow = ScaleGlow * 210;\n\t}\n}\n\nsimulated function PostBeginPlay()\n{\n\t\tSetTimer(0.001, false);\n}\n\nsimulated function Timer()\n{\n\tlocal BeamActor r;\n\tlocal DeusExPlayer P;\n\t\n\tP=DeusExPlayer(Owner);\n\t\n\tif (NumPuffs>0)\n\t{\n\t\tr = Spawn(class'BeamActor',P,,Location+MoveAmount);\n\t\tr.RemoteRole = ROLE_None;\n\t\tr.NumPuffs = NumPuffs -1;\n\t\tr.MoveAmount = MoveAmount;\n\t\tr.SetOwner(P);\n\t\tr.Texture = self.Texture;\n\t\tr.Skin = self.Skin;\n\t\tr.Sprite = self.Sprite;\n\t}\n}\n\ndefaultproperties\n{\n     LifeSpan=1.300000\n     DrawType=DT_Sprite\n     Style=STY_Translucent\n     Sprite=Texture'DeusExDeco.Skins.AlarmLightTex6'\n     Texture=Texture'DeusExDeco.Skins.AlarmLightTex6'\n     Skin=Texture'DeusExDeco.Skins.AlarmLightTex6'\n     bUnlit=True\n     LightBrightness=255\n     LightHue=128\n     LightRadius=2\n}\n",
            "name": "BeamActor.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "LifeSpan=1.300000",
                    "DrawType=DT_Sprite",
                    "Style=STY_Translucent",
                    "Sprite=Texture'DeusExDeco.Skins.AlarmLightTex6'",
                    "Texture=Texture'DeusExDeco.Skins.AlarmLightTex6'",
                    "Skin=Texture'DeusExDeco.Skins.AlarmLightTex6'",
                    "bUnlit=True",
                    "LightBrightness=255",
                    "LightHue=128",
                    "LightRadius=2"
                ],
                "exec": [],
                "extends": "Effects",
                "functions": {
                    "PostBeginPlay": {
                        "body": "{\n\t\tSetTimer(0.001, false);\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Tick": {
                        "body": "{\n\tif ( Level.NetMode  != NM_DedicatedServer )\n\t{\n\t\tScaleGlow = (Lifespan/Default.Lifespan) * 1.0;\n\t\tAmbientGlow = ScaleGlow * 210;\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "DeltaTime"
                            ]
                        ],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\t\n\tP=DeusExPlayer(Owner);\n\t\n\tif (NumPuffs>0)\n\t{\n\t\tr = Spawn(class'BeamActor',P,,Location+MoveAmount);\n\t\tr.RemoteRole = ROLE_None;\n\t\tr.NumPuffs = NumPuffs -1;\n\t\tr.MoveAmount = MoveAmount;\n\t\tr.SetOwner(P);\n\t\tr.Texture = self.Texture;\n\t\tr.Skin = self.Skin;\n\t\tr.Sprite = self.Sprite;\n\t}\n}",
                        "locals": [
                            "local BeamActor r;",
                            "local DeusExPlayer P;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 64,
                "replication": "",
                "states": [],
                "variables": [
                    "Var DeusExPlayer POwner,Other;",
                    "var vector MoveAmount;",
                    "var int NumPuffs;"
                ]
            }
        },
        "BeamActorPink.uc": {
            "body": "//=============================================================================\n// TBeam.\n//=============================================================================\nclass BeamActorPink expands Effects;\n\nVar DeusExPlayer POwner,Other;\nvar vector MoveAmount;\nvar int NumPuffs;\nreplication\n{\n\t// Things the server should send to the client.\n\tunreliable if( Role==ROLE_Authority )\n\t\tMoveAmount, NumPuffs;\n}\n\n\nsimulated function Tick( float DeltaTime )\n{\n\tif ( Level.NetMode  != NM_DedicatedServer )\n\t{\n\t\tScaleGlow = (Lifespan/Default.Lifespan) * 1.0;\n\t\tAmbientGlow = ScaleGlow * 210;\n\t}\n}\n\nsimulated function PostBeginPlay()\n{\n\t\tSetTimer(0.001, false);\n}\n\nsimulated function Timer()\n{\n\tlocal BeamActorPink r;\n\tlocal DeusExPlayer P;\n\t\n\tP=DeusExPlayer(Owner);\n\t\n\tif (NumPuffs>0)\n\t{\n\t\tr = Spawn(class'BeamActorPink',P,,Location+MoveAmount);\n\t\tr.RemoteRole = ROLE_None;\n\t\tr.NumPuffs = NumPuffs -1;\n\t\tr.MoveAmount = MoveAmount;\n\t\tr.SetOwner(P);\n\t\tr.Texture = self.Texture;\n\t\tr.Skin = self.Skin;\n\t\tr.Sprite = self.Sprite;\n\t}\n}\n\ndefaultproperties\n{\n     LifeSpan=1.300000\n     DrawType=DT_Sprite\n     Style=STY_Translucent\n     Sprite=Texture'PGAssets.Skins.federalpink'\n     Texture=Texture'PGAssets.Skins.federalpink'\n     Skin=Texture'PGAssets.Skins.federalpink'\n     bUnlit=True\n     LightBrightness=255\n     LightHue=128\n     LightRadius=2\n}\n",
            "name": "BeamActorPink.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "LifeSpan=1.300000",
                    "DrawType=DT_Sprite",
                    "Style=STY_Translucent",
                    "Sprite=Texture'PGAssets.Skins.federalpink'",
                    "Texture=Texture'PGAssets.Skins.federalpink'",
                    "Skin=Texture'PGAssets.Skins.federalpink'",
                    "bUnlit=True",
                    "LightBrightness=255",
                    "LightHue=128",
                    "LightRadius=2"
                ],
                "exec": [],
                "extends": "Effects",
                "functions": {
                    "PostBeginPlay": {
                        "body": "{\n\t\tSetTimer(0.001, false);\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Tick": {
                        "body": "{\n\tif ( Level.NetMode  != NM_DedicatedServer )\n\t{\n\t\tScaleGlow = (Lifespan/Default.Lifespan) * 1.0;\n\t\tAmbientGlow = ScaleGlow * 210;\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "DeltaTime"
                            ]
                        ],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\t\n\tP=DeusExPlayer(Owner);\n\t\n\tif (NumPuffs>0)\n\t{\n\t\tr = Spawn(class'BeamActorPink',P,,Location+MoveAmount);\n\t\tr.RemoteRole = ROLE_None;\n\t\tr.NumPuffs = NumPuffs -1;\n\t\tr.MoveAmount = MoveAmount;\n\t\tr.SetOwner(P);\n\t\tr.Texture = self.Texture;\n\t\tr.Skin = self.Skin;\n\t\tr.Sprite = self.Sprite;\n\t}\n}",
                        "locals": [
                            "local BeamActorPink r;",
                            "local DeusExPlayer P;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 64,
                "replication": "",
                "states": [],
                "variables": [
                    "Var DeusExPlayer POwner,Other;",
                    "var vector MoveAmount;",
                    "var int NumPuffs;"
                ]
            }
        },
        "BinocularsMP.uc": {
            "body": "//=============================================================================\n// BinocularsMP.\n//=============================================================================\nclass BinocularsMP extends DeusExPickup;\n\nvar bool bZoomed;\n\nreplication\n{\n    reliable if ((Role == ROLE_Authority) && (bNetOwner))\n        bZoomed;\n        \n    reliable if ( Role == ROLE_Authority )\n      RefreshScopeDisplay;\n}\n\nstate Activated\n{\n\tfunction Activate()\n\t{\n\t\tSuper.Activate();\n\n\t\tif (DeusExPlayer(Owner) != None)\n\t\t\tDeusExPlayer(Owner).DesiredFOV = DeusExPlayer(Owner).Default.DesiredFOV;\n\t}\n\tfunction BeginState()\n\t{\n\t\tSuper.BeginState();\n\n\t\tif (!bZoomed && (Owner != None) && Owner.IsA('DeusExPlayer'))\n\t\t{\n\t\t\t// Show the Binoculars View\n\t\t\tbZoomed = True;\n\t\t\tRefreshScopeDisplay(DeusExPlayer(Owner), False, bZoomed);\n\t\t}\n\t}\nBegin:\n}\n\nstate DeActivated\n{\n\tfunction BeginState()\n\t{\n\t\t\n\t\tSuper.BeginState();\n\t\tif (bZoomed && (Owner != None) && Owner.IsA('DeusExPlayer'))\n\t\t{\n\t\t\t// Hide the Binoculars View\n\t\t\tbZoomed = False;\n      \t\t\tRefreshScopeDisplay(DeusExPlayer(Owner), False, bZoomed);\n\t\t}\n\t}\n}\n\nsimulated function RefreshScopeDisplay(DeusExPlayer Player, bool bInstant, bool bBinocularOn)\n{\n\tif (bBinocularOn && (Player != None))\n\t{\n\t\tDeusExRootWindow(Player.rootWindow).scopeView.ActivateView(20, True, bInstant);\n\t}\n   \telse if (!bBinocularOn)\n\t{\n\t\tDeusExrootWindow(Player.rootWindow).scopeView.DeactivateView();\n\t}\n}\n\ndefaultproperties\n{\n     bActivatable=True\n     ItemName=\"Binoculars\"\n     ItemArticle=\"some\"\n     PlayerViewOffset=(X=18.000000,Z=-6.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.Binoculars'\n     PickupViewMesh=LodMesh'DeusExItems.Binoculars'\n     ThirdPersonMesh=LodMesh'DeusExItems.Binoculars'\n     LandSound=Sound'DeusExSounds.Generic.PaperHit2'\n     Icon=Texture'DeusExUI.Icons.BeltIconBinoculars'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconBinoculars'\n     largeIconWidth=49\n     largeIconHeight=34\n     Description=\"A pair of military binoculars.\"\n     beltDescription=\"BINOCS\"\n     Mesh=LodMesh'DeusExItems.Binoculars'\n     CollisionRadius=7.000000\n     CollisionHeight=2.060000\n     Mass=5.000000\n     Buoyancy=6.000000\n}\n",
            "name": "BinocularsMP.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bActivatable=True",
                    "ItemName=\"Binoculars\"",
                    "ItemArticle=\"some\"",
                    "PlayerViewOffset=(X=18.000000,Z=-6.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.Binoculars'",
                    "PickupViewMesh=LodMesh'DeusExItems.Binoculars'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.Binoculars'",
                    "LandSound=Sound'DeusExSounds.Generic.PaperHit2'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconBinoculars'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconBinoculars'",
                    "largeIconWidth=49",
                    "largeIconHeight=34",
                    "Description=\"A pair of military binoculars.\"",
                    "beltDescription=\"BINOCS\"",
                    "Mesh=LodMesh'DeusExItems.Binoculars'",
                    "CollisionRadius=7.000000",
                    "CollisionHeight=2.060000",
                    "Mass=5.000000",
                    "Buoyancy=6.000000"
                ],
                "exec": [],
                "extends": "DeusExPickup",
                "functions": {
                    "Activate": {
                        "body": "{\n\t\tSuper.Activate();\n\n\t\tif (DeusExPlayer(Owner) != None)\n\t\t\tDeusExPlayer(Owner).DesiredFOV = DeusExPlayer(Owner).Default.DesiredFOV;\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Activate",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "BeginState": {
                        "body": "{\n\t\t\n\t\tSuper.BeginState();\n\t\tif (bZoomed && (Owner != None) && Owner.IsA('DeusExPlayer'))\n\t\t{\n\t\t\t// Hide the Binoculars View\n\t\t\tbZoomed = False;\n      \t\t\tRefreshScopeDisplay(DeusExPlayer(Owner), False, bZoomed);\n\t\t}\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "BeginState",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "RefreshScopeDisplay": {
                        "body": "{\n\tif (bBinocularOn && (Player != None))\n\t{\n\t\tDeusExRootWindow(Player.rootWindow).scopeView.ActivateView(20, True, bInstant);\n\t}\n   \telse if (!bBinocularOn)\n\t{\n\t\tDeusExrootWindow(Player.rootWindow).scopeView.DeactivateView();\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "RefreshScopeDisplay",
                        "native": false,
                        "param": [
                            [
                                "DeusExPlayer",
                                "Player"
                            ],
                            [
                                "bool",
                                "bInstant"
                            ],
                            [
                                "bool",
                                "bBinocularOn"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 89,
                "replication": "",
                "states": [],
                "variables": [
                    "var bool bZoomed;"
                ]
            }
        },
        "BioArmour.uc": {
            "body": "//=============================================================================\n// AdaptiveArmor.\n//=============================================================================\nclass BioArmour extends PGArmour;\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\ndefaultproperties\n{\n     Dur=100\n     Def=10\n     bResistPoison=True\n     ItemName=\"Bio Armour\"\n     beltDescription=\"BIO\"\n}\n",
            "name": "BioArmour.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "Dur=100",
                    "Def=10",
                    "bResistPoison=True",
                    "ItemName=\"Bio Armour\"",
                    "beltDescription=\"BIO\""
                ],
                "exec": [],
                "extends": "PGArmour",
                "functions": {
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 19,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "Boner.uc": {
            "body": "//=============================================================================\n// Shuriken.\n//=============================================================================\nclass Boner extends DeusExProjectile;\n\nvar float\tmpDamage;\nvar int\t\tmpAccurateRange;\nvar int\t\tmpMaxRange;\n\n// set it's rotation correctly\nsimulated function Tick(float deltaTime)\n{\n\tlocal Rotator rot;\n\n\tif (bStuck)\n\t\treturn;\n\n\tSuper.Tick(deltaTime);\n\n\tif (Level.Netmode != NM_DedicatedServer)\n\t{\n\t\trot = Rotation;\n\t\trot.Roll += 16384;\n\t\trot.Pitch -= 13384;\n\t\tSetRotation(rot);\n\t}\n}\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tDamage = mpDamage;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t}\n}\n\nauto simulated state Flying\n{\n\tsimulated function ProcessTouch (Actor Other, Vector HitLocation)\n\t{\n\t\tif (bStuck)\n\t\t\treturn;\n\n\t\tif ((Other != instigator) && (DeusExProjectile(Other) == None) &&\n\t\t\t(Other != Owner))\n\t\t{\n\t\t\tdamagee = Other;\n\t\t\tExplode(HitLocation, Normal(HitLocation-damagee.Location));\n\n         // DEUS_EX AMSD Spawn blood server side only\n         if (Role == ROLE_Authority)\n\t\t\t{\n            if (damagee.IsA('Pawn') && !damagee.IsA('Robot') && bBlood)\n               SpawnBlood(HitLocation, Normal(HitLocation-damagee.Location));\n\t\t\t   \t\tif(StickyPayload())\n\t\t\t\t\t{\n\t\t\t\t\t\tAttachPayload();\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tsimulated function HitWall(vector HitNormal, actor Wall)\n\t{\n\t\tif (bStickToWall)\n\t\t{\n\t\t\tVelocity = vect(0,0,0);\n\t\t\tAcceleration = vect(0,0,0);\n\t\t\tSetPhysics(PHYS_None);\n\t\t\tbStuck = True;\n\n\t\t\t// MBCODE: Do this only on server side\n\t\t\tif ( Role == ROLE_Authority )\n\t\t\t{\n            if (Level.NetMode != NM_Standalone)\n               SetTimer(5.0,False);\n\n\t\t\t\tif (Wall.IsA('Mover'))\n\t\t\t\t{\n\t\t\t\t\tSetBase(Wall);\n\t\t\t\t\tWall.TakeDamage(Damage, Pawn(Owner), Wall.Location, MomentumTransfer*Normal(Velocity), damageType);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (Wall.IsA('BreakableGlass'))\n\t\t\tbDebris = False;\n\n\t\tSpawnEffects(Location, HitNormal, Wall);\n\t\tif(StickyPayload())\n\t\t{\n\t\t\tAttachPayload();\n\t\t}\n\t\tSuper.HitWall(HitNormal, Wall);\n\t}\n\tsimulated function Explode(vector HitLocation, vector HitNormal)\n\t{\n\t\tlocal bool bDestroy;\n\t\tlocal float rad;\n\n      // Reduce damage on nano exploded projectiles\n      if ((bAggressiveExploded) && (Level.NetMode != NM_Standalone))\n         Damage = Damage/6;\n\n\t\tbDestroy = false;\n\n\t\tif (bExplodes)\n\t\t{\n         //DEUS_EX AMSD Don't draw effects on dedicated server\n         if ((Level.NetMode != NM_DedicatedServer) || (Role < ROLE_Authority))\t\t\t\n            DrawExplosionEffects(HitLocation, HitNormal);\n\n\t\t\tGotoState('Exploding');\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Server side only\n\t\t\tif ( Role == ROLE_Authority )\n\t\t\t{\n\t\t\t\tif ((damagee != None)) // Don't even attempt damage with a tracer\n\t\t\t\t{\n\t\t\t\t\tif ( Level.NetMode != NM_Standalone )\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( damagee.IsA('DeusExPlayer') )\n\t\t\t\t\t\t\tDeusExPlayer(damagee).myProjKiller = Self;\n\t\t\t\t\t}\n\t\t\t\t\tdamagee.TakeDamage(Damage, Pawn(Owner), HitLocation, MomentumTransfer*Normal(Velocity), damageType);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!bStuck)\n\t\t\t\tbDestroy = true;\n\t\t}\n\n\t\trad = Max(blastRadius*24, 1024);\n\n\t\t// This needs to be outside the simulated call chain\n\t\tPlayImpactSound();\n\n      //DEUS_EX AMSD Only do these server side\n      if (Role == ROLE_Authority)\n      {\n         if (ImpactSound != None)\n         {\n            AISendEvent('LoudNoise', EAITYPE_Audio, 2.0, blastRadius*24);\n            if (bExplodes)\n               AISendEvent('WeaponFire', EAITYPE_Audio, 2.0, blastRadius*5);\n         }\n      }\n\t\tif (bDestroy)\n\t\t\tDestroy();\n\t}\n\tsimulated function BeginState()\n\t{\n\t\tlocal DeusExWeapon W;\n\n\t\tinitLoc = Location;\n\t\tinitDir = vector(Rotation);\t\n\t\tVelocity = speed*initDir;\n\t\tPlaySound(SpawnSound, SLOT_None);\n\t}\n}\n\nfunction bool StickyPayload()\n{\nlocal WeaponBoner WBoner;\n\tforeach AllActors(class'WeaponBoner',WBoner)\n\t{\n\t\tif(WBoner.Owner == Owner)\n\t\t{\n\t\t\tif(WBoner.bStickyPayload)\n\t\t\t{\n\t\t\t\treturn True;\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction AttachPayload()\n{\nlocal BonerPayload BP;\nlocal int Payloads;\n\n\tforeach AllActors(class'BonerPayload', BP)\n\t{\n\t\tif(BP.Payloader == DeusExPlayer(Owner))\n\t\t{\n\t\t\tPayloads++;\n\t\t}\n\t}\n\t\n\tif(Payloads > 10)\n\t{\n\t\treturn;\n\t}\n\t\nBP = Spawn(class'BonerPayload',,,Location);\nBP.Payloader = DeusExPlayer(Owner);\n}\n\ndefaultproperties\n{\n     mpDamage=65.000000\n     mpAccurateRange=640\n     mpMaxRange=640\n     bExplodes=True\n     bBlood=True\n     blastRadius=64.000000\n     DamageType=shot\n     AccurateRange=640\n     maxRange=1280\n     bIgnoresNanoDefense=True\n     ItemName=\"Boner\"\n     ItemArticle=\"the\"\n     speed=1000.000000\n     MaxSpeed=1000.000000\n     Damage=100.000000\n     MomentumTransfer=128\n     ImpactSound=Sound'DeusExSounds.Generic.BulletHitFlesh'\n     Mesh=LodMesh'DeusExDeco.BoneFemur'\n     CollisionRadius=12.650000\n     CollisionHeight=0.800000\n}\n",
            "name": "Boner.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "mpDamage=65.000000",
                    "mpAccurateRange=640",
                    "mpMaxRange=640",
                    "bExplodes=True",
                    "bBlood=True",
                    "blastRadius=64.000000",
                    "DamageType=shot",
                    "AccurateRange=640",
                    "maxRange=1280",
                    "bIgnoresNanoDefense=True",
                    "ItemName=\"Boner\"",
                    "ItemArticle=\"the\"",
                    "speed=1000.000000",
                    "MaxSpeed=1000.000000",
                    "Damage=100.000000",
                    "MomentumTransfer=128",
                    "ImpactSound=Sound'DeusExSounds.Generic.BulletHitFlesh'",
                    "Mesh=LodMesh'DeusExDeco.BoneFemur'",
                    "CollisionRadius=12.650000",
                    "CollisionHeight=0.800000"
                ],
                "exec": [],
                "extends": "DeusExProjectile",
                "functions": {
                    "AttachPayload": {
                        "body": "{\n\n\tforeach AllActors(class'BonerPayload', BP)\n\t{\n\t\tif(BP.Payloader == DeusExPlayer(Owner))\n\t\t{\n\t\t\tPayloads++;\n\t\t}\n\t}\n\t\n\tif(Payloads > 10)\n\t{\n\t\treturn;\n\t}\n\t\nBP = Spawn(class'BonerPayload',,,Location);\nBP.Payloader = DeusExPlayer(Owner);\n}",
                        "locals": [
                            "local BonerPayload BP;",
                            "local int Payloads;"
                        ],
                        "modifiers": [],
                        "name": "AttachPayload",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "BeginState": {
                        "body": "{\n\n\t\tinitLoc = Location;\n\t\tinitDir = vector(Rotation);\t\n\t\tVelocity = speed*initDir;\n\t\tPlaySound(SpawnSound, SLOT_None);\n\t}",
                        "locals": [
                            "local DeusExWeapon W;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "BeginState",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Explode": {
                        "body": "{\n\n      // Reduce damage on nano exploded projectiles\n      if ((bAggressiveExploded) && (Level.NetMode != NM_Standalone))\n         Damage = Damage/6;\n\n\t\tbDestroy = false;\n\n\t\tif (bExplodes)\n\t\t{\n         //DEUS_EX AMSD Don't draw effects on dedicated server\n         if ((Level.NetMode != NM_DedicatedServer) || (Role < ROLE_Authority))\t\t\t\n            DrawExplosionEffects(HitLocation, HitNormal);\n\n\t\t\tGotoState('Exploding');\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Server side only\n\t\t\tif ( Role == ROLE_Authority )\n\t\t\t{\n\t\t\t\tif ((damagee != None)) // Don't even attempt damage with a tracer\n\t\t\t\t{\n\t\t\t\t\tif ( Level.NetMode != NM_Standalone )\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( damagee.IsA('DeusExPlayer') )\n\t\t\t\t\t\t\tDeusExPlayer(damagee).myProjKiller = Self;\n\t\t\t\t\t}\n\t\t\t\t\tdamagee.TakeDamage(Damage, Pawn(Owner), HitLocation, MomentumTransfer*Normal(Velocity), damageType);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!bStuck)\n\t\t\t\tbDestroy = true;\n\t\t}\n\n\t\trad = Max(blastRadius*24, 1024);\n\n\t\t// This needs to be outside the simulated call chain\n\t\tPlayImpactSound();\n\n      //DEUS_EX AMSD Only do these server side\n      if (Role == ROLE_Authority)\n      {\n         if (ImpactSound != None)\n         {\n            AISendEvent('LoudNoise', EAITYPE_Audio, 2.0, blastRadius*24);\n            if (bExplodes)\n               AISendEvent('WeaponFire', EAITYPE_Audio, 2.0, blastRadius*5);\n         }\n      }\n\t\tif (bDestroy)\n\t\t\tDestroy();\n\t}",
                        "locals": [
                            "local bool bDestroy;",
                            "local float rad;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Explode",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "HitLocation"
                            ],
                            [
                                "vector",
                                "HitNormal"
                            ]
                        ],
                        "return": ""
                    },
                    "HitWall": {
                        "body": "{\n\t\tif (bStickToWall)\n\t\t{\n\t\t\tVelocity = vect(0,0,0);\n\t\t\tAcceleration = vect(0,0,0);\n\t\t\tSetPhysics(PHYS_None);\n\t\t\tbStuck = True;\n\n\t\t\t// MBCODE: Do this only on server side\n\t\t\tif ( Role == ROLE_Authority )\n\t\t\t{\n            if (Level.NetMode != NM_Standalone)\n               SetTimer(5.0,False);\n\n\t\t\t\tif (Wall.IsA('Mover'))\n\t\t\t\t{\n\t\t\t\t\tSetBase(Wall);\n\t\t\t\t\tWall.TakeDamage(Damage, Pawn(Owner), Wall.Location, MomentumTransfer*Normal(Velocity), damageType);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (Wall.IsA('BreakableGlass'))\n\t\t\tbDebris = False;\n\n\t\tSpawnEffects(Location, HitNormal, Wall);\n\t\tif(StickyPayload())\n\t\t{\n\t\t\tAttachPayload();\n\t\t}\n\t\tSuper.HitWall(HitNormal, Wall);\n\t}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "HitWall",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "HitNormal"
                            ],
                            [
                                "actor",
                                "Wall"
                            ]
                        ],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tDamage = mpDamage;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ProcessTouch": {
                        "body": "{\n\t\tif (bStuck)\n\t\t\treturn;\n\n\t\tif ((Other != instigator) && (DeusExProjectile(Other) == None) &&\n\t\t\t(Other != Owner))\n\t\t{\n\t\t\tdamagee = Other;\n\t\t\tExplode(HitLocation, Normal(HitLocation-damagee.Location));\n\n         // DEUS_EX AMSD Spawn blood server side only\n         if (Role == ROLE_Authority)\n\t\t\t{\n            if (damagee.IsA('Pawn') && !damagee.IsA('Robot') && bBlood)\n               SpawnBlood(HitLocation, Normal(HitLocation-damagee.Location));\n\t\t\t   \t\tif(StickyPayload())\n\t\t\t\t\t{\n\t\t\t\t\t\tAttachPayload();\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "ProcessTouch",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Other"
                            ],
                            [
                                "Vector",
                                "HitLocation"
                            ]
                        ],
                        "return": ""
                    },
                    "StickyPayload": {
                        "body": "{\n\tforeach AllActors(class'WeaponBoner',WBoner)\n\t{\n\t\tif(WBoner.Owner == Owner)\n\t\t{\n\t\t\tif(WBoner.bStickyPayload)\n\t\t\t{\n\t\t\t\treturn True;\n\t\t\t}\n\t\t}\n\t}\n}",
                        "locals": [
                            "local WeaponBoner WBoner;"
                        ],
                        "modifiers": [],
                        "name": "StickyPayload",
                        "native": false,
                        "param": [],
                        "return": "bool"
                    },
                    "Tick": {
                        "body": "{\n\n\tif (bStuck)\n\t\treturn;\n\n\tSuper.Tick(deltaTime);\n\n\tif (Level.Netmode != NM_DedicatedServer)\n\t{\n\t\trot = Rotation;\n\t\trot.Roll += 16384;\n\t\trot.Pitch -= 13384;\n\t\tSetRotation(rot);\n\t}\n}",
                        "locals": [
                            "local Rotator rot;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltaTime"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 227,
                "replication": "",
                "states": [],
                "variables": [
                    "var float\tmpDamage;",
                    "var int\t\tmpAccurateRange;",
                    "var int\t\tmpMaxRange;"
                ]
            }
        },
        "BonerPayload.uc": {
            "body": "//=============================================\n// MSGR object\n//=============================================\nClass BonerPayload extends DeusExDecoration;\n\nvar DeusExPlayer Payloader;\nvar bool bReturning;\n\nfunction PostBeginPlay()\n{\nlocal int Payloads;\nlocal BonerPayload BP;\n\tforeach AllActors(class'BonerPayload', BP)\n\t{\n\t\tif(BP.Payloader == Payloader)\n\t\t{\n\t\t\tPayloads++;\n\t\t}\n\t}\n\tif(Payloads > 10)\n\t{\n\t\tDestroy();\n\t}\n}\n\nfunction Tick(float v)\n{\t\t\n\tif(!bReturning)\n\t{\n\t\tDrawscale+=0.02;\n\t\tif(Drawscale >= 1.5)\n\t\t{\n\t\t\tbReturning=True;\n\t\t}\n\t}\n\telse\n\t{\n\t\tDrawscale-=0.02;\n\t\tif(Drawscale <= 1.0)\n\t\t{\n\t\t\tbReturning=False;\n\t\t}\n\t}\n\n}\n\nfunction BlowLoad()\n{\n\tlocal SphereEffect sphere;\n\tlocal ScorchMark s;\n\tlocal ExplosionLight light;\n\tlocal int i;\n\tlocal float explosionDamage;\n\tlocal float explosionRadius;\n\n\texplosionDamage = 100;\n\texplosionRadius = 400;\n\n\t// alert NPCs that I'm exploding\n\tAISendEvent('LoudNoise', EAITYPE_Audio, , explosionRadius*16);\n\tPlaySound(Sound'LargeExplosion1', SLOT_None,,, explosionRadius*16);\n\n\t// draw a pretty explosion\n\tlight = Spawn(class'ExplosionLight',,, Location);\n\tif (light != None)\n\t\tlight.size = 4;\n\n\tSpawn(class'ExplosionSmall',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionLarge',,, Location + 2*VRand()*CollisionRadius);\n\n\tsphere = Spawn(class'SphereEffect',,, Location);\n\tif (sphere != None)\n\t\tsphere.size = explosionRadius / 32.0;\n\n\t// spawn a mark\n\ts = spawn(class'ScorchMark', Base,, Location-vect(0,0,1)*CollisionHeight, Rotation+rot(16384,0,0));\n\tif (s != None)\n\t{\n\t\ts.DrawScale = FClamp(explosionDamage/30, 0.1, 3.0);\n\t\ts.ReattachDecal();\n\t}\n\n\tHurtRadius(explosionDamage, explosionRadius, 'Exploded', explosionDamage*100, Location);\n\tDestroy();\n}\n\ndefaultproperties\n{\n     bInvincible=True\n     bHighlight=False\n     bCanBeBase=True\n     Physics=PHYS_None\n     DrawType=DT_Sprite\n     Style=STY_Translucent\n     Sprite=FireTexture'Effects.Laser.LaserSpot1'\n     Texture=FireTexture'Effects.Laser.LaserSpot1'\n     Skin=FireTexture'Effects.Laser.LaserSpot1'\n     CollisionRadius=5.200001\n     CollisionHeight=5.000000\n}\n",
            "name": "BonerPayload.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bInvincible=True",
                    "bHighlight=False",
                    "bCanBeBase=True",
                    "Physics=PHYS_None",
                    "DrawType=DT_Sprite",
                    "Style=STY_Translucent",
                    "Sprite=FireTexture'Effects.Laser.LaserSpot1'",
                    "Texture=FireTexture'Effects.Laser.LaserSpot1'",
                    "Skin=FireTexture'Effects.Laser.LaserSpot1'",
                    "CollisionRadius=5.200001",
                    "CollisionHeight=5.000000"
                ],
                "exec": [],
                "extends": "DeusExDecoration",
                "functions": {
                    "BlowLoad": {
                        "body": "{\n\n\texplosionDamage = 100;\n\texplosionRadius = 400;\n\n\t// alert NPCs that I'm exploding\n\tAISendEvent('LoudNoise', EAITYPE_Audio, , explosionRadius*16);\n\tPlaySound(Sound'LargeExplosion1', SLOT_None,,, explosionRadius*16);\n\n\t// draw a pretty explosion\n\tlight = Spawn(class'ExplosionLight',,, Location);\n\tif (light != None)\n\t\tlight.size = 4;\n\n\tSpawn(class'ExplosionSmall',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionLarge',,, Location + 2*VRand()*CollisionRadius);\n\n\tsphere = Spawn(class'SphereEffect',,, Location);\n\tif (sphere != None)\n\t\tsphere.size = explosionRadius / 32.0;\n\n\t// spawn a mark\n\ts = spawn(class'ScorchMark', Base,, Location-vect(0,0,1)*CollisionHeight, Rotation+rot(16384,0,0));\n\tif (s != None)\n\t{\n\t\ts.DrawScale = FClamp(explosionDamage/30, 0.1, 3.0);\n\t\ts.ReattachDecal();\n\t}\n\n\tHurtRadius(explosionDamage, explosionRadius, 'Exploded', explosionDamage*100, Location);\n\tDestroy();\n}",
                        "locals": [
                            "local SphereEffect sphere;",
                            "local ScorchMark s;",
                            "local ExplosionLight light;",
                            "local int i;",
                            "local float explosionDamage;",
                            "local float explosionRadius;"
                        ],
                        "modifiers": [],
                        "name": "BlowLoad",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PostBeginPlay": {
                        "body": "{\n\tforeach AllActors(class'BonerPayload', BP)\n\t{\n\t\tif(BP.Payloader == Payloader)\n\t\t{\n\t\t\tPayloads++;\n\t\t}\n\t}\n\tif(Payloads > 10)\n\t{\n\t\tDestroy();\n\t}\n}",
                        "locals": [
                            "local int Payloads;",
                            "local BonerPayload BP;"
                        ],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Tick": {
                        "body": "{\t\t\n\tif(!bReturning)\n\t{\n\t\tDrawscale+=0.02;\n\t\tif(Drawscale >= 1.5)\n\t\t{\n\t\t\tbReturning=True;\n\t\t}\n\t}\n\telse\n\t{\n\t\tDrawscale-=0.02;\n\t\tif(Drawscale <= 1.0)\n\t\t{\n\t\t\tbReturning=False;\n\t\t}\n\t}\n\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "v"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 103,
                "replication": "",
                "states": [],
                "variables": [
                    "var DeusExPlayer Payloader;",
                    "var bool bReturning;"
                ]
            }
        },
        "BotADS.uc": {
            "body": "class BotADS extends Actor;\n\nvar Pawn P;\nvar int AdsEnergy;\nvar bool AdsUnlimited;\n\nfunction Timer()\n{\n\tlocal DeusExProjectile minproj;\n\tlocal float mindist;\n\n\tif(!AdsUnlimited && AdsEnergy <= 0)\n\t\treturn;\n\t\n\tforeach P.VisibleActors(class'DeusExProjectile', minproj, 1028)\n\t{\n\t\tif (minproj != None && ValidProjectile(minProj))\n\t\t{\n\t\t\tmindist = VSize(P.Location - minproj.Location);\n\t\t\t\n\t\t\tif(!AdsUnlimited && AdsEnergy > 0)\n\t\t\t\tAdsEnergy--;\n\n\t\t\tif (mindist > 480 && mindist < 1028)\n\t\t\t{\n\t\t\t\tP.PlaySound(sound'GEPGunLock', SLOT_None,,,, 2.0);\n\t\t\t}\n\t\t\t\n\t\t\tif (mindist < 480)\n\t\t\t{\n\t\t\t\tminproj.bAggressiveExploded=True;\n\t\t\t\tminproj.Explode(minproj.Location, vect(0,0,1));\n\t\t\t\tP.PlaySound(sound'ProdFire', SLOT_None,,,, 2.0);\n\t\t\t}\n\t\t}\n\t}\n\n\tif(P == None || P.Health <= 0)\n\t\tDestroy();\n}\n\nfunction bool ValidProjectile(DeusExProjectile proj)\n{\n   local bool bValidProj;\n\n      if (Level.NetMode != NM_Standalone)\n         bValidProj = !proj.bIgnoresNanoDefense;\n      else\n         bValidProj = (!proj.IsA('Cloud') && !proj.IsA('Tracer') && !proj.IsA('GreaselSpit') && !proj.IsA('GraySpit'));\n\n      if (bValidProj)\n      {\n         // make sure we don't own it\n         if (proj.Owner != P)\n         {\n\t\t\t // NEW: Ignore other \"Enemy\" class bots and our custom robots.\n\t\t\tif (DXEnemy(Proj.Owner) == None && DXRobot(Proj.Owner) == None)\n\t\t\t{\n\t\t\t\t// make sure it's moving fast enough\n\t\t\t\tif (VSize(proj.Velocity) > 100)\n\t\t\t\t{\n\t\t\t\t   return true;\n\t\t\t\t}\n\t\t\t}\n         }\n      }\n}\n\ndefaultproperties\n{\n     bHidden=True\n}\n",
            "name": "BotADS.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bHidden=True"
                ],
                "exec": [],
                "extends": "Actor",
                "functions": {
                    "Timer": {
                        "body": "{\n\n\tif(!AdsUnlimited && AdsEnergy <= 0)\n\t\treturn;\n\t\n\tforeach P.VisibleActors(class'DeusExProjectile', minproj, 1028)\n\t{\n\t\tif (minproj != None && ValidProjectile(minProj))\n\t\t{\n\t\t\tmindist = VSize(P.Location - minproj.Location);\n\t\t\t\n\t\t\tif(!AdsUnlimited && AdsEnergy > 0)\n\t\t\t\tAdsEnergy--;\n\n\t\t\tif (mindist > 480 && mindist < 1028)\n\t\t\t{\n\t\t\t\tP.PlaySound(sound'GEPGunLock', SLOT_None,,,, 2.0);\n\t\t\t}\n\t\t\t\n\t\t\tif (mindist < 480)\n\t\t\t{\n\t\t\t\tminproj.bAggressiveExploded=True;\n\t\t\t\tminproj.Explode(minproj.Location, vect(0,0,1));\n\t\t\t\tP.PlaySound(sound'ProdFire', SLOT_None,,,, 2.0);\n\t\t\t}\n\t\t}\n\t}\n\n\tif(P == None || P.Health <= 0)\n\t\tDestroy();\n}",
                        "locals": [
                            "local DeusExProjectile minproj;",
                            "local float mindist;"
                        ],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ValidProjectile": {
                        "body": "{\n\n      if (Level.NetMode != NM_Standalone)\n         bValidProj = !proj.bIgnoresNanoDefense;\n      else\n         bValidProj = (!proj.IsA('Cloud') && !proj.IsA('Tracer') && !proj.IsA('GreaselSpit') && !proj.IsA('GraySpit'));\n\n      if (bValidProj)\n      {\n         // make sure we don't own it\n         if (proj.Owner != P)\n         {\n\t\t\t // NEW: Ignore other \"Enemy\" class bots and our custom robots.\n\t\t\tif (DXEnemy(Proj.Owner) == None && DXRobot(Proj.Owner) == None)\n\t\t\t{\n\t\t\t\t// make sure it's moving fast enough\n\t\t\t\tif (VSize(proj.Velocity) > 100)\n\t\t\t\t{\n\t\t\t\t   return true;\n\t\t\t\t}\n\t\t\t}\n         }\n      }\n}",
                        "locals": [
                            "local bool bValidProj;"
                        ],
                        "modifiers": [],
                        "name": "ValidProjectile",
                        "native": false,
                        "param": [
                            [
                                "DeusExProjectile",
                                "proj"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 73,
                "replication": "",
                "states": [],
                "variables": [
                    "var Pawn P;",
                    "var int AdsEnergy;",
                    "var bool AdsUnlimited;"
                ]
            }
        },
        "BowenViewportWindow.uc": {
            "body": "//=============================================================================\n// BowenViewportWindow. \t(c) 2003 JimBowen  \n// (but also with a f***load copied from AugmentationDisplayWindow, for the night vision effect)\n//=============================================================================\nclass BowenViewportWindow expands ViewportWindow;\n\nvar trocket projowner;\nvar float TestTime;\n\nvar(Bowen) Color colBackground;\nvar(Bowen) Color colBorder;\nvar(Bowen) Color colHeaderText;\nvar(Bowen) Color colText;\n\nvar bool bVisionActive;\nvar(Bowen) int visionLevel;\nvar(Bowen) float visionLevelValue;\nvar int activeCount;\n\nvar(Bowen) float margin;\nvar(Bowen) float corner;\n\nvar Actor VisionBlinder; //So the same thing doesn't blind me twice.\n\nvar int VisionTargetStatus; //For picking see through wall texture\nconst VISIONENEMY = 1;\nconst VISIONALLY = 2;\nconst VISIONNEUTRAL = 0;\n\nvar (Bowen) String msgLightAmpActive;\nvar (Bowen) String msgIRAmpActive;\n\nvar DeusExPlayer Player;\n\nevent InitWindow()\n{\n\tSuper.InitWindow();\n\tbTickEnabled = True;\n}\n\nfunction tick (float deltatime)\n{\n\tPlayer = DeusExPlayer(ProjOwner.Owner);\n\t\t\n\tif(ProjOwner.bExploded)\n\t\tDestroy();\n}\n\n//---END-CLASS---\n\ndefaultproperties\n{\n     colBackground=(R=128,G=128,B=128)\n     colBorder=(R=128,G=128,B=128)\n     colHeaderText=(R=255,G=255,B=255)\n     colText=(R=255,G=255,B=255)\n     visionLevel=1\n     visionLevelValue=1000000.000000\n     margin=4.000000\n     corner=9.000000\n     msgLightAmpActive=\"LightAmp Active\"\n     msgIRAmpActive=\"IRAmp Active\"\n}\n",
            "name": "BowenViewportWindow.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "colBackground=(R=128,G=128,B=128)",
                    "colBorder=(R=128,G=128,B=128)",
                    "colHeaderText=(R=255,G=255,B=255)",
                    "colText=(R=255,G=255,B=255)",
                    "visionLevel=1",
                    "visionLevelValue=1000000.000000",
                    "margin=4.000000",
                    "corner=9.000000",
                    "msgLightAmpActive=\"LightAmp Active\"",
                    "msgIRAmpActive=\"IRAmp Active\""
                ],
                "exec": [],
                "extends": "ViewportWindow",
                "functions": {
                    "InitWindow": {
                        "body": "{\n\tSuper.InitWindow();\n\tbTickEnabled = True;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "InitWindow",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "tick": {
                        "body": "{\n\tPlayer = DeusExPlayer(ProjOwner.Owner);\n\t\t\n\tif(ProjOwner.bExploded)\n\t\tDestroy();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltatime"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 64,
                "replication": "",
                "states": [],
                "variables": [
                    "var trocket projowner;",
                    "var float TestTime;",
                    "var(Bowen) Color colBackground;",
                    "var(Bowen) Color colBorder;",
                    "var(Bowen) Color colHeaderText;",
                    "var(Bowen) Color colText;",
                    "var bool bVisionActive;",
                    "var(Bowen) int visionLevel;",
                    "var(Bowen) float visionLevelValue;",
                    "var int activeCount;",
                    "var(Bowen) float margin;",
                    "var(Bowen) float corner;",
                    "var Actor VisionBlinder; //So the same thing doesn't blind me twice.",
                    "var int VisionTargetStatus; //For picking see through wall texture",
                    "var (Bowen) String msgLightAmpActive;",
                    "var (Bowen) String msgIRAmpActive;",
                    "var DeusExPlayer Player;"
                ]
            }
        },
        "BoxKiller.uc": {
            "body": "class BoxKiller extends Rocket;\n\nstate Exploding\n{\n\tignores ProcessTouch, HitWall, Explode;\n\n   function DamageRing()\n   {\n\t\tlocal Pawn apawn;\n\t\tlocal float damageRadius;\n\t\tlocal Vector dist;\n\t\tlocal ProjectileGenerator Projy;\n\t\n\t\tlocal box bawks;\n\t\tlocal ScriptedPawn pwn;\n\n\tforeach VisibleActors(class'Box',bawks,blastRadius)\n\t{\n\t\tbawks.lifespan = 0.1;\n\t}\n\t\tif ( Level.NetMode != NM_Standalone )\n\t\t{\n\t\t\tdamageRadius = (blastRadius / gradualHurtSteps) * gradualHurtCounter;\n\n\t\t\tfor ( apawn = Level.PawnList; apawn != None; apawn = apawn.nextPawn )\n\t\t\t{\n\t\t\t\tif ( apawn.IsA('DeusExPlayer') )\n\t\t\t\t{\n\t\t\t\t\tdist = apawn.Location - Location;\n\t\t\t\t\tif ( VSize(dist) < damageRadius )\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( gradualHurtCounter <= 2 )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif ( apawn.FastTrace( apawn.Location, Location ))\n\t\t\t\t\t\t\t\tDeusExPlayer(apawn).myProjKiller = Self;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tDeusExPlayer(apawn).myProjKiller = Self;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n      //DEUS_EX AMSD Ignore Line of Sight on the lowest radius check, only in multiplayer\n\t\tHurtRadius\n\t\t(\n\t\t\t(2 * Damage) / gradualHurtSteps,\n\t\t\t(blastRadius / gradualHurtSteps) * gradualHurtCounter,\n\t\t\tdamageType,\n\t\t\tMomentumTransfer / gradualHurtSteps,\n\t\t\tLocation,\n         ((gradualHurtCounter <= 2) && (Level.NetMode != NM_Standalone))\n\t\t);\n   }\n\n\tfunction Timer()\n\t{\n\t\tgradualHurtCounter++;\n      DamageRing();\n\t\tif (gradualHurtCounter >= gradualHurtSteps)\n\t\t\tDestroy();\n\t}\n\nBegin:\n\t// stagger the HurtRadius outward using Timer()\n\t// do five separate blast rings increasing in size\n\tgradualHurtCounter = 1;\n\tgradualHurtSteps = 5;\n\tVelocity = vect(0,0,0);\n\tbHidden = True;\n\tLightType = LT_None;\n\tSetCollision(False, False, False);\n   DamageRing();\n\tSetTimer(0.25/float(gradualHurtSteps), True);\n}\n\nsimulated function DrawExplosionEffects(vector HitLocation, vector HitNormal)\n{\nlocal box player;\nlocal ScriptedPawn pwn;\n\n\tforeach VisibleActors(class'Box',player,100)\n\t{\n\t\tplayer.Destroy();\n\t}\n}\n\ndefaultproperties\n{\n}\n",
            "name": "BoxKiller.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "Rocket",
                "functions": {
                    "DamageRing": {
                        "body": "{\n\t\n\n\tforeach VisibleActors(class'Box',bawks,blastRadius)\n\t{\n\t\tbawks.lifespan = 0.1;\n\t}\n\t\tif ( Level.NetMode != NM_Standalone )\n\t\t{\n\t\t\tdamageRadius = (blastRadius / gradualHurtSteps) * gradualHurtCounter;\n\n\t\t\tfor ( apawn = Level.PawnList; apawn != None; apawn = apawn.nextPawn )\n\t\t\t{\n\t\t\t\tif ( apawn.IsA('DeusExPlayer') )\n\t\t\t\t{\n\t\t\t\t\tdist = apawn.Location - Location;\n\t\t\t\t\tif ( VSize(dist) < damageRadius )\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( gradualHurtCounter <= 2 )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif ( apawn.FastTrace( apawn.Location, Location ))\n\t\t\t\t\t\t\t\tDeusExPlayer(apawn).myProjKiller = Self;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tDeusExPlayer(apawn).myProjKiller = Self;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n      //DEUS_EX AMSD Ignore Line of Sight on the lowest radius check, only in multiplayer\n\t\tHurtRadius\n\t\t(\n\t\t\t(2 * Damage) / gradualHurtSteps,\n\t\t\t(blastRadius / gradualHurtSteps) * gradualHurtCounter,\n\t\t\tdamageType,\n\t\t\tMomentumTransfer / gradualHurtSteps,\n\t\t\tLocation,\n         ((gradualHurtCounter <= 2) && (Level.NetMode != NM_Standalone))\n\t\t);\n   }",
                        "locals": [
                            "local Pawn apawn;",
                            "local float damageRadius;",
                            "local Vector dist;",
                            "local ProjectileGenerator Projy;",
                            "local box bawks;",
                            "local ScriptedPawn pwn;"
                        ],
                        "modifiers": [],
                        "name": "DamageRing",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "DrawExplosionEffects": {
                        "body": "{\n\n\tforeach VisibleActors(class'Box',player,100)\n\t{\n\t\tplayer.Destroy();\n\t}\n}",
                        "locals": [
                            "local box player;",
                            "local ScriptedPawn pwn;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "DrawExplosionEffects",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "HitLocation"
                            ],
                            [
                                "vector",
                                "HitNormal"
                            ]
                        ],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\t\tgradualHurtCounter++;\n      DamageRing();\n\t\tif (gradualHurtCounter >= gradualHurtSteps)\n\t\t\tDestroy();\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 90,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "BoxSizeWindow.uc": {
            "body": "//=============================================================================\n// BoxSizeWindow.\n//=============================================================================\nclass BoxSizeWindow expands MenuUIWindow;\n\nvar MenuUIActionButtonWindow okButton;\nvar MenuUIActionButtonWindow defaultButton;\nvar MenuUIActionButtonWindow exitButton;\nvar MenuUIEditWindow sizeWindow;\nvar MenuUIHeaderWindow winText;\nvar localized string okButtonText;\nvar localized string defaultButtonText;\nvar localized string exitButtonText;\nvar WeaponBoxGun _windowOwner;\nvar float _boxSize;\n\nevent InitWindow()\n{\n   local Window W;\n\n   Super.InitWindow();\n\n   winClient.SetBackground(Texture'DeusExUI.MaskTexture');\n   winClient.SetBackgroundStyle(DSTY_Modulated);\n\n   W = winClient.NewChild(Class'Window');\n   W.SetSize(ClientWidth, ClientHeight);\n   W.SetBackground(Texture'DeusExUI.MaskTexture');\n   W.SetBackgroundStyle(DSTY_Modulated);\n   W.Lower();\n\n   sizeWindow = CreateMenuEditWindow(60, 45, 70, 30, winClient);\n\n   okButton = winButtonBar.AddButton(okButtonText, HALIGN_Right);\n   exitButton = winButtonBar.AddButton(exitButtonText, HALIGN_Left);\n   defaultButton = winButtonBar.AddButton(defaultButtonText, HALIGN_Center);\n\n   sizeWindow.setText(\"1.00000\");\n   SetTitle(\"Box Size\");\n}\n\nfunction bool ButtonActivated( Window buttonPressed )\n{\n\tlocal bool bHandled;\n\n\tbHandled = True;\n\n\tSuper.ButtonActivated(buttonPressed);\n\n\tswitch( buttonPressed )\n\t{\n\t\tcase okButton:\n\t\t\t// Do stuff\n\t\t\tif(float(sizeWindow.GetText()) > 5)\n\t\t\t\tsizeWindow.setText(\"5.00000\");\n\n\t\t\t_windowOwner.setSize(float(sizeWindow.GetText()), 1);\n\t\t\t//root.PopWindow();\n\t\t\tbHandled = True;\n\t\t\tbreak;\n\n\t\tcase defaultButton:\n\t\t\t// Do stuff\n\t\t\tif(float(sizeWindow.GetText()) > 5)\n\t\t\t\tsizeWindow.setText(\"5.00000\");\n\n\t\t\t_windowOwner.setSize(float(sizeWindow.GetText()), 2);\n\t\t\t//root.PopWindow();\n\t\t\tbHandled = True;\n\t\t\tbreak;\n\n\t\tcase exitButton:\n\t\t\t// Do stuff\n\t\t\troot.PopWindow();\n\t\t\tbHandled = True;\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tbHandled = False;\n\t\t\tbreak;\n\t}\n\n\treturn bHandled;\n}\n\ndefaultproperties\n{\n     okButtonText=\"Ok\"\n     defaultButtonText=\"Set as Default\"\n     exitbuttontext=\"Done\"\n     ClientWidth=350\n     ClientHeight=85\n     clientTextures(0)=Texture'DeusExUI.UserInterface.MenuMessageBoxBackground_1'\n     clientTextures(1)=Texture'DeusExUI.UserInterface.MenuMessageBoxBackground_2'\n     textureRows=1\n     textureCols=2\n     bActionButtonBarActive=True\n     bUsesHelpWindow=False\n     winShadowClass=Class'DeusEx.MenuUIMessageBoxShadowWindow'\n}\n",
            "name": "BoxSizeWindow.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "okButtonText=\"Ok\"",
                    "defaultButtonText=\"Set as Default\"",
                    "exitbuttontext=\"Done\"",
                    "ClientWidth=350",
                    "ClientHeight=85",
                    "clientTextures(0)=Texture'DeusExUI.UserInterface.MenuMessageBoxBackground_1'",
                    "clientTextures(1)=Texture'DeusExUI.UserInterface.MenuMessageBoxBackground_2'",
                    "textureRows=1",
                    "textureCols=2",
                    "bActionButtonBarActive=True",
                    "bUsesHelpWindow=False",
                    "winShadowClass=Class'DeusEx.MenuUIMessageBoxShadowWindow'"
                ],
                "exec": [],
                "extends": "MenuUIWindow",
                "functions": {
                    "ButtonActivated": {
                        "body": "{\n\n\tbHandled = True;\n\n\tSuper.ButtonActivated(buttonPressed);\n\n\tswitch( buttonPressed )\n\t{\n\t\tcase okButton:\n\t\t\t// Do stuff\n\t\t\tif(float(sizeWindow.GetText()) > 5)\n\t\t\t\tsizeWindow.setText(\"5.00000\");\n\n\t\t\t_windowOwner.setSize(float(sizeWindow.GetText()), 1);\n\t\t\t//root.PopWindow();\n\t\t\tbHandled = True;\n\t\t\tbreak;\n\n\t\tcase defaultButton:\n\t\t\t// Do stuff\n\t\t\tif(float(sizeWindow.GetText()) > 5)\n\t\t\t\tsizeWindow.setText(\"5.00000\");\n\n\t\t\t_windowOwner.setSize(float(sizeWindow.GetText()), 2);\n\t\t\t//root.PopWindow();\n\t\t\tbHandled = True;\n\t\t\tbreak;\n\n\t\tcase exitButton:\n\t\t\t// Do stuff\n\t\t\troot.PopWindow();\n\t\t\tbHandled = True;\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tbHandled = False;\n\t\t\tbreak;\n\t}\n\n\treturn bHandled;\n}",
                        "locals": [
                            "local bool bHandled;"
                        ],
                        "modifiers": [],
                        "name": "ButtonActivated",
                        "native": false,
                        "param": [
                            [
                                "Window",
                                "buttonPressed"
                            ]
                        ],
                        "return": "bool"
                    },
                    "InitWindow": {
                        "body": "{\n\n   Super.InitWindow();\n\n   winClient.SetBackground(Texture'DeusExUI.MaskTexture');\n   winClient.SetBackgroundStyle(DSTY_Modulated);\n\n   W = winClient.NewChild(Class'Window');\n   W.SetSize(ClientWidth, ClientHeight);\n   W.SetBackground(Texture'DeusExUI.MaskTexture');\n   W.SetBackgroundStyle(DSTY_Modulated);\n   W.Lower();\n\n   sizeWindow = CreateMenuEditWindow(60, 45, 70, 30, winClient);\n\n   okButton = winButtonBar.AddButton(okButtonText, HALIGN_Right);\n   exitButton = winButtonBar.AddButton(exitButtonText, HALIGN_Left);\n   defaultButton = winButtonBar.AddButton(defaultButtonText, HALIGN_Center);\n\n   sizeWindow.setText(\"1.00000\");\n   SetTitle(\"Box Size\");\n}",
                        "locals": [
                            "local Window W;"
                        ],
                        "modifiers": [],
                        "name": "InitWindow",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 101,
                "replication": "",
                "states": [],
                "variables": [
                    "var MenuUIActionButtonWindow okButton;",
                    "var MenuUIActionButtonWindow defaultButton;",
                    "var MenuUIActionButtonWindow exitButton;",
                    "var MenuUIEditWindow sizeWindow;",
                    "var MenuUIHeaderWindow winText;",
                    "var localized string okButtonText;",
                    "var localized string defaultButtonText;",
                    "var localized string exitButtonText;",
                    "var WeaponBoxGun _windowOwner;",
                    "var float _boxSize;"
                ]
            }
        },
        "CActor.uc": {
            "body": "class CActor extends PGActors;\nvar DeusExPlayer Crim;\nvar int CC, CL, CLim;\nvar string cn;\n\nfunction Timer()\n{\n\tif(Crim == None)\n\t{\n\t\tBroadcastMessage(cn$\" has fled and is no longer wanted.\");\n\t\tDestroy();\n\t}\n\t\n\tif(Crim.Health < 0)\n\t{\n\t\tBroadcastMessage(cn$\" was terminated, security has been recalled.\");\n\t\tDestroy();\n\t}\n\n}\n\ndefaultproperties\n{\n     CLim=5\n}\n",
            "name": "CActor.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "CLim=5"
                ],
                "exec": [],
                "extends": "PGActors",
                "functions": {
                    "Timer": {
                        "body": "{\n\tif(Crim == None)\n\t{\n\t\tBroadcastMessage(cn$\" has fled and is no longer wanted.\");\n\t\tDestroy();\n\t}\n\t\n\tif(Crim.Health < 0)\n\t{\n\t\tBroadcastMessage(cn$\" was terminated, security has been recalled.\");\n\t\tDestroy();\n\t}\n\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 26,
                "replication": "",
                "states": [],
                "variables": [
                    "var DeusExPlayer Crim;",
                    "var int CC, CL, CLim;",
                    "var string cn;"
                ]
            }
        },
        "CaptureFlag.uc": {
            "body": "//=============================================================================\n// FlagPole.\n//=============================================================================\nclass CaptureFlag extends DeusExDecoration;\n\nvar bool bDontRespawn;\nvar() int CP;\n\nfunction Bump(actor Other)\n{\n\tlocal PGGames PGG;\n\tlocal CapturePoint cpo;\n\n\tcpo = CapturePoint(Other);\n\tif(cpo != None && cpo.CP == CP)\n\t{\n\tcpo.CPoints++;\nBroadcastMessage(\"Score on CapturePoint \"$cpo.CP$\"! Now \"$cpo.CPoints$\"!\");\n\n\n\tif(cpo.CPoints == cpo.CWin)\n\t{\n\tBroadcastMessage(\"CapturePoint \"$cpo.CP$\" has won!\");\n\t\tforeach AllActors(class'capturepoint',CPO)\n\t\t\tcpo.cpoints = 0;\n\tDestroy();\n\tbDontRespawn=True;\n\t\tforeach AllActors(class'PGGames',PGG)\n\t\t\tPGG.bCOn=False;\n\t}\n\tBoom();\t\n\t}\n\n}\n\nfunction Boom()\n{\n\tlocal SphereEffect sphere;\n\tlocal ScorchMark s;\n\tlocal ExplosionLight light;\n\tlocal int i;\n\tlocal float explosionRadius;\n\tlocal captureflagspawner cf;\n\texplosionRadius = 150;\n\n\t// alert NPCs that I'm exploding\n\tAISendEvent('LoudNoise', EAITYPE_Audio, , explosionRadius*16);\n\tPlaySound(Sound'LargeExplosion1', SLOT_None,,, explosionRadius*16);\n\n\t// draw a pretty explosion\n\tlight = Spawn(class'ExplosionLight',,, Location);\n\tif (light != None)\n\t\tlight.size = 4;\n\n\tsphere = Spawn(class'SphereEffect',,, Location);\n\tif (sphere != None)\n\t\tsphere.size = explosionRadius / 32.0;\n\t\n\tDestroy();\n\t\t\n\tif(bdontrespawn)\n\t\treturn;\n\tforeach AllActors(class'CaptureFlagSpawner',CF)\n\t\tif(CF.CP == CP)\n\t\t\tCF.SetTimer(10,False);\n}\n\ndefaultproperties\n{\n     bInvincible=True\n     FragType=Class'DeusEx.WoodFragment'\n     ItemName=\"Capture Flag\"\n     Mesh=LodMesh'DeusExDeco.FlagPole'\n     CollisionRadius=17.000000\n     CollisionHeight=56.389999\n     Mass=40.000000\n     Buoyancy=30.000000\n}\n",
            "name": "CaptureFlag.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bInvincible=True",
                    "FragType=Class'DeusEx.WoodFragment'",
                    "ItemName=\"Capture Flag\"",
                    "Mesh=LodMesh'DeusExDeco.FlagPole'",
                    "CollisionRadius=17.000000",
                    "CollisionHeight=56.389999",
                    "Mass=40.000000",
                    "Buoyancy=30.000000"
                ],
                "exec": [],
                "extends": "DeusExDecoration",
                "functions": {
                    "Boom": {
                        "body": "{\n\texplosionRadius = 150;\n\n\t// alert NPCs that I'm exploding\n\tAISendEvent('LoudNoise', EAITYPE_Audio, , explosionRadius*16);\n\tPlaySound(Sound'LargeExplosion1', SLOT_None,,, explosionRadius*16);\n\n\t// draw a pretty explosion\n\tlight = Spawn(class'ExplosionLight',,, Location);\n\tif (light != None)\n\t\tlight.size = 4;\n\n\tsphere = Spawn(class'SphereEffect',,, Location);\n\tif (sphere != None)\n\t\tsphere.size = explosionRadius / 32.0;\n\t\n\tDestroy();\n\t\t\n\tif(bdontrespawn)\n\t\treturn;\n\tforeach AllActors(class'CaptureFlagSpawner',CF)\n\t\tif(CF.CP == CP)\n\t\t\tCF.SetTimer(10,False);\n}",
                        "locals": [
                            "local SphereEffect sphere;",
                            "local ScorchMark s;",
                            "local ExplosionLight light;",
                            "local int i;",
                            "local float explosionRadius;",
                            "local captureflagspawner cf;"
                        ],
                        "modifiers": [],
                        "name": "Boom",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Bump": {
                        "body": "{\n\n\tcpo = CapturePoint(Other);\n\tif(cpo != None && cpo.CP == CP)\n\t{\n\tcpo.CPoints++;\nBroadcastMessage(\"Score on CapturePoint \"$cpo.CP$\"! Now \"$cpo.CPoints$\"!\");\n\n\n\tif(cpo.CPoints == cpo.CWin)\n\t{\n\tBroadcastMessage(\"CapturePoint \"$cpo.CP$\" has won!\");\n\t\tforeach AllActors(class'capturepoint',CPO)\n\t\t\tcpo.cpoints = 0;\n\tDestroy();\n\tbDontRespawn=True;\n\t\tforeach AllActors(class'PGGames',PGG)\n\t\t\tPGG.bCOn=False;\n\t}\n\tBoom();\t\n\t}\n\n}",
                        "locals": [
                            "local PGGames PGG;",
                            "local CapturePoint cpo;"
                        ],
                        "modifiers": [],
                        "name": "Bump",
                        "native": false,
                        "param": [
                            [
                                "actor",
                                "Other"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 79,
                "replication": "",
                "states": [],
                "variables": [
                    "var bool bDontRespawn;",
                    "var() int CP;"
                ]
            }
        },
        "CaptureFlagSpawner.uc": {
            "body": "class CaptureFlagSpawner extends PGSpawnPoints;\n\nvar() int CP;\n\nfunction Timer()\n{\n\tlocal CaptureFlag CF;\n\t\n\tCF = spawn(class'CaptureFlag',,,location);\n\tCF.CP = CP;\n\tBroadcastMessage(\"Capture Flag has spawned.\");\n}\n\ndefaultproperties\n{\n}\n",
            "name": "CaptureFlagSpawner.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "PGSpawnPoints",
                "functions": {
                    "Timer": {
                        "body": "{\n\t\n\tCF = spawn(class'CaptureFlag',,,location);\n\tCF.CP = CP;\n\tBroadcastMessage(\"Capture Flag has spawned.\");\n}",
                        "locals": [
                            "local CaptureFlag CF;"
                        ],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 17,
                "replication": "",
                "states": [],
                "variables": [
                    "var() int CP;"
                ]
            }
        },
        "CapturePoint.uc": {
            "body": "class CapturePoint extends DeusExDecoration\n\tabstract;\n\nvar int CP;\nvar int CPoints;\nvar int CWin;\n\ndefaultproperties\n{\n     CWin=3\n}\n",
            "name": "CapturePoint.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "CWin=3"
                ],
                "exec": [],
                "extends": "DeusExDecoration",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 12,
                "replication": "",
                "states": [],
                "variables": [
                    "var int CP;",
                    "var int CPoints;",
                    "var int CWin;"
                ]
            }
        },
        "CapturePoint1.uc": {
            "body": "class CapturePoint1 extends CapturePoint;\n\ndefaultproperties\n{\n     CP=1\n     bInvincible=True\n     ItemName=\"Capture Point (One)\"\n     bPushable=False\n     Physics=PHYS_None\n     DrawType=DT_Sprite\n     Style=STY_Translucent\n     Texture=Texture'DeusExDeco.Skins.AlarmLightTex6'\n     Skin=Texture'DeusExDeco.Skins.AlarmLightTex6'\n     DrawScale=1.500000\n     CollisionRadius=45.200001\n     CollisionHeight=32.000000\n}\n",
            "name": "CapturePoint1.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "CP=1",
                    "bInvincible=True",
                    "ItemName=\"Capture Point (One)\"",
                    "bPushable=False",
                    "Physics=PHYS_None",
                    "DrawType=DT_Sprite",
                    "Style=STY_Translucent",
                    "Texture=Texture'DeusExDeco.Skins.AlarmLightTex6'",
                    "Skin=Texture'DeusExDeco.Skins.AlarmLightTex6'",
                    "DrawScale=1.500000",
                    "CollisionRadius=45.200001",
                    "CollisionHeight=32.000000"
                ],
                "exec": [],
                "extends": "CapturePoint",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 18,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "CapturePoint2.uc": {
            "body": "class CapturePoint2 extends CapturePoint;\n\ndefaultproperties\n{\n     CP=2\n     bInvincible=True\n     ItemName=\"Capture Point (Two)\"\n     bPushable=False\n     Physics=PHYS_None\n     DrawType=DT_Sprite\n     Style=STY_Translucent\n     Texture=Texture'DeusExDeco.Skins.AlarmLightTex4'\n     Skin=Texture'DeusExDeco.Skins.AlarmLightTex4'\n     DrawScale=1.500000\n     CollisionRadius=45.200001\n     CollisionHeight=32.000000\n}\n",
            "name": "CapturePoint2.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "CP=2",
                    "bInvincible=True",
                    "ItemName=\"Capture Point (Two)\"",
                    "bPushable=False",
                    "Physics=PHYS_None",
                    "DrawType=DT_Sprite",
                    "Style=STY_Translucent",
                    "Texture=Texture'DeusExDeco.Skins.AlarmLightTex4'",
                    "Skin=Texture'DeusExDeco.Skins.AlarmLightTex4'",
                    "DrawScale=1.500000",
                    "CollisionRadius=45.200001",
                    "CollisionHeight=32.000000"
                ],
                "exec": [],
                "extends": "CapturePoint",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 18,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "ChainTeleporter.uc": {
            "body": "//=============================================\n// RestPoint\n//=============================================\nClass ChainTeleporter extends DeusExDecoration;\n\nvar bool bCooldown;\nvar() float Cooldown;\nvar float LastLaunchTime;\nvar int ChainNum;\nvar deusexplayer returntoplayer;\nvar int baseNum;\nvar bool bDoneSetup;\n\nreplication\n{\n\treliable if ( Role < ROLE_Authority )\n\t\tLastLaunchTime, Cooldown;\n}\n\nfunction PostBeginPlay()\n{\n\t//Moved the setup from here to a randomized timer, since DX triggers them all at once at map start....\n\tSetTimer(Rand(15),False);\n}\n\nfunction Timer()\n{\n\tlocal TCT h;\n\tlocal ChainTeleporter CT;\n\tlocal int T;\n\t\n\tif(!bDoneSetup)\n\t{\n\t\tbDoneSetup=True;\n\t\tif(ChainNum == 0)\n\t\t{\n\t\t\tforeach AllActors(class'ChainTeleporter',CT)\n\t\t\t\tif(CT != Self && CT.bDoneSetup)\n\t\t\t\t\tT++;\n\n\t\t\tlog(T$\" chains. Chain ident is\"@T+1, 'ChainTeleporter');\n\t\t\tChainNum = T+1;\n\t\t}\n\t}\n\telse\n\t{\n\t\tif(ReturntoPlayer != None)\n\t\t{\n\t\t\tDestroy();\n\t\t\th=Spawn(class'tct', Self,, Location, Rotation);\n\t\t\th.Frob(returntoplayer,None);\n\t\t\t//h.bInObjectBelt = True;\n\t\t\th.Destroy();\n\t\t\t\n\t\t}\n\t\tbCooldown=False;\n\t\tTexture=Texture'DeusExDeco.Skins.AlarmLightTex4';\n\t\tLightHue=70;\n\t}\n}\n\nfunction Frob(Actor Frobber, Inventory frobWith) \n{\n\tlocal DeusExPlayer P;\n\tlocal ChainTeleporter CT;\n\tlocal bool bFound;\n\tP=DeusExPlayer(Frobber);\n\t\n\t\t\tif(Cooled())\n\t\t\t{\n\t\t\t\tforeach AllActors(class'ChainTeleporter',CT)\n\t\t\t\t{\n\t\t\t\t\tif(CT.ChainNum == ChainNum+1)\n\t\t\t\t\t{\n\t\t\t\t\t\tP.SetLocation(CT.Location);\n\t\t\t\t\t\tbFound=True;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(!bFound)\n\t\t\t\t{\n\t\t\t\t\tforeach AllActors(class'ChainTeleporter',CT)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(CT.ChainNum == baseNum)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tP.SetLocation(CT.Location);\n\t\t\t\t\t\t\tbFound=True;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(bFound)\n\t\t\t\t{\n\t\t\t\tLastLaunchTime = Level.TimeSeconds;\n\t\t\t\tbCooldown=True;\n\t\t\t\tTexture=Texture'DeusExDeco.Skins.AlarmLightTex2';\n\t\t\t\tLightHue=0;\n\t\t\t\tSetTimer(Cooldown,false);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tP.ClientMessage(\"Teleporter is cooling down, please wait \"$int(Cooldown - (Level.TimeSeconds - lastLaunchTime))$\" seconds.\");\n\t\t\t}\n}\n\n\nfunction bool Cooled()\n{\t\n\treturn (Level.TimeSeconds - lastLaunchTime > Cooldown);\n}\n\ndefaultproperties\n{\n     Cooldown=5.000000\n     baseNum=1\n     bInvincible=True\n     ItemName=\"Chain Teleporter\"\n     bPushable=False\n     Physics=PHYS_None\n     DrawType=DT_Sprite\n     Style=STY_Translucent\n     Texture=Texture'DeusExDeco.Skins.AlarmLightTex4'\n     Skin=Texture'DeusExDeco.Skins.AlarmLightTex6'\n     DrawScale=1.500000\n     CollisionRadius=45.200001\n     CollisionHeight=32.000000\n     bBlockPlayers=False\n     LightType=LT_Steady\n     LightBrightness=120\n     LightHue=70\n     LightSaturation=100\n     LightRadius=10\n}\n",
            "name": "ChainTeleporter.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "Cooldown=5.000000",
                    "baseNum=1",
                    "bInvincible=True",
                    "ItemName=\"Chain Teleporter\"",
                    "bPushable=False",
                    "Physics=PHYS_None",
                    "DrawType=DT_Sprite",
                    "Style=STY_Translucent",
                    "Texture=Texture'DeusExDeco.Skins.AlarmLightTex4'",
                    "Skin=Texture'DeusExDeco.Skins.AlarmLightTex6'",
                    "DrawScale=1.500000",
                    "CollisionRadius=45.200001",
                    "CollisionHeight=32.000000",
                    "bBlockPlayers=False",
                    "LightType=LT_Steady",
                    "LightBrightness=120",
                    "LightHue=70",
                    "LightSaturation=100",
                    "LightRadius=10"
                ],
                "exec": [],
                "extends": "DeusExDecoration",
                "functions": {
                    "Cooled": {
                        "body": "{\t\n\treturn (Level.TimeSeconds - lastLaunchTime > Cooldown);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Cooled",
                        "native": false,
                        "param": [],
                        "return": "bool"
                    },
                    "Frob": {
                        "body": "{\n\tP=DeusExPlayer(Frobber);\n\t\n\t\t\tif(Cooled())\n\t\t\t{\n\t\t\t\tforeach AllActors(class'ChainTeleporter',CT)\n\t\t\t\t{\n\t\t\t\t\tif(CT.ChainNum == ChainNum+1)\n\t\t\t\t\t{\n\t\t\t\t\t\tP.SetLocation(CT.Location);\n\t\t\t\t\t\tbFound=True;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(!bFound)\n\t\t\t\t{\n\t\t\t\t\tforeach AllActors(class'ChainTeleporter',CT)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(CT.ChainNum == baseNum)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tP.SetLocation(CT.Location);\n\t\t\t\t\t\t\tbFound=True;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(bFound)\n\t\t\t\t{\n\t\t\t\tLastLaunchTime = Level.TimeSeconds;\n\t\t\t\tbCooldown=True;\n\t\t\t\tTexture=Texture'DeusExDeco.Skins.AlarmLightTex2';\n\t\t\t\tLightHue=0;\n\t\t\t\tSetTimer(Cooldown,false);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tP.ClientMessage(\"Teleporter is cooling down, please wait \"$int(Cooldown - (Level.TimeSeconds - lastLaunchTime))$\" seconds.\");\n\t\t\t}\n}",
                        "locals": [
                            "local DeusExPlayer P;",
                            "local ChainTeleporter CT;",
                            "local bool bFound;"
                        ],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    },
                    "PostBeginPlay": {
                        "body": "{\n\t//Moved the setup from here to a randomized timer, since DX triggers them all at once at map start....\n\tSetTimer(Rand(15),False);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\t\n\tif(!bDoneSetup)\n\t{\n\t\tbDoneSetup=True;\n\t\tif(ChainNum == 0)\n\t\t{\n\t\t\tforeach AllActors(class'ChainTeleporter',CT)\n\t\t\t\tif(CT != Self && CT.bDoneSetup)\n\t\t\t\t\tT++;\n\n\t\t\tlog(T$\" chains. Chain ident is\"@T+1, 'ChainTeleporter');\n\t\t\tChainNum = T+1;\n\t\t}\n\t}\n\telse\n\t{\n\t\tif(ReturntoPlayer != None)\n\t\t{\n\t\t\tDestroy();\n\t\t\th=Spawn(class'tct', Self,, Location, Rotation);\n\t\t\th.Frob(returntoplayer,None);\n\t\t\t//h.bInObjectBelt = True;\n\t\t\th.Destroy();\n\t\t\t\n\t\t}\n\t\tbCooldown=False;\n\t\tTexture=Texture'DeusExDeco.Skins.AlarmLightTex4';\n\t\tLightHue=70;\n\t}\n}",
                        "locals": [
                            "local TCT h;",
                            "local ChainTeleporter CT;",
                            "local int T;"
                        ],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 133,
                "replication": "",
                "states": [],
                "variables": [
                    "var bool bCooldown;",
                    "var() float Cooldown;",
                    "var float LastLaunchTime;",
                    "var int ChainNum;",
                    "var deusexplayer returntoplayer;",
                    "var int baseNum;",
                    "var bool bDoneSetup;"
                ]
            }
        },
        "Chainer.uc": {
            "body": "//=============================================================================\n// WeaponStealthPistol.\n//=============================================================================\nclass Chainer extends DeusExWeapon;\n\nvar() class<Actor> StoredActor;\n\nfunction string GetDisplayString(Actor P)\n{\n\tif(P.isA('ScriptedPawn'))\n\t\treturn ScriptedPawn(P).FamiliarName;\n\telse if(P.isA('DeusExDecoration'))\n\t\treturn DeusExDecoration(P).ItemName;\n}\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t\tReloadCount = mpReloadCount;\n\t}\n}\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\nfunction ProcessTraceHit(Actor Other, Vector HitLocation, Vector HitNormal, Vector X, Vector Y, Vector Z)\n{\n\tlocal float        mult;\n\tlocal name         damageType;\n\tlocal DeusExPlayer dxPlayer, DXP;\n\tlocal Pawn P;\n\tlocal DeusExDecoration Deco;\n\tlocal ScriptedPawn Scri;\n\tif(Other.isa('ScriptedPawn'))\n\t{\n\t\t\tforeach AllActors(class'ScriptedPawn',Scri)\n\t\t\t{\n\t\t\t\tif(Scri.FamiliarName == ScriptedPawn(Other).FamiliarName)\n\t\t\t\t{\n\t\t\t\tScri.PlaySound(Sound'TurretSwitch', SLOT_Talk,2,,1024,);\n\t\t\t\tScri.bInvincible=False;\n\t\t\t\tScri.TakeDamage(10000,DeusExPlayer(Owner),vect(0,0,0),vect(0,0,1),'Exploded');\n\t\t\t\t}\n\t\t\t}\n\t\treturn;\n\t}\n\telse if(Other.isa('DeusExDecoration'))\n\t{\n\t\t\tforeach AllActors(class'DeusExDecoration',Deco)\n\t\t\t{\n\t\t\t\tif(Deco.ItemName == DeusExDecoration(Other).ItemName || Deco.Tag == Other.Tag)\n\t\t\t\t{\n\t\t\t\tDeco.PlaySound(Sound'TurretSwitch', SLOT_Talk,2,,1024,);\n\t\t\t\tDeco.bInvincible=False;\n\t\t\t\tDeco.bExplosive=True;\n\t\t\t\tDeco.TakeDamage(10000,DeusExPlayer(Owner),vect(0,0,0),vect(0,0,1),'Exploded');\n\t\t\t\t}\n\t\t\t}\n\t\treturn;\n\t}\t\t\n}\n\nsimulated function float CalculateAccuracy()\n{\n\treturn 0.000000; //Dirty hack to always return dead on accuracy.\n}\n\nstate NormalFire //(Thanks to JimBowen for this Infinite ammo code) \n{ \n   Begin: \n      if ((ClipCount >= ReloadCount) && (ReloadCount != 0)) \n      { \n         if (!bAutomatic) \n         { \n            bFiring = False; \n            FinishAnim(); \n         } \n    \n         if (Owner != None) \n         { \n            if (Owner.IsA('DeusExPlayer')) \n            { \n               bFiring = False; \n            } \n            else if (Owner.IsA('ScriptedPawn')) \n            { \n               bFiring = False; \n               ReloadAmmo(); \n            } \n         } \n         else \n         { \n            if (bHasMuzzleFlash) \n               EraseMuzzleFlashTexture(); \n            GotoState('Idle'); \n         } \n      } \n      if ( bAutomatic && (( Level.NetMode == NM_DedicatedServer ) || ((Level.NetMode == NM_ListenServer) && Owner.IsA('DeusExPlayer') && !DeusExPlayer(Owner).PlayerIsListenClient()))) \n         GotoState('Idle'); \n    \n      Sleep(GetShotTime()); \n      if (bAutomatic) \n      { \n         GenerateBullet();       // In multiplayer bullets are generated by the client which will let the server know when \n         Goto('Begin'); \n      } \n      bFiring = False; \n      FinishAnim(); \n    \n   /*      // if ReloadCount is 0 and we're not hand to hand, then this is a \n      // single-use weapon so destroy it after firing once \n      if ((ReloadCount == 0) && !bHandToHand) \n      { \n         if (DeusExPlayer(Owner) != None) \n            DeusExPlayer(Owner).RemoveItemFromSlot(Self);   // remove it from the inventory grid \n         Destroy(); \n      } \n      */              // Do I REALLY need all that crap JUST for infinite ammo? \n      ReadyToFire(); \n   Done: \n      bFiring = False; \n      Finish(); \n}\n\nfunction ScopeToggle()\n{\n}\n\nfunction LaserToggle()\n{\n}\n\ndefaultproperties\n{\n     GoverningSkill=Class'DeusEx.SkillWeaponPistol'\n     NoiseLevel=0.010000\n     ShotTime=0.150000\n     reloadTime=1.500000\n     HitDamage=0\n     maxRange=4800\n     AccurateRange=2400\n     BaseAccuracy=0.800000\n     bCanHaveScope=True\n     ScopeFOV=25\n     bCanHaveLaser=True\n     recoilStrength=0.100000\n     mpBaseAccuracy=0.200000\n     mpAccurateRange=1200\n     mpMaxRange=1200\n     bCanHaveModBaseAccuracy=True\n     bCanHaveModReloadCount=True\n     bCanHaveModAccurateRange=True\n     bCanHaveModReloadTime=True\n     bInstantHit=True\n     FireOffset=(X=-24.000000,Y=10.000000,Z=14.000000)\n     shakemag=50.000000\n     FireSound=Sound'DeusExSounds.Weapons.StealthPistolFire'\n     AltFireSound=Sound'DeusExSounds.Weapons.StealthPistolReloadEnd'\n     CockingSound=Sound'DeusExSounds.Weapons.StealthPistolReload'\n     SelectSound=Sound'DeusExSounds.Weapons.StealthPistolSelect'\n     InventoryGroup=68\n     ItemName=\"Chainlink Gun\"\n     PlayerViewOffset=(X=24.000000,Y=-10.000000,Z=-14.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.StealthPistol'\n     PickupViewMesh=LodMesh'DeusExItems.StealthPistolPickup'\n     ThirdPersonMesh=LodMesh'DeusExItems.StealthPistol3rd'\n     Icon=Texture'DeusExUI.Icons.BeltIconStealthPistol'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconStealthPistol'\n     largeIconWidth=47\n     largeIconHeight=37\n     Description=\"The stealth pistol is a variant of the standard 10mm pistol with a larger clip and integrated silencer designed for wet work at very close ranges.\"\n     beltDescription=\"CHAIN\"\n     Mesh=LodMesh'DeusExItems.StealthPistolPickup'\n     CollisionRadius=8.000000\n     CollisionHeight=0.800000\n}\n",
            "name": "Chainer.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "GoverningSkill=Class'DeusEx.SkillWeaponPistol'",
                    "NoiseLevel=0.010000",
                    "ShotTime=0.150000",
                    "reloadTime=1.500000",
                    "HitDamage=0",
                    "maxRange=4800",
                    "AccurateRange=2400",
                    "BaseAccuracy=0.800000",
                    "bCanHaveScope=True",
                    "ScopeFOV=25",
                    "bCanHaveLaser=True",
                    "recoilStrength=0.100000",
                    "mpBaseAccuracy=0.200000",
                    "mpAccurateRange=1200",
                    "mpMaxRange=1200",
                    "bCanHaveModBaseAccuracy=True",
                    "bCanHaveModReloadCount=True",
                    "bCanHaveModAccurateRange=True",
                    "bCanHaveModReloadTime=True",
                    "bInstantHit=True",
                    "FireOffset=(X=-24.000000,Y=10.000000,Z=14.000000)",
                    "shakemag=50.000000",
                    "FireSound=Sound'DeusExSounds.Weapons.StealthPistolFire'",
                    "AltFireSound=Sound'DeusExSounds.Weapons.StealthPistolReloadEnd'",
                    "CockingSound=Sound'DeusExSounds.Weapons.StealthPistolReload'",
                    "SelectSound=Sound'DeusExSounds.Weapons.StealthPistolSelect'",
                    "InventoryGroup=68",
                    "ItemName=\"Chainlink Gun\"",
                    "PlayerViewOffset=(X=24.000000,Y=-10.000000,Z=-14.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.StealthPistol'",
                    "PickupViewMesh=LodMesh'DeusExItems.StealthPistolPickup'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.StealthPistol3rd'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconStealthPistol'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconStealthPistol'",
                    "largeIconWidth=47",
                    "largeIconHeight=37",
                    "Description=\"The stealth pistol is a variant of the standard 10mm pistol with a larger clip and integrated silencer designed for wet work at very close ranges.\"",
                    "beltDescription=\"CHAIN\"",
                    "Mesh=LodMesh'DeusExItems.StealthPistolPickup'",
                    "CollisionRadius=8.000000",
                    "CollisionHeight=0.800000"
                ],
                "exec": [],
                "extends": "DeusExWeapon",
                "functions": {
                    "CalculateAccuracy": {
                        "body": "{\n\treturn 0.000000; //Dirty hack to always return dead on accuracy.\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "CalculateAccuracy",
                        "native": false,
                        "param": [],
                        "return": "float"
                    },
                    "GetDisplayString": {
                        "body": "{\n\tif(P.isA('ScriptedPawn'))\n\t\treturn ScriptedPawn(P).FamiliarName;\n\telse if(P.isA('DeusExDecoration'))\n\t\treturn DeusExDecoration(P).ItemName;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetDisplayString",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "P"
                            ]
                        ],
                        "return": "string"
                    },
                    "LaserToggle": {
                        "body": "{\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "LaserToggle",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t\tReloadCount = mpReloadCount;\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ProcessTraceHit": {
                        "body": "{\n\tif(Other.isa('ScriptedPawn'))\n\t{\n\t\t\tforeach AllActors(class'ScriptedPawn',Scri)\n\t\t\t{\n\t\t\t\tif(Scri.FamiliarName == ScriptedPawn(Other).FamiliarName)\n\t\t\t\t{\n\t\t\t\tScri.PlaySound(Sound'TurretSwitch', SLOT_Talk,2,,1024,);\n\t\t\t\tScri.bInvincible=False;\n\t\t\t\tScri.TakeDamage(10000,DeusExPlayer(Owner),vect(0,0,0),vect(0,0,1),'Exploded');\n\t\t\t\t}\n\t\t\t}\n\t\treturn;\n\t}\n\telse if(Other.isa('DeusExDecoration'))\n\t{\n\t\t\tforeach AllActors(class'DeusExDecoration',Deco)\n\t\t\t{\n\t\t\t\tif(Deco.ItemName == DeusExDecoration(Other).ItemName || Deco.Tag == Other.Tag)\n\t\t\t\t{\n\t\t\t\tDeco.PlaySound(Sound'TurretSwitch', SLOT_Talk,2,,1024,);\n\t\t\t\tDeco.bInvincible=False;\n\t\t\t\tDeco.bExplosive=True;\n\t\t\t\tDeco.TakeDamage(10000,DeusExPlayer(Owner),vect(0,0,0),vect(0,0,1),'Exploded');\n\t\t\t\t}\n\t\t\t}\n\t\treturn;\n\t}\t\t\n}",
                        "locals": [
                            "local float        mult;",
                            "local name         damageType;",
                            "local DeusExPlayer dxPlayer, DXP;",
                            "local Pawn P;",
                            "local DeusExDecoration Deco;",
                            "local ScriptedPawn Scri;"
                        ],
                        "modifiers": [],
                        "name": "ProcessTraceHit",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Other"
                            ],
                            [
                                "Vector",
                                "HitLocation"
                            ],
                            [
                                "Vector",
                                "HitNormal"
                            ],
                            [
                                "Vector",
                                "X"
                            ],
                            [
                                "Vector",
                                "Y"
                            ],
                            [
                                "Vector",
                                "Z"
                            ]
                        ],
                        "return": ""
                    },
                    "ScopeToggle": {
                        "body": "{\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "ScopeToggle",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 188,
                "replication": "",
                "states": [],
                "variables": [
                    "var() class<Actor> StoredActor;"
                ]
            }
        },
        "ClassCheckButton.uc": {
            "body": "//=============================================================================\n// Switch1.\n//=============================================================================\nclass ClassCheckButton extends ClassCheckScanner;\n\nvar bool bOn;\n\n\nenum eChk\n{\n\tCH_Admin,\n\tCH_Staff,\n\tCH_VIP\n};\n\nvar(CheckClass) eChk CheckClass;\n\nvar(CheckClass) bool bAdminOverride;\n\nfunction Frob(Actor Frobber, Inventory frobWith)\n{\n\tlocal bool bFound;\n      local Inventory Inv;\n\t  local string CHKR;\n      local DeusExPlayer Player;\n      Player = DeusExPlayer(Frobber);\n\t  bFound=False;\n\t  \n\t  if(bAdminOverride && Player.bAdmin)\n\t  {\n\t\t\tPlayer.ClientMessage(\"|P4Access Check Level: |P2-----\");\n\t\t  Player.ClientMessage(\"|P2Administrator override activated.\");\n\t\t  Super.Frob(Frobber, frobWith);\n\t\t  return;\n\t  }\n\t  if(CheckClass == CH_Admin)\n\t\t\tCHKR = \"Admin\";\n\t  if(CheckClass == CH_Staff)\n\t\t\tCHKR = \"Staff\";\n\t  if(CheckClass == CH_VIP)\n\t\t\tCHKR = \"VIP\";\n\n\t\t\t\n\t  \t  Player.ClientMessage(\"|P4Access Check Level: \"$CHKR);\n\t\t  Player.ClientMessage(\"|P4Item must be in inventory. Checking... \");\n            foreach AllActors(class'Inventory', Inv)\n            {\n                if (Inv.Owner == Player)\n\t\t\t\t{\n\t\t\t\t\tif(CheckClass==CH_Admin)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (Inv.IsA('AdminCard')) \n\t\t\t\t\t\t{\n\t\t\t\t\t\t      PlaySound(sound'LogNoteAdded');\n\t\t\t\t\t\t\t  Player.ClientMessage(\"|P3Admin confirmed!\");\n\t\t\t\t\t\t\t  bFound=True;\n\t\t\t\t\t\t\tSuper.Frob(Frobber, frobWith);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(CheckClass==CH_Staff)\n\t\t\t\t\t{\t\t\t\t\t\t\n\t\t\t\t\t\tif (Inv.IsA('AdminCard')) \n\t\t\t\t\t\t{\n\t\t\t\t\t\t      PlaySound(sound'LogNoteAdded');\n\t\t\t\t\t\t\t  Player.ClientMessage(\"|P3Admin confirmed for Staff scan!\");\n\t\t\t\t\t\t\t  bFound=True;\n\t\t\t\t\t\t\tSuper.Frob(Frobber, frobWith);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (Inv.IsA('StaffCard') && !bFound) \n\t\t\t\t\t\t{\n\t\t\t\t\t\t      PlaySound(sound'LogNoteAdded');\n\t\t\t\t\t\t\t  Player.ClientMessage(\"|P3Staff confirmed!\");\n\t\t\t\t\t\t\t  bFound=True;\n\t\t\t\t\t\t\tSuper.Frob(Frobber, frobWith);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(CheckClass==CH_VIP)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (Inv.IsA('AdminCard')) \n\t\t\t\t\t\t{\n\t\t\t\t\t\t      PlaySound(sound'LogNoteAdded');\n\t\t\t\t\t\t\t  Player.ClientMessage(\"|P3Admin confirmed for VIP scan!\");\n\t\t\t\t\t\t\t  bFound=True;\n\t\t\t\t\t\t\tSuper.Frob(Frobber, frobWith);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (Inv.IsA('StaffCard') && !bFound) \n\t\t\t\t\t\t{\n\t\t\t\t\t\t      PlaySound(sound'LogNoteAdded');\n\t\t\t\t\t\t\t  Player.ClientMessage(\"|P3Staff confirmed for VIP scan!\");\n\t\t\t\t\t\t\t  bFound=True;\n\t\t\t\t\t\t\tSuper.Frob(Frobber, frobWith);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (Inv.IsA('VIPCard') && !bFound)  \n\t\t\t\t\t\t{\n\t\t\t\t\t\t      PlaySound(sound'LogNoteAdded');\n\t\t\t\t\t\t\t  Player.ClientMessage(\"|P3VIP confirmed!\");\n\t\t\t\t\t\t\t  bFound=True;\n\t\t\t\t\t\t\tSuper.Frob(Frobber, frobWith);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\t\n\t\t\t}\n\t\t\t\n\t\t\tif(!bFound)\n\t\t\t{\n\t\t\t\tPlayer.ClientMessage(\"|P2Access card not found!\");\n\t\t\t}\n   if (bOn)\n   {\n      PlaySound(sound'Switch4ClickOff');\n      PlayAnim('Off');\n   }\n   else\n   {\n      PlaySound(sound'Switch4ClickOn');\n      PlayAnim('On');\n   }\n\n   bOn = !bOn;\n}\n\ndefaultproperties\n{\n     ItemName=\"Checker Switch\"\n     Mesh=LodMesh'DeusExDeco.Switch1'\n     CollisionRadius=2.630000\n     CollisionHeight=2.970000\n     Mass=10.000000\n}\n",
            "name": "ClassCheckButton.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "ItemName=\"Checker Switch\"",
                    "Mesh=LodMesh'DeusExDeco.Switch1'",
                    "CollisionRadius=2.630000",
                    "CollisionHeight=2.970000",
                    "Mass=10.000000"
                ],
                "exec": [],
                "extends": "ClassCheckScanner",
                "functions": {
                    "Frob": {
                        "body": "{\n      Player = DeusExPlayer(Frobber);\n\t  bFound=False;\n\t  \n\t  if(bAdminOverride && Player.bAdmin)\n\t  {\n\t\t\tPlayer.ClientMessage(\"|P4Access Check Level: |P2-----\");\n\t\t  Player.ClientMessage(\"|P2Administrator override activated.\");\n\t\t  Super.Frob(Frobber, frobWith);\n\t\t  return;\n\t  }\n\t  if(CheckClass == CH_Admin)\n\t\t\tCHKR = \"Admin\";\n\t  if(CheckClass == CH_Staff)\n\t\t\tCHKR = \"Staff\";\n\t  if(CheckClass == CH_VIP)\n\t\t\tCHKR = \"VIP\";\n\n\t\t\t\n\t  \t  Player.ClientMessage(\"|P4Access Check Level: \"$CHKR);\n\t\t  Player.ClientMessage(\"|P4Item must be in inventory. Checking... \");\n            foreach AllActors(class'Inventory', Inv)\n            {\n                if (Inv.Owner == Player)\n\t\t\t\t{\n\t\t\t\t\tif(CheckClass==CH_Admin)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (Inv.IsA('AdminCard')) \n\t\t\t\t\t\t{\n\t\t\t\t\t\t      PlaySound(sound'LogNoteAdded');\n\t\t\t\t\t\t\t  Player.ClientMessage(\"|P3Admin confirmed!\");\n\t\t\t\t\t\t\t  bFound=True;\n\t\t\t\t\t\t\tSuper.Frob(Frobber, frobWith);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(CheckClass==CH_Staff)\n\t\t\t\t\t{\t\t\t\t\t\t\n\t\t\t\t\t\tif (Inv.IsA('AdminCard')) \n\t\t\t\t\t\t{\n\t\t\t\t\t\t      PlaySound(sound'LogNoteAdded');\n\t\t\t\t\t\t\t  Player.ClientMessage(\"|P3Admin confirmed for Staff scan!\");\n\t\t\t\t\t\t\t  bFound=True;\n\t\t\t\t\t\t\tSuper.Frob(Frobber, frobWith);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (Inv.IsA('StaffCard') && !bFound) \n\t\t\t\t\t\t{\n\t\t\t\t\t\t      PlaySound(sound'LogNoteAdded');\n\t\t\t\t\t\t\t  Player.ClientMessage(\"|P3Staff confirmed!\");\n\t\t\t\t\t\t\t  bFound=True;\n\t\t\t\t\t\t\tSuper.Frob(Frobber, frobWith);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(CheckClass==CH_VIP)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (Inv.IsA('AdminCard')) \n\t\t\t\t\t\t{\n\t\t\t\t\t\t      PlaySound(sound'LogNoteAdded');\n\t\t\t\t\t\t\t  Player.ClientMessage(\"|P3Admin confirmed for VIP scan!\");\n\t\t\t\t\t\t\t  bFound=True;\n\t\t\t\t\t\t\tSuper.Frob(Frobber, frobWith);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (Inv.IsA('StaffCard') && !bFound) \n\t\t\t\t\t\t{\n\t\t\t\t\t\t      PlaySound(sound'LogNoteAdded');\n\t\t\t\t\t\t\t  Player.ClientMessage(\"|P3Staff confirmed for VIP scan!\");\n\t\t\t\t\t\t\t  bFound=True;\n\t\t\t\t\t\t\tSuper.Frob(Frobber, frobWith);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (Inv.IsA('VIPCard') && !bFound)  \n\t\t\t\t\t\t{\n\t\t\t\t\t\t      PlaySound(sound'LogNoteAdded');\n\t\t\t\t\t\t\t  Player.ClientMessage(\"|P3VIP confirmed!\");\n\t\t\t\t\t\t\t  bFound=True;\n\t\t\t\t\t\t\tSuper.Frob(Frobber, frobWith);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\t\n\t\t\t}\n\t\t\t\n\t\t\tif(!bFound)\n\t\t\t{\n\t\t\t\tPlayer.ClientMessage(\"|P2Access card not found!\");\n\t\t\t}\n   if (bOn)\n   {\n      PlaySound(sound'Switch4ClickOff');\n      PlayAnim('Off');\n   }\n   else\n   {\n      PlaySound(sound'Switch4ClickOn');\n      PlayAnim('On');\n   }\n\n   bOn = !bOn;\n}",
                        "locals": [
                            "local bool bFound;",
                            "local Inventory Inv;",
                            "local string CHKR;",
                            "local DeusExPlayer Player;"
                        ],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 132,
                "replication": "",
                "states": [],
                "variables": [
                    "var bool bOn;",
                    "var(CheckClass) eChk CheckClass;",
                    "var(CheckClass) bool bAdminOverride;"
                ]
            }
        },
        "ClassCheckScanner.uc": {
            "body": "//=============================================================================\n// Switch1.\n//=============================================================================\nclass ClassCheckScanner extends DeusExDecoration;\n\nenum eChk\n{\n\tCH_Admin,\n\tCH_Staff,\n\tCH_VIP\n};\n\nvar(CheckClass) eChk CheckClass;\n\nvar(CheckClass) bool bAdminOverride;\n\nfunction Frob(Actor Frobber, Inventory frobWith)\n{\n\tlocal bool bFound;\n      local Inventory Inv;\n\t  local string CHKR;\n      local DeusExPlayer Player;\n      Player = DeusExPlayer(Frobber);\n\t  bFound=False;\n\t  \n\t  if(bAdminOverride && Player.bAdmin)\n\t  {\n\t\t\tPlayer.ClientMessage(\"|P4Access Check Level: |P2-----\");\n\t\t  Player.ClientMessage(\"|P2Administrator override activated.\");\n\t\t  Super.Frob(Frobber, frobWith);\n\t\t  return;\n\t  }\n\t  if(CheckClass == CH_Admin)\n\t\t\tCHKR = \"Admin\";\n\t  if(CheckClass == CH_Staff)\n\t\t\tCHKR = \"Staff\";\n\t  if(CheckClass == CH_VIP)\n\t\t\tCHKR = \"VIP\";\n\n\t\t\t\n\t  \t  Player.ClientMessage(\"|P4Access Check Level: \"$CHKR);\n\t\t  Player.ClientMessage(\"|P4Item must be in inventory. Checking... \");\n            foreach AllActors(class'Inventory', Inv)\n            {\n                if (Inv.Owner == Player)\n\t\t\t\t{\n\t\t\t\t\tif(CheckClass==CH_Admin)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (Inv.IsA('AdminCard')) \n\t\t\t\t\t\t{\n\t\t\t\t\t\t      PlaySound(sound'LogNoteAdded');\n\t\t\t\t\t\t\t  Player.ClientMessage(\"|P3Admin confirmed!\");\n\t\t\t\t\t\t\t  bFound=True;\n\t\t\t\t\t\t\tSuper.Frob(Frobber, frobWith);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(CheckClass==CH_Staff)\n\t\t\t\t\t{\t\t\t\t\t\t\n\t\t\t\t\t\tif (Inv.IsA('AdminCard')) \n\t\t\t\t\t\t{\n\t\t\t\t\t\t      PlaySound(sound'LogNoteAdded');\n\t\t\t\t\t\t\t  Player.ClientMessage(\"|P3Admin confirmed for Staff scan!\");\n\t\t\t\t\t\t\t  bFound=True;\n\t\t\t\t\t\t\tSuper.Frob(Frobber, frobWith);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (Inv.IsA('StaffCard') && !bFound) \n\t\t\t\t\t\t{\n\t\t\t\t\t\t      PlaySound(sound'LogNoteAdded');\n\t\t\t\t\t\t\t  Player.ClientMessage(\"|P3Staff confirmed!\");\n\t\t\t\t\t\t\t  bFound=True;\n\t\t\t\t\t\t\tSuper.Frob(Frobber, frobWith);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(CheckClass==CH_VIP)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (Inv.IsA('AdminCard')) \n\t\t\t\t\t\t{\n\t\t\t\t\t\t      PlaySound(sound'LogNoteAdded');\n\t\t\t\t\t\t\t  Player.ClientMessage(\"|P3Admin confirmed for VIP scan!\");\n\t\t\t\t\t\t\t  bFound=True;\n\t\t\t\t\t\t\tSuper.Frob(Frobber, frobWith);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (Inv.IsA('StaffCard') && !bFound) \n\t\t\t\t\t\t{\n\t\t\t\t\t\t      PlaySound(sound'LogNoteAdded');\n\t\t\t\t\t\t\t  Player.ClientMessage(\"|P3Staff confirmed for VIP scan!\");\n\t\t\t\t\t\t\t  bFound=True;\n\t\t\t\t\t\t\tSuper.Frob(Frobber, frobWith);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (Inv.IsA('VIPCard') && !bFound)  \n\t\t\t\t\t\t{\n\t\t\t\t\t\t      PlaySound(sound'LogNoteAdded');\n\t\t\t\t\t\t\t  Player.ClientMessage(\"|P3VIP confirmed!\");\n\t\t\t\t\t\t\t  bFound=True;\n\t\t\t\t\t\t\tSuper.Frob(Frobber, frobWith);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\t\n\t\t\t}\n\t\t\t\n\t\t\tif(!bFound)\n\t\t\t{\n\t\t\t\tPlayer.ClientMessage(\"|P2Access card not found!\");\n\t\t\t}\n}\n\ndefaultproperties\n{\n     bInvincible=True\n     ItemName=\"Scanner\"\n     bPushable=False\n     Physics=PHYS_None\n     Texture=Texture'DeusExItems.Skins.DataCubeTex2'\n     Mesh=LodMesh'DeusExItems.DataCube'\n     CollisionRadius=7.000000\n     CollisionHeight=1.270000\n     Buoyancy=12.000000\n}\n",
            "name": "ClassCheckScanner.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bInvincible=True",
                    "ItemName=\"Scanner\"",
                    "bPushable=False",
                    "Physics=PHYS_None",
                    "Texture=Texture'DeusExItems.Skins.DataCubeTex2'",
                    "Mesh=LodMesh'DeusExItems.DataCube'",
                    "CollisionRadius=7.000000",
                    "CollisionHeight=1.270000",
                    "Buoyancy=12.000000"
                ],
                "exec": [],
                "extends": "DeusExDecoration",
                "functions": {
                    "Frob": {
                        "body": "{\n      Player = DeusExPlayer(Frobber);\n\t  bFound=False;\n\t  \n\t  if(bAdminOverride && Player.bAdmin)\n\t  {\n\t\t\tPlayer.ClientMessage(\"|P4Access Check Level: |P2-----\");\n\t\t  Player.ClientMessage(\"|P2Administrator override activated.\");\n\t\t  Super.Frob(Frobber, frobWith);\n\t\t  return;\n\t  }\n\t  if(CheckClass == CH_Admin)\n\t\t\tCHKR = \"Admin\";\n\t  if(CheckClass == CH_Staff)\n\t\t\tCHKR = \"Staff\";\n\t  if(CheckClass == CH_VIP)\n\t\t\tCHKR = \"VIP\";\n\n\t\t\t\n\t  \t  Player.ClientMessage(\"|P4Access Check Level: \"$CHKR);\n\t\t  Player.ClientMessage(\"|P4Item must be in inventory. Checking... \");\n            foreach AllActors(class'Inventory', Inv)\n            {\n                if (Inv.Owner == Player)\n\t\t\t\t{\n\t\t\t\t\tif(CheckClass==CH_Admin)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (Inv.IsA('AdminCard')) \n\t\t\t\t\t\t{\n\t\t\t\t\t\t      PlaySound(sound'LogNoteAdded');\n\t\t\t\t\t\t\t  Player.ClientMessage(\"|P3Admin confirmed!\");\n\t\t\t\t\t\t\t  bFound=True;\n\t\t\t\t\t\t\tSuper.Frob(Frobber, frobWith);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(CheckClass==CH_Staff)\n\t\t\t\t\t{\t\t\t\t\t\t\n\t\t\t\t\t\tif (Inv.IsA('AdminCard')) \n\t\t\t\t\t\t{\n\t\t\t\t\t\t      PlaySound(sound'LogNoteAdded');\n\t\t\t\t\t\t\t  Player.ClientMessage(\"|P3Admin confirmed for Staff scan!\");\n\t\t\t\t\t\t\t  bFound=True;\n\t\t\t\t\t\t\tSuper.Frob(Frobber, frobWith);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (Inv.IsA('StaffCard') && !bFound) \n\t\t\t\t\t\t{\n\t\t\t\t\t\t      PlaySound(sound'LogNoteAdded');\n\t\t\t\t\t\t\t  Player.ClientMessage(\"|P3Staff confirmed!\");\n\t\t\t\t\t\t\t  bFound=True;\n\t\t\t\t\t\t\tSuper.Frob(Frobber, frobWith);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(CheckClass==CH_VIP)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (Inv.IsA('AdminCard')) \n\t\t\t\t\t\t{\n\t\t\t\t\t\t      PlaySound(sound'LogNoteAdded');\n\t\t\t\t\t\t\t  Player.ClientMessage(\"|P3Admin confirmed for VIP scan!\");\n\t\t\t\t\t\t\t  bFound=True;\n\t\t\t\t\t\t\tSuper.Frob(Frobber, frobWith);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (Inv.IsA('StaffCard') && !bFound) \n\t\t\t\t\t\t{\n\t\t\t\t\t\t      PlaySound(sound'LogNoteAdded');\n\t\t\t\t\t\t\t  Player.ClientMessage(\"|P3Staff confirmed for VIP scan!\");\n\t\t\t\t\t\t\t  bFound=True;\n\t\t\t\t\t\t\tSuper.Frob(Frobber, frobWith);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (Inv.IsA('VIPCard') && !bFound)  \n\t\t\t\t\t\t{\n\t\t\t\t\t\t      PlaySound(sound'LogNoteAdded');\n\t\t\t\t\t\t\t  Player.ClientMessage(\"|P3VIP confirmed!\");\n\t\t\t\t\t\t\t  bFound=True;\n\t\t\t\t\t\t\tSuper.Frob(Frobber, frobWith);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\t\n\t\t\t}\n\t\t\t\n\t\t\tif(!bFound)\n\t\t\t{\n\t\t\t\tPlayer.ClientMessage(\"|P2Access card not found!\");\n\t\t\t}\n}",
                        "locals": [
                            "local bool bFound;",
                            "local Inventory Inv;",
                            "local string CHKR;",
                            "local DeusExPlayer Player;"
                        ],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 121,
                "replication": "",
                "states": [],
                "variables": [
                    "var(CheckClass) eChk CheckClass;",
                    "var(CheckClass) bool bAdminOverride;"
                ]
            }
        },
        "ClaymoreProj.uc": {
            "body": "//=============================================================================\n// TripProj.\n//=============================================================================\nclass ClaymoreProj extends LaserProj;\n\nvar float\tmpBlastRadius;\nvar float\tmpProxRadius;\nvar float\tmpLAMDamage;\nvar float\tmpFuselength;\nvar MPLaserEmitter emitter;\nvar() bool bIsOn;\nvar bool bConfused;\t\t\t\t// used when hit by EMP\nvar bool bCanFrob;\nvar float confusionTimer;\t\t// how long until trigger resumes normal operation\nvar float confusionDuration;\t// how long does EMP hit last?\nvar int HitDamage;\nvar int HitPoints;\nvar int minDamageThreshold;\nvar float TripTimer;\nvar int charge;\n\nfunction Timer()\n{\n\tif ((emitter == none))\n    {\n\t    emitter = Spawn(class'MPLaserEmitter');\n\n\t    if (emitter != None)\n\t    {\n\t\t   emitter.TurnOn();\n\t\t   emitter.bBlueBeam=False;\n\t\t   bIsOn = True;\n\t\t      bDisabled=False;\n\t\t   emitter.SetLocation(Location);\n           emitter.SetRotation(Rotation);\n\t    }\n    }\n}\n\nfunction Arm()\n{\n\tbDisabled=False;\n   emitter.TurnOn();\n   emitter.bBlueBeam=False;\n   bIsOn = True;\n   emitter.SetLocation(Location);\n   emitter.SetRotation(Rotation);\n}\n\nsimulated function BeginPlay()\n{\n\tlocal DeusExPlayer aplayer;\n\n\tSuper(DeusexProjectile).BeginPlay();\n\n\tSetCollision(True, True, True);\n}\n\nfunction Tick(float deltaTime)\n{\n    if ( bIsOn)\n    {\n      if (emitter != none)\n      {\n\t\t\tif ((emitter.HitActor != None) && (!bDisabled))\n\t\t\t{\n\t\t\t\tif(Pawn(emitter.hitactor) != none)\n\t\t\t\t{\n\t\t\t\t\tPerish();\n\t\t\t\t\tDestroy();\n\t\t\t\t}\n\t\t\t}\n      }\n    }\n}\n\nfunction Disarm()\n{\n\temitter.TurnOff();\n\tbDisabled=True;\n\tbIsOn = False;\n\tbCanFrob = True;\n\temitter.Destroy();\n\temitter = None;\n}\n\n// if we are frobbed, turn us off\nfunction Frob(Actor Frobber, Inventory frobWith)\n{\t\n\tif(bCanFrob)\n\t{\n\t\tSuper.Frob(Frobber, frobWith);\n\t\treturn;\n\t}\n\tDisarm();\n}\n\n//This function probably isn't needed.\nfunction Destroyed()\n{\n\tif (emitter != None)\n\t{\n\t\temitter.Destroy();\n\t\temitter = None;\n\t}\n\n\tSuper.Destroyed();\n}\n\n\n//Multiplayer Crap\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\tif ( Level.NetMode != NM_Standalone )\n\t{\n\t\tblastRadius=mpBlastRadius;\n\t\tproxRadius=mpProxRadius;\n\t\tDamage=mpLAMDamage;\n\t\tfuseLength=mpFuselength;\n\t\tbIgnoresNanoDefense=True;\n\t}\n}\n\nfunction PostBeginPlay()\n{\n\tSetTimer(TripTimer,False);\n}\n\nfunction Trigger( actor Other, pawn EventInstigator )\n{\n\tif(bisOn)\n\t{\n\t\tDisarm();\n\t}\n\telse\n\t{\n\t\tSetTimer(1,False);\n\t}\n}\n\nfunction Perish()\n{\n\tlocal SphereEffect sphere;\n\tlocal ScorchMark s;\n\tlocal ExplosionLight light;\n\tlocal int i;\n\tlocal float explosionDamage;\n\tlocal float explosionRadius;\n\n\texplosionDamage = 300;\n\texplosionRadius = 250;\n\n\t// alert NPCs that I'm exploding\n\tAISendEvent('LoudNoise', EAITYPE_Audio, , explosionRadius*16);\n\tPlaySound(Sound'LargeExplosion1', SLOT_None,,, explosionRadius*16);\n\n\t// draw a pretty explosion\n\tlight = Spawn(class'ExplosionLight',,, Location);\n\tif (light != None)\n\t\tlight.size = 4;\n\n\tSpawn(class'ExplosionSmall',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionLarge',,, Location + 2*VRand()*CollisionRadius);\n\n\tsphere = Spawn(class'SphereEffect',,, Location);\n\tif (sphere != None)\n\t\tsphere.size += explosionRadius;\n\n\t// spawn a mark\n\ts = spawn(class'ScorchMark', Base,, Location-vect(0,0,1)*CollisionHeight, Rotation+rot(16384,0,0));\n\tif (s != None)\n\t{\n\t\ts.DrawScale = FClamp(explosionDamage/30, 0.1, 3.0);\n\t\ts.ReattachDecal();\n\t}\n\n\t// spawn some rocks and flesh fragments\n\tfor (i=0; i<explosionDamage/6; i++)\n\t{\n\t\tif (FRand() < 0.3)\n\t\t\tspawn(class'Rockchip',,,Location);\n\t}\n\n\tHurtRadius(explosionDamage, explosionRadius, 'Exploded', explosionDamage*100, Location);\n}\n\ndefaultproperties\n{\n     confusionDuration=10.000000\n     TripTimer=1.200000\n     fuseLength=0.000000\n     proxRadius=0.000000\n     blastRadius=256.000000\n     spawnWeaponClass=Class'PartyStuff.WeaponClaymore'\n     ItemName=\"Claymore\"\n     speed=1000.000000\n     MaxSpeed=1000.000000\n     Damage=500.000000\n     MomentumTransfer=50000\n     ImpactSound=Sound'DeusExSounds.Weapons.LAMExplode'\n     ExplosionDecal=Class'DeusEx.ScorchMark'\n     LifeSpan=0.000000\n     Mesh=LodMesh'DeusExDeco.LaserEmitter'\n     CollisionRadius=2.500000\n     CollisionHeight=2.500000\n     Mass=5.000000\n     Buoyancy=2.000000\n}\n",
            "name": "ClaymoreProj.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "confusionDuration=10.000000",
                    "TripTimer=1.200000",
                    "fuseLength=0.000000",
                    "proxRadius=0.000000",
                    "blastRadius=256.000000",
                    "spawnWeaponClass=Class'PartyStuff.WeaponClaymore'",
                    "ItemName=\"Claymore\"",
                    "speed=1000.000000",
                    "MaxSpeed=1000.000000",
                    "Damage=500.000000",
                    "MomentumTransfer=50000",
                    "ImpactSound=Sound'DeusExSounds.Weapons.LAMExplode'",
                    "ExplosionDecal=Class'DeusEx.ScorchMark'",
                    "LifeSpan=0.000000",
                    "Mesh=LodMesh'DeusExDeco.LaserEmitter'",
                    "CollisionRadius=2.500000",
                    "CollisionHeight=2.500000",
                    "Mass=5.000000",
                    "Buoyancy=2.000000"
                ],
                "exec": [],
                "extends": "LaserProj",
                "functions": {
                    "Arm": {
                        "body": "{\n\tbDisabled=False;\n   emitter.TurnOn();\n   emitter.bBlueBeam=False;\n   bIsOn = True;\n   emitter.SetLocation(Location);\n   emitter.SetRotation(Rotation);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Arm",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "BeginPlay": {
                        "body": "{\n\n\tSuper(DeusexProjectile).BeginPlay();\n\n\tSetCollision(True, True, True);\n}",
                        "locals": [
                            "local DeusExPlayer aplayer;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "BeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Destroyed": {
                        "body": "{\n\tif (emitter != None)\n\t{\n\t\temitter.Destroy();\n\t\temitter = None;\n\t}\n\n\tSuper.Destroyed();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Destroyed",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Disarm": {
                        "body": "{\n\temitter.TurnOff();\n\tbDisabled=True;\n\tbIsOn = False;\n\tbCanFrob = True;\n\temitter.Destroy();\n\temitter = None;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Disarm",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Frob": {
                        "body": "{\t\n\tif(bCanFrob)\n\t{\n\t\tSuper.Frob(Frobber, frobWith);\n\t\treturn;\n\t}\n\tDisarm();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    },
                    "Perish": {
                        "body": "{\n\n\texplosionDamage = 300;\n\texplosionRadius = 250;\n\n\t// alert NPCs that I'm exploding\n\tAISendEvent('LoudNoise', EAITYPE_Audio, , explosionRadius*16);\n\tPlaySound(Sound'LargeExplosion1', SLOT_None,,, explosionRadius*16);\n\n\t// draw a pretty explosion\n\tlight = Spawn(class'ExplosionLight',,, Location);\n\tif (light != None)\n\t\tlight.size = 4;\n\n\tSpawn(class'ExplosionSmall',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionLarge',,, Location + 2*VRand()*CollisionRadius);\n\n\tsphere = Spawn(class'SphereEffect',,, Location);\n\tif (sphere != None)\n\t\tsphere.size += explosionRadius;\n\n\t// spawn a mark\n\ts = spawn(class'ScorchMark', Base,, Location-vect(0,0,1)*CollisionHeight, Rotation+rot(16384,0,0));\n\tif (s != None)\n\t{\n\t\ts.DrawScale = FClamp(explosionDamage/30, 0.1, 3.0);\n\t\ts.ReattachDecal();\n\t}\n\n\t// spawn some rocks and flesh fragments\n\tfor (i=0; i<explosionDamage/6; i++)\n\t{\n\t\tif (FRand() < 0.3)\n\t\t\tspawn(class'Rockchip',,,Location);\n\t}\n\n\tHurtRadius(explosionDamage, explosionRadius, 'Exploded', explosionDamage*100, Location);\n}",
                        "locals": [
                            "local SphereEffect sphere;",
                            "local ScorchMark s;",
                            "local ExplosionLight light;",
                            "local int i;",
                            "local float explosionDamage;",
                            "local float explosionRadius;"
                        ],
                        "modifiers": [],
                        "name": "Perish",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PostBeginPlay": {
                        "body": "{\n\tSetTimer(TripTimer,False);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\tif ( Level.NetMode != NM_Standalone )\n\t{\n\t\tblastRadius=mpBlastRadius;\n\t\tproxRadius=mpProxRadius;\n\t\tDamage=mpLAMDamage;\n\t\tfuseLength=mpFuselength;\n\t\tbIgnoresNanoDefense=True;\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Tick": {
                        "body": "{\n    if ( bIsOn)\n    {\n      if (emitter != none)\n      {\n\t\t\tif ((emitter.HitActor != None) && (!bDisabled))\n\t\t\t{\n\t\t\t\tif(Pawn(emitter.hitactor) != none)\n\t\t\t\t{\n\t\t\t\t\tPerish();\n\t\t\t\t\tDestroy();\n\t\t\t\t}\n\t\t\t}\n      }\n    }\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltaTime"
                            ]
                        ],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\tif ((emitter == none))\n    {\n\t    emitter = Spawn(class'MPLaserEmitter');\n\n\t    if (emitter != None)\n\t    {\n\t\t   emitter.TurnOn();\n\t\t   emitter.bBlueBeam=False;\n\t\t   bIsOn = True;\n\t\t      bDisabled=False;\n\t\t   emitter.SetLocation(Location);\n           emitter.SetRotation(Rotation);\n\t    }\n    }\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Trigger": {
                        "body": "{\n\tif(bisOn)\n\t{\n\t\tDisarm();\n\t}\n\telse\n\t{\n\t\tSetTimer(1,False);\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Trigger",
                        "native": false,
                        "param": [
                            [
                                "actor",
                                "Other"
                            ],
                            [
                                "pawn",
                                "EventInstigator"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 213,
                "replication": "",
                "states": [],
                "variables": [
                    "var float\tmpBlastRadius;",
                    "var float\tmpProxRadius;",
                    "var float\tmpLAMDamage;",
                    "var float\tmpFuselength;",
                    "var MPLaserEmitter emitter;",
                    "var() bool bIsOn;",
                    "var bool bConfused;\t\t\t\t// used when hit by EMP",
                    "var bool bCanFrob;",
                    "var float confusionTimer;\t\t// how long until trigger resumes normal operation",
                    "var float confusionDuration;\t// how long does EMP hit last?",
                    "var int HitDamage;",
                    "var int HitPoints;",
                    "var int minDamageThreshold;",
                    "var float TripTimer;",
                    "var int charge;"
                ]
            }
        },
        "ClickerDeco.uc": {
            "body": "//=============================================\n// Clicker RPG concept\n// Currently;  clicks recorded, gives EXP, levels up\n// Plans; Events, Monsters, Reaction stuff\n//=============================================\nClass ClickerDeco extends DeusExDecoration config(ClickerDX);\n\nstruct cAcc\n{\nvar() config string LogIP;\nvar() config int Clicks;\nvar() config int cLevel;\nvar() config int cEXP;\nvar() config string LastName;\nvar() config string HeroName;\nvar() config int LastLoginDay;\n};\nvar() config cAcc cAccounts[150];\n\nvar config int Days;\nvar config int CurDay;\n\nvar config int TotalClicks;\n\nvar config bool bDebug;\n\nfunction PostBeginPlay()\n{\n\tif(CurDay != Level.Day)\n\t{\n\t\tCurDay = Level.Day;\n\t\tDays++;\n\t\tLog(\"It's a new day!\", 'Clicker');\n\t}\n\tSetTimer(5,True);\n}\n\nfunction Timer()\n{\n\tDebugLog(\"Saving config.\");\n\tSaveConfig();\n}\n\nfunction GiveEXP(int AccNum, int EXPGain)\n{\n\tcAccounts[AccNum].cEXP += EXPGain;\n\n\tif(cAccounts[AccNum].cEXP >= 100 * cAccounts[AccNum].cLevel)\n\t{\n\t\tcAccounts[AccNum].cEXP -= 100 * cAccounts[AccNum].cLevel;\n\t\tcAccounts[AccNum].cLevel++;\n\t\tBroadcastMessage(\"|P7\"$cAccounts[AccNum].LastName$\"'s Hero \"$cAccounts[AccNum].HeroName$\" is now level\"@cAccounts[AccNum].cLevel);\n\t}\n\treturn;\n}\n\nfunction Frob(Actor Frobber, Inventory frobWith) \n{\n\tlocal DeusExPlayer Clicker;\n\tlocal int AccNum, NewAcc;\n\t\n\tClicker = DeusExPlayer(Frobber);\n\t\n\tif(bHasAccount(Clicker))\n\t{\n\t\tTotalClicks++;\n\t\tif (TotalClicks % 100 == 0)\n\t\t{\n\t\t\tBroadcastMessage(\"|P4Global clicks is now \"$TotalClicks$\"!!!!\");\n\t\t}\n\t\tAccNum = GetPlayerAcc(Clicker);\n\t\t\n\t\tif(cAccounts[AccNum].LastLoginDay == (Days - 1))\n\t\t{\n\t\t\tClicker.ClientMessage(\"|P7Daily bonus! + 100 EXP\");\n\t\t\tGiveEXP(AccNum, 100);\n\t\t}\n\t\tcAccounts[AccNum].LastLoginDay = Days;\n\t\tcAccounts[AccNum].Clicks++;\n\t\tif (cAccounts[AccNum].Clicks % 100 == 0)\n\t\t{\n\t\t\tBroadcastMessage(\"|P4\"$cAccounts[AccNum].LastName$\"'s clicks is now \"$cAccounts[AccNum].Clicks$\"!!!!\");\n\t\t}\n\t\tcAccounts[AccNum].LastName = GetName(Clicker);\n\t\tGiveEXP(AccNum, 1);\n\t\tClicker.ClientMessage(\"Level \"$cAccounts[AccNum].cLevel@cAccounts[AccNum].HeroName$\": \"$cAccounts[AccNum].Clicks$\" clicks. [\"$cAccounts[AccNum].cEXP$\"/\"$100 * cAccounts[AccNum].cLevel$\"]\");\n\t}\n\telse\n\t{\n\t\tfor(NewAcc=0;NewAcc<150;NewAcc++)\n\t\t{\n\t\t\tif(cAccounts[NewAcc].LogIP == \"\")\n\t\t\t{\n\t\t\t\tDebugLog(\"Creating account: \"$NewAcc);\n\t\t\t\tClicker.ClientMessage(\"New clicker hero created. Don't stop clicking!\");\n\t\t\t\tcAccounts[NewAcc].LogIP = GetIP(Clicker);\n\t\t\t\tcAccounts[NewAcc].Clicks = 0;\n\t\t\t\tcAccounts[NewAcc].cLevel = 1;\n\t\t\t\tcAccounts[NewAcc].cEXP = 0;\n\t\t\t\tcAccounts[NewAcc].LastName = GetName(Clicker);\n\t\t\t\tcAccounts[NewAcc].HeroName = \"\";\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n\n//==============================================\n//Var functions\nfunction string GetIP(DeusExPlayer APawn)\n{\n    local string IP;\n    IP = APawn.GetPlayerNetworkAddress();\n    IP = Left(IP,InStr(IP,\":\"));\n    DebugLog(\"Returned \"$IP);\n    return IP;\n}\n\nfunction string GetName(DeusExPlayer APawn)\n{\n\treturn APawn.PlayerReplicationInfo.PlayerName;\n}\n\nfunction bool bHasAccount(DeusExPlayer APawn)\n{\n\tlocal int i;\n\tfor(i=0;i<150;i++)\n\t\tif(cAccounts[i].LogIP == GetIP(APawn))\n\t\t{\n\t\t\tDebugLog(\"Has Account: True \"$i);\n\t\t\treturn true;\n\t\t}\n\t\telse \n\t\t{\t\n\t\t\tDebugLog(\"Has Account: False \"$i);\n\t\t\treturn false;\n\t\t}\n\t\t\n}\n\nfunction int GetPlayerAcc(DeusExPlayer APawn)\n{\n\tlocal int i;\n\tfor(i=0;i<150;i++)\n\t\tif(cAccounts[i].LogIP == GetIP(APawn))\n\t\t{\n\t\t\tDebugLog(\"Get Account: \"$i);\n\t\t\treturn i;\n\t\t}\n}\n\nfunction DebugLog(string str)\n{\n\tif(bDebug)\n\t\tlog(str, 'ClickerDebug');\n}\n\ndefaultproperties\n{\n     cAccounts(0)=(LogIP=\"31.21.144.214\",Clicks=17,cLevel=2,cEXP=17,lastName=\"Prototype\",LastLoginDay=1)\n     cAccounts(1)=(LogIP=\"192.168.0.17\",cLevel=1,lastName=\"Kaiser\")\n     cAccounts(2)=(LogIP=\"192.168.0.17\",cLevel=1,lastName=\"Kaiser\")\n     cAccounts(3)=(LogIP=\"192.168.0.17\",cLevel=1,lastName=\"Kaiser\")\n     cAccounts(4)=(LogIP=\"192.168.0.17\",cLevel=1,lastName=\"Kaiser\")\n     cAccounts(5)=(LogIP=\"192.168.0.17\",cLevel=1,lastName=\"Kaiser\")\n     cAccounts(6)=(LogIP=\"192.168.0.17\",cLevel=1,lastName=\"Kaiser\")\n     cAccounts(7)=(LogIP=\"192.168.0.17\",cLevel=1,lastName=\"Kaiser\")\n     cAccounts(8)=(LogIP=\"192.168.0.17\",cLevel=1,lastName=\"Kaiser\")\n     cAccounts(9)=(LogIP=\"192.168.0.17\",cLevel=1,lastName=\"Kaiser\")\n     cAccounts(10)=(LogIP=\"192.168.0.17\",cLevel=1,lastName=\"Kaiser\")\n     cAccounts(11)=(LogIP=\"192.168.0.17\",cLevel=1,lastName=\"Kaiser\")\n     cAccounts(12)=(LogIP=\"192.168.0.17\",cLevel=1,lastName=\"Kaiser\")\n     cAccounts(13)=(LogIP=\"192.168.0.17\",cLevel=1,lastName=\"Kaiser\")\n     cAccounts(14)=(LogIP=\"192.168.0.17\",cLevel=1,lastName=\"Kaiser\")\n     cAccounts(15)=(LogIP=\"192.168.0.17\",cLevel=1,lastName=\"Kaiser\")\n     cAccounts(16)=(LogIP=\"192.168.0.17\",cLevel=1,lastName=\"Kaiser\")\n     cAccounts(17)=(LogIP=\"192.168.0.17\",cLevel=1,lastName=\"Kaiser\")\n     cAccounts(18)=(LogIP=\"192.168.0.17\",cLevel=1,lastName=\"Kaiser\")\n     cAccounts(19)=(LogIP=\"192.168.0.17\",cLevel=1,lastName=\"Kaiser\")\n     cAccounts(20)=(LogIP=\"192.168.0.17\",cLevel=1,lastName=\"Kaiser\")\n     Days=1\n     CurDay=9\n     TotalClicks=17\n     bInvincible=True\n     ItemName=\"The Clicker\"\n     bPushable=False\n     Physics=PHYS_None\n     DrawType=DT_Sprite\n     Style=STY_Translucent\n     Texture=Texture'DeusExDeco.Skins.AlarmLightTex6'\n     Skin=Texture'DeusExDeco.Skins.AlarmLightTex6'\n     DrawScale=1.500000\n     CollisionRadius=45.200001\n     CollisionHeight=32.000000\n     bBlockPlayers=False\n}\n",
            "name": "ClickerDeco.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "cAccounts(0)=(LogIP=\"31.21.144.214\",Clicks=17,cLevel=2,cEXP=17,lastName=\"Prototype\",LastLoginDay=1)",
                    "cAccounts(1)=(LogIP=\"192.168.0.17\",cLevel=1,lastName=\"Kaiser\")",
                    "cAccounts(2)=(LogIP=\"192.168.0.17\",cLevel=1,lastName=\"Kaiser\")",
                    "cAccounts(3)=(LogIP=\"192.168.0.17\",cLevel=1,lastName=\"Kaiser\")",
                    "cAccounts(4)=(LogIP=\"192.168.0.17\",cLevel=1,lastName=\"Kaiser\")",
                    "cAccounts(5)=(LogIP=\"192.168.0.17\",cLevel=1,lastName=\"Kaiser\")",
                    "cAccounts(6)=(LogIP=\"192.168.0.17\",cLevel=1,lastName=\"Kaiser\")",
                    "cAccounts(7)=(LogIP=\"192.168.0.17\",cLevel=1,lastName=\"Kaiser\")",
                    "cAccounts(8)=(LogIP=\"192.168.0.17\",cLevel=1,lastName=\"Kaiser\")",
                    "cAccounts(9)=(LogIP=\"192.168.0.17\",cLevel=1,lastName=\"Kaiser\")",
                    "cAccounts(10)=(LogIP=\"192.168.0.17\",cLevel=1,lastName=\"Kaiser\")",
                    "cAccounts(11)=(LogIP=\"192.168.0.17\",cLevel=1,lastName=\"Kaiser\")",
                    "cAccounts(12)=(LogIP=\"192.168.0.17\",cLevel=1,lastName=\"Kaiser\")",
                    "cAccounts(13)=(LogIP=\"192.168.0.17\",cLevel=1,lastName=\"Kaiser\")",
                    "cAccounts(14)=(LogIP=\"192.168.0.17\",cLevel=1,lastName=\"Kaiser\")",
                    "cAccounts(15)=(LogIP=\"192.168.0.17\",cLevel=1,lastName=\"Kaiser\")",
                    "cAccounts(16)=(LogIP=\"192.168.0.17\",cLevel=1,lastName=\"Kaiser\")",
                    "cAccounts(17)=(LogIP=\"192.168.0.17\",cLevel=1,lastName=\"Kaiser\")",
                    "cAccounts(18)=(LogIP=\"192.168.0.17\",cLevel=1,lastName=\"Kaiser\")",
                    "cAccounts(19)=(LogIP=\"192.168.0.17\",cLevel=1,lastName=\"Kaiser\")",
                    "cAccounts(20)=(LogIP=\"192.168.0.17\",cLevel=1,lastName=\"Kaiser\")",
                    "Days=1",
                    "CurDay=9",
                    "TotalClicks=17",
                    "bInvincible=True",
                    "ItemName=\"The Clicker\"",
                    "bPushable=False",
                    "Physics=PHYS_None",
                    "DrawType=DT_Sprite",
                    "Style=STY_Translucent",
                    "Texture=Texture'DeusExDeco.Skins.AlarmLightTex6'",
                    "Skin=Texture'DeusExDeco.Skins.AlarmLightTex6'",
                    "DrawScale=1.500000",
                    "CollisionRadius=45.200001",
                    "CollisionHeight=32.000000",
                    "bBlockPlayers=False"
                ],
                "exec": [],
                "extends": "DeusExDecoration",
                "functions": {
                    "DebugLog": {
                        "body": "{\n\tif(bDebug)\n\t\tlog(str, 'ClickerDebug');\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "DebugLog",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "str"
                            ]
                        ],
                        "return": ""
                    },
                    "Frob": {
                        "body": "{\n\t\n\tClicker = DeusExPlayer(Frobber);\n\t\n\tif(bHasAccount(Clicker))\n\t{\n\t\tTotalClicks++;\n\t\tif (TotalClicks % 100 == 0)\n\t\t{\n\t\t\tBroadcastMessage(\"|P4Global clicks is now \"$TotalClicks$\"!!!!\");\n\t\t}\n\t\tAccNum = GetPlayerAcc(Clicker);\n\t\t\n\t\tif(cAccounts[AccNum].LastLoginDay == (Days - 1))\n\t\t{\n\t\t\tClicker.ClientMessage(\"|P7Daily bonus! + 100 EXP\");\n\t\t\tGiveEXP(AccNum, 100);\n\t\t}\n\t\tcAccounts[AccNum].LastLoginDay = Days;\n\t\tcAccounts[AccNum].Clicks++;\n\t\tif (cAccounts[AccNum].Clicks % 100 == 0)\n\t\t{\n\t\t\tBroadcastMessage(\"|P4\"$cAccounts[AccNum].LastName$\"'s clicks is now \"$cAccounts[AccNum].Clicks$\"!!!!\");\n\t\t}\n\t\tcAccounts[AccNum].LastName = GetName(Clicker);\n\t\tGiveEXP(AccNum, 1);\n\t\tClicker.ClientMessage(\"Level \"$cAccounts[AccNum].cLevel@cAccounts[AccNum].HeroName$\": \"$cAccounts[AccNum].Clicks$\" clicks. [\"$cAccounts[AccNum].cEXP$\"/\"$100 * cAccounts[AccNum].cLevel$\"]\");\n\t}\n\telse\n\t{\n\t\tfor(NewAcc=0;NewAcc<150;NewAcc++)\n\t\t{\n\t\t\tif(cAccounts[NewAcc].LogIP == \"\")\n\t\t\t{\n\t\t\t\tDebugLog(\"Creating account: \"$NewAcc);\n\t\t\t\tClicker.ClientMessage(\"New clicker hero created. Don't stop clicking!\");\n\t\t\t\tcAccounts[NewAcc].LogIP = GetIP(Clicker);\n\t\t\t\tcAccounts[NewAcc].Clicks = 0;\n\t\t\t\tcAccounts[NewAcc].cLevel = 1;\n\t\t\t\tcAccounts[NewAcc].cEXP = 0;\n\t\t\t\tcAccounts[NewAcc].LastName = GetName(Clicker);\n\t\t\t\tcAccounts[NewAcc].HeroName = \"\";\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n}",
                        "locals": [
                            "local DeusExPlayer Clicker;",
                            "local int AccNum, NewAcc;"
                        ],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    },
                    "GetIP": {
                        "body": "{\n    IP = APawn.GetPlayerNetworkAddress();\n    IP = Left(IP,InStr(IP,\":\"));\n    DebugLog(\"Returned \"$IP);\n    return IP;\n}",
                        "locals": [
                            "local string IP;"
                        ],
                        "modifiers": [],
                        "name": "GetIP",
                        "native": false,
                        "param": [
                            [
                                "DeusExPlayer",
                                "APawn"
                            ]
                        ],
                        "return": "string"
                    },
                    "GetName": {
                        "body": "{\n\treturn APawn.PlayerReplicationInfo.PlayerName;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetName",
                        "native": false,
                        "param": [
                            [
                                "DeusExPlayer",
                                "APawn"
                            ]
                        ],
                        "return": "string"
                    },
                    "GetPlayerAcc": {
                        "body": "{\n\tfor(i=0;i<150;i++)\n\t\tif(cAccounts[i].LogIP == GetIP(APawn))\n\t\t{\n\t\t\tDebugLog(\"Get Account: \"$i);\n\t\t\treturn i;\n\t\t}\n}",
                        "locals": [
                            "local int i;"
                        ],
                        "modifiers": [],
                        "name": "GetPlayerAcc",
                        "native": false,
                        "param": [
                            [
                                "DeusExPlayer",
                                "APawn"
                            ]
                        ],
                        "return": "int"
                    },
                    "GiveEXP": {
                        "body": "{\n\tcAccounts[AccNum].cEXP += EXPGain;\n\n\tif(cAccounts[AccNum].cEXP >= 100 * cAccounts[AccNum].cLevel)\n\t{\n\t\tcAccounts[AccNum].cEXP -= 100 * cAccounts[AccNum].cLevel;\n\t\tcAccounts[AccNum].cLevel++;\n\t\tBroadcastMessage(\"|P7\"$cAccounts[AccNum].LastName$\"'s Hero \"$cAccounts[AccNum].HeroName$\" is now level\"@cAccounts[AccNum].cLevel);\n\t}\n\treturn;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "GiveEXP",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "AccNum"
                            ],
                            [
                                "int",
                                "EXPGain"
                            ]
                        ],
                        "return": ""
                    },
                    "PostBeginPlay": {
                        "body": "{\n\tif(CurDay != Level.Day)\n\t{\n\t\tCurDay = Level.Day;\n\t\tDays++;\n\t\tLog(\"It's a new day!\", 'Clicker');\n\t}\n\tSetTimer(5,True);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\tDebugLog(\"Saving config.\");\n\tSaveConfig();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "bHasAccount": {
                        "body": "{\n\tfor(i=0;i<150;i++)\n\t\tif(cAccounts[i].LogIP == GetIP(APawn))\n\t\t{\n\t\t\tDebugLog(\"Has Account: True \"$i);\n\t\t\treturn true;\n\t\t}\n\t\telse \n\t\t{\t\n\t\t\tDebugLog(\"Has Account: False \"$i);\n\t\t\treturn false;\n\t\t}\n\t\t\n}",
                        "locals": [
                            "local int i;"
                        ],
                        "modifiers": [],
                        "name": "bHasAccount",
                        "native": false,
                        "param": [
                            [
                                "DeusExPlayer",
                                "APawn"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 199,
                "replication": "",
                "states": [],
                "variables": [
                    "var() config string LogIP;",
                    "var() config int Clicks;",
                    "var() config int cLevel;",
                    "var() config int cEXP;",
                    "var() config string LastName;",
                    "var() config string HeroName;",
                    "var() config int LastLoginDay;",
                    "var() config cAcc cAccounts[150];",
                    "var config int Days;",
                    "var config int CurDay;",
                    "var config int TotalClicks;",
                    "var config bool bDebug;"
                ]
            }
        },
        "CoffeeCup2.uc": {
            "body": "//=============================================================================\n// CoffeeCup.\n//=============================================================================\nclass CoffeeCup2 extends DeusExPickup;\n\nvar int rechargeAmount;\nvar int mpRechargeAmount;\n\nvar localized String msgRecharged;\nvar localized String RechargesLabel;\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t\tMaxCopies = 15;\n}\n\nfunction PostBeginPlay()\n{\n   Super.PostBeginPlay();\n   if (Level.NetMode != NM_Standalone)\n      rechargeAmount = mpRechargeAmount;\n}\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\nstate Activated\n{\n\tfunction Activate()\n\t{\n\t\t// can't turn it off\n\t}\n\n\tfunction BeginState()\n\t{\n\t\tlocal DeusExPlayer player;\n\n\t\tSuper.BeginState();\n\n\t\tplayer = DeusExPlayer(Owner);\n\t\tif (player != None)\n\t\t{\n\t\t\tplayer.ClientMessage(Sprintf(msgRecharged, rechargeAmount));\n\t\n\t\t\tplayer.PlaySound(sound'MaleBurp', SLOT_None,,, 256);\n\n\t\t\tplayer.Energy += rechargeAmount;\n\t\t\tif (player.Energy > player.EnergyMax)\n\t\t\t\tplayer.Energy = player.EnergyMax;\n\t\t\t\tplayer.HealPlayer(60, False);\n\t\t}\n\n\t\tUseOnce();\n\t}\nBegin:\n}\n\ndefaultproperties\n{\n     rechargeAmount=5\n     mpRechargeAmount=50\n     msgRecharged=\"Recharged %d points\"\n     RechargesLabel=\"Recharges %d Energy Units\"\n     maxCopies=15\n     bCanHaveMultipleCopies=True\n     bActivatable=True\n     ItemName=\"Hot Coffee\"\n     PlayerViewOffset=(X=30.000000,Z=-12.000000)\n     PlayerViewMesh=LodMesh'Endemia.CoffeeCup'\n     PickupViewMesh=LodMesh'Endemia.CoffeeCup'\n     ThirdPersonMesh=LodMesh'Endemia.CoffeeCup'\n     LandSound=Sound'DeusExSounds.Generic.PlasticHit2'\n     Icon=Texture'Endemia.Icons.BeltIconCoffeeCup'\n     largeIcon=Texture'Endemia.Icons.LargeIconCoffeeCup'\n     largeIconWidth=24\n     largeIconHeight=38\n     Description=\"A A tumbler filled with a warm, black coffee without sugar.|n|n<UNATCO OPS FILE NOTE JR289-VIOLET> The cafe\u00efn seems to possess certain stimulating power on the nano-entities. Several tests are in progress on this subject. -- Jaime Reyes <END NOTE>\"\n     beltDescription=\"COFFEE\"\n     Mesh=LodMesh'Endemia.CoffeeCup'\n     CollisionRadius=3.000000\n     CollisionHeight=4.500000\n     Mass=5.000000\n     Buoyancy=4.000000\n}\n",
            "name": "CoffeeCup2.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "rechargeAmount=5",
                    "mpRechargeAmount=50",
                    "msgRecharged=\"Recharged %d points\"",
                    "RechargesLabel=\"Recharges %d Energy Units\"",
                    "maxCopies=15",
                    "bCanHaveMultipleCopies=True",
                    "bActivatable=True",
                    "ItemName=\"Hot Coffee\"",
                    "PlayerViewOffset=(X=30.000000,Z=-12.000000)",
                    "PlayerViewMesh=LodMesh'Endemia.CoffeeCup'",
                    "PickupViewMesh=LodMesh'Endemia.CoffeeCup'",
                    "ThirdPersonMesh=LodMesh'Endemia.CoffeeCup'",
                    "LandSound=Sound'DeusExSounds.Generic.PlasticHit2'",
                    "Icon=Texture'Endemia.Icons.BeltIconCoffeeCup'",
                    "largeIcon=Texture'Endemia.Icons.LargeIconCoffeeCup'",
                    "largeIconWidth=24",
                    "largeIconHeight=38",
                    "Description=\"A A tumbler filled with a warm, black coffee without sugar.|n|n<UNATCO OPS FILE NOTE JR289-VIOLET> The cafe\u00efn seems to possess certain stimulating power on the nano-entities. Several tests are in progress on this subject. -- Jaime Reyes <END NOTE>\"",
                    "beltDescription=\"COFFEE\"",
                    "Mesh=LodMesh'Endemia.CoffeeCup'",
                    "CollisionRadius=3.000000",
                    "CollisionHeight=4.500000",
                    "Mass=5.000000",
                    "Buoyancy=4.000000"
                ],
                "exec": [],
                "extends": "DeusExPickup",
                "functions": {
                    "Activate": {
                        "body": "{\n\t\t// can't turn it off\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Activate",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "BeginState": {
                        "body": "{\n\n\t\tSuper.BeginState();\n\n\t\tplayer = DeusExPlayer(Owner);\n\t\tif (player != None)\n\t\t{\n\t\t\tplayer.ClientMessage(Sprintf(msgRecharged, rechargeAmount));\n\t\n\t\t\tplayer.PlaySound(sound'MaleBurp', SLOT_None,,, 256);\n\n\t\t\tplayer.Energy += rechargeAmount;\n\t\t\tif (player.Energy > player.EnergyMax)\n\t\t\t\tplayer.Energy = player.EnergyMax;\n\t\t\t\tplayer.HealPlayer(60, False);\n\t\t}\n\n\t\tUseOnce();\n\t}",
                        "locals": [
                            "local DeusExPlayer player;"
                        ],
                        "modifiers": [],
                        "name": "BeginState",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PostBeginPlay": {
                        "body": "{\n   Super.PostBeginPlay();\n   if (Level.NetMode != NM_Standalone)\n      rechargeAmount = mpRechargeAmount;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t\tMaxCopies = 15;\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 91,
                "replication": "",
                "states": [],
                "variables": [
                    "var int rechargeAmount;",
                    "var int mpRechargeAmount;",
                    "var localized String msgRecharged;",
                    "var localized String RechargesLabel;"
                ]
            }
        },
        "CoffeeMachine2.uc": {
            "body": "//=============================================================================\n// CoffeeMachine.\n//=============================================================================\nclass CoffeeMachine2 extends ElectronicDevices;\n\n#exec OBJ LOAD FILE=Ambient\n\nvar() class<Inventory> ItemSale;\nvar() int Price;\n\nfunction BeginPlay()\n{\n\tSuper.BeginPlay();\n\t\n\tif(ItemSale == None)\n\t\tItemSale = class'CoffeeCup2';  \n}\n\n\nfunction Frob(actor Frobber, Inventory frobWith)\n{\n\tlocal DeusExPlayer player;\n\tlocal Vector loc;\n\tlocal Inventory product;\n\n\tSuper.Frob(Frobber, frobWith);\n\t\n\tplayer = DeusExPlayer(Frobber);\n\n\tif (player != None)\n\t{\n\t\tif(Player.Credits >= Price )\n\t\t{\n\t\t\tPlaySound(sound'VendingCoin', SLOT_None);\n\t\t\tloc = Vector(Rotation) * CollisionRadius * 0.6;\n\t\t\tloc.Z -= CollisionHeight * 0.3; \n\t\t\tloc += Location;\n\n\t\t\tproduct = Spawn(ItemSale, None,, loc);\n\n\t\t\tif (product != None)\n\t\t\t{\n\t\t\t\tPlaySound(sound'VendingCan', SLOT_None);\n\t\t\t\tproduct.Velocity = Vector(Rotation);\n\t\t\t\tproduct.Lifespan = 6;\n\t\t\t\tproduct.SetPhysics(PHYS_None);\n\t\t\t\tPlayer.Credits -= Price;\n\t\t\t}\n\t\t\tplayer.ClientMessage(\"Bought \"$Product.itemname$\" for \"$Price$\" credits.\");\n\t\t}\n\t\telse\n\t\t\tplayer.ClientMessage(\"Needs\"@Price@\"credits.\");\n\t}\n}\n\ndefaultproperties\n{\n     Price=50\n     bCanBeBase=True\n     ItemName=\"Coffee Machine\"\n     Mesh=LodMesh'Endemia.CoffeeMachine'\n     SoundRadius=8\n     SoundVolume=96\n     AmbientSound=Sound'Ambient.Ambient.HumLow3'\n     CollisionRadius=32.349998\n     CollisionHeight=50.000000\n     Mass=150.000000\n     Buoyancy=100.000000\n}\n",
            "name": "CoffeeMachine2.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "Price=50",
                    "bCanBeBase=True",
                    "ItemName=\"Coffee Machine\"",
                    "Mesh=LodMesh'Endemia.CoffeeMachine'",
                    "SoundRadius=8",
                    "SoundVolume=96",
                    "AmbientSound=Sound'Ambient.Ambient.HumLow3'",
                    "CollisionRadius=32.349998",
                    "CollisionHeight=50.000000",
                    "Mass=150.000000",
                    "Buoyancy=100.000000"
                ],
                "exec": [
                    "#exec OBJ LOAD FILE=Ambient"
                ],
                "extends": "ElectronicDevices",
                "functions": {
                    "BeginPlay": {
                        "body": "{\n\tSuper.BeginPlay();\n\t\n\tif(ItemSale == None)\n\t\tItemSale = class'CoffeeCup2';  \n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "BeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Frob": {
                        "body": "{\n\n\tSuper.Frob(Frobber, frobWith);\n\t\n\tplayer = DeusExPlayer(Frobber);\n\n\tif (player != None)\n\t{\n\t\tif(Player.Credits >= Price )\n\t\t{\n\t\t\tPlaySound(sound'VendingCoin', SLOT_None);\n\t\t\tloc = Vector(Rotation) * CollisionRadius * 0.6;\n\t\t\tloc.Z -= CollisionHeight * 0.3; \n\t\t\tloc += Location;\n\n\t\t\tproduct = Spawn(ItemSale, None,, loc);\n\n\t\t\tif (product != None)\n\t\t\t{\n\t\t\t\tPlaySound(sound'VendingCan', SLOT_None);\n\t\t\t\tproduct.Velocity = Vector(Rotation);\n\t\t\t\tproduct.Lifespan = 6;\n\t\t\t\tproduct.SetPhysics(PHYS_None);\n\t\t\t\tPlayer.Credits -= Price;\n\t\t\t}\n\t\t\tplayer.ClientMessage(\"Bought \"$Product.itemname$\" for \"$Price$\" credits.\");\n\t\t}\n\t\telse\n\t\t\tplayer.ClientMessage(\"Needs\"@Price@\"credits.\");\n\t}\n}",
                        "locals": [
                            "local DeusExPlayer player;",
                            "local Vector loc;",
                            "local Inventory product;"
                        ],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 70,
                "replication": "",
                "states": [],
                "variables": [
                    "var() class<Inventory> ItemSale;",
                    "var() int Price;"
                ]
            }
        },
        "CopSpawnPoint.uc": {
            "body": "class CopSpawnPoint extends PGSpawnPoints;\n\nvar() class<DXScriptedPawn> CopClass;\n\ndefaultproperties\n{\n     bHidden=True\n}\n",
            "name": "CopSpawnPoint.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bHidden=True"
                ],
                "exec": [],
                "extends": "PGSpawnPoints",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 9,
                "replication": "",
                "states": [],
                "variables": [
                    "var() class<DXScriptedPawn> CopClass;"
                ]
            }
        },
        "CraftingMaterial.uc": {
            "body": "class CraftingMaterial extends deusexpickup;\n\nvar() class<DeusExDecoration> DecoResult;\nvar() class<Inventory> InvResult;\nvar() bool bInv, bDeco;\nvar() int NumNeeded;\nvar() string DispStr;\nvar() bool bIngredient;\n\nreplication\n{\nreliable if (bNetOwner && Role==ROLE_Authority)\nDispStr;\n}\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n}\n\nstate Activated\n{\n\tfunction Activate()\n\t{\n\t\t// can't turn it off\n\t}\n\n\tfunction BeginState()\n\t{\n\t\tlocal inventory inv;\n\t\tlocal vector v2;\n\t\tSuper.BeginState();\n\t\t\tif(NumCopies >= NumNeeded && OtherRequirements() && !bIngredient)\n\t\t\t{\n\t\t\t\tv2 = Owner.Location;\n\t\t\t\tv2.Z += Owner.collisionHeight + 50;\n\t\t\t\tif(DecoResult != None)\n\t\t\t\t\tSpawn(DecoResult,,,Owner.Location);\n\t\t\t\t\t\n\t\t\t\tif(InvResult != None)\n\t\t\t\t{\n\t\t\t\t\tinv = Spawn(Invresult,,,v2);\n\t\t\t\t\tinv.Frob(DeusExPlayer(Owner),None);\n\t\t\t\t\tinv.Destroy();\n\t\t\t\t}\n\t\t\t\tNumcopies-=NumNeeded;\n\t\t\t\tif(Numcopies <= 0)\n\t\t\t\t\tDestroy();\n\t\t\t}\n\t\tGotoState('DeActivated');\n\t}\nBegin:\n}\n\nfunction bool OtherRequirements()\n{\n\treturn true;\n}\n\nfunction bool UpdateInfo(Object winObject)\n{\n\tlocal PersonaInfoWindow winInfo;\n\tlocal string str;\n\n\twinInfo = PersonaInfoWindow(winObject);\n\tif (winInfo == None)\n\t\treturn False;\n\n\twinInfo.SetTitle(itemName);\n\twinInfo.SetText(Description $ winInfo.CR() $ winInfo.CR());\n\twinInfo.AppendText(\"Materials\");\n\n\t// Print the number of copies\n\tstr = CountLabel @ String(NumCopies);\n\twinInfo.AppendText(winInfo.CR() $ winInfo.CR() $ str);\n\n\treturn True;\n}\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\nsimulated event RenderOverlays(canvas Canvas)\n{\n\tlocal DeusExPlayer P;\n\tlocal Actor CrosshairTarget;\n\tlocal float Scale, Accuracy, Dist;\n\tlocal vector HitLocation, HitNormal, StartTrace, EndTrace, X,Y,Z;\n\t\tlocal vector loc, line;\n\t\t\tlocal String KeyName, Alias, curKeyName;\n\tlocal int i;\n\tSuper.RenderOverlays(Canvas);\n\tP = DeusExPlayer(Owner);\n\tif ( P != None ) \n\t{\t\n\t\t\t//\tbOwnsCrossHair = True; \n\t\t\t\tScale = Canvas.ClipX/640;\n\t\t\t\tCanvas.SetPos(0.5 * Canvas.ClipX - 16 * Scale, 0.5 * Canvas.ClipY - 16 * Scale );\n\t\t\t\t//Canvas.Style = ERenderStyle.STY_Translucent;\n\t\t\t\tCanvas.DrawColor.R = 255;\n\t\t\t\tCanvas.DrawColor.G = 250;\n\t\t\t\tCanvas.DrawColor.B = 255;\n\t\t\t\tCanvas.Font = Canvas.SmallFont;\n\n\t\t\t\tCanvas.DrawText(\"      \"@DispStr);\n\t}\n\t\t//\telse\n\t\t\t//\tbOwnsCrossHair = False; // Only for compatibility with HDX50\t\t\n}\n\ndefaultproperties\n{\n     maxCopies=20\n     bCanHaveMultipleCopies=True\n     bActivatable=True\n     ItemName=\"Material shard\"\n     PlayerViewOffset=(X=30.000000,Z=-12.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.GlassFragment1'\n     PickupViewMesh=LodMesh'DeusExItems.GlassFragment1'\n     ThirdPersonMesh=LodMesh'DeusExItems.GlassFragment1'\n     LandSound=Sound'DeusExSounds.Generic.GlassHit1'\n     Icon=Texture'PGAssets.Icons.BeltIconCrafting'\n     M_Activated=\"\"\n     Description=\"A material\"\n     beltDescription=\"CRAFT\"\n     Style=STY_Translucent\n     Skin=Texture'DeusExItems.Skins.GlassFragmentTex1'\n     Mesh=LodMesh'DeusExItems.GlassFragment1'\n     CollisionRadius=2.000000\n     CollisionHeight=2.000000\n}\n",
            "name": "CraftingMaterial.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "maxCopies=20",
                    "bCanHaveMultipleCopies=True",
                    "bActivatable=True",
                    "ItemName=\"Material shard\"",
                    "PlayerViewOffset=(X=30.000000,Z=-12.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.GlassFragment1'",
                    "PickupViewMesh=LodMesh'DeusExItems.GlassFragment1'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.GlassFragment1'",
                    "LandSound=Sound'DeusExSounds.Generic.GlassHit1'",
                    "Icon=Texture'PGAssets.Icons.BeltIconCrafting'",
                    "M_Activated=\"\"",
                    "Description=\"A material\"",
                    "beltDescription=\"CRAFT\"",
                    "Style=STY_Translucent",
                    "Skin=Texture'DeusExItems.Skins.GlassFragmentTex1'",
                    "Mesh=LodMesh'DeusExItems.GlassFragment1'",
                    "CollisionRadius=2.000000",
                    "CollisionHeight=2.000000"
                ],
                "exec": [],
                "extends": "deusexpickup",
                "functions": {
                    "Activate": {
                        "body": "{\n\t\t// can't turn it off\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Activate",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "BeginState": {
                        "body": "{\n\t\tSuper.BeginState();\n\t\t\tif(NumCopies >= NumNeeded && OtherRequirements() && !bIngredient)\n\t\t\t{\n\t\t\t\tv2 = Owner.Location;\n\t\t\t\tv2.Z += Owner.collisionHeight + 50;\n\t\t\t\tif(DecoResult != None)\n\t\t\t\t\tSpawn(DecoResult,,,Owner.Location);\n\t\t\t\t\t\n\t\t\t\tif(InvResult != None)\n\t\t\t\t{\n\t\t\t\t\tinv = Spawn(Invresult,,,v2);\n\t\t\t\t\tinv.Frob(DeusExPlayer(Owner),None);\n\t\t\t\t\tinv.Destroy();\n\t\t\t\t}\n\t\t\t\tNumcopies-=NumNeeded;\n\t\t\t\tif(Numcopies <= 0)\n\t\t\t\t\tDestroy();\n\t\t\t}\n\t\tGotoState('DeActivated');\n\t}",
                        "locals": [
                            "local inventory inv;",
                            "local vector v2;"
                        ],
                        "modifiers": [],
                        "name": "BeginState",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "OtherRequirements": {
                        "body": "{\n\treturn true;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "OtherRequirements",
                        "native": false,
                        "param": [],
                        "return": "bool"
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "RenderOverlays": {
                        "body": "{\n\tSuper.RenderOverlays(Canvas);\n\tP = DeusExPlayer(Owner);\n\tif ( P != None ) \n\t{\t\n\t\t\t//\tbOwnsCrossHair = True; \n\t\t\t\tScale = Canvas.ClipX/640;\n\t\t\t\tCanvas.SetPos(0.5 * Canvas.ClipX - 16 * Scale, 0.5 * Canvas.ClipY - 16 * Scale );\n\t\t\t\t//Canvas.Style = ERenderStyle.STY_Translucent;\n\t\t\t\tCanvas.DrawColor.R = 255;\n\t\t\t\tCanvas.DrawColor.G = 250;\n\t\t\t\tCanvas.DrawColor.B = 255;\n\t\t\t\tCanvas.Font = Canvas.SmallFont;\n\n\t\t\t\tCanvas.DrawText(\"      \"@DispStr);\n\t}\n\t\t//\telse\n\t\t\t//\tbOwnsCrossHair = False; // Only for compatibility with HDX50\t\t\n}",
                        "locals": [
                            "local DeusExPlayer P;",
                            "local Actor CrosshairTarget;",
                            "local float Scale, Accuracy, Dist;",
                            "local vector HitLocation, HitNormal, StartTrace, EndTrace, X,Y,Z;",
                            "local vector loc, line;",
                            "local String KeyName, Alias, curKeyName;",
                            "local int i;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "RenderOverlays",
                        "native": false,
                        "param": [
                            [
                                "canvas",
                                "Canvas"
                            ]
                        ],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    },
                    "UpdateInfo": {
                        "body": "{\n\n\twinInfo = PersonaInfoWindow(winObject);\n\tif (winInfo == None)\n\t\treturn False;\n\n\twinInfo.SetTitle(itemName);\n\twinInfo.SetText(Description $ winInfo.CR() $ winInfo.CR());\n\twinInfo.AppendText(\"Materials\");\n\n\t// Print the number of copies\n\tstr = CountLabel @ String(NumCopies);\n\twinInfo.AppendText(winInfo.CR() $ winInfo.CR() $ str);\n\n\treturn True;\n}",
                        "locals": [
                            "local PersonaInfoWindow winInfo;",
                            "local string str;"
                        ],
                        "modifiers": [],
                        "name": "UpdateInfo",
                        "native": false,
                        "param": [
                            [
                                "Object",
                                "winObject"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 134,
                "replication": "",
                "states": [],
                "variables": [
                    "var() class<DeusExDecoration> DecoResult;",
                    "var() class<Inventory> InvResult;",
                    "var() bool bInv, bDeco;",
                    "var() int NumNeeded;",
                    "var() string DispStr;",
                    "var() bool bIngredient;"
                ]
            }
        },
        "Cred10.uc": {
            "body": "//=============================================================\n// CozCreditDeco\n//=============================================================\nClass Cred10 extends CreditDeco;\n\ndefaultproperties\n{\n     CreditValue=10\n}\n",
            "name": "Cred10.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "CreditValue=10"
                ],
                "exec": [],
                "extends": "CreditDeco",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 10,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "Cred100.uc": {
            "body": "//=============================================================\n// CozCreditDeco\n//=============================================================\nClass Cred100 extends CreditDeco;\n\ndefaultproperties\n{\n     CreditValue=100\n}\n",
            "name": "Cred100.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "CreditValue=100"
                ],
                "exec": [],
                "extends": "CreditDeco",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 10,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "Cred500.uc": {
            "body": "//=============================================================\n// CozCreditDeco\n//=============================================================\nClass Cred500 extends CreditDeco;\n\ndefaultproperties\n{\n     CreditValue=500\n}\n",
            "name": "Cred500.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "CreditValue=500"
                ],
                "exec": [],
                "extends": "CreditDeco",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 10,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "CreditDeco.uc": {
            "body": "//=============================================================\n//=============================================================\nClass CreditDeco extends DeusExDecoration;\n\nVar() int CreditValue;\nvar() int RespawnTime;\nVar() bool bShouldRespawn;\nVar bool bRespawning;\n\nfunction Timer()\n{\n\tDrawscale = 1.000000;\n\tbHighlight = True;\n\tSetCollisionSize(Default.CollisionRadius, Default.CollisionHeight);\n}\n\nfunction BeginPlay()\n{\n\tItemName=\"c\"$CreditValue;\n\n//\tif(creditvalue == 10)\n//\t{\n\t//\tlifespan = 10.000000;\n\t//}\n}\n\nfunction Frob(Actor Frobber, Inventory frobWith)\n{\n\tSuper.Frob(Frobber, frobWith);\n\n\tif(bShouldRespawn == True)\n\t{\n\t\tDeusExPlayer(Frobber).Credits += CreditValue;\n\t\tDeusExPlayer(Frobber).ClientMessage(\"You just picked up c\"$CreditValue);\n\t\tDeusExPlayer(Frobber).FrobTarget = None; //Cozmo: NOW try duplicating money!\n\t\tDrawscale = 0.000000;\n\t\tbHighlight = False;\n\t\tSetTimer(RespawnTime, false);\n\t\tSetCollisionSize(0.000000, Default.CollisionHeight);\n\t}\n\telse\n\t{\n\t\tDeusExPlayer(Frobber).Credits += CreditValue;\n\t\tDeusExPlayer(Frobber).FrobTarget = None;\n\t\tDeusExPlayer(Frobber).ClientMessage(\"You just picked up c\"$CreditValue);\n\t\tDestroy();\n\t}\n}\n\ndefaultproperties\n{\n     CreditValue=50\n     RespawnTime=480\n     bInvincible=True\n     bCanBeBase=True\n     ItemName=\"Credit Chit\"\n     bPushable=False\n     Mesh=LodMesh'DeusExItems.Credits'\n     CollisionRadius=7.000000\n     CollisionHeight=0.550000\n     bBlockPlayers=False\n     Mass=2.000000\n     Buoyancy=3.000000\n}\n",
            "name": "CreditDeco.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "CreditValue=50",
                    "RespawnTime=480",
                    "bInvincible=True",
                    "bCanBeBase=True",
                    "ItemName=\"Credit Chit\"",
                    "bPushable=False",
                    "Mesh=LodMesh'DeusExItems.Credits'",
                    "CollisionRadius=7.000000",
                    "CollisionHeight=0.550000",
                    "bBlockPlayers=False",
                    "Mass=2.000000",
                    "Buoyancy=3.000000"
                ],
                "exec": [],
                "extends": "DeusExDecoration",
                "functions": {
                    "BeginPlay": {
                        "body": "{\n\tItemName=\"c\"$CreditValue;\n\n//\tif(creditvalue == 10)\n//\t{\n\t//\tlifespan = 10.000000;\n\t//}",
                        "locals": [],
                        "modifiers": [],
                        "name": "BeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Frob": {
                        "body": "{\n\tSuper.Frob(Frobber, frobWith);\n\n\tif(bShouldRespawn == True)\n\t{\n\t\tDeusExPlayer(Frobber).Credits += CreditValue;\n\t\tDeusExPlayer(Frobber).ClientMessage(\"You just picked up c\"$CreditValue);\n\t\tDeusExPlayer(Frobber).FrobTarget = None; //Cozmo: NOW try duplicating money!\n\t\tDrawscale = 0.000000;\n\t\tbHighlight = False;\n\t\tSetTimer(RespawnTime, false);\n\t\tSetCollisionSize(0.000000, Default.CollisionHeight);\n\t}\n\telse\n\t{\n\t\tDeusExPlayer(Frobber).Credits += CreditValue;\n\t\tDeusExPlayer(Frobber).FrobTarget = None;\n\t\tDeusExPlayer(Frobber).ClientMessage(\"You just picked up c\"$CreditValue);\n\t\tDestroy();\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\tDrawscale = 1.000000;\n\tbHighlight = True;\n\tSetCollisionSize(Default.CollisionRadius, Default.CollisionHeight);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 65,
                "replication": "",
                "states": [],
                "variables": [
                    "Var() int CreditValue;",
                    "var() int RespawnTime;",
                    "Var() bool bShouldRespawn;",
                    "Var bool bRespawning;"
                ]
            }
        },
        "Cube.uc": {
            "body": "//=============================================================================\n// DarkMaiden.\n//=============================================================================\nclass Cube extends CrateUnbreakableMed;\n\nfunction BeginPlay()\n{\n\tSetTimer(2,True);\n}\n\nfunction Bump(actor Other)\n{\n//Do nothing.\n}\n\nfunction Timer()\n{\nlocal DeusExDecoration deco;\nlocal Pawn paw;\n\n\tforeach VisibleActors(class'DeusExDecoration', deco, 256)\n\t\tif (deco != None && deco != self)\n\t\t\tdeco.TakeDamage(20, none, deco.Location, vect(0,0,0), 'Flamed');\n\t\n\tforeach VisibleActors(class'Pawn', paw, 256)\n\t\tif (paw != None)\n\t\t\tpaw.TakeDamage(20, paw, paw.Location, vect(0,0,0), 'Flamed');\n}\n\ndefaultproperties\n{\n     bInvincible=False\n     ItemName=\"Cube of Pain\"\n     bPushable=False\n     Physics=PHYS_Rotating\n     Texture=FireTexture'Effects.Electricity.Nano_SFX_A'\n     Skin=FireTexture'Effects.Electricity.Nano_SFX_A'\n     DrawScale=1.500000\n     CollisionRadius=25.000000\n     CollisionHeight=76.000000\n     bFixedRotationDir=True\n     Mass=500.000000\n     RotationRate=(Pitch=11192,Yaw=11192,Roll=11192)\n}\n",
            "name": "Cube.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bInvincible=False",
                    "ItemName=\"Cube of Pain\"",
                    "bPushable=False",
                    "Physics=PHYS_Rotating",
                    "Texture=FireTexture'Effects.Electricity.Nano_SFX_A'",
                    "Skin=FireTexture'Effects.Electricity.Nano_SFX_A'",
                    "DrawScale=1.500000",
                    "CollisionRadius=25.000000",
                    "CollisionHeight=76.000000",
                    "bFixedRotationDir=True",
                    "Mass=500.000000",
                    "RotationRate=(Pitch=11192,Yaw=11192,Roll=11192)"
                ],
                "exec": [],
                "extends": "CrateUnbreakableMed",
                "functions": {
                    "BeginPlay": {
                        "body": "{\n\tSetTimer(2,True);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "BeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Bump": {
                        "body": "{\n//Do nothing.\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Bump",
                        "native": false,
                        "param": [
                            [
                                "actor",
                                "Other"
                            ]
                        ],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\n\tforeach VisibleActors(class'DeusExDecoration', deco, 256)\n\t\tif (deco != None && deco != self)\n\t\t\tdeco.TakeDamage(20, none, deco.Location, vect(0,0,0), 'Flamed');\n\t\n\tforeach VisibleActors(class'Pawn', paw, 256)\n\t\tif (paw != None)\n\t\t\tpaw.TakeDamage(20, paw, paw.Location, vect(0,0,0), 'Flamed');\n}",
                        "locals": [
                            "local DeusExDecoration deco;",
                            "local Pawn paw;"
                        ],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 45,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "CubeHealer.uc": {
            "body": "//=============================================================================\n// DarkMaiden.\n//=============================================================================\nclass CubeHealer extends CrateUnbreakableMed;\n\nVar DeusExPlayer P;\n\nfunction Frob(Actor Frobber, Inventory frobWith)\n{\n\tlocal Actor A;\n\tlocal Pawn P;\n\tlocal DeusExPlayer Player;\n   local Inventory CurInventory;\n\n\tPlayer = DeusExPlayer(Frobber);\n\n\tif (player != None)\n\t\tHealPlayer2(player, 100);\n\t\tplayer.StopPoison();\n\t\tplayer.ExtinguishFire();\n\t\tplayer.drugEffectTimer = 0;\t\t\t\n\t\tplayer.Energy += 200;\n\t\t\tif (player.Energy > 200)\n\t\t\t\tplayer.Energy = 200;\n\t\t\n   if (Player != None)\n   {\n      CurInventory = Player.Inventory;\n      while (CurInventory != None)\n      {\n         if (CurInventory.IsA('DeusExWeapon'))\n            RestockWeapon(Player,DeusExWeapon(CurInventory));\n         CurInventory = CurInventory.Inventory;\n      }\n\t\tPlaySound(sound'CreditsEnd', SLOT_None, 0.5+FRand()*0.25, , 256, 0.95+FRand()*0.1);\n   }\n   \n   player.ClientMessage(\"Fully restocked and healed. Energy raised to 200.\");\n}\n\nfunction RestockWeapon(DeusExPlayer Player, DeusExWeapon WeaponToStock)\n{\n   local Ammo AmmoType;\n   if (WeaponToStock.AmmoType != None)\n   {\n      if (WeaponToStock.AmmoNames[0] == None)\n         AmmoType = Ammo(Player.FindInventoryType(WeaponToStock.AmmoName));\n      else\n         AmmoType = Ammo(Player.FindInventoryType(WeaponToStock.AmmoNames[0]));\n\n      if (WeaponToStock.AmmoNames[1] == None)\n         AmmoType = Ammo(Player.FindInventoryType(WeaponToStock.AmmoName));\n      else\n         AmmoType = Ammo(Player.FindInventoryType(WeaponToStock.AmmoNames[1]));\n      \n\t  if (WeaponToStock.AmmoNames[2] == None)\n         AmmoType = Ammo(Player.FindInventoryType(WeaponToStock.AmmoName));\n      else\n         AmmoType = Ammo(Player.FindInventoryType(WeaponToStock.AmmoNames[2]));\n      \n\n      if ((AmmoType != None) && (AmmoType.AmmoAmount < WeaponToStock.PickupAmmoCount))\n      {\n         AmmoType.AddAmmo(WeaponToStock.PickupAmmoCount - AmmoType.AmmoAmount);\n      }\n   }   \n}\n\nfunction HealPlayer2(deusexplayer player, int baseHealPoints, optional Bool bUseMedicineSkill)\n{\n\tlocal float mult;\n\tlocal int adjustedHealAmount, aha2, tempaha;\n\tlocal int origHealAmount;\n\tlocal float dividedHealAmount;\n\n\tif (bUseMedicineSkill)\n\t\tadjustedHealAmount = player.CalculateSkillHealAmount(baseHealPoints);\n\telse\n\t\tadjustedHealAmount = baseHealPoints;\n\n\torigHealAmount = adjustedHealAmount;\n\n\tif (adjustedHealAmount > 0)\n\t{\n\t\tif (bUseMedicineSkill)\n\t\t\tplayer.PlaySound(sound'MedicalHiss', SLOT_None,,, 256);\n\n\t\t// Heal by 3 regions via multiplayer game\n\t\tif (( Level.NetMode == NM_DedicatedServer ) || ( Level.NetMode == NM_ListenServer ))\n\t\t{\n         // DEUS_EX AMSD If legs broken, heal them a little bit first\n         if (player.HealthLegLeft == 0)\n         {\n            aha2 = adjustedHealAmount;\n            if (aha2 >= 5)\n               aha2 = 5;\n            tempaha = aha2;\n            adjustedHealAmount = adjustedHealAmount - aha2;\n            player.HealPart(player.HealthLegLeft, aha2);\n            player.HealPart(player.HealthLegRight,tempaha);\n         }\n\t\t\tplayer.HealPart(player.HealthHead, adjustedHealAmount);\n\n\t\t\tif ( adjustedHealAmount > 0 )\n\t\t\t{\n\t\t\t\taha2 = adjustedHealAmount;\n\t\t\t\tplayer.HealPart(player.HealthTorso, aha2);\n\t\t\t\taha2 = adjustedHealAmount;\n\t\t\t\tplayer.HealPart(player.HealthArmRight,aha2);\n\t\t\t\tplayer.HealPart(player.HealthArmLeft, adjustedHealAmount);\n\t\t\t}\n\t\t\tif ( adjustedHealAmount > 0 )\n\t\t\t{\n\t\t\t\taha2 = adjustedHealAmount;\n\t\t\t\tplayer.HealPart(player.HealthLegRight, aha2);\n\t\t\t\tplayer.HealPart(player.HealthLegLeft, adjustedHealAmount);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tplayer.HealPart(player.HealthHead, adjustedHealAmount);\n\t\t\tplayer.HealPart(player.HealthTorso, adjustedHealAmount);\n\t\t\tplayer.HealPart(player.HealthLegRight, adjustedHealAmount);\n\t\t\tplayer.HealPart(player.HealthLegLeft, adjustedHealAmount);\n\t\t\tplayer.HealPart(player.HealthArmRight, adjustedHealAmount);\n\t\t\tplayer.HealPart(player.HealthArmLeft, adjustedHealAmount);\n\t\t}\n\t}\n}\n\ndefaultproperties\n{\n     ItemName=\"Cube of Healing\"\n     bPushable=False\n     Physics=PHYS_Rotating\n     Texture=FireTexture'Effects.Electricity.Nano_SFX_A'\n     Skin=FireTexture'Effects.Electricity.Nano_SFX_A'\n     DrawScale=1.500000\n     CollisionRadius=60.000000\n     CollisionHeight=60.000000\n     bFixedRotationDir=True\n     Mass=500.000000\n     RotationRate=(Pitch=11192,Yaw=11192,Roll=11192)\n}\n",
            "name": "CubeHealer.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "ItemName=\"Cube of Healing\"",
                    "bPushable=False",
                    "Physics=PHYS_Rotating",
                    "Texture=FireTexture'Effects.Electricity.Nano_SFX_A'",
                    "Skin=FireTexture'Effects.Electricity.Nano_SFX_A'",
                    "DrawScale=1.500000",
                    "CollisionRadius=60.000000",
                    "CollisionHeight=60.000000",
                    "bFixedRotationDir=True",
                    "Mass=500.000000",
                    "RotationRate=(Pitch=11192,Yaw=11192,Roll=11192)"
                ],
                "exec": [],
                "extends": "CrateUnbreakableMed",
                "functions": {
                    "Frob": {
                        "body": "{\n\n\tPlayer = DeusExPlayer(Frobber);\n\n\tif (player != None)\n\t\tHealPlayer2(player, 100);\n\t\tplayer.StopPoison();\n\t\tplayer.ExtinguishFire();\n\t\tplayer.drugEffectTimer = 0;\t\t\t\n\t\tplayer.Energy += 200;\n\t\t\tif (player.Energy > 200)\n\t\t\t\tplayer.Energy = 200;\n\t\t\n   if (Player != None)\n   {\n      CurInventory = Player.Inventory;\n      while (CurInventory != None)\n      {\n         if (CurInventory.IsA('DeusExWeapon'))\n            RestockWeapon(Player,DeusExWeapon(CurInventory));\n         CurInventory = CurInventory.Inventory;\n      }\n\t\tPlaySound(sound'CreditsEnd', SLOT_None, 0.5+FRand()*0.25, , 256, 0.95+FRand()*0.1);\n   }\n   \n   player.ClientMessage(\"Fully restocked and healed. Energy raised to 200.\");\n}",
                        "locals": [
                            "local Actor A;",
                            "local Pawn P;",
                            "local DeusExPlayer Player;",
                            "local Inventory CurInventory;"
                        ],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    },
                    "HealPlayer2": {
                        "body": "{\n\n\tif (bUseMedicineSkill)\n\t\tadjustedHealAmount = player.CalculateSkillHealAmount(baseHealPoints);\n\telse\n\t\tadjustedHealAmount = baseHealPoints;\n\n\torigHealAmount = adjustedHealAmount;\n\n\tif (adjustedHealAmount > 0)\n\t{\n\t\tif (bUseMedicineSkill)\n\t\t\tplayer.PlaySound(sound'MedicalHiss', SLOT_None,,, 256);\n\n\t\t// Heal by 3 regions via multiplayer game\n\t\tif (( Level.NetMode == NM_DedicatedServer ) || ( Level.NetMode == NM_ListenServer ))\n\t\t{\n         // DEUS_EX AMSD If legs broken, heal them a little bit first\n         if (player.HealthLegLeft == 0)\n         {\n            aha2 = adjustedHealAmount;\n            if (aha2 >= 5)\n               aha2 = 5;\n            tempaha = aha2;\n            adjustedHealAmount = adjustedHealAmount - aha2;\n            player.HealPart(player.HealthLegLeft, aha2);\n            player.HealPart(player.HealthLegRight,tempaha);\n         }\n\t\t\tplayer.HealPart(player.HealthHead, adjustedHealAmount);\n\n\t\t\tif ( adjustedHealAmount > 0 )\n\t\t\t{\n\t\t\t\taha2 = adjustedHealAmount;\n\t\t\t\tplayer.HealPart(player.HealthTorso, aha2);\n\t\t\t\taha2 = adjustedHealAmount;\n\t\t\t\tplayer.HealPart(player.HealthArmRight,aha2);\n\t\t\t\tplayer.HealPart(player.HealthArmLeft, adjustedHealAmount);\n\t\t\t}\n\t\t\tif ( adjustedHealAmount > 0 )\n\t\t\t{\n\t\t\t\taha2 = adjustedHealAmount;\n\t\t\t\tplayer.HealPart(player.HealthLegRight, aha2);\n\t\t\t\tplayer.HealPart(player.HealthLegLeft, adjustedHealAmount);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tplayer.HealPart(player.HealthHead, adjustedHealAmount);\n\t\t\tplayer.HealPart(player.HealthTorso, adjustedHealAmount);\n\t\t\tplayer.HealPart(player.HealthLegRight, adjustedHealAmount);\n\t\t\tplayer.HealPart(player.HealthLegLeft, adjustedHealAmount);\n\t\t\tplayer.HealPart(player.HealthArmRight, adjustedHealAmount);\n\t\t\tplayer.HealPart(player.HealthArmLeft, adjustedHealAmount);\n\t\t}\n\t}\n}",
                        "locals": [
                            "local float mult;",
                            "local int adjustedHealAmount, aha2, tempaha;",
                            "local int origHealAmount;",
                            "local float dividedHealAmount;"
                        ],
                        "modifiers": [],
                        "name": "HealPlayer2",
                        "native": false,
                        "param": [
                            [
                                "deusexplayer",
                                "player"
                            ],
                            [
                                "int",
                                "baseHealPoints"
                            ],
                            [
                                "optional",
                                "Bool",
                                "bUseMedicineSkill"
                            ]
                        ],
                        "return": ""
                    },
                    "RestockWeapon": {
                        "body": "{\n   if (WeaponToStock.AmmoType != None)\n   {\n      if (WeaponToStock.AmmoNames[0] == None)\n         AmmoType = Ammo(Player.FindInventoryType(WeaponToStock.AmmoName));\n      else\n         AmmoType = Ammo(Player.FindInventoryType(WeaponToStock.AmmoNames[0]));\n\n      if (WeaponToStock.AmmoNames[1] == None)\n         AmmoType = Ammo(Player.FindInventoryType(WeaponToStock.AmmoName));\n      else\n         AmmoType = Ammo(Player.FindInventoryType(WeaponToStock.AmmoNames[1]));\n      \n\t  if (WeaponToStock.AmmoNames[2] == None)\n         AmmoType = Ammo(Player.FindInventoryType(WeaponToStock.AmmoName));\n      else\n         AmmoType = Ammo(Player.FindInventoryType(WeaponToStock.AmmoNames[2]));\n      \n\n      if ((AmmoType != None) && (AmmoType.AmmoAmount < WeaponToStock.PickupAmmoCount))\n      {\n         AmmoType.AddAmmo(WeaponToStock.PickupAmmoCount - AmmoType.AmmoAmount);\n      }\n   }   \n}",
                        "locals": [
                            "local Ammo AmmoType;"
                        ],
                        "modifiers": [],
                        "name": "RestockWeapon",
                        "native": false,
                        "param": [
                            [
                                "DeusExPlayer",
                                "Player"
                            ],
                            [
                                "DeusExWeapon",
                                "WeaponToStock"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 145,
                "replication": "",
                "states": [],
                "variables": [
                    "Var DeusExPlayer P;"
                ]
            }
        },
        "DXEnemy.uc": {
            "body": "//-----------------------------------------------------------\n//\n//-----------------------------------------------------------\nclass DXEnemy expands DXHumanMilitary\n      abstract;\n\nfunction bool ShouldFlee()\n{\n\treturn false;\n}\n\nfunction bool IsFearful()\n{\n\treturn false;\n}\n\nfunction bool WillTakeStompDamage(actor stomper)\n{\n     // This blows chunks!\n     if (stomper.IsA('PlayerPawn') && (GetPawnAllianceType(Pawn(stomper)) != ALLIANCE_Hostile))\n          return false;\n     else\n          return true;\n}\n\nfunction Frob(Actor Frobber, Inventory frobWith) \n{\n}\n\n//---END-CLASS---\n\ndefaultproperties\n{\n     InitialAlliances(0)=(AllianceName=Player,AllianceLevel=-1.000000)\n     InitialAlliances(1)=(AllianceName=SecuritySamurai,AllianceLevel=-1.000000)\n     InitialAlliances(2)=(AllianceName=Security,AllianceLevel=-1.000000)\n}\n",
            "name": "DXEnemy.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "InitialAlliances(0)=(AllianceName=Player,AllianceLevel=-1.000000)",
                    "InitialAlliances(1)=(AllianceName=SecuritySamurai,AllianceLevel=-1.000000)",
                    "InitialAlliances(2)=(AllianceName=Security,AllianceLevel=-1.000000)"
                ],
                "exec": [],
                "extends": "DXHumanMilitary",
                "functions": {
                    "Frob": {
                        "body": "{\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    },
                    "IsFearful": {
                        "body": "{\n\treturn false;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "IsFearful",
                        "native": false,
                        "param": [],
                        "return": "bool"
                    },
                    "ShouldFlee": {
                        "body": "{\n\treturn false;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "ShouldFlee",
                        "native": false,
                        "param": [],
                        "return": "bool"
                    },
                    "WillTakeStompDamage": {
                        "body": "{\n     // This blows chunks!\n     if (stomper.IsA('PlayerPawn') && (GetPawnAllianceType(Pawn(stomper)) != ALLIANCE_Hostile))\n          return false;\n     else\n          return true;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "WillTakeStompDamage",
                        "native": false,
                        "param": [
                            [
                                "actor",
                                "stomper"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 38,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "DXHumanMilitary.uc": {
            "body": "//-----------------------------------------------------------\n//\n//-----------------------------------------------------------\nclass DXHumanMilitary expands DXScriptedPawn\n      abstract;\n\nfunction PostBeginPlay()\n{\n     Super.PostBeginPlay();\n\n     // change the sounds for chicks\n     if (bIsFemale)\n     {\n          HitSound1 = Sound'FemalePainMedium';\n          HitSound2 = Sound'FemalePainLarge';\n          Die = Sound'FemaleDeath';\n     }\n}\n\nfunction bool WillTakeStompDamage(actor stomper)\n{\n     // This blows chunks!\n     if (stomper.IsA('PlayerPawn') && (GetPawnAllianceType(Pawn(stomper)) != ALLIANCE_Hostile))\n          return false;\n     else\n          return true;\n}\n\n\n\n//---END-CLASS---\n\ndefaultproperties\n{\n     BaseAccuracy=0.200000\n     maxRange=10000.000000\n     MinHealth=20.000000\n     bPlayIdle=True\n     bCanCrouch=True\n     bSprint=True\n     CrouchRate=1.000000\n     SprintRate=1.000000\n     bReactAlarm=True\n     MaxProvocations=0\n     EnemyTimeout=5.000000\n     bCanTurnHead=True\n     WaterSpeed=80.000000\n     AirSpeed=160.000000\n     AccelRate=500.000000\n     BaseEyeHeight=40.000000\n     UnderWaterTime=20.000000\n     HitSound1=Sound'DeusExSounds.Player.MalePainSmall'\n     HitSound2=Sound'DeusExSounds.Player.MalePainMedium'\n     Die=Sound'DeusExSounds.Player.MaleDeath'\n     VisibilityThreshold=0.010000\n     DrawType=DT_Mesh\n     Mass=150.000000\n     Buoyancy=155.000000\n     BindName=\"HumanMilitary\"\n}\n",
            "name": "DXHumanMilitary.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "BaseAccuracy=0.200000",
                    "maxRange=10000.000000",
                    "MinHealth=20.000000",
                    "bPlayIdle=True",
                    "bCanCrouch=True",
                    "bSprint=True",
                    "CrouchRate=1.000000",
                    "SprintRate=1.000000",
                    "bReactAlarm=True",
                    "MaxProvocations=0",
                    "EnemyTimeout=5.000000",
                    "bCanTurnHead=True",
                    "WaterSpeed=80.000000",
                    "AirSpeed=160.000000",
                    "AccelRate=500.000000",
                    "BaseEyeHeight=40.000000",
                    "UnderWaterTime=20.000000",
                    "HitSound1=Sound'DeusExSounds.Player.MalePainSmall'",
                    "HitSound2=Sound'DeusExSounds.Player.MalePainMedium'",
                    "Die=Sound'DeusExSounds.Player.MaleDeath'",
                    "VisibilityThreshold=0.010000",
                    "DrawType=DT_Mesh",
                    "Mass=150.000000",
                    "Buoyancy=155.000000",
                    "BindName=\"HumanMilitary\""
                ],
                "exec": [],
                "extends": "DXScriptedPawn",
                "functions": {
                    "PostBeginPlay": {
                        "body": "{\n     Super.PostBeginPlay();\n\n     // change the sounds for chicks\n     if (bIsFemale)\n     {\n          HitSound1 = Sound'FemalePainMedium';\n          HitSound2 = Sound'FemalePainLarge';\n          Die = Sound'FemaleDeath';\n     }\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "WillTakeStompDamage": {
                        "body": "{\n     // This blows chunks!\n     if (stomper.IsA('PlayerPawn') && (GetPawnAllianceType(Pawn(stomper)) != ALLIANCE_Hostile))\n          return false;\n     else\n          return true;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "WillTakeStompDamage",
                        "native": false,
                        "param": [
                            [
                                "actor",
                                "stomper"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 61,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "DXRobot.uc": {
            "body": "//=============================================================================\n// Robot.\n//=============================================================================\nclass DXRobot extends DXScriptedPawn\n\tabstract;\n\nvar(Sounds) sound SearchingSound;\nvar(Sounds) sound SpeechTargetAcquired;\nvar(Sounds) sound SpeechTargetLost;\nvar(Sounds) sound SpeechOutOfAmmo;\nvar(Sounds) sound SpeechCriticalDamage;\nvar(Sounds) sound SpeechScanning;\nvar(Sounds) sound SpeechAreaSecure;\nvar(sounds) float dPitch;\nvar() int EMPHitPoints;\nvar ParticleGenerator sparkGen;\nvar float crazedTimer;\n\nvar(Sounds) sound explosionSound;\nvar bool bSmoking;\nvar bool bClientSmoking;\nvar bool bSparking;\nvar bool bClientSparking;\nvar bool bIsDisabled;\n\nreplication\n{\n\treliable if(Role == ROLE_Authority)\n\t\tbSmoking, bSparking;\n}\nsimulated function ClientTimer()\n{\n\tlocal Vector loc;\n\n\tif (sparkGen != None)\n\t{\n\t\tloc = Location;\n\t\tloc.z += CollisionHeight/2;\n\t\tsparkGen.SetLocation(loc);\n\t}\n\n\tif(bSmoking && !bClientSmoking)\n\t{\n\t\tlog(\"Smoking!\");\n\t\tInitGenerator();\n\t\tif (sparkGen != None)\n\t\t{\n\t\t\tlog(sparkGen);\n\t\t\tlog(sparkGen.Base);\n\t\t\t//sparkGen.LifeSpan = 6;\n\t\t\tsparkGen.particleTexture = Texture'Effects.Smoke.SmokePuff1';\n\t\t\tsparkGen.particleDrawScale = 0.3;\n\t\t\tsparkGen.bRandomEject = False;\n\t\t\tsparkGen.ejectSpeed = 10.0;\n\t\t\tsparkGen.bGravity = False;\n\t\t\tsparkGen.bParticlesUnlit = True;\n\t\t\tsparkGen.frequency = 0.3;\n\t\t\tsparkGen.riseRate = 3;\n\t\t\tsparkGen.spawnSound = Sound'Spark2';\n\t\t}\n\t\tbClientSmoking = true;\n\t}\n\telse if(bSparking && !bClientSparking)\n\t{\n\t\tInitGenerator();\n\t\tif (sparkGen != None)\n\t\t{\n\t\t\tsparkGen.particleTexture = Texture'Effects.Fire.SparkFX1';\n\t\t\tsparkGen.particleDrawScale = 0.2;\n\t\t\tsparkGen.bRandomEject = True;\n\t\t\tsparkGen.ejectSpeed = 100.0;\n\t\t\tsparkGen.bGravity = True;\n\t\t\tsparkGen.bParticlesUnlit = True;\n\t\t\tsparkGen.frequency = 0.2;\n\t\t\tsparkGen.riseRate = 10;\n\t\t\tsparkGen.spawnSound = Sound'Spark2';\n\t\t}\n\t\tbClientSparking = true;\n\t}\n\telse if(!bSmoking && !bSparking)\n\t\tDestroyGenerator();\n}\n\nsimulated function InitGenerator()\n{\n\tlocal Vector loc;\n\n\tif ((sparkGen == None) || (sparkGen.bDeleteMe))\n\t{\n\t\tloc = Location;\n\t\tloc.z += CollisionHeight/2;\n\t\tsparkGen = Spawn(class'ParticleGenerator', Self,, loc, rot(16384,0,0));\n\t\tif (sparkGen != None)\n\t\t\tsparkGen.SetBase(Self);\n\t}\n\n\tbClientSmoking = false;\n\tbClientSparking = false;\n}\n\nsimulated function DestroyGenerator()\n{\n\tif (sparkGen != None)\n\t{\n\t\tsparkGen.DelayedDestroy();\n\t\tsparkGen = None;\n\t}\n\n\tbClientSmoking = false;\n\tbClientSparking = false;\n}\n\n//\n// Special tick for robots to show effects of EMP damage\n//\nfunction Tick(float deltaTime)\n{\n\tlocal float pct, mod;\n\n\tSuper.Tick(deltaTime);\n\n\t// DEUS_EX AMSD All the MP robots have massive numbers of EMP hitpoints, not equal to the default.  In multiplayer, at least, only do this if\n\t// they are DAMAGED.\n\tif ((Default.EMPHitPoints != EMPHitPoints) && (EMPHitPoints != 0) && ((Level.Netmode == NM_Standalone) || (EMPHitPoints < Default.EMPHitPoints)))\n\t{\n\t\tpct = (Default.EMPHitPoints - EMPHitPoints) / Default.EMPHitPoints;\n\t\tmod = pct * (1.0 - (2.0 * FRand()));\n\t\tDesiredSpeed = MaxDesiredSpeed + (mod * MaxDesiredSpeed * 0.5);\n\t\tSoundPitch = Default.SoundPitch + (mod * 8.0);\n\t}\n\n\tif (CrazedTimer > 0)\n\t{\n\t\tCrazedTimer -= deltaTime;\n\t\tif (CrazedTimer < 0)\n\t\t\tCrazedTimer = 0;\n\t}\n\n\tif (CrazedTimer > 0)\n\t\tbReverseAlliances = true;\n\telse\n\t\tbReverseAlliances = false;\n\t\n}\n\nfunction ImpartMomentum(Vector momentum, Pawn instigatedBy)\n{\n\t// nil\n}\n\nfunction bool ShouldFlee()\n{\n\treturn (Health <= MinHealth);\n}\n\nfunction bool ShouldDropWeapon()\n{\n\treturn false;\n}\n\n//\n// Called when the robot is destroyed\n//\nsimulated event Destroyed()\n{\n\tSuper.Destroyed();\n\n\tDestroyGenerator();\n}\n\nfunction Carcass SpawnCarcass()\n{\n\tExplodeBot();\n\n\treturn None;\n}\n\nfunction bool IgnoreDamageType(Name damageType)\n{\n\tif ((damageType == 'TearGas') || (damageType == 'HalonGas') || (damageType == 'PoisonGas') || (damageType == 'Radiation'))\n\t\treturn True;\n\telse if ((damageType == 'Poison') || (damageType == 'PoisonEffect'))\n\t\treturn True;\n\telse if (damageType == 'KnockedOut')\n\t\treturn True;\n\telse\n\t\treturn False;\n}\n\nfunction SetOrders(Name orderName, optional Name newOrderTag, optional bool bImmediate)\n{\n\tif (EMPHitPoints > 0 || !bIsDisabled)  // ignore orders if disabled)  // ignore orders if disabled\n\t\tSuper.SetOrders(orderName, newOrderTag, bImmediate);\n}\n\n// ----------------------------------------------------------------------\n// TakeDamageBase()\n// ----------------------------------------------------------------------\n\nfunction TakeDamageBase(int Damage, Pawn instigatedBy, Vector hitlocation, Vector momentum, name damageType, bool bPlayAnim)\n{\n\tlocal float actualDamage;\n\tlocal int oldEMPHitPoints;\n\n\t// Robots are invincible to EMP in multiplayer as well\n\tif (( Level.NetMode != NM_Standalone ) && (damageType == 'EMP') && (Self.IsA('MedicalBot') || Self.IsA('RepairBot')) )\n\t\treturn;\n\n\tif ( bInvincible )\n\t\treturn;\n\n\t// robots aren't affected by gas or radiation\n\tif (IgnoreDamageType(damageType))\n\t\treturn;\n\n\t// enough EMP damage shuts down the robot\n\tif (damageType == 'EMP')\n\t{\n\t\toldEMPHitPoints = EMPHitPoints;\n\t\tEMPHitPoints   -= Damage;\n\n\t\t// make smoke!\n\t\tif (EMPHitPoints <= 0)\n\t\t{\n\t\t\tEMPHitPoints = 0;\n\t\t\tif (oldEMPHitPoints > 0)\n\t\t\t{\n\t\t\t\tPlaySound(sound'EMPZap', SLOT_None,,, (CollisionRadius+CollisionHeight)*8, 2.0);\n\t\t\t\tInitGenerator();\n\t\t\t\tif (sparkGen != None)\n\t\t\t\t{\n\t\t\t\t\tsparkGen.LifeSpan = 6;\n\t\t\t\t\tsparkGen.particleTexture = Texture'Effects.Smoke.SmokePuff1';\n\t\t\t\t\tsparkGen.particleDrawScale = 0.3;\n\t\t\t\t\tsparkGen.bRandomEject = False;\n\t\t\t\t\tsparkGen.ejectSpeed = 10.0;\n\t\t\t\t\tsparkGen.bGravity = False;\n\t\t\t\t\tsparkGen.bParticlesUnlit = True;\n\t\t\t\t\tsparkGen.frequency = 0.3;\n\t\t\t\t\tsparkGen.riseRate = 3;\n\t\t\t\t\tsparkGen.spawnSound = Sound'Spark2';\n\t\t\t\t\tbSmoking = true;\n\t\t\t\t\tlog(\"Server smoking\");\n\t\t\t\t\tbSparking = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAmbientSound = None;\n\t\t\tif (GetStateName() != 'Disabled')\n\t\t\t\tGotoState('Disabled');\n\t\t}\n\n\t\t// make sparks!\n\t\telse if (sparkGen == None)\n\t\t{\n\t\t\tInitGenerator();\n\t\t\tif (sparkGen != None)\n\t\t\t{\n\t\t\t\tsparkGen.particleTexture = Texture'Effects.Fire.SparkFX1';\n\t\t\t\tsparkGen.particleDrawScale = 0.2;\n\t\t\t\tsparkGen.bRandomEject = True;\n\t\t\t\tsparkGen.ejectSpeed = 100.0;\n\t\t\t\tsparkGen.bGravity = True;\n\t\t\t\tsparkGen.bParticlesUnlit = True;\n\t\t\t\tsparkGen.frequency = 0.2;\n\t\t\t\tsparkGen.riseRate = 10;\n\t\t\t\tsparkGen.spawnSound = Sound'Spark2';\n\t\t\t\tbSmoking = false;\n\t\t\t\tbSparking = true;\n\t\t\t}\n\t\t}\n\n\t\treturn;\n\t}\n\telse if (damageType == 'NanoVirus')\n\t{\n\t\tCrazedTimer += 0.5*Damage;\n\t\treturn;\n\t}\n\n\t// play a hit sound\n\tPlayTakeHitSound(Damage, damageType, 1);\n\n\t// increase the pitch of the ambient sound when damaged\n\tif (SoundPitch == Default.SoundPitch)\n\t\tSoundPitch += 16;\n\n\tactualDamage = Level.Game.ReduceDamage(Damage, DamageType, self, instigatedBy);\n\n\t// robots don't have soft, squishy bodies like humans do, so they're less\n\t// susceptible to gunshots...\n\tif (damageType == 'Shot')\n\t\tactualDamage *= 0.25;  // quarter strength\n\n\t// hitting robots with a prod won't stun them, and will only do a limited\n\t// amount of damage...\n\telse if ((damageType == 'Stunned') || (damageType == 'KnockedOut'))\n\t\tactualDamage *= 0.5;  // half strength\n\n\t// flame attacks don't really hurt robots much, either\n\telse if ((damageType == 'Flamed') || (damageType == 'Burned'))\n\t\tactualDamage *= 0.25;  // quarter strength\n\n\tif ((actualDamage > 0.01) && (actualDamage < 1))\n\t\tactualDamage = 1;\n\tactualDamage = int(actualDamage+0.5);\n\n\tif (ReducedDamageType == 'All') //God mode\n\t\tactualDamage = 0;\n\telse if (Inventory != None) //then check if carrying armor\n\t\tactualDamage = Inventory.ReduceDamage(int(actualDamage), DamageType, HitLocation);\n\n\tif (!bInvincible)\n\t\tHealth -= int(actualDamage);\n\n\tif (Health <= 0)\n\t{\n\t\tClearNextState();\n\t\t//PlayDeathHit(actualDamage, hitLocation, damageType);\n\t\tif ( actualDamage > mass )\n\t\t\tHealth = -1 * actualDamage;\n\t\tEnemy = instigatedBy;\n\t\tDied(instigatedBy, damageType, HitLocation);\n\t}\n\tMakeNoise(1.0);\n\n\tReactToInjury(instigatedBy, damageType, HITLOC_None);\n}\n\nfunction ReactToInjury(Pawn instigatedBy, Name damageType, EHitLocation hitPos)\n{\n\tlocal Pawn oldEnemy;\n\n\tif (IgnoreDamageType(damageType))\n\t\treturn;\n\n\tif (EMPHitPoints > 0)\n\t{\n\t\tif (damageType == 'NanoVirus')\n\t\t{\n\t\t\toldEnemy = Enemy;\n\t\t\tFindBestEnemy(false);\n\t\t\tif (oldEnemy != Enemy)\n\t\t\t\tPlayNewTargetSound();\n\t\t\tinstigatedBy = Enemy;\n\t\t}\n\t\tSuper.ReactToInjury(instigatedBy, damageType, hitPos);\n\t}\n}\n\nfunction GotoDisabledState(name damageType, EHitLocation hitPos)\n{\n\tif (!bCollideActors && !bBlockActors && !bBlockPlayers)\n\t\treturn;\n\telse if (!IgnoreDamageType(damageType) && CanShowPain())\n\t\tTakeHit(hitPos);\n\telse\n\t\tGotoNextState();\n}\n\n\nfunction ComputeFallDirection(float totalTime, int numFrames,\n                              out vector moveDir, out float stopTime)\n{\n}\n\n\nfunction Explode()\n{\n\tlocal SphereEffect sphere;\n\tlocal ScorchMark s;\n\tlocal ExplosionLight light;\n\tlocal int i;\n\tlocal float explosionDamage;\n\tlocal float explosionRadius;\n\n\texplosionDamage = 100;\n\texplosionRadius = 256;\n\n\t// alert NPCs that I'm exploding\n\tAISendEvent('LoudNoise', EAITYPE_Audio, , explosionRadius*16);\n\tPlaySound(Sound'LargeExplosion1', SLOT_None,,, explosionRadius*16);\n\n\t// draw a pretty explosion\n\tlight = Spawn(class'ExplosionLight',,, Location);\n\tif (light != None)\n\t\tlight.size = 4;\n\n\tSpawn(class'ExplosionSmall',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionLarge',,, Location + 2*VRand()*CollisionRadius);\n\n\tsphere = Spawn(class'SphereEffect',,, Location);\n\tif (sphere != None)\n\t\tsphere.size = explosionRadius / 32.0;\n\n\t// spawn a mark\n\ts = spawn(class'ScorchMark', Base,, Location-vect(0,0,1)*CollisionHeight, Rotation+rot(16384,0,0));\n\tif (s != None)\n\t{\n\t\ts.DrawScale = FClamp(explosionDamage/30, 0.1, 3.0);\n\t\ts.ReattachDecal();\n\t}\n\n\t// spawn some rocks and flesh fragments\n\tfor (i=0; i<explosionDamage/6; i++)\n\t{\n\t\tif (FRand() < 0.3)\n\t\t\tspawn(class'Rockchip',,,Location);\n\t\telse\n\t\t\tspawn(class'FleshFragment',,,Location);\n\t}\n\n\tHurtRadius(explosionDamage, explosionRadius, 'Exploded', explosionDamage*100, Location);\n}\n\nfunction TweenToRunningAndFiring(float tweentime)\n{\n\tbIsWalking = FALSE;\n\tTweenAnimPivot('Run', tweentime);\n}\n\nfunction PlayRunningAndFiring()\n{\n\tbIsWalking = FALSE;\n\tLoopAnimPivot('Run');\n}\n\nfunction TweenToShoot(float tweentime)\n{\n\tTweenAnimPivot('Still', tweentime);\n}\n\nfunction PlayShoot()\n{\n\tPlayAnimPivot('Still');\n}\n\nfunction TweenToAttack(float tweentime)\n{\n\tTweenAnimPivot('Still', tweentime);\n}\n\nfunction PlayAttack()\n{\n\tPlayAnimPivot('Still');\n}\n\nfunction PlayTurning()\n{\n\tLoopAnimPivot('Walk');\n}\n\nfunction PlayFalling()\n{\n}\n\nfunction TweenToWalking(float tweentime)\n{\n\tbIsWalking = True;\n\tTweenAnimPivot('Walk', tweentime);\n}\n\nfunction PlayWalking()\n{\n\tbIsWalking = True;\n\tLoopAnimPivot('Walk');\n}\n\nfunction TweenToRunning(float tweentime)\n{\n\tbIsWalking = False;\n\tPlayAnimPivot('Run',, tweentime);\n}\n\nfunction PlayRunning()\n{\n\tbIsWalking = False;\n\tLoopAnimPivot('Run');\n}\n\nfunction TweenToWaiting(float tweentime)\n{\n\tTweenAnimPivot('Idle', tweentime);\n}\n\nfunction PlayWaiting()\n{\n\tPlayAnimPivot('Idle');\n}\n\nfunction PlaySwimming()\n{\n\tLoopAnimPivot('Still');\n}\n\nfunction TweenToSwimming(float tweentime)\n{\n\tTweenAnimPivot('Still', tweentime);\n}\n\nfunction PlayLanded(float impactVel)\n{\n\tbIsWalking = True;\n}\n\nfunction PlayDuck()\n{\n\tTweenAnimPivot('Still', 0.25);\n}\n\nfunction PlayRising()\n{\n\tPlayAnimPivot('Still');\n}\n\nfunction PlayCrawling()\n{\n\tLoopAnimPivot('Still');\n}\n\nfunction PlayFiring()\n{\n\tLoopAnimPivot('Still',,0.1);\n}\n\nfunction PlayReloadBegin()\n{\n\tPlayAnimPivot('Still',, 0.1);\n}\n\nfunction PlayReload()\n{\n\tPlayAnimPivot('Still');\n}\n\nfunction PlayReloadEnd()\n{\n\tPlayAnimPivot('Still',, 0.1);\n}\n\nfunction PlayCowerBegin() {}\nfunction PlayCowering() {}\nfunction PlayCowerEnd() {}\n\nfunction PlayDisabled()\n{\n\tTweenAnimPivot('Still', 0.2);\n}\n\nfunction PlayWeaponSwitch(Weapon newWeapon)\n{\n}\n\nfunction PlayIdleSound()\n{\n}\n\nfunction PlayScanningSound()\n{\n\tPlaySound(SearchingSound, SLOT_None,,, 2048);\n\tPlaySound(SpeechScanning, SLOT_None,,, 2048);\n}\n\nfunction PlaySearchingSound()\n{\n\tPlaySound(SearchingSound, SLOT_None,,, 2048);\n\tPlaySound(SpeechScanning, SLOT_None,,, 2048);\n}\n\nfunction PlayTargetAcquiredSound()\n{\n\tPlaySound(SpeechTargetAcquired, SLOT_None,,, 2048);\n}\n\nfunction PlayTargetLostSound()\n{\n\tPlaySound(SpeechTargetLost, SLOT_None,,, 2048);\n}\n\nfunction PlayGoingForAlarmSound()\n{\n}\n\nfunction PlayOutOfAmmoSound()\n{\n\tPlaySound(SpeechOutOfAmmo, SLOT_None,,, 2048);\n}\n\nfunction PlayCriticalDamageSound()\n{\n\tPlaySound(SpeechCriticalDamage, SLOT_None,,, 2048);\n}\n\nfunction PlayAreaSecureSound()\n{\n\tPlaySound(SpeechAreaSecure, SLOT_None,,, 2048);\n}\n\n\n\nstate Disabled\n{\n\tignores bump, frob, reacttoinjury;\n\tfunction BeginState()\n\t{\n\t\tStandUp();\n\t\tBlockReactions(true);\n\t\tbCanConverse = False;\n\t\tSeekPawn = None;\n\t}\n\tfunction EndState()\n\t{\n\t\tResetReactions();\n\t\tbCanConverse = True;\n\t}\n\nBegin:\n\tAcceleration=vect(0,0,0);\n\tDesiredRotation=Rotation;\n\tPlayDisabled();\n\nDisabled:\n}\n\nstate Fleeing\n{\n\tignores Frob;\n\tfunction PickDestination()\n\t{\n\t\tlocal int     iterations;\n\t\tlocal float   magnitude;\n\t\tlocal rotator rot1;\n\n\t\titerations = 4;\n\t\tmagnitude  = 400*(FRand()*0.4+0.8);  // 400, +/-20%\n\t\trot1       = Rotator(Location-Enemy.Location);\n\t\tif (!AIPickRandomDestination(40, magnitude, rot1.Yaw, 0.6, rot1.Pitch, 0.6, iterations,\n\t\t                             FRand()*0.4+0.35, destLoc))\n\t\t\tdestLoc = Location;  // we give up\n\t}\n}\n\n// ------------------------------------------------------------\n// IsImmobile\n// If the bots are immobile, then we can make them always relevant\n// ------------------------------------------------------------\nfunction bool IsImmobile()\n{\n   local bool bHasReactions;\n   local bool bHasFears;\n   local bool bHasHates;\n\n   if (Orders != 'Standing')\n      return false;\n\n   bHasReactions = bReactFutz || bReactPresence || bReactLoudNoise || bReactAlarm || bReactShot || bReactCarcass || bReactDistress || bReactProjectiles;\n\n   bHasFears = bFearHacking || bFearWeapon || bFearShot || bFearInjury || bFearIndirectInjury || bFearCarcass || bFearDistress || bFearAlarm || bFearProjectiles;\n\n   bHasHates = bHateHacking || bHateWeapon || bHateShot || bHateInjury || bHateIndirectInjury || bHateCarcass || bHateDistress;\n\n   return (!bHasReactions && !bHasFears && !bHasHates);\n}\n\ndefaultproperties\n{\n     dPitch=62.000000\n     EMPHitPoints=50\n     explosionSound=Sound'DeusExSounds.Robot.RobotExplode'\n     Saymsg=\"<NO CONVERSATION WANTED, PLEASE MOVE ALONG>\"\n     maxRange=512.000000\n     MinHealth=0.000000\n     RandomWandering=0.150000\n     bCanBleed=False\n     bShowPain=False\n     bCanSit=False\n     bAvoidAim=False\n     bAvoidHarm=False\n     bHateShot=False\n     bReactAlarm=True\n     bReactProjectiles=False\n     bEmitDistress=False\n     bMustFaceTarget=False\n     FireAngle=60.000000\n     MaxProvocations=0\n     SurprisePeriod=0.000000\n     EnemyTimeout=7.000000\n     walkAnimMult=1.000000\n     bCanStrafe=False\n     bCanSwim=False\n     bIsHuman=False\n     JumpZ=0.000000\n     MaxStepHeight=4.000000\n     Health=50\n     HitSound1=Sound'DeusExSounds.Generic.Spark1'\n     HitSound2=Sound'DeusExSounds.Generic.Spark1'\n     Die=Sound'DeusExSounds.Generic.Spark1'\n     VisibilityThreshold=0.010000\n     BindName=\"DXRobot\"\n}\n",
            "name": "DXRobot.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "dPitch=62.000000",
                    "EMPHitPoints=50",
                    "explosionSound=Sound'DeusExSounds.Robot.RobotExplode'",
                    "Saymsg=\"<NO CONVERSATION WANTED, PLEASE MOVE ALONG>\"",
                    "maxRange=512.000000",
                    "MinHealth=0.000000",
                    "RandomWandering=0.150000",
                    "bCanBleed=False",
                    "bShowPain=False",
                    "bCanSit=False",
                    "bAvoidAim=False",
                    "bAvoidHarm=False",
                    "bHateShot=False",
                    "bReactAlarm=True",
                    "bReactProjectiles=False",
                    "bEmitDistress=False",
                    "bMustFaceTarget=False",
                    "FireAngle=60.000000",
                    "MaxProvocations=0",
                    "SurprisePeriod=0.000000",
                    "EnemyTimeout=7.000000",
                    "walkAnimMult=1.000000",
                    "bCanStrafe=False",
                    "bCanSwim=False",
                    "bIsHuman=False",
                    "JumpZ=0.000000",
                    "MaxStepHeight=4.000000",
                    "Health=50",
                    "HitSound1=Sound'DeusExSounds.Generic.Spark1'",
                    "HitSound2=Sound'DeusExSounds.Generic.Spark1'",
                    "Die=Sound'DeusExSounds.Generic.Spark1'",
                    "VisibilityThreshold=0.010000",
                    "BindName=\"DXRobot\""
                ],
                "exec": [],
                "extends": "DXScriptedPawn",
                "functions": {
                    "BeginState": {
                        "body": "{\n\t\tStandUp();\n\t\tBlockReactions(true);\n\t\tbCanConverse = False;\n\t\tSeekPawn = None;\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "BeginState",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ClientTimer": {
                        "body": "{\n\n\tif (sparkGen != None)\n\t{\n\t\tloc = Location;\n\t\tloc.z += CollisionHeight/2;\n\t\tsparkGen.SetLocation(loc);\n\t}\n\n\tif(bSmoking && !bClientSmoking)\n\t{\n\t\tlog(\"Smoking!\");\n\t\tInitGenerator();\n\t\tif (sparkGen != None)\n\t\t{\n\t\t\tlog(sparkGen);\n\t\t\tlog(sparkGen.Base);\n\t\t\t//sparkGen.LifeSpan = 6;\n\t\t\tsparkGen.particleTexture = Texture'Effects.Smoke.SmokePuff1';\n\t\t\tsparkGen.particleDrawScale = 0.3;\n\t\t\tsparkGen.bRandomEject = False;\n\t\t\tsparkGen.ejectSpeed = 10.0;\n\t\t\tsparkGen.bGravity = False;\n\t\t\tsparkGen.bParticlesUnlit = True;\n\t\t\tsparkGen.frequency = 0.3;\n\t\t\tsparkGen.riseRate = 3;\n\t\t\tsparkGen.spawnSound = Sound'Spark2';\n\t\t}\n\t\tbClientSmoking = true;\n\t}\n\telse if(bSparking && !bClientSparking)\n\t{\n\t\tInitGenerator();\n\t\tif (sparkGen != None)\n\t\t{\n\t\t\tsparkGen.particleTexture = Texture'Effects.Fire.SparkFX1';\n\t\t\tsparkGen.particleDrawScale = 0.2;\n\t\t\tsparkGen.bRandomEject = True;\n\t\t\tsparkGen.ejectSpeed = 100.0;\n\t\t\tsparkGen.bGravity = True;\n\t\t\tsparkGen.bParticlesUnlit = True;\n\t\t\tsparkGen.frequency = 0.2;\n\t\t\tsparkGen.riseRate = 10;\n\t\t\tsparkGen.spawnSound = Sound'Spark2';\n\t\t}\n\t\tbClientSparking = true;\n\t}\n\telse if(!bSmoking && !bSparking)\n\t\tDestroyGenerator();\n}",
                        "locals": [
                            "local Vector loc;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "ClientTimer",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "DestroyGenerator": {
                        "body": "{\n\tif (sparkGen != None)\n\t{\n\t\tsparkGen.DelayedDestroy();\n\t\tsparkGen = None;\n\t}\n\n\tbClientSmoking = false;\n\tbClientSparking = false;\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "DestroyGenerator",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Destroyed": {
                        "body": "{\n\tSuper.Destroyed();\n\n\tDestroyGenerator();\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Destroyed",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "EndState": {
                        "body": "{\n\t\tResetReactions();\n\t\tbCanConverse = True;\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "EndState",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Explode": {
                        "body": "{\n\n\texplosionDamage = 100;\n\texplosionRadius = 256;\n\n\t// alert NPCs that I'm exploding\n\tAISendEvent('LoudNoise', EAITYPE_Audio, , explosionRadius*16);\n\tPlaySound(Sound'LargeExplosion1', SLOT_None,,, explosionRadius*16);\n\n\t// draw a pretty explosion\n\tlight = Spawn(class'ExplosionLight',,, Location);\n\tif (light != None)\n\t\tlight.size = 4;\n\n\tSpawn(class'ExplosionSmall',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionLarge',,, Location + 2*VRand()*CollisionRadius);\n\n\tsphere = Spawn(class'SphereEffect',,, Location);\n\tif (sphere != None)\n\t\tsphere.size = explosionRadius / 32.0;\n\n\t// spawn a mark\n\ts = spawn(class'ScorchMark', Base,, Location-vect(0,0,1)*CollisionHeight, Rotation+rot(16384,0,0));\n\tif (s != None)\n\t{\n\t\ts.DrawScale = FClamp(explosionDamage/30, 0.1, 3.0);\n\t\ts.ReattachDecal();\n\t}\n\n\t// spawn some rocks and flesh fragments\n\tfor (i=0; i<explosionDamage/6; i++)\n\t{\n\t\tif (FRand() < 0.3)\n\t\t\tspawn(class'Rockchip',,,Location);\n\t\telse\n\t\t\tspawn(class'FleshFragment',,,Location);\n\t}\n\n\tHurtRadius(explosionDamage, explosionRadius, 'Exploded', explosionDamage*100, Location);\n}",
                        "locals": [
                            "local SphereEffect sphere;",
                            "local ScorchMark s;",
                            "local ExplosionLight light;",
                            "local int i;",
                            "local float explosionDamage;",
                            "local float explosionRadius;"
                        ],
                        "modifiers": [],
                        "name": "Explode",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "GotoDisabledState": {
                        "body": "{\n\tif (!bCollideActors && !bBlockActors && !bBlockPlayers)\n\t\treturn;\n\telse if (!IgnoreDamageType(damageType) && CanShowPain())\n\t\tTakeHit(hitPos);\n\telse\n\t\tGotoNextState();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "GotoDisabledState",
                        "native": false,
                        "param": [
                            [
                                "name",
                                "damageType"
                            ],
                            [
                                "EHitLocation",
                                "hitPos"
                            ]
                        ],
                        "return": ""
                    },
                    "IgnoreDamageType": {
                        "body": "{\n\tif ((damageType == 'TearGas') || (damageType == 'HalonGas') || (damageType == 'PoisonGas') || (damageType == 'Radiation'))\n\t\treturn True;\n\telse if ((damageType == 'Poison') || (damageType == 'PoisonEffect'))\n\t\treturn True;\n\telse if (damageType == 'KnockedOut')\n\t\treturn True;\n\telse\n\t\treturn False;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "IgnoreDamageType",
                        "native": false,
                        "param": [
                            [
                                "Name",
                                "damageType"
                            ]
                        ],
                        "return": "bool"
                    },
                    "ImpartMomentum": {
                        "body": "{\n\t// nil\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "ImpartMomentum",
                        "native": false,
                        "param": [
                            [
                                "Vector",
                                "momentum"
                            ],
                            [
                                "Pawn",
                                "instigatedBy"
                            ]
                        ],
                        "return": ""
                    },
                    "InitGenerator": {
                        "body": "{\n\n\tif ((sparkGen == None) || (sparkGen.bDeleteMe))\n\t{\n\t\tloc = Location;\n\t\tloc.z += CollisionHeight/2;\n\t\tsparkGen = Spawn(class'ParticleGenerator', Self,, loc, rot(16384,0,0));\n\t\tif (sparkGen != None)\n\t\t\tsparkGen.SetBase(Self);\n\t}\n\n\tbClientSmoking = false;\n\tbClientSparking = false;\n}",
                        "locals": [
                            "local Vector loc;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "InitGenerator",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "IsImmobile": {
                        "body": "{\n\n   if (Orders != 'Standing')\n      return false;\n\n   bHasReactions = bReactFutz || bReactPresence || bReactLoudNoise || bReactAlarm || bReactShot || bReactCarcass || bReactDistress || bReactProjectiles;\n\n   bHasFears = bFearHacking || bFearWeapon || bFearShot || bFearInjury || bFearIndirectInjury || bFearCarcass || bFearDistress || bFearAlarm || bFearProjectiles;\n\n   bHasHates = bHateHacking || bHateWeapon || bHateShot || bHateInjury || bHateIndirectInjury || bHateCarcass || bHateDistress;\n\n   return (!bHasReactions && !bHasFears && !bHasHates);\n}",
                        "locals": [
                            "local bool bHasReactions;",
                            "local bool bHasFears;",
                            "local bool bHasHates;"
                        ],
                        "modifiers": [],
                        "name": "IsImmobile",
                        "native": false,
                        "param": [],
                        "return": "bool"
                    },
                    "PickDestination": {
                        "body": "{\n\n\t\titerations = 4;\n\t\tmagnitude  = 400*(FRand()*0.4+0.8);  // 400, +/-20%\n\t\trot1       = Rotator(Location-Enemy.Location);\n\t\tif (!AIPickRandomDestination(40, magnitude, rot1.Yaw, 0.6, rot1.Pitch, 0.6, iterations,\n\t\t                             FRand()*0.4+0.35, destLoc))\n\t\t\tdestLoc = Location;  // we give up\n\t}",
                        "locals": [
                            "local int     iterations;",
                            "local float   magnitude;",
                            "local rotator rot1;"
                        ],
                        "modifiers": [],
                        "name": "PickDestination",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PlayAreaSecureSound": {
                        "body": "{\n\tPlaySound(SpeechAreaSecure, SLOT_None,,, 2048);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PlayAreaSecureSound",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PlayAttack": {
                        "body": "{\n\tPlayAnimPivot('Still');\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PlayAttack",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PlayCrawling": {
                        "body": "{\n\tLoopAnimPivot('Still');\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PlayCrawling",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PlayCriticalDamageSound": {
                        "body": "{\n\tPlaySound(SpeechCriticalDamage, SLOT_None,,, 2048);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PlayCriticalDamageSound",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PlayDisabled": {
                        "body": "{\n\tTweenAnimPivot('Still', 0.2);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PlayDisabled",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PlayDuck": {
                        "body": "{\n\tTweenAnimPivot('Still', 0.25);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PlayDuck",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PlayFalling": {
                        "body": "{\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PlayFalling",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PlayFiring": {
                        "body": "{\n\tLoopAnimPivot('Still',,0.1);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PlayFiring",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PlayGoingForAlarmSound": {
                        "body": "{\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PlayGoingForAlarmSound",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PlayIdleSound": {
                        "body": "{\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PlayIdleSound",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PlayLanded": {
                        "body": "{\n\tbIsWalking = True;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PlayLanded",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "impactVel"
                            ]
                        ],
                        "return": ""
                    },
                    "PlayOutOfAmmoSound": {
                        "body": "{\n\tPlaySound(SpeechOutOfAmmo, SLOT_None,,, 2048);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PlayOutOfAmmoSound",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PlayReload": {
                        "body": "{\n\tPlayAnimPivot('Still');\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PlayReload",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PlayReloadBegin": {
                        "body": "{\n\tPlayAnimPivot('Still',, 0.1);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PlayReloadBegin",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PlayReloadEnd": {
                        "body": "{\n\tPlayAnimPivot('Still',, 0.1);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PlayReloadEnd",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PlayRising": {
                        "body": "{\n\tPlayAnimPivot('Still');\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PlayRising",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PlayRunning": {
                        "body": "{\n\tbIsWalking = False;\n\tLoopAnimPivot('Run');\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PlayRunning",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PlayRunningAndFiring": {
                        "body": "{\n\tbIsWalking = FALSE;\n\tLoopAnimPivot('Run');\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PlayRunningAndFiring",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PlayScanningSound": {
                        "body": "{\n\tPlaySound(SearchingSound, SLOT_None,,, 2048);\n\tPlaySound(SpeechScanning, SLOT_None,,, 2048);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PlayScanningSound",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PlaySearchingSound": {
                        "body": "{\n\tPlaySound(SearchingSound, SLOT_None,,, 2048);\n\tPlaySound(SpeechScanning, SLOT_None,,, 2048);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PlaySearchingSound",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PlayShoot": {
                        "body": "{\n\tPlayAnimPivot('Still');\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PlayShoot",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PlaySwimming": {
                        "body": "{\n\tLoopAnimPivot('Still');\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PlaySwimming",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PlayTargetAcquiredSound": {
                        "body": "{\n\tPlaySound(SpeechTargetAcquired, SLOT_None,,, 2048);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PlayTargetAcquiredSound",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PlayTargetLostSound": {
                        "body": "{\n\tPlaySound(SpeechTargetLost, SLOT_None,,, 2048);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PlayTargetLostSound",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PlayTurning": {
                        "body": "{\n\tLoopAnimPivot('Walk');\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PlayTurning",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PlayWaiting": {
                        "body": "{\n\tPlayAnimPivot('Idle');\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PlayWaiting",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PlayWalking": {
                        "body": "{\n\tbIsWalking = True;\n\tLoopAnimPivot('Walk');\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PlayWalking",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PlayWeaponSwitch": {
                        "body": "{\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PlayWeaponSwitch",
                        "native": false,
                        "param": [
                            [
                                "Weapon",
                                "newWeapon"
                            ]
                        ],
                        "return": ""
                    },
                    "ReactToInjury": {
                        "body": "{\n\n\tif (IgnoreDamageType(damageType))\n\t\treturn;\n\n\tif (EMPHitPoints > 0)\n\t{\n\t\tif (damageType == 'NanoVirus')\n\t\t{\n\t\t\toldEnemy = Enemy;\n\t\t\tFindBestEnemy(false);\n\t\t\tif (oldEnemy != Enemy)\n\t\t\t\tPlayNewTargetSound();\n\t\t\tinstigatedBy = Enemy;\n\t\t}\n\t\tSuper.ReactToInjury(instigatedBy, damageType, hitPos);\n\t}\n}",
                        "locals": [
                            "local Pawn oldEnemy;"
                        ],
                        "modifiers": [],
                        "name": "ReactToInjury",
                        "native": false,
                        "param": [
                            [
                                "Pawn",
                                "instigatedBy"
                            ],
                            [
                                "Name",
                                "damageType"
                            ],
                            [
                                "EHitLocation",
                                "hitPos"
                            ]
                        ],
                        "return": ""
                    },
                    "SetOrders": {
                        "body": "{\n\tif (EMPHitPoints > 0 || !bIsDisabled)  // ignore orders if disabled)  // ignore orders if disabled\n\t\tSuper.SetOrders(orderName, newOrderTag, bImmediate);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetOrders",
                        "native": false,
                        "param": [
                            [
                                "Name",
                                "orderName"
                            ],
                            [
                                "optional",
                                "Name",
                                "newOrderTag"
                            ],
                            [
                                "optional",
                                "bool",
                                "bImmediate"
                            ]
                        ],
                        "return": ""
                    },
                    "ShouldDropWeapon": {
                        "body": "{\n\treturn false;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "ShouldDropWeapon",
                        "native": false,
                        "param": [],
                        "return": "bool"
                    },
                    "ShouldFlee": {
                        "body": "{\n\treturn (Health <= MinHealth);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "ShouldFlee",
                        "native": false,
                        "param": [],
                        "return": "bool"
                    },
                    "SpawnCarcass": {
                        "body": "{\n\tExplodeBot();\n\n\treturn None;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "SpawnCarcass",
                        "native": false,
                        "param": [],
                        "return": "Carcass"
                    },
                    "TakeDamageBase": {
                        "body": "{\n\n\t// Robots are invincible to EMP in multiplayer as well\n\tif (( Level.NetMode != NM_Standalone ) && (damageType == 'EMP') && (Self.IsA('MedicalBot') || Self.IsA('RepairBot')) )\n\t\treturn;\n\n\tif ( bInvincible )\n\t\treturn;\n\n\t// robots aren't affected by gas or radiation\n\tif (IgnoreDamageType(damageType))\n\t\treturn;\n\n\t// enough EMP damage shuts down the robot\n\tif (damageType == 'EMP')\n\t{\n\t\toldEMPHitPoints = EMPHitPoints;\n\t\tEMPHitPoints   -= Damage;\n\n\t\t// make smoke!\n\t\tif (EMPHitPoints <= 0)\n\t\t{\n\t\t\tEMPHitPoints = 0;\n\t\t\tif (oldEMPHitPoints > 0)\n\t\t\t{\n\t\t\t\tPlaySound(sound'EMPZap', SLOT_None,,, (CollisionRadius+CollisionHeight)*8, 2.0);\n\t\t\t\tInitGenerator();\n\t\t\t\tif (sparkGen != None)\n\t\t\t\t{\n\t\t\t\t\tsparkGen.LifeSpan = 6;\n\t\t\t\t\tsparkGen.particleTexture = Texture'Effects.Smoke.SmokePuff1';\n\t\t\t\t\tsparkGen.particleDrawScale = 0.3;\n\t\t\t\t\tsparkGen.bRandomEject = False;\n\t\t\t\t\tsparkGen.ejectSpeed = 10.0;\n\t\t\t\t\tsparkGen.bGravity = False;\n\t\t\t\t\tsparkGen.bParticlesUnlit = True;\n\t\t\t\t\tsparkGen.frequency = 0.3;\n\t\t\t\t\tsparkGen.riseRate = 3;\n\t\t\t\t\tsparkGen.spawnSound = Sound'Spark2';\n\t\t\t\t\tbSmoking = true;\n\t\t\t\t\tlog(\"Server smoking\");\n\t\t\t\t\tbSparking = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tAmbientSound = None;\n\t\t\tif (GetStateName() != 'Disabled')\n\t\t\t\tGotoState('Disabled');\n\t\t}\n\n\t\t// make sparks!\n\t\telse if (sparkGen == None)\n\t\t{\n\t\t\tInitGenerator();\n\t\t\tif (sparkGen != None)\n\t\t\t{\n\t\t\t\tsparkGen.particleTexture = Texture'Effects.Fire.SparkFX1';\n\t\t\t\tsparkGen.particleDrawScale = 0.2;\n\t\t\t\tsparkGen.bRandomEject = True;\n\t\t\t\tsparkGen.ejectSpeed = 100.0;\n\t\t\t\tsparkGen.bGravity = True;\n\t\t\t\tsparkGen.bParticlesUnlit = True;\n\t\t\t\tsparkGen.frequency = 0.2;\n\t\t\t\tsparkGen.riseRate = 10;\n\t\t\t\tsparkGen.spawnSound = Sound'Spark2';\n\t\t\t\tbSmoking = false;\n\t\t\t\tbSparking = true;\n\t\t\t}\n\t\t}\n\n\t\treturn;\n\t}\n\telse if (damageType == 'NanoVirus')\n\t{\n\t\tCrazedTimer += 0.5*Damage;\n\t\treturn;\n\t}\n\n\t// play a hit sound\n\tPlayTakeHitSound(Damage, damageType, 1);\n\n\t// increase the pitch of the ambient sound when damaged\n\tif (SoundPitch == Default.SoundPitch)\n\t\tSoundPitch += 16;\n\n\tactualDamage = Level.Game.ReduceDamage(Damage, DamageType, self, instigatedBy);\n\n\t// robots don't have soft, squishy bodies like humans do, so they're less\n\t// susceptible to gunshots...\n\tif (damageType == 'Shot')\n\t\tactualDamage *= 0.25;  // quarter strength\n\n\t// hitting robots with a prod won't stun them, and will only do a limited\n\t// amount of damage...\n\telse if ((damageType == 'Stunned') || (damageType == 'KnockedOut'))\n\t\tactualDamage *= 0.5;  // half strength\n\n\t// flame attacks don't really hurt robots much, either\n\telse if ((damageType == 'Flamed') || (damageType == 'Burned'))\n\t\tactualDamage *= 0.25;  // quarter strength\n\n\tif ((actualDamage > 0.01) && (actualDamage < 1))\n\t\tactualDamage = 1;\n\tactualDamage = int(actualDamage+0.5);\n\n\tif (ReducedDamageType == 'All') //God mode\n\t\tactualDamage = 0;\n\telse if (Inventory != None) //then check if carrying armor\n\t\tactualDamage = Inventory.ReduceDamage(int(actualDamage), DamageType, HitLocation);\n\n\tif (!bInvincible)\n\t\tHealth -= int(actualDamage);\n\n\tif (Health <= 0)\n\t{\n\t\tClearNextState();\n\t\t//PlayDeathHit(actualDamage, hitLocation, damageType);\n\t\tif ( actualDamage > mass )\n\t\t\tHealth = -1 * actualDamage;\n\t\tEnemy = instigatedBy;\n\t\tDied(instigatedBy, damageType, HitLocation);\n\t}\n\tMakeNoise(1.0);\n\n\tReactToInjury(instigatedBy, damageType, HITLOC_None);\n}",
                        "locals": [
                            "local float actualDamage;",
                            "local int oldEMPHitPoints;"
                        ],
                        "modifiers": [],
                        "name": "TakeDamageBase",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "Damage"
                            ],
                            [
                                "Pawn",
                                "instigatedBy"
                            ],
                            [
                                "Vector",
                                "hitlocation"
                            ],
                            [
                                "Vector",
                                "momentum"
                            ],
                            [
                                "name",
                                "damageType"
                            ],
                            [
                                "bool",
                                "bPlayAnim"
                            ]
                        ],
                        "return": ""
                    },
                    "Tick": {
                        "body": "{\n\n\tSuper.Tick(deltaTime);\n\n\t// DEUS_EX AMSD All the MP robots have massive numbers of EMP hitpoints, not equal to the default.  In multiplayer, at least, only do this if\n\t// they are DAMAGED.\n\tif ((Default.EMPHitPoints != EMPHitPoints) && (EMPHitPoints != 0) && ((Level.Netmode == NM_Standalone) || (EMPHitPoints < Default.EMPHitPoints)))\n\t{\n\t\tpct = (Default.EMPHitPoints - EMPHitPoints) / Default.EMPHitPoints;\n\t\tmod = pct * (1.0 - (2.0 * FRand()));\n\t\tDesiredSpeed = MaxDesiredSpeed + (mod * MaxDesiredSpeed * 0.5);\n\t\tSoundPitch = Default.SoundPitch + (mod * 8.0);\n\t}\n\n\tif (CrazedTimer > 0)\n\t{\n\t\tCrazedTimer -= deltaTime;\n\t\tif (CrazedTimer < 0)\n\t\t\tCrazedTimer = 0;\n\t}\n\n\tif (CrazedTimer > 0)\n\t\tbReverseAlliances = true;\n\telse\n\t\tbReverseAlliances = false;\n\t\n}",
                        "locals": [
                            "local float pct, mod;"
                        ],
                        "modifiers": [],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltaTime"
                            ]
                        ],
                        "return": ""
                    },
                    "TweenToAttack": {
                        "body": "{\n\tTweenAnimPivot('Still', tweentime);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "TweenToAttack",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "tweentime"
                            ]
                        ],
                        "return": ""
                    },
                    "TweenToRunning": {
                        "body": "{\n\tbIsWalking = False;\n\tPlayAnimPivot('Run',, tweentime);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "TweenToRunning",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "tweentime"
                            ]
                        ],
                        "return": ""
                    },
                    "TweenToRunningAndFiring": {
                        "body": "{\n\tbIsWalking = FALSE;\n\tTweenAnimPivot('Run', tweentime);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "TweenToRunningAndFiring",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "tweentime"
                            ]
                        ],
                        "return": ""
                    },
                    "TweenToShoot": {
                        "body": "{\n\tTweenAnimPivot('Still', tweentime);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "TweenToShoot",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "tweentime"
                            ]
                        ],
                        "return": ""
                    },
                    "TweenToSwimming": {
                        "body": "{\n\tTweenAnimPivot('Still', tweentime);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "TweenToSwimming",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "tweentime"
                            ]
                        ],
                        "return": ""
                    },
                    "TweenToWaiting": {
                        "body": "{\n\tTweenAnimPivot('Idle', tweentime);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "TweenToWaiting",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "tweentime"
                            ]
                        ],
                        "return": ""
                    },
                    "TweenToWalking": {
                        "body": "{\n\tbIsWalking = True;\n\tTweenAnimPivot('Walk', tweentime);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "TweenToWalking",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "tweentime"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 702,
                "replication": "",
                "states": [],
                "variables": [
                    "var(Sounds) sound SearchingSound;",
                    "var(Sounds) sound SpeechTargetAcquired;",
                    "var(Sounds) sound SpeechTargetLost;",
                    "var(Sounds) sound SpeechOutOfAmmo;",
                    "var(Sounds) sound SpeechCriticalDamage;",
                    "var(Sounds) sound SpeechScanning;",
                    "var(Sounds) sound SpeechAreaSecure;",
                    "var(sounds) float dPitch;",
                    "var() int EMPHitPoints;",
                    "var ParticleGenerator sparkGen;",
                    "var float crazedTimer;",
                    "var(Sounds) sound explosionSound;",
                    "var bool bSmoking;",
                    "var bool bClientSmoking;",
                    "var bool bSparking;",
                    "var bool bClientSparking;",
                    "var bool bIsDisabled;"
                ]
            }
        },
        "DXScriptedPawn.uc": {
            "body": "class DXScriptedPawn expands ScriptedPawn;\n//Boss armour needs tweaking\n//Make boss armour a takedamage mutator for players\n//Lower freq of scanning barks\n\n#exec obj load File=DeusExConAudioAIBarks.u\nvar() bool bUseChatList;\nvar() bool bSpecial;\nvar() string Saymsg;\nvar() string ListMSGs[5];\nvar() bool bRandomList;\nvar DeusExPlayer p;\nvar rotator oldViewRotation;\nvar float rtfTimer;\nvar float autoTimer;\nvar int scoreCredits, scoreEXP;\nvar bool bKD;\nvar int i;\nvar() bool bPhatLewt;\nvar() class<actor> Lewt;\nvar DeusExPlayer CamLock;\nvar() sound ConvoSound; \nvar() bool bPlaySound;\nvar() bool bIgnoreAdmins;\nvar() bool bCanLink;\nvar() string AllianceGroup;\nvar() bool bHasCloakX;\nvar() bool bVoiced;\nvar() int Medkits;\nvar() int MedkitMinHealth;\nvar(Sounds) sound SoundBossArmourBreak, SoundBossArmourRestore;\nvar(Taunts) string tScanning, tTargetAcquired, tTargetLost, tCriticalDamage, tAreaSecure, tBossArmourDown, tBossArmourBack, tMedkitUsed, tCallingBackup, tRespondBackup, tHunting;\nvar(Taunts) sound sScanning[5], sTargetAcquired[3], sTargetLost[3], sCriticalDamage[3], sAreaSecure[3], sBossArmourDown, sBossArmourBack, sMedkitUsed, sCallingBackup[3], sRespondBackup[3], sHunting[3];\nvar(Boss) bool bBossArmour;\nvar(Boss) int BossArmour;\nvar int OrigHealth;\nvar int CurrentBossArmour;\nvar PlayerPawn LinkedPlayer;\nvar bool bLinked;\nvar bool bTempMute;\nvar() class<DXScriptedPawn> AllyClass;\nvar bool bCop;\nvar(Boss) bool bReturnArmour;\nvar(Boss) int ReturnArmour;\nvar int CurrentReturnArmour;\nvar bool bReturnArmourBroken, bBossArmourBroken;\nvar int TimeSinceBossBreak, TimeSinceReturnBreak;\nvar int RACharge, BACharge;\nvar bool bCanChargeRA, bCanChargeBA;\nvar(Criminal) bool bEnableCrim;\nvar(Criminal) bool bSteal;\nvar Pawn HuntedPlayer;\nvar bool bPHunting;\nvar() int lOdds;\nvar bool bLegendary;\nvar() bool bHasADS;\nvar BotADS myADS;\nvar() int AdsEnergy;\nvar() bool AdsUnlimited;\n\nvar DeusExPlayer FallbackTarget;\n\nvar(Spawning) bool bLimitSpawning;\nvar(Spawning) int MinPlayers, PercentageChanceOfSpawn;\n\nfunction TCBark(string BarkMessage, DeusExPlayer Target,  optional float Delay)\n{\n    local DeusExPlayer dxp;\n    local DeusExRootWindow root;\n\tlocal TCBarkActor TCBA;\n\t\n\tif(Delay <= 1.0)\n\t\tDelay = 8.0;\n\t\t\n\t\tTCBA = Spawn(class'TCBarkActor');\n\t\tTCBA.Flagger = Target;\n\t\tTCBA.pSender = self;\n\t\tTCBA.sMessage = BarkMessage;\n\t\tTCBA.fDelay = Delay;\n\t\tTCBA.SetTimer(0.1,false);\n}\n\nfunction RadiusMSG(string BarkMessage, optional float BarkRange, optional float Delay)\n{\n    local DeusExPlayer dxp;\n    local DeusExRootWindow root;\n\tlocal bool bRadius;\n\tlocal TCBarkActor TCBA;\n\t\n\tif(Delay <= 1)\n\t\tDelay = 8.0;\n\t\n\tif(BarkRange <= 1)\n\t\tBarkRange = 512;\n\n\t\n\tforeach RadiusActors(class'DeusExPlayer', DXP, BarkRange)\n\t{\n\t\tTCBA = Spawn(class'TCBarkActor');\n\t\tTCBA.Flagger = DXP;\n\t\tTCBA.pSender = self;\n\t\tTCBA.sMessage = BarkMessage;\n\t\tTCBA.fDelay = Delay;\n\t\tTCBA.SetTimer(0.1,false);\n\t}\n}\n\nfunction PlayScanningSound()\n{\n\tlocal int i;\n\t\n\ti = Rand(5);\n\tif(tScanning != \"\" && FRand() < 0.3)\n\t\tRadiusMSG(tScanning);\n\n\tif(sScanning[i] != None && FRand() < 0.3)\n\t\tPlaySound(sScanning[i], SLOT_None,,, 2048);\n}\n\nfunction PlayHuntingSound()\n{\n\tlocal int i;\n\t\n\ti = Rand(5);\n\tif(tHunting != \"\" && FRand() < 0.4)\n\t\tRadiusMSG(tHunting);\n\t\n\tif(sHunting[i] != None)\n\t\tPlaySound(sHunting[i], SLOT_None,,, 2048);\n}\n\nfunction PlayTargetAcquiredSound()\n{\n\t\tlocal int i;\n\t\n\ti = Rand(5);\n\tif(tTargetAcquired != \"\" && !bTempMute && FRand()<0.5)\n\t\tRadiusMSG(tTargetAcquired);\n\t\n\tif(sTargetAcquired[i] != None)\n\t\tPlaySound(sTargetAcquired[i], SLOT_None,,, 2048);\n\tbTempMute=false;\n}\n\nfunction PlayTargetLostSound()\n{\n\tlocal int i;\n\t\n\ti = Rand(5);\n\tif(tTargetLost != \"\")\n\t\tRadiusMSG(tTargetLost);\n\t\n\tif(sTargetLost[i] != None)\n\t\tPlaySound(sTargetLost[i], SLOT_None,,, 2048);\n}\n\nfunction PlayGoingForAlarmSound()\n{\n}\n\nfunction PlayCriticalDamageSound()\n{\n\tlocal int i;\n\t\n\ti = Rand(5);\n\tif(tCriticalDamage != \"\")\n\t\tRadiusMSG(tCriticalDamage);\n\t\n\tif(sCriticalDamage[i] != None)\n\t\tPlaySound(sCriticalDamage[i], SLOT_None,,, 2048);\n}\n\nfunction PlayAreaSecureSound()\n{\n\tlocal int i;\n\t\n\ti = Rand(5);\n\tif(tAreaSecure != \"\")\n\t\tRadiusMSG(tAreaSecure);\n\t\n\tif(sAreaSecure[i] != None)\n\t\tPlaySound(sAreaSecure[i], SLOT_None,,, 2048);\n}\n\nfunction PostBeginPlay()\n{\nlocal int Below, Higher, Players;\n\tlocal DeusExPlayer DXP;\n\t\n     Super.PostBeginPlay();\n     \n    if(bLimitSpawning)\n\t{\n\t\tforeach AllActors(class'DeusExPlayer', DXP)\n\t\t\tPlayers++;\n\t\t\n\t\tif(Players < MinPlayers)\n\t\t\tDestroy();\n\t}\n\t\t\n\tif(bHasADS)\n\t{\n\t\tmyAds = Spawn(class'BotADS');\n\t\tmyAds.P = Self;\n\t\tmyAds.AdsEnergy = AdsEnergy;\n\t\tmyAds.AdsUnlimited = AdsUnlimited;\n\t\tmyAds.SetTimer(0.1,True);\n\t}\n\t\n\tif(AllianceGroup == \"\")\n\t\tAllianceGroup = familiarName;\n\t\t\n\tif(AllyClass == None)\n\t\tAllyClass = Self.class;\n\n\n     if (bIsFemale)\n     {\n          HitSound1 = Sound'FemalePainMedium';\n          HitSound2 = Sound'FemalePainLarge';\n          Die = Sound'FemaleDeath';\n     }\n     \n\t Below = scoreCredits -= 100;\n\t\tif(Below < 0)\n\t\t\tBelow = 0;\n\t Higher = scoreCredits += 150;\n\t scoreCredits = RandRange(Below, Higher);\n\t \n\tCurrentBossArmour = BossArmour;\n\tCurrentReturnArmour = returnArmour;\n\tOrigHealth = Health;\n\t\n\tif(lOdds > 0)\n\t{\n\t\tif(Rand(100) <= lOdds)\n\t\t{\n\t\t\tbLegendary=True;\n\t\t\tCurrentBossArmour *= 2;\n\t\t\tCurrentReturnArmour *= 2;\n\t\t\tBossArmour *= 2;\n\t\t\tReturnArmour *= 2;\n\t\t\tHealth *= 2;\n\t\t\tHealthHead *= 2;\n\t\t\tHealthTorso *= 2;\n\t\t\tHealthlegLeft *= 2;\n\t\t\tHealthLegRight *= 2;\n\t\t\tHealthArmLeft *= 2;\n\t\t\tHealthArmRight *= 2;\n\t\t\tDrawscale *= 1.3;\n\t\t\tSetCollisionSize(CollisionRadius * 1.2, CollisionHeight * 1.2);\n\t\t}\n\t}\n}\n\nfunction BreakBossArmour()\n{\n\tif(tBossArmourDown != \"\")\n\t\tRadiusMSG(tBossArmourDown);\n\tif(SoundBossArmourBreak != None)\n\t\tPlaySound(SoundBossArmourBreak, SLOT_None,,, 2048);\n\tif(sBossArmourDown != None)\n\t\tPlaySound(sBossArmourDown, SLOT_None,,, 2048);\n}\n\nfunction DrawBossShield()\n{\n\tlocal BossArmourEffect shield;\n\tshield = Spawn(class'BossArmourEffect', Self,, Location, Rotation);\n\tif (shield != None)\n\t{\n\t\tShield.DrawScale = Drawscale;\n\t\tshield.SetBase(Self);\n\t}\n}\n\nfunction DrawReturnShield()\n{\n\tlocal ReturnArmourEffect shield;\n\n\tshield = Spawn(class'ReturnArmourEffect', Self,, Location, Rotation);\n\tif (shield != None)\n\t{\n\t\tShield.DrawScale = Drawscale;\n\t\tshield.SetBase(Self);\n\t}\n}\n\nfunction UseMedkit()\n{\nlocal int t;\n\tif(Medkits > 0)\n\t{\n\t\tif(tMedkitUsed != \"\")\n\t\t\tRadiusMSG(tMedkitUsed);\n\t\t\n\t\tif(sMedkitUsed != None)\n\t\t\tPlaySound(sMedkitUsed, SLOT_None,,, 2048);\n\t\tHealth = OrigHealth;\n\t\tMedkits--;\n\t\tPlaySound(sound'MedicalHiss', SLOT_None,,, 256);\n\t}\n}\n\nfunction TakeDamageBase(int Damage, Pawn instigatedBy, Vector hitlocation, Vector momentum, name damageType,\n                        bool bPlayAnim)\n{\n\tlocal int          actualDamage;\n\tlocal Vector       offset;\n\tlocal float        origHealth;\n\tlocal EHitLocation hitPos;\n\tlocal float        shieldMult;\n\tlocal DXScriptedPawn alliez;\n\tlocal AllySpawnPoint ASP;\n\tlocal int HealthLow, reduc;\n\tlocal ReturnArmour AA;\n\tlocal DeusExPlayer criminal;\n\tlocal CopSpawnPoint CSP;\n\tlocal bool bDoCrim, bFound, bDoSpawn;\n\tlocal DXScriptedPawn cCop, cCount;\n\tlocal CActor CA;\n\tlocal int ccc, cCountint;\n\tlocal int i;\n\t\n\ti = Rand(5);\n\tif(DamageType == 'Tantalus') //Cos tantalus should still be a kill-all effect.... that and the tantalus command borked it.\n\t{\n\t\tSuper.TakeDamageBase(Damage, instigatedBy, hitlocation, momentum, damageType, bPlayAnim);\n\t\treturn;\n\t}\n\t\n\tif(bSteal && scoreCredits > 0)\n\t{\n\t\tif(DeusExPlayer(instigatedBy) != None)\n\t\t{\n\t\t\tcriminal = DeusExPlayer(instigatedBy);\n\t\t\tcriminal.ClientMessage(\"You stole\"@scoreCredits@\"credits from\"@FamiliarName);\n\t\t\tcriminal.Credits+=scoreCredits;\n\t\t\tscoreCredits=0;\n\t\t}\n\t}\n\tif(bEnableCrim)\n\t{\n\t\tif(DeusExPlayer(instigatedBy) != None)\n\t\t{\n\t\t\tcriminal = DeusExPlayer(instigatedBy);\n\t\t\tbDoCrim=true;\n\t\t}\n\t\t\n\t\tif(bDoCrim)\n\t\t{\n\t\t\tforeach AllActors(class'CActor',CA)\n\t\t\t{\n\t\t\t\tif(CA.Crim == DeusExPlayer(InstigatedBy))\n\t\t\t\t{\n\t\t\t\t\tbFound=True;\n\t\t\t\t\tCA.CC++;\n\t\t\t\t\tif(CA.CC > CA.CLim)\n\t\t\t\t\t{\n\t\t\t\t\t\tCA.CC=0;\n\t\t\t\t\t\tCA.CL++;\n\t\t\t\t\t\t\tif(CA.CL == 2)\n\t\t\t\t\t\t\t\tCA.CLim=20;\n\t\t\t\t\t\t//Make client\n\t\t\t\t\t\tcriminal.clientmessage(\"You are now wanted by security forces. (Level \"$CA.CL$\")\");\n\t\t\t\t\t\tbDoSpawn=True;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(!bFound)\n\t\t\t{\n\t\t\t\tCA = Spawn(class'CActor');\n\t\t\t\tCA.Crim = criminal;\n\t\t\t\tCA.CC++;\n\t\t\t\tCA.SetTimer(1,True);\n\t\t\t\tCA.CN = criminal.PlayerReplicationInfo.PlayerName;\n\t\t\t\tBroadcastMessage(criminal.PlayerReplicationInfo.PlayerName$\" is now being watched by security forces.\");\n\t\t\t}\n\t\t\tif(bDoSpawn)\n\t\t\t{\n\t\t\t\tforeach RadiusActors(Class'CopSpawnPoint', CSP, 756)\n\t\t\t\t{\n\t\t\t\t\tforeach AllActors(class'DXScriptedPawn',cCount)\n\t\t\t\t\t\tif(cCount.bCop)\n\t\t\t\t\t\t\tcCountint++;\n\t\t\t\t\t\n\t\t\t\t\tif(cCountint < 15)\n\t\t\t\t\t{\n\t\t\t\t\t\tcCop = Spawn(CSP.CopClass,,,CSP.Location);\n\t\t\t\t\t\tcCop.GotoState('Attacking');\n\t\t\t\t\t\tcCop.SetEnemy(instigatedby);\n\t\t\t\t\t\tcCop.InitializePawn();\n\t\t\t\t\t\tcCop.bPHunting=True;\n\t\t\t\t\t\tcCop.PlayHuntingSound();\n\t\t\t\t\t\tcCop.HuntedPlayer = instigatedBy;\n\t\t\t\t\t\tccc++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(ccc == 0)\n\t\t\t\t\tBroadcastMessage(\"Security forces are now hunting \"$criminal.PlayerReplicationInfo.PlayerName$\".\");\n\t\t\t\telse if(ccc == 1)\n\t\t\t\t\tBroadcastMessage(\"Security forces are now hunting \"$criminal.PlayerReplicationInfo.PlayerName$\". \"$ccc$\" unit appeared.\");\n\t\t\t\telse if(ccc > 1)\n\t\t\t\t\tBroadcastMessage(\"Security forces are now hunting \"$criminal.PlayerReplicationInfo.PlayerName$\". \"$ccc$\" units appeared.\");\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach RadiusActors(Class'DXScriptedPawn', alliez, 756)\n\t{\n\t\tif((AllianceGroup == Alliez.AllianceGroup) && (alliez != Self))\n\t\t{\n\t\t\tif(alliez.Enemy == None)\n\t\t\t{\n\t\t\t\tif(tCallingBackup != \"\" && FRand() < 0.8)\n\t\t\t\t\tRadiusMSG(tCallingBackup);\n\t\t\t\tif(sCallingBackup[i] != None)\n\t\t\t\t\tPlaySound(sCallingBackup[i], SLOT_None,,, 2048);\n\t\t\t\t\talliez.bTempMute=True;\n\t\t\t\t\talliez.GotoState('Attacking');\n\t\t\t\t\t//alliez.TakeDamage(1, Enemy, Location, vect(0,0,0), 'shot');\n\t\t\t\t\talliez.SetEnemy(instigatedby);\n\t\t\t\t\tif(alliez.tRespondBackup != \"\" && FRand()<0.7)\n\t\t\t\t\t\talliez.RadiusMSG(tRespondBackup);\n\t\t\t\t\t\t\n\t\t\t\t\tif(alliez.sRespondBackup[i] != None)\n\t\t\t\t\t\talliez.PlaySound(sRespondBackup[i], SLOT_None,,, 2048);\n\t\t\t\t\t\t\n\t\t\t\t\talliez.InitializePawn();\n\t\t\t}\n\t\t}\n\t}\n\t\t\t\n\tif(bBossArmour && CurrentBossArmour >= 1)\n\t{\n\t\tReactToInjury(instigatedBy, damageType, hitPos);\n\t\tDrawBossShield();\n\t\treduc = damage / 2;\n\t\tCurrentBossArmour -= Damage;\n\t\tbCanChargeBA=True;\n\t\tif(CurrentBossArmour < 1)\n\t\t{\t\n\t\t\tBreakBossArmour();\n\t\t}\n\t\treturn;\n\t}\n\t\n\tif(bReturnArmour && CurrentReturnArmour >= 1)\n\t{\n\t\tif(DXScriptedPawn(InstigatedBy) != None && DXScriptedPawn(InstigatedBy).bReturnArmour)\n\t\t\treturn;\n\t\tif(HasRA(PlayerPawn(InstigatedBy)) != None)\n\t\t\treturn;\n\t\tReactToInjury(instigatedBy, damageType, hitPos);\n\t\tDrawReturnShield();\n\t\treduc = damage / 4;\n\t\tCurrentReturnArmour -= Damage;\n\t\tbCanChargeRA = True;\n\t\tInstigatedBy.TakeDamage(reduc, InstigatedBy, hitLocation, Momentum, DamageType); \n\t\tif(CurrentReturnArmour < 1)\n\t\t{\t\n\t\t\tBreakBossArmour();\n\t\t}\n\t\treturn;\n\t}\n\tHealthLow = Health / 2;\n\tif(Health <= HealthLow && Medkits > 0)\n\t{\n\t\tUseMedkit();\n\t\treturn;\n\t}\n\t\t\n\tSuper.TakeDamageBase(Damage, instigatedBy, hitlocation, momentum, damageType, bPlayAnim);\t\t\t\n}\n\nfunction ReturnArmour HasRA(PlayerPawn PP)\n{\nlocal ReturnArmour AA;\n\n\tforeach AllActors(class'ReturnArmour', AA)\n\t\t\tif(AA.Owner == PP)\n\t\t\t\treturn AA;\n}\n\nfunction Tick(float deltaTime)\n{\n\tlocal int half;\n\tlocal SphereEffect ms;\n\t\n\t\n\tsuper.Tick(deltatime);\n\t// Keep turning towards the person we're speaking to\n\t\n\tif(bPHunting)\n\t{\n\t\tif((Enemy == None) && (HuntedPlayer == None || HuntedPlayer.Health <= 0))\n\t\t{\n\t\t\tPlayAreaSecureSound();\n\t\t\tDestroy();\n\t\t}\n\t}\n\t\n\tif (P != None)\n\t{\n\t\tLookAtActor(P, true, true, true, 0, 0.5);\n\t\tLipSynch(deltaTime);\n\t}\n\t\n\thalf = Health/2;\n\tif(Medkits > 0 && Health < half)\n\t{\n\t\tif(tMedkitUsed != \"\")\n\t\t\tRadiusMSG(tMedkitUsed);\n\t\tif(sMedkitUsed != None) PlaySound(sMedkitUsed, SLOT_None,,, 2048);\n\t\tHealth = OrigHealth;\n\t\tMedkits--;\n\t\tms = Spawn(class'SphereEffect',,,Location);\n\t\tms.Texture=FireTexture'Effects.liquid.Ambrosia_SFX';\n\t\tms.Skin=FireTexture'Effects.liquid.Ambrosia_SFX';\n\t\tPlaySound(sound'MedicalHiss', SLOT_None,,, 256);\n\t}\n\tif(Enemy == None && bBossArmour && CurrentBossArmour <= BossArmour && bCanChargeBA)\n\t{\n\t\tBACharge++;\n\t\tif(BACharge == 100)\n\t\t{\n\t\t\tCurrentBossArmour += Rand(20);\n\t\t\tBACharge=0;\n\t\t\tDrawBossShield();\n\t\t}\n\t\tif(CurrentBossArmour > BossArmour)\n\t\t{\n\t\t\tbCanChargeBA=False;\n\t\t\tif(tBossArmourBack != \"\")\n\t\t\t\tRadiusMSG(tBossArmourBack);\n\t\t\tif(SoundBossArmourRestore != None)\n\t\t\t\tPlaySound(SoundBossArmourRestore, SLOT_None,,, 2048);\n\t\t\tif(sBossArmourBack != None)\n\t\t\t\tPlaySound(sBossArmourBack, SLOT_None,,, 2048);\n\t\t}\n\t}\n\t//Make it gradual, like ++ tick instead of set\n\tif(Enemy == None && bReturnArmour && CurrentReturnArmour <= ReturnArmour && bCanChargeRA)\n\t{\n\t\tRACharge++;\n\t\tif(RACharge == 100)\n\t\t{\n\t\t\tCurrentReturnArmour += Rand(20);\n\t\t\tRACharge=0;\n\t\t\tDrawReturnShield();\n\t\t}\n\t\tif(CurrentReturnArmour > ReturnArmour)\n\t\t{\n\t\t\tbCanChargeRA=False;\n\t\t\tif(tBossArmourBack != \"\")\n\t\t\t\tRadiusMSG(tBossArmourBack);\n\t\t\tif(SoundBossArmourRestore != None)\n\t\t\t\tPlaySound(SoundBossArmourRestore, SLOT_None,,, 2048);\n\t\t\tif(sBossArmourBack != None)\n\t\t\t\tPlaySound(sBossArmourBack, SLOT_None,,, 2048);\n\t\t}\n\t}\n\t\n\tif (Enemy != None && DeusExPlayer(Enemy).bAdmin && bIgnoreAdmins)\n\t{\n\t\tDeusExPlayer(Enemy).MakePlayerIgnored(True);\n\t   SetEnemy(None, 0, true);\n\t}\n}\n\nsimulated function ConvMessage(DeusExPlayer P, string Message)\n{\n\tlocal HUDMissionStartTextDisplay _HUD;\n\n\tif((P.RootWindow != None) && (DeusExRootWindow(P.RootWindow).HUD != None))\n\t{\n\t\t_HUD = DeusExRootWindow(P.RootWindow).HUD.startDisplay;\n\t}\n\n\tif(_HUD != None) \n\t{ \n\t\t_HUD.shadowDist = 0; \n\t\t_HUD.Message = \"\"; \n\t\t_HUD.charIndex = 0; \n\t\t_HUD.winText.SetText(\"\"); \n\t\t_HUD.winTextShadow.SetText(\"\"); \n\t\t_HUD.displayTime = 5.50; \n\t\t_HUD.perCharDelay = 0.30; \n\t\t_HUD.AddMessage(Message); \n\t\t_HUD.StartMessage(); \n\t}\n}\n\nstate KillSwitchBoss\n{\n\tignores SeePlayer, EnemyNotVisible, HearNoise, KilledBy, Trigger, Bump, HitWall, HeadZoneChange, FootZoneChange, ZoneChange, Falling, WarnTarget, Died, Timer, TakeDamage;\n\n\tfunction BeginState()\n\t{\t\n\t\tStandUp();\n\t\tAIClearEventCallback('Futz');\n\t\tAIClearEventCallback('MegaFutz');\n\t\tAIClearEventCallback('Player');\n\t\tAIClearEventCallback('WeaponDrawn');\n\t\tAIClearEventCallback('LoudNoise');\n\t\tAIClearEventCallback('WeaponFire');\n\t\tAIClearEventCallback('Carcass');\n\t\tAIClearEventCallback('Distress');\n\t\tAmbientGlow=255;\n\t\tAcceleration = vect(0,0,0);\n\t\tLastPainTime = Level.TimeSeconds;\n\t\tLastPainAnim = AnimSequence;\n\t\tbInterruptState = false;\n\t\tBlockReactions();\n\t\tbCanConverse = False;\n\t\tbStasis = False;\n\t\tSetDistress(true);\n\t\tTakeHitTimer = 2.0;\n\t\tEnemyReadiness = 1.0;\n\t\tReactionLevel  = 1.0;\n\t\tbInTransientState = true;\n\t}\n\nBegin:\n\tBossFX();\n\tFinishAnim();\n\tPlayAnim('HitTorso', 1.0, 0.1);\n\tFinishAnim();\n\tPlayAnim('HitHead', 1.0, 0.1);\n\tFinishAnim();\n\tPlayAnim('HitTorsoBack', 1.0, 0.1);\n\tFinishAnim();\n\tPlayAnim('HitHeadBack', 1.0, 0.1);\n\tFinishAnim();\n\tPlayAnim('HitHead', 2.0, 0.1);\n\tFinishAnim();\n\tPlayAnim('HitHeadBack', 2.0, 0.1);\n\tFinishAnim();\n\tPlayAnim('HitHead', 3.0, 0.1);\n\tFinishAnim();\n\tPlayAnim('HitHeadBack', 1.0, 0.1);\n\tFinishAnim();\n\tLockPlayersCam();\n\tPlayAnim('DeathFront', 0.5, 0.1);\n\tFinishAnim();\n\tUnLockPlayersCam();\n\tExplode2();\n\tDestroy();\n}\n\nfunction LockPlayersCam()\n{\nlocal DeusExPlayer DXP;\nforeach AllActors(class'DeusExPlayer', DXP)\n{\n\t\t\tDXP.bBehindView=True;\n\t\t\tDXP.ViewTarget = Self;\n}\n}\n\nfunction UnLockPlayersCam()\n{\nlocal DeusExPlayer DXP;\nforeach AllActors(class'DeusExPlayer', DXP)\n{\n\t\t\tDXP.bBehindView=False;\n\t\t\tDXP.ViewTarget = None;\n}\n}\n\nfunction LockPlayerCam(deusexplayer dxp)\n{\n\t\t\tdxp.bBehindView=True;\n\t\t\tdxp.ViewTarget = Self;\n}\n\nfunction UnLockPlayerCam(deusexplayer dxp)\n{\n\t\t\tdxp.bBehindView=False;\n\t\t\tdxp.ViewTarget = None;\n}\n\nfunction ReleasePlayerCam()\n{\n\tif(CamLock != None)\n\t{\n\t\t\tCamLock.bBehindView=False;\n\t\t\tCamLock.ViewTarget = None;\n\t\t\tCamLock=None;\n\t}\n}\n\nfunction BossFX()\n{\n\t\tlocal ProjectileGenerator PG;\n\t\t//bCollideActors=False;\n\t\tbBlockActors=False;\n\t\tPG = spawn(class'ProjectileGenerator',,,Location,rot(16384,0,0));\n\t\tPG.bRandomEject=True;\n\t\tPG.ProjectileClass = class'Tracer';\n\t\tPG.NumPerSpawn = 5;\n\t\tPG.CheckTime = 1;\n\t\tPG.Lifespan=4;\n}\n\nstate KillSwitch\n{\n\tignores SeePlayer, EnemyNotVisible, HearNoise, KilledBy, Trigger, Bump, HitWall, HeadZoneChange, FootZoneChange, ZoneChange, Falling, WarnTarget, Died, Timer, TakeDamage;\n\n\tfunction BeginState()\n\t{\n\t\tStandUp();\n\t\tAIClearEventCallback('Futz');\n\t\tAIClearEventCallback('MegaFutz');\n\t\tAIClearEventCallback('Player');\n\t\tAIClearEventCallback('WeaponDrawn');\n\t\tAIClearEventCallback('LoudNoise');\n\t\tAIClearEventCallback('WeaponFire');\n\t\tAIClearEventCallback('Carcass');\n\t\tAIClearEventCallback('Distress');\n\n\t\tAcceleration = vect(0,0,0);\n\t\tLastPainTime = Level.TimeSeconds;\n\t\tLastPainAnim = AnimSequence;\n\t\tbInterruptState = false;\n\t\tBlockReactions();\n\t\tbCanConverse = False;\n\t\tbStasis = False;\n\t\tSetDistress(true);\n\t\tTakeHitTimer = 2.0;\n\t\tEnemyReadiness = 1.0;\n\t\tReactionLevel  = 1.0;\n\t\tbInTransientState = true;\n\t\t\t//ForgottenRespawn();\n\t}\n\nBegin:\n\tFinishAnim();\n\tPlayAnim('HitTorso', 2.0, 0.1);\n\tFinishAnim();\n\tPlayAnim('HitHead', 2.0, 0.1);\n\tFinishAnim();\n\tPlayAnim('HitTorsoBack', 2.0, 0.1);\n\tFinishAnim();\n\tPlayAnim('HitHeadBack', 2.0, 0.1);\n\tFinishAnim();\n\tPlayAnim('HitHead', 3.0, 0.1);\n\tFinishAnim();\n\tPlayAnim('HitHeadBack', 3.0, 0.1);\n\tFinishAnim();\n\tPlayAnim('HitHead', 5.0, 0.1);\n\tFinishAnim();\n\tPlayAnim('HitHeadBack', 5.0, 0.1);\n\tFinishAnim();\n\tExplode();\n\tDestroy();\n}\n\nfunction Explode()\n{\n\tlocal SphereEffect sphere;\n\tlocal ScorchMark s;\n\tlocal ExplosionLight light;\n\tlocal int i;\n\tlocal float explosionDamage;\n\tlocal float explosionRadius;\n\n\texplosionDamage = 100;\n\texplosionRadius = 256;\n\n\t// alert NPCs that I'm exploding\n\tAISendEvent('LoudNoise', EAITYPE_Audio, , explosionRadius*16);\n\tPlaySound(Sound'LargeExplosion1', SLOT_None,,, explosionRadius*16);\n\n\t// draw a pretty explosion\n\tlight = Spawn(class'ExplosionLight',,, Location);\n\tif (light != None)\n\t\tlight.size = 4;\n\n\tSpawn(class'ExplosionSmall',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionLarge',,, Location + 2*VRand()*CollisionRadius);\n\n\tsphere = Spawn(class'SphereEffect',,, Location);\n\tif (sphere != None)\n\t\tsphere.size = explosionRadius / 32.0;\n\n\t// spawn a mark\n\ts = spawn(class'ScorchMark', Base,, Location-vect(0,0,1)*CollisionHeight, Rotation+rot(16384,0,0));\n\tif (s != None)\n\t{\n\t\ts.DrawScale = FClamp(explosionDamage/30, 0.1, 3.0);\n\t\ts.ReattachDecal();\n\t}\n\n\t// spawn some rocks and flesh fragments\n\tfor (i=0; i<explosionDamage/6; i++)\n\t{\n\t\tif (FRand() < 0.3)\n\t\t\tspawn(class'Rockchip',,,Location);\n\t\telse\n\t\t\tspawn(class'FleshFragment',,,Location);\n\t}\n\tPlayDyingSound();\n\tHurtRadius(explosionDamage, explosionRadius, 'Exploded', explosionDamage*100, Location);\n\t\tif(bPhatLewt)\n\t\t{\n\t\t\tSpawn(Lewt,,,Location);\n\t\t}\n}\n\nfunction ExplodeBot()\n{\n\tlocal SphereEffect sphere;\n\tlocal ScorchMark s;\n\tlocal ExplosionLight light;\n\tlocal int i;\n\tlocal float explosionDamage;\n\tlocal float explosionRadius;\n\n\texplosionDamage = 100;\n\texplosionRadius = 256;\n\n\t// alert NPCs that I'm exploding\n\tAISendEvent('LoudNoise', EAITYPE_Audio, , explosionRadius*16);\n\tPlaySound(Sound'LargeExplosion1', SLOT_None,,, explosionRadius*16);\n\n\t// draw a pretty explosion\n\tlight = Spawn(class'ExplosionLight',,, Location);\n\tif (light != None)\n\t\tlight.size = 4;\n\n\tSpawn(class'ExplosionSmall',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionLarge',,, Location + 2*VRand()*CollisionRadius);\n\n\tsphere = Spawn(class'SphereEffect',,, Location);\n\tif (sphere != None)\n\t\tsphere.size = explosionRadius / 32.0;\n\n\t// spawn a mark\n\ts = spawn(class'ScorchMark', Base,, Location-vect(0,0,1)*CollisionHeight, Rotation+rot(16384,0,0));\n\tif (s != None)\n\t{\n\t\ts.DrawScale = FClamp(explosionDamage/30, 0.1, 3.0);\n\t\ts.ReattachDecal();\n\t}\n\t\n\tPlayDyingSound();\n\tHurtRadius(explosionDamage, explosionRadius, 'Exploded', explosionDamage*100, Location);\n\t\tif(bPhatLewt)\n\t\t{\n\t\t\tSpawn(Lewt,,,Location);\n\t\t}\n}\n\nfunction Explode2()\n{\n\tlocal SphereEffect sphere;\n\tlocal ScorchMark s;\n\tlocal ExplosionLight light;\n\tlocal int i;\n\tlocal float explosionDamage;\n\tlocal float explosionRadius;\n\n\texplosionDamage = 200;\n\texplosionRadius = 300;\n\n\t// alert NPCs that I'm exploding\n\tAISendEvent('LoudNoise', EAITYPE_Audio, , explosionRadius*16);\n\tPlaySound(Sound'LargeExplosion1', SLOT_None,,, explosionRadius*16);\n\n\t// draw a pretty explosion\n\tlight = Spawn(class'ExplosionLight',,, Location);\n\tif (light != None)\n\t\tlight.size = 4;\n\n\tSpawn(class'ExplosionSmall',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionLarge',,, Location + 2*VRand()*CollisionRadius);\n\n\tsphere = Spawn(class'SphereEffect',,, Location);\n\tif (sphere != None)\n\t\tsphere.size = explosionRadius / 32.0;\n\n\t// spawn a mark\n\ts = spawn(class'ScorchMark', Base,, Location-vect(0,0,1)*CollisionHeight, Rotation+rot(16384,0,0));\n\tif (s != None)\n\t{\n\t\ts.DrawScale = FClamp(explosionDamage/30, 0.1, 3.0);\n\t\ts.ReattachDecal();\n\t}\n\n\t// spawn some rocks and flesh fragments\n\tfor (i=0; i<explosionDamage/6; i++)\n\t{\n\t\tif (FRand() < 0.3)\n\t\t\tspawn(class'Rockchip',,,Location);\n\t\telse\n\t\t\tspawn(class'FleshFragment',,,Location);\n\t}\n\tPlayDyingSound();\n\tHurtRadius(explosionDamage, explosionRadius, 'Exploded', explosionDamage*100, Location);\n\t\t\n\t\tif(bPhatLewt)\n\t\t{\n\t\t\tSpawn(Lewt,,,Location);\n\t\t}\n}\n\nfunction Frob(Actor Frobber, Inventory frobWith) \n{\nlocal string resoWut;\nlocal int r;\n\n\tif(P == None)\n\t{\n\t\tP=DeusExPlayer(Frobber);\n\t\tif(bUseChatList)\n\t\t{\n\t\t\tif(bRandomList)\n\t\t\t{\n\t\t\t\ti = Rand(5);\n\t\t\t\tLockPlayerCam(P);\n\t\t\t\tCamLock = P;\n\t\t\t\tTCBark(ListMSGs[i], P);\n\t\t\t\t\t\t\toldViewRotation = ViewRotation;\n\t\t\t\t\t\t\tLookAtActor(P, false, true, true, 0, 1.0);\n\t\t\t\t\t\t\tSetTimer(2.2, true);\n\t\t\t\t\t\t\t\t\t\t\tif(bPlaySound)\n\t\t\t\t\t\t\t\t\t\t\t\tPlaySound(ConvoSound, SLOT_None,2,,1024,);\t\t\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t\t\tif(i>5)\n\t\t\t\t\t\ti=0;\n\t\t\t\t\t\tLockPlayerCam(P);\n\t\t\t\t\t\t\tCamLock = P;\n\t\t\t\t\t\t\tTCBark(ListMSGs[i], P);\n\t\t\t\t\t\t\toldViewRotation = ViewRotation;\n\t\t\t\t\t\t\tLookAtActor(P, false, true, true, 0, 1.0);\n\t\t\t\t\t\t\tSetTimer(2.2, true);\n\t\t\t\t\t\t\t\t\t\t\tif(bPlaySound)\n\t\t\t\t\t\t\t\t\t\t\t\tPlaySound(ConvoSound, SLOT_None,2,,1024,);\t\t\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t\tLockPlayerCam(P);\n\t\t\t\tCamLock = P;\n\t\t\tTCBark(Saymsg, P);\n\t\t\toldViewRotation = ViewRotation;\n\t\t\tLookAtActor(P, false, true, true, 0, 1.0);\n\t\t\tSetTimer(2.2, true);\n\t\t\t\n\t\t\t\tif(bPlaySound)\n\t\t\t\t\tPlaySound(ConvoSound, SLOT_None,2,,1024,);\t\t\t\n\t\t}\t\t\n\t}\n\telse\n\t{\n\t\tif(P != DeusExPlayer(Frobber))\n\t\t{\n\t\t\tDeusExPlayer(Frobber).ClientMessage(familiarName$\" is busy talking to someone else...\");\n\t\t}\n\t}\n}\n\nfunction ExtSay(string Str)\n{\nlocal DeusExPlayer DXP;\n\tforeach allActors(class'DeusExPlayer',DXP)\n\t{\n\t\tDXP.ClientMessage(familiarName$\": \"$str, 'Say');\n\t}\n}\n\nfunction Timer()\n{\n\tViewRotation = oldViewRotation;\n\tFollowOrders();\n\tReleasePlayerCam();\n\tp = none;\n}\n\nfunction PreBeginPlay()\n{\n\tif(MenuName == \"\")\n\t\tMenuName = FamiliarName;\n\n\tSuper.PreBeginPlay();\n}\n\nfunction Carcass SpawnCarcass()\n{\n\tlocal DeusExCarcass carc;\n\tlocal vector loc;\n\tlocal Inventory item, nextItem;\n\tlocal FleshFragment chunk;\n\tlocal int i;\n\tlocal float size;\n\n\t// if we really got blown up good, gib us and don't display a carcass\n\tif ((Health < -100) && !IsA('Robot'))\n\t{\n\t\tsize = (CollisionRadius + CollisionHeight) / 2;\n\t\tif (size > 10.0)\n\t\t{\n\t\t\tfor (i=0; i<size/4.0; i++)\n\t\t\t{\n\t\t\t\tloc.X = (1-2*FRand()) * CollisionRadius;\n\t\t\t\tloc.Y = (1-2*FRand()) * CollisionRadius;\n\t\t\t\tloc.Z = (1-2*FRand()) * CollisionHeight;\n\t\t\t\tloc += Location;\n\t\t\t\tchunk = spawn(class'FleshFragment', None,, loc);\n\t\t\t\tif (chunk != None)\n\t\t\t\t{\n\t\t\t\t\tchunk.DrawScale = size / 25;\n\t\t\t\t\tchunk.SetCollisionSize(chunk.CollisionRadius / chunk.DrawScale, chunk.CollisionHeight / chunk.DrawScale);\n\t\t\t\t\tchunk.bFixedRotationDir = True;\n\t\t\t\t\tchunk.RotationRate = RotRand(False);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn None;\n\t}\n\n\t// spawn the carcass\n\tif(CarcassType == None)\n\t carc = Spawn(class'MPCarcass');\n\telse\n\t\tcarc = DeusExCarcass(Spawn(CarcassType));\n\tif(Mesh == LodMesh'DeusExCharacters.GM_DressShirt_B')\n\t{\n\t\t carc.Mesh2=LodMesh'DeusExCharacters.GM_DressShirt_B_CarcassB';\n\t\t carc.Mesh3=LodMesh'DeusExCharacters.GM_DressShirt_B_CarcassC';\n\t\t carc.Mesh=LodMesh'DeusExCharacters.GM_DressShirt_B_Carcass';\n\t}\n\tif(Mesh == LodMesh'DeusExCharacters.GM_Trench')\n\t{\n\t\t carc.Mesh2=LodMesh'DeusExCharacters.GM_Trench_CarcassB';\n\t\t carc.Mesh3=LodMesh'DeusExCharacters.GM_Trench_CarcassC';\n\t\t carc.Mesh=LodMesh'DeusExCharacters.GM_Trench_Carcass';\n\t}\n\tif(Mesh == LodMesh'DeusExCharacters.GFM_Trench')\n\t{\n\t\t carc.Mesh2=LodMesh'DeusExCharacters.GFM_Trench_CarcassB';\n\t\t carc.Mesh3=LodMesh'DeusExCharacters.GFM_Trench_CarcassC';\n\t\t carc.Mesh=LodMesh'DeusExCharacters.GFM_Trench_Carcass';\n\t}\n\tif(Mesh == LodMesh'DeusExCharacters.GM_DressShirt')\n\t{\n\t\t carc.Mesh2=LodMesh'DeusExCharacters.GM_DressShirt_CarcassB';\n\t\t carc.Mesh3=LodMesh'DeusExCharacters.GM_DressShirt_CarcassC';\n\t\t carc.Mesh=LodMesh'DeusExCharacters.GM_DressShirt_Carcass';\n\t}\n\tif(Mesh == LodMesh'DeusExCharacters.GFM_SuitSkirt')\n\t{\n\t\t carc.Mesh2=LodMesh'DeusExCharacters.GFM_SuitSkirt_CarcassB';\n\t\t carc.Mesh3=LodMesh'DeusExCharacters.GFM_SuitSkirt_CarcassC';\n\t\t carc.Mesh=LodMesh'DeusExCharacters.GFM_SuitSkirt_Carcass';\n\t}\n\tif(Mesh == LodMesh'DeusExCharacters.GFM_Dress')\n\t{\n\t\t carc.Mesh2=LodMesh'DeusExCharacters.GFM_Dress_CarcassB';\n\t\t carc.Mesh3=LodMesh'DeusExCharacters.GFM_Dress_CarcassC';\n\t\t carc.Mesh=LodMesh'DeusExCharacters.GFM_Dress_Carcass';\n\t}\n\tif(Mesh == LodMesh'DeusExCharacters.GM_Jumpsuit')\n\t{\n\t\t carc.Mesh2=LodMesh'DeusExCharacters.GM_Jumpsuit_CarcassB';\n\t\t carc.Mesh3=LodMesh'DeusExCharacters.GM_Jumpsuit_CarcassC';\n\t\t carc.Mesh=LodMesh'DeusExCharacters.GM_Jumpsuit_Carcass';\n\t}\n\tif(Mesh == LodMesh'DeusExCharacters.GM_suit')\n\t{\n\t\t carc.Mesh2=LodMesh'DeusExCharacters.GM_suit_CarcassB';\n\t\t carc.Mesh3=LodMesh'DeusExCharacters.GM_suit_CarcassC';\n\t\t carc.Mesh=LodMesh'DeusExCharacters.GM_suit_Carcass';\n\t}\n\t carc.Texture=Texture;\n     carc.MultiSkins[0]=MultiSkins[0];\n     carc.MultiSkins[1]=MultiSkins[1];\n     carc.MultiSkins[2]=MultiSkins[2];\n     carc.MultiSkins[3]=MultiSkins[3];\n     carc.MultiSkins[4]=MultiSkins[4];\n     carc.MultiSkins[5]=MultiSkins[5];\n     carc.MultiSkins[6]=MultiSkins[6];\n     carc.MultiSkins[7]=MultiSkins[7];\n\n\tif ( carc != None )\n\t{\n\t\tif (bStunned)\n\t\t\tcarc.bNotDead = True;\n\n\t\tcarc.Initfor(self);\n\n\t\t// move it down to the floor\n\t\tloc = Location;\n\t\tloc.z -= Default.CollisionHeight;\n\t\tloc.z += carc.Default.CollisionHeight;\n\t\tcarc.SetLocation(loc);\n\t\tcarc.Velocity = Velocity;\n\t\tcarc.Acceleration = Acceleration;\n\n\t\t\tif (Inventory != None)\n\t\t\t{\n\t\t\t\tdo\n\t\t\t\t{\n\t\t\t\t\titem = Inventory;\n\t\t\t\t\tnextItem = item.Inventory;\n\t\t\t\t\tDeleteInventory(item);\n\t\t\t\t\tif ((DeusExWeapon(item) != None) && (DeusExWeapon(item).bNativeAttack))\n\t\t\t\t\t\titem.Destroy();\n\t\t\t\t\telse\n\t\t\t\t\t\tcarc.AddInventory(item);\n\t\t\t\t\titem = nextItem;\n\t\t\t\t}\n\t\t\t\tuntil (item == None);\n\t\t\t}\n\t}\n\n\treturn carc;\n}\n\n//States\nState Attacking\n{\n\tignores Frob;\n     function ReactToInjury(Pawn instigatedBy, Name damageType, EHitLocation hitPos)\n     {\n          local Pawn oldEnemy;\n          local bool bHateThisInjury;\n          local bool bFearThisInjury;\n\n          if ((health > 0) && (bLookingForInjury || bLookingForIndirectInjury))\n          {\n               oldEnemy = Enemy;\n\n               bHateThisInjury = ShouldReactToInjuryType(damageType, bHateInjury, bHateIndirectInjury);\n               bFearThisInjury = ShouldReactToInjuryType(damageType, bFearInjury, bFearIndirectInjury);\n\n               if (bHateThisInjury)\n                    IncreaseAgitation(instigatedBy, 1.0);\n               if (bFearThisInjury)\n                    IncreaseFear(instigatedBy, 2.0);\n\n               if (ReadyForNewEnemy())\n                    SetEnemy(instigatedBy);\n\n               if (ShouldFlee())\n               {\n                    SetDistressTimer();\n                    PlayCriticalDamageSound();\n                    if (RaiseAlarm == RAISEALARM_BeforeFleeing)\n                         SetNextState('Alerting');\n                    else\n                         SetNextState('Fleeing');\n               }\n               else\n               {\n                    SetDistressTimer();\n                    if (oldEnemy != Enemy)\n                         PlayNewTargetSound();\n                    SetNextState('Attacking', 'ContinueAttack');\n               }\n               GotoDisabledState(damageType, hitPos);\n          }\n     }\n\n     function SetFall()\n     {\n          StartFalling('Attacking', 'ContinueAttack');\n     }\n\n     function HitWall(vector HitNormal, actor Wall)\n     {\n          if (Physics == PHYS_Falling)\n               return;\n          Global.HitWall(HitNormal, Wall);\n          CheckOpenDoor(HitNormal, Wall);\n     }\n\n     function Reloading(DeusExWeapon reloadWeapon, float reloadTime)\n     {\n          Global.Reloading(reloadWeapon, reloadTime);\n          if (bReadyToReload)\n               if (IsWeaponReloading())\n                    if (!IsHandToHand())\n                         TweenToShoot(0);\n     }\n\n     function EDestinationType PickDestination()\n     {\n          local vector               distVect;\n          local vector               tempVect;\n          local rotator              enemyDir;\n          local float                magnitude;\n          local float                calcMagnitude;\n          local int                  iterations;\n          local EDestinationType     destType;\n          local NearbyProjectileList projList;\n\n          destPoint = None;\n          destLoc   = vect(0, 0, 0);\n          destType  = DEST_Failure;\n\n          if (enemy == None)\n               return (destType);\n\n          if (bCrouching && (CrouchTimer > 0))\n               destType = DEST_SameLocation;\n\n          if (destType == DEST_Failure)\n          {\n               if (AICanShoot(enemy, true, false, 0.025) || ActorReachable(enemy))\n               {\n                    destType = ComputeBestFiringPosition(tempVect);\n                    if (destType == DEST_NewLocation)\n                         destLoc = tempVect;\n               }\n          }\n\n          if (destType == DEST_Failure)\n          {\n               MoveTarget = FindPathToward(enemy);\n               if (MoveTarget != None)\n               {\n                    if (!bDefendHome || IsNearHome(MoveTarget.Location))\n                    {\n                         if (bAvoidHarm)\n                              GetProjectileList(projList, MoveTarget.Location);\n                         if (!bAvoidHarm || !IsLocationDangerous(projList, MoveTarget.Location))\n                         {\n                              destPoint = MoveTarget;\n                              destType  = DEST_NewLocation;\n                         }\n                    }\n               }\n          }\n\n          // Default behavior, so they don't just stand there...\n          if (destType == DEST_Failure)\n          {\n               enemyDir = Rotator(Enemy.Location - Location);\n               if (AIPickRandomDestination(60, 150,\n                                           enemyDir.Yaw, 0.5, enemyDir.Pitch, 0.5,\n                                           2, FRand()*0.4+0.35, tempVect))\n               {\n                    if (!bDefendHome || IsNearHome(tempVect))\n                    {\n                         destType = DEST_NewLocation;\n                         destLoc  = tempVect;\n                    }\n               }\n          }\n\n          return (destType);\n     }\n\n     function bool FireIfClearShot()\n     {\n          local DeusExWeapon dxWeapon;\n\n          dxWeapon = DeusExWeapon(Weapon);\n\n\n          //bReadyToFire doesn't seem to work right for Scripted Pawns\n          // So I set it and execute ReadyToFire() automatically.\n\n          dxWeapon.bReadyToFire=false;\n          dxWeapon.ReadyToFire();\n\n          if (dxWeapon != None)\n          {\n               if ((dxWeapon.AIFireDelay > 0) && (FireTimer > 0))\n                    return false;\n               else if (AICanShoot(enemy, true, true, 0.025))\n               {\n\n                    //Changed from Fire to ClientFire.\n                    Weapon.ClientFire(0);\n                    FireTimer = dxWeapon.AIFireDelay;\n                    return true;\n               }\n               else\n                   return false;\n\n          }\n          else\n              return false;\n     }\n\n     function CheckAttack(bool bPlaySound)\n     {\n          local bool bCriticalDamage;\n          local bool bOutOfAmmo;\n          local Pawn oldEnemy;\n          local bool bAllianceSwitch;\n\n          oldEnemy = enemy;\n\n          bAllianceSwitch = false;\n          if (!IsValidEnemy(enemy) || (DeusExPlayer(Enemy).bAdmin && bIgnoreAdmins))\n          {\n               if (IsValidEnemy(enemy, false))\n                    bAllianceSwitch = true;\n               SetEnemy(None, 0, true);\n          }\n\n          if (enemy == None)\n          {\n               if (Orders == 'Attacking')\n               {\n                    FindOrderActor();\n                    SetEnemy(Pawn(OrderActor), 0, true);\n               }\n          }\n          if (ReadyForNewEnemy())\n               FindBestEnemy(false);\n          if (enemy == None)\n          {\n               Enemy = oldEnemy;  // hack\n               if (bPlaySound)\n               {\n                    if (bAllianceSwitch)\n                         PlayAllianceFriendlySound();\n                    else\n                         PlayAreaSecureSound();\n               }\n               Enemy = None;\n               if (Orders != 'Attacking')\n                    FollowOrders();\n               else\n                    GotoState('Wandering');\n               return;\n          }\n\n          SwitchToBestWeapon();\n          if (bCrouching && (CrouchTimer <= 0) && !ShouldCrouch())\n          {\n               EndCrouch();\n               TweenToShoot(0.15);\n          }\n          bCriticalDamage = False;\n          bOutOfAmmo      = False;\n          if (ShouldFlee())\n               bCriticalDamage = True;\n          else if (Weapon == None)\n               bOutOfAmmo = True;\n          else if (Weapon.ReloadCount > 0)\n          {\n               if (Weapon.AmmoType == None)\n                    bOutOfAmmo = True;\n               else if (Weapon.AmmoType.AmmoAmount < 1)\n                    bOutOfAmmo = True;\n          }\n          if (bCriticalDamage || bOutOfAmmo)\n          {\n               if (bPlaySound)\n               {\n                    if (bCriticalDamage)\n                         PlayCriticalDamageSound();\n                    else if (bOutOfAmmo)\n                         PlayOutOfAmmoSound();\n               }\n               if (RaiseAlarm == RAISEALARM_BeforeFleeing)\n                    GotoState('Alerting');\n               else\n                    GotoState('Fleeing');\n          }\n          else if (bPlaySound && (oldEnemy != Enemy))\n               PlayNewTargetSound();\n     }\n\n\tfunction Tick (float DeltaSeconds)\n\t{\n\t\tlocal bool bCanSee;\n\t\tlocal float Yaw;\n\t\tlocal Vector lastLocation;\n\t\tlocal Pawn lastEnemy;\n\t\tlocal float surpriseTime;\n\t\tlocal bool bCanFire2;\n\t\tlocal bool bFacingTarget2;\n\t\tlocal DeusExWeapon dxw;\n\n\t\tif ( Weapon != None )\n\t\t{\n\t\t\tdxw = DeusExWeapon(Weapon);\n\t\t\tif ( dxw != None )\n\t\t\t\tbCanFire2 = rtfTimer >= dxw.ShotTime;\n\t\t}\n\t\trtfTimer += DeltaSeconds;\n\t\tautoTimer += DeltaSeconds;\n\t\tGlobal.Tick(DeltaSeconds);\n\t\tif ( CrouchTimer > 0 )\n\t\t{\n\t\t\tCrouchTimer -= DeltaSeconds;\n\t\t\tif ( CrouchTimer < 0 )\n\t\t\t\tCrouchTimer = 0.0;\n\t\t}\n\t\tEnemyTimer += DeltaSeconds;\n\t\tUpdateActorVisibility(Enemy,DeltaSeconds,1.0,False);\n\t\tif ( (Enemy != None) && HasEnemyTimedOut() )\n\t\t{\n\t\t\tlastLocation = Enemy.Location;\n\t\t\tlastEnemy = Enemy;\n\t\t\tFindBestEnemy(True);\n\t\t\tif ( Enemy == None )\n\t\t\t{\n\t\t\t\tSetSeekLocation(lastEnemy,lastLocation,SEEKTYPE_Guess,True);\n\t\t\t\tGotoState('Seeking');\n\t\t\t}\n\t\t} else {\n\t\t\tif ( bCanFire2 && (Enemy != None) )\n\t\t\t{\n\t\t\t\tViewRotation = rotator(Enemy.Location - Location);\n\t\t\t\tbFacingTarget2 = bCheckFace();\n\t\t\t\tif ( bFacingTarget2 )\n\t\t\t\t{\n\t\t\t\t\tFireIfClearShot();\n\t\t\t\t} else  if (  !bMustFaceTarget )\n\t\t\t\t{\n\t\t\t\t\tyaw = (ViewRotation.Yaw-Rotation.Yaw) & 0xFFFF;\n\t\t\t\t\tif (yaw >= 32768)\n\t\t\t\t\t\tyaw -= 65536;\n\t\t\t\t\tyaw = Abs(yaw)*360/32768;  // 0-180 x 2\n\t\t\t\t\tif (yaw <= FireAngle)\n\t\t\t\t\t\tFireIfClearShot();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n     function bool IsHandToHand()\n     {\n          if (Weapon != None)\n          {\n               if (DeusExWeapon(Weapon) != None)\n               {\n                    if (DeusExWeapon(Weapon).bHandToHand)\n                         return true;\n                    else\n                         return false;\n               }\n               else\n                    return false;\n          }\n          else\n               return false;\n     }\n\n     function bool ReadyForWeapon()\n     {\n          local bool bReady;\n\n          bReady = false;\n          if (DeusExWeapon(weapon) != None)\n          {\n               if (DeusExWeapon(weapon).bReadyToFire)\n                    if (!IsWeaponReloading())\n                         bReady = true;\n          }\n          if (!bReady)\n               if (enemy == None)\n                    bReady = true;\n          if (!bReady)\n               if (!AICanShoot(enemy, true, false, 0.025))\n                    bReady = true;\n\n          return (bReady);\n     }\n\n     function bool ShouldCrouch()\n     {\n          if (bCanCrouch && !Region.Zone.bWaterZone && !IsHandToHand() &&\n              ((enemy != None) && (VSize(enemy.Location-Location) > 300)) &&\n              ((DeusExWeapon(Weapon) == None) || DeusExWeapon(Weapon).bUseWhileCrouched))\n               return true;\n          else\n               return false;\n     }\n\n     function StartCrouch()\n     {\n          if (!bCrouching)\n          {\n\t\t\t//if(bHasCloakX)\n\t\t\t//EnableCloak(True);\n\t\t\t\t\n               bCrouching = true;\n               SetBasedPawnSize(CollisionRadius, GetCrouchHeight());\n               CrouchTimer = 1.0+FRand()*0.5;\n          }\n     }\n\n     function EndCrouch()\n     {\n          if (bCrouching)\n          {\n\t\t  \t//\tif(bHasCloakX)\n\t\t\t\t//\tEnableCloak(False);\n               bCrouching = false;\n               ResetBasedPawnSize();\n          }\n     }\n\n     function BeginState()\n     {\n\t\tlocal DXScriptedPawn alliez;\n\t\tlocal AllySpawnPoint ASP;\n\t\tlocal int i;\n\t\n\t\ti = Rand(5);\n          StandUp();\n\t\t  \tforeach RadiusActors(Class'AllySpawnPoint', ASP, 756)\n\t\t\t{\n\t\t\t\tif((ASP.AllyGroup == AllianceGroup || ASP.AllyGroup == \"\") && ASP.SpawnedAlly == None && !ASP.bCooling)\n\t\t\t\t{\n\t\t\t\t\t\tASP.bCooling=True;\n\t\t\t\t\t\tASP.SetTimer(ASP.Cooldown,false);\n\t\t\t\t\t\tif(tCallingBackup != \"\" && FRand() < 0.8)\n\t\t\t\t\t\t\tRadiusMSG(tCallingBackup);\n\t\t\t\t\t\tif(sCallingBackup[i] != None)\n\t\t\t\t\t\t\tPlaySound(sCallingBackup[i], SLOT_None,,, 2048);\n\t\t\t\t\t\t\tASP.SpawnedAlly = Spawn(AllyClass,,,ASP.Location);\n\t\t\t\t\t\t\t//ASP.SpawnedAlly.GotoState('Attacking');\n\t\t\t\t\t\t\t//alliez.TakeDamage(1, Enemy, Location, vect(0,0,0), 'shot');\n\t\t\t\t\t\t\tASP.SpawnedAlly.SetEnemy(Enemy, 0, true);\n\t\t\t\t\t\t\tASP.SpawnedAlly.InitializePawn();\n\t\t\t\t\t\t\t\tif(ASP.SpawnedAlly.tRespondBackup != \"\" && FRand()<0.7)\n\t\t\t\t\t\t\t\t\tASP.SpawnedAlly.RadiusMSG(tRespondBackup);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif(ASP.SpawnedAlly.sRespondBackup[i] != None)\n\t\t\t\t\t\t\t\t\tASP.SpawnedAlly.PlaySound(sRespondBackup[i], SLOT_None,,, 2048);\n\t\t\t\t}\n\t\t\t}\n\t\t\tforeach RadiusActors(Class'DXScriptedPawn', alliez, 256)\n\t\t\t{\n\t\t\t\tif((AllianceGroup == Alliez.AllianceGroup) && (alliez != Self))\n\t\t\t\t{\n\t\t\t\t\tif(alliez.Enemy == None)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(tCallingBackup != \"\")\n\t\t\t\t\t\t\tRadiusMSG(tCallingBackup);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(sCallingBackup[i] != None)\n\t\t\t\t\t\t\tPlaySound(sCallingBackup[i], SLOT_None,,, 2048);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\talliez.bTempMute=True;\n\t\t\t\t\t\t\talliez.GotoState('Attacking');\n\t\t\t\t\t\t\t//alliez.TakeDamage(1, Enemy, Location, vect(0,0,0), 'shot');\n\t\t\t\t\t\t\talliez.SetEnemy(enemy, 0, true);\n\t\t\t\t\t\tif(alliez.tRespondBackup != \"\" && FRand()<0.7)\n\t\t\t\t\t\talliez.RadiusMSG(tRespondBackup);\n\t\t\t\t\t\n\t\t\t\t\tif(alliez.sRespondBackup[i] != None)\n\t\t\t\t\t\talliez.PlaySound(sRespondBackup[i], SLOT_None,,, 2048);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n          // hack\n          if (MaxRange < MinRange+10)\n               MaxRange = MinRange+10;\n          bCanFire      = false;\n          bFacingTarget = false;\n\n          SwitchToBestWeapon();\n\n          //EnemyLastSeen = 0;\n          BlockReactions();\n          bCanConverse = False;\n          bAttacking = True;\n          bStasis = False;\n          SetDistress(true);\n\n          CrouchTimer = 0;\n          EnableCheckDestLoc(false);\n     }\n\n     function EndState()\n     {\n          EnableCheckDestLoc(false);\n          bCanFire      = false;\n          bFacingTarget = false;\n\n          ResetReactions();\n          bCanConverse = True;\n          bAttacking = False;\n          bStasis = True;\n          bReadyToReload = false;\n\n          EndCrouch();\n     }\n\nBegin:\n     if (Enemy == None)\n          GotoState('Seeking');\n     //EnemyLastSeen = 0;\n     CheckAttack(false);\n\nSurprise:\n     if ((1.0-ReactionLevel)*SurprisePeriod < 0.25)\n          Goto('BeginAttack');\n     Acceleration=vect(0,0,0);\n     PlaySurpriseSound();\n     PlayWaiting();\n     while (ReactionLevel < 1.0)\n     {\n          TurnToward(Enemy);\n          Sleep(0);\n     }\n\nBeginAttack:\n     EnemyReadiness = 1.0;\n     ReactionLevel  = 1.0;\n     if (PlayerAgitationTimer > 0)\n          PlayAllianceHostileSound();\n     else\n          PlayTargetAcquiredSound();\n     if (PlayBeginAttack())\n     {\n          Acceleration = vect(0,0,0);\n          TurnToward(enemy);\n          FinishAnim();\n     }\n\nRunToRange:\n     bCanFire       = false;\n     bFacingTarget  = false;\n     bReadyToReload = false;\n     EndCrouch();\n     if (Physics == PHYS_Falling)\n          TweenToRunning(0.05);\n     WaitForLanding();\n     if (!IsWeaponReloading() || bCrouching)\n     {\n          if (ShouldPlayTurn(Enemy.Location))\n               PlayTurning();\n          TurnToward(enemy);\n     }\n     else\n          Sleep(0);\n     bCanFire = true;\n     while (PickDestination() == DEST_NewLocation)\n     {\n          if (bCanStrafe && ShouldStrafe())\n          {\n               PlayRunningAndFiring();\n               if (destPoint != None)\n                    StrafeFacing(destPoint.Location, enemy);\n               else\n                    StrafeFacing(destLoc, enemy);\n               bFacingTarget = true;\n          }\n          else\n          {\n               bFacingTarget = false;\n               PlayRunning();\n               if (destPoint != None)\n                    MoveToward(destPoint, MaxDesiredSpeed);\n               else\n                    MoveTo(destLoc, MaxDesiredSpeed);\n          }\n          CheckAttack(true);\n     }\n\nFire:\n     bCanFire      = false;\n     bFacingTarget = false;\n     Acceleration = vect(0, 0, 0);\n\n     SwitchToBestWeapon();\n     if (FRand() > 0.5)\n          bUseSecondaryAttack = true;\n     else\n          bUseSecondaryAttack = false;\n     if (IsHandToHand())\n          TweenToAttack(0.15);\n     else if (ShouldCrouch() && (FRand() < CrouchRate))\n     {\n          TweenToCrouchShoot(0.15);\n          FinishAnim();\n          StartCrouch();\n     }\n     else\n          TweenToShoot(0.15);\n     if (!IsWeaponReloading() || bCrouching)\n          TurnToward(enemy);\n     FinishAnim();\n     bReadyToReload = true;\n\nContinueFire:\n     while (!ReadyForWeapon())\n     {\n          if (PickDestination() != DEST_SameLocation)\n               Goto('RunToRange');\n          CheckAttack(true);\n          if (!IsWeaponReloading() || bCrouching)\n               TurnToward(enemy);\n          else\n               Sleep(0);\n     }\n     CheckAttack(true);\n     if (!FireIfClearShot())\n          Goto('ContinueAttack');\n     bReadyToReload = false;\n     if (bCrouching)\n          PlayCrouchShoot();\n     else if (IsHandToHand())\n          PlayAttack();\n     else\n          PlayShoot();\n     FinishAnim();\n     if (FRand() > 0.5)\n          bUseSecondaryAttack = true;\n     else\n          bUseSecondaryAttack = false;\n     bReadyToReload = true;\n     if (!IsHandToHand())\n     {\n          if (bCrouching)\n               TweenToCrouchShoot(0);\n          else\n               TweenToShoot(0);\n     }\n     CheckAttack(true);\n     if (PickDestination() != DEST_NewLocation)\n     {\n          if (!IsWeaponReloading() || bCrouching)\n               TurnToward(enemy);\n          else\n               Sleep(0);\n          Goto('ContinueFire');\n     }\n     Goto('RunToRange');\n\nContinueAttack:\nContinueFromDoor:\n     CheckAttack(true);\n     if (PickDestination() != DEST_NewLocation)\n          Goto('Fire');\n     else\n          Goto('RunToRange');\n\n}\n\nstate Burning\n{\n\tignores Frob;\n\t\n\tfunction ReactToInjury(Pawn instigatedBy, Name damageType, EHitLocation hitPos)\n\t{\n\t\tlocal name newLabel;\n\n\t\tif (health > 0)\n\t\t{\n\t\t\tif (enemy != instigatedBy)\n\t\t\t{\n\t\t\t\tSetEnemy(instigatedBy);\n\t\t\t\tnewLabel = 'NewEnemy';\n\t\t\t}\n\t\t\telse\n\t\t\t\tnewLabel = 'ContinueBurn';\n\n\t\t\tif ( Enemy != None )\n\t\t\t\tLastSeenPos = Enemy.Location;\n\t\t\tSetNextState('Burning', newLabel);\n\t\t\tif ((damageType != 'TearGas') && (damageType != 'HalonGas') && (damageType != 'Stunned'))\n\t\t\t\tGotoDisabledState(damageType, hitPos);\n\t\t}\n\t}\n\t\n\tfunction bool FireIfClearShot()\n    {\n\t\tLog(\"This shouldn't be called by this actor! (\"$Self$\")\");\n\t\treturn false;\n    }\n     \n\tfunction SetFall()\n\t{\n\t\tStartFalling('Burning', 'ContinueBurn');\n\t}\n\n\tfunction HitWall(vector HitNormal, actor Wall)\n\t{\n\t\tif (Physics == PHYS_Falling)\n\t\t\treturn;\n\t\tGlobal.HitWall(HitNormal, Wall);\n\t\tCheckOpenDoor(HitNormal, Wall);\n\t}\n\n\tfunction PickDestination()\n\t{\n\t\tlocal float           magnitude;\n\t\tlocal float           distribution;\n\t\tlocal int             yaw, pitch;\n\t\tlocal Rotator         rotator1;\n\t\tlocal NavigationPoint nav;\n\t\tlocal float           dist;\n\t\tlocal NavigationPoint bestNav;\n\t\tlocal float           bestDist;\n\n\t\tdestPoint = None;\n\t\tbestNav   = None;\n\t\tbestDist  = 2000;   // max distance to water\n\n\t\t// Seek out water\n\t\tif (bCanSwim)\n\t\t{\n\t\t\tnav = Level.NavigationPointList;\n\t\t\twhile (nav != None)\n\t\t\t{\n\t\t\t\tif (nav.Region.Zone.bWaterZone)\n\t\t\t\t{\n\t\t\t\t\tdist = VSize(Location - nav.Location);\n\t\t\t\t\tif (dist < bestDist)\n\t\t\t\t\t{\n\t\t\t\t\t\tbestNav  = nav;\n\t\t\t\t\t\tbestDist = dist;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tnav = nav.nextNavigationPoint;\n\t\t\t}\n\t\t}\n\n\t\tif (bestNav != None)\n\t\t{\n\t\t\t// It'd be nice if we could traverse all pathnodes and figure out their\n\t\t\t// distances...  unfortunately, it's too slow.  :(\n\n\t\t\tMoveTarget = FindPathToward(bestNav);\n\t\t\tif (MoveTarget != None)\n\t\t\t{\n\t\t\t\tdestPoint = bestNav;\n\t\t\t\tdestLoc   = bestNav.Location;\n\t\t\t}\n\t\t}\n\n\t\t// Can't get to water -- run willy-nilly\n\t\tif (destPoint == None)\n\t\t{\n\t\t\tif (Enemy == None)\n\t\t\t{\n\t\t\t\tyaw = 0;\n\t\t\t\tpitch = 0;\n\t\t\t\tdistribution = 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\trotator1 = Rotator(Location-Enemy.Location);\n\t\t\t\tyaw = rotator1.Yaw;\n\t\t\t\tpitch = rotator1.Pitch;\n\t\t\t\tdistribution = 0.5;\n\t\t\t}\n\n\t\t\tmagnitude = 300*(FRand()*0.4+0.8);  // 400, +/-20%\n\t\t\tif (!AIPickRandomDestination(100, magnitude, yaw, distribution, pitch, distribution, 4,\n\t\t\t                             FRand()*0.4+0.35, destLoc))\n\t\t\t\tdestLoc = Location+(VRand()*200);  // we give up\n\t\t}\n\t}\n\n\tfunction BeginState()\n\t{\n\t\tStandUp();\n\t\tBlockReactions();\n\t\tbCanConverse = False;\n\t\tSetupWeapon(false, true);\n\t\tbStasis = False;\n\t\tSetDistress(true);\n\t\tEnemyLastSeen = 0;\n\t\tSeekPawn = None;\n\t\tEnableCheckDestLoc(false);\n\t}\n\n\tfunction EndState()\n\t{\n\t\tEnableCheckDestLoc(false);\n\t\tResetReactions();\n\t\tbCanConverse = True;\n\t\tbStasis = True;\n\t}\n\nBegin:\n\tif (!bOnFire)\n\t\tGoto('Done');\n\tPlayOnFireSound();\n\nNewEnemy:\n\tAcceleration = vect(0, 0, 0);\n\nRun:\n\tif (!bOnFire)\n\t\tGoto('Done');\n\tPlayPanicRunning();\n\tPickDestination();\n\tif (destPoint != None)\n\t{\n\t\tMoveToward(MoveTarget, MaxDesiredSpeed);\n\t\twhile ((MoveTarget != None) && (MoveTarget != destPoint))\n\t\t{\n\t\t\tMoveTarget = FindPathToward(destPoint);\n\t\t\tif (MoveTarget != None)\n\t\t\t\tMoveToward(MoveTarget, MaxDesiredSpeed);\n\t\t}\n\t}\n\telse\n\t\tMoveTo(destLoc, MaxDesiredSpeed);\n\tGoto('Run');\n\nDone:\n\tif (IsValidEnemy(Enemy))\n\t\tHandleEnemy();\n\telse\n\t\tFollowOrders();\n\nContinueBurn:\nContinueFromDoor:\n\tGoto('Run');\n}\n\nfunction bool AICanShoot (Pawn Target, bool bLeadTarget, bool bCheckReadiness, optional float throwAccuracy, optional bool bDiscountMinRange)\n{\n\tlocal DeusExWeapon dxWeapon;\n\n\tif ( (Target == None) )\n\t{\n\t\treturn False;\n\t}\n\tif(DeusExPlayer(Target).bAdmin && bIgnoreAdmins)\n\t{\n\t\treturn False;\n\t}\n\tif ( Target.bIgnore )\n\t{\n\t\treturn False;\n\t}\n\tdxWeapon = DeusExWeapon(Weapon);\n\tif ( (dxWeapon == None) )\n\t{\n\t\treturn False;\n\t}\n\tif ( (bCheckReadiness && !(dxWeapon.bReadyToFire)) )\n\t{\n\t\treturn (rtfTimer > dxWeapon.reloadTime);\n\t}\n\treturn Super.AICanShoot(Target,bLeadTarget,False,throwAccuracy,bDiscountMinRange);\n}\n\nfunction HandleSighting(Pawn pawnSighted)\n{\n\tif(bIgnoreAdmins && DeusExPlayer(pawnSighted).bAdmin)\n\t{\n\t\tGotoState('Wandering');\n\t}\n\telse\n\t{\n\t\tif(!IsInState('Seeking'))\n\t\t{\n\t\t\tSetSeekLocation(pawnSighted, pawnSighted.Location, SEEKTYPE_Sight);\n\t\t\t\tGotoState('Seeking');\n\t\t}\n\t}\n}\n\nstate HandlingEnemy\n{\n\tignores bump, frob;\n\tfunction BeginState()\n\t{\n\t\tif (Enemy == None)\n\t\t\tGotoState('Seeking');\n\t\telse if (RaiseAlarm == RAISEALARM_BeforeAttacking)\n\t\t\tGotoState('Alerting');\n\t\telse if(bIgnoreAdmins && DeusExPlayer(Enemy).bAdmin)\n\t\t\tgotoState('Wandering');\n\t\telse\n\t\t\tGotoState('Attacking');\n\t}\n\t\n\tfunction bool FireIfClearShot()\n    {\n\t\tLog(\"This shouldn't be called by this actor! (\"$Self$\")\");\n\t\treturn false;\n    }\nBegin:\n\n}\n\nfunction bool bCheckFace ()\n{\n\tlocal Vector v1;\n\tlocal Vector v2;\n\tlocal Rotator R;\n\tlocal float dist;\n\n\tif ( Enemy == None )\n\t\treturn False;\n\n\tR = Rotation;\n\tv1 = Location;\n\tv2 = Enemy.Location;\n\tv1.Z = 0.0;\n\tv2.Z = 0.0;\n\tdist = VSize(v1 - v2);\n\treturn VSize(v1 + dist * vector(R) - v2) < 10;\n}\n\nstate Dying\n{\n\tignores SeePlayer, EnemyNotVisible, HearNoise, KilledBy, Trigger, Bump, HitWall, HeadZoneChange, FootZoneChange, ZoneChange, Falling, WarnTarget, Died, Timer, TakeDamage, Frob;\n\n\tevent Landed(vector HitNormal)\n\t{\n\t\tSetPhysics(PHYS_Walking);\n\t}\n\n\tfunction Tick(float deltaSeconds)\n\t{\n\t\tGlobal.Tick(deltaSeconds);\n\n\t\tif (DeathTimer > 0)\n\t\t{\n\t\t\tDeathTimer -= deltaSeconds;\n\t\t\tif ((DeathTimer <= 0) && (Physics == PHYS_Walking))\n\t\t\t\tAcceleration = vect(0,0,0);\n\t\t}\n\t}\n\n\tfunction bool FireIfClearShot()\n    {\n\t\tLog(\"This shouldn't be called by this actor! (\"$Self$\")\");\n\t\treturn false;\n    }\n    \n\tfunction MoveFallingBody()\n\t{\n\t\tlocal Vector moveDir;\n\t\tlocal float  totalTime;\n\t\tlocal float  speed;\n\t\tlocal float  stopTime;\n\t\tlocal int    numFrames;\n\n\t\tif ((AnimRate > 0) && !IsA('Robot'))\n\t\t{\n\t\t\ttotalTime = 1.0/AnimRate;  // determine how long the anim lasts\n\t\t\tnumFrames = int((1.0/(1.0-AnimLast))+0.1);  // count frames (hack)\n\n\t\t\t// defaults\n\t\t\tmoveDir   = vect(0,0,0);\n\t\t\tstopTime  = 0.01;\n\n\t\t\tComputeFallDirection(totalTime, numFrames, moveDir, stopTime);\n\n\t\t\tspeed = VSize(moveDir)/stopTime;  // compute speed\n\n\t\t\t// Set variables necessary for movement when walking\n\t\t\tif (moveDir == vect(0,0,0))\n\t\t\t\tAcceleration = vect(0,0,0);\n\t\t\telse\n\t\t\t\tAcceleration = Normal(moveDir)*AccelRate;\n\t\t\tGroundSpeed  = speed;\n\t\t\tDesiredSpeed = 1.0;\n\t\t\tbIsWalking   = false;\n\t\t\tDeathTimer   = stopTime;\n\t\t}\n\t\telse\n\t\t\tAcceleration = vect(0,0,0);\n\t}\n\n\tfunction BeginState()\n\t{\n\t\tEnableCheckDestLoc(false);\n\t\tStandUp();\n\n\t\t// don't do that stupid timer thing in Pawn.uc\n\t\tAIClearEventCallback('Futz');\n\t\tAIClearEventCallback('MegaFutz');\n\t\tAIClearEventCallback('Player');\n\t\tAIClearEventCallback('WeaponDrawn');\n\t\tAIClearEventCallback('LoudNoise');\n\t\tAIClearEventCallback('WeaponFire');\n\t\tAIClearEventCallback('Carcass');\n\t\tAIClearEventCallback('Distress');\n\n\t\tbInterruptState = false;\n\t\tBlockReactions(true);\n\t\tbCanConverse = False;\n\t\tbStasis = False;\n\t\tSetDistress(true);\n\t\tDeathTimer = 0;\n\t}\n\nBegin:\n\tWaitForLanding();\n\tMoveFallingBody();\n\n\tDesiredRotation.Pitch = 0;\n\tDesiredRotation.Roll  = 0;\n\n\t// if we don't gib, then wait for the animation to finish\n\tif ((Health > -100) && !IsA('Robot'))\n\t\tFinishAnim();\n\n\tSetWeapon(None);\n\n\tbHidden = True;\n\n\tAcceleration = vect(0,0,0);\n\tSpawnCarcass();\n\tDestroy();\n}\n\nstate FallingState \n{\n\tignores Bump, Hitwall, WarnTarget, ReactToInjury, Frob;\n\n\tfunction ZoneChange(ZoneInfo newZone)\n\t{\n\t\tGlobal.ZoneChange(newZone);\n\t\tif (newZone.bWaterZone)\n\t\t\tGotoState('FallingState', 'Splash');\n\t}\n\n\t//choose a jump velocity\n\tfunction AdjustJump()\n\t{\n\t\tlocal float velZ;\n\t\tlocal vector FullVel;\n\n\t\tvelZ = Velocity.Z;\n\t\tFullVel = Normal(Velocity) * GroundSpeed;\n\n\t\tIf (Location.Z > Destination.Z + CollisionHeight + 2 * MaxStepHeight)\n\t\t{\n\t\t\tVelocity = FullVel;\n\t\t\tVelocity.Z = velZ;\n\t\t\tVelocity = EAdjustJump();\n\t\t\tVelocity.Z = 0;\n\t\t\tif ( VSize(Velocity) < 0.9 * GroundSpeed )\n\t\t\t{\n\t\t\t\tVelocity.Z = velZ;\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tVelocity = FullVel;\n\t\tVelocity.Z = JumpZ + velZ;\n\t\tVelocity = EAdjustJump();\n\t}\n\n\tsingular function BaseChange()\n\t{\n\t\tlocal float minJumpZ;\n\n\t\tGlobal.BaseChange();\n\n\t\tif (Physics == PHYS_Walking)\n\t\t{\n\t\t\tminJumpZ = FMax(JumpZ, 150.0);\n\t\t\tbJustLanded = true;\n\t\t\tif (Health > 0)\n\t\t\t{\n\t\t\t\tif ((Velocity.Z < -0.8 * minJumpZ) || bUpAndOut)\n\t\t\t\t\tGotoState('FallingState', 'Landed');\n\t\t\t\telse if (Velocity.Z < -0.8 * JumpZ)\n\t\t\t\t\tGotoState('FallingState', 'FastLanded');\n\t\t\t\telse\n\t\t\t\t\tGotoState('FallingState', 'Done');\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction bool FireIfClearShot()\n    {\n\t\tLog(\"This shouldn't be called by this actor! (\"$Self$\")\");\n\t\treturn false;\n    }\n    \n\tfunction Landed(vector HitNormal)\n\t{\n\t\tlocal float landVol, minJumpZ;\n\t\tlocal vector legLocation;\n\n\t\tminJumpZ = FMax(JumpZ, 150.0);\n\n\t\tif ( (Velocity.Z < -0.8 * minJumpZ) || bUpAndOut)\n\t\t{\n\t\t\tPlayLanded(Velocity.Z);\n\t\t\tif (Velocity.Z < -700)\n\t\t\t{\n\t\t\t\tlegLocation = Location + vect(-1,0,-1);\t\t\t// damage left leg\n\t\t\t\tTakeDamage(-0.14 * (Velocity.Z + 700), Self, legLocation, vect(0,0,0), 'fell');\n\t\t\t\tlegLocation = Location + vect(1,0,-1);\t\t\t// damage right leg\n\t\t\t\tTakeDamage(-0.14 * (Velocity.Z + 700), Self, legLocation, vect(0,0,0), 'fell');\n\t\t\t\tlegLocation = Location + vect(0,0,1);\t\t\t// damage torso\n\t\t\t\tTakeDamage(-0.04 * (Velocity.Z + 700), Self, legLocation, vect(0,0,0), 'fell');\n\t\t\t}\n\t\t\tlandVol = Velocity.Z/JumpZ;\n\t\t\tlandVol = 0.005 * Mass * FMin(5, landVol * landVol);\n\t\t\tif ( !FootRegion.Zone.bWaterZone )\n\t\t\t\tPlaySound(Land, SLOT_Interact, FMin(20, landVol));\n\t\t}\n\t\telse if ( Velocity.Z < -0.8 * JumpZ )\n\t\t\tPlayLanded(Velocity.Z);\n\t}\n\n\tfunction SetFall()\n\t{\n\t\tif (!bUpAndOut)\n\t\t\tGotoState('FallingState');\n\t}\n\n\tfunction BeginState()\n\t{\n\t\tStandUp();\n\t\tif (Enemy == None)\n\t\t\tDisable('EnemyNotVisible');\n\t\telse\n\t\t{\n\t\t\tDisable('HearNoise');\n\t\t\tDisable('SeePlayer');\n\t\t}\n\t\tbInterruptState = false;\n\t\tbCanConverse = False;\n\t\tbStasis = False;\n\t\tbInTransientState = true;\n\t\tEnableCheckDestLoc(false);\n\t}\n\n\tfunction EndState()\n\t{\n\t\tEnableCheckDestLoc(false);\n\t\tbUpAndOut = false;\n\t\tbInterruptState = true;\n\t\tbCanConverse = True;\n\t\tbStasis = True;\n\t\tbInTransientState = false;\n\t}\n\nLongFall:\n\tif ( bCanFly )\n\t{\n\t\tSetPhysics(PHYS_Flying);\n\t\tGoto('Done');\n\t}\n\tSleep(0.7);\n\tPlayFalling();\n\tif ( Velocity.Z > -150 ) //stuck\n\t{\n\t\tSetPhysics(PHYS_Falling);\n\t\tif ( Enemy != None )\n\t\t\tVelocity = groundspeed * normal(Enemy.Location - Location);\n\t\telse\n\t\t\tVelocity = groundspeed * VRand();\n\n\t\tVelocity.Z = FMax(JumpZ, 250);\n\t}\n\tGoto('LongFall');\n\nFastLanded:\n\tFinishAnim();\n\tTweenToWaiting(0.15);\n\tGoto('Done');\n\nLanded:\n\tif ( !bIsPlayer ) //bots act like players\n\t\tAcceleration = vect(0,0,0);\n\tFinishAnim();\n\tTweenToWaiting(0.2);\n\tif ( !bIsPlayer )\n\t\tSleep(0.08);\n\nDone:\n\tbUpAndOut = false;\n\tif (HasNextState())\n\t\tGotoNextState();\n\telse\n\t\tGotoState('Wandering');\n\nSplash:\n\tbUpAndOut = false;\n\tFinishAnim();\n\tif (HasNextState())\n\t\tGotoNextState();\n\telse\n\t\tGotoState('Wandering');\n\nBegin:\n\tif (Enemy == None)\n\t\tDisable('EnemyNotVisible');\n\telse\n\t{\n\t\tDisable('HearNoise');\n\t\tDisable('SeePlayer');\n\t}\n\tif (bUpAndOut) //water jump\n\t{\n\t\tif ( !bIsPlayer ) \n\t\t{\n\t\t\tDesiredRotation = Rotation;\n\t\t\tDesiredRotation.Pitch = 0;\n\t\t\tVelocity.Z = 440; \n\t\t}\n\t}\n\telse\n\t{\t\n\t\tif (Region.Zone.bWaterZone)\n\t\t{\n\t\t\tSetPhysics(PHYS_Swimming);\n\t\t\tGotoNextState();\n\t\t}\t\n\t\tif ( !bJumpOffPawn )\n\t\t\tAdjustJump();\n\t\telse\n\t\t\tbJumpOffPawn = false;\n\nPlayFall:\n\t\tPlayFalling();\n\t\tFinishAnim();\n\t}\n\t\n\tif (Physics != PHYS_Falling)\n\t\tGoto('Done');\n\tSleep(2.0);\n\tGoto('LongFall');\n\nDucking:\n\t\t\n}\n\n//------------\n//Debug functions added to prevent the Cant Find Function FireIfClearShot crash\n//------------\nstate Paralyzed\n{\n\tignores bump, frob, reacttoinjury;\n\tfunction BeginState()\n\t{\n\t\tStandUp();\n\t\tBlockReactions(true);\n\t\tbCanConverse = False;\n\t\tSeekPawn = None;\n\t\tEnableCheckDestLoc(false);\n\t}\n\tfunction bool FireIfClearShot()\n    {\n\t\tLog(\"This shouldn't be called by this actor! (\"$Self$\")\");\n\t\treturn false;\n    }\n\tfunction EndState()\n\t{\n\t\tResetReactions();\n\t\tbCanConverse = True;\n\t}\n\nBegin:\n\tAcceleration=vect(0,0,0);\n\tPlayAnimPivot('Still');\n}\n\nstate Standing\n{\n\tignores EnemyNotVisible;\n\n\tfunction SetFall()\n\t{\n\t\tStartFalling('Standing', 'ContinueStand');\n\t}\n\n\tfunction AnimEnd()\n\t{\n\t\tPlayWaiting();\n\t}\n\tfunction bool FireIfClearShot()\n    {\n\t\tLog(\"This shouldn't be called by this actor! (\"$Self$\")\");\n\t\treturn false;\n    }\n\tfunction HitWall(vector HitNormal, actor Wall)\n\t{\n\t\tif (Physics == PHYS_Falling)\n\t\t\treturn;\n\t\tGlobal.HitWall(HitNormal, Wall);\n\t\tCheckOpenDoor(HitNormal, Wall);\n\t}\n\n\tfunction Tick(float deltaSeconds)\n\t{\n\t\tanimTimer[1] += deltaSeconds;\n\t\tGlobal.Tick(deltaSeconds);\n\t}\n\n\tfunction BeginState()\n\t{\n\t\tStandUp();\n\t\tSetEnemy(None, EnemyLastSeen, true);\n\t\tDisable('AnimEnd');\n\t\tbCanJump = false;\n\n\t\tbStasis = False;\n\n\t\tSetupWeapon(false);\n\t\tSetDistress(false);\n\t\tSeekPawn = None;\n\t\tEnableCheckDestLoc(false);\n\t}\n\n\tfunction EndState()\n\t{\n\t\tEnableCheckDestLoc(false);\n\t\tbAcceptBump = True;\n\n\t\tif (JumpZ > 0)\n\t\t\tbCanJump = true;\n\t\tbStasis = True;\n\n\t\tStopBlendAnims();\n\t}\n\nBegin:\n\tWaitForLanding();\n\tif (!bUseHome)\n\t\tGoto('StartStand');\n\nMoveToBase:\n\tif (!IsPointInCylinder(self, HomeLoc, 16-CollisionRadius))\n\t{\n\t\tEnableCheckDestLoc(true);\n\t\twhile (true)\n\t\t{\n\t\t\tif (PointReachable(HomeLoc))\n\t\t\t{\n\t\t\t\tif (ShouldPlayWalk(HomeLoc))\n\t\t\t\t\tPlayWalking();\n\t\t\t\tMoveTo(HomeLoc, GetWalkingSpeed());\n\t\t\t\tCheckDestLoc(HomeLoc);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tMoveTarget = FindPathTo(HomeLoc);\n\t\t\t\tif (MoveTarget != None)\n\t\t\t\t{\n\t\t\t\t\tif (ShouldPlayWalk(MoveTarget.Location))\n\t\t\t\t\t\tPlayWalking();\n\t\t\t\t\tMoveToward(MoveTarget, GetWalkingSpeed());\n\t\t\t\t\tCheckDestLoc(MoveTarget.Location, true);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tEnableCheckDestLoc(false);\n\t}\n\tTurnTo(Location+HomeRot);\n\nStartStand:\n\tAcceleration=vect(0,0,0);\n\tGoto('Stand');\n\nContinueFromDoor:\n\tGoto('MoveToBase');\n\nStand:\nContinueStand:\n\t// nil\n\tbStasis = True;\n\n\tPlayWaiting();\n\tif (!bPlayIdle)\n\t\tGoto('DoNothing');\n\tSleep(FRand()*14+8);\n\nFidget:\n\tif (FRand() < 0.5)\n\t{\n\t\tPlayIdle();\n\t\tFinishAnim();\n\t}\n\telse\n\t{\n\t\tif (FRand() > 0.5)\n\t\t{\n\t\t\tPlayTurnHead(LOOK_Up, 1.0, 1.0);\n\t\t\tSleep(2.0);\n\t\t\tPlayTurnHead(LOOK_Forward, 1.0, 1.0);\n\t\t\tSleep(0.5);\n\t\t}\n\t\telse if (FRand() > 0.5)\n\t\t{\n\t\t\tPlayTurnHead(LOOK_Left, 1.0, 1.0);\n\t\t\tSleep(1.5);\n\t\t\tPlayTurnHead(LOOK_Forward, 1.0, 1.0);\n\t\t\tSleep(0.9);\n\t\t\tPlayTurnHead(LOOK_Right, 1.0, 1.0);\n\t\t\tSleep(1.2);\n\t\t\tPlayTurnHead(LOOK_Forward, 1.0, 1.0);\n\t\t\tSleep(0.5);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tPlayTurnHead(LOOK_Right, 1.0, 1.0);\n\t\t\tSleep(1.5);\n\t\t\tPlayTurnHead(LOOK_Forward, 1.0, 1.0);\n\t\t\tSleep(0.9);\n\t\t\tPlayTurnHead(LOOK_Left, 1.0, 1.0);\n\t\t\tSleep(1.2);\n\t\t\tPlayTurnHead(LOOK_Forward, 1.0, 1.0);\n\t\t\tSleep(0.5);\n\t\t}\n\t}\n\tif (FRand() < 0.3)\n\t\tPlayIdleSound();\n\tGoto('Stand');\n\nDoNothing:\n\t// nil\n}\n\nstate Idle\n{\n\tignores bump, frob, reacttoinjury;\n\tfunction BeginState()\n\t{\n\t\tStandUp();\n\t\tBlockReactions(true);\n\t\tbCanConverse = False;\n\t\tSeekPawn = None;\n\t\tEnableCheckDestLoc(false);\n\t}\n\tfunction bool FireIfClearShot()\n    {\n\t\tLog(\"This shouldn't be called by this actor! (\"$Self$\")\");\n\t\treturn false;\n    }\n\tfunction EndState()\n\t{\n\t\tResetReactions();\n\t\tbCanConverse = True;\n\t}\n\nBegin:\n\tAcceleration=vect(0,0,0);\n\tDesiredRotation=Rotation;\n\tPlayAnimPivot('Still');\n\nIdle:\n}\n\nstate Dancing\n{\n\tignores EnemyNotVisible;\n\tfunction bool FireIfClearShot()\n    {\n\t\tLog(\"This shouldn't be called by this actor! (\"$Self$\")\");\n\t\treturn false;\n    }\n    \n\tfunction SetFall()\n\t{\n\t\tStartFalling('Dancing', 'ContinueDance');\n\t}\n\n\tfunction AnimEnd()\n\t{\n\t\tPlayDancing();\n\t}\n\n\tfunction HitWall(vector HitNormal, actor Wall)\n\t{\n\t\tif (Physics == PHYS_Falling)\n\t\t\treturn;\n\t\tGlobal.HitWall(HitNormal, Wall);\n\t\tCheckOpenDoor(HitNormal, Wall);\n\t}\n\n\tfunction BeginState()\n\t{\n\t\tif (bSitting && !bDancing)\n\t\t\tStandUp();\n\t\tSetEnemy(None, EnemyLastSeen, true);\n\t\tDisable('AnimEnd');\n\t\tbCanJump = false;\n\n\t\tbStasis = False;\n\n\t\tSetupWeapon(false);\n\t\tSetDistress(false);\n\t\tSeekPawn = None;\n\t\tEnableCheckDestLoc(false);\n\t}\n\n\tfunction EndState()\n\t{\n\t\tEnableCheckDestLoc(false);\n\t\tbAcceptBump = True;\n\n\t\tif (JumpZ > 0)\n\t\t\tbCanJump = true;\n\t\tbStasis = True;\n\n\t\tStopBlendAnims();\n\t}\n\nBegin:\n\tWaitForLanding();\n\tif (bDancing)\n\t{\n\t\tif (bUseHome)\n\t\t\tTurnTo(Location+HomeRot);\n\t\tGoto('StartDance');\n\t}\n\tif (!bUseHome)\n\t\tGoto('StartDance');\n\nMoveToBase:\n\tif (!IsPointInCylinder(self, HomeLoc, 16-CollisionRadius))\n\t{\n\t\tEnableCheckDestLoc(true);\n\t\twhile (true)\n\t\t{\n\t\t\tif (PointReachable(HomeLoc))\n\t\t\t{\n\t\t\t\tif (ShouldPlayWalk(HomeLoc))\n\t\t\t\t\tPlayWalking();\n\t\t\t\tMoveTo(HomeLoc, GetWalkingSpeed());\n\t\t\t\tCheckDestLoc(HomeLoc);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tMoveTarget = FindPathTo(HomeLoc);\n\t\t\t\tif (MoveTarget != None)\n\t\t\t\t{\n\t\t\t\t\tif (ShouldPlayWalk(MoveTarget.Location))\n\t\t\t\t\t\tPlayWalking();\n\t\t\t\t\tMoveToward(MoveTarget, GetWalkingSpeed());\n\t\t\t\t\tCheckDestLoc(MoveTarget.Location, true);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tEnableCheckDestLoc(false);\n\t}\n\tTurnTo(Location+HomeRot);\n\nStartDance:\n\tAcceleration=vect(0,0,0);\n\tGoto('Dance');\n\nContinueFromDoor:\n\tGoto('MoveToBase');\n\nDance:\nContinueDance:\n\t// nil\n\tbDancing = True;\n\tPlayDancing();\n\tbStasis = True;\n\tif (!bHokeyPokey)\n\t\tGoto('DoNothing');\n\nSpin:\n\tSleep(FRand()*5+5);\n\tuseRot = DesiredRotation;\n\tif (FRand() > 0.5)\n\t{\n\t\tTurnTo(Location+1000*vector(useRot+rot(0,16384,0)));\n\t\tTurnTo(Location+1000*vector(useRot+rot(0,32768,0)));\n\t\tTurnTo(Location+1000*vector(useRot+rot(0,49152,0)));\n\t}\n\telse\n\t{\n\t\tTurnTo(Location+1000*vector(useRot+rot(0,49152,0)));\n\t\tTurnTo(Location+1000*vector(useRot+rot(0,32768,0)));\n\t\tTurnTo(Location+1000*vector(useRot+rot(0,16384,0)));\n\t}\n\tTurnTo(Location+1000*vector(useRot));\n\tGoto('Spin');\n\nDoNothing:\n\t// nil\n}\n\nstate Sitting\n{\n\tignores EnemyNotVisible;\n\n\tfunction SetFall()\n\t{\n\t\tStartFalling('Sitting', 'ContinueSit');\n\t}\n\n\tfunction AnimEnd()\n\t{\n\t\tPlayWaiting();\n\t}\n\tfunction bool FireIfClearShot()\n    {\n\t\tLog(\"This shouldn't be called by this actor! (\"$Self$\")\");\n\t\treturn false;\n    }\n    \n\tfunction HitWall(vector HitNormal, actor Wall)\n\t{\n\t\tif (Physics == PHYS_Falling)\n\t\t\treturn;\n\t\tif (!bAcceptBump)\n\t\t\tNextDirection = TURNING_None;\n\t\tGlobal.HitWall(HitNormal, Wall);\n\t\tCheckOpenDoor(HitNormal, Wall);\n\t}\n\n\tfunction bool HandleTurn(Actor Other)\n\t{\n\t\tif (Other == SeatActor)\n\t\t\treturn true;\n\t\telse\n\t\t\treturn Global.HandleTurn(Other);\n\t}\n\n\tfunction Bump(actor bumper)\n\t{\n\t\t// If we hit our chair, move to the right place\n\t\tif ((bumper == SeatActor) && bAcceptBump)\n\t\t{\n\t\t\tbAcceptBump = false;\n\t\t\tGotoState('Sitting', 'CircleToFront');\n\t\t}\n\n\t\t// Handle conversations, if need be\n\t\telse\n\t\t\tGlobal.Bump(bumper);\n\t}\n\n\tfunction Tick(float deltaSeconds)\n\t{\n\t\tlocal vector endPos;\n\t\tlocal vector newPos;\n\t\tlocal float  delta;\n\n\t\tGlobal.Tick(deltaSeconds);\n\n\t\tif (bSitInterpolation && (SeatActor != None))\n\t\t{\n\t\t\tendPos = SitPosition(SeatActor, SeatSlot);\n\t\t\tif ((deltaSeconds < remainingSitTime) && (remainingSitTime > 0))\n\t\t\t{\n\t\t\t\tdelta = deltaSeconds/remainingSitTime;\n\t\t\t\tnewPos = (endPos-Location)*delta + Location;\n\t\t\t\tremainingSitTime -= deltaSeconds;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tremainingSitTime = 0;\n\t\t\t\tbSitInterpolation = false;\n\t\t\t\tnewPos = endPos;\n\t\t\t\tAcceleration = vect(0,0,0);\n\t\t\t\tVelocity = vect(0,0,0);\n\t\t\t\tSetBase(SeatActor);\n\t\t\t\tbSitting = true;\n\t\t\t}\n\t\t\tSetLocation(newPos);\n\t\t\tDesiredRotation = SeatActor.Rotation+Rot(0, -16384, 0);\n\t\t}\n\t}\n\n\tfunction Vector SitPosition(Seat seatActor, int slot)\n\t{\n\t\tlocal float newAssHeight;\n\n\t\tnewAssHeight = GetDefaultCollisionHeight() + BaseAssHeight;\n\t\tnewAssHeight = -(CollisionHeight - newAssHeight);\n\n\t\treturn ((seatActor.sitPoint[slot]>>seatActor.Rotation)+seatActor.Location+(vect(0,0,-1)*newAssHeight));\n\t}\n\n\tfunction vector GetDestinationPosition(Seat seatActor, optional float extraDist)\n\t{\n\t\tlocal Rotator seatRot;\n\t\tlocal Vector  destPos;\n\n\t\tif (seatActor == None)\n\t\t\treturn (Location);\n\n\t\tseatRot = seatActor.Rotation + Rot(0, -16384, 0);\n\t\tseatRot.Pitch = 0;\n\t\tdestPos = seatActor.Location;\n\t\tdestPos += vect(0,0,1)*(CollisionHeight-seatActor.CollisionHeight);\n\t\tdestPos += Vector(seatRot)*(seatActor.CollisionRadius+CollisionRadius+extraDist);\n\n\t\treturn (destPos);\n\t}\n\n\tfunction bool IsIntersectingSeat()\n\t{\n\t\tlocal bool   bIntersect;\n\t\tlocal vector testVector;\n\n\t\tbIntersect = false;\n\t\tif (SeatActor != None)\n\t\t\tbIntersect = IsOverlapping(SeatActor);\n\n\t\treturn (bIntersect);\n\t}\n\n\tfunction int FindBestSlot(Seat seatActor, out float slotDist)\n\t{\n\t\tlocal int   bestSlot;\n\t\tlocal float dist;\n\t\tlocal float bestDist;\n\t\tlocal int   i;\n\n\t\tbestSlot = -1;\n\t\tbestDist = 100;\n\t\tif (!seatActor.Region.Zone.bWaterZone)\n\t\t{\n\t\t\tfor (i=0; i<seatActor.numSitPoints; i++)\n\t\t\t{\n\t\t\t\tif (seatActor.sittingActor[i] == None)\n\t\t\t\t{\n\t\t\t\t\tdist = VSize(SitPosition(seatActor, i) - Location);\n\t\t\t\t\tif ((bestSlot < 0) || (bestDist > dist))\n\t\t\t\t\t{\n\t\t\t\t\t\tbestDist = dist;\n\t\t\t\t\t\tbestSlot = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tslotDist = bestDist;\n\n\t\treturn (bestSlot);\n\t}\n\n\tfunction FindBestSeat()\n\t{\n\t\tlocal Seat  curSeat;\n\t\tlocal Seat  bestSeat;\n\t\tlocal float curDist;\n\t\tlocal float bestDist;\n\t\tlocal int   curSlot;\n\t\tlocal int   bestSlot;\n\t\tlocal bool  bTry;\n\n\t\tif (bUseFirstSeatOnly && bSeatHackUsed)\n\t\t{\n\t\t\tbestSeat = SeatHack;  // use the seat hack\n\t\t\tbestSlot = -1;\n\t\t\tif (!IsSeatValid(bestSeat))\n\t\t\t\tbestSeat = None;\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (GetNextWaypoint(bestSeat) == None)\n\t\t\t\t\tbestSeat = None;\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tbestSlot = FindBestSlot(bestSeat, curDist);\n\t\t\t\t\tif (bestSlot < 0)\n\t\t\t\t\t\tbestSeat = None;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbestSeat = Seat(OrderActor);  // try the ordered seat first\n\t\t\tif (bestSeat != None)\n\t\t\t{\n\t\t\t\tif (!IsSeatValid(OrderActor))\n\t\t\t\t\tbestSeat = None;\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (GetNextWaypoint(bestSeat) == None)\n\t\t\t\t\t\tbestSeat = None;\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tbestSlot = FindBestSlot(bestSeat, curDist);\n\t\t\t\t\t\tif (bestSlot < 0)\n\t\t\t\t\t\t\tbestSeat = None;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (bestSeat == None)\n\t\t\t{\n\t\t\t\tbestDist = 10001;\n\t\t\t\tbestSlot = -1;\n\t\t\t\tforeach RadiusActors(Class'Seat', curSeat, 10000)\n\t\t\t\t{\n\t\t\t\t\tif (IsSeatValid(curSeat))\n\t\t\t\t\t{\n\t\t\t\t\t\tcurSlot = FindBestSlot(curSeat, curDist);\n\t\t\t\t\t\tif (curSlot >= 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (bestDist > curDist)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (GetNextWaypoint(curSeat) != None)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tbestDist = curDist;\n\t\t\t\t\t\t\t\t\tbestSeat = curSeat;\n\t\t\t\t\t\t\t\t\tbestSlot = curSlot;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (bestSeat != None)\n\t\t{\n\t\t\tbestSeat.sittingActor[bestSlot] = self;\n\t\t\tSeatLocation       = bestSeat.Location;\n\t\t\tbSeatLocationValid = true;\n\t\t}\n\t\telse\n\t\t\tbSeatLocationValid = false;\n\n\t\tif (bUseFirstSeatOnly && !bSeatHackUsed)\n\t\t{\n\t\t\tSeatHack      = bestSeat;\n\t\t\tbSeatHackUsed = true;\n\t\t}\n\n\t\tSeatActor = bestSeat;\n\t\tSeatSlot  = bestSlot;\n\t}\n\n\tfunction FollowSeatFallbackOrders()\n\t{\n\t\tFindBestSeat();\n\t\tif (IsSeatValid(SeatActor))\n\t\t\tGotoState('Sitting', 'Begin');\n\t\telse\n\t\t\tGotoState('Wandering');\n\t}\n\n\tfunction BeginState()\n\t{\n\t\tSetEnemy(None, EnemyLastSeen, true);\n\t\tDisable('AnimEnd');\n\t\tbCanJump = false;\n\n\t\tbAcceptBump = True;\n\n\t\tif (SeatActor == None)\n\t\t\tFindBestSeat();\n\n\t\tbSitInterpolation = false;\n\n\t\tbStasis = False;\n\n\t\tSetupWeapon(false);\n\t\tSetDistress(false);\n\t\tSeekPawn = None;\n\t\tEnableCheckDestLoc(true);\n\t}\n\n\tfunction EndState()\n\t{\n\t\tEnableCheckDestLoc(false);\n\t\tif (!bSitting)\n\t\t\tStandUp();\n\n\t\tbAcceptBump = True;\n\n\t\tif (JumpZ > 0)\n\t\t\tbCanJump = true;\n\n\t\tbSitInterpolation = false;\n\n\t\tbStasis = True;\n\t}\n\nBegin:\n\tWaitForLanding();\n\tif (!IsSeatValid(SeatActor))\n\t\tFollowSeatFallbackOrders();\n\tif (!bSitting)\n\t\tWaitForLanding();\n\telse\n\t{\n\t\tTurnTo(Vector(SeatActor.Rotation+Rot(0, -16384, 0))*100+Location);\n\t\tGoto('ContinueSitting');\n\t}\n\nMoveToSeat:\n\tif (IsIntersectingSeat())\n\t\tGoto('MoveToPosition');\n\tbAcceptBump = true;\n\twhile (true)\n\t{\n\t\tif (!IsSeatValid(SeatActor))\n\t\t\tFollowSeatFallbackOrders();\n\t\tdestLoc = GetDestinationPosition(SeatActor);\n\t\tif (PointReachable(destLoc))\n\t\t{\n\t\t\tif (ShouldPlayWalk(destLoc))\n\t\t\t\tPlayWalking();\n\t\t\tMoveTo(destLoc, GetWalkingSpeed());\n\t\t\tCheckDestLoc(destLoc);\n\n\t\t\tif (IsPointInCylinder(self, GetDestinationPosition(SeatActor), 16, 16))\n\t\t\t{\n\t\t\t\tbAcceptBump = false;\n\t\t\t\tGoto('MoveToPosition');\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tMoveTarget = GetNextWaypoint(SeatActor);\n\t\t\tif (MoveTarget != None)\n\t\t\t{\n\t\t\t\tif (ShouldPlayWalk(MoveTarget.Location))\n\t\t\t\t\tPlayWalking();\n\t\t\t\tMoveToward(MoveTarget, GetWalkingSpeed());\n\t\t\t\tCheckDestLoc(MoveTarget.Location, true);\n\t\t\t}\n\t\t\telse\n\t\t\t\tbreak;\n\t\t}\n\t}\n\nCircleToFront:\n\tbAcceptBump = false;\n\tif (!IsSeatValid(SeatActor))\n\t\tFollowSeatFallbackOrders();\n\tif (ShouldPlayWalk(GetDestinationPosition(SeatActor, 16)))\n\t\tPlayWalking();\n\tMoveTo(GetDestinationPosition(SeatActor, 16), GetWalkingSpeed());\n\nMoveToPosition:\n\tif (!IsSeatValid(SeatActor))\n\t\tFollowSeatFallbackOrders();\n\tbSitting = true;\n\tEnableCollision(false);\n\tAcceleration=vect(0,0,0);\n\nSit:\n\tAcceleration=vect(0,0,0);\n\tVelocity=vect(0,0,0);\n\tif (!IsSeatValid(SeatActor))\n\t\tFollowSeatFallbackOrders();\n\tremainingSitTime = 0.8;\n\tPlaySittingDown();\n\tSetBasedPawnSize(CollisionRadius, GetSitHeight());\n\tSetPhysics(PHYS_Flying);\n\tStopStanding();\n\tbSitInterpolation = true;\n\twhile (bSitInterpolation)\n\t\tSleep(0);\n\tFinishAnim();\n\tGoto('ContinueSitting');\n\nContinueFromDoor:\n\tGoto('MoveToSeat');\n\nContinueSitting:\n\tif (!IsSeatValid(SeatActor))\n\t\tFollowSeatFallbackOrders();\n\tSetBasedPawnSize(CollisionRadius, GetSitHeight());\n\tSetCollision(Default.bCollideActors, Default.bBlockActors, Default.bBlockPlayers);\n\tPlaySitting();\n\tbStasis  = True;\n\t// nil\n\n}\n\nstate Wandering\n{\n\tignores EnemyNotVisible;\n\n\tfunction SetFall()\n\t{\n\t\tStartFalling('Wandering', 'ContinueWander');\n\t}\n\tfunction bool FireIfClearShot()\n    {\n\t\tLog(\"This shouldn't be called by this actor! (\"$Self$\")\");\n\t\treturn false;\n    }\n\tfunction Bump(actor bumper)\n\t{\n\t\tif (bAcceptBump)\n\t\t{\n\t\t\t// If we get bumped by another actor while we wait, start wandering again\n\t\t\tbAcceptBump = False;\n\t\t\tDisable('AnimEnd');\n\t\t\tGotoState('Wandering', 'Wander');\n\t\t}\n\n\t\t// Handle conversations, if need be\n\t\tGlobal.Bump(bumper);\n\t}\n\n\tfunction HitWall(vector HitNormal, actor Wall)\n\t{\n\t\tif (Physics == PHYS_Falling)\n\t\t\treturn;\n\t\tGlobal.HitWall(HitNormal, Wall);\n\t\tCheckOpenDoor(HitNormal, Wall);\n\t}\n\n\tfunction bool GoHome()\n\t{\n\t\tif (bUseHome && !IsNearHome(Location))\n\t\t{\n\t\t\tdestLoc   = HomeLoc;\n\t\t\tdestPoint = None;\n\t\t\tif (PointReachable(destLoc))\n\t\t\t\treturn true;\n\t\t\telse\n\t\t\t{\n\t\t\t\tMoveTarget = FindPathTo(destLoc);\n\t\t\t\tif (MoveTarget != None)\n\t\t\t\t\treturn true;\n\t\t\t\telse\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\treturn false;\n\t}\n\n\tfunction PickDestination()\n\t{\n\t\tlocal WanderCandidates candidates[5];\n\t\tlocal int              candidateCount;\n\t\tlocal int              maxCandidates;\n\t\tlocal int              maxLastPoints;\n\n\t\tlocal WanderPoint curPoint;\n\t\tlocal Actor       wayPoint;\n\t\tlocal int         i;\n\t\tlocal int         openSlot;\n\t\tlocal float       maxDist;\n\t\tlocal float       dist;\n\t\tlocal float       angle;\n\t\tlocal float       magnitude;\n\t\tlocal int         iterations;\n\t\tlocal bool        bSuccess;\n\t\tlocal Rotator     rot;\n\n\t\tmaxCandidates = 4;  // must be <= size of candidates[] array\n\t\tmaxLastPoints = 2;  // must be <= size of lastPoints[] array\n\n\t\tfor (i=0; i<maxCandidates; i++)\n\t\t\tcandidates[i].dist = 100000;\n\t\tcandidateCount = 0;\n\n\t\t// A certain percentage of the time, we want to angle off to a random direction...\n\t\tif ((RandomWandering < 1) && (FRand() > RandomWandering))\n\t\t{\n\t\t\t// Fill the candidate table\n\t\t\tforeach RadiusActors(Class'WanderPoint', curPoint, 3000*wanderlust+1000)  // 1000-4000\n\t\t\t{\n\t\t\t\t// Make sure we haven't been here recently\n\t\t\t\tfor (i=0; i<maxLastPoints; i++)\n\t\t\t\t{\n\t\t\t\t\tif (lastPoints[i] == curPoint)\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (i >= maxLastPoints)\n\t\t\t\t{\n\t\t\t\t\t// Can we get there from here?\n\t\t\t\t\twayPoint = GetNextWaypoint(curPoint);\n\n\t\t\t\t\tif ((wayPoint != None) && !IsNearHome(curPoint.Location))\n\t\t\t\t\t\twayPoint = None;\n\n\t\t\t\t\t// Yep\n\t\t\t\t\tif (wayPoint != None)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Find an empty slot for this candidate\n\t\t\t\t\t\topenSlot = -1;\n\t\t\t\t\t\tdist     = VSize(curPoint.location - location);\n\t\t\t\t\t\tmaxDist  = dist;\n\n\t\t\t\t\t\t// This candidate will only replace more distant candidates...\n\t\t\t\t\t\tfor (i=0; i<maxCandidates; i++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (maxDist < candidates[i].dist)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tmaxDist  = candidates[i].dist;\n\t\t\t\t\t\t\t\topenSlot = i;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Put the candidate in the (unsorted) list\n\t\t\t\t\t\tif (openSlot >= 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcandidates[openSlot].point    = curPoint;\n\t\t\t\t\t\t\tcandidates[openSlot].waypoint = wayPoint;\n\t\t\t\t\t\t\tcandidates[openSlot].dist     = dist;\n\t\t\t\t\t\t\tif (candidateCount < maxCandidates)\n\t\t\t\t\t\t\t\tcandidateCount++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Shift our list of recently visited points\n\t\tfor (i=maxLastPoints-1; i>0; i--)\n\t\t\tlastPoints[i] = lastPoints[i-1];\n\t\tlastPoints[0] = None;\n\n\t\t// Do we have a list of candidates?\n\t\tif (candidateCount > 0)\n\t\t{\n\t\t\t// Pick a candidate at random\n\t\t\ti = Rand(candidateCount);\n\t\t\tcurPoint = candidates[i].point;\n\t\t\twayPoint = candidates[i].waypoint;\n\t\t\tlastPoints[0] = curPoint;\n\t\t\tMoveTarget    = wayPoint;\n\t\t\tdestPoint     = curPoint;\n\t\t}\n\n\t\t// No candidates -- find a random place to go\n\t\telse\n\t\t{\n\t\t\tMoveTarget = None;\n\t\t\tdestPoint  = None;\n\t\t\titerations = 6;  // try up to 6 different directions\n\t\t\twhile (iterations > 0)\n\t\t\t{\n\t\t\t\t// How far will we go?\n\t\t\t\tmagnitude = (wanderlust*400+200) * (FRand()*0.2+0.9); // 200-600, +/-10%\n\n\t\t\t\t// Choose our destination, based on whether we have a home base\n\t\t\t\tif (!bUseHome)\n\t\t\t\t\tbSuccess = AIPickRandomDestination(100, magnitude, 0, 0, 0, 0, 1,\n\t\t\t\t\t                                   FRand()*0.4+0.35, destLoc);\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (magnitude > HomeExtent)\n\t\t\t\t\t\tmagnitude = HomeExtent*(FRand()*0.2+0.9);\n\t\t\t\t\trot = Rotator(HomeLoc-Location);\n\t\t\t\t\tbSuccess = AIPickRandomDestination(50, magnitude, rot.Yaw, 0.25, rot.Pitch, 0.25, 1,\n\t\t\t\t\t                                   FRand()*0.4+0.35, destLoc);\n\t\t\t\t}\n\n\t\t\t\t// Success?  Break out of the iteration loop\n\t\t\t\tif (bSuccess)\n\t\t\t\t\tif (IsNearHome(destLoc))\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t// We failed -- try again\n\t\t\t\titerations--;\n\t\t\t}\n\n\t\t\t// If we got a destination, go there\n\t\t\tif (iterations <= 0)\n\t\t\t\tdestLoc = Location;\n\t\t}\n\t}\n\n\tfunction AnimEnd()\n\t{\n\t\tPlayWaiting();\n\t}\n\n\tfunction BeginState()\n\t{\n\t\tStandUp();\n\t\tSetEnemy(None, EnemyLastSeen, true);\n\t\tDisable('AnimEnd');\n\t\tbCanJump = false;\n\t\tSetupWeapon(false);\n\t\tSetDistress(false);\n\t\tSeekPawn = None;\n\t\tEnableCheckDestLoc(false);\n\t}\n\n\tfunction EndState()\n\t{\n\t\tlocal int i;\n\t\tbAcceptBump = True;\n\n\t\tEnableCheckDestLoc(false);\n\n\t\t// Clear out our list of last visited points\n\t\tfor (i=0; i<ArrayCount(lastPoints); i++)\n\t\t\tlastPoints[i] = None;\n\n\t\tif (JumpZ > 0)\n\t\t\tbCanJump = true;\n\t}\n\nBegin:\n\tdestPoint = None;\n\nGoHome:\n\tbAcceptBump = false;\n\tWaitForLanding();\n\tif (!GoHome())\n\t\tGoto('WanderInternal');\n\nMoveHome:\n\tEnableCheckDestLoc(true);\n\twhile (true)\n\t{\n\t\tif (PointReachable(destLoc))\n\t\t{\n\t\t\tif (ShouldPlayWalk(destLoc))\n\t\t\t\tPlayWalking();\n\t\t\tMoveTo(destLoc, GetWalkingSpeed());\n\t\t\tCheckDestLoc(destLoc);\n\t\t\tbreak;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tMoveTarget = FindPathTo(destLoc);\n\t\t\tif (MoveTarget != None)\n\t\t\t{\n\t\t\t\tif (ShouldPlayWalk(MoveTarget.Location))\n\t\t\t\t\tPlayWalking();\n\t\t\t\tMoveToward(MoveTarget, GetWalkingSpeed());\n\t\t\t\tCheckDestLoc(MoveTarget.Location, true);\n\t\t\t}\n\t\t\telse\n\t\t\t\tbreak;\n\t\t}\n\t}\n\tEnableCheckDestLoc(false);\n\tGoto('Pausing');\n\nWander:\n\tWaitForLanding();\nWanderInternal:\n\tPickDestination();\n\nMoving:\n\t// Move from pathnode to pathnode until we get where we're going\n\t// (ooooold code -- no longer used)\n\tif (destPoint != None)\n\t{\n\t\tif (ShouldPlayWalk(MoveTarget.Location))\n\t\t\tPlayWalking();\n\t\tMoveToward(MoveTarget, GetWalkingSpeed());\n\t\twhile ((MoveTarget != None) && (MoveTarget != destPoint))\n\t\t{\n\t\t\tMoveTarget = FindPathToward(destPoint);\n\t\t\tif (MoveTarget != None)\n\t\t\t{\n\t\t\t\tif (ShouldPlayWalk(MoveTarget.Location))\n\t\t\t\t\tPlayWalking();\n\t\t\t\tMoveToward(MoveTarget, GetWalkingSpeed());\n\t\t\t}\n\t\t}\n\t}\n\telse if (destLoc != Location)\n\t{\n\t\tif (ShouldPlayWalk(destLoc))\n\t\t\tPlayWalking();\n\t\tMoveTo(destLoc, GetWalkingSpeed());\n\t}\n\telse\n\t\tSleep(0.5);\n\nPausing:\n\tAcceleration = vect(0, 0, 0);\n\n\t// Turn in the direction dictated by the WanderPoint, if there is one\n\tsleepTime = 6.0;\n\tif (WanderPoint(destPoint) != None)\n\t{\n\t\tif (WanderPoint(destPoint).gazeItem != None)\n\t\t{\n\t\t\tTurnToward(WanderPoint(destPoint).gazeItem);\n\t\t\tsleepTime = WanderPoint(destPoint).gazeDuration;\n\t\t}\n\t\telse if (WanderPoint(destPoint).gazeDirection != vect(0, 0, 0))\n\t\t\tTurnTo(Location + WanderPoint(destPoint).gazeDirection);\n\t}\n\tEnable('AnimEnd');\n\tTweenToWaiting(0.2);\n\tbAcceptBump = True;\n\tPlayScanningSound();\n\tsleepTime *= (-0.9*restlessness) + 1;\n\tSleep(sleepTime);\n\tDisable('AnimEnd');\n\tbAcceptBump = False;\n\tFinishAnim();\n\tGoto('Wander');\n\nContinueWander:\nContinueFromDoor:\n\tFinishAnim();\n\tPlayWalking();\n\tGoto('Wander');\n}\n\nState Patrolling\n{\n\tfunction SetFall()\n\t{\n\t\tStartFalling('Patrolling', 'ContinuePatrol');\n\t}\n\n\tfunction HitWall(vector HitNormal, actor Wall)\n\t{\n\t\tif (Physics == PHYS_Falling)\n\t\t\treturn;\n\t\tGlobal.HitWall(HitNormal, Wall);\n\t\tCheckOpenDoor(HitNormal, Wall);\n\t}\n\t\n\tfunction AnimEnd()\n\t{\n\t\tPlayWaiting();\n\t}\n\tfunction bool FireIfClearShot()\n    {\n\t\tLog(\"This shouldn't be called by this actor! (\"$Self$\")\");\n\t\treturn false;\n    }\n\tfunction PatrolPoint PickStartPoint()\n\t{\n\t\tlocal NavigationPoint nav;\n\t\tlocal PatrolPoint     curNav;\n\t\tlocal float           curDist;\n\t\tlocal PatrolPoint     closestNav;\n\t\tlocal float           closestDist;\n\n\t\tnav = Level.NavigationPointList;\n\t\twhile (nav != None)\n\t\t{\n\t\t\tnav.visitedWeight = 0;\n\t\t\tnav = nav.nextNavigationPoint;\n\t\t}\n\n\t\tclosestNav  = None;\n\t\tclosestDist = 100000;\n\t\tnav = Level.NavigationPointList;\n\t\twhile (nav != None)\n\t\t{\n\t\t\tcurNav = PatrolPoint(nav);\n\t\t\tif ((curNav != None) && (curNav.Tag == OrderTag))\n\t\t\t{\n\t\t\t\twhile (curNav != None)\n\t\t\t\t{\n\t\t\t\t\tif (curNav.visitedWeight != 0)  // been here before\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcurDist = VSize(Location - curNav.Location);\n\t\t\t\t\tif ((closestNav == None) || (closestDist > curDist))\n\t\t\t\t\t{\n\t\t\t\t\t\tclosestNav  = curNav;\n\t\t\t\t\t\tclosestDist = curDist;\n\t\t\t\t\t}\n\t\t\t\t\tcurNav.visitedWeight = 1;\n\t\t\t\t\tcurNav = curNav.NextPatrolPoint;\n\t\t\t\t}\n\t\t\t}\n\t\t\tnav = nav.nextNavigationPoint;\n\t\t}\n\n\t\treturn (closestNav);\n\t}\n\n\tfunction PickDestination()\n\t{\n\t\tif (PatrolPoint(destPoint) != None)\n\t\t\tdestPoint = PatrolPoint(destPoint).NextPatrolPoint;\n\t\telse\n\t\t\tdestPoint = PickStartPoint();\n\t\tif (destPoint == None)  // can't go anywhere...\n\t\t\tGotoState('Standing');\n\t}\n\n\tfunction BeginState()\n\t{\n\t\tStandUp();\n\t\tSetEnemy(None, EnemyLastSeen, true);\n\t\tDisable('AnimEnd');\n\t\tSetupWeapon(false);\n\t\tSetDistress(false);\n\t\tbStasis = false;\n\t\tSeekPawn = None;\n\t\tEnableCheckDestLoc(false);\n\t}\n\n\tfunction EndState()\n\t{\n\t\tEnableCheckDestLoc(false);\n\t\tEnable('AnimEnd');\n\t\tbStasis = true;\n\t}\n\nBegin:\n\tdestPoint = None;\n\nPatrol:\n\t//Disable('Bump');\n\tWaitForLanding();\n\tPickDestination();\n\nMoving:\n\t// Move from pathnode to pathnode until we get where we're going\n\tif (destPoint != None)\n\t{\n\t\tif (!IsPointInCylinder(self, destPoint.Location, 16-CollisionRadius))\n\t\t{\n\t\t\tEnableCheckDestLoc(true);\n\t\t\tMoveTarget = FindPathToward(destPoint);\n\t\t\twhile (MoveTarget != None)\n\t\t\t{\n\t\t\t\tif (ShouldPlayWalk(MoveTarget.Location))\n\t\t\t\t\tPlayWalking();\n\t\t\t\tMoveToward(MoveTarget, GetWalkingSpeed());\n\t\t\t\tCheckDestLoc(MoveTarget.Location, true);\n\t\t\t\tif (MoveTarget == destPoint)\n\t\t\t\t\tbreak;\n\t\t\t\tMoveTarget = FindPathToward(destPoint);\n\t\t\t}\n\t\t\tEnableCheckDestLoc(false);\n\t\t}\n\t}\n\telse\n\t\tGoto('Patrol');\n\nPausing:\n\tif (!bAlwaysPatrol)\n\t\tbStasis = true;\n\tAcceleration = vect(0, 0, 0);\n\n\t// Turn in the direction dictated by the WanderPoint, or a random direction\n\tif (PatrolPoint(destPoint) != None)\n\t{\n\t\tif ((PatrolPoint(destPoint).pausetime > 0) || (PatrolPoint(destPoint).NextPatrolPoint == None))\n\t\t{\n\t\t\tif (ShouldPlayTurn(Location + PatrolPoint(destPoint).lookdir))\n\t\t\t\tPlayTurning();\n\t\t\tTurnTo(Location + PatrolPoint(destPoint).lookdir);\n\t\t\tEnable('AnimEnd');\n\t\t\tTweenToWaiting(0.2);\n\t\t\tPlayScanningSound();\n\t\t\t//Enable('Bump');\n\t\t\tsleepTime = PatrolPoint(destPoint).pausetime * ((-0.9*restlessness) + 1);\n\t\t\tSleep(sleepTime);\n\t\t\tDisable('AnimEnd');\n\t\t\t//Disable('Bump');\n\t\t\tFinishAnim();\n\t\t}\n\t}\n\tGoto('Patrol');\n\nContinuePatrol:\nContinueFromDoor:\n\tFinishAnim();\n\tPlayWalking();\n\tGoto('Moving');\n\n}\n\nState Seeking\n{\n\t\tignores bump, frob;\n\tfunction SetFall()\n\t{\n\t\tStartFalling('Seeking', 'ContinueSeek');\n\t}\n\tfunction bool FireIfClearShot()\n    {\n\t\tLog(\"This shouldn't be called by this actor! (\"$Self$\")\");\n\t\treturn false;\n    }\n\tfunction HitWall(vector HitNormal, actor Wall)\n\t{\n\t\tif (Physics == PHYS_Falling)\n\t\t\treturn;\n\t\tGlobal.HitWall(HitNormal, Wall);\n\t\tCheckOpenDoor(HitNormal, Wall);\n\t}\n\n\tfunction bool GetNextLocation(out vector nextLoc)\n\t{\n\t\tlocal float   dist;\n\t\tlocal rotator rotation;\n\t\tlocal bool    bDone;\n\t\tlocal float   seekDistance;\n\t\tlocal Actor   hitActor;\n\t\tlocal vector  HitLocation, HitNormal;\n\t\tlocal vector  diffVect;\n\t\tlocal bool    bLOS;\n\n\t\tif (bSeekLocation)\n\t\t{\n\t\t\tif (SeekType == SEEKTYPE_Guess)\n\t\t\t\tseekDistance = (200+FClamp(GroundSpeed*EnemyLastSeen*0.5, 0, 1000));\n\t\t\telse\n\t\t\t\tseekDistance = 300;\n\t\t}\n\t\telse\n\t\t\tseekDistance = 60;\n\n\t\tdist  = VSize(Location-destLoc);\n\t\tbDone = false;\n\t\tbLOS  = false;\n\n\t\tif (dist < seekDistance)\n\t\t{\n\t\t\tbLOS = true;\n\t\t\tforeach TraceVisibleActors(Class'Actor', hitActor, hitLocation, hitNormal,\n\t\t\t                           destLoc, Location+vect(0,0,1)*BaseEyeHeight)\n\t\t\t{\n\t\t\t\tif (hitActor != self)\n\t\t\t\t{\n\t\t\t\t\tif (hitActor == Level)\n\t\t\t\t\t\tbLOS = false;\n\t\t\t\t\telse if (IsPointInCylinder(hitActor, destLoc, 16, 16))\n\t\t\t\t\t\tbreak;\n\t\t\t\t\telse if (hitActor.bBlockSight && !hitActor.bHidden)\n\t\t\t\t\t\tbLOS = false;\n\t\t\t\t}\n\t\t\t\tif (!bLOS)\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (!bLOS)\n\t\t{\n\t\t\tif (PointReachable(destLoc))\n\t\t\t{\n\t\t\t\trotation = Rotator(destLoc - Location);\n\t\t\t\tif (seekDistance == 0)\n\t\t\t\t\tnextLoc = destLoc;\n\t\t\t\telse if (!AIDirectionReachable(destLoc, rotation.Yaw, rotation.Pitch, 0, seekDistance, nextLoc))\n\t\t\t\t\tbDone = true;\n\t\t\t\tif (!bDone && bDefendHome && !IsNearHome(nextLoc))\n\t\t\t\t\tbDone = true;\n\t\t\t\tif (!bDone)  // hack, because Unreal's movement code SUCKS\n\t\t\t\t{\n\t\t\t\t\tdiffVect = nextLoc - Location;\n\t\t\t\t\tif (Physics == PHYS_Walking)\n\t\t\t\t\t\tdiffVect *= vect(1,1,0);\n\t\t\t\t\tif (VSize(diffVect) < 20)\n\t\t\t\t\t\tbDone = true;\n\t\t\t\t\telse if (IsPointInCylinder(self, nextLoc, 10, 10))\n\t\t\t\t\t\tbDone = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tMoveTarget = FindPathTo(destLoc);\n\t\t\t\tif (MoveTarget == None)\n\t\t\t\t\tbDone = true;\n\t\t\t\telse if (bDefendHome && !IsNearHome(MoveTarget.Location))\n\t\t\t\t\tbDone = true;\n\t\t\t\telse\n\t\t\t\t\tnextLoc = MoveTarget.Location;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\tbDone = true;\n\n\t\treturn (!bDone);\n\t}\n\n\tfunction bool PickDestination()\n\t{\n\t\tlocal bool bValid;\n\n\t\tbValid = false;\n\t\tif (/*(EnemyLastSeen <= 25.0) &&*/ (SeekLevel > 0))\n\t\t{\n\t\t\tif (bSeekLocation)\n\t\t\t{\n\t\t\t\tbValid  = true;\n\t\t\t\tdestLoc = LastSeenPos;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbValid = AIPickRandomDestination(130, 250, 0, 0, 0, 0, 2, 1.0, destLoc);\n\t\t\t\tif (!bValid)\n\t\t\t\t{\n\t\t\t\t\tbValid  = true;\n\t\t\t\t\tdestLoc = Location + VRand()*50;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tdestLoc += vect(0,0,1)*BaseEyeHeight;\n\t\t\t}\n\t\t}\n\n\t\treturn (bValid);\n\t}\n\n\tfunction NavigationPoint GetOvershootDestination(float randomness, optional float focus)\n\t{\n\t\tlocal NavigationPoint navPoint, bestPoint;\n\t\tlocal float           distance;\n\t\tlocal float           score, bestScore;\n\t\tlocal int             yaw;\n\t\tlocal rotator         rot;\n\t\tlocal float           yawCutoff;\n\n\t\tif (focus <= 0)\n\t\t\tfocus = 0.6;\n\n\t\tyawCutoff = int(32768*focus);\n\t\tbestPoint = None;\n\t\tbestScore = 0;\n\n\t\tforeach ReachablePathnodes(Class'NavigationPoint', navPoint, None, distance)\n\t\t{\n\t\t\tif (distance < 1)\n\t\t\t\tdistance = 1;\n\t\t\trot = Rotator(navPoint.Location-Location);\n\t\t\tyaw = rot.Yaw + (16384*randomness);\n\t\t\tyaw = (yaw-Rotation.Yaw) & 0xFFFF;\n\t\t\tif (yaw > 32767)\n\t\t\t\tyaw  -= 65536;\n\t\t\tyaw = abs(yaw);\n\t\t\tif (yaw <= yawCutoff)\n\t\t\t{\n\t\t\t\tscore = yaw/distance;\n\t\t\t\tif ((bestPoint == None) || (score < bestScore))\n\t\t\t\t{\n\t\t\t\t\tbestPoint = navPoint;\n\t\t\t\t\tbestScore = score;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn bestPoint;\n\t}\n\n\tfunction Tick(float deltaSeconds)\n\t{\n\t\tanimTimer[1] += deltaSeconds;\n\t\tGlobal.Tick(deltaSeconds);\n\t\tUpdateActorVisibility(Enemy, deltaSeconds, 1.0, true);\n\t}\n\n\t/*function HandleLoudNoise(Name event, EAIEventState state, XAIParams params)\n\t{\n\t\tlocal Actor bestActor;\n\t\tlocal Pawn  instigator;\n\n\t\tif (state == EAISTATE_Begin || state == EAISTATE_Pulse)\n\t\t{\n\t\t\tbestActor = params.bestActor;\n\t\t\tif ((bestActor != None) && (EnemyLastSeen > 2.0))\n\t\t\t{\n\t\t\t\tinstigator = Pawn(bestActor);\n\t\t\t\tif (instigator == None)\n\t\t\t\t\tinstigator = bestActor.Instigator;\n\t\t\t\tif (instigator != None)\n\t\t\t\t{\n\t\t\t\t\tif (IsValidEnemy(instigator))\n\t\t\t\t\t{\n\t\t\t\t\t\tSetSeekLocation(instigator, bestActor.Location, SEEKTYPE_Sound);\n\t\t\t\t\t\tdestLoc = LastSeenPos;\n\t\t\t\t\t\tif (bInterruptSeek)\n\t\t\t\t\t\t\tGotoState('Seeking', 'GoToLocation');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}*/\n\n\tfunction HandleSighting(Pawn pawnSighted)\n\t{\n\t\tif ((EnemyLastSeen > 2.0) && IsValidEnemy(pawnSighted))\n\t\t{\n\t\t\tSetSeekLocation(pawnSighted, pawnSighted.Location, SEEKTYPE_Sight);\n\t\t\tdestLoc = LastSeenPos;\n\t\t\tif (bInterruptSeek)\n\t\t\t\tGotoState('Seeking', 'GoToLocation');\n\t\t}\n\t}\n\n\tfunction BeginState()\n\t{\n\t\tStandUp();\n\t\tDisable('AnimEnd');\n\t\tdestLoc = LastSeenPos;\n\t\tSetReactions(true, true, false, true, true, true, true, true, true, false, true, true);\n\t\tbCanConverse = False;\n\t\tbStasis = False;\n\t\tSetupWeapon(true);\n\t\tSetDistress(false);\n\t\tbInterruptSeek = false;\n\t\tEnableCheckDestLoc(false);\n\t}\n\n\tfunction EndState()\n\t{\n\t\tEnableCheckDestLoc(false);\n\t\tEnable('AnimEnd');\n\t\tResetReactions();\n\t\tbCanConverse = True;\n\t\tbStasis = True;\n\t\tStopBlendAnims();\n\t\tSeekLevel = 0;\n\t}\n\nBegin:\n\tWaitForLanding();\n\tPlayWaiting();\n\tif ((Weapon != None) && bKeepWeaponDrawn && (Weapon.CockingSound != None) && !bSeekPostCombat)\n\t\tPlaySound(Weapon.CockingSound, SLOT_None,,, 1024);\n\tAcceleration = vect(0,0,0);\n\tif (!PickDestination())\n\t\tGoto('DoneSeek');\n\nGoToLocation:\n\tbInterruptSeek = true;\n\tAcceleration = vect(0,0,0);\n\n\tif ((DeusExWeapon(Weapon) != None) && DeusExWeapon(Weapon).CanReload() && !Weapon.IsInState('Reload'))\n\t\tDeusExWeapon(Weapon).ReloadAmmo();\n\n\tif (bSeekPostCombat)\n\t\tPlayPostAttackSearchingSound();\n\telse if (SeekType == SEEKTYPE_Sound)\n\t\tPlayPreAttackSearchingSound();\n\telse if (SeekType == SEEKTYPE_Sight)\n\t{\n\t\tif (ReactionLevel > 0.5)\n\t\t\tPlayPreAttackSightingSound();\n\t}\n\telse if ((SeekType == SEEKTYPE_Carcass) && bSeekLocation)\n\t\tPlayCarcassSound();\n\n\tStopBlendAnims();\n\n\tif ((SeekType == SEEKTYPE_Sight) && bSeekLocation)\n\t\tGoto('TurnToLocation');\n\n\tEnableCheckDestLoc(true);\n\twhile (GetNextLocation(useLoc))\n\t{\n\t\tif (ShouldPlayWalk(useLoc))\n\t\t\tPlayRunning();\n\t\tMoveTo(useLoc, MaxDesiredSpeed);\n\t\tCheckDestLoc(useLoc);\n\t}\n\tEnableCheckDestLoc(false);\n\n\tif ((SeekType == SEEKTYPE_Guess) && bSeekLocation)\n\t{\n\t\tMoveTarget = GetOvershootDestination(0.5);\n\t\tif (MoveTarget != None)\n\t\t{\n\t\t\tif (ShouldPlayWalk(MoveTarget.Location))\n\t\t\t\tPlayRunning();\n\t\t\tMoveToward(MoveTarget, MaxDesiredSpeed);\n\t\t}\n\n\t\tif (AIPickRandomDestination(CollisionRadius*2, 200+FRand()*200, Rotation.Yaw, 0.75, Rotation.Pitch, 0.75, 2,\n\t\t                            0.4, useLoc))\n\t\t{\n\t\t\tif (ShouldPlayWalk(useLoc))\n\t\t\t\tPlayRunning();\n\t\t\tMoveTo(useLoc, MaxDesiredSpeed);\n\t\t}\n\t}\n\nTurnToLocation:\n\tAcceleration = vect(0,0,0);\n\tPlayTurning();\n\tif ((SeekType == SEEKTYPE_Guess) && bSeekLocation)\n\t\tdestLoc = Location + Vector(Rotation+(rot(0,1,0)*(Rand(16384)-8192)))*1000;\n\tif (bCanTurnHead)\n\t{\n\t\tSleep(0);  // needed to turn head\n\t\tLookAtVector(destLoc, true, false, true);\n\t\tTurnTo(Vector(DesiredRotation)*1000+Location);\n\t}\n\telse\n\t\tTurnTo(destLoc);\n\tbSeekLocation = false;\n\tbInterruptSeek = false;\n\n\tPlayWaiting();\n\tSleep(FRand()*1.5+3.0);\n\nLookAround:\n\tif (bCanTurnHead)\n\t{\n\t\tif (FRand() < 0.5)\n\t\t{\n\t\t\tif (!bSeekLocation)\n\t\t\t{\n\t\t\t\tPlayTurnHead(LOOK_Left, 1.0, 1.0);\n\t\t\t\tSleep(1.0);\n\t\t\t}\n\t\t\tif (!bSeekLocation)\n\t\t\t{\n\t\t\t\tPlayTurnHead(LOOK_Forward, 1.0, 1.0);\n\t\t\t\tSleep(0.5);\n\t\t\t}\n\t\t\tif (!bSeekLocation)\n\t\t\t{\n\t\t\t\tPlayTurnHead(LOOK_Right, 1.0, 1.0);\n\t\t\t\tSleep(1.0);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (!bSeekLocation)\n\t\t\t{\n\t\t\t\tPlayTurnHead(LOOK_Right, 1.0, 1.0);\n\t\t\t\tSleep(1.0);\n\t\t\t}\n\t\t\tif (!bSeekLocation)\n\t\t\t{\n\t\t\t\tPlayTurnHead(LOOK_Forward, 1.0, 1.0);\n\t\t\t\tSleep(0.5);\n\t\t\t}\n\t\t\tif (!bSeekLocation)\n\t\t\t{\n\t\t\t\tPlayTurnHead(LOOK_Left, 1.0, 1.0);\n\t\t\t\tSleep(1.0);\n\t\t\t}\n\t\t}\n\t\tPlayTurnHead(LOOK_Forward, 1.0, 1.0);\n\t\tSleep(0.5);\n\t\tStopBlendAnims();\n\t}\n\telse\n\t{\n\t\tif (!bSeekLocation)\n\t\t\tSleep(1.0);\n\t}\n\nFindAnotherPlace:\n\tSeekLevel--;\n\tif (PickDestination())\n\t\tGoto('GoToLocation');\n\nDoneSeek:\n\tif (bSeekPostCombat)\n\t\tPlayTargetLostSound();\n\telse\n\t\tPlaySearchGiveUpSound();\n\tbSeekPostCombat = false;\n\tSeekPawn = None;\n\tif (Orders != 'Seeking')\n\t\tFollowOrders();\n\telse\n\t\tGotoState('Wandering');\n\nContinueSeek:\nContinueFromDoor:\n\tFinishAnim();\n\tGoto('FindAnotherPlace');\n\n}\n\nState Fleeing\n{\n\t\t\tignores bump, frob;\n\tfunction ReactToInjury(Pawn instigatedBy, Name damageType, EHitLocation hitPos)\n\t{\n\t\tlocal Name currentState;\n\t\tlocal Pawn oldEnemy;\n\t\tlocal name newLabel;\n\t\tlocal bool bHateThisInjury;\n\t\tlocal bool bFearThisInjury;\n\t\tlocal bool bAttack;\n\n\t\tif ((health > 0) && (bLookingForInjury || bLookingForIndirectInjury))\n\t\t{\n\t\t\tcurrentState = GetStateName();\n\n\t\t\tbHateThisInjury = ShouldReactToInjuryType(damageType, bHateInjury, bHateIndirectInjury);\n\t\t\tbFearThisInjury = ShouldReactToInjuryType(damageType, bFearInjury, bFearIndirectInjury);\n\n\t\t\tif (bHateThisInjury)\n\t\t\t\tIncreaseAgitation(instigatedBy);\n\t\t\tif (bFearThisInjury)\n\t\t\t\tIncreaseFear(instigatedBy, 2.0);\n\n\t\t\toldEnemy = Enemy;\n\n\t\t\tbAttack = false;\n\t\t\tif (SetEnemy(instigatedBy))\n\t\t\t{\n\t\t\t\tif (!ShouldFlee())\n\t\t\t\t{\n\t\t\t\t\tSwitchToBestWeapon();\n\t\t\t\t\tif (Weapon != None)\n\t\t\t\t\t\tbAttack = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t\tSetEnemy(instigatedBy, , true);\n\n\t\t\tif (bAttack)\n\t\t\t{\n\t\t\t\tSetDistressTimer();\n\t\t\t\tSetNextState('HandlingEnemy');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tSetDistressTimer();\n\t\t\t\tif (oldEnemy != Enemy)\n\t\t\t\t\tnewLabel = 'Begin';\n\t\t\t\telse\n\t\t\t\t\tnewLabel = 'ContinueFlee';\n\t\t\t\tSetNextState('Fleeing', newLabel);\n\t\t\t}\n\t\t\tGotoDisabledState(damageType, hitPos);\n\t\t}\n\t}\n\n\tfunction SetFall()\n\t{\n\t\tStartFalling('Fleeing', 'ContinueFlee');\n\t}\n\n\tfunction FinishFleeing()\n\t{\n\t\tif (bLeaveAfterFleeing)\n\t\t\tGotoState('Wandering');\n\t\telse\n\t\t\tFollowOrders();\n\t}\n\n\tfunction bool InSeat(out vector newLoc)  // hack\n\t{\n\t\tlocal Seat curSeat;\n\t\tlocal bool bSeat;\n\n\t\tbSeat = false;\n\t\tforeach RadiusActors(Class'Seat', curSeat, 200)\n\t\t{\n\t\t\tif (IsOverlapping(curSeat))\n\t\t\t{\n\t\t\t\tbSeat = true;\n\t\t\t\tnewLoc = curSeat.Location + vector(curSeat.Rotation+Rot(0, -16384, 0))*(CollisionRadius+curSeat.CollisionRadius+20);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn (bSeat);\n\t}\n\n\tfunction Tick(float deltaSeconds)\n\t{\n\t\tUpdateActorVisibility(Enemy, deltaSeconds, 1.0, false);\n\t\tif (IsValidEnemy(Enemy))\n\t\t{\n\t\t\tif (EnemyLastSeen > FearSustainTime)\n\t\t\t\tFinishFleeing();\n\t\t}\n\t\telse if (!IsValidEnemy(Enemy, false))\n\t\t\tFinishFleeing();\n\t\telse if (!IsFearful())\n\t\t\tFinishFleeing();\n\t\tGlobal.Tick(deltaSeconds);\n\t}\n\n\tfunction HitWall(vector HitNormal, actor Wall)\n\t{\n\t\tif (Physics == PHYS_Falling)\n\t\t\treturn;\n\t\tGlobal.HitWall(HitNormal, Wall);\n\t\tCheckOpenDoor(HitNormal, Wall);\n\t}\n\t\n\tfunction AnimEnd()\n\t{\n\t\tPlayWaiting();\n\t}\n\n\tfunction PickDestination()\n\t{\n\t\tlocal HidePoint      hidePoint;\n\t\tlocal Actor          waypoint;\n\t\tlocal float          dist;\n\t\tlocal float          score;\n\t\tlocal Vector         vector1, vector2;\n\t\tlocal Rotator        rotator1;\n\t\tlocal float          tmpDist;\n\n\t\tlocal float          bestDist;\n\t\tlocal float          bestScore;\n\n\t\tlocal FleeCandidates candidates[5];\n\t\tlocal int            candidateCount;\n\t\tlocal int            maxCandidates;\n\n\t\tlocal float          maxDist;\n\t\tlocal int            openSlot;\n\t\tlocal float          maxScore;\n\t\tlocal int            i;\n\t\tlocal bool           bReplace;\n\n\t\tlocal float          angle;\n\t\tlocal float          magnitude;\n\t\tlocal int            iterations;\n\n\t\tlocal NearbyProjectileList projList;\n\t\tlocal bool                 bSuccess;\n\n\t\tmaxCandidates  = 3;  // must be <= size of candidates[] arrays\n\t\tmaxDist        = 10000;\n\n\t\t// Initialize the list of candidates\n\t\tfor (i=0; i<maxCandidates; i++)\n\t\t{\n\t\t\tcandidates[i].score = -1;\n\t\t\tcandidates[i].dist  = maxDist+1;\n\t\t}\n\t\tcandidateCount = 0;\n\n\t\tMoveTarget = None;\n\t\tdestPoint  = None;\n\n\t\tif (bAvoidHarm)\n\t\t{\n\t\t\tGetProjectileList(projList, Location);\n\t\t\tif (IsLocationDangerous(projList, Location))\n\t\t\t{\n\t\t\t\tvector1 = ComputeAwayVector(projList);\n\t\t\t\trotator1 = Rotator(vector1);\n\t\t\t\tif (AIDirectionReachable(Location, rotator1.Yaw, rotator1.Pitch, CollisionRadius+24, VSize(vector1), destLoc))\n\t\t\t\t\treturn;   // eck -- hack!!!\n\t\t\t}\n\t\t}\n\n\t\tif (Enemy != None)\n\t\t{\n\t\t\tforeach RadiusActors(Class'HidePoint', hidePoint, maxDist)\n\t\t\t{\n\t\t\t\t// Can the boogeyman see our hiding spot?\n\t\t\t\tif (!enemy.LineOfSightTo(hidePoint))\n\t\t\t\t{\n\t\t\t\t\t// More importantly, can we REACH our hiding spot?\n\t\t\t\t\twaypoint = GetNextWaypoint(hidePoint);\n\t\t\t\t\tif (waypoint != None)\n\t\t\t\t\t{\n\t\t\t\t\t\t// How far is it to the hiding place?\n\t\t\t\t\t\tdist = VSize(hidePoint.Location - Location);\n\n\t\t\t\t\t\t// Determine vectors to the waypoint and our enemy\n\t\t\t\t\t\tvector1 = enemy.Location - Location;\n\t\t\t\t\t\tvector2 = waypoint.Location - Location;\n\n\t\t\t\t\t\t// Strip out magnitudes from the vectors\n\t\t\t\t\t\ttmpDist = VSize(vector1);\n\t\t\t\t\t\tif (tmpDist > 0)\n\t\t\t\t\t\t\tvector1 /= tmpDist;\n\t\t\t\t\t\ttmpDist = VSize(vector2);\n\t\t\t\t\t\tif (tmpDist > 0)\n\t\t\t\t\t\t\tvector2 /= tmpDist;\n\n\t\t\t\t\t\t// Add them\n\t\t\t\t\t\tvector1 += vector2;\n\n\t\t\t\t\t\t// Compute a score (a function of angle)\n\t\t\t\t\t\tscore = VSize(vector1);\n\t\t\t\t\t\tscore = 4-(score*score);\n\n\t\t\t\t\t\t// Find an empty slot for this candidate\n\t\t\t\t\t\topenSlot  = -1;\n\t\t\t\t\t\tbestScore = score;\n\t\t\t\t\t\tbestDist  = dist;\n\n\t\t\t\t\t\tfor (i=0; i<maxCandidates; i++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Can we replace the candidate in this slot?\n\t\t\t\t\t\t\tif (bestScore > candidates[i].score)\n\t\t\t\t\t\t\t\tbReplace = TRUE;\n\t\t\t\t\t\t\telse if ((bestScore == candidates[i].score) &&\n\t\t\t\t\t\t\t         (bestDist < candidates[i].dist))\n\t\t\t\t\t\t\t\tbReplace = TRUE;\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tbReplace = FALSE;\n\t\t\t\t\t\t\tif (bReplace)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tbestScore = candidates[i].score;\n\t\t\t\t\t\t\t\tbestDist  = candidates[i].dist;\n\t\t\t\t\t\t\t\topenSlot = i;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// We found an open slot -- put our candidate here\n\t\t\t\t\t\tif (openSlot >= 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcandidates[openSlot].point    = hidePoint;\n\t\t\t\t\t\t\tcandidates[openSlot].waypoint = waypoint;\n\t\t\t\t\t\t\tcandidates[openSlot].location = waypoint.Location;\n\t\t\t\t\t\t\tcandidates[openSlot].score    = score;\n\t\t\t\t\t\t\tcandidates[openSlot].dist     = dist;\n\t\t\t\t\t\t\tif (candidateCount < maxCandidates)\n\t\t\t\t\t\t\t\tcandidateCount++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Any candidates?\n\t\t\tif (candidateCount > 0)\n\t\t\t{\n\t\t\t\t// Find a random candidate\n\t\t\t\t// (candidates moving AWAY from the enemy have a higher\n\t\t\t\t// probability of being chosen than candidates moving\n\t\t\t\t// TOWARDS the enemy)\n\n\t\t\t\tmaxScore = 0;\n\t\t\t\tfor (i=0; i<candidateCount; i++)\n\t\t\t\t\tmaxScore += candidates[i].score;\n\t\t\t\tscore = FRand() * maxScore;\n\t\t\t\tfor (i=0; i<candidateCount; i++)\n\t\t\t\t{\n\t\t\t\t\tscore -= candidates[i].score;\n\t\t\t\t\tif (score <= 0)\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tdestPoint  = candidates[i].point;\n\t\t\t\tMoveTarget = candidates[i].waypoint;\n\t\t\t\tdestLoc    = candidates[i].location;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\titerations = 4;\n\t\t\t\tmagnitude = 400*(FRand()*0.4+0.8);  // 400, +/-20%\n\t\t\t\trotator1 = Rotator(Location-Enemy.Location);\n\t\t\t\tif (!AIPickRandomDestination(100, magnitude, rotator1.Yaw, 0.6, rotator1.Pitch, 0.6, iterations,\n\t\t\t\t                             FRand()*0.4+0.35, destLoc))\n\t\t\t\t\tdestLoc = Location+(VRand()*1200);  // we give up\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\tdestLoc = Location+(VRand()*1200);  // we give up\n\t}\n\tfunction bool FireIfClearShot()\n    {\n\t\tLog(\"This shouldn't be called by this actor! (\"$Self$\")\");\n\t\treturn false;\n    }\n\tfunction BeginState()\n\t{\n\t\tStandUp();\n\t\tDisable('AnimEnd');\n\t\t//Disable('Bump');\n\t\tBlockReactions();\n\t\tif (!bCower)\n\t\t\tbCanConverse = False;\n\t\tbStasis = False;\n\t\tSetupWeapon(false, true);\n\t\tSetDistress(true);\n\t\tEnemyReadiness = 1.0;\n\t\t//ReactionLevel  = 1.0;\n\t\tSeekPawn = None;\n\t\tEnableCheckDestLoc(false);\n\t}\n\n\tfunction EndState()\n\t{\n\t\tEnableCheckDestLoc(false);\n\t\tEnable('AnimEnd');\n\t\t//Enable('Bump');\n\t\tResetReactions();\n\t\tif (!bCower)\n\t\t\tbCanConverse = True;\n\t\tbStasis = True;\n\t}\n\nBegin:\n\t//EnemyLastSeen = 0;\n\tdestPoint = None;\n\nSurprise:\n\tif ((1.0-ReactionLevel)*SurprisePeriod < 0.25)\n\t\tGoto('Flee');\n\tAcceleration=vect(0,0,0);\n\tPlaySurpriseSound();\n\tPlayWaiting();\n\tSleep(FRand()*0.5);\n\tif (Enemy != None)\n\t\tTurnToward(Enemy);\n\tif (bCower)\n\t\tGoto('Flee');\n\tSleep(FRand()*0.5+0.5);\n\nFlee:\n\tif (bLeaveAfterFleeing)\n\t{\n\t\tbTransient = true;\n\t\tbDisappear = true;\n\t}\n\tif (bCower)\n\t\tGoto('Cower');\n\tWaitForLanding();\n\tPickDestination();\n\nMoving:\n\tSleep(0.0);\n\n\tif (enemy == None)\n\t{\n\t\tAcceleration = vect(0,0,0);\n\t\tPlayWaiting();\n\t\tSleep(2.0);\n\t\tFinishFleeing();\n\t}\n\n\t// Move from pathnode to pathnode until we get where we're going\n\tif (destPoint != None)\n\t{\n\t\tEnableCheckDestLoc(true);\n\t\twhile (MoveTarget != None)\n\t\t{\n\t\t\tif (ShouldPlayWalk(MoveTarget.Location))\n\t\t\t\tPlayRunning();\n\t\t\tMoveToward(MoveTarget, MaxDesiredSpeed);\n\t\t\tCheckDestLoc(MoveTarget.Location, true);\n\t\t\tif (enemy.bDetectable && enemy.AICanSee(destPoint, 1.0, false, false, false, true) > 0)\n\t\t\t{\n\t\t\t\tPickDestination();\n\t\t\t\tEnableCheckDestLoc(false);\n\t\t\t\tGoto('Moving');\n\t\t\t}\n\t\t\tif (MoveTarget == destPoint)\n\t\t\t\tbreak;\n\t\t\tMoveTarget = FindPathToward(destPoint);\n\t\t}\n\t\tEnableCheckDestLoc(false);\n\t}\n\telse if (PointReachable(destLoc))\n\t{\n\t\tif (ShouldPlayWalk(destLoc))\n\t\t\tPlayRunning();\n\t\tMoveTo(destLoc, MaxDesiredSpeed);\n\t\tif (enemy.bDetectable && enemy.AICanSee(Self, 1.0, false, false, true, true) > 0)\n\t\t{\n\t\t\tPickDestination();\n\t\t\tGoto('Moving');\n\t\t}\n\t}\n\telse\n\t{\n\t\tPickDestination();\n\t\tGoto('Moving');\n\t}\n\nPausing:\n\tAcceleration = vect(0,0,0);\n\n\tif (enemy != None)\n\t{\n\t\tif (HidePoint(destPoint) != None)\n\t\t{\n\t\t\tif (ShouldPlayTurn(Location + HidePoint(destPoint).faceDirection))\n\t\t\t\tPlayTurning();\n\t\t\tTurnTo(Location + HidePoint(destPoint).faceDirection);\n\t\t}\n\t\tEnable('AnimEnd');\n\t\tTweenToWaiting(0.2);\n\t\twhile (AICanSee(enemy, 1.0, false, false, true, true) <= 0)\n\t\t\tSleep(0.25);\n\t\tDisable('AnimEnd');\n\t\tFinishAnim();\n\t}\n\n\tGoto('Flee');\n\nCower:\n\tif (!InSeat(useLoc))\n\t\tGoto('CowerContinue');\n\n\tPlayRunning();\n\tMoveTo(useLoc, MaxDesiredSpeed);\n\nCowerContinue:\n\tAcceleration = vect(0,0,0);\n\tPlayCowerBegin();\n\tFinishAnim();\n\tPlayCowering();\n\n\t// behavior 3 - cower and occasionally make short runs\n\twhile (true)\n\t{\n\t\tSleep(FRand()*3+6);\n\n\t\tPlayCowerEnd();\n\t\tFinishAnim();\n\t\tif (AIPickRandomDestination(60, 150, 0, 0, 0, 0,\n\t\t                            2, FRand()*0.3+0.6, useLoc))\n\t\t{\n\t\t\tif (ShouldPlayWalk(useLoc))\n\t\t\t\tPlayRunning();\n\t\t\tMoveTo(useLoc, MaxDesiredSpeed);\n\t\t}\n\t\tPlayCowerBegin();\n\t\tFinishAnim();\n\t\tPlayCowering();\n\t}\n\n\t/* behavior 2 - cower forever\n\t// don't stop cowering\n\twhile (true)\n\t\tSleep(1.0);\n\t*/\n\n\t/* behavior 1 - cower only when enemy watching\n\tif (enemy != None)\n\t{\n\t\twhile (AICanSee(enemy, 1.0, false, false, true, true) > 0)\n\t\t\tSleep(0.25);\n\t}\n\tPlayCowerEnd();\n\tFinishAnim();\n\tGoto('Pausing');\n\t*/\n\nContinueFlee:\nContinueFromDoor:\n\tFinishAnim();\n\tPlayRunning();\n\tif (bCower)\n\t\tGoto('Cower');\n\telse\n\t\tGoto('Moving');\n\n}\n\nfunction bool FireIfClearShot()\n{\n  local DeusExWeapon dxWeapon;\n\n  dxWeapon = DeusExWeapon(Weapon);\n\n\n  //bReadyToFire doesn't seem to work right for Scripted Pawns\n  // So I set it and execute ReadyToFire() automatically.\n\n  dxWeapon.bReadyToFire=false;\n  dxWeapon.ReadyToFire();\n\n  if (dxWeapon != None)\n  {\n\t   if ((dxWeapon.AIFireDelay > 0) && (FireTimer > 0))\n\t\t\treturn false;\n\t   else if (AICanShoot(enemy, true, true, 0.025))\n\t   {\n\n\t\t\t//Changed from Fire to ClientFire.\n\t\t\tWeapon.ClientFire(0);\n\t\t\tFireTimer = dxWeapon.AIFireDelay;\n\t\t\treturn true;\n\t   }\n\t   else\n\t\t   return false;\n\n  }\n  else\n\t  return false;\n}\n\ndefaultproperties\n{\n     Saymsg=\"I have nothing to say to you.\"\n     scoreCredits=50\n     SoundBossArmourBreak=Sound'DeusExSounds.Augmentation.CloakDown'\n     SoundBossArmourRestore=Sound'DeusExSounds.Augmentation.CloakUp'\n     bAimForHead=True\n     RaiseAlarm=RAISEALARM_Never\n     NameArticle=\"\"\n}\n",
            "name": "DXScriptedPawn.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "Saymsg=\"I have nothing to say to you.\"",
                    "scoreCredits=50",
                    "SoundBossArmourBreak=Sound'DeusExSounds.Augmentation.CloakDown'",
                    "SoundBossArmourRestore=Sound'DeusExSounds.Augmentation.CloakUp'",
                    "bAimForHead=True",
                    "RaiseAlarm=RAISEALARM_Never",
                    "NameArticle=\"\""
                ],
                "exec": [
                    "#exec obj load File=DeusExConAudioAIBarks.u"
                ],
                "extends": "ScriptedPawn",
                "functions": {
                    "AICanShoot": {
                        "body": "{\n\n\tif ( (Target == None) )\n\t{\n\t\treturn False;\n\t}\n\tif(DeusExPlayer(Target).bAdmin && bIgnoreAdmins)\n\t{\n\t\treturn False;\n\t}\n\tif ( Target.bIgnore )\n\t{\n\t\treturn False;\n\t}\n\tdxWeapon = DeusExWeapon(Weapon);\n\tif ( (dxWeapon == None) )\n\t{\n\t\treturn False;\n\t}\n\tif ( (bCheckReadiness && !(dxWeapon.bReadyToFire)) )\n\t{\n\t\treturn (rtfTimer > dxWeapon.reloadTime);\n\t}\n\treturn Super.AICanShoot(Target,bLeadTarget,False,throwAccuracy,bDiscountMinRange);\n}",
                        "locals": [
                            "local DeusExWeapon dxWeapon;"
                        ],
                        "modifiers": [],
                        "name": "AICanShoot",
                        "native": false,
                        "param": [
                            [
                                "Pawn",
                                "Target"
                            ],
                            [
                                "bool",
                                "bLeadTarget"
                            ],
                            [
                                "bool",
                                "bCheckReadiness"
                            ],
                            [
                                "optional",
                                "float",
                                "throwAccuracy"
                            ],
                            [
                                "optional",
                                "bool",
                                "bDiscountMinRange"
                            ]
                        ],
                        "return": "bool"
                    },
                    "AdjustJump": {
                        "body": "{\n\n\t\tvelZ = Velocity.Z;\n\t\tFullVel = Normal(Velocity) * GroundSpeed;\n\n\t\tIf (Location.Z > Destination.Z + CollisionHeight + 2 * MaxStepHeight)\n\t\t{\n\t\t\tVelocity = FullVel;\n\t\t\tVelocity.Z = velZ;\n\t\t\tVelocity = EAdjustJump();\n\t\t\tVelocity.Z = 0;\n\t\t\tif ( VSize(Velocity) < 0.9 * GroundSpeed )\n\t\t\t{\n\t\t\t\tVelocity.Z = velZ;\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tVelocity = FullVel;\n\t\tVelocity.Z = JumpZ + velZ;\n\t\tVelocity = EAdjustJump();\n\t}",
                        "locals": [
                            "local float velZ;",
                            "local vector FullVel;"
                        ],
                        "modifiers": [],
                        "name": "AdjustJump",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "AnimEnd": {
                        "body": "{\n\t\tPlayWaiting();\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "AnimEnd",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "BaseChange": {
                        "body": "{\n\n\t\tGlobal.BaseChange();\n\n\t\tif (Physics == PHYS_Walking)\n\t\t{\n\t\t\tminJumpZ = FMax(JumpZ, 150.0);\n\t\t\tbJustLanded = true;\n\t\t\tif (Health > 0)\n\t\t\t{\n\t\t\t\tif ((Velocity.Z < -0.8 * minJumpZ) || bUpAndOut)\n\t\t\t\t\tGotoState('FallingState', 'Landed');\n\t\t\t\telse if (Velocity.Z < -0.8 * JumpZ)\n\t\t\t\t\tGotoState('FallingState', 'FastLanded');\n\t\t\t\telse\n\t\t\t\t\tGotoState('FallingState', 'Done');\n\t\t\t}\n\t\t}\n\t}",
                        "locals": [
                            "local float minJumpZ;"
                        ],
                        "modifiers": [
                            "singular"
                        ],
                        "name": "BaseChange",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "BeginState": {
                        "body": "{\n\t\tStandUp();\n\t\tDisable('AnimEnd');\n\t\t//Disable('Bump');\n\t\tBlockReactions();\n\t\tif (!bCower)\n\t\t\tbCanConverse = False;\n\t\tbStasis = False;\n\t\tSetupWeapon(false, true);\n\t\tSetDistress(true);\n\t\tEnemyReadiness = 1.0;\n\t\t//ReactionLevel  = 1.0;\n\t\tSeekPawn = None;\n\t\tEnableCheckDestLoc(false);\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "BeginState",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "BossFX": {
                        "body": "{\n\t\t//bCollideActors=False;\n\t\tbBlockActors=False;\n\t\tPG = spawn(class'ProjectileGenerator',,,Location,rot(16384,0,0));\n\t\tPG.bRandomEject=True;\n\t\tPG.ProjectileClass = class'Tracer';\n\t\tPG.NumPerSpawn = 5;\n\t\tPG.CheckTime = 1;\n\t\tPG.Lifespan=4;\n}",
                        "locals": [
                            "local ProjectileGenerator PG;"
                        ],
                        "modifiers": [],
                        "name": "BossFX",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "BreakBossArmour": {
                        "body": "{\n\tif(tBossArmourDown != \"\")\n\t\tRadiusMSG(tBossArmourDown);\n\tif(SoundBossArmourBreak != None)\n\t\tPlaySound(SoundBossArmourBreak, SLOT_None,,, 2048);\n\tif(sBossArmourDown != None)\n\t\tPlaySound(sBossArmourDown, SLOT_None,,, 2048);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "BreakBossArmour",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Bump": {
                        "body": "{\n\t\tif (bAcceptBump)\n\t\t{\n\t\t\t// If we get bumped by another actor while we wait, start wandering again\n\t\t\tbAcceptBump = False;\n\t\t\tDisable('AnimEnd');\n\t\t\tGotoState('Wandering', 'Wander');\n\t\t}\n\n\t\t// Handle conversations, if need be\n\t\tGlobal.Bump(bumper);\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Bump",
                        "native": false,
                        "param": [
                            [
                                "actor",
                                "bumper"
                            ]
                        ],
                        "return": ""
                    },
                    "CheckAttack": {
                        "body": "{\n\n          oldEnemy = enemy;\n\n          bAllianceSwitch = false;\n          if (!IsValidEnemy(enemy) || (DeusExPlayer(Enemy).bAdmin && bIgnoreAdmins))\n          {\n               if (IsValidEnemy(enemy, false))\n                    bAllianceSwitch = true;\n               SetEnemy(None, 0, true);\n          }\n\n          if (enemy == None)\n          {\n               if (Orders == 'Attacking')\n               {\n                    FindOrderActor();\n                    SetEnemy(Pawn(OrderActor), 0, true);\n               }\n          }\n          if (ReadyForNewEnemy())\n               FindBestEnemy(false);\n          if (enemy == None)\n          {\n               Enemy = oldEnemy;  // hack\n               if (bPlaySound)\n               {\n                    if (bAllianceSwitch)\n                         PlayAllianceFriendlySound();\n                    else\n                         PlayAreaSecureSound();\n               }\n               Enemy = None;\n               if (Orders != 'Attacking')\n                    FollowOrders();\n               else\n                    GotoState('Wandering');\n               return;\n          }\n\n          SwitchToBestWeapon();\n          if (bCrouching && (CrouchTimer <= 0) && !ShouldCrouch())\n          {\n               EndCrouch();\n               TweenToShoot(0.15);\n          }\n          bCriticalDamage = False;\n          bOutOfAmmo      = False;\n          if (ShouldFlee())\n               bCriticalDamage = True;\n          else if (Weapon == None)\n               bOutOfAmmo = True;\n          else if (Weapon.ReloadCount > 0)\n          {\n               if (Weapon.AmmoType == None)\n                    bOutOfAmmo = True;\n               else if (Weapon.AmmoType.AmmoAmount < 1)\n                    bOutOfAmmo = True;\n          }\n          if (bCriticalDamage || bOutOfAmmo)\n          {\n               if (bPlaySound)\n               {\n                    if (bCriticalDamage)\n                         PlayCriticalDamageSound();\n                    else if (bOutOfAmmo)\n                         PlayOutOfAmmoSound();\n               }\n               if (RaiseAlarm == RAISEALARM_BeforeFleeing)\n                    GotoState('Alerting');\n               else\n                    GotoState('Fleeing');\n          }\n          else if (bPlaySound && (oldEnemy != Enemy))\n               PlayNewTargetSound();\n     }",
                        "locals": [
                            "local bool bCriticalDamage;",
                            "local bool bOutOfAmmo;",
                            "local Pawn oldEnemy;",
                            "local bool bAllianceSwitch;"
                        ],
                        "modifiers": [],
                        "name": "CheckAttack",
                        "native": false,
                        "param": [
                            [
                                "bool",
                                "bPlaySound"
                            ]
                        ],
                        "return": ""
                    },
                    "ConvMessage": {
                        "body": "{\n\n\tif((P.RootWindow != None) && (DeusExRootWindow(P.RootWindow).HUD != None))\n\t{\n\t\t_HUD = DeusExRootWindow(P.RootWindow).HUD.startDisplay;\n\t}\n\n\tif(_HUD != None) \n\t{ \n\t\t_HUD.shadowDist = 0; \n\t\t_HUD.Message = \"\"; \n\t\t_HUD.charIndex = 0; \n\t\t_HUD.winText.SetText(\"\"); \n\t\t_HUD.winTextShadow.SetText(\"\"); \n\t\t_HUD.displayTime = 5.50; \n\t\t_HUD.perCharDelay = 0.30; \n\t\t_HUD.AddMessage(Message); \n\t\t_HUD.StartMessage(); \n\t}\n}",
                        "locals": [
                            "local HUDMissionStartTextDisplay _HUD;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "ConvMessage",
                        "native": false,
                        "param": [
                            [
                                "DeusExPlayer",
                                "P"
                            ],
                            [
                                "string",
                                "Message"
                            ]
                        ],
                        "return": ""
                    },
                    "DrawBossShield": {
                        "body": "{\n\tshield = Spawn(class'BossArmourEffect', Self,, Location, Rotation);\n\tif (shield != None)\n\t{\n\t\tShield.DrawScale = Drawscale;\n\t\tshield.SetBase(Self);\n\t}\n}",
                        "locals": [
                            "local BossArmourEffect shield;"
                        ],
                        "modifiers": [],
                        "name": "DrawBossShield",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "DrawReturnShield": {
                        "body": "{\n\n\tshield = Spawn(class'ReturnArmourEffect', Self,, Location, Rotation);\n\tif (shield != None)\n\t{\n\t\tShield.DrawScale = Drawscale;\n\t\tshield.SetBase(Self);\n\t}\n}",
                        "locals": [
                            "local ReturnArmourEffect shield;"
                        ],
                        "modifiers": [],
                        "name": "DrawReturnShield",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "EndCrouch": {
                        "body": "{\n          if (bCrouching)\n          {\n\t\t  \t//\tif(bHasCloakX)\n\t\t\t\t//\tEnableCloak(False);\n               bCrouching = false;\n               ResetBasedPawnSize();\n          }\n     }",
                        "locals": [],
                        "modifiers": [],
                        "name": "EndCrouch",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "EndState": {
                        "body": "{\n\t\tEnableCheckDestLoc(false);\n\t\tEnable('AnimEnd');\n\t\t//Enable('Bump');\n\t\tResetReactions();\n\t\tif (!bCower)\n\t\t\tbCanConverse = True;\n\t\tbStasis = True;\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "EndState",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Explode": {
                        "body": "{\n\n\texplosionDamage = 100;\n\texplosionRadius = 256;\n\n\t// alert NPCs that I'm exploding\n\tAISendEvent('LoudNoise', EAITYPE_Audio, , explosionRadius*16);\n\tPlaySound(Sound'LargeExplosion1', SLOT_None,,, explosionRadius*16);\n\n\t// draw a pretty explosion\n\tlight = Spawn(class'ExplosionLight',,, Location);\n\tif (light != None)\n\t\tlight.size = 4;\n\n\tSpawn(class'ExplosionSmall',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionLarge',,, Location + 2*VRand()*CollisionRadius);\n\n\tsphere = Spawn(class'SphereEffect',,, Location);\n\tif (sphere != None)\n\t\tsphere.size = explosionRadius / 32.0;\n\n\t// spawn a mark\n\ts = spawn(class'ScorchMark', Base,, Location-vect(0,0,1)*CollisionHeight, Rotation+rot(16384,0,0));\n\tif (s != None)\n\t{\n\t\ts.DrawScale = FClamp(explosionDamage/30, 0.1, 3.0);\n\t\ts.ReattachDecal();\n\t}\n\n\t// spawn some rocks and flesh fragments\n\tfor (i=0; i<explosionDamage/6; i++)\n\t{\n\t\tif (FRand() < 0.3)\n\t\t\tspawn(class'Rockchip',,,Location);\n\t\telse\n\t\t\tspawn(class'FleshFragment',,,Location);\n\t}\n\tPlayDyingSound();\n\tHurtRadius(explosionDamage, explosionRadius, 'Exploded', explosionDamage*100, Location);\n\t\tif(bPhatLewt)\n\t\t{\n\t\t\tSpawn(Lewt,,,Location);\n\t\t}\n}",
                        "locals": [
                            "local SphereEffect sphere;",
                            "local ScorchMark s;",
                            "local ExplosionLight light;",
                            "local int i;",
                            "local float explosionDamage;",
                            "local float explosionRadius;"
                        ],
                        "modifiers": [],
                        "name": "Explode",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Explode2": {
                        "body": "{\n\n\texplosionDamage = 200;\n\texplosionRadius = 300;\n\n\t// alert NPCs that I'm exploding\n\tAISendEvent('LoudNoise', EAITYPE_Audio, , explosionRadius*16);\n\tPlaySound(Sound'LargeExplosion1', SLOT_None,,, explosionRadius*16);\n\n\t// draw a pretty explosion\n\tlight = Spawn(class'ExplosionLight',,, Location);\n\tif (light != None)\n\t\tlight.size = 4;\n\n\tSpawn(class'ExplosionSmall',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionLarge',,, Location + 2*VRand()*CollisionRadius);\n\n\tsphere = Spawn(class'SphereEffect',,, Location);\n\tif (sphere != None)\n\t\tsphere.size = explosionRadius / 32.0;\n\n\t// spawn a mark\n\ts = spawn(class'ScorchMark', Base,, Location-vect(0,0,1)*CollisionHeight, Rotation+rot(16384,0,0));\n\tif (s != None)\n\t{\n\t\ts.DrawScale = FClamp(explosionDamage/30, 0.1, 3.0);\n\t\ts.ReattachDecal();\n\t}\n\n\t// spawn some rocks and flesh fragments\n\tfor (i=0; i<explosionDamage/6; i++)\n\t{\n\t\tif (FRand() < 0.3)\n\t\t\tspawn(class'Rockchip',,,Location);\n\t\telse\n\t\t\tspawn(class'FleshFragment',,,Location);\n\t}\n\tPlayDyingSound();\n\tHurtRadius(explosionDamage, explosionRadius, 'Exploded', explosionDamage*100, Location);\n\t\t\n\t\tif(bPhatLewt)\n\t\t{\n\t\t\tSpawn(Lewt,,,Location);\n\t\t}\n}",
                        "locals": [
                            "local SphereEffect sphere;",
                            "local ScorchMark s;",
                            "local ExplosionLight light;",
                            "local int i;",
                            "local float explosionDamage;",
                            "local float explosionRadius;"
                        ],
                        "modifiers": [],
                        "name": "Explode2",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ExplodeBot": {
                        "body": "{\n\n\texplosionDamage = 100;\n\texplosionRadius = 256;\n\n\t// alert NPCs that I'm exploding\n\tAISendEvent('LoudNoise', EAITYPE_Audio, , explosionRadius*16);\n\tPlaySound(Sound'LargeExplosion1', SLOT_None,,, explosionRadius*16);\n\n\t// draw a pretty explosion\n\tlight = Spawn(class'ExplosionLight',,, Location);\n\tif (light != None)\n\t\tlight.size = 4;\n\n\tSpawn(class'ExplosionSmall',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionLarge',,, Location + 2*VRand()*CollisionRadius);\n\n\tsphere = Spawn(class'SphereEffect',,, Location);\n\tif (sphere != None)\n\t\tsphere.size = explosionRadius / 32.0;\n\n\t// spawn a mark\n\ts = spawn(class'ScorchMark', Base,, Location-vect(0,0,1)*CollisionHeight, Rotation+rot(16384,0,0));\n\tif (s != None)\n\t{\n\t\ts.DrawScale = FClamp(explosionDamage/30, 0.1, 3.0);\n\t\ts.ReattachDecal();\n\t}\n\t\n\tPlayDyingSound();\n\tHurtRadius(explosionDamage, explosionRadius, 'Exploded', explosionDamage*100, Location);\n\t\tif(bPhatLewt)\n\t\t{\n\t\t\tSpawn(Lewt,,,Location);\n\t\t}\n}",
                        "locals": [
                            "local SphereEffect sphere;",
                            "local ScorchMark s;",
                            "local ExplosionLight light;",
                            "local int i;",
                            "local float explosionDamage;",
                            "local float explosionRadius;"
                        ],
                        "modifiers": [],
                        "name": "ExplodeBot",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ExtSay": {
                        "body": "{\n\tforeach allActors(class'DeusExPlayer',DXP)\n\t{\n\t\tDXP.ClientMessage(familiarName$\": \"$str, 'Say');\n\t}\n}",
                        "locals": [
                            "local DeusExPlayer DXP;"
                        ],
                        "modifiers": [],
                        "name": "ExtSay",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "Str"
                            ]
                        ],
                        "return": ""
                    },
                    "FindBestSeat": {
                        "body": "{\n\n\t\tif (bUseFirstSeatOnly && bSeatHackUsed)\n\t\t{\n\t\t\tbestSeat = SeatHack;  // use the seat hack\n\t\t\tbestSlot = -1;\n\t\t\tif (!IsSeatValid(bestSeat))\n\t\t\t\tbestSeat = None;\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (GetNextWaypoint(bestSeat) == None)\n\t\t\t\t\tbestSeat = None;\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tbestSlot = FindBestSlot(bestSeat, curDist);\n\t\t\t\t\tif (bestSlot < 0)\n\t\t\t\t\t\tbestSeat = None;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbestSeat = Seat(OrderActor);  // try the ordered seat first\n\t\t\tif (bestSeat != None)\n\t\t\t{\n\t\t\t\tif (!IsSeatValid(OrderActor))\n\t\t\t\t\tbestSeat = None;\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (GetNextWaypoint(bestSeat) == None)\n\t\t\t\t\t\tbestSeat = None;\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tbestSlot = FindBestSlot(bestSeat, curDist);\n\t\t\t\t\t\tif (bestSlot < 0)\n\t\t\t\t\t\t\tbestSeat = None;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (bestSeat == None)\n\t\t\t{\n\t\t\t\tbestDist = 10001;\n\t\t\t\tbestSlot = -1;\n\t\t\t\tforeach RadiusActors(Class'Seat', curSeat, 10000)\n\t\t\t\t{\n\t\t\t\t\tif (IsSeatValid(curSeat))\n\t\t\t\t\t{\n\t\t\t\t\t\tcurSlot = FindBestSlot(curSeat, curDist);\n\t\t\t\t\t\tif (curSlot >= 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (bestDist > curDist)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (GetNextWaypoint(curSeat) != None)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tbestDist = curDist;\n\t\t\t\t\t\t\t\t\tbestSeat = curSeat;\n\t\t\t\t\t\t\t\t\tbestSlot = curSlot;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (bestSeat != None)\n\t\t{\n\t\t\tbestSeat.sittingActor[bestSlot] = self;\n\t\t\tSeatLocation       = bestSeat.Location;\n\t\t\tbSeatLocationValid = true;\n\t\t}\n\t\telse\n\t\t\tbSeatLocationValid = false;\n\n\t\tif (bUseFirstSeatOnly && !bSeatHackUsed)\n\t\t{\n\t\t\tSeatHack      = bestSeat;\n\t\t\tbSeatHackUsed = true;\n\t\t}\n\n\t\tSeatActor = bestSeat;\n\t\tSeatSlot  = bestSlot;\n\t}",
                        "locals": [
                            "local Seat  curSeat;",
                            "local Seat  bestSeat;",
                            "local float curDist;",
                            "local float bestDist;",
                            "local int   curSlot;",
                            "local int   bestSlot;",
                            "local bool  bTry;"
                        ],
                        "modifiers": [],
                        "name": "FindBestSeat",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "FindBestSlot": {
                        "body": "{\n\n\t\tbestSlot = -1;\n\t\tbestDist = 100;\n\t\tif (!seatActor.Region.Zone.bWaterZone)\n\t\t{\n\t\t\tfor (i=0; i<seatActor.numSitPoints; i++)\n\t\t\t{\n\t\t\t\tif (seatActor.sittingActor[i] == None)\n\t\t\t\t{\n\t\t\t\t\tdist = VSize(SitPosition(seatActor, i) - Location);\n\t\t\t\t\tif ((bestSlot < 0) || (bestDist > dist))\n\t\t\t\t\t{\n\t\t\t\t\t\tbestDist = dist;\n\t\t\t\t\t\tbestSlot = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tslotDist = bestDist;\n\n\t\treturn (bestSlot);\n\t}",
                        "locals": [
                            "local int   bestSlot;",
                            "local float dist;",
                            "local float bestDist;",
                            "local int   i;"
                        ],
                        "modifiers": [],
                        "name": "FindBestSlot",
                        "native": false,
                        "param": [
                            [
                                "Seat",
                                "seatActor"
                            ],
                            [
                                "out",
                                "float",
                                "slotDist"
                            ]
                        ],
                        "return": "int"
                    },
                    "FinishFleeing": {
                        "body": "{\n\t\tif (bLeaveAfterFleeing)\n\t\t\tGotoState('Wandering');\n\t\telse\n\t\t\tFollowOrders();\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "FinishFleeing",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "FireIfClearShot": {
                        "body": "{\n\n  dxWeapon = DeusExWeapon(Weapon);\n\n\n  //bReadyToFire doesn't seem to work right for Scripted Pawns\n  // So I set it and execute ReadyToFire() automatically.\n\n  dxWeapon.bReadyToFire=false;\n  dxWeapon.ReadyToFire();\n\n  if (dxWeapon != None)\n  {\n\t   if ((dxWeapon.AIFireDelay > 0) && (FireTimer > 0))\n\t\t\treturn false;\n\t   else if (AICanShoot(enemy, true, true, 0.025))\n\t   {\n\n\t\t\t//Changed from Fire to ClientFire.\n\t\t\tWeapon.ClientFire(0);\n\t\t\tFireTimer = dxWeapon.AIFireDelay;\n\t\t\treturn true;\n\t   }\n\t   else\n\t\t   return false;\n\n  }\n  else\n\t  return false;\n}",
                        "locals": [
                            "local DeusExWeapon dxWeapon;"
                        ],
                        "modifiers": [],
                        "name": "FireIfClearShot",
                        "native": false,
                        "param": [],
                        "return": "bool"
                    },
                    "FollowSeatFallbackOrders": {
                        "body": "{\n\t\tFindBestSeat();\n\t\tif (IsSeatValid(SeatActor))\n\t\t\tGotoState('Sitting', 'Begin');\n\t\telse\n\t\t\tGotoState('Wandering');\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "FollowSeatFallbackOrders",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Frob": {
                        "body": "{\n\n\tif(P == None)\n\t{\n\t\tP=DeusExPlayer(Frobber);\n\t\tif(bUseChatList)\n\t\t{\n\t\t\tif(bRandomList)\n\t\t\t{\n\t\t\t\ti = Rand(5);\n\t\t\t\tLockPlayerCam(P);\n\t\t\t\tCamLock = P;\n\t\t\t\tTCBark(ListMSGs[i], P);\n\t\t\t\t\t\t\toldViewRotation = ViewRotation;\n\t\t\t\t\t\t\tLookAtActor(P, false, true, true, 0, 1.0);\n\t\t\t\t\t\t\tSetTimer(2.2, true);\n\t\t\t\t\t\t\t\t\t\t\tif(bPlaySound)\n\t\t\t\t\t\t\t\t\t\t\t\tPlaySound(ConvoSound, SLOT_None,2,,1024,);\t\t\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t\t\tif(i>5)\n\t\t\t\t\t\ti=0;\n\t\t\t\t\t\tLockPlayerCam(P);\n\t\t\t\t\t\t\tCamLock = P;\n\t\t\t\t\t\t\tTCBark(ListMSGs[i], P);\n\t\t\t\t\t\t\toldViewRotation = ViewRotation;\n\t\t\t\t\t\t\tLookAtActor(P, false, true, true, 0, 1.0);\n\t\t\t\t\t\t\tSetTimer(2.2, true);\n\t\t\t\t\t\t\t\t\t\t\tif(bPlaySound)\n\t\t\t\t\t\t\t\t\t\t\t\tPlaySound(ConvoSound, SLOT_None,2,,1024,);\t\t\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t\tLockPlayerCam(P);\n\t\t\t\tCamLock = P;\n\t\t\tTCBark(Saymsg, P);\n\t\t\toldViewRotation = ViewRotation;\n\t\t\tLookAtActor(P, false, true, true, 0, 1.0);\n\t\t\tSetTimer(2.2, true);\n\t\t\t\n\t\t\t\tif(bPlaySound)\n\t\t\t\t\tPlaySound(ConvoSound, SLOT_None,2,,1024,);\t\t\t\n\t\t}\t\t\n\t}\n\telse\n\t{\n\t\tif(P != DeusExPlayer(Frobber))\n\t\t{\n\t\t\tDeusExPlayer(Frobber).ClientMessage(familiarName$\" is busy talking to someone else...\");\n\t\t}\n\t}\n}",
                        "locals": [
                            "local string resoWut;",
                            "local int r;"
                        ],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    },
                    "GetDestinationPosition": {
                        "body": "{\n\n\t\tif (seatActor == None)\n\t\t\treturn (Location);\n\n\t\tseatRot = seatActor.Rotation + Rot(0, -16384, 0);\n\t\tseatRot.Pitch = 0;\n\t\tdestPos = seatActor.Location;\n\t\tdestPos += vect(0,0,1)*(CollisionHeight-seatActor.CollisionHeight);\n\t\tdestPos += Vector(seatRot)*(seatActor.CollisionRadius+CollisionRadius+extraDist);\n\n\t\treturn (destPos);\n\t}",
                        "locals": [
                            "local Rotator seatRot;",
                            "local Vector  destPos;"
                        ],
                        "modifiers": [],
                        "name": "GetDestinationPosition",
                        "native": false,
                        "param": [
                            [
                                "Seat",
                                "seatActor"
                            ],
                            [
                                "optional",
                                "float",
                                "extraDist"
                            ]
                        ],
                        "return": "vector"
                    },
                    "GetNextLocation": {
                        "body": "{\n\n\t\tif (bSeekLocation)\n\t\t{\n\t\t\tif (SeekType == SEEKTYPE_Guess)\n\t\t\t\tseekDistance = (200+FClamp(GroundSpeed*EnemyLastSeen*0.5, 0, 1000));\n\t\t\telse\n\t\t\t\tseekDistance = 300;\n\t\t}\n\t\telse\n\t\t\tseekDistance = 60;\n\n\t\tdist  = VSize(Location-destLoc);\n\t\tbDone = false;\n\t\tbLOS  = false;\n\n\t\tif (dist < seekDistance)\n\t\t{\n\t\t\tbLOS = true;\n\t\t\tforeach TraceVisibleActors(Class'Actor', hitActor, hitLocation, hitNormal,\n\t\t\t                           destLoc, Location+vect(0,0,1)*BaseEyeHeight)\n\t\t\t{\n\t\t\t\tif (hitActor != self)\n\t\t\t\t{\n\t\t\t\t\tif (hitActor == Level)\n\t\t\t\t\t\tbLOS = false;\n\t\t\t\t\telse if (IsPointInCylinder(hitActor, destLoc, 16, 16))\n\t\t\t\t\t\tbreak;\n\t\t\t\t\telse if (hitActor.bBlockSight && !hitActor.bHidden)\n\t\t\t\t\t\tbLOS = false;\n\t\t\t\t}\n\t\t\t\tif (!bLOS)\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (!bLOS)\n\t\t{\n\t\t\tif (PointReachable(destLoc))\n\t\t\t{\n\t\t\t\trotation = Rotator(destLoc - Location);\n\t\t\t\tif (seekDistance == 0)\n\t\t\t\t\tnextLoc = destLoc;\n\t\t\t\telse if (!AIDirectionReachable(destLoc, rotation.Yaw, rotation.Pitch, 0, seekDistance, nextLoc))\n\t\t\t\t\tbDone = true;\n\t\t\t\tif (!bDone && bDefendHome && !IsNearHome(nextLoc))\n\t\t\t\t\tbDone = true;\n\t\t\t\tif (!bDone)  // hack, because Unreal's movement code SUCKS\n\t\t\t\t{\n\t\t\t\t\tdiffVect = nextLoc - Location;\n\t\t\t\t\tif (Physics == PHYS_Walking)\n\t\t\t\t\t\tdiffVect *= vect(1,1,0);\n\t\t\t\t\tif (VSize(diffVect) < 20)\n\t\t\t\t\t\tbDone = true;\n\t\t\t\t\telse if (IsPointInCylinder(self, nextLoc, 10, 10))\n\t\t\t\t\t\tbDone = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tMoveTarget = FindPathTo(destLoc);\n\t\t\t\tif (MoveTarget == None)\n\t\t\t\t\tbDone = true;\n\t\t\t\telse if (bDefendHome && !IsNearHome(MoveTarget.Location))\n\t\t\t\t\tbDone = true;\n\t\t\t\telse\n\t\t\t\t\tnextLoc = MoveTarget.Location;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\tbDone = true;\n\n\t\treturn (!bDone);\n\t}",
                        "locals": [
                            "local float   dist;",
                            "local rotator rotation;",
                            "local bool    bDone;",
                            "local float   seekDistance;",
                            "local Actor   hitActor;",
                            "local vector  HitLocation, HitNormal;",
                            "local vector  diffVect;",
                            "local bool    bLOS;"
                        ],
                        "modifiers": [],
                        "name": "GetNextLocation",
                        "native": false,
                        "param": [
                            [
                                "out",
                                "vector",
                                "nextLoc"
                            ]
                        ],
                        "return": "bool"
                    },
                    "GetOvershootDestination": {
                        "body": "{\n\n\t\tif (focus <= 0)\n\t\t\tfocus = 0.6;\n\n\t\tyawCutoff = int(32768*focus);\n\t\tbestPoint = None;\n\t\tbestScore = 0;\n\n\t\tforeach ReachablePathnodes(Class'NavigationPoint', navPoint, None, distance)\n\t\t{\n\t\t\tif (distance < 1)\n\t\t\t\tdistance = 1;\n\t\t\trot = Rotator(navPoint.Location-Location);\n\t\t\tyaw = rot.Yaw + (16384*randomness);\n\t\t\tyaw = (yaw-Rotation.Yaw) & 0xFFFF;\n\t\t\tif (yaw > 32767)\n\t\t\t\tyaw  -= 65536;\n\t\t\tyaw = abs(yaw);\n\t\t\tif (yaw <= yawCutoff)\n\t\t\t{\n\t\t\t\tscore = yaw/distance;\n\t\t\t\tif ((bestPoint == None) || (score < bestScore))\n\t\t\t\t{\n\t\t\t\t\tbestPoint = navPoint;\n\t\t\t\t\tbestScore = score;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn bestPoint;\n\t}",
                        "locals": [
                            "local NavigationPoint navPoint, bestPoint;",
                            "local float           distance;",
                            "local float           score, bestScore;",
                            "local int             yaw;",
                            "local rotator         rot;",
                            "local float           yawCutoff;"
                        ],
                        "modifiers": [],
                        "name": "GetOvershootDestination",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "randomness"
                            ],
                            [
                                "optional",
                                "float",
                                "focus"
                            ]
                        ],
                        "return": "NavigationPoint"
                    },
                    "GoHome": {
                        "body": "{\n\t\tif (bUseHome && !IsNearHome(Location))\n\t\t{\n\t\t\tdestLoc   = HomeLoc;\n\t\t\tdestPoint = None;\n\t\t\tif (PointReachable(destLoc))\n\t\t\t\treturn true;\n\t\t\telse\n\t\t\t{\n\t\t\t\tMoveTarget = FindPathTo(destLoc);\n\t\t\t\tif (MoveTarget != None)\n\t\t\t\t\treturn true;\n\t\t\t\telse\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\treturn false;\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "GoHome",
                        "native": false,
                        "param": [],
                        "return": "bool"
                    },
                    "HandleSighting": {
                        "body": "{\n\t\tif ((EnemyLastSeen > 2.0) && IsValidEnemy(pawnSighted))\n\t\t{\n\t\t\tSetSeekLocation(pawnSighted, pawnSighted.Location, SEEKTYPE_Sight);\n\t\t\tdestLoc = LastSeenPos;\n\t\t\tif (bInterruptSeek)\n\t\t\t\tGotoState('Seeking', 'GoToLocation');\n\t\t}\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "HandleSighting",
                        "native": false,
                        "param": [
                            [
                                "Pawn",
                                "pawnSighted"
                            ]
                        ],
                        "return": ""
                    },
                    "HandleTurn": {
                        "body": "{\n\t\tif (Other == SeatActor)\n\t\t\treturn true;\n\t\telse\n\t\t\treturn Global.HandleTurn(Other);\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "HandleTurn",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Other"
                            ]
                        ],
                        "return": "bool"
                    },
                    "HasRA": {
                        "body": "{\n\n\tforeach AllActors(class'ReturnArmour', AA)\n\t\t\tif(AA.Owner == PP)\n\t\t\t\treturn AA;\n}",
                        "locals": [
                            "local ReturnArmour AA;"
                        ],
                        "modifiers": [],
                        "name": "HasRA",
                        "native": false,
                        "param": [
                            [
                                "PlayerPawn",
                                "PP"
                            ]
                        ],
                        "return": "ReturnArmour"
                    },
                    "HitWall": {
                        "body": "{\n\t\tif (Physics == PHYS_Falling)\n\t\t\treturn;\n\t\tGlobal.HitWall(HitNormal, Wall);\n\t\tCheckOpenDoor(HitNormal, Wall);\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "HitWall",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "HitNormal"
                            ],
                            [
                                "actor",
                                "Wall"
                            ]
                        ],
                        "return": ""
                    },
                    "IsHandToHand": {
                        "body": "{\n          if (Weapon != None)\n          {\n               if (DeusExWeapon(Weapon) != None)\n               {\n                    if (DeusExWeapon(Weapon).bHandToHand)\n                         return true;\n                    else\n                         return false;\n               }\n               else\n                    return false;\n          }\n          else\n               return false;\n     }",
                        "locals": [],
                        "modifiers": [],
                        "name": "IsHandToHand",
                        "native": false,
                        "param": [],
                        "return": "bool"
                    },
                    "IsIntersectingSeat": {
                        "body": "{\n\n\t\tbIntersect = false;\n\t\tif (SeatActor != None)\n\t\t\tbIntersect = IsOverlapping(SeatActor);\n\n\t\treturn (bIntersect);\n\t}",
                        "locals": [
                            "local bool   bIntersect;",
                            "local vector testVector;"
                        ],
                        "modifiers": [],
                        "name": "IsIntersectingSeat",
                        "native": false,
                        "param": [],
                        "return": "bool"
                    },
                    "Landed": {
                        "body": "{\n\n\t\tminJumpZ = FMax(JumpZ, 150.0);\n\n\t\tif ( (Velocity.Z < -0.8 * minJumpZ) || bUpAndOut)\n\t\t{\n\t\t\tPlayLanded(Velocity.Z);\n\t\t\tif (Velocity.Z < -700)\n\t\t\t{\n\t\t\t\tlegLocation = Location + vect(-1,0,-1);\t\t\t// damage left leg\n\t\t\t\tTakeDamage(-0.14 * (Velocity.Z + 700), Self, legLocation, vect(0,0,0), 'fell');\n\t\t\t\tlegLocation = Location + vect(1,0,-1);\t\t\t// damage right leg\n\t\t\t\tTakeDamage(-0.14 * (Velocity.Z + 700), Self, legLocation, vect(0,0,0), 'fell');\n\t\t\t\tlegLocation = Location + vect(0,0,1);\t\t\t// damage torso\n\t\t\t\tTakeDamage(-0.04 * (Velocity.Z + 700), Self, legLocation, vect(0,0,0), 'fell');\n\t\t\t}\n\t\t\tlandVol = Velocity.Z/JumpZ;\n\t\t\tlandVol = 0.005 * Mass * FMin(5, landVol * landVol);\n\t\t\tif ( !FootRegion.Zone.bWaterZone )\n\t\t\t\tPlaySound(Land, SLOT_Interact, FMin(20, landVol));\n\t\t}\n\t\telse if ( Velocity.Z < -0.8 * JumpZ )\n\t\t\tPlayLanded(Velocity.Z);\n\t}",
                        "locals": [
                            "local float landVol, minJumpZ;",
                            "local vector legLocation;"
                        ],
                        "modifiers": [],
                        "name": "Landed",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "HitNormal"
                            ]
                        ],
                        "return": ""
                    },
                    "LockPlayerCam": {
                        "body": "{\n\t\t\tdxp.bBehindView=True;\n\t\t\tdxp.ViewTarget = Self;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "LockPlayerCam",
                        "native": false,
                        "param": [
                            [
                                "deusexplayer",
                                "dxp"
                            ]
                        ],
                        "return": ""
                    },
                    "LockPlayersCam": {
                        "body": "{\nforeach AllActors(class'DeusExPlayer', DXP)\n{\n\t\t\tDXP.bBehindView=True;\n\t\t\tDXP.ViewTarget = Self;\n}\n}",
                        "locals": [
                            "local DeusExPlayer DXP;"
                        ],
                        "modifiers": [],
                        "name": "LockPlayersCam",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "MoveFallingBody": {
                        "body": "{\n\n\t\tif ((AnimRate > 0) && !IsA('Robot'))\n\t\t{\n\t\t\ttotalTime = 1.0/AnimRate;  // determine how long the anim lasts\n\t\t\tnumFrames = int((1.0/(1.0-AnimLast))+0.1);  // count frames (hack)\n\n\t\t\t// defaults\n\t\t\tmoveDir   = vect(0,0,0);\n\t\t\tstopTime  = 0.01;\n\n\t\t\tComputeFallDirection(totalTime, numFrames, moveDir, stopTime);\n\n\t\t\tspeed = VSize(moveDir)/stopTime;  // compute speed\n\n\t\t\t// Set variables necessary for movement when walking\n\t\t\tif (moveDir == vect(0,0,0))\n\t\t\t\tAcceleration = vect(0,0,0);\n\t\t\telse\n\t\t\t\tAcceleration = Normal(moveDir)*AccelRate;\n\t\t\tGroundSpeed  = speed;\n\t\t\tDesiredSpeed = 1.0;\n\t\t\tbIsWalking   = false;\n\t\t\tDeathTimer   = stopTime;\n\t\t}\n\t\telse\n\t\t\tAcceleration = vect(0,0,0);\n\t}",
                        "locals": [
                            "local Vector moveDir;",
                            "local float  totalTime;",
                            "local float  speed;",
                            "local float  stopTime;",
                            "local int    numFrames;"
                        ],
                        "modifiers": [],
                        "name": "MoveFallingBody",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PickDestination": {
                        "body": "{\n\n\n\n\n\n\n\t\tmaxCandidates  = 3;  // must be <= size of candidates[] arrays\n\t\tmaxDist        = 10000;\n\n\t\t// Initialize the list of candidates\n\t\tfor (i=0; i<maxCandidates; i++)\n\t\t{\n\t\t\tcandidates[i].score = -1;\n\t\t\tcandidates[i].dist  = maxDist+1;\n\t\t}\n\t\tcandidateCount = 0;\n\n\t\tMoveTarget = None;\n\t\tdestPoint  = None;\n\n\t\tif (bAvoidHarm)\n\t\t{\n\t\t\tGetProjectileList(projList, Location);\n\t\t\tif (IsLocationDangerous(projList, Location))\n\t\t\t{\n\t\t\t\tvector1 = ComputeAwayVector(projList);\n\t\t\t\trotator1 = Rotator(vector1);\n\t\t\t\tif (AIDirectionReachable(Location, rotator1.Yaw, rotator1.Pitch, CollisionRadius+24, VSize(vector1), destLoc))\n\t\t\t\t\treturn;   // eck -- hack!!!\n\t\t\t}\n\t\t}\n\n\t\tif (Enemy != None)\n\t\t{\n\t\t\tforeach RadiusActors(Class'HidePoint', hidePoint, maxDist)\n\t\t\t{\n\t\t\t\t// Can the boogeyman see our hiding spot?\n\t\t\t\tif (!enemy.LineOfSightTo(hidePoint))\n\t\t\t\t{\n\t\t\t\t\t// More importantly, can we REACH our hiding spot?\n\t\t\t\t\twaypoint = GetNextWaypoint(hidePoint);\n\t\t\t\t\tif (waypoint != None)\n\t\t\t\t\t{\n\t\t\t\t\t\t// How far is it to the hiding place?\n\t\t\t\t\t\tdist = VSize(hidePoint.Location - Location);\n\n\t\t\t\t\t\t// Determine vectors to the waypoint and our enemy\n\t\t\t\t\t\tvector1 = enemy.Location - Location;\n\t\t\t\t\t\tvector2 = waypoint.Location - Location;\n\n\t\t\t\t\t\t// Strip out magnitudes from the vectors\n\t\t\t\t\t\ttmpDist = VSize(vector1);\n\t\t\t\t\t\tif (tmpDist > 0)\n\t\t\t\t\t\t\tvector1 /= tmpDist;\n\t\t\t\t\t\ttmpDist = VSize(vector2);\n\t\t\t\t\t\tif (tmpDist > 0)\n\t\t\t\t\t\t\tvector2 /= tmpDist;\n\n\t\t\t\t\t\t// Add them\n\t\t\t\t\t\tvector1 += vector2;\n\n\t\t\t\t\t\t// Compute a score (a function of angle)\n\t\t\t\t\t\tscore = VSize(vector1);\n\t\t\t\t\t\tscore = 4-(score*score);\n\n\t\t\t\t\t\t// Find an empty slot for this candidate\n\t\t\t\t\t\topenSlot  = -1;\n\t\t\t\t\t\tbestScore = score;\n\t\t\t\t\t\tbestDist  = dist;\n\n\t\t\t\t\t\tfor (i=0; i<maxCandidates; i++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Can we replace the candidate in this slot?\n\t\t\t\t\t\t\tif (bestScore > candidates[i].score)\n\t\t\t\t\t\t\t\tbReplace = TRUE;\n\t\t\t\t\t\t\telse if ((bestScore == candidates[i].score) &&\n\t\t\t\t\t\t\t         (bestDist < candidates[i].dist))\n\t\t\t\t\t\t\t\tbReplace = TRUE;\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tbReplace = FALSE;\n\t\t\t\t\t\t\tif (bReplace)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tbestScore = candidates[i].score;\n\t\t\t\t\t\t\t\tbestDist  = candidates[i].dist;\n\t\t\t\t\t\t\t\topenSlot = i;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// We found an open slot -- put our candidate here\n\t\t\t\t\t\tif (openSlot >= 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcandidates[openSlot].point    = hidePoint;\n\t\t\t\t\t\t\tcandidates[openSlot].waypoint = waypoint;\n\t\t\t\t\t\t\tcandidates[openSlot].location = waypoint.Location;\n\t\t\t\t\t\t\tcandidates[openSlot].score    = score;\n\t\t\t\t\t\t\tcandidates[openSlot].dist     = dist;\n\t\t\t\t\t\t\tif (candidateCount < maxCandidates)\n\t\t\t\t\t\t\t\tcandidateCount++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Any candidates?\n\t\t\tif (candidateCount > 0)\n\t\t\t{\n\t\t\t\t// Find a random candidate\n\t\t\t\t// (candidates moving AWAY from the enemy have a higher\n\t\t\t\t// probability of being chosen than candidates moving\n\t\t\t\t// TOWARDS the enemy)\n\n\t\t\t\tmaxScore = 0;\n\t\t\t\tfor (i=0; i<candidateCount; i++)\n\t\t\t\t\tmaxScore += candidates[i].score;\n\t\t\t\tscore = FRand() * maxScore;\n\t\t\t\tfor (i=0; i<candidateCount; i++)\n\t\t\t\t{\n\t\t\t\t\tscore -= candidates[i].score;\n\t\t\t\t\tif (score <= 0)\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tdestPoint  = candidates[i].point;\n\t\t\t\tMoveTarget = candidates[i].waypoint;\n\t\t\t\tdestLoc    = candidates[i].location;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\titerations = 4;\n\t\t\t\tmagnitude = 400*(FRand()*0.4+0.8);  // 400, +/-20%\n\t\t\t\trotator1 = Rotator(Location-Enemy.Location);\n\t\t\t\tif (!AIPickRandomDestination(100, magnitude, rotator1.Yaw, 0.6, rotator1.Pitch, 0.6, iterations,\n\t\t\t\t                             FRand()*0.4+0.35, destLoc))\n\t\t\t\t\tdestLoc = Location+(VRand()*1200);  // we give up\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\tdestLoc = Location+(VRand()*1200);  // we give up\n\t}",
                        "locals": [
                            "local HidePoint      hidePoint;",
                            "local Actor          waypoint;",
                            "local float          dist;",
                            "local float          score;",
                            "local Vector         vector1, vector2;",
                            "local Rotator        rotator1;",
                            "local float          tmpDist;",
                            "local float          bestDist;",
                            "local float          bestScore;",
                            "local FleeCandidates candidates[5];",
                            "local int            candidateCount;",
                            "local int            maxCandidates;",
                            "local float          maxDist;",
                            "local int            openSlot;",
                            "local float          maxScore;",
                            "local int            i;",
                            "local bool           bReplace;",
                            "local float          angle;",
                            "local float          magnitude;",
                            "local int            iterations;",
                            "local NearbyProjectileList projList;",
                            "local bool                 bSuccess;"
                        ],
                        "modifiers": [],
                        "name": "PickDestination",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PickStartPoint": {
                        "body": "{\n\n\t\tnav = Level.NavigationPointList;\n\t\twhile (nav != None)\n\t\t{\n\t\t\tnav.visitedWeight = 0;\n\t\t\tnav = nav.nextNavigationPoint;\n\t\t}\n\n\t\tclosestNav  = None;\n\t\tclosestDist = 100000;\n\t\tnav = Level.NavigationPointList;\n\t\twhile (nav != None)\n\t\t{\n\t\t\tcurNav = PatrolPoint(nav);\n\t\t\tif ((curNav != None) && (curNav.Tag == OrderTag))\n\t\t\t{\n\t\t\t\twhile (curNav != None)\n\t\t\t\t{\n\t\t\t\t\tif (curNav.visitedWeight != 0)  // been here before\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcurDist = VSize(Location - curNav.Location);\n\t\t\t\t\tif ((closestNav == None) || (closestDist > curDist))\n\t\t\t\t\t{\n\t\t\t\t\t\tclosestNav  = curNav;\n\t\t\t\t\t\tclosestDist = curDist;\n\t\t\t\t\t}\n\t\t\t\t\tcurNav.visitedWeight = 1;\n\t\t\t\t\tcurNav = curNav.NextPatrolPoint;\n\t\t\t\t}\n\t\t\t}\n\t\t\tnav = nav.nextNavigationPoint;\n\t\t}\n\n\t\treturn (closestNav);\n\t}",
                        "locals": [
                            "local NavigationPoint nav;",
                            "local PatrolPoint     curNav;",
                            "local float           curDist;",
                            "local PatrolPoint     closestNav;",
                            "local float           closestDist;"
                        ],
                        "modifiers": [],
                        "name": "PickStartPoint",
                        "native": false,
                        "param": [],
                        "return": "PatrolPoint"
                    },
                    "PlayAreaSecureSound": {
                        "body": "{\n\t\n\ti = Rand(5);\n\tif(tAreaSecure != \"\")\n\t\tRadiusMSG(tAreaSecure);\n\t\n\tif(sAreaSecure[i] != None)\n\t\tPlaySound(sAreaSecure[i], SLOT_None,,, 2048);\n}",
                        "locals": [
                            "local int i;"
                        ],
                        "modifiers": [],
                        "name": "PlayAreaSecureSound",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PlayCriticalDamageSound": {
                        "body": "{\n\t\n\ti = Rand(5);\n\tif(tCriticalDamage != \"\")\n\t\tRadiusMSG(tCriticalDamage);\n\t\n\tif(sCriticalDamage[i] != None)\n\t\tPlaySound(sCriticalDamage[i], SLOT_None,,, 2048);\n}",
                        "locals": [
                            "local int i;"
                        ],
                        "modifiers": [],
                        "name": "PlayCriticalDamageSound",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PlayGoingForAlarmSound": {
                        "body": "{\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PlayGoingForAlarmSound",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PlayHuntingSound": {
                        "body": "{\n\t\n\ti = Rand(5);\n\tif(tHunting != \"\" && FRand() < 0.4)\n\t\tRadiusMSG(tHunting);\n\t\n\tif(sHunting[i] != None)\n\t\tPlaySound(sHunting[i], SLOT_None,,, 2048);\n}",
                        "locals": [
                            "local int i;"
                        ],
                        "modifiers": [],
                        "name": "PlayHuntingSound",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PlayScanningSound": {
                        "body": "{\n\t\n\ti = Rand(5);\n\tif(tScanning != \"\" && FRand() < 0.3)\n\t\tRadiusMSG(tScanning);\n\n\tif(sScanning[i] != None && FRand() < 0.3)\n\t\tPlaySound(sScanning[i], SLOT_None,,, 2048);\n}",
                        "locals": [
                            "local int i;"
                        ],
                        "modifiers": [],
                        "name": "PlayScanningSound",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PlayTargetAcquiredSound": {
                        "body": "{\n\t\n\ti = Rand(5);\n\tif(tTargetAcquired != \"\" && !bTempMute && FRand()<0.5)\n\t\tRadiusMSG(tTargetAcquired);\n\t\n\tif(sTargetAcquired[i] != None)\n\t\tPlaySound(sTargetAcquired[i], SLOT_None,,, 2048);\n\tbTempMute=false;\n}",
                        "locals": [
                            "local int i;"
                        ],
                        "modifiers": [],
                        "name": "PlayTargetAcquiredSound",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PlayTargetLostSound": {
                        "body": "{\n\t\n\ti = Rand(5);\n\tif(tTargetLost != \"\")\n\t\tRadiusMSG(tTargetLost);\n\t\n\tif(sTargetLost[i] != None)\n\t\tPlaySound(sTargetLost[i], SLOT_None,,, 2048);\n}",
                        "locals": [
                            "local int i;"
                        ],
                        "modifiers": [],
                        "name": "PlayTargetLostSound",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PostBeginPlay": {
                        "body": "{\n\t\n     Super.PostBeginPlay();\n     \n    if(bLimitSpawning)\n\t{\n\t\tforeach AllActors(class'DeusExPlayer', DXP)\n\t\t\tPlayers++;\n\t\t\n\t\tif(Players < MinPlayers)\n\t\t\tDestroy();\n\t}\n\t\t\n\tif(bHasADS)\n\t{\n\t\tmyAds = Spawn(class'BotADS');\n\t\tmyAds.P = Self;\n\t\tmyAds.AdsEnergy = AdsEnergy;\n\t\tmyAds.AdsUnlimited = AdsUnlimited;\n\t\tmyAds.SetTimer(0.1,True);\n\t}\n\t\n\tif(AllianceGroup == \"\")\n\t\tAllianceGroup = familiarName;\n\t\t\n\tif(AllyClass == None)\n\t\tAllyClass = Self.class;\n\n\n     if (bIsFemale)\n     {\n          HitSound1 = Sound'FemalePainMedium';\n          HitSound2 = Sound'FemalePainLarge';\n          Die = Sound'FemaleDeath';\n     }\n     \n\t Below = scoreCredits -= 100;\n\t\tif(Below < 0)\n\t\t\tBelow = 0;\n\t Higher = scoreCredits += 150;\n\t scoreCredits = RandRange(Below, Higher);\n\t \n\tCurrentBossArmour = BossArmour;\n\tCurrentReturnArmour = returnArmour;\n\tOrigHealth = Health;\n\t\n\tif(lOdds > 0)\n\t{\n\t\tif(Rand(100) <= lOdds)\n\t\t{\n\t\t\tbLegendary=True;\n\t\t\tCurrentBossArmour *= 2;\n\t\t\tCurrentReturnArmour *= 2;\n\t\t\tBossArmour *= 2;\n\t\t\tReturnArmour *= 2;\n\t\t\tHealth *= 2;\n\t\t\tHealthHead *= 2;\n\t\t\tHealthTorso *= 2;\n\t\t\tHealthlegLeft *= 2;\n\t\t\tHealthLegRight *= 2;\n\t\t\tHealthArmLeft *= 2;\n\t\t\tHealthArmRight *= 2;\n\t\t\tDrawscale *= 1.3;\n\t\t\tSetCollisionSize(CollisionRadius * 1.2, CollisionHeight * 1.2);\n\t\t}\n\t}\n}",
                        "locals": [
                            "local int Below, Higher, Players;",
                            "local DeusExPlayer DXP;"
                        ],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tif(MenuName == \"\")\n\t\tMenuName = FamiliarName;\n\n\tSuper.PreBeginPlay();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "RadiusMSG": {
                        "body": "{\n\t\n\tif(Delay <= 1)\n\t\tDelay = 8.0;\n\t\n\tif(BarkRange <= 1)\n\t\tBarkRange = 512;\n\n\t\n\tforeach RadiusActors(class'DeusExPlayer', DXP, BarkRange)\n\t{\n\t\tTCBA = Spawn(class'TCBarkActor');\n\t\tTCBA.Flagger = DXP;\n\t\tTCBA.pSender = self;\n\t\tTCBA.sMessage = BarkMessage;\n\t\tTCBA.fDelay = Delay;\n\t\tTCBA.SetTimer(0.1,false);\n\t}\n}",
                        "locals": [
                            "local DeusExPlayer dxp;",
                            "local DeusExRootWindow root;",
                            "local bool bRadius;",
                            "local TCBarkActor TCBA;"
                        ],
                        "modifiers": [],
                        "name": "RadiusMSG",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "BarkMessage"
                            ],
                            [
                                "optional",
                                "float",
                                "BarkRange"
                            ],
                            [
                                "optional",
                                "float",
                                "Delay"
                            ]
                        ],
                        "return": ""
                    },
                    "ReactToInjury": {
                        "body": "{\n\n\t\tif ((health > 0) && (bLookingForInjury || bLookingForIndirectInjury))\n\t\t{\n\t\t\tcurrentState = GetStateName();\n\n\t\t\tbHateThisInjury = ShouldReactToInjuryType(damageType, bHateInjury, bHateIndirectInjury);\n\t\t\tbFearThisInjury = ShouldReactToInjuryType(damageType, bFearInjury, bFearIndirectInjury);\n\n\t\t\tif (bHateThisInjury)\n\t\t\t\tIncreaseAgitation(instigatedBy);\n\t\t\tif (bFearThisInjury)\n\t\t\t\tIncreaseFear(instigatedBy, 2.0);\n\n\t\t\toldEnemy = Enemy;\n\n\t\t\tbAttack = false;\n\t\t\tif (SetEnemy(instigatedBy))\n\t\t\t{\n\t\t\t\tif (!ShouldFlee())\n\t\t\t\t{\n\t\t\t\t\tSwitchToBestWeapon();\n\t\t\t\t\tif (Weapon != None)\n\t\t\t\t\t\tbAttack = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t\tSetEnemy(instigatedBy, , true);\n\n\t\t\tif (bAttack)\n\t\t\t{\n\t\t\t\tSetDistressTimer();\n\t\t\t\tSetNextState('HandlingEnemy');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tSetDistressTimer();\n\t\t\t\tif (oldEnemy != Enemy)\n\t\t\t\t\tnewLabel = 'Begin';\n\t\t\t\telse\n\t\t\t\t\tnewLabel = 'ContinueFlee';\n\t\t\t\tSetNextState('Fleeing', newLabel);\n\t\t\t}\n\t\t\tGotoDisabledState(damageType, hitPos);\n\t\t}\n\t}",
                        "locals": [
                            "local Name currentState;",
                            "local Pawn oldEnemy;",
                            "local name newLabel;",
                            "local bool bHateThisInjury;",
                            "local bool bFearThisInjury;",
                            "local bool bAttack;"
                        ],
                        "modifiers": [],
                        "name": "ReactToInjury",
                        "native": false,
                        "param": [
                            [
                                "Pawn",
                                "instigatedBy"
                            ],
                            [
                                "Name",
                                "damageType"
                            ],
                            [
                                "EHitLocation",
                                "hitPos"
                            ]
                        ],
                        "return": ""
                    },
                    "ReadyForWeapon": {
                        "body": "{\n\n          bReady = false;\n          if (DeusExWeapon(weapon) != None)\n          {\n               if (DeusExWeapon(weapon).bReadyToFire)\n                    if (!IsWeaponReloading())\n                         bReady = true;\n          }\n          if (!bReady)\n               if (enemy == None)\n                    bReady = true;\n          if (!bReady)\n               if (!AICanShoot(enemy, true, false, 0.025))\n                    bReady = true;\n\n          return (bReady);\n     }",
                        "locals": [
                            "local bool bReady;"
                        ],
                        "modifiers": [],
                        "name": "ReadyForWeapon",
                        "native": false,
                        "param": [],
                        "return": "bool"
                    },
                    "ReleasePlayerCam": {
                        "body": "{\n\tif(CamLock != None)\n\t{\n\t\t\tCamLock.bBehindView=False;\n\t\t\tCamLock.ViewTarget = None;\n\t\t\tCamLock=None;\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "ReleasePlayerCam",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Reloading": {
                        "body": "{\n          Global.Reloading(reloadWeapon, reloadTime);\n          if (bReadyToReload)\n               if (IsWeaponReloading())\n                    if (!IsHandToHand())\n                         TweenToShoot(0);\n     }",
                        "locals": [],
                        "modifiers": [],
                        "name": "Reloading",
                        "native": false,
                        "param": [
                            [
                                "DeusExWeapon",
                                "reloadWeapon"
                            ],
                            [
                                "float",
                                "reloadTime"
                            ]
                        ],
                        "return": ""
                    },
                    "SetFall": {
                        "body": "{\n\t\tStartFalling('Fleeing', 'ContinueFlee');\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetFall",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ShouldCrouch": {
                        "body": "{\n          if (bCanCrouch && !Region.Zone.bWaterZone && !IsHandToHand() &&\n              ((enemy != None) && (VSize(enemy.Location-Location) > 300)) &&\n              ((DeusExWeapon(Weapon) == None) || DeusExWeapon(Weapon).bUseWhileCrouched))\n               return true;\n          else\n               return false;\n     }",
                        "locals": [],
                        "modifiers": [],
                        "name": "ShouldCrouch",
                        "native": false,
                        "param": [],
                        "return": "bool"
                    },
                    "SitPosition": {
                        "body": "{\n\n\t\tnewAssHeight = GetDefaultCollisionHeight() + BaseAssHeight;\n\t\tnewAssHeight = -(CollisionHeight - newAssHeight);\n\n\t\treturn ((seatActor.sitPoint[slot]>>seatActor.Rotation)+seatActor.Location+(vect(0,0,-1)*newAssHeight));\n\t}",
                        "locals": [
                            "local float newAssHeight;"
                        ],
                        "modifiers": [],
                        "name": "SitPosition",
                        "native": false,
                        "param": [
                            [
                                "Seat",
                                "seatActor"
                            ],
                            [
                                "int",
                                "slot"
                            ]
                        ],
                        "return": "Vector"
                    },
                    "SpawnCarcass": {
                        "body": "{\n\n\t// if we really got blown up good, gib us and don't display a carcass\n\tif ((Health < -100) && !IsA('Robot'))\n\t{\n\t\tsize = (CollisionRadius + CollisionHeight) / 2;\n\t\tif (size > 10.0)\n\t\t{\n\t\t\tfor (i=0; i<size/4.0; i++)\n\t\t\t{\n\t\t\t\tloc.X = (1-2*FRand()) * CollisionRadius;\n\t\t\t\tloc.Y = (1-2*FRand()) * CollisionRadius;\n\t\t\t\tloc.Z = (1-2*FRand()) * CollisionHeight;\n\t\t\t\tloc += Location;\n\t\t\t\tchunk = spawn(class'FleshFragment', None,, loc);\n\t\t\t\tif (chunk != None)\n\t\t\t\t{\n\t\t\t\t\tchunk.DrawScale = size / 25;\n\t\t\t\t\tchunk.SetCollisionSize(chunk.CollisionRadius / chunk.DrawScale, chunk.CollisionHeight / chunk.DrawScale);\n\t\t\t\t\tchunk.bFixedRotationDir = True;\n\t\t\t\t\tchunk.RotationRate = RotRand(False);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn None;\n\t}\n\n\t// spawn the carcass\n\tif(CarcassType == None)\n\t carc = Spawn(class'MPCarcass');\n\telse\n\t\tcarc = DeusExCarcass(Spawn(CarcassType));\n\tif(Mesh == LodMesh'DeusExCharacters.GM_DressShirt_B')\n\t{\n\t\t carc.Mesh2=LodMesh'DeusExCharacters.GM_DressShirt_B_CarcassB';\n\t\t carc.Mesh3=LodMesh'DeusExCharacters.GM_DressShirt_B_CarcassC';\n\t\t carc.Mesh=LodMesh'DeusExCharacters.GM_DressShirt_B_Carcass';\n\t}\n\tif(Mesh == LodMesh'DeusExCharacters.GM_Trench')\n\t{\n\t\t carc.Mesh2=LodMesh'DeusExCharacters.GM_Trench_CarcassB';\n\t\t carc.Mesh3=LodMesh'DeusExCharacters.GM_Trench_CarcassC';\n\t\t carc.Mesh=LodMesh'DeusExCharacters.GM_Trench_Carcass';\n\t}\n\tif(Mesh == LodMesh'DeusExCharacters.GFM_Trench')\n\t{\n\t\t carc.Mesh2=LodMesh'DeusExCharacters.GFM_Trench_CarcassB';\n\t\t carc.Mesh3=LodMesh'DeusExCharacters.GFM_Trench_CarcassC';\n\t\t carc.Mesh=LodMesh'DeusExCharacters.GFM_Trench_Carcass';\n\t}\n\tif(Mesh == LodMesh'DeusExCharacters.GM_DressShirt')\n\t{\n\t\t carc.Mesh2=LodMesh'DeusExCharacters.GM_DressShirt_CarcassB';\n\t\t carc.Mesh3=LodMesh'DeusExCharacters.GM_DressShirt_CarcassC';\n\t\t carc.Mesh=LodMesh'DeusExCharacters.GM_DressShirt_Carcass';\n\t}\n\tif(Mesh == LodMesh'DeusExCharacters.GFM_SuitSkirt')\n\t{\n\t\t carc.Mesh2=LodMesh'DeusExCharacters.GFM_SuitSkirt_CarcassB';\n\t\t carc.Mesh3=LodMesh'DeusExCharacters.GFM_SuitSkirt_CarcassC';\n\t\t carc.Mesh=LodMesh'DeusExCharacters.GFM_SuitSkirt_Carcass';\n\t}\n\tif(Mesh == LodMesh'DeusExCharacters.GFM_Dress')\n\t{\n\t\t carc.Mesh2=LodMesh'DeusExCharacters.GFM_Dress_CarcassB';\n\t\t carc.Mesh3=LodMesh'DeusExCharacters.GFM_Dress_CarcassC';\n\t\t carc.Mesh=LodMesh'DeusExCharacters.GFM_Dress_Carcass';\n\t}\n\tif(Mesh == LodMesh'DeusExCharacters.GM_Jumpsuit')\n\t{\n\t\t carc.Mesh2=LodMesh'DeusExCharacters.GM_Jumpsuit_CarcassB';\n\t\t carc.Mesh3=LodMesh'DeusExCharacters.GM_Jumpsuit_CarcassC';\n\t\t carc.Mesh=LodMesh'DeusExCharacters.GM_Jumpsuit_Carcass';\n\t}\n\tif(Mesh == LodMesh'DeusExCharacters.GM_suit')\n\t{\n\t\t carc.Mesh2=LodMesh'DeusExCharacters.GM_suit_CarcassB';\n\t\t carc.Mesh3=LodMesh'DeusExCharacters.GM_suit_CarcassC';\n\t\t carc.Mesh=LodMesh'DeusExCharacters.GM_suit_Carcass';\n\t}\n\t carc.Texture=Texture;\n     carc.MultiSkins[0]=MultiSkins[0];\n     carc.MultiSkins[1]=MultiSkins[1];\n     carc.MultiSkins[2]=MultiSkins[2];\n     carc.MultiSkins[3]=MultiSkins[3];\n     carc.MultiSkins[4]=MultiSkins[4];\n     carc.MultiSkins[5]=MultiSkins[5];\n     carc.MultiSkins[6]=MultiSkins[6];\n     carc.MultiSkins[7]=MultiSkins[7];\n\n\tif ( carc != None )\n\t{\n\t\tif (bStunned)\n\t\t\tcarc.bNotDead = True;\n\n\t\tcarc.Initfor(self);\n\n\t\t// move it down to the floor\n\t\tloc = Location;\n\t\tloc.z -= Default.CollisionHeight;\n\t\tloc.z += carc.Default.CollisionHeight;\n\t\tcarc.SetLocation(loc);\n\t\tcarc.Velocity = Velocity;\n\t\tcarc.Acceleration = Acceleration;\n\n\t\t\tif (Inventory != None)\n\t\t\t{\n\t\t\t\tdo\n\t\t\t\t{\n\t\t\t\t\titem = Inventory;\n\t\t\t\t\tnextItem = item.Inventory;\n\t\t\t\t\tDeleteInventory(item);\n\t\t\t\t\tif ((DeusExWeapon(item) != None) && (DeusExWeapon(item).bNativeAttack))\n\t\t\t\t\t\titem.Destroy();\n\t\t\t\t\telse\n\t\t\t\t\t\tcarc.AddInventory(item);\n\t\t\t\t\titem = nextItem;\n\t\t\t\t}\n\t\t\t\tuntil (item == None);\n\t\t\t}\n\t}\n\n\treturn carc;\n}",
                        "locals": [
                            "local DeusExCarcass carc;",
                            "local vector loc;",
                            "local Inventory item, nextItem;",
                            "local FleshFragment chunk;",
                            "local int i;",
                            "local float size;"
                        ],
                        "modifiers": [],
                        "name": "SpawnCarcass",
                        "native": false,
                        "param": [],
                        "return": "Carcass"
                    },
                    "StartCrouch": {
                        "body": "{\n          if (!bCrouching)\n          {\n\t\t\t//if(bHasCloakX)\n\t\t\t//EnableCloak(True);\n\t\t\t\t\n               bCrouching = true;\n               SetBasedPawnSize(CollisionRadius, GetCrouchHeight());\n               CrouchTimer = 1.0+FRand()*0.5;\n          }\n     }",
                        "locals": [],
                        "modifiers": [],
                        "name": "StartCrouch",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "TCBark": {
                        "body": "{\n\t\n\tif(Delay <= 1.0)\n\t\tDelay = 8.0;\n\t\t\n\t\tTCBA = Spawn(class'TCBarkActor');\n\t\tTCBA.Flagger = Target;\n\t\tTCBA.pSender = self;\n\t\tTCBA.sMessage = BarkMessage;\n\t\tTCBA.fDelay = Delay;\n\t\tTCBA.SetTimer(0.1,false);\n}",
                        "locals": [
                            "local DeusExPlayer dxp;",
                            "local DeusExRootWindow root;",
                            "local TCBarkActor TCBA;"
                        ],
                        "modifiers": [],
                        "name": "TCBark",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "BarkMessage"
                            ],
                            [
                                "DeusExPlayer",
                                "Target"
                            ],
                            [
                                "optional",
                                "float",
                                "Delay"
                            ]
                        ],
                        "return": ""
                    },
                    "Tick": {
                        "body": "{\n\t\tUpdateActorVisibility(Enemy, deltaSeconds, 1.0, false);\n\t\tif (IsValidEnemy(Enemy))\n\t\t{\n\t\t\tif (EnemyLastSeen > FearSustainTime)\n\t\t\t\tFinishFleeing();\n\t\t}\n\t\telse if (!IsValidEnemy(Enemy, false))\n\t\t\tFinishFleeing();\n\t\telse if (!IsFearful())\n\t\t\tFinishFleeing();\n\t\tGlobal.Tick(deltaSeconds);\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltaSeconds"
                            ]
                        ],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\tViewRotation = oldViewRotation;\n\tFollowOrders();\n\tReleasePlayerCam();\n\tp = none;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "UnLockPlayerCam": {
                        "body": "{\n\t\t\tdxp.bBehindView=False;\n\t\t\tdxp.ViewTarget = None;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "UnLockPlayerCam",
                        "native": false,
                        "param": [
                            [
                                "deusexplayer",
                                "dxp"
                            ]
                        ],
                        "return": ""
                    },
                    "UnLockPlayersCam": {
                        "body": "{\nforeach AllActors(class'DeusExPlayer', DXP)\n{\n\t\t\tDXP.bBehindView=False;\n\t\t\tDXP.ViewTarget = None;\n}\n}",
                        "locals": [
                            "local DeusExPlayer DXP;"
                        ],
                        "modifiers": [],
                        "name": "UnLockPlayersCam",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "UseMedkit": {
                        "body": "{\n\tif(Medkits > 0)\n\t{\n\t\tif(tMedkitUsed != \"\")\n\t\t\tRadiusMSG(tMedkitUsed);\n\t\t\n\t\tif(sMedkitUsed != None)\n\t\t\tPlaySound(sMedkitUsed, SLOT_None,,, 2048);\n\t\tHealth = OrigHealth;\n\t\tMedkits--;\n\t\tPlaySound(sound'MedicalHiss', SLOT_None,,, 256);\n\t}\n}",
                        "locals": [
                            "local int t;"
                        ],
                        "modifiers": [],
                        "name": "UseMedkit",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ZoneChange": {
                        "body": "{\n\t\tGlobal.ZoneChange(newZone);\n\t\tif (newZone.bWaterZone)\n\t\t\tGotoState('FallingState', 'Splash');\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "ZoneChange",
                        "native": false,
                        "param": [
                            [
                                "ZoneInfo",
                                "newZone"
                            ]
                        ],
                        "return": ""
                    },
                    "bCheckFace": {
                        "body": "{\n\n\tif ( Enemy == None )\n\t\treturn False;\n\n\tR = Rotation;\n\tv1 = Location;\n\tv2 = Enemy.Location;\n\tv1.Z = 0.0;\n\tv2.Z = 0.0;\n\tdist = VSize(v1 - v2);\n\treturn VSize(v1 + dist * vector(R) - v2) < 10;\n}",
                        "locals": [
                            "local Vector v1;",
                            "local Vector v2;",
                            "local Rotator R;",
                            "local float dist;"
                        ],
                        "modifiers": [],
                        "name": "bCheckFace",
                        "native": false,
                        "param": [],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 4478,
                "replication": "",
                "states": [],
                "variables": [
                    "var() bool bUseChatList;",
                    "var() bool bSpecial;",
                    "var() string Saymsg;",
                    "var() string ListMSGs[5];",
                    "var() bool bRandomList;",
                    "var DeusExPlayer p;",
                    "var rotator oldViewRotation;",
                    "var float rtfTimer;",
                    "var float autoTimer;",
                    "var int scoreCredits, scoreEXP;",
                    "var bool bKD;",
                    "var int i;",
                    "var() bool bPhatLewt;",
                    "var() class<actor> Lewt;",
                    "var DeusExPlayer CamLock;",
                    "var() sound ConvoSound;",
                    "var() bool bPlaySound;",
                    "var() bool bIgnoreAdmins;",
                    "var() bool bCanLink;",
                    "var() string AllianceGroup;",
                    "var() bool bHasCloakX;",
                    "var() bool bVoiced;",
                    "var() int Medkits;",
                    "var() int MedkitMinHealth;",
                    "var(Sounds) sound SoundBossArmourBreak, SoundBossArmourRestore;",
                    "var(Taunts) string tScanning, tTargetAcquired, tTargetLost, tCriticalDamage, tAreaSecure, tBossArmourDown, tBossArmourBack, tMedkitUsed, tCallingBackup, tRespondBackup, tHunting;",
                    "var(Taunts) sound sScanning[5], sTargetAcquired[3], sTargetLost[3], sCriticalDamage[3], sAreaSecure[3], sBossArmourDown, sBossArmourBack, sMedkitUsed, sCallingBackup[3], sRespondBackup[3], sHunting[3];",
                    "var(Boss) bool bBossArmour;",
                    "var(Boss) int BossArmour;",
                    "var int OrigHealth;",
                    "var int CurrentBossArmour;",
                    "var PlayerPawn LinkedPlayer;",
                    "var bool bLinked;",
                    "var bool bTempMute;",
                    "var() class<DXScriptedPawn> AllyClass;",
                    "var bool bCop;",
                    "var(Boss) bool bReturnArmour;",
                    "var(Boss) int ReturnArmour;",
                    "var int CurrentReturnArmour;",
                    "var bool bReturnArmourBroken, bBossArmourBroken;",
                    "var int TimeSinceBossBreak, TimeSinceReturnBreak;",
                    "var int RACharge, BACharge;",
                    "var bool bCanChargeRA, bCanChargeBA;",
                    "var(Criminal) bool bEnableCrim;",
                    "var(Criminal) bool bSteal;",
                    "var Pawn HuntedPlayer;",
                    "var bool bPHunting;",
                    "var() int lOdds;",
                    "var bool bLegendary;",
                    "var() bool bHasADS;",
                    "var BotADS myADS;",
                    "var() int AdsEnergy;",
                    "var() bool AdsUnlimited;",
                    "var DeusExPlayer FallbackTarget;",
                    "var(Spawning) bool bLimitSpawning;",
                    "var(Spawning) int MinPlayers, PercentageChanceOfSpawn;"
                ]
            }
        },
        "DartFixture.uc": {
            "body": "//=============================================================================\n// DartFlare.\n//=============================================================================\nclass DartFixture extends DeusExDecoration;\n\nfunction Frob(Actor Frobber, Inventory frobWith)\n{\n\tSuper.Frob(Frobber, frobWith);\n\tDestroy();\n}\n\nfunction BeginPlay()\n{\n    local int Random;\n\tRandom = rand(256);\n\tLightHue=Random;\n\tLightType=LT_Steady;\n}\n\ndefaultproperties\n{\n     bInvincible=True\n     bCanBeBase=True\n     ItemName=\"Dart Fixture\"\n     bPushable=False\n     bMovable=False\n     Mesh=LodMesh'DeusExItems.BioCell'\n     DrawScale=6.000000\n     bUnlit=True\n     CollisionRadius=28.000000\n     CollisionHeight=0.500000\n     LightEffect=LE_Disco\n     LightBrightness=255\n     LightSaturation=50\n     LightRadius=4\n}\n",
            "name": "DartFixture.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bInvincible=True",
                    "bCanBeBase=True",
                    "ItemName=\"Dart Fixture\"",
                    "bPushable=False",
                    "bMovable=False",
                    "Mesh=LodMesh'DeusExItems.BioCell'",
                    "DrawScale=6.000000",
                    "bUnlit=True",
                    "CollisionRadius=28.000000",
                    "CollisionHeight=0.500000",
                    "LightEffect=LE_Disco",
                    "LightBrightness=255",
                    "LightSaturation=50",
                    "LightRadius=4"
                ],
                "exec": [],
                "extends": "DeusExDecoration",
                "functions": {
                    "BeginPlay": {
                        "body": "{\n\tRandom = rand(256);\n\tLightHue=Random;\n\tLightType=LT_Steady;\n}",
                        "locals": [
                            "local int Random;"
                        ],
                        "modifiers": [],
                        "name": "BeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Frob": {
                        "body": "{\n\tSuper.Frob(Frobber, frobWith);\n\tDestroy();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 37,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "DartJumpPad.uc": {
            "body": "//=============================================================================\n// DartFlare.\n//=============================================================================\nclass DartJumpPad extends DeusExDecoration;\n\nvar int Velz;\n\n/*\nfunction Bump(actor Other)\n{\n\tif(deusExPlayer(Other) != None)\n\t{\n\tDeusExPlayer(Other).DoJump();\n\tDeusExPlayer(Other).Velocity = (normal(Location - Other.Location) * Velz);\n\tDeusExPlayer(Other).SetPhysics(Phys_Falling);\t\n\t}\n}*/\n\nsingular function SupportActor(Actor other)\n{\n\tif(deusExPlayer(Other) != None)\n\t{\n\tDeusExPlayer(Other).DoJump();\n\tDeusExPlayer(Other).Velocity = (normal(Location - Other.Location) * Velz);\n\tDeusExPlayer(Other).SetPhysics(Phys_Falling);\t\n\t}\n\tif(DeusExDecoration(Other) != None)\n\t{\n\tDeusExDecoration(Other).SetPhysics(Phys_Falling);\t\n\tDeusExDecoration(Other).Velocity = (normal(Location - Other.Location) * Velz);\n\t}\n\tif(ScriptedPawn(Other) != None)\n\t{\n\tScriptedPawn(Other).SetPhysics(Phys_Falling);\t\n\tScriptedPawn(Other).Velocity = (normal(Location - Other.Location) * Velz);\n\t}\n}\n\nfunction BeginPlay()\n{\n    local int Random, count;\n\tlocal DartJumpPad DJP;\n\tforeach AllActors(class'DartJumpPad',DJP)\n\t\tcount++;\n\t\t\n\tif(count < 21)\n\t{\n\tRandom = rand(256);\n\tLightHue=Random;\n\tLightType=LT_Steady;\n\t}\n\telse\n\t\tDestroy();\n}\n\ndefaultproperties\n{\n     bInvincible=True\n     bCanBeBase=True\n     ItemName=\"Jump Pad\"\n     bPushable=False\n     bMovable=False\n     Mesh=LodMesh'DeusExItems.BioCell'\n     DrawScale=6.000000\n     bUnlit=True\n     CollisionRadius=28.000000\n     CollisionHeight=0.500000\n     LightEffect=LE_Disco\n     LightBrightness=255\n     LightSaturation=50\n     LightRadius=4\n}\n",
            "name": "DartJumpPad.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bInvincible=True",
                    "bCanBeBase=True",
                    "ItemName=\"Jump Pad\"",
                    "bPushable=False",
                    "bMovable=False",
                    "Mesh=LodMesh'DeusExItems.BioCell'",
                    "DrawScale=6.000000",
                    "bUnlit=True",
                    "CollisionRadius=28.000000",
                    "CollisionHeight=0.500000",
                    "LightEffect=LE_Disco",
                    "LightBrightness=255",
                    "LightSaturation=50",
                    "LightRadius=4"
                ],
                "exec": [],
                "extends": "DeusExDecoration",
                "functions": {
                    "BeginPlay": {
                        "body": "{\n\tforeach AllActors(class'DartJumpPad',DJP)\n\t\tcount++;\n\t\t\n\tif(count < 21)\n\t{\n\tRandom = rand(256);\n\tLightHue=Random;\n\tLightType=LT_Steady;\n\t}\n\telse\n\t\tDestroy();\n}",
                        "locals": [
                            "local int Random, count;",
                            "local DartJumpPad DJP;"
                        ],
                        "modifiers": [],
                        "name": "BeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Bump": {
                        "body": "{\n\tif(deusExPlayer(Other) != None)\n\t{\n\tDeusExPlayer(Other).DoJump();\n\tDeusExPlayer(Other).Velocity = (normal(Location - Other.Location) * Velz);\n\tDeusExPlayer(Other).SetPhysics(Phys_Falling);\t\n\t}\n}*/",
                        "locals": [],
                        "modifiers": [],
                        "name": "Bump",
                        "native": false,
                        "param": [
                            [
                                "actor",
                                "Other"
                            ]
                        ],
                        "return": ""
                    },
                    "SupportActor": {
                        "body": "{\n\tif(deusExPlayer(Other) != None)\n\t{\n\tDeusExPlayer(Other).DoJump();\n\tDeusExPlayer(Other).Velocity = (normal(Location - Other.Location) * Velz);\n\tDeusExPlayer(Other).SetPhysics(Phys_Falling);\t\n\t}\n\tif(DeusExDecoration(Other) != None)\n\t{\n\tDeusExDecoration(Other).SetPhysics(Phys_Falling);\t\n\tDeusExDecoration(Other).Velocity = (normal(Location - Other.Location) * Velz);\n\t}\n\tif(ScriptedPawn(Other) != None)\n\t{\n\tScriptedPawn(Other).SetPhysics(Phys_Falling);\t\n\tScriptedPawn(Other).Velocity = (normal(Location - Other.Location) * Velz);\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "singular"
                        ],
                        "name": "SupportActor",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "other"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 73,
                "replication": "",
                "states": [],
                "variables": [
                    "var int Velz;"
                ]
            }
        },
        "DartLight.uc": {
            "body": "//=============================================================================\n// DartFlare.\n//=============================================================================\nclass DartLight extends Dart;\n\nvar float mpDamage;\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\tif ( Level.NetMode != NM_Standalone )\n\t\tDamage = mpDamage;\n}\n\nfunction BeginPlay()\n{\n    local int Random;\n\tRandom = rand(256);\n\tLightHue=Random;\n\tLightType=LT_Steady;\n}\n\ndefaultproperties\n{\n     mpDamage=10.000000\n     spawnAmmoClass=Class'DeusEx.AmmoDartFlare'\n     ItemName=\"Light Dart\"\n     Damage=5.000000\n     LifeSpan=120.000000\n     bUnlit=True\n     LightEffect=LE_Disco\n     LightBrightness=255\n     LightSaturation=50\n     LightRadius=20\n}\n",
            "name": "DartLight.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "mpDamage=10.000000",
                    "spawnAmmoClass=Class'DeusEx.AmmoDartFlare'",
                    "ItemName=\"Light Dart\"",
                    "Damage=5.000000",
                    "LifeSpan=120.000000",
                    "bUnlit=True",
                    "LightEffect=LE_Disco",
                    "LightBrightness=255",
                    "LightSaturation=50",
                    "LightRadius=20"
                ],
                "exec": [],
                "extends": "Dart",
                "functions": {
                    "BeginPlay": {
                        "body": "{\n\tRandom = rand(256);\n\tLightHue=Random;\n\tLightType=LT_Steady;\n}",
                        "locals": [
                            "local int Random;"
                        ],
                        "modifiers": [],
                        "name": "BeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\tif ( Level.NetMode != NM_Standalone )\n\t\tDamage = mpDamage;\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 37,
                "replication": "",
                "states": [],
                "variables": [
                    "var float mpDamage;"
                ]
            }
        },
        "DartUtil.uc": {
            "body": "//=============================================================================\n// DartFlare.\n//=============================================================================\nclass DartUtil extends Dart;\n\nvar float mpDamage;\nvar int Mode;\nvar Actor PullPawn;\nvar vector OwnerLocation, TargetLocation;\nvar int Grapvel;\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\tif ( Level.NetMode != NM_Standalone )\n\t\tDamage = mpDamage;\n}\n\nfunction Grapple(bool bPulling)\n{\n\tlocal vector loc, line, HitLocation, hitNormal;\n\tlocal Vector DVector;\n\tloc = Owner.Location;\n\tloc.Z += DeusExPlayer(Owner).BaseEyeHeight;\n\tline = Vector(DeusExPlayer(Owner).ViewRotation) * 90000;\n\n\tTrace(hitLocation, hitNormal, loc+line, loc, true);\n\tDVector = Owner.Location - Location;\n\n\tif(!bPulling)\n\t{\n\t\t\t\t\tDeusExPlayer(Owner).DoJump();\n\t\t\t\t\tDeusExPlayer(Owner).Velocity = (normal(Location - DeusExPlayer(Owner).Location) * GetVel());\n\t\t\t\t\tDeusExPlayer(Owner).SetPhysics(Phys_Falling);\t\n\t}\n\telse\n\t{\n\t\t\t\t\tPullPawn.Velocity.Z = 180;\n\t\t\t\t\tPullPawn.SetPhysics(Phys_Falling);\t\n\t\t\t\t\tPullPawn.Velocity = (normal(Owner.Location - PullPawn.Location) * GetVel());\n\n\t}\n}\n\nfunction int GetVel()\n{\nlocal WeaponUtilBow WUB;\n\tforeach AllActors(class'WeaponUtilBow', WUB)\n\t{\n\t\tif(WUB.Owner == Owner)\n\t\t{\n\t\t    return WUB.Grapvel;\n\t\t}\n\t}\n}\n\nfunction int GetJVel()\n{\nlocal WeaponUtilBow WUB;\n\tforeach AllActors(class'WeaponUtilBow', WUB)\n\t{\n\t\tif(WUB.Owner == Owner)\n\t\t{\n\t\t    return WUB.Jumpvel;\n\t\t}\n\t}\n}\n\nfunction BeginPlay()\n{\nlocal WeaponUtilBow WUB;\n\tforeach AllActors(class'WeaponUtilBow', WUB)\n\t{\n\t\tif(WUB.Owner == Owner)\n\t\t{\n\t\t    Mode = WUB.Mode;\n\t\t}\n\t}\n}\n\nfunction UseMode(int i)\n{\nlocal ClaymoreProj CP;\nlocal DartFixture DF;\nlocal DartJumpPad DP;\n\tif(i == 1)\n\t{\n\t\tSetCollision(false, false, false);\n\t\tbHidden=False;\n\t\tDF = Spawn(class'DartFixture',,,Location,Rotation);\n\t\tDF.bMovable=True;\n\t\tDF.SetLocation(Location);\n\t\tDF.SetRotation(Rotation);\n\t\tDF.bMovable=False;\n\t}\n\tif(i == 2)\n\t{\n\t\tSetCollision(false, false, false);\n\t\tbHidden=False;\n\t\tDP = Spawn(class'DartJumpPad',,,Location,Rotation);\n\t\tDP.bMovable=True;\n\t\tDP.SetLocation(Location);\n\t\tDP.SetRotation(Rotation);\n\t\tDP.bMovable=False;\n\t\tDP.Velz = GetJVel();\n\t}\n}\n\nauto simulated state Flying\n{\n\tsimulated function ProcessTouch (Actor Other, Vector HitLocation)\n\t{\n\t\tif (bStuck)\n\t\t\treturn;\n\n\t\tif ((Other != instigator) && (DeusExProjectile(Other) == None) &&\n\t\t\t(Other != Owner))\n\t\t{\n\t\t\tdamagee = Other;\n\t\t\tExplode(HitLocation, Normal(HitLocation-damagee.Location));\n\n         // DEUS_EX AMSD Spawn blood server side only\n         if (Role == ROLE_Authority)\n\t\t\t{\n            if (damagee.IsA('Pawn') && !damagee.IsA('Robot') && bBlood)\n               SpawnBlood(HitLocation, Normal(HitLocation-damagee.Location));\n\t\t\t   \n\t\t\t   if(Mode == 3)\n\t\t\t   {\n\t\t\t\tif(!damagee.bmovable)\n\t\t\t\t\tGrapple(False);\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\tPullPawn = Damagee;\n\t\t\t\tGrapple(True);\n\t\t\t\t}\n\t\t\t   }\n\t\t\t   else\n\t\t\t   {\n\t\t\t   \t\tUseMode(mode);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tsimulated function HitWall(vector HitNormal, actor Wall)\n\t{\n\t\tif (bStickToWall)\n\t\t{\n\t\t\tVelocity = vect(0,0,0);\n\t\t\tAcceleration = vect(0,0,0);\n\t\t\tSetPhysics(PHYS_None);\n\t\t\tbStuck = True;\n\n\t\t\t// MBCODE: Do this only on server side\n\t\t\tif ( Role == ROLE_Authority )\n\t\t\t{\n            if (Level.NetMode != NM_Standalone)\n               SetTimer(5.0,False);\n\n\t\t\t\tif (Wall.IsA('Mover'))\n\t\t\t\t{\n\t\t\t\t\tSetBase(Wall);\n\t\t\t\t\t\tif(Mode == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tWall.Trigger(Owner,DeusExPlayer(Owner));\n\t\t\t\t\t\t\tDestroy();\n\t\t\t\t\t\t}\n\t\t\t\t//\tWall.TakeDamage(Damage, Pawn(Owner), Wall.Location, MomentumTransfer*Normal(Velocity), damageType);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (Wall.IsA('BreakableGlass'))\n\t\t\tbDebris = False;\n\n\t\tSpawnEffects(Location, HitNormal, Wall);\n\t\t\t if(Mode == 3)\n\t\t\t   {\n\t\t\t\tGrapple(False);\n\t\t\t   }\n\t\t\t   else\n\t\t\t   {\n\t\t\t   \t\tUseMode(mode);\n\t\t\t\t}\n\t\tSuper.HitWall(HitNormal, Wall);\n\t}\n\tsimulated function Explode(vector HitLocation, vector HitNormal)\n\t{\n\t\tlocal bool bDestroy;\n\t\tlocal float rad;\n\n      // Reduce damage on nano exploded projectiles\n      if ((bAggressiveExploded) && (Level.NetMode != NM_Standalone))\n         Damage = Damage/6;\n\n\t\tbDestroy = false;\n\n\t\tif (bExplodes)\n\t\t{\n         //DEUS_EX AMSD Don't draw effects on dedicated server\n         if ((Level.NetMode != NM_DedicatedServer) || (Role < ROLE_Authority))\t\t\t\n            DrawExplosionEffects(HitLocation, HitNormal);\n\n\t\t\tGotoState('Exploding');\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Server side only\n\t\t\tif ( Role == ROLE_Authority )\n\t\t\t{\n\t\t\t\tif ((damagee != None)) // Don't even attempt damage with a tracer\n\t\t\t\t{\n\t\t\t\t\tif ( Level.NetMode != NM_Standalone )\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( damagee.IsA('DeusExPlayer') )\n\t\t\t\t\t\t\tDeusExPlayer(damagee).myProjKiller = Self;\n\t\t\t\t\t}\n\t\t\t\t\tdamagee.TakeDamage(Damage, Pawn(Owner), HitLocation, MomentumTransfer*Normal(Velocity), damageType);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!bStuck)\n\t\t\t\tbDestroy = true;\n\t\t}\n\n\t\trad = Max(blastRadius*24, 1024);\n\n\t\t// This needs to be outside the simulated call chain\n\t\tPlayImpactSound();\n\n      //DEUS_EX AMSD Only do these server side\n      if (Role == ROLE_Authority)\n      {\n         if (ImpactSound != None)\n         {\n            AISendEvent('LoudNoise', EAITYPE_Audio, 2.0, blastRadius*24);\n            if (bExplodes)\n               AISendEvent('WeaponFire', EAITYPE_Audio, 2.0, blastRadius*5);\n         }\n      }\n\t\tif (bDestroy)\n\t\t\tDestroy();\n\t}\n\tsimulated function BeginState()\n\t{\n\t\tlocal DeusExWeapon W;\n\n\t\tinitLoc = Location;\n\t\tinitDir = vector(Rotation);\t\n\t\tVelocity = speed*initDir;\n\t\tPlaySound(SpawnSound, SLOT_None);\n\t}\n}\n\ndefaultproperties\n{\n     mpDamage=10.000000\n     spawnAmmoClass=None\n     ItemName=\"Utility Dart\"\n     Damage=5.000000\n     bUnlit=True\n     LightEffect=LE_Disco\n     LightBrightness=255\n     LightSaturation=50\n     LightRadius=20\n}\n",
            "name": "DartUtil.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "mpDamage=10.000000",
                    "spawnAmmoClass=None",
                    "ItemName=\"Utility Dart\"",
                    "Damage=5.000000",
                    "bUnlit=True",
                    "LightEffect=LE_Disco",
                    "LightBrightness=255",
                    "LightSaturation=50",
                    "LightRadius=20"
                ],
                "exec": [],
                "extends": "Dart",
                "functions": {
                    "BeginPlay": {
                        "body": "{\n\tforeach AllActors(class'WeaponUtilBow', WUB)\n\t{\n\t\tif(WUB.Owner == Owner)\n\t\t{\n\t\t    Mode = WUB.Mode;\n\t\t}\n\t}\n}",
                        "locals": [
                            "local WeaponUtilBow WUB;"
                        ],
                        "modifiers": [],
                        "name": "BeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "BeginState": {
                        "body": "{\n\n\t\tinitLoc = Location;\n\t\tinitDir = vector(Rotation);\t\n\t\tVelocity = speed*initDir;\n\t\tPlaySound(SpawnSound, SLOT_None);\n\t}",
                        "locals": [
                            "local DeusExWeapon W;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "BeginState",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Explode": {
                        "body": "{\n\n      // Reduce damage on nano exploded projectiles\n      if ((bAggressiveExploded) && (Level.NetMode != NM_Standalone))\n         Damage = Damage/6;\n\n\t\tbDestroy = false;\n\n\t\tif (bExplodes)\n\t\t{\n         //DEUS_EX AMSD Don't draw effects on dedicated server\n         if ((Level.NetMode != NM_DedicatedServer) || (Role < ROLE_Authority))\t\t\t\n            DrawExplosionEffects(HitLocation, HitNormal);\n\n\t\t\tGotoState('Exploding');\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Server side only\n\t\t\tif ( Role == ROLE_Authority )\n\t\t\t{\n\t\t\t\tif ((damagee != None)) // Don't even attempt damage with a tracer\n\t\t\t\t{\n\t\t\t\t\tif ( Level.NetMode != NM_Standalone )\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( damagee.IsA('DeusExPlayer') )\n\t\t\t\t\t\t\tDeusExPlayer(damagee).myProjKiller = Self;\n\t\t\t\t\t}\n\t\t\t\t\tdamagee.TakeDamage(Damage, Pawn(Owner), HitLocation, MomentumTransfer*Normal(Velocity), damageType);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!bStuck)\n\t\t\t\tbDestroy = true;\n\t\t}\n\n\t\trad = Max(blastRadius*24, 1024);\n\n\t\t// This needs to be outside the simulated call chain\n\t\tPlayImpactSound();\n\n      //DEUS_EX AMSD Only do these server side\n      if (Role == ROLE_Authority)\n      {\n         if (ImpactSound != None)\n         {\n            AISendEvent('LoudNoise', EAITYPE_Audio, 2.0, blastRadius*24);\n            if (bExplodes)\n               AISendEvent('WeaponFire', EAITYPE_Audio, 2.0, blastRadius*5);\n         }\n      }\n\t\tif (bDestroy)\n\t\t\tDestroy();\n\t}",
                        "locals": [
                            "local bool bDestroy;",
                            "local float rad;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Explode",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "HitLocation"
                            ],
                            [
                                "vector",
                                "HitNormal"
                            ]
                        ],
                        "return": ""
                    },
                    "GetJVel": {
                        "body": "{\n\tforeach AllActors(class'WeaponUtilBow', WUB)\n\t{\n\t\tif(WUB.Owner == Owner)\n\t\t{\n\t\t    return WUB.Jumpvel;\n\t\t}\n\t}\n}",
                        "locals": [
                            "local WeaponUtilBow WUB;"
                        ],
                        "modifiers": [],
                        "name": "GetJVel",
                        "native": false,
                        "param": [],
                        "return": "int"
                    },
                    "GetVel": {
                        "body": "{\n\tforeach AllActors(class'WeaponUtilBow', WUB)\n\t{\n\t\tif(WUB.Owner == Owner)\n\t\t{\n\t\t    return WUB.Grapvel;\n\t\t}\n\t}\n}",
                        "locals": [
                            "local WeaponUtilBow WUB;"
                        ],
                        "modifiers": [],
                        "name": "GetVel",
                        "native": false,
                        "param": [],
                        "return": "int"
                    },
                    "Grapple": {
                        "body": "{\n\tloc = Owner.Location;\n\tloc.Z += DeusExPlayer(Owner).BaseEyeHeight;\n\tline = Vector(DeusExPlayer(Owner).ViewRotation) * 90000;\n\n\tTrace(hitLocation, hitNormal, loc+line, loc, true);\n\tDVector = Owner.Location - Location;\n\n\tif(!bPulling)\n\t{\n\t\t\t\t\tDeusExPlayer(Owner).DoJump();\n\t\t\t\t\tDeusExPlayer(Owner).Velocity = (normal(Location - DeusExPlayer(Owner).Location) * GetVel());\n\t\t\t\t\tDeusExPlayer(Owner).SetPhysics(Phys_Falling);\t\n\t}\n\telse\n\t{\n\t\t\t\t\tPullPawn.Velocity.Z = 180;\n\t\t\t\t\tPullPawn.SetPhysics(Phys_Falling);\t\n\t\t\t\t\tPullPawn.Velocity = (normal(Owner.Location - PullPawn.Location) * GetVel());\n\n\t}\n}",
                        "locals": [
                            "local vector loc, line, HitLocation, hitNormal;",
                            "local Vector DVector;"
                        ],
                        "modifiers": [],
                        "name": "Grapple",
                        "native": false,
                        "param": [
                            [
                                "bool",
                                "bPulling"
                            ]
                        ],
                        "return": ""
                    },
                    "HitWall": {
                        "body": "{\n\t\tif (bStickToWall)\n\t\t{\n\t\t\tVelocity = vect(0,0,0);\n\t\t\tAcceleration = vect(0,0,0);\n\t\t\tSetPhysics(PHYS_None);\n\t\t\tbStuck = True;\n\n\t\t\t// MBCODE: Do this only on server side\n\t\t\tif ( Role == ROLE_Authority )\n\t\t\t{\n            if (Level.NetMode != NM_Standalone)\n               SetTimer(5.0,False);\n\n\t\t\t\tif (Wall.IsA('Mover'))\n\t\t\t\t{\n\t\t\t\t\tSetBase(Wall);\n\t\t\t\t\t\tif(Mode == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tWall.Trigger(Owner,DeusExPlayer(Owner));\n\t\t\t\t\t\t\tDestroy();\n\t\t\t\t\t\t}\n\t\t\t\t//\tWall.TakeDamage(Damage, Pawn(Owner), Wall.Location, MomentumTransfer*Normal(Velocity), damageType);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (Wall.IsA('BreakableGlass'))\n\t\t\tbDebris = False;\n\n\t\tSpawnEffects(Location, HitNormal, Wall);\n\t\t\t if(Mode == 3)\n\t\t\t   {\n\t\t\t\tGrapple(False);\n\t\t\t   }\n\t\t\t   else\n\t\t\t   {\n\t\t\t   \t\tUseMode(mode);\n\t\t\t\t}\n\t\tSuper.HitWall(HitNormal, Wall);\n\t}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "HitWall",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "HitNormal"
                            ],
                            [
                                "actor",
                                "Wall"
                            ]
                        ],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\tif ( Level.NetMode != NM_Standalone )\n\t\tDamage = mpDamage;\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ProcessTouch": {
                        "body": "{\n\t\tif (bStuck)\n\t\t\treturn;\n\n\t\tif ((Other != instigator) && (DeusExProjectile(Other) == None) &&\n\t\t\t(Other != Owner))\n\t\t{\n\t\t\tdamagee = Other;\n\t\t\tExplode(HitLocation, Normal(HitLocation-damagee.Location));\n\n         // DEUS_EX AMSD Spawn blood server side only\n         if (Role == ROLE_Authority)\n\t\t\t{\n            if (damagee.IsA('Pawn') && !damagee.IsA('Robot') && bBlood)\n               SpawnBlood(HitLocation, Normal(HitLocation-damagee.Location));\n\t\t\t   \n\t\t\t   if(Mode == 3)\n\t\t\t   {\n\t\t\t\tif(!damagee.bmovable)\n\t\t\t\t\tGrapple(False);\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\tPullPawn = Damagee;\n\t\t\t\tGrapple(True);\n\t\t\t\t}\n\t\t\t   }\n\t\t\t   else\n\t\t\t   {\n\t\t\t   \t\tUseMode(mode);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "ProcessTouch",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Other"
                            ],
                            [
                                "Vector",
                                "HitLocation"
                            ]
                        ],
                        "return": ""
                    },
                    "UseMode": {
                        "body": "{\n\tif(i == 1)\n\t{\n\t\tSetCollision(false, false, false);\n\t\tbHidden=False;\n\t\tDF = Spawn(class'DartFixture',,,Location,Rotation);\n\t\tDF.bMovable=True;\n\t\tDF.SetLocation(Location);\n\t\tDF.SetRotation(Rotation);\n\t\tDF.bMovable=False;\n\t}\n\tif(i == 2)\n\t{\n\t\tSetCollision(false, false, false);\n\t\tbHidden=False;\n\t\tDP = Spawn(class'DartJumpPad',,,Location,Rotation);\n\t\tDP.bMovable=True;\n\t\tDP.SetLocation(Location);\n\t\tDP.SetRotation(Rotation);\n\t\tDP.bMovable=False;\n\t\tDP.Velz = GetJVel();\n\t}\n}",
                        "locals": [
                            "local ClaymoreProj CP;",
                            "local DartFixture DF;",
                            "local DartJumpPad DP;"
                        ],
                        "modifiers": [],
                        "name": "UseMode",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "i"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 266,
                "replication": "",
                "states": [],
                "variables": [
                    "var float mpDamage;",
                    "var int Mode;",
                    "var Actor PullPawn;",
                    "var vector OwnerLocation, TargetLocation;",
                    "var int Grapvel;"
                ]
            }
        },
        "DontMove.uc": {
            "body": "class DontMove extends Actor;\n\nfunction PostBeginPlay(){\n  setTimer(1, false);\n}\n\nfunction Timer(){\n\tlocal Switch1 sw1;\n\tlocal Switch2 sw2;\n\tlocal Button1 b1;\n\tlocal Seat se;\n\t\n  foreach AllActors(class'Switch1', sw1) sw1.bmovable = False;\n  foreach AllActors(class'Switch2', sw2) sw2.bmovable = False;\n  foreach AllActors(class'Button1', b1) b1.bmovable = False;\n  foreach AllActors(class'Seat', se) { se.bmovable = False; se.bInvincible = True; }\n  Destroy();\n}\n\ndefaultproperties\n{\n     bHidden=True\n}\n",
            "name": "DontMove.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bHidden=True"
                ],
                "exec": [],
                "extends": "Actor",
                "functions": {
                    "PostBeginPlay": {
                        "body": "setTimer(1, false);",
                        "locals": [],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Timer": {
                        "body": "",
                        "locals": [
                            "local Switch1 sw1;",
                            "local Switch2 sw2;",
                            "local Button1 b1;",
                            "local Seat se;"
                        ],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 24,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "DoorCrate.uc": {
            "body": "//=============================================================================\n// CrateUnbreakableLarge.\n//=============================================================================\nclass DoorCrate extends Containers;\n\nvar bool bRevealing, bFading, bBlockFrob;\n\nfunction Frob(Actor Frobber, Inventory frobWith)\n{\n\tif(bfading || brevealing || bBlockfrob)\n\t\treturn;\n\tif(Scaleglow < 0.1)\n\t{\n\t\tbRevealing=True;\n\t}\n\telse\n\t{\n\t\tStyle=STY_Translucent;\n\t\tbFading=True;\n\t}\n}\n\nfunction Trigger( actor Other, pawn EventInstigator )\n{\n\tif(bfading || brevealing)\n\t\treturn;\n\tif(Scaleglow < 0.1)\n\t{\n\t\tbRevealing=True;\n\t}\n\telse\n\t{\n\t\tStyle=STY_Translucent;\n\t\tbFading=True;\n\t}\n}\n\nfunction Tick(float deltatime)\n{\n\tif(bRevealing)\n\t{\n\t\tScaleglow+=0.05;\n\t\tif(Scaleglow>0.99)\n\t\t{\n\t\t\tbRevealing=False;\n\t\t\tStyle=STY_Normal;\n\t\t\tSetCollision(True, True, True);\n\t\t\tbCollideWorld = true;\n\t\t}\n\t}\n\tif(bFading)\n\t{\n\t\tScaleglow-=0.05;\n\t\tif(Scaleglow<0.01)\n\t\t{\n\t\t\tbFading=False;\n\t\t\tSetCollision(False, False, False);\n\t\t\tbCollideWorld = true;\n\t\t}\n\t}\t\n}\n\ndefaultproperties\n{\n     bBlockFrob=True\n     bInvincible=True\n     bFlammable=False\n     ItemName=\"Metal Door Crate\"\n     bPushable=False\n     bMovable=False\n     bBlockSight=True\n     Mesh=LodMesh'DeusExDeco.CrateUnbreakableLarge'\n     CollisionRadius=56.500000\n     CollisionHeight=56.000000\n     Mass=150.000000\n     Buoyancy=160.000000\n}\n",
            "name": "DoorCrate.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bBlockFrob=True",
                    "bInvincible=True",
                    "bFlammable=False",
                    "ItemName=\"Metal Door Crate\"",
                    "bPushable=False",
                    "bMovable=False",
                    "bBlockSight=True",
                    "Mesh=LodMesh'DeusExDeco.CrateUnbreakableLarge'",
                    "CollisionRadius=56.500000",
                    "CollisionHeight=56.000000",
                    "Mass=150.000000",
                    "Buoyancy=160.000000"
                ],
                "exec": [],
                "extends": "Containers",
                "functions": {
                    "Frob": {
                        "body": "{\n\tif(bfading || brevealing || bBlockfrob)\n\t\treturn;\n\tif(Scaleglow < 0.1)\n\t{\n\t\tbRevealing=True;\n\t}\n\telse\n\t{\n\t\tStyle=STY_Translucent;\n\t\tbFading=True;\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    },
                    "Tick": {
                        "body": "{\n\tif(bRevealing)\n\t{\n\t\tScaleglow+=0.05;\n\t\tif(Scaleglow>0.99)\n\t\t{\n\t\t\tbRevealing=False;\n\t\t\tStyle=STY_Normal;\n\t\t\tSetCollision(True, True, True);\n\t\t\tbCollideWorld = true;\n\t\t}\n\t}\n\tif(bFading)\n\t{\n\t\tScaleglow-=0.05;\n\t\tif(Scaleglow<0.01)\n\t\t{\n\t\t\tbFading=False;\n\t\t\tSetCollision(False, False, False);\n\t\t\tbCollideWorld = true;\n\t\t}\n\t}\t\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltatime"
                            ]
                        ],
                        "return": ""
                    },
                    "Trigger": {
                        "body": "{\n\tif(bfading || brevealing)\n\t\treturn;\n\tif(Scaleglow < 0.1)\n\t{\n\t\tbRevealing=True;\n\t}\n\telse\n\t{\n\t\tStyle=STY_Translucent;\n\t\tbFading=True;\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Trigger",
                        "native": false,
                        "param": [
                            [
                                "actor",
                                "Other"
                            ],
                            [
                                "pawn",
                                "EventInstigator"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 78,
                "replication": "",
                "states": [],
                "variables": [
                    "var bool bRevealing, bFading, bBlockFrob;"
                ]
            }
        },
        "DoorLocker.uc": {
            "body": "//=============================================================================\n// WeaponStealthPistol.\n//=============================================================================\nclass DoorLocker extends DeusExWeapon;\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t\tReloadCount = mpReloadCount;\n\t}\n}\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\nfunction ProcessTraceHit(Actor Other, Vector HitLocation, Vector HitNormal, Vector X, Vector Y, Vector Z)\n{\n\tlocal float        mult;\n\tlocal name         damageType;\n\tlocal DeusExPlayer dxPlayer, DXP;\n\tlocal Pawn P;\n\t\n\t\tif(Other.isa('DeusExMover'))\n\t\t{\n\t\t\tDeusExMover(Other).bLocked = !DeusExMover(Other).bLocked;\n\t\t\tDeusExMover(Other).bPickable = False;\n\t\t\tDeusExPlayer(Owner).ClientMessage(\"Lock state; \"$DeusExMover(Other).bLocked);\n\t\t\treturn;\n\t\t}\n}\n\nsimulated function float CalculateAccuracy()\n{\n\treturn 0.000000; //Dirty hack to always return dead on accuracy.\n}\n\nstate NormalFire //(Thanks to JimBowen for this Infinite ammo code) \n{ \n   Begin: \n      if ((ClipCount >= ReloadCount) && (ReloadCount != 0)) \n      { \n         if (!bAutomatic) \n         { \n            bFiring = False; \n            FinishAnim(); \n         } \n    \n         if (Owner != None) \n         { \n            if (Owner.IsA('DeusExPlayer')) \n            { \n               bFiring = False; \n            } \n            else if (Owner.IsA('ScriptedPawn')) \n            { \n               bFiring = False; \n               ReloadAmmo(); \n            } \n         } \n         else \n         { \n            if (bHasMuzzleFlash) \n               EraseMuzzleFlashTexture(); \n            GotoState('Idle'); \n         } \n      } \n      if ( bAutomatic && (( Level.NetMode == NM_DedicatedServer ) || ((Level.NetMode == NM_ListenServer) && Owner.IsA('DeusExPlayer') && !DeusExPlayer(Owner).PlayerIsListenClient()))) \n         GotoState('Idle'); \n    \n      Sleep(GetShotTime()); \n      if (bAutomatic) \n      { \n         GenerateBullet();       // In multiplayer bullets are generated by the client which will let the server know when \n         Goto('Begin'); \n      } \n      bFiring = False; \n      FinishAnim(); \n    \n   /*      // if ReloadCount is 0 and we're not hand to hand, then this is a \n      // single-use weapon so destroy it after firing once \n      if ((ReloadCount == 0) && !bHandToHand) \n      { \n         if (DeusExPlayer(Owner) != None) \n            DeusExPlayer(Owner).RemoveItemFromSlot(Self);   // remove it from the inventory grid \n         Destroy(); \n      } \n      */              // Do I REALLY need all that crap JUST for infinite ammo? \n      ReadyToFire(); \n   Done: \n      bFiring = False; \n      Finish(); \n}\n\ndefaultproperties\n{\n     GoverningSkill=Class'DeusEx.SkillWeaponPistol'\n     NoiseLevel=0.010000\n     ShotTime=0.150000\n     reloadTime=1.500000\n     HitDamage=0\n     maxRange=4800\n     AccurateRange=2400\n     BaseAccuracy=0.800000\n     bCanHaveScope=True\n     ScopeFOV=25\n     bCanHaveLaser=True\n     recoilStrength=0.100000\n     mpBaseAccuracy=0.200000\n     mpAccurateRange=1200\n     mpMaxRange=1200\n     bCanHaveModBaseAccuracy=True\n     bCanHaveModReloadCount=True\n     bCanHaveModAccurateRange=True\n     bCanHaveModReloadTime=True\n     bInstantHit=True\n     FireOffset=(X=-24.000000,Y=10.000000,Z=14.000000)\n     shakemag=50.000000\n     FireSound=Sound'DeusExSounds.Weapons.StealthPistolFire'\n     AltFireSound=Sound'DeusExSounds.Weapons.StealthPistolReloadEnd'\n     CockingSound=Sound'DeusExSounds.Weapons.StealthPistolReload'\n     SelectSound=Sound'DeusExSounds.Weapons.StealthPistolSelect'\n     InventoryGroup=57\n     ItemName=\"Locker Gun\"\n     PlayerViewOffset=(X=24.000000,Y=-10.000000,Z=-14.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.StealthPistol'\n     PickupViewMesh=LodMesh'DeusExItems.StealthPistolPickup'\n     ThirdPersonMesh=LodMesh'DeusExItems.StealthPistol3rd'\n     Icon=Texture'DeusExUI.Icons.BeltIconStealthPistol'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconStealthPistol'\n     largeIconWidth=47\n     largeIconHeight=37\n     Description=\"The stealth pistol is a variant of the standard 10mm pistol with a larger clip and integrated silencer designed for wet work at very close ranges.\"\n     beltDescription=\"LOCK\"\n     Mesh=LodMesh'DeusExItems.StealthPistolPickup'\n     CollisionRadius=8.000000\n     CollisionHeight=0.800000\n}\n",
            "name": "DoorLocker.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "GoverningSkill=Class'DeusEx.SkillWeaponPistol'",
                    "NoiseLevel=0.010000",
                    "ShotTime=0.150000",
                    "reloadTime=1.500000",
                    "HitDamage=0",
                    "maxRange=4800",
                    "AccurateRange=2400",
                    "BaseAccuracy=0.800000",
                    "bCanHaveScope=True",
                    "ScopeFOV=25",
                    "bCanHaveLaser=True",
                    "recoilStrength=0.100000",
                    "mpBaseAccuracy=0.200000",
                    "mpAccurateRange=1200",
                    "mpMaxRange=1200",
                    "bCanHaveModBaseAccuracy=True",
                    "bCanHaveModReloadCount=True",
                    "bCanHaveModAccurateRange=True",
                    "bCanHaveModReloadTime=True",
                    "bInstantHit=True",
                    "FireOffset=(X=-24.000000,Y=10.000000,Z=14.000000)",
                    "shakemag=50.000000",
                    "FireSound=Sound'DeusExSounds.Weapons.StealthPistolFire'",
                    "AltFireSound=Sound'DeusExSounds.Weapons.StealthPistolReloadEnd'",
                    "CockingSound=Sound'DeusExSounds.Weapons.StealthPistolReload'",
                    "SelectSound=Sound'DeusExSounds.Weapons.StealthPistolSelect'",
                    "InventoryGroup=57",
                    "ItemName=\"Locker Gun\"",
                    "PlayerViewOffset=(X=24.000000,Y=-10.000000,Z=-14.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.StealthPistol'",
                    "PickupViewMesh=LodMesh'DeusExItems.StealthPistolPickup'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.StealthPistol3rd'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconStealthPistol'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconStealthPistol'",
                    "largeIconWidth=47",
                    "largeIconHeight=37",
                    "Description=\"The stealth pistol is a variant of the standard 10mm pistol with a larger clip and integrated silencer designed for wet work at very close ranges.\"",
                    "beltDescription=\"LOCK\"",
                    "Mesh=LodMesh'DeusExItems.StealthPistolPickup'",
                    "CollisionRadius=8.000000",
                    "CollisionHeight=0.800000"
                ],
                "exec": [],
                "extends": "DeusExWeapon",
                "functions": {
                    "CalculateAccuracy": {
                        "body": "{\n\treturn 0.000000; //Dirty hack to always return dead on accuracy.\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "CalculateAccuracy",
                        "native": false,
                        "param": [],
                        "return": "float"
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t\tReloadCount = mpReloadCount;\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ProcessTraceHit": {
                        "body": "{\n\t\n\t\tif(Other.isa('DeusExMover'))\n\t\t{\n\t\t\tDeusExMover(Other).bLocked = !DeusExMover(Other).bLocked;\n\t\t\tDeusExMover(Other).bPickable = False;\n\t\t\tDeusExPlayer(Owner).ClientMessage(\"Lock state; \"$DeusExMover(Other).bLocked);\n\t\t\treturn;\n\t\t}\n}",
                        "locals": [
                            "local float        mult;",
                            "local name         damageType;",
                            "local DeusExPlayer dxPlayer, DXP;",
                            "local Pawn P;"
                        ],
                        "modifiers": [],
                        "name": "ProcessTraceHit",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Other"
                            ],
                            [
                                "Vector",
                                "HitLocation"
                            ],
                            [
                                "Vector",
                                "HitNormal"
                            ],
                            [
                                "Vector",
                                "X"
                            ],
                            [
                                "Vector",
                                "Y"
                            ],
                            [
                                "Vector",
                                "Z"
                            ]
                        ],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 149,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "Doritos.uc": {
            "body": "//=============================================================================\n// SoyFood.\n//=============================================================================\nclass Doritos extends FoodMMRPG;\n\ndefaultproperties\n{\n     rechargeAmount=20\n     ItemName=\"Cheese Nachos\"\n     ItemArticle=\"a pack of\"\n     PlayerViewMesh=LodMesh'DeusExItems.SoyFood'\n     PlayerViewScale=1.500000\n     PickupViewMesh=LodMesh'DeusExItems.SoyFood'\n     PickupViewScale=1.500000\n     ThirdPersonMesh=LodMesh'DeusExItems.SoyFood'\n     ThirdPersonScale=1.500000\n     Icon=Texture'PGAssets.Skins.DoritosBelt'\n     largeIcon=Texture'PGAssets.Skins.DoritosBelt'\n     largeIconWidth=42\n     largeIconHeight=46\n     beltDescription=\"CHS NCHO\"\n     Skin=Texture'PGAssets.Skins.DoritosTex1'\n     Mesh=LodMesh'DeusExItems.SoyFood'\n     DrawScale=1.500000\n     MultiSkins(0)=Texture'PGAssets.Skins.DoritosTex1'\n     CollisionRadius=10.000000\n     CollisionHeight=1.980000\n     Mass=3.000000\n}\n",
            "name": "Doritos.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "rechargeAmount=20",
                    "ItemName=\"Cheese Nachos\"",
                    "ItemArticle=\"a pack of\"",
                    "PlayerViewMesh=LodMesh'DeusExItems.SoyFood'",
                    "PlayerViewScale=1.500000",
                    "PickupViewMesh=LodMesh'DeusExItems.SoyFood'",
                    "PickupViewScale=1.500000",
                    "ThirdPersonMesh=LodMesh'DeusExItems.SoyFood'",
                    "ThirdPersonScale=1.500000",
                    "Icon=Texture'PGAssets.Skins.DoritosBelt'",
                    "largeIcon=Texture'PGAssets.Skins.DoritosBelt'",
                    "largeIconWidth=42",
                    "largeIconHeight=46",
                    "beltDescription=\"CHS NCHO\"",
                    "Skin=Texture'PGAssets.Skins.DoritosTex1'",
                    "Mesh=LodMesh'DeusExItems.SoyFood'",
                    "DrawScale=1.500000",
                    "MultiSkins(0)=Texture'PGAssets.Skins.DoritosTex1'",
                    "CollisionRadius=10.000000",
                    "CollisionHeight=1.980000",
                    "Mass=3.000000"
                ],
                "exec": [],
                "extends": "FoodMMRPG",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 30,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "DroneBox.uc": {
            "body": "//=============================================================================\n// Makes a drone, sleeps, and waits.\n//=============================================================================\nclass DroneBox extends Containers;\n\n//var DeusExPlayer tmpFrob;\n\nfunction Destroyed()\n{\n}\n\nfunction Frob(Actor Frobber, Inventory frobWith) \n{\n\tTakeDamage(50, DeusExPlayer(Frobber), Location, vect(0,0,0), 'fell');\n\t//tmpFrob = DeusExPlayer(Frobber);\n}\n\nsimulated function Frag(class<fragment> FragType, vector Momentum, float DSize, int NumFrags) \n{\n\tlocal int i;\n\tlocal actor A, Toucher;\n\tlocal DeusExFragment s;\n\tlocal DroneBoxRespawner DBR;\n\tlocal RadarDrone RD;\n\t\n\tif ( bOnlyTriggerable )\n\t\treturn; \n\tif (Event!='')\n\t\tforeach AllActors( class 'Actor', A, Event )\n\t\t\tA.Trigger( Toucher, pawn(Toucher) );\n\tif ( Region.Zone.bDestructive )\n\t{\n\t\tDestroy();\n\t\treturn;\n\t}\n\tfor (i=0 ; i<NumFrags ; i++) \n\t{\n\t\ts = DeusExFragment(Spawn(FragType, Owner));\n\t\tif (s != None)\n\t\t{\n\t\t\ts.Instigator = Instigator;\n\t\t\ts.CalcVelocity(Momentum,0);\n\t\t\ts.DrawScale = DSize*0.5+0.7*DSize*FRand();\n\t\t\ts.Skin = GetMeshTexture();\n\t\t\tif (bExplosive)\n\t\t\t\ts.bSmoking = True;\n\t\t}\n\t}\n\n\tif (!bExplosive)\n\t{\n\t\tSpawn(class'RadarDrone',,,Location);\n\t\t//RD.Frob(tmpFrob,None);\n\t\t\t\tDestroy();\n\t\tDBR = Spawn(class'DroneBoxRespawner',,,Location);\n\t\tDBR.SetTimer(30,False);\n\t}\n}\n\ndefaultproperties\n{\n     HitPoints=10\n     FragType=Class'DeusEx.WoodFragment'\n     ItemName=\"Drone Storage Container\"\n     bPushable=False\n     bBlockSight=True\n     Mesh=LodMesh'DeusExDeco.CrateBreakableMed'\n     CollisionRadius=34.000000\n     CollisionHeight=24.000000\n     Mass=50.000000\n     Buoyancy=60.000000\n}\n",
            "name": "DroneBox.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "HitPoints=10",
                    "FragType=Class'DeusEx.WoodFragment'",
                    "ItemName=\"Drone Storage Container\"",
                    "bPushable=False",
                    "bBlockSight=True",
                    "Mesh=LodMesh'DeusExDeco.CrateBreakableMed'",
                    "CollisionRadius=34.000000",
                    "CollisionHeight=24.000000",
                    "Mass=50.000000",
                    "Buoyancy=60.000000"
                ],
                "exec": [],
                "extends": "Containers",
                "functions": {
                    "Destroyed": {
                        "body": "{\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Destroyed",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Frag": {
                        "body": "{\n\t\n\tif ( bOnlyTriggerable )\n\t\treturn; \n\tif (Event!='')\n\t\tforeach AllActors( class 'Actor', A, Event )\n\t\t\tA.Trigger( Toucher, pawn(Toucher) );\n\tif ( Region.Zone.bDestructive )\n\t{\n\t\tDestroy();\n\t\treturn;\n\t}\n\tfor (i=0 ; i<NumFrags ; i++) \n\t{\n\t\ts = DeusExFragment(Spawn(FragType, Owner));\n\t\tif (s != None)\n\t\t{\n\t\t\ts.Instigator = Instigator;\n\t\t\ts.CalcVelocity(Momentum,0);\n\t\t\ts.DrawScale = DSize*0.5+0.7*DSize*FRand();\n\t\t\ts.Skin = GetMeshTexture();\n\t\t\tif (bExplosive)\n\t\t\t\ts.bSmoking = True;\n\t\t}\n\t}\n\n\tif (!bExplosive)\n\t{\n\t\tSpawn(class'RadarDrone',,,Location);\n\t\t//RD.Frob(tmpFrob,None);\n\t\t\t\tDestroy();\n\t\tDBR = Spawn(class'DroneBoxRespawner',,,Location);\n\t\tDBR.SetTimer(30,False);\n\t}\n}",
                        "locals": [
                            "local int i;",
                            "local actor A, Toucher;",
                            "local DeusExFragment s;",
                            "local DroneBoxRespawner DBR;",
                            "local RadarDrone RD;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Frag",
                        "native": false,
                        "param": [
                            [
                                "class<fragment>",
                                "FragType"
                            ],
                            [
                                "vector",
                                "Momentum"
                            ],
                            [
                                "float",
                                "DSize"
                            ],
                            [
                                "int",
                                "NumFrags"
                            ]
                        ],
                        "return": ""
                    },
                    "Frob": {
                        "body": "{\n\tTakeDamage(50, DeusExPlayer(Frobber), Location, vect(0,0,0), 'fell');\n\t//tmpFrob = DeusExPlayer(Frobber);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 73,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "DroneBoxRespawner.uc": {
            "body": "class DroneBoxRespawner extends Actor;\n\nfunction Timer()\n{\nSpawn(class'DroneBox',,,Location);\nBroadcastMessage(\"A new drone container has been delivered.\");\ndestroy();\n}\n\ndefaultproperties\n{\n     bHidden=True\n}\n",
            "name": "DroneBoxRespawner.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bHidden=True"
                ],
                "exec": [],
                "extends": "Actor",
                "functions": {
                    "Timer": {
                        "body": "{\nSpawn(class'DroneBox',,,Location);\nBroadcastMessage(\"A new drone container has been delivered.\");\ndestroy();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 14,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "DroneGrenade.uc": {
            "body": "class DroneGrenade expands ThrownProjectile;\n\nsimulated function SpawnEffects(Vector HitLocation, Vector HitNormal, Actor Other)\n{\n}\n\nstate Exploding\n{\n\tignores ProcessTouch, HitWall, Explode;\n\n   function DamageRing()\n   {\n\t\tlocal Pawn apawn;\n\t\tlocal float damageRadius;\n\t\tlocal Vector dist;\n\t\tlocal ProjectileGenerator Projy;\n\t\n\t\t\tprojy = Spawn(class'ProjectileGenerator',,,Self.Location);\n\t\t\tprojy.Lifespan=1.5;\n\t\t\tprojy.EjectSpeed=250;\n\t\t\tprojy.bRandomEject = True;\n\t\t\tprojy.ProjectileClass=class'RocketDrone';\n\t\t\tprojy.NumPerSpawn=3;\n\t\t\t\n\t\tif ( Level.NetMode != NM_Standalone )\n\t\t{\n\t\t\tdamageRadius = (blastRadius / gradualHurtSteps) * gradualHurtCounter;\n\n\t\t\tfor ( apawn = Level.PawnList; apawn != None; apawn = apawn.nextPawn )\n\t\t\t{\n\t\t\t\tif ( apawn.IsA('DeusExPlayer') )\n\t\t\t\t{\n\t\t\t\t\tdist = apawn.Location - Location;\n\t\t\t\t\tif ( VSize(dist) < damageRadius )\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( gradualHurtCounter <= 2 )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif ( apawn.FastTrace( apawn.Location, Location ))\n\t\t\t\t\t\t\t\tDeusExPlayer(apawn).myProjKiller = Self;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tDeusExPlayer(apawn).myProjKiller = Self;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n      //DEUS_EX AMSD Ignore Line of Sight on the lowest radius check, only in multiplayer\n\t\tHurtRadius\n\t\t(\n\t\t\t(2 * Damage) / gradualHurtSteps,\n\t\t\t(blastRadius / gradualHurtSteps) * gradualHurtCounter,\n\t\t\tdamageType,\n\t\t\tMomentumTransfer / gradualHurtSteps,\n\t\t\tLocation,\n         ((gradualHurtCounter <= 2) && (Level.NetMode != NM_Standalone))\n\t\t);\n   }\n\n\tfunction Timer()\n\t{\n\t\tgradualHurtCounter++;\n      DamageRing();\n\t\tif (gradualHurtCounter >= gradualHurtSteps)\n\t\t\tDestroy();\n\t}\n\nBegin:\n\t// stagger the HurtRadius outward using Timer()\n\t// do five separate blast rings increasing in size\n\tgradualHurtCounter = 1;\n\tgradualHurtSteps = 5;\n\tVelocity = vect(0,0,0);\n\tbHidden = True;\n\tLightType = LT_None;\n\tSetCollision(False, False, False);\n   DamageRing();\n\tSetTimer(0.25/float(gradualHurtSteps), True);\n}\n\ndefaultproperties\n{\n     fuseLength=1.000000\n     proxRadius=128.000000\n     spawnWeaponClass=Class'PartyStuff.WeaponDroneGrenade'\n     spawnAmmoClass=Class'PartyStuff.AmmoDG'\n     ItemName=\"Drone Grenade\"\n     speed=1500.000000\n     ImpactSound=Sound'DeusExSounds.Generic.SmallExplosion2'\n     Mesh=LodMesh'DeusExItems.EMPGrenadePickup'\n}\n",
            "name": "DroneGrenade.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "fuseLength=1.000000",
                    "proxRadius=128.000000",
                    "spawnWeaponClass=Class'PartyStuff.WeaponDroneGrenade'",
                    "spawnAmmoClass=Class'PartyStuff.AmmoDG'",
                    "ItemName=\"Drone Grenade\"",
                    "speed=1500.000000",
                    "ImpactSound=Sound'DeusExSounds.Generic.SmallExplosion2'",
                    "Mesh=LodMesh'DeusExItems.EMPGrenadePickup'"
                ],
                "exec": [],
                "extends": "ThrownProjectile",
                "functions": {
                    "DamageRing": {
                        "body": "{\n\t\n\t\t\tprojy = Spawn(class'ProjectileGenerator',,,Self.Location);\n\t\t\tprojy.Lifespan=1.5;\n\t\t\tprojy.EjectSpeed=250;\n\t\t\tprojy.bRandomEject = True;\n\t\t\tprojy.ProjectileClass=class'RocketDrone';\n\t\t\tprojy.NumPerSpawn=3;\n\t\t\t\n\t\tif ( Level.NetMode != NM_Standalone )\n\t\t{\n\t\t\tdamageRadius = (blastRadius / gradualHurtSteps) * gradualHurtCounter;\n\n\t\t\tfor ( apawn = Level.PawnList; apawn != None; apawn = apawn.nextPawn )\n\t\t\t{\n\t\t\t\tif ( apawn.IsA('DeusExPlayer') )\n\t\t\t\t{\n\t\t\t\t\tdist = apawn.Location - Location;\n\t\t\t\t\tif ( VSize(dist) < damageRadius )\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( gradualHurtCounter <= 2 )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif ( apawn.FastTrace( apawn.Location, Location ))\n\t\t\t\t\t\t\t\tDeusExPlayer(apawn).myProjKiller = Self;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tDeusExPlayer(apawn).myProjKiller = Self;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n      //DEUS_EX AMSD Ignore Line of Sight on the lowest radius check, only in multiplayer\n\t\tHurtRadius\n\t\t(\n\t\t\t(2 * Damage) / gradualHurtSteps,\n\t\t\t(blastRadius / gradualHurtSteps) * gradualHurtCounter,\n\t\t\tdamageType,\n\t\t\tMomentumTransfer / gradualHurtSteps,\n\t\t\tLocation,\n         ((gradualHurtCounter <= 2) && (Level.NetMode != NM_Standalone))\n\t\t);\n   }",
                        "locals": [
                            "local Pawn apawn;",
                            "local float damageRadius;",
                            "local Vector dist;",
                            "local ProjectileGenerator Projy;"
                        ],
                        "modifiers": [],
                        "name": "DamageRing",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "SpawnEffects": {
                        "body": "{\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "SpawnEffects",
                        "native": false,
                        "param": [
                            [
                                "Vector",
                                "HitLocation"
                            ],
                            [
                                "Vector",
                                "HitNormal"
                            ],
                            [
                                "Actor",
                                "Other"
                            ]
                        ],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\t\tgradualHurtCounter++;\n      DamageRing();\n\t\tif (gradualHurtCounter >= gradualHurtSteps)\n\t\t\tDestroy();\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 91,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "DynMusicActor.uc": {
            "body": "class DynMusicActor extends PGActors;\n\nvar DeusExPlayer Watcher;\nvar DynMusicMutator DM;\nvar bool bInCombat;\nvar bool bPSZDisabled;\n\nfunction bool MMLocked(DeusExPlayer Them)\n{\nlocal MusicMemory MM;\n\tforeach AllActors(class'MusicMemory', MM)\n\t{\n\t\tif(MM.Watcher == Them)\n\t\t{\n\t\t\treturn MM.bMMLocked;\n\t\t}\n\t}\n}\n\nfunction music GetMemorizedMusic(DeusExPlayer Them)\n{\nlocal MusicMemory MM;\n\tforeach AllActors(class'MusicMemory', MM)\n\t{\n\t\tif(MM.Watcher == Them)\n\t\t{\n\t\t\treturn MM.CurrentSong;\n\t\t}\n\t}\n}\n\nfunction Tick(float deltatime)\n{\nlocal DeusExPlayer DXP;\nlocal ScriptedPawn SP;\nlocal bool bFoundCombat;\n\n\tif(Watcher != None)\n\t{\n\t\tSetLocation(watcher.Location);\n\t\t\tif(bPSZDisabled)\n\t\t\t\treturn;\n\t\tif(!bInCombat)\n\t\t{\n\t\t\tforeach VisibleActors(class'ScriptedPawn', SP, 785, Location)\n\t\t\t{\n\t\t\t\tif(!SP.IsA('Animal') && !SP.IsA('SuperCleanerBot') && !SP.IsA('CleanerBot') && !SP.IsA('MedicalBot') && !SP.IsA('RepairBot'))  \n\t\t\t\t\tif(SP.IsInState('Attacking') || SP.IsInState('Alerting') || SP.IsInState('Burning') || SP.IsInState('Seeking') || SP.IsInState('Stunned') || SP.IsInState('HandlingEnemy'))\n\t\t\t\t\t\tbFoundCombat=True;\n\t\t\t}\n\n\t\t\tif(bFoundCombat)\n\t\t\t{\n\t\t\t\tif(MMLocked(Watcher))\n\t\t\t\t\treturn;\n\t\t\t\t\t\n\t\t\t\tbInCombat=True;\n\t\t\t\t\tif(DM.BattleEnterMsg != \"\")\n\t\t\t\t\t\tWatcher.ClientMessage(DM.BattleEnterMsg);\n\t\t\t\tWatcher.ClientSetMusic( DM.BattleTrack, DM.BattleSongSection, DM.BattleCdTrack, DM.Transition );\n\t\t\t\tSetTimer(1,True);\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction Timer()\n{\nlocal ScriptedPawn SP;\nlocal bool bFoundCombat;\n\tif(bInCombat)\n\t{\n\t\tforeach RadiusActors(class'ScriptedPawn', SP, 785, Location)\n\t\t{\n\t\tif(!SP.IsA('Animal') && !SP.IsA('SuperCleanerBot') && !SP.IsA('CleanerBot') && !SP.IsA('MedicalBot') && !SP.IsA('RepairBot'))  \n\t\t\tif(SP.IsInState('Attacking') || SP.IsInState('Alerting') || SP.IsInState('Burning') || SP.IsInState('TakingHit') || SP.IsInState('Seeking') || SP.IsInState('Stunned') || SP.IsInState('HandlingEnemy'))\n\t\t\t\tbFoundCombat=True;\n\t\t}\n\t\t\n\t\tif(!bFoundCombat)\n\t\t{\n\t\t\tbInCombat=False;\n\t\t\t\t\tif(DM.BattleExitMsg != \"\")\n\t\t\t\t\t\tWatcher.ClientMessage(DM.BattleExitMsg);\n\t\t\tWatcher.ClientSetMusic( GetMemorizedMusic(Watcher), Level.SongSection, Level.CdTrack, DM.Transition );\n\t\t}\n\t}\n\telse\n\t\tSetTimer(1,False);\n}\n\ndefaultproperties\n{\n}\n",
            "name": "DynMusicActor.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "PGActors",
                "functions": {
                    "GetMemorizedMusic": {
                        "body": "{\n\tforeach AllActors(class'MusicMemory', MM)\n\t{\n\t\tif(MM.Watcher == Them)\n\t\t{\n\t\t\treturn MM.CurrentSong;\n\t\t}\n\t}\n}",
                        "locals": [
                            "local MusicMemory MM;"
                        ],
                        "modifiers": [],
                        "name": "GetMemorizedMusic",
                        "native": false,
                        "param": [
                            [
                                "DeusExPlayer",
                                "Them"
                            ]
                        ],
                        "return": "music"
                    },
                    "MMLocked": {
                        "body": "{\n\tforeach AllActors(class'MusicMemory', MM)\n\t{\n\t\tif(MM.Watcher == Them)\n\t\t{\n\t\t\treturn MM.bMMLocked;\n\t\t}\n\t}\n}",
                        "locals": [
                            "local MusicMemory MM;"
                        ],
                        "modifiers": [],
                        "name": "MMLocked",
                        "native": false,
                        "param": [
                            [
                                "DeusExPlayer",
                                "Them"
                            ]
                        ],
                        "return": "bool"
                    },
                    "Tick": {
                        "body": "{\n\n\tif(Watcher != None)\n\t{\n\t\tSetLocation(watcher.Location);\n\t\t\tif(bPSZDisabled)\n\t\t\t\treturn;\n\t\tif(!bInCombat)\n\t\t{\n\t\t\tforeach VisibleActors(class'ScriptedPawn', SP, 785, Location)\n\t\t\t{\n\t\t\t\tif(!SP.IsA('Animal') && !SP.IsA('SuperCleanerBot') && !SP.IsA('CleanerBot') && !SP.IsA('MedicalBot') && !SP.IsA('RepairBot'))  \n\t\t\t\t\tif(SP.IsInState('Attacking') || SP.IsInState('Alerting') || SP.IsInState('Burning') || SP.IsInState('Seeking') || SP.IsInState('Stunned') || SP.IsInState('HandlingEnemy'))\n\t\t\t\t\t\tbFoundCombat=True;\n\t\t\t}\n\n\t\t\tif(bFoundCombat)\n\t\t\t{\n\t\t\t\tif(MMLocked(Watcher))\n\t\t\t\t\treturn;\n\t\t\t\t\t\n\t\t\t\tbInCombat=True;\n\t\t\t\t\tif(DM.BattleEnterMsg != \"\")\n\t\t\t\t\t\tWatcher.ClientMessage(DM.BattleEnterMsg);\n\t\t\t\tWatcher.ClientSetMusic( DM.BattleTrack, DM.BattleSongSection, DM.BattleCdTrack, DM.Transition );\n\t\t\t\tSetTimer(1,True);\n\t\t\t}\n\t\t}\n\t}\n}",
                        "locals": [
                            "local DeusExPlayer DXP;",
                            "local ScriptedPawn SP;",
                            "local bool bFoundCombat;"
                        ],
                        "modifiers": [],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltatime"
                            ]
                        ],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\tif(bInCombat)\n\t{\n\t\tforeach RadiusActors(class'ScriptedPawn', SP, 785, Location)\n\t\t{\n\t\tif(!SP.IsA('Animal') && !SP.IsA('SuperCleanerBot') && !SP.IsA('CleanerBot') && !SP.IsA('MedicalBot') && !SP.IsA('RepairBot'))  \n\t\t\tif(SP.IsInState('Attacking') || SP.IsInState('Alerting') || SP.IsInState('Burning') || SP.IsInState('TakingHit') || SP.IsInState('Seeking') || SP.IsInState('Stunned') || SP.IsInState('HandlingEnemy'))\n\t\t\t\tbFoundCombat=True;\n\t\t}\n\t\t\n\t\tif(!bFoundCombat)\n\t\t{\n\t\t\tbInCombat=False;\n\t\t\t\t\tif(DM.BattleExitMsg != \"\")\n\t\t\t\t\t\tWatcher.ClientMessage(DM.BattleExitMsg);\n\t\t\tWatcher.ClientSetMusic( GetMemorizedMusic(Watcher), Level.SongSection, Level.CdTrack, DM.Transition );\n\t\t}\n\t}\n\telse\n\t\tSetTimer(1,False);\n}",
                        "locals": [
                            "local ScriptedPawn SP;",
                            "local bool bFoundCombat;"
                        ],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 95,
                "replication": "",
                "states": [],
                "variables": [
                    "var DeusExPlayer Watcher;",
                    "var DynMusicMutator DM;",
                    "var bool bInCombat;",
                    "var bool bPSZDisabled;"
                ]
            }
        },
        "DynMusicMutator.uc": {
            "body": "class DynMusicMutator extends Mutator\nconfig (DynMusic);\n\nvar() config music BattleTrack;\nvar() config EMusicTransition Transition;\nvar() config byte             BattleSongSection, SongSection;\nvar() config byte             BattleCdTrack, CdTrack;\nvar() config string BattleEnterMsg, BattleExitMsg;\n\nfunction PostBeginPlay ()\n{\n\tLevel.Game.BaseMutator.AddMutator (Self);\n\t\tsuper.PostBeginPlay();\n}\n\nfunction ModifyPlayer(Pawn Other)\n{\n\tlocal DeusExPlayer P;\n\tlocal DynMusicActor DA;\n\tlocal bool bFound;\n\tsuper.ModifyPlayer(Other);\n\tP = DeusExPlayer(Other);\n\t\n\tif(P != None)\n\t{\n\t\tforeach AllActors(class'DynMusicActor', DA)\n\t\t{\n\t\t\tif(DA.Watcher == P)\n\t\t\t\tbFound=True;\n\t\t}\n\t\t\n\t\t\n\t\tif(!bFound)\n\t\t{\n\t\t\tDA = Spawn(class'DynMusicActor',,,P.Location);\n\t\t\tDA.Watcher = P;\n\t\t\tDA.DM = Self;\n\t\t\tLog(\"Dynamic music attached.\");\n\t\t}\n\t}\n\t\n}\n\ndefaultproperties\n{\n}\n",
            "name": "DynMusicMutator.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "Mutator",
                "functions": {
                    "ModifyPlayer": {
                        "body": "{\n\tsuper.ModifyPlayer(Other);\n\tP = DeusExPlayer(Other);\n\t\n\tif(P != None)\n\t{\n\t\tforeach AllActors(class'DynMusicActor', DA)\n\t\t{\n\t\t\tif(DA.Watcher == P)\n\t\t\t\tbFound=True;\n\t\t}\n\t\t\n\t\t\n\t\tif(!bFound)\n\t\t{\n\t\t\tDA = Spawn(class'DynMusicActor',,,P.Location);\n\t\t\tDA.Watcher = P;\n\t\t\tDA.DM = Self;\n\t\t\tLog(\"Dynamic music attached.\");\n\t\t}\n\t}\n\t\n}",
                        "locals": [
                            "local DeusExPlayer P;",
                            "local DynMusicActor DA;",
                            "local bool bFound;"
                        ],
                        "modifiers": [],
                        "name": "ModifyPlayer",
                        "native": false,
                        "param": [
                            [
                                "Pawn",
                                "Other"
                            ]
                        ],
                        "return": ""
                    },
                    "PostBeginPlay": {
                        "body": "{\n\tLevel.Game.BaseMutator.AddMutator (Self);\n\t\tsuper.PostBeginPlay();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 47,
                "replication": "",
                "states": [],
                "variables": [
                    "var() config music BattleTrack;",
                    "var() config EMusicTransition Transition;",
                    "var() config byte             BattleSongSection, SongSection;",
                    "var() config byte             BattleCdTrack, CdTrack;",
                    "var() config string BattleEnterMsg, BattleExitMsg;"
                ]
            }
        },
        "ElecArmour.uc": {
            "body": "//=============================================================================\n// AdaptiveArmor.\n//=============================================================================\nclass ElecArmour extends PGArmour;\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\ndefaultproperties\n{\n     Dur=100\n     Def=10\n     bResistEMP=True\n     ItemName=\"Electric Armour\"\n     beltDescription=\"ELEC\"\n}\n",
            "name": "ElecArmour.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "Dur=100",
                    "Def=10",
                    "bResistEMP=True",
                    "ItemName=\"Electric Armour\"",
                    "beltDescription=\"ELEC\""
                ],
                "exec": [],
                "extends": "PGArmour",
                "functions": {
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 19,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "Estus.uc": {
            "body": "//=============================================================================\n// SuperTool.\n//=============================================================================\nclass Estus extends DeusExPickup;\n\n//Add colouring to the HUD, green(P3) - 5, (P4)yellow 4 3 2 1, (P2)red 0\nvar() int eUses, eMaxUses;\nvar int ru;\nvar bool bEstusArmed;\n\nvar float explosionDamage;\nvar float explosionRadius;\n\t\nreplication\n{\nreliable if (bNetOwner && Role==ROLE_Authority)\nru;\n}\n\nfunction DropFrom(vector StartLocation)\n{\n\tbEstusArmed=True;\n\tsuper.DropFrom(StartLocation);\n}\n\nfunction BecomePickup()\n{\n\tif(Owner != None)\n\t\tbEstusArmed=True;\n\tsuper.BecomePickup();\n}\n\nfunction BecomeItem()\n{\n\tbEstusArmed=False;\n\tsuper.BecomeItem();\n}\n\nfunction estusExplode()\n{\n\tlocal SphereEffect sphere;\n\tlocal ScorchMark s;\n\tlocal ExplosionLight light;\n\tlocal int i;\n\n\t// alert NPCs that I'm exploding\n\tAISendEvent('LoudNoise', EAITYPE_Audio, , explosionRadius*16);\n\tPlaySound(Sound'LargeExplosion1', SLOT_None,,, explosionRadius*16);\n\n\t// draw a pretty explosion\n\tlight = Spawn(class'ExplosionLight',,, Location);\n\tif (light != None)\n\t\tlight.size = 4;\n\n\tSpawn(class'ExplosionSmall',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionLarge',,, Location + 2*VRand()*CollisionRadius);\n\n\tsphere = Spawn(class'SphereEffect',,, Location);\n\tif (sphere != None)\n\t\tsphere.size = explosionRadius / 32.0;\n\n\t// spawn a mark\n\ts = spawn(class'ScorchMark', Base,, Location-vect(0,0,1)*CollisionHeight, Rotation+rot(16384,0,0));\n\tif (s != None)\n\t{\n\t\ts.DrawScale = FClamp(explosionDamage/30, 0.1, 3.0);\n\t\ts.ReattachDecal();\n\t}\n\n\t// spawn some rocks and flesh fragments\n\tfor (i=0; i<explosionDamage/6; i++)\n\t{\n\t\tif (FRand() < 0.3)\n\t\t\tspawn(class'Rockchip',,,Location);\n\t}\n\n\tHurtRadius(explosionDamage*eUses, explosionRadius, 'Exploded', explosionDamage*100, Location);\n}\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t\tMaxCopies = 1;\n}\n\nsimulated event RenderOverlays(canvas Canvas)\n{\n\tlocal DeusExPlayer P;\n\tlocal Actor CrosshairTarget;\n\tlocal float Scale, Accuracy, Dist;\n\tlocal vector HitLocation, HitNormal, StartTrace, EndTrace, X,Y,Z;\n\t\tlocal vector loc, line;\n\t\t\tlocal String KeyName, Alias, curKeyName;\n\tlocal int i;\n\tlocal string str;\n\tlocal Actor hitActor;\n\tlocal string mi;\n\t\n\tSuper.RenderOverlays(Canvas);\n\tP = DeusExPlayer(Owner);\n\tif ( P != None ) \n\t{\t\n\t\t\t\tloc = P.Location;\n\t\t\t\tloc.Z += P.BaseEyeHeight;\n\t\t\t\tline = Vector(P.ViewRotation) * 90000;\n\t\t\t\n\t\t\t\thitActor = Trace(hitLocation, hitNormal, loc+line, loc, true);\n\t\t\t\tDist = Abs(VSize(HitLocation - P.Location));\n\t\t\t\t//bOwnsCrossHair = True; \n\t\t\t\tScale = Canvas.ClipX/640;\n\t\t\t\tCanvas.SetPos(0.5 * Canvas.ClipX - 16 * Scale, 0.5 * Canvas.ClipY - 16 * Scale );\n\t\t\t\t//Canvas.Style = ERenderStyle.STY_Translucent;\n\t\t\t\tCanvas.DrawColor.R = 255;\n\t\t\t\tCanvas.DrawColor.G = 250;\n\t\t\t\tCanvas.DrawColor.B = 255;\n\t\t\t\tCanvas.Font = Canvas.SmallFont;\n\t\t\t\tif(ru == 0)\n\t\t\t\t\tmi = \"|P2\";\n\t\t\t\telse if(ru > 0 && ru < 5)\n\t\t\t\t\tmi = \"|P4\";\n\t\t\t\telse mi = \"|P3\";\n\t\t\t\t\t\n\t\t\t\tif(ScriptedPawn(hitActor) != None && dist < 256)\n\t\t\t\t\tstr = \" - Will use on \"$ScriptedPawn(hitActor).FamiliarName;\n\t\t\t\t\n\t\t\t\tif(DeusExPlayer(hitActor) != None && dist < 256)\n\t\t\t\t\tstr = \" - Will use on \"$DeusExPlayer(hitActor).PlayerReplicationInfo.PlayerName;\n\t\t\t\t\t\n\t\t\t\tCanvas.DrawText(\"      Uses left: \"$ru$str);\n\t}\n\t\t\t//else\n\t\t\t\t//bOwnsCrossHair = False; // Only for compatibility with HDX50\t\t\n}\n\nstate Activated\n{\n\tfunction Activate()\n\t{\n\t\t// can't turn it off\n\t}\n\n\tfunction BeginState()\n\t{\n\t\tlocal DeusExPlayer player, hitplayer;\n\t\tlocal scriptedpawn hitpawn;\n\t\tlocal dxScriptedPawn hitpawn2;\n\t\tlocal Actor       hitActor;\n\t\tlocal Vector      hitLocation, hitNormal;\n\t\tlocal Vector      position, line;\n\t\tlocal float Dist;\n\t\tSuper.BeginState();\n\t\tplayer = DeusExPlayer(Owner);\n\t\tif(eUses > 0)\n\t\t{\n\t\t\tposition    = player.Location;\n\t\t\tposition.Z += player.BaseEyeHeight;\n\t\t\tline        = Vector(player.ViewRotation) * 4000;\n\t\t\thitActor = Trace(hitLocation, hitNormal, position+line, position, true);\n\t\t\thitplayer = DeusExPlayer(hitActor);\n\t\t\thitpawn = ScriptedPawn(hitactor);\n\t\t\thitpawn2 = dxScriptedPawn(hitactor);\n\t\t\tDist = Abs(VSize(HitLocation - player.Location));\n\t\t\tif (player != None)\n\t\t\t{\n\t\t\t\tif (hitplayer != None && dist < 256) //Use on another player\n\t\t\t\t{\n\t\t\t\t\tSpawn(class'EstusCloud',,,Player.Location,player.ViewRotation);\n\t\t\t\t\tHitplayer.ClientMessage(\"You have been healed by\"@player.PlayerReplicationInfo.PlayerName);\n\t\t\t\t\tPlayer.ClientMessage(\"You have healed \"@hitplayer.PlayerReplicationInfo.PlayerName);\n\t\t\t\t\tEstusUse(hitplayer);\n\t\t\t\t}\n\t\t\t\telse if(hitpawn != None && dist < 256)\n\t\t\t\t{\n\t\t\t\t\tSpawn(class'EstusCloud',,,Player.Location,player.ViewRotation);\n\t\t\t\t\tHitPawn.Health = HitPawn.default.Health;\n\t\t\t\t\t HitPawn.HealthHead= HitPawn.default.HealthHead;\n\t\t\t\t\t HitPawn.HealthTorso= HitPawn.default.HealthTorso;\n\t\t\t\t\t HitPawn.HealthLegLeft= HitPawn.default.HealthLegLeft;\n\t\t\t\t\t HitPawn.HealthLegRight= HitPawn.default.HealthLegRight;\n\t\t\t\t\t HitPawn.HealthArmLeft= HitPawn.default.HealtharmLeft;\n\t\t\t\t\t HitPawn.HealthArmRight= HitPawn.default.HealthArmRight;\n\t\t\t\t\t Player.ClientMessage(\"You have healed \"@hitpawn.Familiarname);\n\t\t\t\t}\n\t\t\t\telse if(hitpawn2 != None && dist < 256)\n\t\t\t\t{\n\t\t\t\t\t Hitpawn2.CurrentBossArmour = Hitpawn2.default.CurrentBossArmour;\n\t\t\t\t\t Hitpawn2.CurrentReturnArmour = Hitpawn2.default.CurrentReturnArmour;\n\t\t\t\t}\n\t\t\t\telse //Use on self\n\t\t\t\t{\n\t\t\t\t\tEstusUse(player);\n\t\t\t\t}\n\t\t\t}\t\n\t\t\teUses--;\n\t\t\tru=eUses;\n\t\t\tplayer.ClientMessage(\"The flask has \"$eUses$\" uses left.\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tplayer.ClientMessage(\"The flask is empty.\");\n\t\t}\n\t\t\n\t\tGotoState('DeActivated');\n\t}\nBegin:\n}\n\nfunction EstusUse(deusexplayer p)\n{\n\tp.HealPlayer(50, True);\n\tp.StopPoison();\n\tp.ExtinguishFire();\n\tp.drugEffectTimer = 0;\n\tp.Energy += 50;\n\t\t\tif (p.Energy > p.EnergyMax)\n\t\t\t\tp.Energy = p.EnergyMax;\n}\n\nfunction bool UpdateInfo(Object winObject)\n{\n\tlocal PersonaInfoWindow winInfo;\n\tlocal string str;\n\n\twinInfo = PersonaInfoWindow(winObject);\n\tif (winInfo == None)\n\t\treturn False;\n\n\twinInfo.SetTitle(itemName @ String(eUses));\n\twinInfo.SetText(Description $ winInfo.CR() $ winInfo.CR());\n//\twinInfo.AppendText(Sprintf(RechargesLabel, RechargeAmount));\n\n\t// Print the number of copies\n\tstr = CountLabel @ String(eUses);\n\twinInfo.AppendText(winInfo.CR() $ winInfo.CR() $ str);\n\n\treturn True;\n}\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return (BeltSpot == 9);\n}\n\nfunction Destroyed() \n{\n\tlocal ProjectileGenerator gen;\n\t\n\t\n\tif ( !bEstusArmed || eUses == 0)\n\t\treturn;\n\t\t\n\tEstusExplode();\n\tgen = Spawn(class'ProjectileGenerator',,, Location);\n\tif (gen != None)\n\t{\n     //gen.RemoteRole = ROLE_None;\n\t\t//gen.particleDrawScale = 1.0;\n\t\tgen.checkTime = 0.05;\n\t\tgen.frequency = 1.0;\n\t\tgen.ejectSpeed = 200.0;\n\t\t//gen.bGravity = True;\n\t\tgen.bRandomEject = True;\n\t\tgen.ProjectileClass=class'Fireball';\n\t\tgen.LifeSpan = 2.0;\n\t}\n\tsuper.Destroyed();\n}\n\ndefaultproperties\n{\n     eUses=5\n     eMaxUses=5\n     ru=5\n     explosionDamage=100.000000\n     explosionRadius=100.000000\n     bBreakable=True\n     maxCopies=1\n     bActivatable=True\n     ItemName=\"Estus flask\"\n     PlayerViewOffset=(X=16.000000,Y=8.000000,Z=-16.000000)\n     PlayerViewMesh=LodMesh'DeusExDeco.Flask'\n     PickupViewMesh=LodMesh'DeusExDeco.Flask'\n     ThirdPersonMesh=LodMesh'DeusExDeco.Flask'\n     LandSound=Sound'DeusExSounds.Generic.GlassHit1'\n     Icon=Texture'PGAssets.Icons.BeltIconEstus'\n     M_Activated=\"\"\n     largeIconWidth=18\n     largeIconHeight=44\n     Description=\"Estus magic potion of healing\"\n     beltDescription=\"ESTUS\"\n     Texture=Texture'DeusExDeco.Skins.AlarmLightTex9'\n     Mesh=LodMesh'DeusExDeco.Flask'\n     AmbientGlow=20\n     MultiSkins(0)=Texture'DeusExDeco.Skins.AlarmLightTex9'\n     MultiSkins(1)=Texture'DeusExDeco.Skins.AlarmLightTex9'\n     MultiSkins(2)=Texture'DeusExDeco.Skins.AlarmLightTex9'\n     MultiSkins(3)=Texture'DeusExDeco.Skins.AlarmLightTex9'\n     MultiSkins(4)=Texture'DeusExDeco.Skins.AlarmLightTex9'\n     MultiSkins(5)=Texture'DeusExDeco.Skins.AlarmLightTex9'\n     MultiSkins(6)=Texture'DeusExDeco.Skins.AlarmLightTex9'\n     MultiSkins(7)=Texture'DeusExDeco.Skins.AlarmLightTex9'\n     SoundVolume=64\n     CollisionRadius=4.200000\n     CollisionHeight=7.450000\n     LightBrightness=50\n     LightSaturation=20\n     LightRadius=5\n     Mass=10.000000\n     Buoyancy=8.000000\n}\n",
            "name": "Estus.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "eUses=5",
                    "eMaxUses=5",
                    "ru=5",
                    "explosionDamage=100.000000",
                    "explosionRadius=100.000000",
                    "bBreakable=True",
                    "maxCopies=1",
                    "bActivatable=True",
                    "ItemName=\"Estus flask\"",
                    "PlayerViewOffset=(X=16.000000,Y=8.000000,Z=-16.000000)",
                    "PlayerViewMesh=LodMesh'DeusExDeco.Flask'",
                    "PickupViewMesh=LodMesh'DeusExDeco.Flask'",
                    "ThirdPersonMesh=LodMesh'DeusExDeco.Flask'",
                    "LandSound=Sound'DeusExSounds.Generic.GlassHit1'",
                    "Icon=Texture'PGAssets.Icons.BeltIconEstus'",
                    "M_Activated=\"\"",
                    "largeIconWidth=18",
                    "largeIconHeight=44",
                    "Description=\"Estus magic potion of healing\"",
                    "beltDescription=\"ESTUS\"",
                    "Texture=Texture'DeusExDeco.Skins.AlarmLightTex9'",
                    "Mesh=LodMesh'DeusExDeco.Flask'",
                    "AmbientGlow=20",
                    "MultiSkins(0)=Texture'DeusExDeco.Skins.AlarmLightTex9'",
                    "MultiSkins(1)=Texture'DeusExDeco.Skins.AlarmLightTex9'",
                    "MultiSkins(2)=Texture'DeusExDeco.Skins.AlarmLightTex9'",
                    "MultiSkins(3)=Texture'DeusExDeco.Skins.AlarmLightTex9'",
                    "MultiSkins(4)=Texture'DeusExDeco.Skins.AlarmLightTex9'",
                    "MultiSkins(5)=Texture'DeusExDeco.Skins.AlarmLightTex9'",
                    "MultiSkins(6)=Texture'DeusExDeco.Skins.AlarmLightTex9'",
                    "MultiSkins(7)=Texture'DeusExDeco.Skins.AlarmLightTex9'",
                    "SoundVolume=64",
                    "CollisionRadius=4.200000",
                    "CollisionHeight=7.450000",
                    "LightBrightness=50",
                    "LightSaturation=20",
                    "LightRadius=5",
                    "Mass=10.000000",
                    "Buoyancy=8.000000"
                ],
                "exec": [],
                "extends": "DeusExPickup",
                "functions": {
                    "Activate": {
                        "body": "{\n\t\t// can't turn it off\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Activate",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "BecomeItem": {
                        "body": "{\n\tbEstusArmed=False;\n\tsuper.BecomeItem();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "BecomeItem",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "BecomePickup": {
                        "body": "{\n\tif(Owner != None)\n\t\tbEstusArmed=True;\n\tsuper.BecomePickup();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "BecomePickup",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "BeginState": {
                        "body": "{\n\t\tSuper.BeginState();\n\t\tplayer = DeusExPlayer(Owner);\n\t\tif(eUses > 0)\n\t\t{\n\t\t\tposition    = player.Location;\n\t\t\tposition.Z += player.BaseEyeHeight;\n\t\t\tline        = Vector(player.ViewRotation) * 4000;\n\t\t\thitActor = Trace(hitLocation, hitNormal, position+line, position, true);\n\t\t\thitplayer = DeusExPlayer(hitActor);\n\t\t\thitpawn = ScriptedPawn(hitactor);\n\t\t\thitpawn2 = dxScriptedPawn(hitactor);\n\t\t\tDist = Abs(VSize(HitLocation - player.Location));\n\t\t\tif (player != None)\n\t\t\t{\n\t\t\t\tif (hitplayer != None && dist < 256) //Use on another player\n\t\t\t\t{\n\t\t\t\t\tSpawn(class'EstusCloud',,,Player.Location,player.ViewRotation);\n\t\t\t\t\tHitplayer.ClientMessage(\"You have been healed by\"@player.PlayerReplicationInfo.PlayerName);\n\t\t\t\t\tPlayer.ClientMessage(\"You have healed \"@hitplayer.PlayerReplicationInfo.PlayerName);\n\t\t\t\t\tEstusUse(hitplayer);\n\t\t\t\t}\n\t\t\t\telse if(hitpawn != None && dist < 256)\n\t\t\t\t{\n\t\t\t\t\tSpawn(class'EstusCloud',,,Player.Location,player.ViewRotation);\n\t\t\t\t\tHitPawn.Health = HitPawn.default.Health;\n\t\t\t\t\t HitPawn.HealthHead= HitPawn.default.HealthHead;\n\t\t\t\t\t HitPawn.HealthTorso= HitPawn.default.HealthTorso;\n\t\t\t\t\t HitPawn.HealthLegLeft= HitPawn.default.HealthLegLeft;\n\t\t\t\t\t HitPawn.HealthLegRight= HitPawn.default.HealthLegRight;\n\t\t\t\t\t HitPawn.HealthArmLeft= HitPawn.default.HealtharmLeft;\n\t\t\t\t\t HitPawn.HealthArmRight= HitPawn.default.HealthArmRight;\n\t\t\t\t\t Player.ClientMessage(\"You have healed \"@hitpawn.Familiarname);\n\t\t\t\t}\n\t\t\t\telse if(hitpawn2 != None && dist < 256)\n\t\t\t\t{\n\t\t\t\t\t Hitpawn2.CurrentBossArmour = Hitpawn2.default.CurrentBossArmour;\n\t\t\t\t\t Hitpawn2.CurrentReturnArmour = Hitpawn2.default.CurrentReturnArmour;\n\t\t\t\t}\n\t\t\t\telse //Use on self\n\t\t\t\t{\n\t\t\t\t\tEstusUse(player);\n\t\t\t\t}\n\t\t\t}\t\n\t\t\teUses--;\n\t\t\tru=eUses;\n\t\t\tplayer.ClientMessage(\"The flask has \"$eUses$\" uses left.\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tplayer.ClientMessage(\"The flask is empty.\");\n\t\t}\n\t\t\n\t\tGotoState('DeActivated');\n\t}",
                        "locals": [
                            "local DeusExPlayer player, hitplayer;",
                            "local scriptedpawn hitpawn;",
                            "local dxScriptedPawn hitpawn2;",
                            "local Actor       hitActor;",
                            "local Vector      hitLocation, hitNormal;",
                            "local Vector      position, line;",
                            "local float Dist;"
                        ],
                        "modifiers": [],
                        "name": "BeginState",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Destroyed": {
                        "body": "{\n\t\n\t\n\tif ( !bEstusArmed || eUses == 0)\n\t\treturn;\n\t\t\n\tEstusExplode();\n\tgen = Spawn(class'ProjectileGenerator',,, Location);\n\tif (gen != None)\n\t{\n     //gen.RemoteRole = ROLE_None;\n\t\t//gen.particleDrawScale = 1.0;\n\t\tgen.checkTime = 0.05;\n\t\tgen.frequency = 1.0;\n\t\tgen.ejectSpeed = 200.0;\n\t\t//gen.bGravity = True;\n\t\tgen.bRandomEject = True;\n\t\tgen.ProjectileClass=class'Fireball';\n\t\tgen.LifeSpan = 2.0;\n\t}\n\tsuper.Destroyed();\n}",
                        "locals": [
                            "local ProjectileGenerator gen;"
                        ],
                        "modifiers": [],
                        "name": "Destroyed",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "DropFrom": {
                        "body": "{\n\tbEstusArmed=True;\n\tsuper.DropFrom(StartLocation);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "DropFrom",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "StartLocation"
                            ]
                        ],
                        "return": ""
                    },
                    "EstusUse": {
                        "body": "{\n\tp.HealPlayer(50, True);\n\tp.StopPoison();\n\tp.ExtinguishFire();\n\tp.drugEffectTimer = 0;\n\tp.Energy += 50;\n\t\t\tif (p.Energy > p.EnergyMax)\n\t\t\t\tp.Energy = p.EnergyMax;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "EstusUse",
                        "native": false,
                        "param": [
                            [
                                "deusexplayer",
                                "p"
                            ]
                        ],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t\tMaxCopies = 1;\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "RenderOverlays": {
                        "body": "{\n\t\n\tSuper.RenderOverlays(Canvas);\n\tP = DeusExPlayer(Owner);\n\tif ( P != None ) \n\t{\t\n\t\t\t\tloc = P.Location;\n\t\t\t\tloc.Z += P.BaseEyeHeight;\n\t\t\t\tline = Vector(P.ViewRotation) * 90000;\n\t\t\t\n\t\t\t\thitActor = Trace(hitLocation, hitNormal, loc+line, loc, true);\n\t\t\t\tDist = Abs(VSize(HitLocation - P.Location));\n\t\t\t\t//bOwnsCrossHair = True; \n\t\t\t\tScale = Canvas.ClipX/640;\n\t\t\t\tCanvas.SetPos(0.5 * Canvas.ClipX - 16 * Scale, 0.5 * Canvas.ClipY - 16 * Scale );\n\t\t\t\t//Canvas.Style = ERenderStyle.STY_Translucent;\n\t\t\t\tCanvas.DrawColor.R = 255;\n\t\t\t\tCanvas.DrawColor.G = 250;\n\t\t\t\tCanvas.DrawColor.B = 255;\n\t\t\t\tCanvas.Font = Canvas.SmallFont;\n\t\t\t\tif(ru == 0)\n\t\t\t\t\tmi = \"|P2\";\n\t\t\t\telse if(ru > 0 && ru < 5)\n\t\t\t\t\tmi = \"|P4\";\n\t\t\t\telse mi = \"|P3\";\n\t\t\t\t\t\n\t\t\t\tif(ScriptedPawn(hitActor) != None && dist < 256)\n\t\t\t\t\tstr = \" - Will use on \"$ScriptedPawn(hitActor).FamiliarName;\n\t\t\t\t\n\t\t\t\tif(DeusExPlayer(hitActor) != None && dist < 256)\n\t\t\t\t\tstr = \" - Will use on \"$DeusExPlayer(hitActor).PlayerReplicationInfo.PlayerName;\n\t\t\t\t\t\n\t\t\t\tCanvas.DrawText(\"      Uses left: \"$ru$str);\n\t}\n\t\t\t//else\n\t\t\t\t//bOwnsCrossHair = False; // Only for compatibility with HDX50\t\t\n}",
                        "locals": [
                            "local DeusExPlayer P;",
                            "local Actor CrosshairTarget;",
                            "local float Scale, Accuracy, Dist;",
                            "local vector HitLocation, HitNormal, StartTrace, EndTrace, X,Y,Z;",
                            "local vector loc, line;",
                            "local String KeyName, Alias, curKeyName;",
                            "local int i;",
                            "local string str;",
                            "local Actor hitActor;",
                            "local string mi;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "RenderOverlays",
                        "native": false,
                        "param": [
                            [
                                "canvas",
                                "Canvas"
                            ]
                        ],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return (BeltSpot == 9);\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    },
                    "UpdateInfo": {
                        "body": "{\n\n\twinInfo = PersonaInfoWindow(winObject);\n\tif (winInfo == None)\n\t\treturn False;\n\n\twinInfo.SetTitle(itemName @ String(eUses));\n\twinInfo.SetText(Description $ winInfo.CR() $ winInfo.CR());\n//\twinInfo.AppendText(Sprintf(RechargesLabel, RechargeAmount));\n\n\t// Print the number of copies\n\tstr = CountLabel @ String(eUses);\n\twinInfo.AppendText(winInfo.CR() $ winInfo.CR() $ str);\n\n\treturn True;\n}",
                        "locals": [
                            "local PersonaInfoWindow winInfo;",
                            "local string str;"
                        ],
                        "modifiers": [],
                        "name": "UpdateInfo",
                        "native": false,
                        "param": [
                            [
                                "Object",
                                "winObject"
                            ]
                        ],
                        "return": "bool"
                    },
                    "estusExplode": {
                        "body": "{\n\n\t// alert NPCs that I'm exploding\n\tAISendEvent('LoudNoise', EAITYPE_Audio, , explosionRadius*16);\n\tPlaySound(Sound'LargeExplosion1', SLOT_None,,, explosionRadius*16);\n\n\t// draw a pretty explosion\n\tlight = Spawn(class'ExplosionLight',,, Location);\n\tif (light != None)\n\t\tlight.size = 4;\n\n\tSpawn(class'ExplosionSmall',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionLarge',,, Location + 2*VRand()*CollisionRadius);\n\n\tsphere = Spawn(class'SphereEffect',,, Location);\n\tif (sphere != None)\n\t\tsphere.size = explosionRadius / 32.0;\n\n\t// spawn a mark\n\ts = spawn(class'ScorchMark', Base,, Location-vect(0,0,1)*CollisionHeight, Rotation+rot(16384,0,0));\n\tif (s != None)\n\t{\n\t\ts.DrawScale = FClamp(explosionDamage/30, 0.1, 3.0);\n\t\ts.ReattachDecal();\n\t}\n\n\t// spawn some rocks and flesh fragments\n\tfor (i=0; i<explosionDamage/6; i++)\n\t{\n\t\tif (FRand() < 0.3)\n\t\t\tspawn(class'Rockchip',,,Location);\n\t}\n\n\tHurtRadius(explosionDamage*eUses, explosionRadius, 'Exploded', explosionDamage*100, Location);\n}",
                        "locals": [
                            "local SphereEffect sphere;",
                            "local ScorchMark s;",
                            "local ExplosionLight light;",
                            "local int i;"
                        ],
                        "modifiers": [],
                        "name": "estusExplode",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 316,
                "replication": "",
                "states": [],
                "variables": [
                    "var() int eUses, eMaxUses;",
                    "var int ru;",
                    "var bool bEstusArmed;",
                    "var float explosionDamage;",
                    "var float explosionRadius;"
                ]
            }
        },
        "EstusCatalyst.uc": {
            "body": "class EstusCatalyst extends CraftingMaterial;\n\nfunction bool OtherRequirements()\n{\n\tlocal GlassShard GS;\n\tlocal Medkit m;\n\tlocal int gi, mi;\n\t\n\tforeach AllActors(class'GlassShard',GS)\n\t\tif(GS.Owner == Owner)\n\t\t\tgi = gs.NumCopies;\n\t\t\t\n\n\tforeach AllActors(class'Medkit',m)\n\t\tif(m.Owner == Owner)\n\t\t\tmi = m.NumCopies;\n\t\n\tDeusExPlayer(Owner).ClientMessage(\"[Extra ingredients] You have \"$gi$\" Glass Shards and \"$mi$\" Medkits. 5 of each required.\");\n\tif(gi >= 5 && mi >= 5)\n\t{\n\t\tforeach AllActors(class'GlassShard',GS)\n\t\t\t{\n\t\t\t\tif(GS.Owner == Owner)\n\t\t\t\t\t{\n\t\t\t\t\t\tgs.NumCopies-=5;\n\t\t\t\t\t\tif(gs.NumCopies <= 0)\n\t\t\t\t\t\t\tGS.Destroy();\n\t\t\t\t\t}\n\t\t\t}\n\t\t\n\t\tforeach AllActors(class'Medkit',m)\n\t\t\t{\n\t\t\t\tif(m.Owner == Owner)\n\t\t\t\t\t{\n\t\t\t\t\t\tm.NumCopies-=5;\n\t\t\t\t\t\tif(m.NumCopies <= 0)\n\t\t\t\t\t\t\tm.Destroy();\n\t\t\t\t\t}\n\t\t\t}\n\t\treturn True;\n\t}\n}\n\ndefaultproperties\n{\n     InvResult=Class'PartyStuff.Estus'\n     NumNeeded=1\n     DispStr=\"Requires 1x Catalyst, 5x Glass Shard, 5x Medkit to make Estus\"\n     ItemName=\"Estus Catalyst\"\n     PlayerViewMesh=LodMesh'DeusExDeco.Flask'\n     PickupViewMesh=LodMesh'DeusExDeco.Flask'\n     ThirdPersonMesh=LodMesh'DeusExDeco.Flask'\n     Icon=Texture'PGAssets.Icons.BeltIconCraftingFlask'\n     beltDescription=\"CATALYST\"\n     Mesh=LodMesh'DeusExDeco.Flask'\n     CollisionRadius=4.200000\n     CollisionHeight=7.450000\n}\n",
            "name": "EstusCatalyst.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "InvResult=Class'PartyStuff.Estus'",
                    "NumNeeded=1",
                    "DispStr=\"Requires 1x Catalyst, 5x Glass Shard, 5x Medkit to make Estus\"",
                    "ItemName=\"Estus Catalyst\"",
                    "PlayerViewMesh=LodMesh'DeusExDeco.Flask'",
                    "PickupViewMesh=LodMesh'DeusExDeco.Flask'",
                    "ThirdPersonMesh=LodMesh'DeusExDeco.Flask'",
                    "Icon=Texture'PGAssets.Icons.BeltIconCraftingFlask'",
                    "beltDescription=\"CATALYST\"",
                    "Mesh=LodMesh'DeusExDeco.Flask'",
                    "CollisionRadius=4.200000",
                    "CollisionHeight=7.450000"
                ],
                "exec": [],
                "extends": "CraftingMaterial",
                "functions": {
                    "OtherRequirements": {
                        "body": "{\n\t\n\tforeach AllActors(class'GlassShard',GS)\n\t\tif(GS.Owner == Owner)\n\t\t\tgi = gs.NumCopies;\n\t\t\t\n\n\tforeach AllActors(class'Medkit',m)\n\t\tif(m.Owner == Owner)\n\t\t\tmi = m.NumCopies;\n\t\n\tDeusExPlayer(Owner).ClientMessage(\"[Extra ingredients] You have \"$gi$\" Glass Shards and \"$mi$\" Medkits. 5 of each required.\");\n\tif(gi >= 5 && mi >= 5)\n\t{\n\t\tforeach AllActors(class'GlassShard',GS)\n\t\t\t{\n\t\t\t\tif(GS.Owner == Owner)\n\t\t\t\t\t{\n\t\t\t\t\t\tgs.NumCopies-=5;\n\t\t\t\t\t\tif(gs.NumCopies <= 0)\n\t\t\t\t\t\t\tGS.Destroy();\n\t\t\t\t\t}\n\t\t\t}\n\t\t\n\t\tforeach AllActors(class'Medkit',m)\n\t\t\t{\n\t\t\t\tif(m.Owner == Owner)\n\t\t\t\t\t{\n\t\t\t\t\t\tm.NumCopies-=5;\n\t\t\t\t\t\tif(m.NumCopies <= 0)\n\t\t\t\t\t\t\tm.Destroy();\n\t\t\t\t\t}\n\t\t\t}\n\t\treturn True;\n\t}\n}",
                        "locals": [
                            "local GlassShard GS;",
                            "local Medkit m;",
                            "local int gi, mi;"
                        ],
                        "modifiers": [],
                        "name": "OtherRequirements",
                        "native": false,
                        "param": [],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 59,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "EstusCloud.uc": {
            "body": "//=============================================================================\n// Cloud.\n//=============================================================================\nclass EstusCloud extends DeusExProjectile;\n\nvar bool bFloating;\nvar float cloudRadius;\nvar float damageInterval;\nvar vector CloudLocation; //to make sure location is updated w/o making it dumb proxy\n\nreplication \n{\n\treliable if ( Role == ROLE_Authority )\n\t\tCloudLocation;\n}\n\nauto simulated state Flying\n{\n\tfunction HitWall(vector HitNormal, actor Wall)\n\t{\n\t\t// do nothing\n\t\tVelocity = vect(0,0,0);\n\t}\n\tfunction ProcessTouch (Actor Other, Vector HitLocation)\n\t{\n\t\t// do nothing\n\t}\n}\n\nevent ZoneChange(ZoneInfo NewZone)\n{\n\tSuper.ZoneChange(NewZone);\n\n\t// clouds can't live underwater, so kill us quickly if we enter the water\n\tif ((NewZone.bWaterZone) && (LifeSpan > 2.0))\n\t\tLifeSpan = 2.0;\n}\n\nfunction Timer()\n{\n}\n\nsimulated function Tick(float deltaTime)\n{\n\tlocal float value;\n\tlocal float sizeMult;\n   local float NewDrawScale;\n\n   if (Role == ROLE_Authority)\n      CloudLocation = Location;\n   else\n      SetLocation(CloudLocation);\n\n\t// don't Super.Tick() becuase we don't want gravity to affect the stream\n\ttime += deltaTime;\n\n\tvalue = 1.0+time;\n\tif (MinDrawScale > 0)\n\t\tsizeMult = MaxDrawScale/MinDrawScale;\n\telse\n\t\tsizeMult = 1;\n\n   // DEUS_EX AMSD Update drawscale less often in mp, to reduce bandwidth hit.\n   // Effect won't look quite as good for listen server client... but will otherwise\n   // help tremendously (one gas grenade was 3k a sec in traffic).\n   NewDrawScale = (-sizeMult/(value*value) + (sizeMult+1))*MinDrawScale;\n\n\tif (Level.Netmode == NM_Standalone)\n   {\n      DrawScale = NewDrawScale;\n   }\n   else if (Level.Netmode == NM_Client)\n   {\n      DrawScale = NewDrawScale;\n   }\n   else if (Level.Netmode == NM_DedicatedServer)\n   {\n      //Do nothing\n   }\n   else\n   {\n      //On a listen server, just start it full size.\n      DrawScale = (-sizeMult/(50*50) + (sizeMult+1))*MinDrawScale;\n   }\n\n//      DrawScale = (-sizeMult/(value*value) + (sizeMult+1))*MinDrawScale;\n   if (Role == ROLE_Authority)\t\n      ScaleGlow = FClamp(LifeSpan*0.5, 0.0, 1.0);\n\n\t// make it swim around a bit at random\n\tif (bFloating)\n\t{\n\t\tAcceleration = VRand() * 15;\n\t\tAcceleration.Z = 0;\n\t}\n}\n\ndefaultproperties\n{\n     cloudRadius=128.000000\n     damageInterval=1.000000\n     blastRadius=1.000000\n     AccurateRange=100\n     maxRange=100\n     maxDrawScale=2.000000\n     bIgnoresNanoDefense=True\n     ItemName=\"Cloud\"\n     ItemArticle=\"a\"\n     speed=300.000000\n     MaxSpeed=300.000000\n     MomentumTransfer=100\n     LifeSpan=1.000000\n     DrawType=DT_Sprite\n     Style=STY_Translucent\n     Texture=WetTexture'Effects.Smoke.Gas_Tear_A'\n     DrawScale=0.010000\n     bUnlit=True\n     CollisionRadius=16.000000\n     CollisionHeight=16.000000\n}\n",
            "name": "EstusCloud.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "cloudRadius=128.000000",
                    "damageInterval=1.000000",
                    "blastRadius=1.000000",
                    "AccurateRange=100",
                    "maxRange=100",
                    "maxDrawScale=2.000000",
                    "bIgnoresNanoDefense=True",
                    "ItemName=\"Cloud\"",
                    "ItemArticle=\"a\"",
                    "speed=300.000000",
                    "MaxSpeed=300.000000",
                    "MomentumTransfer=100",
                    "LifeSpan=1.000000",
                    "DrawType=DT_Sprite",
                    "Style=STY_Translucent",
                    "Texture=WetTexture'Effects.Smoke.Gas_Tear_A'",
                    "DrawScale=0.010000",
                    "bUnlit=True",
                    "CollisionRadius=16.000000",
                    "CollisionHeight=16.000000"
                ],
                "exec": [],
                "extends": "DeusExProjectile",
                "functions": {
                    "HitWall": {
                        "body": "{\n\t\t// do nothing\n\t\tVelocity = vect(0,0,0);\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "HitWall",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "HitNormal"
                            ],
                            [
                                "actor",
                                "Wall"
                            ]
                        ],
                        "return": ""
                    },
                    "ProcessTouch": {
                        "body": "{\n\t\t// do nothing\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "ProcessTouch",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Other"
                            ],
                            [
                                "Vector",
                                "HitLocation"
                            ]
                        ],
                        "return": ""
                    },
                    "Tick": {
                        "body": "{\n\n   if (Role == ROLE_Authority)\n      CloudLocation = Location;\n   else\n      SetLocation(CloudLocation);\n\n\t// don't Super.Tick() becuase we don't want gravity to affect the stream\n\ttime += deltaTime;\n\n\tvalue = 1.0+time;\n\tif (MinDrawScale > 0)\n\t\tsizeMult = MaxDrawScale/MinDrawScale;\n\telse\n\t\tsizeMult = 1;\n\n   // DEUS_EX AMSD Update drawscale less often in mp, to reduce bandwidth hit.\n   // Effect won't look quite as good for listen server client... but will otherwise\n   // help tremendously (one gas grenade was 3k a sec in traffic).\n   NewDrawScale = (-sizeMult/(value*value) + (sizeMult+1))*MinDrawScale;\n\n\tif (Level.Netmode == NM_Standalone)\n   {\n      DrawScale = NewDrawScale;\n   }\n   else if (Level.Netmode == NM_Client)\n   {\n      DrawScale = NewDrawScale;\n   }\n   else if (Level.Netmode == NM_DedicatedServer)\n   {\n      //Do nothing\n   }\n   else\n   {\n      //On a listen server, just start it full size.\n      DrawScale = (-sizeMult/(50*50) + (sizeMult+1))*MinDrawScale;\n   }\n\n//      DrawScale = (-sizeMult/(value*value) + (sizeMult+1))*MinDrawScale;\n   if (Role == ROLE_Authority)\t\n      ScaleGlow = FClamp(LifeSpan*0.5, 0.0, 1.0);\n\n\t// make it swim around a bit at random\n\tif (bFloating)\n\t{\n\t\tAcceleration = VRand() * 15;\n\t\tAcceleration.Z = 0;\n\t}\n}",
                        "locals": [
                            "local float value;",
                            "local float sizeMult;",
                            "local float NewDrawScale;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltaTime"
                            ]
                        ],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ZoneChange": {
                        "body": "{\n\tSuper.ZoneChange(NewZone);\n\n\t// clouds can't live underwater, so kill us quickly if we enter the water\n\tif ((NewZone.bWaterZone) && (LifeSpan > 2.0))\n\t\tLifeSpan = 2.0;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "ZoneChange",
                        "native": false,
                        "param": [
                            [
                                "ZoneInfo",
                                "NewZone"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 121,
                "replication": "",
                "states": [],
                "variables": [
                    "var bool bFloating;",
                    "var float cloudRadius;",
                    "var float damageInterval;",
                    "var vector CloudLocation; //to make sure location is updated w/o making it dumb proxy"
                ]
            }
        },
        "FLBasketball.uc": {
            "body": "class FLBasketball extends ThrownProjectile;\n\nvar bool bDoomedToDestroy;\nvar bool bAlreadyScored;\nvar bool bAllowBumping;\n\nsimulated function Timer()\n{\n\tif(!bAllowBumping)\n\t{\n\t\tbAllowBumping=True;\n\t}\n\tif (bDoomedToDestroy)\n\t{\n\t\tDestroy();\n\t}\n\treturn;\n}\n\nsimulated function Tick(float deltaTime)\n{\n\treturn;\n}\n\nsimulated function TakeDamage(int Damage, Pawn instigatedBy, Vector HitLocation, Vector Momentum, name damageType)\n{\n\treturn;\n}\n\nsimulated function Explode(vector HitLocation, vector HitNormal)\n{\n\treturn;\n}\n\nfunction Frob(Actor Frobber, Inventory frobWith)\n{\n\tlocal FLBasketball4Player FLB4P;\n\tif (!bDoomedToDestroy)\n\t{\n\t\tFLB4P = Spawn(Class'FLBasketball4Player',Frobber,,Location,Rotation);\n\t\tDeusExPlayer(Frobber).FrobTarget = FLB4P;\n\t\tDeusExPlayer(Frobber).GrabDecoration();\n\t\tSuper.Frob(Frobber, frobWith);\n\t\tDestroy();\n\t}\n\telse \n\t{\n\t\treturn;\n\t}\n}\n\nauto simulated state Flying\n{\n\tsimulated function HitWall(vector HitNormal, actor HitWall)\n\t{\n\t\tlocal float speed;\n\t\t\n\t\tVelocity = 0.8*((Velocity dot HitNormal) * HitNormal * (-2.0) + Velocity);\n\t\tspeed = VSize(Velocity);\n\t\tbFixedRotationDir = True;\n\t\tRotationRate = RotRand(False);\n\t\tif ((speed > 0) && (speed < 30) && (HitNormal.Z > 0.7))\n\t\t{\n\t\t\tSetPhysics(PHYS_None, HitWall);\n\t\t\tif (Physics == PHYS_None)\n\t\t\t\tbFixedRotationDir = False;\n\t\t}\n\t\n\t\tif (HitWall.IsA('Mover'))\n\t\t{\n\t\t\tHitWall.TakeDamage(speed/58, Pawn(Owner), HitWall.Location, MomentumTransfer*Normal(Velocity), 'Shot');\n\t\t}\n\t\t\n\t\telse if (speed > 30)\n\t\t{\t\n\t\t\tif ((FRand() >= 0.75) && (FRand() < 1.0))\n\t\t\t{\n\t\t\t\tPlaySound(sound'Bounce1', SLOT_None, 3);\n\t\t\t}\n\t\t\telse if ((FRand() >= 0.5) && (FRand() < 0.75))\n\t\t\t{\n\t\t\t\tPlaySound(sound'Bounce2', SLOT_None, 3);\t\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tPlaySound(sound'Bounce3', SLOT_None, 3);\t\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction bump(actor other)\n{\nlocal DeusExPlayer Player;\nPlayer = DeusExPlayer(other);\n\n\tif((other.IsA('DeusExPlayer')))\n\t{\n\t\tif(bAllowBumping)\n\t\t{\n\t\t\tfrob(Other,None);\n\t\t}\n\t}\n}\n\nsimulated function BeginPlay()\n{\n\tSuper.BeginPlay();\n}\n\ndefaultproperties\n{\n     bAllowBumping=True\n     bDisabled=True\n     bExplodes=False\n     bBlood=False\n     bEmitDanger=False\n     bIgnoresNanoDefense=True\n     ItemName=\"Basketball\"\n     LifeSpan=0.000000\n     bDirectional=False\n     Mesh=LodMesh'PGAssets.FLBasketball'\n     DrawScale=0.710000\n     CollisionRadius=10.000000\n     CollisionHeight=10.000000\n     bBlockActors=True\n     bBlockPlayers=True\n     Mass=8.000000\n     Buoyancy=10.000000\n}\n",
            "name": "FLBasketball.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bAllowBumping=True",
                    "bDisabled=True",
                    "bExplodes=False",
                    "bBlood=False",
                    "bEmitDanger=False",
                    "bIgnoresNanoDefense=True",
                    "ItemName=\"Basketball\"",
                    "LifeSpan=0.000000",
                    "bDirectional=False",
                    "Mesh=LodMesh'PGAssets.FLBasketball'",
                    "DrawScale=0.710000",
                    "CollisionRadius=10.000000",
                    "CollisionHeight=10.000000",
                    "bBlockActors=True",
                    "bBlockPlayers=True",
                    "Mass=8.000000",
                    "Buoyancy=10.000000"
                ],
                "exec": [],
                "extends": "ThrownProjectile",
                "functions": {
                    "BeginPlay": {
                        "body": "{\n\tSuper.BeginPlay();\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "BeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Explode": {
                        "body": "{\n\treturn;\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Explode",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "HitLocation"
                            ],
                            [
                                "vector",
                                "HitNormal"
                            ]
                        ],
                        "return": ""
                    },
                    "Frob": {
                        "body": "{\n\tif (!bDoomedToDestroy)\n\t{\n\t\tFLB4P = Spawn(Class'FLBasketball4Player',Frobber,,Location,Rotation);\n\t\tDeusExPlayer(Frobber).FrobTarget = FLB4P;\n\t\tDeusExPlayer(Frobber).GrabDecoration();\n\t\tSuper.Frob(Frobber, frobWith);\n\t\tDestroy();\n\t}\n\telse \n\t{\n\t\treturn;\n\t}\n}",
                        "locals": [
                            "local FLBasketball4Player FLB4P;"
                        ],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    },
                    "HitWall": {
                        "body": "{\n\t\t\n\t\tVelocity = 0.8*((Velocity dot HitNormal) * HitNormal * (-2.0) + Velocity);\n\t\tspeed = VSize(Velocity);\n\t\tbFixedRotationDir = True;\n\t\tRotationRate = RotRand(False);\n\t\tif ((speed > 0) && (speed < 30) && (HitNormal.Z > 0.7))\n\t\t{\n\t\t\tSetPhysics(PHYS_None, HitWall);\n\t\t\tif (Physics == PHYS_None)\n\t\t\t\tbFixedRotationDir = False;\n\t\t}\n\t\n\t\tif (HitWall.IsA('Mover'))\n\t\t{\n\t\t\tHitWall.TakeDamage(speed/58, Pawn(Owner), HitWall.Location, MomentumTransfer*Normal(Velocity), 'Shot');\n\t\t}\n\t\t\n\t\telse if (speed > 30)\n\t\t{\t\n\t\t\tif ((FRand() >= 0.75) && (FRand() < 1.0))\n\t\t\t{\n\t\t\t\tPlaySound(sound'Bounce1', SLOT_None, 3);\n\t\t\t}\n\t\t\telse if ((FRand() >= 0.5) && (FRand() < 0.75))\n\t\t\t{\n\t\t\t\tPlaySound(sound'Bounce2', SLOT_None, 3);\t\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tPlaySound(sound'Bounce3', SLOT_None, 3);\t\n\t\t\t}\n\t\t}\n\t}",
                        "locals": [
                            "local float speed;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "HitWall",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "HitNormal"
                            ],
                            [
                                "actor",
                                "HitWall"
                            ]
                        ],
                        "return": ""
                    },
                    "TakeDamage": {
                        "body": "{\n\treturn;\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TakeDamage",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "Damage"
                            ],
                            [
                                "Pawn",
                                "instigatedBy"
                            ],
                            [
                                "Vector",
                                "HitLocation"
                            ],
                            [
                                "Vector",
                                "Momentum"
                            ],
                            [
                                "name",
                                "damageType"
                            ]
                        ],
                        "return": ""
                    },
                    "Tick": {
                        "body": "{\n\treturn;\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltaTime"
                            ]
                        ],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\tif(!bAllowBumping)\n\t{\n\t\tbAllowBumping=True;\n\t}\n\tif (bDoomedToDestroy)\n\t{\n\t\tDestroy();\n\t}\n\treturn;\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "bump": {
                        "body": "{\nPlayer = DeusExPlayer(other);\n\n\tif((other.IsA('DeusExPlayer')))\n\t{\n\t\tif(bAllowBumping)\n\t\t{\n\t\t\tfrob(Other,None);\n\t\t}\n\t}\n}",
                        "locals": [
                            "local DeusExPlayer Player;"
                        ],
                        "modifiers": [],
                        "name": "bump",
                        "native": false,
                        "param": [
                            [
                                "actor",
                                "other"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 131,
                "replication": "",
                "states": [],
                "variables": [
                    "var bool bDoomedToDestroy;",
                    "var bool bAlreadyScored;",
                    "var bool bAllowBumping;"
                ]
            }
        },
        "FLBasketball4Player.uc": {
            "body": "class FLBasketball4Player extends DeusExDecoration;\n\nevent BaseChange()\n{\n\tlocal FLBasketball AdvB;\n\tif (bWasCarried)\n\t{\n\t\tAdvB = Spawn(Class'FLBasketball',Owner,,Location,Rotation);\n\t\tAdvB.Velocity = Velocity + 0.7 * Owner.Velocity;\n\t\tAdvB.SetTimer(0.5,False);\n\t\tDestroy();\n\t}\n}\n\ndefaultproperties\n{\n     bInvincible=True\n     ItemName=\"Basketball\"\n     Mesh=LodMesh'PGAssets.FLBasketball'\n     DrawScale=0.710000\n     CollisionRadius=10.000000\n     CollisionHeight=10.000000\n     bBounce=True\n     Mass=8.000000\n     Buoyancy=10.000000\n}\n",
            "name": "FLBasketball4Player.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bInvincible=True",
                    "ItemName=\"Basketball\"",
                    "Mesh=LodMesh'PGAssets.FLBasketball'",
                    "DrawScale=0.710000",
                    "CollisionRadius=10.000000",
                    "CollisionHeight=10.000000",
                    "bBounce=True",
                    "Mass=8.000000",
                    "Buoyancy=10.000000"
                ],
                "exec": [],
                "extends": "DeusExDecoration",
                "functions": {
                    "BaseChange": {
                        "body": "{\n\tif (bWasCarried)\n\t{\n\t\tAdvB = Spawn(Class'FLBasketball',Owner,,Location,Rotation);\n\t\tAdvB.Velocity = Velocity + 0.7 * Owner.Velocity;\n\t\tAdvB.SetTimer(0.5,False);\n\t\tDestroy();\n\t}\n}",
                        "locals": [
                            "local FLBasketball AdvB;"
                        ],
                        "modifiers": [],
                        "name": "BaseChange",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 27,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "FadeLamp.uc": {
            "body": "//=============================================================================\n// RandomColourLamp.\n//=============================================================================\nclass FadeLamp expands Lamp;\n\nfunction PostBeginPlay()\n{\n\tif (bOn)\n\t{\n\t\tLightType=LT_Steady;\n\t\tLightEffect=LE_NonIncidence;\n\t}\n}\n\nfunction tick(float v)\n{\n\tLightHue++;\n\tif(LightHue >= 255)\n\t{\n\t\tLightHue=0;\n\t}\n}\n\nfunction Frob(Actor Frobber, Inventory frobWith)\n{\n\tSuper.Frob(Frobber, frobWith);\n\n\tif (bOn)\n\t{\n\t\tLightType=LT_Steady;\n\t\tLightEffect=LE_NonIncidence;\n\t}\n\telse\n\t{\n\t\tLightType=LT_None;\n\t}\n}\n\ndefaultproperties\n{\n     bInvincible=True\n     ItemName=\"Fading Lamp\"\n     Mesh=LodMesh'DeusExDeco.Lamp2'\n     CollisionRadius=15.000000\n     CollisionHeight=47.000000\n     LightSaturation=0\n     LightRadius=18\n}\n",
            "name": "FadeLamp.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bInvincible=True",
                    "ItemName=\"Fading Lamp\"",
                    "Mesh=LodMesh'DeusExDeco.Lamp2'",
                    "CollisionRadius=15.000000",
                    "CollisionHeight=47.000000",
                    "LightSaturation=0",
                    "LightRadius=18"
                ],
                "exec": [],
                "extends": "Lamp",
                "functions": {
                    "Frob": {
                        "body": "{\n\tSuper.Frob(Frobber, frobWith);\n\n\tif (bOn)\n\t{\n\t\tLightType=LT_Steady;\n\t\tLightEffect=LE_NonIncidence;\n\t}\n\telse\n\t{\n\t\tLightType=LT_None;\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    },
                    "PostBeginPlay": {
                        "body": "{\n\tif (bOn)\n\t{\n\t\tLightType=LT_Steady;\n\t\tLightEffect=LE_NonIncidence;\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "tick": {
                        "body": "{\n\tLightHue++;\n\tif(LightHue >= 255)\n\t{\n\t\tLightHue=0;\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "v"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 49,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "FakeSecurityConsole.uc": {
            "body": "//=============================================================================\n// FakeSecurityConsole.\n//=============================================================================\nclass FakeSecurityConsole extends DeusExDecoration;\n\nvar bool bOn;\n\nfunction Frob(Actor Frobber, Inventory frobWith)\n{\n\tSuper.Frob(Frobber, frobWith);\n\n\tif (bOn)\n\t{\n\t\tPlayAnim('Deactivate');\n\t}\n\telse\n\t{\n\t\tPlayAnim('Activate');\n\t}\n\n\tbOn = !bOn;\n}\n\ndefaultproperties\n{\n     bInvincible=True\n     ItemName=\"Security Computer Terminal\"\n     bPushable=False\n     Physics=PHYS_None\n     Mesh=LodMesh'DeusExDeco.ComputerSecurity'\n     CollisionRadius=11.590000\n     CollisionHeight=10.100000\n     bCollideWorld=False\n     Mass=10.000000\n     Buoyancy=12.000000\n}\n",
            "name": "FakeSecurityConsole.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bInvincible=True",
                    "ItemName=\"Security Computer Terminal\"",
                    "bPushable=False",
                    "Physics=PHYS_None",
                    "Mesh=LodMesh'DeusExDeco.ComputerSecurity'",
                    "CollisionRadius=11.590000",
                    "CollisionHeight=10.100000",
                    "bCollideWorld=False",
                    "Mass=10.000000",
                    "Buoyancy=12.000000"
                ],
                "exec": [],
                "extends": "DeusExDecoration",
                "functions": {
                    "Frob": {
                        "body": "{\n\tSuper.Frob(Frobber, frobWith);\n\n\tif (bOn)\n\t{\n\t\tPlayAnim('Deactivate');\n\t}\n\telse\n\t{\n\t\tPlayAnim('Activate');\n\t}\n\n\tbOn = !bOn;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 37,
                "replication": "",
                "states": [],
                "variables": [
                    "var bool bOn;"
                ]
            }
        },
        "FiberArmour.uc": {
            "body": "//=============================================================================\n// AdaptiveArmor.\n//=============================================================================\nclass FiberArmour extends PGArmour;\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\ndefaultproperties\n{\n     Dur=25\n     Def=1000\n     ItemName=\"Fiber Armour\"\n     beltDescription=\"FIBER\"\n}\n",
            "name": "FiberArmour.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "Dur=25",
                    "Def=1000",
                    "ItemName=\"Fiber Armour\"",
                    "beltDescription=\"FIBER\""
                ],
                "exec": [],
                "extends": "PGArmour",
                "functions": {
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 18,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "FireBolt.uc": {
            "body": "//=============================================================================\n// FireBolt.\n//=============================================================================\nclass FireBolt extends Rocket;\n\n#exec OBJ LOAD FILE=Effects\n\nvar() float shakeTime;\nvar() float shakeRollMagnitude;\nvar() float shakeVertMagnitude;\n\nvar SizableEffectSpawner efs;\n\nsimulated function SpawnRocketEffects()\n{\n\tefs = Spawn(class'SizableEffectSpawner',,,Location);\n\tif (efs != None)\n\t{\n\t\tefs.SetBase(Self);\n\t\tefs.RemoteRole = ROLE_None;\n\t\tefs.EffectClass=class'MagicRing';\n\t\tefs.EffectSkin = Texture'DeusExDeco.Skins.AlarmLightTex8';\n\t\tefs.SizeofEffect = 3;\n\t\tefs.Interval = 0.01;\n\t\tefs.EffectLSpan = 1.0;\n   \t}\n}\n\nsimulated function DrawExplosionEffects(vector HitLocation, vector HitNormal)\n{\n\tlocal ExplosionLight light;\n\tlocal ParticleGenerator gen;\n   \tlocal ExplosionSmall expeffect;\n\n\t//destroy the other effect\n\tefs.Destroy();\n\t\n\t// draw a pretty explosion\n\t/*light = Spawn(class'ExplosionLight',,, HitLocation);\n\tif (light != None)\n   \t{\n      \t\tlight.RemoteRole = ROLE_None;\n\t\tlight.size = 12;\n\t}*/\n\t\n   \t/*expeffect = Spawn(class'ExplosionSmall',,, HitLocation);\n\tif (expeffect != None)\n      \t\texpeffect.RemoteRole = ROLE_None;*/\n\n\t// create a particle generator shooting out white-hot fireballs\n\tgen = Spawn(class'ParticleGenerator',,, HitLocation, Rotator(HitNormal));\n\tif (gen != None)\n\t{\n      \t\tgen.RemoteRole = ROLE_None;\n\t\tgen.particleDrawScale = 1.0;\n\t\tgen.checkTime = 0.05;\n\t\tgen.frequency = 1.0;\n\t\tgen.ejectSpeed = 200.0;\n\t\tgen.bGravity = True;\n\t\tgen.bRandomEject = True;\n\t\tgen.particleTexture = FireTexture'Effects.Fire.flame_b';\n\t\tgen.LifeSpan = 2.0;\n\t}\n}\n\nfunction ZoneChange(ZoneInfo NewZone)\n{\n\tSuper.ZoneChange(NewZone);\n\n\t// If the dart enters water, extingish it\n\tif (NewZone.bWaterZone)\n\t{\n\t\t//destroy the other effect\n\t\tefs.Destroy();\n\t\t\n\t\tDestroy();\n\t}\n}\n\ndefaultproperties\n{\n     bBlood=False\n     bDebris=False\n     blastRadius=512.000000\n     DamageType=Flamed\n     ItemName=\"Fire Bolt\"\n     Damage=50.000000\n     SpawnSound=None\n     ImpactSound=Sound'DeusExSounds.Weapons.FlamethrowerFire'\n     Mesh=None\n     DrawScale=1.000000\n     AmbientSound=None\n}\n",
            "name": "FireBolt.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bBlood=False",
                    "bDebris=False",
                    "blastRadius=512.000000",
                    "DamageType=Flamed",
                    "ItemName=\"Fire Bolt\"",
                    "Damage=50.000000",
                    "SpawnSound=None",
                    "ImpactSound=Sound'DeusExSounds.Weapons.FlamethrowerFire'",
                    "Mesh=None",
                    "DrawScale=1.000000",
                    "AmbientSound=None"
                ],
                "exec": [
                    "#exec OBJ LOAD FILE=Effects"
                ],
                "extends": "Rocket",
                "functions": {
                    "DrawExplosionEffects": {
                        "body": "{\n\n\t//destroy the other effect\n\tefs.Destroy();\n\t\n\t// draw a pretty explosion\n\t/*light = Spawn(class'ExplosionLight',,, HitLocation);\n\tif (light != None)\n   \t{\n      \t\tlight.RemoteRole = ROLE_None;\n\t\tlight.size = 12;\n\t}*/\n\t\n   \t/*expeffect = Spawn(class'ExplosionSmall',,, HitLocation);\n\tif (expeffect != None)\n      \t\texpeffect.RemoteRole = ROLE_None;*/\n\n\t// create a particle generator shooting out white-hot fireballs\n\tgen = Spawn(class'ParticleGenerator',,, HitLocation, Rotator(HitNormal));\n\tif (gen != None)\n\t{\n      \t\tgen.RemoteRole = ROLE_None;\n\t\tgen.particleDrawScale = 1.0;\n\t\tgen.checkTime = 0.05;\n\t\tgen.frequency = 1.0;\n\t\tgen.ejectSpeed = 200.0;\n\t\tgen.bGravity = True;\n\t\tgen.bRandomEject = True;\n\t\tgen.particleTexture = FireTexture'Effects.Fire.flame_b';\n\t\tgen.LifeSpan = 2.0;\n\t}\n}",
                        "locals": [
                            "local ExplosionLight light;",
                            "local ParticleGenerator gen;",
                            "local ExplosionSmall expeffect;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "DrawExplosionEffects",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "HitLocation"
                            ],
                            [
                                "vector",
                                "HitNormal"
                            ]
                        ],
                        "return": ""
                    },
                    "SpawnRocketEffects": {
                        "body": "{\n\tefs = Spawn(class'SizableEffectSpawner',,,Location);\n\tif (efs != None)\n\t{\n\t\tefs.SetBase(Self);\n\t\tefs.RemoteRole = ROLE_None;\n\t\tefs.EffectClass=class'MagicRing';\n\t\tefs.EffectSkin = Texture'DeusExDeco.Skins.AlarmLightTex8';\n\t\tefs.SizeofEffect = 3;\n\t\tefs.Interval = 0.01;\n\t\tefs.EffectLSpan = 1.0;\n   \t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "SpawnRocketEffects",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ZoneChange": {
                        "body": "{\n\tSuper.ZoneChange(NewZone);\n\n\t// If the dart enters water, extingish it\n\tif (NewZone.bWaterZone)\n\t{\n\t\t//destroy the other effect\n\t\tefs.Destroy();\n\t\t\n\t\tDestroy();\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "ZoneChange",
                        "native": false,
                        "param": [
                            [
                                "ZoneInfo",
                                "NewZone"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 94,
                "replication": "",
                "states": [],
                "variables": [
                    "var() float shakeTime;",
                    "var() float shakeRollMagnitude;",
                    "var() float shakeVertMagnitude;",
                    "var SizableEffectSpawner efs;"
                ]
            }
        },
        "FireHydrant.uc": {
            "body": "//=============================================================================\n// FirePlug.\n//=============================================================================\nclass FireHydrant expands DeusExDecoration;\n\nenum ESkinColor\n{\n\tSC_Red,\n\tSC_Orange,\n\tSC_Blue,\n\tSC_Gray\n};\n\nvar() ESkinColor SkinColor;\n\nfunction BeginPlay()\n{\n\tSuper.BeginPlay();\n\n\tswitch (SkinColor)\n\t{\n\t\tcase SC_Red:\tSkin = Texture'FirePlugTex1'; break;\n\t\tcase SC_Orange:\tSkin = Texture'FirePlugTex2'; break;\n\t\tcase SC_Blue:\tSkin = Texture'FirePlugTex3'; break;\n\t\tcase SC_Gray:\tSkin = Texture'FirePlugTex4'; break;\n\t}\n}\n\ndefaultproperties\n{\n     ItemName=\"Fire Hydrant\"\n     Mesh=LodMesh'DeusExDeco.FirePlug'\n     CollisionRadius=8.000000\n     CollisionHeight=16.500000\n     Mass=50.000000\n     Buoyancy=30.000000\n}\n",
            "name": "FireHydrant.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "ItemName=\"Fire Hydrant\"",
                    "Mesh=LodMesh'DeusExDeco.FirePlug'",
                    "CollisionRadius=8.000000",
                    "CollisionHeight=16.500000",
                    "Mass=50.000000",
                    "Buoyancy=30.000000"
                ],
                "exec": [],
                "extends": "DeusExDecoration",
                "functions": {
                    "BeginPlay": {
                        "body": "{\n\tSuper.BeginPlay();\n\n\tswitch (SkinColor)\n\t{\n\t\tcase SC_Red:\tSkin = Texture'FirePlugTex1'; break;\n\t\tcase SC_Orange:\tSkin = Texture'FirePlugTex2'; break;\n\t\tcase SC_Blue:\tSkin = Texture'FirePlugTex3'; break;\n\t\tcase SC_Gray:\tSkin = Texture'FirePlugTex4'; break;\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "BeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 38,
                "replication": "",
                "states": [],
                "variables": [
                    "var() ESkinColor SkinColor;"
                ]
            }
        },
        "FishingBait.uc": {
            "body": "//=============================================================================\n// Vortex\n//=============================================================================\nclass FishingBait extends ThrownProjectile;\n\nvar FishingDevice MainDev;\n\nsimulated function PostBeginPlay()\n{\n\n   Super.PostBeginPlay();\n   \n   Velocity = Vector(Rotation) * Speed;\n   Velocity.Z -= 200;\n   SetTimer(10, false);\n   RandSpin(30000);\n}\n\nsimulated function TakeDamage(int Damage, Pawn instigatedBy, Vector HitLocation, Vector Momentum, name damageType)\n{\n\treturn;\n}\n\nsimulated function Explode(vector HitLocation, vector HitNormal)\n{\n\treturn;\n}\n\nsimulated function Landed( vector HitNormal )\n{\n   HitWall(HitNormal, None);\n}\n\nsimulated function ProcessTouch( actor Other, vector HitLocation )\n{\n   HitWall(Normal(HitLocation - Other.Location), None );\n}\n\nsimulated function HitWall( vector HitNormal, actor Wall )\n{\n   Velocity = 0.75 * ((Velocity dot HitNormal) * HitNormal * (-2.0) + Velocity);   // Reflect off Wall w/damping\n   speed = VSize(Velocity);\n   if ( Velocity.Z > 400 )\n      Velocity.Z = 0.5 * (400 + Velocity.Z);\n}\n\n\nfunction Timer()\n{\n\tDeusExPlayer(MainDev.Owner).ClientMessage(\"Bait timed out...\");\n\tMainDev.Bait = None;\n\tMainDev.Stage = 0;\n   Destroy();\n}\n\nfunction ZoneChange(ZoneInfo NewZone)\n{\n\tlocal FishingBait2 FB;\n\t\n\tSuper.ZoneChange(NewZone);\n\tif (NewZone.bWaterZone)\n\t{\n\t\tFB = Spawn(class'FishingBait2',,,Location);\n\t\tFB.MainDev = MainDev;\n\t\tMainDev.Lure = FB;\n\t\tMainDev.Stage = 2;\n\t\tFB.SetTimer(RandRange(5,25), True);\n\t\tDestroy();\n\t}\n}\n\ndefaultproperties\n{\n     MyDamageType=SpecialDamage\n     LifeSpan=20.000000\n     Skin=FireTexture'Effects.liquid.Virus_SFX'\n     Mesh=LodMesh'DeusExDeco.Basketball'\n     AmbientGlow=67\n     bUnlit=True\n     SoundRadius=112\n     SoundVolume=255\n     CollisionRadius=5.000000\n     CollisionHeight=5.000000\n     DesiredRotation=(Pitch=12000,Yaw=5666,Roll=2334)\n}\n",
            "name": "FishingBait.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "MyDamageType=SpecialDamage",
                    "LifeSpan=20.000000",
                    "Skin=FireTexture'Effects.liquid.Virus_SFX'",
                    "Mesh=LodMesh'DeusExDeco.Basketball'",
                    "AmbientGlow=67",
                    "bUnlit=True",
                    "SoundRadius=112",
                    "SoundVolume=255",
                    "CollisionRadius=5.000000",
                    "CollisionHeight=5.000000",
                    "DesiredRotation=(Pitch=12000,Yaw=5666,Roll=2334)"
                ],
                "exec": [],
                "extends": "ThrownProjectile",
                "functions": {
                    "Explode": {
                        "body": "{\n\treturn;\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Explode",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "HitLocation"
                            ],
                            [
                                "vector",
                                "HitNormal"
                            ]
                        ],
                        "return": ""
                    },
                    "HitWall": {
                        "body": "{\n   Velocity = 0.75 * ((Velocity dot HitNormal) * HitNormal * (-2.0) + Velocity);   // Reflect off Wall w/damping\n   speed = VSize(Velocity);\n   if ( Velocity.Z > 400 )\n      Velocity.Z = 0.5 * (400 + Velocity.Z);\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "HitWall",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "HitNormal"
                            ],
                            [
                                "actor",
                                "Wall"
                            ]
                        ],
                        "return": ""
                    },
                    "Landed": {
                        "body": "{\n   HitWall(HitNormal, None);\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Landed",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "HitNormal"
                            ]
                        ],
                        "return": ""
                    },
                    "PostBeginPlay": {
                        "body": "{\n\n   Super.PostBeginPlay();\n   \n   Velocity = Vector(Rotation) * Speed;\n   Velocity.Z -= 200;\n   SetTimer(10, false);\n   RandSpin(30000);\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ProcessTouch": {
                        "body": "{\n   HitWall(Normal(HitLocation - Other.Location), None );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "ProcessTouch",
                        "native": false,
                        "param": [
                            [
                                "actor",
                                "Other"
                            ],
                            [
                                "vector",
                                "HitLocation"
                            ]
                        ],
                        "return": ""
                    },
                    "TakeDamage": {
                        "body": "{\n\treturn;\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TakeDamage",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "Damage"
                            ],
                            [
                                "Pawn",
                                "instigatedBy"
                            ],
                            [
                                "Vector",
                                "HitLocation"
                            ],
                            [
                                "Vector",
                                "Momentum"
                            ],
                            [
                                "name",
                                "damageType"
                            ]
                        ],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\tDeusExPlayer(MainDev.Owner).ClientMessage(\"Bait timed out...\");\n\tMainDev.Bait = None;\n\tMainDev.Stage = 0;\n   Destroy();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ZoneChange": {
                        "body": "{\n\t\n\tSuper.ZoneChange(NewZone);\n\tif (NewZone.bWaterZone)\n\t{\n\t\tFB = Spawn(class'FishingBait2',,,Location);\n\t\tFB.MainDev = MainDev;\n\t\tMainDev.Lure = FB;\n\t\tMainDev.Stage = 2;\n\t\tFB.SetTimer(RandRange(5,25), True);\n\t\tDestroy();\n\t}\n}",
                        "locals": [
                            "local FishingBait2 FB;"
                        ],
                        "modifiers": [],
                        "name": "ZoneChange",
                        "native": false,
                        "param": [
                            [
                                "ZoneInfo",
                                "NewZone"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 86,
                "replication": "",
                "states": [],
                "variables": [
                    "var FishingDevice MainDev;"
                ]
            }
        },
        "FishingBait2.uc": {
            "body": "//=============================================================================\n// BoxLarge.\n//=============================================================================\nclass FishingBait2 extends Containers;\n\nvar FishingDevice MainDev;\nvar bool bHasCatch;\nvar int FishTime;\n\nfunction Timer()\n{\n\tif(!bHasCatch)\n\t{\n\t\tbHasCatch=True;\n\t\tDeusExPlayer(MainDev.Owner).ClientMessage(\"Somethings biting!!\");\n\t\tSetTimer(Rand(5), False);\n\t}\n\telse\n\t{\n\t\tbHasCatch=False;\n\t\tDeusExPlayer(MainDev.Owner).ClientMessage(\"It got away...\");\n\t}\n}\n\nfunction PingCatch()\n{\n\tMainDev.Catches++;\n\tMainDev.Stage = 0;\n\tDeusExPlayer(MainDev.Owner).ClientMessage(\"Got it! \"$MainDev.Catches$\" fish caught.\");\n\tMainDev.Lure = None;\n\tDestroy();\n}\n\ndefaultproperties\n{\n     bFloating=True\n     ItemName=\"Fishing Bait\"\n     bBlockSight=True\n     Skin=FireTexture'Effects.liquid.Virus_SFX'\n     Mesh=LodMesh'DeusExDeco.Basketball'\n     CollisionRadius=5.000000\n     CollisionHeight=5.000000\n     Mass=100.000000\n     Buoyancy=200.000000\n}\n",
            "name": "FishingBait2.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bFloating=True",
                    "ItemName=\"Fishing Bait\"",
                    "bBlockSight=True",
                    "Skin=FireTexture'Effects.liquid.Virus_SFX'",
                    "Mesh=LodMesh'DeusExDeco.Basketball'",
                    "CollisionRadius=5.000000",
                    "CollisionHeight=5.000000",
                    "Mass=100.000000",
                    "Buoyancy=200.000000"
                ],
                "exec": [],
                "extends": "Containers",
                "functions": {
                    "PingCatch": {
                        "body": "{\n\tMainDev.Catches++;\n\tMainDev.Stage = 0;\n\tDeusExPlayer(MainDev.Owner).ClientMessage(\"Got it! \"$MainDev.Catches$\" fish caught.\");\n\tMainDev.Lure = None;\n\tDestroy();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PingCatch",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\tif(!bHasCatch)\n\t{\n\t\tbHasCatch=True;\n\t\tDeusExPlayer(MainDev.Owner).ClientMessage(\"Somethings biting!!\");\n\t\tSetTimer(Rand(5), False);\n\t}\n\telse\n\t{\n\t\tbHasCatch=False;\n\t\tDeusExPlayer(MainDev.Owner).ClientMessage(\"It got away...\");\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 46,
                "replication": "",
                "states": [],
                "variables": [
                    "var FishingDevice MainDev;",
                    "var bool bHasCatch;",
                    "var int FishTime;"
                ]
            }
        },
        "FishingDevice.uc": {
            "body": "//=============================================================================\n// Fishing\n//=============================================================================\nclass FishingDevice expands DeusExPickup;\n\nvar FishingBait Bait;\nvar FishingBait2 Lure;\n\nvar int Catches;\nvar int Stage; // 0 - Idle, 1 - Casting (Bait is out, not landed), 2 - Lure is out\n\nstate Activated\n{\n\tfunction Activate()\n\t{\n\t\t// can't turn it off\n\t}\n\n\tfunction BeginState()\n\t{\n\t\tlocal DeusExPlayer player;\n\n\t\tSuper.BeginState();\n\t\tplayer = DeusExPlayer(Owner);\n\t\tif(Stage == 0)\n\t\t{\n\t\t\tif(Bait == None)\n\t\t\t{\n\t\t\t\tBait = spawn(class'FishingBait',Owner,,Owner.Location,DeusExPlayer(Owner).Rotation);\n\t\t\t\tBait.Velocity = Velocity + 0.7 * Owner.Velocity;\n\t\t\t\tBait.MainDev = Self;\n\t\t\t\tStage = 1;\n\t\t\t\tPlayer.ClientMessage(\"Bait cast.\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(Stage == 1)\n\t\t{\n\t\t\tif(Bait != None)\n\t\t\t{\n\t\t\t\tBait.Destroy();\n\t\t\t\tPlayer.ClientMessage(\"Bait recalled.\");\n\t\t\t\tStage = 0;\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(Stage == 2)\n\t\t{\n\t\t\tif(Lure != None)\n\t\t\t{\n\t\t\t\tif(Lure.bHasCatch)\n\t\t\t\t{\n\t\t\t\t\tLure.PingCatch();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tPlayer.ClientMessage(\"Lure recalled.\");\n\t\t\t\t\tLure.Destroy();\n\t\t\t\t\tStage = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tGotoState('DeActivated');\n\t}\nBegin:\n}\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t\tMaxCopies = 1;\n}\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\ndefaultproperties\n{\n     maxCopies=1\n     bActivatable=True\n     ItemName=\"Handheld Fishing Device\"\n     PlayerViewOffset=(X=20.000000,Y=10.000000,Z=-16.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.MultitoolPOV'\n     PickupViewMesh=LodMesh'DeusExItems.Multitool'\n     ThirdPersonMesh=LodMesh'DeusExItems.Multitool3rd'\n     LandSound=Sound'DeusExSounds.Generic.PlasticHit2'\n     Icon=Texture'DeusExUI.Icons.BeltIconMultitool'\n     M_Activated=\"\"\n     largeIcon=Texture'DeusExUI.Icons.LargeIconMultitool'\n     largeIconWidth=28\n     largeIconHeight=46\n     Description=\"\"\n     beltDescription=\"FISHING\"\n     Mesh=LodMesh'DeusExItems.Multitool'\n     CollisionRadius=4.800000\n     CollisionHeight=0.860000\n     Mass=20.000000\n     Buoyancy=10.000000\n}\n",
            "name": "FishingDevice.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "maxCopies=1",
                    "bActivatable=True",
                    "ItemName=\"Handheld Fishing Device\"",
                    "PlayerViewOffset=(X=20.000000,Y=10.000000,Z=-16.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.MultitoolPOV'",
                    "PickupViewMesh=LodMesh'DeusExItems.Multitool'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.Multitool3rd'",
                    "LandSound=Sound'DeusExSounds.Generic.PlasticHit2'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconMultitool'",
                    "M_Activated=\"\"",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconMultitool'",
                    "largeIconWidth=28",
                    "largeIconHeight=46",
                    "Description=\"\"",
                    "beltDescription=\"FISHING\"",
                    "Mesh=LodMesh'DeusExItems.Multitool'",
                    "CollisionRadius=4.800000",
                    "CollisionHeight=0.860000",
                    "Mass=20.000000",
                    "Buoyancy=10.000000"
                ],
                "exec": [],
                "extends": "DeusExPickup",
                "functions": {
                    "Activate": {
                        "body": "{\n\t\t// can't turn it off\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Activate",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "BeginState": {
                        "body": "{\n\n\t\tSuper.BeginState();\n\t\tplayer = DeusExPlayer(Owner);\n\t\tif(Stage == 0)\n\t\t{\n\t\t\tif(Bait == None)\n\t\t\t{\n\t\t\t\tBait = spawn(class'FishingBait',Owner,,Owner.Location,DeusExPlayer(Owner).Rotation);\n\t\t\t\tBait.Velocity = Velocity + 0.7 * Owner.Velocity;\n\t\t\t\tBait.MainDev = Self;\n\t\t\t\tStage = 1;\n\t\t\t\tPlayer.ClientMessage(\"Bait cast.\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(Stage == 1)\n\t\t{\n\t\t\tif(Bait != None)\n\t\t\t{\n\t\t\t\tBait.Destroy();\n\t\t\t\tPlayer.ClientMessage(\"Bait recalled.\");\n\t\t\t\tStage = 0;\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(Stage == 2)\n\t\t{\n\t\t\tif(Lure != None)\n\t\t\t{\n\t\t\t\tif(Lure.bHasCatch)\n\t\t\t\t{\n\t\t\t\t\tLure.PingCatch();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tPlayer.ClientMessage(\"Lure recalled.\");\n\t\t\t\t\tLure.Destroy();\n\t\t\t\t\tStage = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tGotoState('DeActivated');\n\t}",
                        "locals": [
                            "local DeusExPlayer player;"
                        ],
                        "modifiers": [],
                        "name": "BeginState",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t\tMaxCopies = 1;\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 108,
                "replication": "",
                "states": [],
                "variables": [
                    "var FishingBait Bait;",
                    "var FishingBait2 Lure;",
                    "var int Catches;",
                    "var int Stage; // 0 - Idle, 1 - Casting (Bait is out, not landed), 2 - Lure is out"
                ]
            }
        },
        "FlameArmour.uc": {
            "body": "//=============================================================================\n// AdaptiveArmor.\n//=============================================================================\nclass FlameArmour extends PGArmour;\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\ndefaultproperties\n{\n     Dur=100\n     Def=10\n     bResistFire=True\n     ItemName=\"Flame Armour\"\n     beltDescription=\"FLAME\"\n}\n",
            "name": "FlameArmour.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "Dur=100",
                    "Def=10",
                    "bResistFire=True",
                    "ItemName=\"Flame Armour\"",
                    "beltDescription=\"FLAME\""
                ],
                "exec": [],
                "extends": "PGArmour",
                "functions": {
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 19,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "FlashBang.uc": {
            "body": "class FlashBang expands ThrownProjectile;\n\nsimulated function DrawExplosionEffects(vector HitLocation, vector HitNormal)\n{\nlocal DeusExPlayer player;\nlocal ScriptedPawn pwn;\nlocal Float TargetRange;\n\t\n\ttargetRange = 12;\n\tforeach VisibleActors(class'DeusExPlayer',player,768)\n\t{\n\t\tTargetRange -= Abs(VSize(Player.Location - Location));\n\t\tplayer.ClientFlash(1,Vect(20000,20000,20000));\n\t\tplayer.IncreaseClientFlashLength(12.0);\n\t\t\n\t}\n\tforeach VisibleActors(class'ScriptedPawn',pwn,768)\n\t{\n\t\tpwn.TakeDamage(5,Pawn(Owner),pwn.Location,vect(0,0,0),'TearGas');\n\t}\n}\n\ndefaultproperties\n{\n     fuseLength=3.000000\n     proxRadius=128.000000\n     spawnWeaponClass=Class'PartyStuff.WeaponFlashBang'\n     spawnAmmoClass=Class'PartyStuff.AmmoFlashBang'\n     ItemName=\"Flash Bang Grenade\"\n     speed=1500.000000\n     ImpactSound=Sound'DeusExSounds.Generic.SmallExplosion2'\n     Mesh=LodMesh'DeusExItems.EMPGrenadePickup'\n}\n",
            "name": "FlashBang.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "fuseLength=3.000000",
                    "proxRadius=128.000000",
                    "spawnWeaponClass=Class'PartyStuff.WeaponFlashBang'",
                    "spawnAmmoClass=Class'PartyStuff.AmmoFlashBang'",
                    "ItemName=\"Flash Bang Grenade\"",
                    "speed=1500.000000",
                    "ImpactSound=Sound'DeusExSounds.Generic.SmallExplosion2'",
                    "Mesh=LodMesh'DeusExItems.EMPGrenadePickup'"
                ],
                "exec": [],
                "extends": "ThrownProjectile",
                "functions": {
                    "DrawExplosionEffects": {
                        "body": "{\n\t\n\ttargetRange = 12;\n\tforeach VisibleActors(class'DeusExPlayer',player,768)\n\t{\n\t\tTargetRange -= Abs(VSize(Player.Location - Location));\n\t\tplayer.ClientFlash(1,Vect(20000,20000,20000));\n\t\tplayer.IncreaseClientFlashLength(12.0);\n\t\t\n\t}\n\tforeach VisibleActors(class'ScriptedPawn',pwn,768)\n\t{\n\t\tpwn.TakeDamage(5,Pawn(Owner),pwn.Location,vect(0,0,0),'TearGas');\n\t}\n}",
                        "locals": [
                            "local DeusExPlayer player;",
                            "local ScriptedPawn pwn;",
                            "local Float TargetRange;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "DrawExplosionEffects",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "HitLocation"
                            ],
                            [
                                "vector",
                                "HitNormal"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 34,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "FlashLamp.uc": {
            "body": "//=============================================================================\n// RandomColourLamp.\n//=============================================================================\nclass FlashLamp expands Lamp;\n\nvar() float switchTime;\n\nfunction PostBeginPlay()\n{\n\tif (bOn)\n\t{\n\t\tLightType=LT_Steady;\n\t\tLightEffect=LE_NonIncidence;\n\t\tSetTimer(switchTime,false);\n\t}\n}\n\nfunction timer()\n{\nlocal int random;\n\tif(bOn)\n\t{\n\trandom = Rand(255);\n\tLightHue = random;\n\tSetTimer(switchTime,false);\n\t}\n}\n\nfunction Frob(Actor Frobber, Inventory frobWith)\n{\n    local int Random;\n\tSuper.Frob(Frobber, frobWith);\n\n\tif (bOn)\n\t{\n\t\tLightType=LT_Steady;\n\t\tLightEffect=LE_NonIncidence;\n\t\tSetTimer(switchTime,false);\n\t}\n\telse\n\t{\n\t\tLightType=LT_None;\n\t}\n}\n\ndefaultproperties\n{\n     SwitchTime=1.000000\n     bInvincible=True\n     ItemName=\"Flash Lamp\"\n     Mesh=LodMesh'DeusExDeco.Lamp2'\n     CollisionRadius=15.000000\n     CollisionHeight=47.000000\n     LightSaturation=0\n     LightRadius=18\n}\n",
            "name": "FlashLamp.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "SwitchTime=1.000000",
                    "bInvincible=True",
                    "ItemName=\"Flash Lamp\"",
                    "Mesh=LodMesh'DeusExDeco.Lamp2'",
                    "CollisionRadius=15.000000",
                    "CollisionHeight=47.000000",
                    "LightSaturation=0",
                    "LightRadius=18"
                ],
                "exec": [],
                "extends": "Lamp",
                "functions": {
                    "Frob": {
                        "body": "{\n\tSuper.Frob(Frobber, frobWith);\n\n\tif (bOn)\n\t{\n\t\tLightType=LT_Steady;\n\t\tLightEffect=LE_NonIncidence;\n\t\tSetTimer(switchTime,false);\n\t}\n\telse\n\t{\n\t\tLightType=LT_None;\n\t}\n}",
                        "locals": [
                            "local int Random;"
                        ],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    },
                    "PostBeginPlay": {
                        "body": "{\n\tif (bOn)\n\t{\n\t\tLightType=LT_Steady;\n\t\tLightEffect=LE_NonIncidence;\n\t\tSetTimer(switchTime,false);\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "timer": {
                        "body": "{\n\tif(bOn)\n\t{\n\trandom = Rand(255);\n\tLightHue = random;\n\tSetTimer(switchTime,false);\n\t}\n}",
                        "locals": [
                            "local int random;"
                        ],
                        "modifiers": [],
                        "name": "timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 57,
                "replication": "",
                "states": [],
                "variables": [
                    "var() float switchTime;"
                ]
            }
        },
        "FlyingCarpet.uc": {
            "body": "class FlyingCarpet extends HKMarketTarp;\n\nvar bool bActive;\n#exec obj load file=..\\Textures\\HK_Interior.utx package=HK_Interior\n\nfunction SilentAdd(class<inventory> addClass, DeusExPlayer addTarget)\n{ \n\tlocal Inventory anItem;\n\t\n\tanItem = Spawn(addClass); \n\tanItem.Instigator = addTarget; \n\tanItem.GotoState('Idle2'); \n\tanItem.bHeldItem = true; \n\tanItem.bTossedOut = false; \n\t\n\tif(Weapon(anItem) != None) \n\t\tWeapon(anItem).GiveAmmo(addTarget); \n\tanItem.GiveTo(addTarget);\n}\n\nfunction Frob(Actor Frobber, Inventory frobWith)\n{\n local PortableCarpet cdc;\n\tif(bActive)\n\t{\n\t\tbActive=False;\n\t\tDestroy();\n\t\tSilentAdd(class'PortableCarpet', DeusExPlayer(Frobber));\n\t\treturn;\n\t}\n\n}\n\ndefaultproperties\n{\n     bActive=True\n     bInvincible=True\n     bCanBeBase=True\n     Texture=Texture'HK_Interior.Textile.HKM_Rug_04'\n     Skin=Texture'HK_Interior.Textile.HKM_Rug_04'\n}\n",
            "name": "FlyingCarpet.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bActive=True",
                    "bInvincible=True",
                    "bCanBeBase=True",
                    "Texture=Texture'HK_Interior.Textile.HKM_Rug_04'",
                    "Skin=Texture'HK_Interior.Textile.HKM_Rug_04'"
                ],
                "exec": [
                    "#exec obj load file=..\\Textures\\HK_Interior.utx package=HK_Interior"
                ],
                "extends": "HKMarketTarp",
                "functions": {
                    "Frob": {
                        "body": "{\n\tif(bActive)\n\t{\n\t\tbActive=False;\n\t\tDestroy();\n\t\tSilentAdd(class'PortableCarpet', DeusExPlayer(Frobber));\n\t\treturn;\n\t}\n\n}",
                        "locals": [
                            "local PortableCarpet cdc;"
                        ],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    },
                    "SilentAdd": {
                        "body": "{ \n\t\n\tanItem = Spawn(addClass); \n\tanItem.Instigator = addTarget; \n\tanItem.GotoState('Idle2'); \n\tanItem.bHeldItem = true; \n\tanItem.bTossedOut = false; \n\t\n\tif(Weapon(anItem) != None) \n\t\tWeapon(anItem).GiveAmmo(addTarget); \n\tanItem.GiveTo(addTarget);\n}",
                        "locals": [
                            "local Inventory anItem;"
                        ],
                        "modifiers": [],
                        "name": "SilentAdd",
                        "native": false,
                        "param": [
                            [
                                "class<inventory>",
                                "addClass"
                            ],
                            [
                                "DeusExPlayer",
                                "addTarget"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 42,
                "replication": "",
                "states": [],
                "variables": [
                    "var bool bActive;"
                ]
            }
        },
        "FoodMMRPG.uc": {
            "body": "//=============================================================================\n// BioelectricCell.\n//=============================================================================\nclass FoodMMRPG extends DeusExPickup;\n\nvar int rechargeAmount;\n\nvar localized String msgRecharged;\nvar localized String RechargesLabel;\n\nvar Sound EatSound;\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n//MainMan: NO, ph00'!\n\t// If this is a netgame, then override defaults\n//\tif ( Level.NetMode != NM_StandAlone )\n//\t\tMaxCopies = 5;\n}\n\nfunction PostBeginPlay()\n{\n   Super.PostBeginPlay();\n}\n\nstate Activated\n{\n\tfunction Activate()\n\t{\n\t\t// can't turn it off\n\t}\n\n\tfunction BeginState()\n\t{\n\t\tlocal DeusExPlayer player;\n\n\t\tSuper.BeginState();\n\n\t\tplayer = DeusExPlayer(Owner);\n\t\tif (player != None)\n\t\t{\n\t\t\t//player.ClientMessage(Sprintf(msgRecharged, rechargeAmount));\n\t\n\t\t\t//player.PlaySound(EatSound, SLOT_None,,, 256);\n\n\n\t\t\tplayer.HealPlayer(rechargeamount, True);\n\n\t\t\t//player.Energy += rechargeAmount;\n\t\t\t//if (player.Energy > player.EnergyMax)\n\t\t\t//\tplayer.Energy = player.EnergyMax;\n\t\t}\n\n\t\tUseOnce();\n\t}\nBegin:\n}\n\n// ----------------------------------------------------------------------\n// UpdateInfo()\n// ----------------------------------------------------------------------\n\nfunction bool UpdateInfo(Object winObject)\n{\n\tlocal PersonaInfoWindow winInfo;\n\tlocal string str;\n\n\twinInfo = PersonaInfoWindow(winObject);\n\tif (winInfo == None)\n\t\treturn False;\n\n\twinInfo.SetTitle(itemName);\n\twinInfo.SetText(Description $ winInfo.CR() $ winInfo.CR());\n\twinInfo.AppendText(Sprintf(RechargesLabel, RechargeAmount));\n\n\t// Print the number of copies\n\tstr = CountLabel @ String(NumCopies);\n\twinInfo.AppendText(winInfo.CR() $ winInfo.CR() $ str);\n\n\treturn True;\n}\n\n// ----------------------------------------------------------------------\n// TestMPBeltSpot()\n// Returns true if the suggested belt location is ok for the object in mp.\n// ----------------------------------------------------------------------\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n\n\nfunction DropFrom(vector StartLocation)\n{\n\tLifeSpan = 5.0;\n\tSuper.DropFrom(StartLocation);\n}\n\n\nfunction BecomeItem()\n{\n\tLifeSpan = 0.0;\n\tSuper.BecomeItem();\n}\n\ndefaultproperties\n{\n     rechargeAmount=25\n     msgRecharged=\"Replenished %d health points\"\n     RechargesLabel=\"Replenished %d health points\"\n     maxCopies=30\n     bCanHaveMultipleCopies=True\n     bActivatable=True\n     ItemName=\"ERROR- T3h D3FAULT\"\n     PlayerViewOffset=(X=30.000000,Z=-12.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.BioCell'\n     PickupViewMesh=LodMesh'DeusExItems.BioCell'\n     ThirdPersonMesh=LodMesh'DeusExItems.BioCell'\n     LandSound=Sound'DeusExSounds.Generic.PlasticHit2'\n     Icon=Texture'DeusExUI.Icons.BeltIconBioCell'\n     M_Activated=\" eaten\"\n     largeIcon=Texture'DeusExUI.Icons.LargeIconBioCell'\n     largeIconWidth=44\n     largeIconHeight=43\n     beltDescription=\"OMG LOL, IT's TEH HAWTZORZ\"\n     Mesh=LodMesh'DeusExItems.BioCell'\n     CollisionRadius=4.700000\n     CollisionHeight=0.930000\n     Mass=5.000000\n     Buoyancy=4.000000\n}\n",
            "name": "FoodMMRPG.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "rechargeAmount=25",
                    "msgRecharged=\"Replenished %d health points\"",
                    "RechargesLabel=\"Replenished %d health points\"",
                    "maxCopies=30",
                    "bCanHaveMultipleCopies=True",
                    "bActivatable=True",
                    "ItemName=\"ERROR- T3h D3FAULT\"",
                    "PlayerViewOffset=(X=30.000000,Z=-12.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.BioCell'",
                    "PickupViewMesh=LodMesh'DeusExItems.BioCell'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.BioCell'",
                    "LandSound=Sound'DeusExSounds.Generic.PlasticHit2'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconBioCell'",
                    "M_Activated=\" eaten\"",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconBioCell'",
                    "largeIconWidth=44",
                    "largeIconHeight=43",
                    "beltDescription=\"OMG LOL, IT's TEH HAWTZORZ\"",
                    "Mesh=LodMesh'DeusExItems.BioCell'",
                    "CollisionRadius=4.700000",
                    "CollisionHeight=0.930000",
                    "Mass=5.000000",
                    "Buoyancy=4.000000"
                ],
                "exec": [],
                "extends": "DeusExPickup",
                "functions": {
                    "Activate": {
                        "body": "{\n\t\t// can't turn it off\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Activate",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "BecomeItem": {
                        "body": "{\n\tLifeSpan = 0.0;\n\tSuper.BecomeItem();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "BecomeItem",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "BeginState": {
                        "body": "{\n\n\t\tSuper.BeginState();\n\n\t\tplayer = DeusExPlayer(Owner);\n\t\tif (player != None)\n\t\t{\n\t\t\t//player.ClientMessage(Sprintf(msgRecharged, rechargeAmount));\n\t\n\t\t\t//player.PlaySound(EatSound, SLOT_None,,, 256);\n\n\n\t\t\tplayer.HealPlayer(rechargeamount, True);\n\n\t\t\t//player.Energy += rechargeAmount;\n\t\t\t//if (player.Energy > player.EnergyMax)\n\t\t\t//\tplayer.Energy = player.EnergyMax;\n\t\t}\n\n\t\tUseOnce();\n\t}",
                        "locals": [
                            "local DeusExPlayer player;"
                        ],
                        "modifiers": [],
                        "name": "BeginState",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "DropFrom": {
                        "body": "{\n\tLifeSpan = 5.0;\n\tSuper.DropFrom(StartLocation);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "DropFrom",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "StartLocation"
                            ]
                        ],
                        "return": ""
                    },
                    "PostBeginPlay": {
                        "body": "{\n   Super.PostBeginPlay();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n//MainMan: NO, ph00'!\n\t// If this is a netgame, then override defaults\n//\tif ( Level.NetMode != NM_StandAlone )\n//\t\tMaxCopies = 5;\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    },
                    "UpdateInfo": {
                        "body": "{\n\n\twinInfo = PersonaInfoWindow(winObject);\n\tif (winInfo == None)\n\t\treturn False;\n\n\twinInfo.SetTitle(itemName);\n\twinInfo.SetText(Description $ winInfo.CR() $ winInfo.CR());\n\twinInfo.AppendText(Sprintf(RechargesLabel, RechargeAmount));\n\n\t// Print the number of copies\n\tstr = CountLabel @ String(NumCopies);\n\twinInfo.AppendText(winInfo.CR() $ winInfo.CR() $ str);\n\n\treturn True;\n}",
                        "locals": [
                            "local PersonaInfoWindow winInfo;",
                            "local string str;"
                        ],
                        "modifiers": [],
                        "name": "UpdateInfo",
                        "native": false,
                        "param": [
                            [
                                "Object",
                                "winObject"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 138,
                "replication": "",
                "states": [],
                "variables": [
                    "var int rechargeAmount;",
                    "var localized String msgRecharged;",
                    "var localized String RechargesLabel;",
                    "var Sound EatSound;"
                ]
            }
        },
        "FreezeBolt.uc": {
            "body": "//=============================================================================\n// FreezeBolt.\n//=============================================================================\nclass FreezeBolt extends Rocket;\n\nsimulated function SpawnRocketEffects()\n{\n\t//does nothing here\n}\n\nauto simulated state Flying\n{\n\tfunction Tick(float deltaTime)\n\t{\n\t\tLocal SizableEffectSpawner efs;\n\n\t\tefs = Spawn(class'SizableEffectSpawner',,,Location);\n\t\tif (efs != None)\n\t\t{\n\t\t\tefs.EffectClass=class'MagicRing';\n\t\t\tefs.EffectSkin = Texture'BlueRay';\n\t\t\tefs.SizeofEffect = 1;\n\t\t\tefs.NumberSpawns = 1;\n\t\t\tefs.Interval = 0;\n\t\t\tefs.EffectLSpan = 1.0;\n   \t\t}\n\t}\n\n\tsimulated function ProcessTouch (Actor Other, Vector HitLocation)\n\t{\n\t\tlocal ScriptedPawn pawn;\t\t\n\t\tlocal FrozenPerson fperson;\n\t\tlocal int i;\n\t\tlocal DeusExDecoration deco;\n\t\tlocal DeusExCarcass carcass;\n\n\t\tif (bStuck)\n\t\t\treturn;\n\n\n\t\tif (DeusExDecoration(Other) != None || ScriptedPawn(Other) != None || DeusExCarcass(Other) != None)\n\t\t{\n\t\t\tpawn = ScriptedPawn(Other);\n\t\t\tdeco = DeusExDecoration(Other);\n\t\t\tcarcass = DeusExCarcass(Other);\n\t\n\t\t\tfperson = Spawn(class'FrozenPerson',,,Other.Location);\n\t\t\tfperson.SetCollisionSize(Other.CollisionRadius,Other.CollisionHeight);\n\t\t\tfperson.Texture = Other.Texture;\n\t\t\tfperson.Mesh=Other.Mesh;\n\t\t\tfperson.Mass=Other.Mass;\n\n\t\t\tfor (i=0;i<8;i++)\n\t\t\t{\n\t\t\t\tif ((Other.MultiSkins[i]==Texture'DeusExItems.Skins.GrayMaskTex')\n\t\t\t\t\t|| (Other.MultiSkins[i]==Texture'DeusExItems.Skins.PinkMaskTex')\n\t\t\t\t\t\t|| (Other.MultiSkins[i]==Texture'DeusExItems.Skins.BlackMaskTex'))\n\t\t\t\t{\n\t\t\t\t\tfperson.MultiSkins[i]=Other.MultiSkins[i];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tfperson.MultiSkins[i] = Texture'IceTex';\n\t\t\t}\n\t\t\tfperson.setRotation(Other.Rotation);\n\t\t\tOther.Destroy();\t\t\t\n\t\t\tDestroy();\n\t\t}\n\t\t\n\t}\n\n\tsimulated function HitWall(vector HitNormal, actor Wall)\n\t{\n\t\tif (bStickToWall)\n\t\t{\n\t\t\tVelocity = vect(0,0,0);\n\t\t\tAcceleration = vect(0,0,0);\n\t\t\tSetPhysics(PHYS_None);\n\t\t\tbStuck = False;\n\t\t\tdestroy();\n\n\t\t\t// MBCODE: Do this only on server side\n\t\t\tif ( Role == ROLE_Authority )\n\t\t\t{\n\t\t\t\tif (Level.NetMode != NM_Standalone)\n\t\t\t\tSetTimer(5.0,False);\n\n\t\t\t\tif (Wall.IsA('Mover'))\n\t\t\t\t{\n\t\t\t\t\tSetBase(Wall);\n\t\t\t\t\tWall.TakeDamage(Damage, Pawn(Owner), Wall.Location, MomentumTransfer*Normal(Velocity), damageType);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (Wall.IsA('BreakableGlass'))\n\t\tbDebris = False;\n\t\tAISendEvent('LoudNoise', EAITYPE_Audio, 2.0, blastRadius*24);\n\t\tSpawnEffects(Location, HitNormal, Wall);\n\n\t\tSuper.HitWall(HitNormal, Wall);\n\t}\n}\n\ndefaultproperties\n{\n     bExplodes=False\n     bBlood=False\n     bDebris=False\n     blastRadius=0.000000\n     bTracking=False\n     ItemName=\"FreezeBolt\"\n     speed=500.000000\n     MaxSpeed=1000.000000\n     SpawnSound=None\n     ImpactSound=None\n     Mesh=None\n     DrawScale=1.000000\n     SoundRadius=0\n     SoundVolume=0\n     AmbientSound=None\n}\n",
            "name": "FreezeBolt.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bExplodes=False",
                    "bBlood=False",
                    "bDebris=False",
                    "blastRadius=0.000000",
                    "bTracking=False",
                    "ItemName=\"FreezeBolt\"",
                    "speed=500.000000",
                    "MaxSpeed=1000.000000",
                    "SpawnSound=None",
                    "ImpactSound=None",
                    "Mesh=None",
                    "DrawScale=1.000000",
                    "SoundRadius=0",
                    "SoundVolume=0",
                    "AmbientSound=None"
                ],
                "exec": [],
                "extends": "Rocket",
                "functions": {
                    "HitWall": {
                        "body": "{\n\t\tif (bStickToWall)\n\t\t{\n\t\t\tVelocity = vect(0,0,0);\n\t\t\tAcceleration = vect(0,0,0);\n\t\t\tSetPhysics(PHYS_None);\n\t\t\tbStuck = False;\n\t\t\tdestroy();\n\n\t\t\t// MBCODE: Do this only on server side\n\t\t\tif ( Role == ROLE_Authority )\n\t\t\t{\n\t\t\t\tif (Level.NetMode != NM_Standalone)\n\t\t\t\tSetTimer(5.0,False);\n\n\t\t\t\tif (Wall.IsA('Mover'))\n\t\t\t\t{\n\t\t\t\t\tSetBase(Wall);\n\t\t\t\t\tWall.TakeDamage(Damage, Pawn(Owner), Wall.Location, MomentumTransfer*Normal(Velocity), damageType);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (Wall.IsA('BreakableGlass'))\n\t\tbDebris = False;\n\t\tAISendEvent('LoudNoise', EAITYPE_Audio, 2.0, blastRadius*24);\n\t\tSpawnEffects(Location, HitNormal, Wall);\n\n\t\tSuper.HitWall(HitNormal, Wall);\n\t}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "HitWall",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "HitNormal"
                            ],
                            [
                                "actor",
                                "Wall"
                            ]
                        ],
                        "return": ""
                    },
                    "ProcessTouch": {
                        "body": "{\n\n\t\tif (bStuck)\n\t\t\treturn;\n\n\n\t\tif (DeusExDecoration(Other) != None || ScriptedPawn(Other) != None || DeusExCarcass(Other) != None)\n\t\t{\n\t\t\tpawn = ScriptedPawn(Other);\n\t\t\tdeco = DeusExDecoration(Other);\n\t\t\tcarcass = DeusExCarcass(Other);\n\t\n\t\t\tfperson = Spawn(class'FrozenPerson',,,Other.Location);\n\t\t\tfperson.SetCollisionSize(Other.CollisionRadius,Other.CollisionHeight);\n\t\t\tfperson.Texture = Other.Texture;\n\t\t\tfperson.Mesh=Other.Mesh;\n\t\t\tfperson.Mass=Other.Mass;\n\n\t\t\tfor (i=0;i<8;i++)\n\t\t\t{\n\t\t\t\tif ((Other.MultiSkins[i]==Texture'DeusExItems.Skins.GrayMaskTex')\n\t\t\t\t\t|| (Other.MultiSkins[i]==Texture'DeusExItems.Skins.PinkMaskTex')\n\t\t\t\t\t\t|| (Other.MultiSkins[i]==Texture'DeusExItems.Skins.BlackMaskTex'))\n\t\t\t\t{\n\t\t\t\t\tfperson.MultiSkins[i]=Other.MultiSkins[i];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tfperson.MultiSkins[i] = Texture'IceTex';\n\t\t\t}\n\t\t\tfperson.setRotation(Other.Rotation);\n\t\t\tOther.Destroy();\t\t\t\n\t\t\tDestroy();\n\t\t}\n\t\t\n\t}",
                        "locals": [
                            "local ScriptedPawn pawn;",
                            "local FrozenPerson fperson;",
                            "local int i;",
                            "local DeusExDecoration deco;",
                            "local DeusExCarcass carcass;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "ProcessTouch",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Other"
                            ],
                            [
                                "Vector",
                                "HitLocation"
                            ]
                        ],
                        "return": ""
                    },
                    "SpawnRocketEffects": {
                        "body": "{\n\t//does nothing here\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "SpawnRocketEffects",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Tick": {
                        "body": "{\n\n\t\tefs = Spawn(class'SizableEffectSpawner',,,Location);\n\t\tif (efs != None)\n\t\t{\n\t\t\tefs.EffectClass=class'MagicRing';\n\t\t\tefs.EffectSkin = Texture'BlueRay';\n\t\t\tefs.SizeofEffect = 1;\n\t\t\tefs.NumberSpawns = 1;\n\t\t\tefs.Interval = 0;\n\t\t\tefs.EffectLSpan = 1.0;\n   \t\t}\n\t}",
                        "locals": [
                            "Local SizableEffectSpawner efs;"
                        ],
                        "modifiers": [],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltaTime"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 122,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "FreezeGrenade.uc": {
            "body": "class FreezeGrenade expands ThrownProjectile;\n\nsimulated function DrawExplosionEffects(vector HitLocation, vector HitNormal)\n{\nlocal DeusExPlayer player;\nlocal ScriptedPawn pwn;\nlocal DeusExDecoration DXP;\nlocal PlayerResetter PR;\n\t\tlocal FrozenPerson fperson;\nlocal DeusExCarcass DXC;\nlocal int i;\n\t//bmeshenviromap and texture ice\n\tforeach VisibleActors(class'DeusExPlayer',player,768)\n\t{\n\t\tPR = Spawn(class'PlayerResetter');\n\t\tPR.Target = player;\n\t\tPR.SetTimer(15,False);\n\t\tPR.myTodo = \"unfreeze\";\n\t\tPlayer.bMeshEnviroMap=True;\n\t\tPlayer.Texture = Texture'IceTex';\n\t\tplayer.bMovable=False;\n\t\tplayer.bBehindView=True;\n\t}\n\t/*foreach VisibleActors(class'ScriptedPawn',pwn,768)\n\t{\n\t\t\tfperson = Spawn(class'FrozenPerson',,,pwn.Location);\n\t\t\tfperson.SetCollisionSize(pwn.CollisionRadius,pwn.CollisionHeight);\n\t\t\tfperson.Texture = pwn.Texture;\n\t\t\tfperson.Mesh=pwn.Mesh;\n\t\t\tfperson.Mass=pwn.Mass;\n\t\t\tfor (i=0;i<8;i++)\n\t\t\t{\n\t\t\t\tif ((pwn.MultiSkins[i]==Texture'DeusExItems.Skins.GrayMaskTex')\n\t\t\t\t\t|| (pwn.MultiSkins[i]==Texture'DeusExItems.Skins.PinkMaskTex')\n\t\t\t\t\t\t|| (pwn.MultiSkins[i]==Texture'DeusExItems.Skins.BlackMaskTex'))\n\t\t\t\t{\n\t\t\t\t\tfperson.MultiSkins[i]=pwn.MultiSkins[i];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tfperson.MultiSkins[i] = Texture'IceTex';\n\t\t\t}\n\t\t\tfperson.setRotation(pwn.Rotation);\n\t\t\tpwn.Destroy();\t\t\t\n\t}\n\tforeach VisibleActors(class'DeusExDecoration',dxp,768)\n\t{\n\t\t\tfperson = Spawn(class'FrozenPerson',,,dxp.Location);\n\t\t\tfperson.SetCollisionSize(dxp.CollisionRadius,dxp.CollisionHeight);\n\t\t\tfperson.Texture = dxp.Texture;\n\t\t\tfperson.Mesh=dxp.Mesh;\n\t\t\tfperson.Mass=dxp.Mass;\n\t\t\tfor (i=0;i<8;i++)\n\t\t\t{\n\t\t\t\tif ((dxp.MultiSkins[i]==Texture'DeusExItems.Skins.GrayMaskTex')\n\t\t\t\t\t|| (dxp.MultiSkins[i]==Texture'DeusExItems.Skins.PinkMaskTex')\n\t\t\t\t\t\t|| (dxp.MultiSkins[i]==Texture'DeusExItems.Skins.BlackMaskTex'))\n\t\t\t\t{\n\t\t\t\t\tfperson.MultiSkins[i]=dxp.MultiSkins[i];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tfperson.MultiSkins[i] = Texture'IceTex';\n\t\t\t}\n\t\t\tfperson.setRotation(dxp.Rotation);\n\t\t\tdxp.Destroy();\t\n\t}\n\tforeach VisibleActors(class'DeusExCarcass',DXC,768)\n\t{\n\t\t\tfperson = Spawn(class'FrozenPerson',,,DXC.Location);\n\t\t\tfperson.SetCollisionSize(DXC.CollisionRadius,DXC.CollisionHeight);\n\t\t\tfperson.Texture = DXC.Texture;\n\t\t\tfperson.Mesh=DXC.Mesh;\n\t\t\tfperson.Mass=DXC.Mass;\n\t\t\tfor (i=0;i<8;i++)\n\t\t\t{\n\t\t\t\tif ((DXC.MultiSkins[i]==Texture'DeusExItems.Skins.GrayMaskTex')\n\t\t\t\t\t|| (DXC.MultiSkins[i]==Texture'DeusExItems.Skins.PinkMaskTex')\n\t\t\t\t\t\t|| (DXC.MultiSkins[i]==Texture'DeusExItems.Skins.BlackMaskTex'))\n\t\t\t\t{\n\t\t\t\t\tfperson.MultiSkins[i]=DXC.MultiSkins[i];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tfperson.MultiSkins[i] = Texture'IceTex';\n\t\t\t}\n\t\t\tfperson.setRotation(DXC.Rotation);\n\t\t\tDXC.Destroy();\t\n\t}*/\n}\n\ndefaultproperties\n{\n     fuseLength=3.000000\n     proxRadius=128.000000\n     spawnWeaponClass=Class'PartyStuff.WeaponFreezeGrenade'\n     spawnAmmoClass=Class'PartyStuff.AmmoFreezeGrenade'\n     ItemName=\"Icer Grenade\"\n     ItemArticle=\"an\"\n     speed=1500.000000\n     ImpactSound=Sound'DeusExSounds.Generic.SmallExplosion2'\n     Mesh=LodMesh'DeusExItems.EMPGrenadePickup'\n}\n",
            "name": "FreezeGrenade.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "fuseLength=3.000000",
                    "proxRadius=128.000000",
                    "spawnWeaponClass=Class'PartyStuff.WeaponFreezeGrenade'",
                    "spawnAmmoClass=Class'PartyStuff.AmmoFreezeGrenade'",
                    "ItemName=\"Icer Grenade\"",
                    "ItemArticle=\"an\"",
                    "speed=1500.000000",
                    "ImpactSound=Sound'DeusExSounds.Generic.SmallExplosion2'",
                    "Mesh=LodMesh'DeusExItems.EMPGrenadePickup'"
                ],
                "exec": [],
                "extends": "ThrownProjectile",
                "functions": {
                    "DrawExplosionEffects": {
                        "body": "{\n\t//bmeshenviromap and texture ice\n\tforeach VisibleActors(class'DeusExPlayer',player,768)\n\t{\n\t\tPR = Spawn(class'PlayerResetter');\n\t\tPR.Target = player;\n\t\tPR.SetTimer(15,False);\n\t\tPR.myTodo = \"unfreeze\";\n\t\tPlayer.bMeshEnviroMap=True;\n\t\tPlayer.Texture = Texture'IceTex';\n\t\tplayer.bMovable=False;\n\t\tplayer.bBehindView=True;\n\t}\n\t/*foreach VisibleActors(class'ScriptedPawn',pwn,768)\n\t{\n\t\t\tfperson = Spawn(class'FrozenPerson',,,pwn.Location);\n\t\t\tfperson.SetCollisionSize(pwn.CollisionRadius,pwn.CollisionHeight);\n\t\t\tfperson.Texture = pwn.Texture;\n\t\t\tfperson.Mesh=pwn.Mesh;\n\t\t\tfperson.Mass=pwn.Mass;\n\t\t\tfor (i=0;i<8;i++)\n\t\t\t{\n\t\t\t\tif ((pwn.MultiSkins[i]==Texture'DeusExItems.Skins.GrayMaskTex')\n\t\t\t\t\t|| (pwn.MultiSkins[i]==Texture'DeusExItems.Skins.PinkMaskTex')\n\t\t\t\t\t\t|| (pwn.MultiSkins[i]==Texture'DeusExItems.Skins.BlackMaskTex'))\n\t\t\t\t{\n\t\t\t\t\tfperson.MultiSkins[i]=pwn.MultiSkins[i];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tfperson.MultiSkins[i] = Texture'IceTex';\n\t\t\t}\n\t\t\tfperson.setRotation(pwn.Rotation);\n\t\t\tpwn.Destroy();\t\t\t\n\t}\n\tforeach VisibleActors(class'DeusExDecoration',dxp,768)\n\t{\n\t\t\tfperson = Spawn(class'FrozenPerson',,,dxp.Location);\n\t\t\tfperson.SetCollisionSize(dxp.CollisionRadius,dxp.CollisionHeight);\n\t\t\tfperson.Texture = dxp.Texture;\n\t\t\tfperson.Mesh=dxp.Mesh;\n\t\t\tfperson.Mass=dxp.Mass;\n\t\t\tfor (i=0;i<8;i++)\n\t\t\t{\n\t\t\t\tif ((dxp.MultiSkins[i]==Texture'DeusExItems.Skins.GrayMaskTex')\n\t\t\t\t\t|| (dxp.MultiSkins[i]==Texture'DeusExItems.Skins.PinkMaskTex')\n\t\t\t\t\t\t|| (dxp.MultiSkins[i]==Texture'DeusExItems.Skins.BlackMaskTex'))\n\t\t\t\t{\n\t\t\t\t\tfperson.MultiSkins[i]=dxp.MultiSkins[i];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tfperson.MultiSkins[i] = Texture'IceTex';\n\t\t\t}\n\t\t\tfperson.setRotation(dxp.Rotation);\n\t\t\tdxp.Destroy();\t\n\t}\n\tforeach VisibleActors(class'DeusExCarcass',DXC,768)\n\t{\n\t\t\tfperson = Spawn(class'FrozenPerson',,,DXC.Location);\n\t\t\tfperson.SetCollisionSize(DXC.CollisionRadius,DXC.CollisionHeight);\n\t\t\tfperson.Texture = DXC.Texture;\n\t\t\tfperson.Mesh=DXC.Mesh;\n\t\t\tfperson.Mass=DXC.Mass;\n\t\t\tfor (i=0;i<8;i++)\n\t\t\t{\n\t\t\t\tif ((DXC.MultiSkins[i]==Texture'DeusExItems.Skins.GrayMaskTex')\n\t\t\t\t\t|| (DXC.MultiSkins[i]==Texture'DeusExItems.Skins.PinkMaskTex')\n\t\t\t\t\t\t|| (DXC.MultiSkins[i]==Texture'DeusExItems.Skins.BlackMaskTex'))\n\t\t\t\t{\n\t\t\t\t\tfperson.MultiSkins[i]=DXC.MultiSkins[i];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tfperson.MultiSkins[i] = Texture'IceTex';\n\t\t\t}\n\t\t\tfperson.setRotation(DXC.Rotation);\n\t\t\tDXC.Destroy();\t\n\t}*/\n}",
                        "locals": [
                            "local DeusExPlayer player;",
                            "local ScriptedPawn pwn;",
                            "local DeusExDecoration DXP;",
                            "local PlayerResetter PR;",
                            "local FrozenPerson fperson;",
                            "local DeusExCarcass DXC;",
                            "local int i;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "DrawExplosionEffects",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "HitLocation"
                            ],
                            [
                                "vector",
                                "HitNormal"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 101,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "FreezeGun.uc": {
            "body": "//=============================================================================\n// WeaponStealthPistol.\n//=============================================================================\nclass FreezeGun extends DeusExWeapon;\n\nvar() int fzHitDamage;\nfunction string GetDisplayString(Actor P)\n{\n\tif(P.isA('DeusExPlayer'))\n\t\treturn DeusExPlayer(p).PlayerReplicationInfo.PlayerName;\n\telse if(P.isA('ScriptedPawn'))\n\t\treturn ScriptedPawn(P).FamiliarName;\n\telse if(P.isA('DeusExDecoration'))\n\t\treturn DeusExDecoration(P).ItemName;\n}\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t\tReloadCount = mpReloadCount;\n\t}\n}\n\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\nfunction ProcessTraceHit(Actor Other, Vector HitLocation, Vector HitNormal, Vector X, Vector Y, Vector Z)\n{\n\tlocal float        mult;\n\tlocal name         damageType;\n\tlocal DeusExPlayer dxPlayer, DXP;\n\tlocal Pawn P;\n\t\n\tif(Other.isa('DeusExPlayer') && DeusExPlayer(Other).ReducedDamageType != 'all')\n\t{\n\t\tDeusExPlayer(Other).TakeDamage(fzHitDamage, DeusExPlayer(Owner), Other.Location, HitLocation,'Special');\n\t\t/*if(DeusExPlayer(Other).Health <= 0)\n\t\t{\n\t\t\tFreezeIt(Other);\n\t\t}*/\n\t\treturn;\n\t}\n\telse if(Other.isa('ScriptedPawn') && !ScriptedPawn(Other).bInvincible)\n\t{\n        ScriptedPawn(Other).TakeDamage(fzHitDamage, DeusExPlayer(Owner), Other.Location, HitLocation,'Special');\n        if(Rand(100) > ScriptedPawn(Other).Health){\n            FreezeIt(Other);\n        }\n\t\t\n\t\treturn;\n\t}\n\telse if(Other.isa('DeusExDecoration') && !Other.isa('FrozenPerson') && !DeusExDecoration(Other).bMovable == False && !DeusExDecoration(Other).bInvincible == True)\n\t{\n        DeusExDecoration(Other).TakeDamage(fzHitDamage, DeusExPlayer(Owner), Other.Location, HitLocation,'Special');\n        if(Rand(100) > ScriptedPawn(Other).Health){\n            FreezeIt(Other);\n        }\n\t\treturn;\n\t}\n}\n\nfunction FreezeIt(actor other)\n{\nlocal Pawn pawn;\nlocal DeusExDecoration deco;\nlocal DeusExCarcass carcass;\nlocal FrozenPerson fperson;\nlocal int i;\n\n\tpawn = pawn(Other);\n\tdeco = DeusExDecoration(Other);\n\tcarcass = DeusExCarcass(Other);\n\n\tfperson = Spawn(class'FrozenPerson',,,Other.Location);\n\tfperson.SetCollisionSize(Other.CollisionRadius,Other.CollisionHeight);\n\tfperson.Texture = Other.Texture;\n\tfperson.Mesh=Other.Mesh;\n\tfperson.Mass=Other.Mass/2;\n\tfperson.drawscale=Other.Drawscale;\n\t\n\tfor (i=0;i<8;i++)\n\t{\n\t\tif ((Other.MultiSkins[i]==Texture'DeusExItems.Skins.GrayMaskTex')\n\t\t\t|| (Other.MultiSkins[i]==Texture'DeusExItems.Skins.PinkMaskTex')\n\t\t\t\t|| (Other.MultiSkins[i]==Texture'DeusExItems.Skins.BlackMaskTex'))\n\t\t{\n\t\t\tfperson.MultiSkins[i]=Other.MultiSkins[i];\n\t\t}\n\t\telse\n\t\t\tfperson.MultiSkins[i] = Texture'IceTex';\n\t}\n\tfperson.setRotation(Other.Rotation);\n\tif(!Other.IsA('DeusExPlayer'))\n\t{\n\tOther.Destroy();\n\t}\n}\n\nsimulated function float CalculateAccuracy()\n{\n\treturn 0.000000; //Dirty hack to always return dead on accuracy.\n}\n\nstate NormalFire //(Thanks to JimBowen for this Infinite ammo code) \n{ \n   Begin: \n      if ((ClipCount >= ReloadCount) && (ReloadCount != 0)) \n      { \n         if (!bAutomatic) \n         { \n            bFiring = False; \n            FinishAnim(); \n         } \n    \n         if (Owner != None) \n         { \n            if (Owner.IsA('DeusExPlayer')) \n            { \n               bFiring = False; \n            } \n            else if (Owner.IsA('ScriptedPawn')) \n            { \n               bFiring = False; \n               ReloadAmmo(); \n            } \n         } \n         else \n         { \n            if (bHasMuzzleFlash) \n               EraseMuzzleFlashTexture(); \n            GotoState('Idle'); \n         } \n      } \n      if ( bAutomatic && (( Level.NetMode == NM_DedicatedServer ) || ((Level.NetMode == NM_ListenServer) && Owner.IsA('DeusExPlayer') && !DeusExPlayer(Owner).PlayerIsListenClient()))) \n         GotoState('Idle'); \n    \n      Sleep(GetShotTime()); \n      if (bAutomatic) \n      { \n         GenerateBullet();       // In multiplayer bullets are generated by the client which will let the server know when \n         Goto('Begin'); \n      } \n      bFiring = False; \n      FinishAnim(); \n    \n   /*      // if ReloadCount is 0 and we're not hand to hand, then this is a \n      // single-use weapon so destroy it after firing once \n      if ((ReloadCount == 0) && !bHandToHand) \n      { \n         if (DeusExPlayer(Owner) != None) \n            DeusExPlayer(Owner).RemoveItemFromSlot(Self);   // remove it from the inventory grid \n         Destroy(); \n      } \n      */              // Do I REALLY need all that crap JUST for infinite ammo? \n      ReadyToFire(); \n   Done: \n      bFiring = False; \n      Finish(); \n}\n\nfunction ScopeToggle()\n{\n\tDeusExPlayer(Owner).ConsoleCommand(\"Mutate rcon.tp\");\n}\n\ndefaultproperties\n{\n     fzHitDamage=20\n     GoverningSkill=Class'DeusEx.SkillWeaponPistol'\n     NoiseLevel=0.010000\n     ShotTime=0.150000\n     reloadTime=1.500000\n     HitDamage=0\n     maxRange=4800\n     AccurateRange=2400\n     BaseAccuracy=0.800000\n     bCanHaveScope=True\n     ScopeFOV=25\n     bCanHaveLaser=True\n     recoilStrength=0.100000\n     mpBaseAccuracy=0.200000\n     mpAccurateRange=1200\n     mpMaxRange=1200\n     bCanHaveModBaseAccuracy=True\n     bCanHaveModReloadCount=True\n     bCanHaveModAccurateRange=True\n     bCanHaveModReloadTime=True\n     bInstantHit=True\n     FireOffset=(X=-24.000000,Y=10.000000,Z=14.000000)\n     shakemag=50.000000\n     FireSound=Sound'DeusExSounds.Weapons.StealthPistolFire'\n     AltFireSound=Sound'DeusExSounds.Weapons.StealthPistolReloadEnd'\n     CockingSound=Sound'DeusExSounds.Weapons.StealthPistolReload'\n     SelectSound=Sound'DeusExSounds.Weapons.StealthPistolSelect'\n     ItemName=\"Freeze Gun\"\n     PlayerViewOffset=(X=24.000000,Y=-10.000000,Z=-14.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.StealthPistol'\n     PickupViewMesh=LodMesh'DeusExItems.StealthPistolPickup'\n     ThirdPersonMesh=LodMesh'DeusExItems.StealthPistol3rd'\n     Icon=Texture'DeusExUI.Icons.BeltIconStealthPistol'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconStealthPistol'\n     largeIconWidth=47\n     largeIconHeight=37\n     Description=\"The stealth pistol is a variant of the standard 10mm pistol with a larger clip and integrated silencer designed for wet work at very close ranges.\"\n     beltDescription=\"FREEZE\"\n     Mesh=LodMesh'DeusExItems.StealthPistolPickup'\n     CollisionRadius=8.000000\n     CollisionHeight=0.800000\n}\n",
            "name": "FreezeGun.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "fzHitDamage=20",
                    "GoverningSkill=Class'DeusEx.SkillWeaponPistol'",
                    "NoiseLevel=0.010000",
                    "ShotTime=0.150000",
                    "reloadTime=1.500000",
                    "HitDamage=0",
                    "maxRange=4800",
                    "AccurateRange=2400",
                    "BaseAccuracy=0.800000",
                    "bCanHaveScope=True",
                    "ScopeFOV=25",
                    "bCanHaveLaser=True",
                    "recoilStrength=0.100000",
                    "mpBaseAccuracy=0.200000",
                    "mpAccurateRange=1200",
                    "mpMaxRange=1200",
                    "bCanHaveModBaseAccuracy=True",
                    "bCanHaveModReloadCount=True",
                    "bCanHaveModAccurateRange=True",
                    "bCanHaveModReloadTime=True",
                    "bInstantHit=True",
                    "FireOffset=(X=-24.000000,Y=10.000000,Z=14.000000)",
                    "shakemag=50.000000",
                    "FireSound=Sound'DeusExSounds.Weapons.StealthPistolFire'",
                    "AltFireSound=Sound'DeusExSounds.Weapons.StealthPistolReloadEnd'",
                    "CockingSound=Sound'DeusExSounds.Weapons.StealthPistolReload'",
                    "SelectSound=Sound'DeusExSounds.Weapons.StealthPistolSelect'",
                    "ItemName=\"Freeze Gun\"",
                    "PlayerViewOffset=(X=24.000000,Y=-10.000000,Z=-14.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.StealthPistol'",
                    "PickupViewMesh=LodMesh'DeusExItems.StealthPistolPickup'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.StealthPistol3rd'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconStealthPistol'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconStealthPistol'",
                    "largeIconWidth=47",
                    "largeIconHeight=37",
                    "Description=\"The stealth pistol is a variant of the standard 10mm pistol with a larger clip and integrated silencer designed for wet work at very close ranges.\"",
                    "beltDescription=\"FREEZE\"",
                    "Mesh=LodMesh'DeusExItems.StealthPistolPickup'",
                    "CollisionRadius=8.000000",
                    "CollisionHeight=0.800000"
                ],
                "exec": [],
                "extends": "DeusExWeapon",
                "functions": {
                    "CalculateAccuracy": {
                        "body": "{\n\treturn 0.000000; //Dirty hack to always return dead on accuracy.\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "CalculateAccuracy",
                        "native": false,
                        "param": [],
                        "return": "float"
                    },
                    "FreezeIt": {
                        "body": "{\n\n\tpawn = pawn(Other);\n\tdeco = DeusExDecoration(Other);\n\tcarcass = DeusExCarcass(Other);\n\n\tfperson = Spawn(class'FrozenPerson',,,Other.Location);\n\tfperson.SetCollisionSize(Other.CollisionRadius,Other.CollisionHeight);\n\tfperson.Texture = Other.Texture;\n\tfperson.Mesh=Other.Mesh;\n\tfperson.Mass=Other.Mass/2;\n\tfperson.drawscale=Other.Drawscale;\n\t\n\tfor (i=0;i<8;i++)\n\t{\n\t\tif ((Other.MultiSkins[i]==Texture'DeusExItems.Skins.GrayMaskTex')\n\t\t\t|| (Other.MultiSkins[i]==Texture'DeusExItems.Skins.PinkMaskTex')\n\t\t\t\t|| (Other.MultiSkins[i]==Texture'DeusExItems.Skins.BlackMaskTex'))\n\t\t{\n\t\t\tfperson.MultiSkins[i]=Other.MultiSkins[i];\n\t\t}\n\t\telse\n\t\t\tfperson.MultiSkins[i] = Texture'IceTex';\n\t}\n\tfperson.setRotation(Other.Rotation);\n\tif(!Other.IsA('DeusExPlayer'))\n\t{\n\tOther.Destroy();\n\t}\n}",
                        "locals": [
                            "local Pawn pawn;",
                            "local DeusExDecoration deco;",
                            "local DeusExCarcass carcass;",
                            "local FrozenPerson fperson;",
                            "local int i;"
                        ],
                        "modifiers": [],
                        "name": "FreezeIt",
                        "native": false,
                        "param": [
                            [
                                "actor",
                                "other"
                            ]
                        ],
                        "return": ""
                    },
                    "GetDisplayString": {
                        "body": "{\n\tif(P.isA('DeusExPlayer'))\n\t\treturn DeusExPlayer(p).PlayerReplicationInfo.PlayerName;\n\telse if(P.isA('ScriptedPawn'))\n\t\treturn ScriptedPawn(P).FamiliarName;\n\telse if(P.isA('DeusExDecoration'))\n\t\treturn DeusExDecoration(P).ItemName;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetDisplayString",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "P"
                            ]
                        ],
                        "return": "string"
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t\tReloadCount = mpReloadCount;\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ProcessTraceHit": {
                        "body": "{\n\t\n\tif(Other.isa('DeusExPlayer') && DeusExPlayer(Other).ReducedDamageType != 'all')\n\t{\n\t\tDeusExPlayer(Other).TakeDamage(fzHitDamage, DeusExPlayer(Owner), Other.Location, HitLocation,'Special');\n\t\t/*if(DeusExPlayer(Other).Health <= 0)\n\t\t{\n\t\t\tFreezeIt(Other);\n\t\t}*/\n\t\treturn;\n\t}\n\telse if(Other.isa('ScriptedPawn') && !ScriptedPawn(Other).bInvincible)\n\t{\n        ScriptedPawn(Other).TakeDamage(fzHitDamage, DeusExPlayer(Owner), Other.Location, HitLocation,'Special');\n        if(Rand(100) > ScriptedPawn(Other).Health){\n            FreezeIt(Other);\n        }\n\t\t\n\t\treturn;\n\t}",
                        "locals": [
                            "local float        mult;",
                            "local name         damageType;",
                            "local DeusExPlayer dxPlayer, DXP;",
                            "local Pawn P;"
                        ],
                        "modifiers": [],
                        "name": "ProcessTraceHit",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Other"
                            ],
                            [
                                "Vector",
                                "HitLocation"
                            ],
                            [
                                "Vector",
                                "HitNormal"
                            ],
                            [
                                "Vector",
                                "X"
                            ],
                            [
                                "Vector",
                                "Y"
                            ],
                            [
                                "Vector",
                                "Z"
                            ]
                        ],
                        "return": ""
                    },
                    "ScopeToggle": {
                        "body": "{\n\tDeusExPlayer(Owner).ConsoleCommand(\"Mutate rcon.tp\");\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "ScopeToggle",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 222,
                "replication": "",
                "states": [],
                "variables": [
                    "var() int fzHitDamage;"
                ]
            }
        },
        "FrozenPerson.uc": {
            "body": "//=============================================================================\n// FrozenPerson.\n//=============================================================================\nclass FrozenPerson expands Containers;\n\n// ----------------------------------------------------------------------\n// Frag()\n//\n// copied from Engine.Decoration\n// modified so fragments will smoke\tand use the skin of their parent object\n// ----------------------------------------------------------------------\n\nsimulated function Frag(class<fragment> FragType, vector Momentum, float DSize, int NumFrags) \n{\n\tlocal int i;\n\tlocal actor A, Toucher;\n\tlocal DeusExFragment s;\n\t\t\n\tNumFrags*=10;\n\n\tif ( bOnlyTriggerable )\n\t\treturn; \n\tif (Event!='')\n\t\tforeach AllActors( class 'Actor', A, Event )\n\t\t\tA.Trigger( Toucher, pawn(Toucher) );\n\tif ( Region.Zone.bDestructive )\n\t{\n\t\tDestroy();\n\t\treturn;\n\t}\n\tfor (i=0 ; i<NumFrags ; i++) \n\t{\n\t\ts = DeusExFragment(Spawn(FragType, Owner));\n\t\tif (s != None)\n\t\t{\n\t\t\ts.Instigator = Instigator;\n\t\t\ts.CalcVelocity(Momentum,0);\n\t\t\ts.DrawScale = DSize*0.5+0.7*DSize*FRand();\n\t\t\ts.Skin = GetMeshTexture();\n\t\t\tif (bExplosive)\n\t\t\t\ts.bSmoking = True;\n\t\t}\n\t}\n\n\tif (!bExplosive)\n\t\tDestroy();\n}\n\ndefaultproperties\n{\n     HitPoints=10\n     FragType=Class'DeusEx.GlassFragment'\n     bFlammable=False\n     bHighlight=False\n     ItemName=\"Ice\"\n     bBlockSight=True\n     Texture=Texture'Engine.S_Pawn'\n     Mesh=LodMesh'DeusExDeco.CrateBreakableMed'\n     CollisionRadius=34.000000\n     CollisionHeight=24.000000\n     Mass=50.000000\n     Buoyancy=60.000000\n}\n",
            "name": "FrozenPerson.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "HitPoints=10",
                    "FragType=Class'DeusEx.GlassFragment'",
                    "bFlammable=False",
                    "bHighlight=False",
                    "ItemName=\"Ice\"",
                    "bBlockSight=True",
                    "Texture=Texture'Engine.S_Pawn'",
                    "Mesh=LodMesh'DeusExDeco.CrateBreakableMed'",
                    "CollisionRadius=34.000000",
                    "CollisionHeight=24.000000",
                    "Mass=50.000000",
                    "Buoyancy=60.000000"
                ],
                "exec": [],
                "extends": "Containers",
                "functions": {
                    "Frag": {
                        "body": "{\n\t\t\n\tNumFrags*=10;\n\n\tif ( bOnlyTriggerable )\n\t\treturn; \n\tif (Event!='')\n\t\tforeach AllActors( class 'Actor', A, Event )\n\t\t\tA.Trigger( Toucher, pawn(Toucher) );\n\tif ( Region.Zone.bDestructive )\n\t{\n\t\tDestroy();\n\t\treturn;\n\t}\n\tfor (i=0 ; i<NumFrags ; i++) \n\t{\n\t\ts = DeusExFragment(Spawn(FragType, Owner));\n\t\tif (s != None)\n\t\t{\n\t\t\ts.Instigator = Instigator;\n\t\t\ts.CalcVelocity(Momentum,0);\n\t\t\ts.DrawScale = DSize*0.5+0.7*DSize*FRand();\n\t\t\ts.Skin = GetMeshTexture();\n\t\t\tif (bExplosive)\n\t\t\t\ts.bSmoking = True;\n\t\t}\n\t}\n\n\tif (!bExplosive)\n\t\tDestroy();\n}",
                        "locals": [
                            "local int i;",
                            "local actor A, Toucher;",
                            "local DeusExFragment s;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Frag",
                        "native": false,
                        "param": [
                            [
                                "class<fragment>",
                                "FragType"
                            ],
                            [
                                "vector",
                                "Momentum"
                            ],
                            [
                                "float",
                                "DSize"
                            ],
                            [
                                "int",
                                "NumFrags"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 64,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "GalaxyChoc.uc": {
            "body": "class GalaxyChoc extends FoodMMRPG;\n\ndefaultproperties\n{\n     ItemName=\"ChocoCrunch Chocolate Bar\"\n     PlayerViewMesh=LodMesh'DeusExItems.Candybar'\n     PlayerViewScale=1.100000\n     PickupViewMesh=LodMesh'DeusExItems.Candybar'\n     PickupViewScale=1.100000\n     ThirdPersonMesh=LodMesh'DeusExItems.Candybar'\n     ThirdPersonScale=1.100000\n     Icon=Texture'PGAssets.Skins.GalaxyBelt'\n     largeIcon=Texture'PGAssets.Skins.GalaxyBelt'\n     largeIconWidth=46\n     largeIconHeight=36\n     beltDescription=\"CHOCOCRUNCH\"\n     Skin=Texture'PGAssets.Skins.GalaxyTex1'\n     Mesh=LodMesh'DeusExItems.Candybar'\n     DrawScale=1.100000\n     MultiSkins(0)=Texture'PGAssets.Skins.GalaxyTex1'\n     CollisionRadius=6.250000\n     CollisionHeight=0.670000\n     Mass=3.000000\n}\n",
            "name": "GalaxyChoc.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "ItemName=\"ChocoCrunch Chocolate Bar\"",
                    "PlayerViewMesh=LodMesh'DeusExItems.Candybar'",
                    "PlayerViewScale=1.100000",
                    "PickupViewMesh=LodMesh'DeusExItems.Candybar'",
                    "PickupViewScale=1.100000",
                    "ThirdPersonMesh=LodMesh'DeusExItems.Candybar'",
                    "ThirdPersonScale=1.100000",
                    "Icon=Texture'PGAssets.Skins.GalaxyBelt'",
                    "largeIcon=Texture'PGAssets.Skins.GalaxyBelt'",
                    "largeIconWidth=46",
                    "largeIconHeight=36",
                    "beltDescription=\"CHOCOCRUNCH\"",
                    "Skin=Texture'PGAssets.Skins.GalaxyTex1'",
                    "Mesh=LodMesh'DeusExItems.Candybar'",
                    "DrawScale=1.100000",
                    "MultiSkins(0)=Texture'PGAssets.Skins.GalaxyTex1'",
                    "CollisionRadius=6.250000",
                    "CollisionHeight=0.670000",
                    "Mass=3.000000"
                ],
                "exec": [],
                "extends": "FoodMMRPG",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 25,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "GalaxyChoc2.uc": {
            "body": "class GalaxyChoc2 extends FoodMMRPG;\n\ndefaultproperties\n{\n     ItemName=\"ChocoCrunch |p2[Strawberry]|p1 Bar\"\n     PlayerViewMesh=LodMesh'DeusExItems.Candybar'\n     PlayerViewScale=1.100000\n     PickupViewMesh=LodMesh'DeusExItems.Candybar'\n     PickupViewScale=1.100000\n     ThirdPersonMesh=LodMesh'DeusExItems.Candybar'\n     ThirdPersonScale=1.100000\n     Icon=Texture'PGAssets.Skins.BeltIconChoc2'\n     largeIcon=Texture'PGAssets.Skins.BeltIconChoc2'\n     largeIconWidth=46\n     largeIconHeight=36\n     beltDescription=\"|p2CH STRWBRY\"\n     Skin=Texture'PGAssets.Skins.GalaxyTex2'\n     Mesh=LodMesh'DeusExItems.Candybar'\n     DrawScale=1.100000\n     MultiSkins(0)=Texture'PGAssets.Skins.GalaxyTex2'\n     CollisionRadius=6.250000\n     CollisionHeight=0.670000\n     Mass=3.000000\n}\n",
            "name": "GalaxyChoc2.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "ItemName=\"ChocoCrunch |p2[Strawberry]|p1 Bar\"",
                    "PlayerViewMesh=LodMesh'DeusExItems.Candybar'",
                    "PlayerViewScale=1.100000",
                    "PickupViewMesh=LodMesh'DeusExItems.Candybar'",
                    "PickupViewScale=1.100000",
                    "ThirdPersonMesh=LodMesh'DeusExItems.Candybar'",
                    "ThirdPersonScale=1.100000",
                    "Icon=Texture'PGAssets.Skins.BeltIconChoc2'",
                    "largeIcon=Texture'PGAssets.Skins.BeltIconChoc2'",
                    "largeIconWidth=46",
                    "largeIconHeight=36",
                    "beltDescription=\"|p2CH STRWBRY\"",
                    "Skin=Texture'PGAssets.Skins.GalaxyTex2'",
                    "Mesh=LodMesh'DeusExItems.Candybar'",
                    "DrawScale=1.100000",
                    "MultiSkins(0)=Texture'PGAssets.Skins.GalaxyTex2'",
                    "CollisionRadius=6.250000",
                    "CollisionHeight=0.670000",
                    "Mass=3.000000"
                ],
                "exec": [],
                "extends": "FoodMMRPG",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 25,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "GalaxyChoc3.uc": {
            "body": "class GalaxyChoc3 extends FoodMMRPG;\n\ndefaultproperties\n{\n     ItemName=\"ChocoCrunch |p2[Mint]|p1 Bar\"\n     PlayerViewMesh=LodMesh'DeusExItems.Candybar'\n     PlayerViewScale=1.100000\n     PickupViewMesh=LodMesh'DeusExItems.Candybar'\n     PickupViewScale=1.100000\n     ThirdPersonMesh=LodMesh'DeusExItems.Candybar'\n     ThirdPersonScale=1.100000\n     Icon=Texture'PGAssets.Skins.BeltIconChoc3'\n     largeIcon=Texture'PGAssets.Skins.BeltIconChoc3'\n     largeIconWidth=46\n     largeIconHeight=36\n     Description=\"(c) MAINMAN\"\n     beltDescription=\"|p2CH MINT\"\n     Skin=Texture'PGAssets.Skins.GalaxyTex3'\n     Mesh=LodMesh'DeusExItems.Candybar'\n     DrawScale=1.100000\n     MultiSkins(0)=Texture'PGAssets.Skins.GalaxyTex3'\n     CollisionRadius=6.250000\n     CollisionHeight=0.670000\n     Mass=3.000000\n}\n",
            "name": "GalaxyChoc3.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "ItemName=\"ChocoCrunch |p2[Mint]|p1 Bar\"",
                    "PlayerViewMesh=LodMesh'DeusExItems.Candybar'",
                    "PlayerViewScale=1.100000",
                    "PickupViewMesh=LodMesh'DeusExItems.Candybar'",
                    "PickupViewScale=1.100000",
                    "ThirdPersonMesh=LodMesh'DeusExItems.Candybar'",
                    "ThirdPersonScale=1.100000",
                    "Icon=Texture'PGAssets.Skins.BeltIconChoc3'",
                    "largeIcon=Texture'PGAssets.Skins.BeltIconChoc3'",
                    "largeIconWidth=46",
                    "largeIconHeight=36",
                    "Description=\"(c) MAINMAN\"",
                    "beltDescription=\"|p2CH MINT\"",
                    "Skin=Texture'PGAssets.Skins.GalaxyTex3'",
                    "Mesh=LodMesh'DeusExItems.Candybar'",
                    "DrawScale=1.100000",
                    "MultiSkins(0)=Texture'PGAssets.Skins.GalaxyTex3'",
                    "CollisionRadius=6.250000",
                    "CollisionHeight=0.670000",
                    "Mass=3.000000"
                ],
                "exec": [],
                "extends": "FoodMMRPG",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 26,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "GlassShard.uc": {
            "body": "class GlassShard extends CraftingMaterial;\n\ndefaultproperties\n{\n     DispStr=\"[Ingredient] Required for Estus\"\n     bIngredient=True\n     ItemName=\"Glass Shard\"\n     beltDescription=\"Glass\"\n     CollisionRadius=10.000000\n}\n",
            "name": "GlassShard.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "DispStr=\"[Ingredient] Required for Estus\"",
                    "bIngredient=True",
                    "ItemName=\"Glass Shard\"",
                    "beltDescription=\"Glass\"",
                    "CollisionRadius=10.000000"
                ],
                "exec": [],
                "extends": "CraftingMaterial",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 11,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "GraffitiGun.uc": {
            "body": "//=============================================================================\n// Gun that sprays\n//=============================================================================\nclass GraffitiGun extends DeusExWeapon;\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t}\n}\n\ndefaultproperties\n{\n     LowAmmoWaterMark=50\n     GoverningSkill=Class'DeusEx.SkillWeaponLowTech'\n     NoiseLevel=0.200000\n     bAutomatic=True\n     ShotTime=0.000000\n     reloadTime=0.000000\n     HitDamage=0\n     maxRange=100\n     AccurateRange=100\n     BaseAccuracy=0.700000\n     bPenetrating=False\n     StunDuration=15.000000\n     bHasMuzzleFlash=False\n     mpReloadTime=4.000000\n     mpBaseAccuracy=0.700000\n     mpAccurateRange=100\n     mpMaxRange=100\n     AmmoName=Class'PartyStuff.SprayPaint'\n     ReloadCount=200\n     PickupAmmoCount=800\n     FireOffset=(X=-22.000000,Y=10.000000,Z=14.000000)\n     ProjectileClass=Class'PartyStuff.GraffitiSpray'\n     shakemag=10.000000\n     FireSound=Sound'DeusExSounds.Weapons.PepperGunFire'\n     AltFireSound=Sound'DeusExSounds.Weapons.PepperGunReloadEnd'\n     CockingSound=Sound'DeusExSounds.Weapons.PepperGunReload'\n     SelectSound=Sound'DeusExSounds.Weapons.PepperGunSelect'\n     InventoryGroup=164\n     ItemName=\"Graffiti Gun\"\n     PlayerViewOffset=(X=16.000000,Y=-10.000000,Z=-16.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.PepperGun'\n     PickupViewMesh=LodMesh'DeusExItems.PepperGunPickup'\n     ThirdPersonMesh=LodMesh'DeusExItems.PepperGun3rd'\n     Icon=Texture'DeusExUI.Icons.BeltIconPepperSpray'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconPepperSpray'\n     largeIconWidth=46\n     largeIconHeight=40\n     Description=\"The pepper gun will accept a number of commercially available riot control agents in cartridge form and disperse them as a fine aerosol mist that can cause blindness or blistering at short-range.\"\n     beltDescription=\"GRAFFITI\"\n     Mesh=LodMesh'DeusExItems.PepperGunPickup'\n     CollisionRadius=7.000000\n     CollisionHeight=1.500000\n     Mass=7.000000\n     Buoyancy=2.000000\n}\n",
            "name": "GraffitiGun.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "LowAmmoWaterMark=50",
                    "GoverningSkill=Class'DeusEx.SkillWeaponLowTech'",
                    "NoiseLevel=0.200000",
                    "bAutomatic=True",
                    "ShotTime=0.000000",
                    "reloadTime=0.000000",
                    "HitDamage=0",
                    "maxRange=100",
                    "AccurateRange=100",
                    "BaseAccuracy=0.700000",
                    "bPenetrating=False",
                    "StunDuration=15.000000",
                    "bHasMuzzleFlash=False",
                    "mpReloadTime=4.000000",
                    "mpBaseAccuracy=0.700000",
                    "mpAccurateRange=100",
                    "mpMaxRange=100",
                    "AmmoName=Class'PartyStuff.SprayPaint'",
                    "ReloadCount=200",
                    "PickupAmmoCount=800",
                    "FireOffset=(X=-22.000000,Y=10.000000,Z=14.000000)",
                    "ProjectileClass=Class'PartyStuff.GraffitiSpray'",
                    "shakemag=10.000000",
                    "FireSound=Sound'DeusExSounds.Weapons.PepperGunFire'",
                    "AltFireSound=Sound'DeusExSounds.Weapons.PepperGunReloadEnd'",
                    "CockingSound=Sound'DeusExSounds.Weapons.PepperGunReload'",
                    "SelectSound=Sound'DeusExSounds.Weapons.PepperGunSelect'",
                    "InventoryGroup=164",
                    "ItemName=\"Graffiti Gun\"",
                    "PlayerViewOffset=(X=16.000000,Y=-10.000000,Z=-16.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.PepperGun'",
                    "PickupViewMesh=LodMesh'DeusExItems.PepperGunPickup'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.PepperGun3rd'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconPepperSpray'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconPepperSpray'",
                    "largeIconWidth=46",
                    "largeIconHeight=40",
                    "Description=\"The pepper gun will accept a number of commercially available riot control agents in cartridge form and disperse them as a fine aerosol mist that can cause blindness or blistering at short-range.\"",
                    "beltDescription=\"GRAFFITI\"",
                    "Mesh=LodMesh'DeusExItems.PepperGunPickup'",
                    "CollisionRadius=7.000000",
                    "CollisionHeight=1.500000",
                    "Mass=7.000000",
                    "Buoyancy=2.000000"
                ],
                "exec": [],
                "extends": "DeusExWeapon",
                "functions": {
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 68,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "GraffitiGunBlue.uc": {
            "body": "//=============================================================================\n// Gun that sprays\n//=============================================================================\nclass GraffitiGunblue extends DeusExWeapon;\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t}\n}\n\ndefaultproperties\n{\n     LowAmmoWaterMark=50\n     GoverningSkill=Class'DeusEx.SkillWeaponLowTech'\n     NoiseLevel=0.200000\n     bAutomatic=True\n     ShotTime=0.000000\n     reloadTime=0.000000\n     HitDamage=0\n     maxRange=100\n     AccurateRange=100\n     BaseAccuracy=0.700000\n     bPenetrating=False\n     StunDuration=15.000000\n     bHasMuzzleFlash=False\n     mpReloadTime=4.000000\n     mpBaseAccuracy=0.700000\n     mpAccurateRange=100\n     mpMaxRange=100\n     AmmoName=Class'PartyStuff.SprayPaintBlue'\n     ReloadCount=200\n     PickupAmmoCount=800\n     FireOffset=(X=-22.000000,Y=10.000000,Z=14.000000)\n     ProjectileClass=Class'PartyStuff.GraffitiSprayBlue'\n     shakemag=10.000000\n     FireSound=Sound'DeusExSounds.Weapons.PepperGunFire'\n     AltFireSound=Sound'DeusExSounds.Weapons.PepperGunReloadEnd'\n     CockingSound=Sound'DeusExSounds.Weapons.PepperGunReload'\n     SelectSound=Sound'DeusExSounds.Weapons.PepperGunSelect'\n     InventoryGroup=28\n     ItemName=\"Graffiti Gun blue\"\n     PlayerViewOffset=(X=16.000000,Y=-10.000000,Z=-16.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.PepperGun'\n     PickupViewMesh=LodMesh'DeusExItems.PepperGunPickup'\n     ThirdPersonMesh=LodMesh'DeusExItems.PepperGun3rd'\n     Icon=Texture'DeusExUI.Icons.BeltIconPepperSpray'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconPepperSpray'\n     largeIconWidth=46\n     largeIconHeight=40\n     Description=\"The pepper gun will accept a number of commercially available riot control agents in cartridge form and disperse them as a fine aerosol mist that can cause blindness or blistering at short-range.\"\n     beltDescription=\"BLUE\"\n     Mesh=LodMesh'DeusExItems.PepperGunPickup'\n     CollisionRadius=7.000000\n     CollisionHeight=1.500000\n     Mass=7.000000\n     Buoyancy=2.000000\n}\n",
            "name": "GraffitiGunBlue.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "LowAmmoWaterMark=50",
                    "GoverningSkill=Class'DeusEx.SkillWeaponLowTech'",
                    "NoiseLevel=0.200000",
                    "bAutomatic=True",
                    "ShotTime=0.000000",
                    "reloadTime=0.000000",
                    "HitDamage=0",
                    "maxRange=100",
                    "AccurateRange=100",
                    "BaseAccuracy=0.700000",
                    "bPenetrating=False",
                    "StunDuration=15.000000",
                    "bHasMuzzleFlash=False",
                    "mpReloadTime=4.000000",
                    "mpBaseAccuracy=0.700000",
                    "mpAccurateRange=100",
                    "mpMaxRange=100",
                    "AmmoName=Class'PartyStuff.SprayPaintBlue'",
                    "ReloadCount=200",
                    "PickupAmmoCount=800",
                    "FireOffset=(X=-22.000000,Y=10.000000,Z=14.000000)",
                    "ProjectileClass=Class'PartyStuff.GraffitiSprayBlue'",
                    "shakemag=10.000000",
                    "FireSound=Sound'DeusExSounds.Weapons.PepperGunFire'",
                    "AltFireSound=Sound'DeusExSounds.Weapons.PepperGunReloadEnd'",
                    "CockingSound=Sound'DeusExSounds.Weapons.PepperGunReload'",
                    "SelectSound=Sound'DeusExSounds.Weapons.PepperGunSelect'",
                    "InventoryGroup=28",
                    "ItemName=\"Graffiti Gun blue\"",
                    "PlayerViewOffset=(X=16.000000,Y=-10.000000,Z=-16.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.PepperGun'",
                    "PickupViewMesh=LodMesh'DeusExItems.PepperGunPickup'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.PepperGun3rd'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconPepperSpray'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconPepperSpray'",
                    "largeIconWidth=46",
                    "largeIconHeight=40",
                    "Description=\"The pepper gun will accept a number of commercially available riot control agents in cartridge form and disperse them as a fine aerosol mist that can cause blindness or blistering at short-range.\"",
                    "beltDescription=\"BLUE\"",
                    "Mesh=LodMesh'DeusExItems.PepperGunPickup'",
                    "CollisionRadius=7.000000",
                    "CollisionHeight=1.500000",
                    "Mass=7.000000",
                    "Buoyancy=2.000000"
                ],
                "exec": [],
                "extends": "DeusExWeapon",
                "functions": {
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 68,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "GraffitiGunHyper.uc": {
            "body": "//=============================================================================\n// Gun that sprays\n//=============================================================================\nclass GraffitiGunHyper extends GraffitiGun;\n\ndefaultproperties\n{\n     ItemName=\"Graffiti Gun [MODIFIED]\"\n}\n",
            "name": "GraffitiGunHyper.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "ItemName=\"Graffiti Gun [MODIFIED]\""
                ],
                "exec": [],
                "extends": "GraffitiGun",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 10,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "GraffitiGunHyperBlue.uc": {
            "body": "//=============================================================================\n// Gun that sprays\n//=============================================================================\nclass GraffitiGunHyperblue extends GraffitiGunblue;\n\ndefaultproperties\n{\n     ItemName=\"Graffiti Gun blue [MODIFIED]\"\n}\n",
            "name": "GraffitiGunHyperBlue.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "ItemName=\"Graffiti Gun blue [MODIFIED]\""
                ],
                "exec": [],
                "extends": "GraffitiGunblue",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 10,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "GraffitiGunHyperPink.uc": {
            "body": "//=============================================================================\n// Gun that sprays\n//=============================================================================\nclass GraffitiGunHyperpink extends GraffitiGunpink;\n\ndefaultproperties\n{\n     ItemName=\"Graffiti Gun pink [MODIFIED]\"\n}\n",
            "name": "GraffitiGunHyperPink.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "ItemName=\"Graffiti Gun pink [MODIFIED]\""
                ],
                "exec": [],
                "extends": "GraffitiGunpink",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 10,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "GraffitiGunHyperRed.uc": {
            "body": "//=============================================================================\n// Gun that sprays\n//=============================================================================\nclass GraffitiGunHyperRed extends GraffitiGunRed;\n\ndefaultproperties\n{\n     ItemName=\"Graffiti Gun Red [MODIFIED]\"\n}\n",
            "name": "GraffitiGunHyperRed.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "ItemName=\"Graffiti Gun Red [MODIFIED]\""
                ],
                "exec": [],
                "extends": "GraffitiGunRed",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 10,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "GraffitiGunHyperYellow.uc": {
            "body": "//=============================================================================\n// Gun that sprays\n//=============================================================================\nclass GraffitiGunHyperYellow extends GraffitiGunYellow;\n\ndefaultproperties\n{\n     ItemName=\"Graffiti Gun Yellow [MODIFIED]\"\n}\n",
            "name": "GraffitiGunHyperYellow.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "ItemName=\"Graffiti Gun Yellow [MODIFIED]\""
                ],
                "exec": [],
                "extends": "GraffitiGunYellow",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 10,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "GraffitiGunRed.uc": {
            "body": "//=============================================================================\n// Gun that sprays\n//=============================================================================\nclass GraffitiGunRed extends DeusExWeapon;\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t}\n}\n\ndefaultproperties\n{\n     LowAmmoWaterMark=50\n     GoverningSkill=Class'DeusEx.SkillWeaponLowTech'\n     NoiseLevel=0.200000\n     bAutomatic=True\n     ShotTime=0.000000\n     reloadTime=0.000000\n     HitDamage=0\n     maxRange=100\n     AccurateRange=100\n     BaseAccuracy=0.700000\n     bPenetrating=False\n     StunDuration=15.000000\n     bHasMuzzleFlash=False\n     mpReloadTime=4.000000\n     mpBaseAccuracy=0.700000\n     mpAccurateRange=100\n     mpMaxRange=100\n     AmmoName=Class'PartyStuff.SprayPaintRed'\n     ReloadCount=200\n     PickupAmmoCount=800\n     FireOffset=(X=-22.000000,Y=10.000000,Z=14.000000)\n     ProjectileClass=Class'PartyStuff.GraffitiSprayRed'\n     shakemag=10.000000\n     FireSound=Sound'DeusExSounds.Weapons.PepperGunFire'\n     AltFireSound=Sound'DeusExSounds.Weapons.PepperGunReloadEnd'\n     CockingSound=Sound'DeusExSounds.Weapons.PepperGunReload'\n     SelectSound=Sound'DeusExSounds.Weapons.PepperGunSelect'\n     InventoryGroup=92\n     ItemName=\"Graffiti Gun Red\"\n     PlayerViewOffset=(X=16.000000,Y=-10.000000,Z=-16.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.PepperGun'\n     PickupViewMesh=LodMesh'DeusExItems.PepperGunPickup'\n     ThirdPersonMesh=LodMesh'DeusExItems.PepperGun3rd'\n     Icon=Texture'DeusExUI.Icons.BeltIconPepperSpray'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconPepperSpray'\n     largeIconWidth=46\n     largeIconHeight=40\n     Description=\"The pepper gun will accept a number of commercially available riot control agents in cartridge form and disperse them as a fine aerosol mist that can cause blindness or blistering at short-range.\"\n     beltDescription=\"RED\"\n     Mesh=LodMesh'DeusExItems.PepperGunPickup'\n     CollisionRadius=7.000000\n     CollisionHeight=1.500000\n     Mass=7.000000\n     Buoyancy=2.000000\n}\n",
            "name": "GraffitiGunRed.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "LowAmmoWaterMark=50",
                    "GoverningSkill=Class'DeusEx.SkillWeaponLowTech'",
                    "NoiseLevel=0.200000",
                    "bAutomatic=True",
                    "ShotTime=0.000000",
                    "reloadTime=0.000000",
                    "HitDamage=0",
                    "maxRange=100",
                    "AccurateRange=100",
                    "BaseAccuracy=0.700000",
                    "bPenetrating=False",
                    "StunDuration=15.000000",
                    "bHasMuzzleFlash=False",
                    "mpReloadTime=4.000000",
                    "mpBaseAccuracy=0.700000",
                    "mpAccurateRange=100",
                    "mpMaxRange=100",
                    "AmmoName=Class'PartyStuff.SprayPaintRed'",
                    "ReloadCount=200",
                    "PickupAmmoCount=800",
                    "FireOffset=(X=-22.000000,Y=10.000000,Z=14.000000)",
                    "ProjectileClass=Class'PartyStuff.GraffitiSprayRed'",
                    "shakemag=10.000000",
                    "FireSound=Sound'DeusExSounds.Weapons.PepperGunFire'",
                    "AltFireSound=Sound'DeusExSounds.Weapons.PepperGunReloadEnd'",
                    "CockingSound=Sound'DeusExSounds.Weapons.PepperGunReload'",
                    "SelectSound=Sound'DeusExSounds.Weapons.PepperGunSelect'",
                    "InventoryGroup=92",
                    "ItemName=\"Graffiti Gun Red\"",
                    "PlayerViewOffset=(X=16.000000,Y=-10.000000,Z=-16.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.PepperGun'",
                    "PickupViewMesh=LodMesh'DeusExItems.PepperGunPickup'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.PepperGun3rd'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconPepperSpray'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconPepperSpray'",
                    "largeIconWidth=46",
                    "largeIconHeight=40",
                    "Description=\"The pepper gun will accept a number of commercially available riot control agents in cartridge form and disperse them as a fine aerosol mist that can cause blindness or blistering at short-range.\"",
                    "beltDescription=\"RED\"",
                    "Mesh=LodMesh'DeusExItems.PepperGunPickup'",
                    "CollisionRadius=7.000000",
                    "CollisionHeight=1.500000",
                    "Mass=7.000000",
                    "Buoyancy=2.000000"
                ],
                "exec": [],
                "extends": "DeusExWeapon",
                "functions": {
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 68,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "GraffitiGunYellow.uc": {
            "body": "//=============================================================================\n// Gun that sprays\n//=============================================================================\nclass GraffitiGunYellow extends DeusExWeapon;\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t}\n}\n\ndefaultproperties\n{\n     LowAmmoWaterMark=50\n     GoverningSkill=Class'DeusEx.SkillWeaponLowTech'\n     NoiseLevel=0.200000\n     bAutomatic=True\n     ShotTime=0.000000\n     reloadTime=0.000000\n     HitDamage=0\n     maxRange=100\n     AccurateRange=100\n     BaseAccuracy=0.700000\n     bPenetrating=False\n     StunDuration=15.000000\n     bHasMuzzleFlash=False\n     mpReloadTime=4.000000\n     mpBaseAccuracy=0.700000\n     mpAccurateRange=100\n     mpMaxRange=100\n     AmmoName=Class'PartyStuff.SprayPaintYellow'\n     ReloadCount=200\n     PickupAmmoCount=800\n     FireOffset=(X=-22.000000,Y=10.000000,Z=14.000000)\n     ProjectileClass=Class'PartyStuff.GraffitiSprayYellow'\n     shakemag=10.000000\n     FireSound=Sound'DeusExSounds.Weapons.PepperGunFire'\n     AltFireSound=Sound'DeusExSounds.Weapons.PepperGunReloadEnd'\n     CockingSound=Sound'DeusExSounds.Weapons.PepperGunReload'\n     SelectSound=Sound'DeusExSounds.Weapons.PepperGunSelect'\n     InventoryGroup=105\n     ItemName=\"Graffiti Gun Yellow\"\n     PlayerViewOffset=(X=16.000000,Y=-10.000000,Z=-16.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.PepperGun'\n     PickupViewMesh=LodMesh'DeusExItems.PepperGunPickup'\n     ThirdPersonMesh=LodMesh'DeusExItems.PepperGun3rd'\n     Icon=Texture'DeusExUI.Icons.BeltIconPepperSpray'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconPepperSpray'\n     largeIconWidth=46\n     largeIconHeight=40\n     Description=\"The pepper gun will accept a number of commercially available riot control agents in cartridge form and disperse them as a fine aerosol mist that can cause blindness or blistering at short-range.\"\n     beltDescription=\"YELLOW\"\n     Mesh=LodMesh'DeusExItems.PepperGunPickup'\n     CollisionRadius=7.000000\n     CollisionHeight=1.500000\n     Mass=7.000000\n     Buoyancy=2.000000\n}\n",
            "name": "GraffitiGunYellow.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "LowAmmoWaterMark=50",
                    "GoverningSkill=Class'DeusEx.SkillWeaponLowTech'",
                    "NoiseLevel=0.200000",
                    "bAutomatic=True",
                    "ShotTime=0.000000",
                    "reloadTime=0.000000",
                    "HitDamage=0",
                    "maxRange=100",
                    "AccurateRange=100",
                    "BaseAccuracy=0.700000",
                    "bPenetrating=False",
                    "StunDuration=15.000000",
                    "bHasMuzzleFlash=False",
                    "mpReloadTime=4.000000",
                    "mpBaseAccuracy=0.700000",
                    "mpAccurateRange=100",
                    "mpMaxRange=100",
                    "AmmoName=Class'PartyStuff.SprayPaintYellow'",
                    "ReloadCount=200",
                    "PickupAmmoCount=800",
                    "FireOffset=(X=-22.000000,Y=10.000000,Z=14.000000)",
                    "ProjectileClass=Class'PartyStuff.GraffitiSprayYellow'",
                    "shakemag=10.000000",
                    "FireSound=Sound'DeusExSounds.Weapons.PepperGunFire'",
                    "AltFireSound=Sound'DeusExSounds.Weapons.PepperGunReloadEnd'",
                    "CockingSound=Sound'DeusExSounds.Weapons.PepperGunReload'",
                    "SelectSound=Sound'DeusExSounds.Weapons.PepperGunSelect'",
                    "InventoryGroup=105",
                    "ItemName=\"Graffiti Gun Yellow\"",
                    "PlayerViewOffset=(X=16.000000,Y=-10.000000,Z=-16.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.PepperGun'",
                    "PickupViewMesh=LodMesh'DeusExItems.PepperGunPickup'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.PepperGun3rd'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconPepperSpray'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconPepperSpray'",
                    "largeIconWidth=46",
                    "largeIconHeight=40",
                    "Description=\"The pepper gun will accept a number of commercially available riot control agents in cartridge form and disperse them as a fine aerosol mist that can cause blindness or blistering at short-range.\"",
                    "beltDescription=\"YELLOW\"",
                    "Mesh=LodMesh'DeusExItems.PepperGunPickup'",
                    "CollisionRadius=7.000000",
                    "CollisionHeight=1.500000",
                    "Mass=7.000000",
                    "Buoyancy=2.000000"
                ],
                "exec": [],
                "extends": "DeusExWeapon",
                "functions": {
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 68,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "GraffitiGunpink.uc": {
            "body": "//=============================================================================\n// Gun that sprays\n//=============================================================================\nclass GraffitiGunpink extends DeusExWeapon;\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t}\n}\n\ndefaultproperties\n{\n     LowAmmoWaterMark=50\n     GoverningSkill=Class'DeusEx.SkillWeaponLowTech'\n     NoiseLevel=0.200000\n     bAutomatic=True\n     ShotTime=0.000000\n     reloadTime=0.000000\n     HitDamage=0\n     maxRange=100\n     AccurateRange=100\n     BaseAccuracy=0.700000\n     bPenetrating=False\n     StunDuration=15.000000\n     bHasMuzzleFlash=False\n     mpReloadTime=4.000000\n     mpBaseAccuracy=0.700000\n     mpAccurateRange=100\n     mpMaxRange=100\n     AmmoName=Class'PartyStuff.SprayPaintPink'\n     ReloadCount=200\n     PickupAmmoCount=800\n     FireOffset=(X=-22.000000,Y=10.000000,Z=14.000000)\n     ProjectileClass=Class'PartyStuff.GraffitiSprayPink'\n     shakemag=10.000000\n     FireSound=Sound'DeusExSounds.Weapons.PepperGunFire'\n     AltFireSound=Sound'DeusExSounds.Weapons.PepperGunReloadEnd'\n     CockingSound=Sound'DeusExSounds.Weapons.PepperGunReload'\n     SelectSound=Sound'DeusExSounds.Weapons.PepperGunSelect'\n     InventoryGroup=69\n     ItemName=\"Graffiti Gun pink\"\n     PlayerViewOffset=(X=16.000000,Y=-10.000000,Z=-16.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.PepperGun'\n     PickupViewMesh=LodMesh'DeusExItems.PepperGunPickup'\n     ThirdPersonMesh=LodMesh'DeusExItems.PepperGun3rd'\n     Icon=Texture'DeusExUI.Icons.BeltIconPepperSpray'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconPepperSpray'\n     largeIconWidth=46\n     largeIconHeight=40\n     Description=\"The pepper gun will accept a number of commercially available riot control agents in cartridge form and disperse them as a fine aerosol mist that can cause blindness or blistering at short-range.\"\n     beltDescription=\"PINK\"\n     Mesh=LodMesh'DeusExItems.PepperGunPickup'\n     CollisionRadius=7.000000\n     CollisionHeight=1.500000\n     Mass=7.000000\n     Buoyancy=2.000000\n}\n",
            "name": "GraffitiGunpink.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "LowAmmoWaterMark=50",
                    "GoverningSkill=Class'DeusEx.SkillWeaponLowTech'",
                    "NoiseLevel=0.200000",
                    "bAutomatic=True",
                    "ShotTime=0.000000",
                    "reloadTime=0.000000",
                    "HitDamage=0",
                    "maxRange=100",
                    "AccurateRange=100",
                    "BaseAccuracy=0.700000",
                    "bPenetrating=False",
                    "StunDuration=15.000000",
                    "bHasMuzzleFlash=False",
                    "mpReloadTime=4.000000",
                    "mpBaseAccuracy=0.700000",
                    "mpAccurateRange=100",
                    "mpMaxRange=100",
                    "AmmoName=Class'PartyStuff.SprayPaintPink'",
                    "ReloadCount=200",
                    "PickupAmmoCount=800",
                    "FireOffset=(X=-22.000000,Y=10.000000,Z=14.000000)",
                    "ProjectileClass=Class'PartyStuff.GraffitiSprayPink'",
                    "shakemag=10.000000",
                    "FireSound=Sound'DeusExSounds.Weapons.PepperGunFire'",
                    "AltFireSound=Sound'DeusExSounds.Weapons.PepperGunReloadEnd'",
                    "CockingSound=Sound'DeusExSounds.Weapons.PepperGunReload'",
                    "SelectSound=Sound'DeusExSounds.Weapons.PepperGunSelect'",
                    "InventoryGroup=69",
                    "ItemName=\"Graffiti Gun pink\"",
                    "PlayerViewOffset=(X=16.000000,Y=-10.000000,Z=-16.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.PepperGun'",
                    "PickupViewMesh=LodMesh'DeusExItems.PepperGunPickup'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.PepperGun3rd'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconPepperSpray'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconPepperSpray'",
                    "largeIconWidth=46",
                    "largeIconHeight=40",
                    "Description=\"The pepper gun will accept a number of commercially available riot control agents in cartridge form and disperse them as a fine aerosol mist that can cause blindness or blistering at short-range.\"",
                    "beltDescription=\"PINK\"",
                    "Mesh=LodMesh'DeusExItems.PepperGunPickup'",
                    "CollisionRadius=7.000000",
                    "CollisionHeight=1.500000",
                    "Mass=7.000000",
                    "Buoyancy=2.000000"
                ],
                "exec": [],
                "extends": "DeusExWeapon",
                "functions": {
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 68,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "GraffitiMark.uc": {
            "body": "//=============================================================================\n// Spray mark.\n//=============================================================================\nclass GraffitiMark extends AveDecal;\n\nvar float spreadTime;\nvar float maxDrawScale;\nvar float time;\n\nsimulated function Tick(float deltaTime)\n{\n\ttime += deltaTime;\n\tif (time <= spreadTime)\n\t{\n\t\tDrawScale = maxDrawScale * time / spreadTime;\n\t\tReattachDecal(vect(0.1,0.1,0));\n\t}\n}\n\ndefaultproperties\n{\n     spreadTime=0.100000\n     maxDrawScale=0.500000\n     Texture=Texture'PGAssets.Skins.gdefault'\n}\n",
            "name": "GraffitiMark.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "spreadTime=0.100000",
                    "maxDrawScale=0.500000",
                    "Texture=Texture'PGAssets.Skins.gdefault'"
                ],
                "exec": [],
                "extends": "AveDecal",
                "functions": {
                    "Tick": {
                        "body": "{\n\ttime += deltaTime;\n\tif (time <= spreadTime)\n\t{\n\t\tDrawScale = maxDrawScale * time / spreadTime;\n\t\tReattachDecal(vect(0.1,0.1,0));\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltaTime"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 26,
                "replication": "",
                "states": [],
                "variables": [
                    "var float spreadTime;",
                    "var float maxDrawScale;",
                    "var float time;"
                ]
            }
        },
        "GraffitiMarkBlue.uc": {
            "body": "//=============================================================================\n// Spray mark.\n//=============================================================================\nclass GraffitiMarkBlue extends AveDecal;\n\nvar float spreadTime;\nvar float maxDrawScale;\nvar float time;\n\nsimulated function Tick(float deltaTime)\n{\n\ttime += deltaTime;\n\tif (time <= spreadTime)\n\t{\n\t\tDrawScale = maxDrawScale * time / spreadTime;\n\t\tReattachDecal(vect(0.1,0.1,0));\n\t}\n}\n\ndefaultproperties\n{\n     spreadTime=0.100000\n     maxDrawScale=0.500000\n     Texture=Texture'PGAssets.Skins.gblue'\n}\n",
            "name": "GraffitiMarkBlue.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "spreadTime=0.100000",
                    "maxDrawScale=0.500000",
                    "Texture=Texture'PGAssets.Skins.gblue'"
                ],
                "exec": [],
                "extends": "AveDecal",
                "functions": {
                    "Tick": {
                        "body": "{\n\ttime += deltaTime;\n\tif (time <= spreadTime)\n\t{\n\t\tDrawScale = maxDrawScale * time / spreadTime;\n\t\tReattachDecal(vect(0.1,0.1,0));\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltaTime"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 26,
                "replication": "",
                "states": [],
                "variables": [
                    "var float spreadTime;",
                    "var float maxDrawScale;",
                    "var float time;"
                ]
            }
        },
        "GraffitiMarkPink.uc": {
            "body": "//=============================================================================\n// Spray mark.\n//=============================================================================\nclass GraffitiMarkpink extends AveDecal;\n\nvar float spreadTime;\nvar float maxDrawScale;\nvar float time;\n\nsimulated function Tick(float deltaTime)\n{\n\ttime += deltaTime;\n\tif (time <= spreadTime)\n\t{\n\t\tDrawScale = maxDrawScale * time / spreadTime;\n\t\tReattachDecal(vect(0.1,0.1,0));\n\t}\n}\n\ndefaultproperties\n{\n     spreadTime=0.100000\n     maxDrawScale=0.500000\n     Texture=Texture'PGAssets.Skins.gpink'\n}\n",
            "name": "GraffitiMarkPink.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "spreadTime=0.100000",
                    "maxDrawScale=0.500000",
                    "Texture=Texture'PGAssets.Skins.gpink'"
                ],
                "exec": [],
                "extends": "AveDecal",
                "functions": {
                    "Tick": {
                        "body": "{\n\ttime += deltaTime;\n\tif (time <= spreadTime)\n\t{\n\t\tDrawScale = maxDrawScale * time / spreadTime;\n\t\tReattachDecal(vect(0.1,0.1,0));\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltaTime"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 26,
                "replication": "",
                "states": [],
                "variables": [
                    "var float spreadTime;",
                    "var float maxDrawScale;",
                    "var float time;"
                ]
            }
        },
        "GraffitiMarkRed.uc": {
            "body": "//=============================================================================\n// Spray mark.\n//=============================================================================\nclass GraffitiMarkred extends AveDecal;\n\nvar float spreadTime;\nvar float maxDrawScale;\nvar float time;\n\nsimulated function Tick(float deltaTime)\n{\n\ttime += deltaTime;\n\tif (time <= spreadTime)\n\t{\n\t\tDrawScale = maxDrawScale * time / spreadTime;\n\t\tReattachDecal(vect(0.1,0.1,0));\n\t}\n}\n\ndefaultproperties\n{\n     spreadTime=0.100000\n     maxDrawScale=0.500000\n     Texture=Texture'PGAssets.Skins.gred'\n}\n",
            "name": "GraffitiMarkRed.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "spreadTime=0.100000",
                    "maxDrawScale=0.500000",
                    "Texture=Texture'PGAssets.Skins.gred'"
                ],
                "exec": [],
                "extends": "AveDecal",
                "functions": {
                    "Tick": {
                        "body": "{\n\ttime += deltaTime;\n\tif (time <= spreadTime)\n\t{\n\t\tDrawScale = maxDrawScale * time / spreadTime;\n\t\tReattachDecal(vect(0.1,0.1,0));\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltaTime"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 26,
                "replication": "",
                "states": [],
                "variables": [
                    "var float spreadTime;",
                    "var float maxDrawScale;",
                    "var float time;"
                ]
            }
        },
        "GraffitiMarkYellow.uc": {
            "body": "//=============================================================================\n// Spray mark.\n//=============================================================================\nclass GraffitiMarkyellow extends AveDecal;\n\nvar float spreadTime;\nvar float maxDrawScale;\nvar float time;\n\nsimulated function Tick(float deltaTime)\n{\n\ttime += deltaTime;\n\tif (time <= spreadTime)\n\t{\n\t\tDrawScale = maxDrawScale * time / spreadTime;\n\t\tReattachDecal(vect(0.1,0.1,0));\n\t}\n}\n\ndefaultproperties\n{\n     spreadTime=0.100000\n     maxDrawScale=0.500000\n     Texture=Texture'PGAssets.Skins.gyellow'\n}\n",
            "name": "GraffitiMarkYellow.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "spreadTime=0.100000",
                    "maxDrawScale=0.500000",
                    "Texture=Texture'PGAssets.Skins.gyellow'"
                ],
                "exec": [],
                "extends": "AveDecal",
                "functions": {
                    "Tick": {
                        "body": "{\n\ttime += deltaTime;\n\tif (time <= spreadTime)\n\t{\n\t\tDrawScale = maxDrawScale * time / spreadTime;\n\t\tReattachDecal(vect(0.1,0.1,0));\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltaTime"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 26,
                "replication": "",
                "states": [],
                "variables": [
                    "var float spreadTime;",
                    "var float maxDrawScale;",
                    "var float time;"
                ]
            }
        },
        "GraffitiSpray.uc": {
            "body": "//=============================================================================\n// TearGas.\n//=============================================================================\nclass GraffitiSpray extends DeusExProjectile;\n\ndefaultproperties\n{\n     blastRadius=1.000000\n     DamageType=Poison\n     AccurateRange=200\n     maxRange=200\n     bIgnoresNanoDefense=True\n     ItemName=\"Graffiti Spray\"\n     ItemArticle=\"some\"\n     speed=800.000000\n     MaxSpeed=800.000000\n     Damage=2.000000\n     MomentumTransfer=400\n     ExplosionDecal=Class'PartyStuff.GraffitiMark'\n     LifeSpan=0.500000\n     Texture=Texture'PGAssets.Skins.gdefault'\n     DrawScale=0.250000\n     bUnlit=True\n}\n",
            "name": "GraffitiSpray.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "blastRadius=1.000000",
                    "DamageType=Poison",
                    "AccurateRange=200",
                    "maxRange=200",
                    "bIgnoresNanoDefense=True",
                    "ItemName=\"Graffiti Spray\"",
                    "ItemArticle=\"some\"",
                    "speed=800.000000",
                    "MaxSpeed=800.000000",
                    "Damage=2.000000",
                    "MomentumTransfer=400",
                    "ExplosionDecal=Class'PartyStuff.GraffitiMark'",
                    "LifeSpan=0.500000",
                    "Texture=Texture'PGAssets.Skins.gdefault'",
                    "DrawScale=0.250000",
                    "bUnlit=True"
                ],
                "exec": [],
                "extends": "DeusExProjectile",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 25,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "GraffitiSprayBlue.uc": {
            "body": "//=============================================================================\n// TearGas.\n//=============================================================================\nclass GraffitiSprayBlue extends DeusExProjectile;\n\ndefaultproperties\n{\n     blastRadius=1.000000\n     DamageType=Poison\n     AccurateRange=200\n     maxRange=200\n     bIgnoresNanoDefense=True\n     ItemName=\"Graffiti Spray\"\n     ItemArticle=\"some\"\n     speed=800.000000\n     MaxSpeed=800.000000\n     Damage=2.000000\n     MomentumTransfer=400\n     ExplosionDecal=Class'PartyStuff.GraffitiMarkBlue'\n     LifeSpan=0.500000\n     Texture=Texture'PGAssets.Skins.gblue'\n     DrawScale=0.250000\n     bUnlit=True\n}\n",
            "name": "GraffitiSprayBlue.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "blastRadius=1.000000",
                    "DamageType=Poison",
                    "AccurateRange=200",
                    "maxRange=200",
                    "bIgnoresNanoDefense=True",
                    "ItemName=\"Graffiti Spray\"",
                    "ItemArticle=\"some\"",
                    "speed=800.000000",
                    "MaxSpeed=800.000000",
                    "Damage=2.000000",
                    "MomentumTransfer=400",
                    "ExplosionDecal=Class'PartyStuff.GraffitiMarkBlue'",
                    "LifeSpan=0.500000",
                    "Texture=Texture'PGAssets.Skins.gblue'",
                    "DrawScale=0.250000",
                    "bUnlit=True"
                ],
                "exec": [],
                "extends": "DeusExProjectile",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 25,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "GraffitiSprayPink.uc": {
            "body": "//=============================================================================\n// TearGas.\n//=============================================================================\nclass GraffitiSpraypink extends DeusExProjectile;\n\ndefaultproperties\n{\n     blastRadius=1.000000\n     DamageType=Poison\n     AccurateRange=200\n     maxRange=200\n     bIgnoresNanoDefense=True\n     ItemName=\"Graffiti Spray\"\n     ItemArticle=\"some\"\n     speed=800.000000\n     MaxSpeed=800.000000\n     Damage=2.000000\n     MomentumTransfer=400\n     ExplosionDecal=Class'PartyStuff.GraffitiMarkPink'\n     LifeSpan=0.500000\n     Texture=Texture'PGAssets.Skins.gpink'\n     DrawScale=0.250000\n     bUnlit=True\n}\n",
            "name": "GraffitiSprayPink.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "blastRadius=1.000000",
                    "DamageType=Poison",
                    "AccurateRange=200",
                    "maxRange=200",
                    "bIgnoresNanoDefense=True",
                    "ItemName=\"Graffiti Spray\"",
                    "ItemArticle=\"some\"",
                    "speed=800.000000",
                    "MaxSpeed=800.000000",
                    "Damage=2.000000",
                    "MomentumTransfer=400",
                    "ExplosionDecal=Class'PartyStuff.GraffitiMarkPink'",
                    "LifeSpan=0.500000",
                    "Texture=Texture'PGAssets.Skins.gpink'",
                    "DrawScale=0.250000",
                    "bUnlit=True"
                ],
                "exec": [],
                "extends": "DeusExProjectile",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 25,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "GraffitiSprayRed.uc": {
            "body": "//=============================================================================\n// TearGas.\n//=============================================================================\nclass GraffitiSprayred extends DeusExProjectile;\n\ndefaultproperties\n{\n     blastRadius=1.000000\n     DamageType=Poison\n     AccurateRange=200\n     maxRange=200\n     bIgnoresNanoDefense=True\n     ItemName=\"Graffiti Spray\"\n     ItemArticle=\"some\"\n     speed=800.000000\n     MaxSpeed=800.000000\n     Damage=2.000000\n     MomentumTransfer=400\n     ExplosionDecal=Class'PartyStuff.GraffitiMarkRed'\n     LifeSpan=0.500000\n     Texture=Texture'PGAssets.Skins.gred'\n     DrawScale=0.250000\n     bUnlit=True\n}\n",
            "name": "GraffitiSprayRed.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "blastRadius=1.000000",
                    "DamageType=Poison",
                    "AccurateRange=200",
                    "maxRange=200",
                    "bIgnoresNanoDefense=True",
                    "ItemName=\"Graffiti Spray\"",
                    "ItemArticle=\"some\"",
                    "speed=800.000000",
                    "MaxSpeed=800.000000",
                    "Damage=2.000000",
                    "MomentumTransfer=400",
                    "ExplosionDecal=Class'PartyStuff.GraffitiMarkRed'",
                    "LifeSpan=0.500000",
                    "Texture=Texture'PGAssets.Skins.gred'",
                    "DrawScale=0.250000",
                    "bUnlit=True"
                ],
                "exec": [],
                "extends": "DeusExProjectile",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 25,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "GraffitiSprayYellow.uc": {
            "body": "//=============================================================================\n// TearGas.\n//=============================================================================\nclass GraffitiSprayyellow extends DeusExProjectile;\n\ndefaultproperties\n{\n     blastRadius=1.000000\n     DamageType=Poison\n     AccurateRange=200\n     maxRange=200\n     bIgnoresNanoDefense=True\n     ItemName=\"Graffiti Spray\"\n     ItemArticle=\"some\"\n     speed=800.000000\n     MaxSpeed=800.000000\n     Damage=2.000000\n     MomentumTransfer=400\n     ExplosionDecal=Class'PartyStuff.GraffitiMarkYellow'\n     LifeSpan=0.500000\n     Texture=Texture'PGAssets.Skins.gyellow'\n     DrawScale=0.250000\n     bUnlit=True\n}\n",
            "name": "GraffitiSprayYellow.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "blastRadius=1.000000",
                    "DamageType=Poison",
                    "AccurateRange=200",
                    "maxRange=200",
                    "bIgnoresNanoDefense=True",
                    "ItemName=\"Graffiti Spray\"",
                    "ItemArticle=\"some\"",
                    "speed=800.000000",
                    "MaxSpeed=800.000000",
                    "Damage=2.000000",
                    "MomentumTransfer=400",
                    "ExplosionDecal=Class'PartyStuff.GraffitiMarkYellow'",
                    "LifeSpan=0.500000",
                    "Texture=Texture'PGAssets.Skins.gyellow'",
                    "DrawScale=0.250000",
                    "bUnlit=True"
                ],
                "exec": [],
                "extends": "DeusExProjectile",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 25,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "GrayShoot.uc": {
            "body": "//=============================================================================\n// GrayShoot.\n//=============================================================================\nclass GrayShoot expands GraySpit;\n\ndefaultproperties\n{\n     ItemName=\"Bio Shot\"\n     ItemArticle=\"a\"\n     Damage=20.000000\n}\n",
            "name": "GrayShoot.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "ItemName=\"Bio Shot\"",
                    "ItemArticle=\"a\"",
                    "Damage=20.000000"
                ],
                "exec": [],
                "extends": "GraySpit",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 12,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "GreaselShoot.uc": {
            "body": "//=============================================================================\n// GrayShoot.\n//=============================================================================\nclass GreaselShoot expands GreaselSpit;\n\ndefaultproperties\n{\n     ItemName=\"Bio Spit\"\n     ItemArticle=\"a\"\n     Damage=20.000000\n}\n",
            "name": "GreaselShoot.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "ItemName=\"Bio Spit\"",
                    "ItemArticle=\"a\"",
                    "Damage=20.000000"
                ],
                "exec": [],
                "extends": "GreaselSpit",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 12,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "HiddenFrob.uc": {
            "body": "//=============================================\n// MSGR object\n//=============================================\nClass HiddenFrob extends DeusExDecoration;\n\nvar() bool bMessage, bTrigger, bTimedrepeat;\nvar() int TimedRepeat;\nvar() string mMessage;\n\nfunction Timer()\n{\n}\n\nfunction Frob(Actor Frobber, Inventory frobWith) \n{\n\tlocal DeusExPlayer P;\n\tP = DeusExPlayer(Frobber);\n\tif(bMessage)\n\t{\n\t\tP.ClientMessage(mMessage);\n\t}\n\tif(bTrigger)\n\t{\n\tSuper.Frob(frobber, frobwith);\n\t\tif(bTimedrepeat)\n\t\t\tSetTimer(TimedRepeat,False);\n\t}\n}\n\ndefaultproperties\n{\n     bInvincible=True\n     ItemName=\"???\"\n     bPushable=False\n     bMovable=False\n     Physics=PHYS_None\n     Style=STY_Translucent\n     Sprite=Texture'DeusExUI.UserInterface.LogIcon'\n     Texture=Texture'DeusExUI.UserInterface.LogIcon'\n     Skin=Texture'DeusExUI.UserInterface.LogIcon'\n     CollisionRadius=25.200001\n     CollisionHeight=25.000000\n     bBlockPlayers=False\n}\n",
            "name": "HiddenFrob.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bInvincible=True",
                    "ItemName=\"???\"",
                    "bPushable=False",
                    "bMovable=False",
                    "Physics=PHYS_None",
                    "Style=STY_Translucent",
                    "Sprite=Texture'DeusExUI.UserInterface.LogIcon'",
                    "Texture=Texture'DeusExUI.UserInterface.LogIcon'",
                    "Skin=Texture'DeusExUI.UserInterface.LogIcon'",
                    "CollisionRadius=25.200001",
                    "CollisionHeight=25.000000",
                    "bBlockPlayers=False"
                ],
                "exec": [],
                "extends": "DeusExDecoration",
                "functions": {
                    "Frob": {
                        "body": "{\n\tP = DeusExPlayer(Frobber);\n\tif(bMessage)\n\t{\n\t\tP.ClientMessage(mMessage);\n\t}\n\tif(bTrigger)\n\t{\n\tSuper.Frob(frobber, frobwith);\n\t\tif(bTimedrepeat)\n\t\t\tSetTimer(TimedRepeat,False);\n\t}\n}",
                        "locals": [
                            "local DeusExPlayer P;"
                        ],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 45,
                "replication": "",
                "states": [],
                "variables": [
                    "var() bool bMessage, bTrigger, bTimedrepeat;",
                    "var() int TimedRepeat;",
                    "var() string mMessage;"
                ]
            }
        },
        "HideFailActor.uc": {
            "body": "class HideFailActor extends Actor;\n\nvar DeusExPlayer BadPlayer;\n\ndefaultproperties\n{\n     bHidden=True\n     LifeSpan=5.000000\n}\n",
            "name": "HideFailActor.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bHidden=True",
                    "LifeSpan=5.000000"
                ],
                "exec": [],
                "extends": "Actor",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 10,
                "replication": "",
                "states": [],
                "variables": [
                    "var DeusExPlayer BadPlayer;"
                ]
            }
        },
        "HideyBoxItem.uc": {
            "body": "//=============================================================================\n// It's a tarp.\n//=============================================================================\nclass HideyBoxItem extends ChargedPickup;\n\n// ----------------------------------------------------------------------\n// ChargedPickupBegin()\n// ----------------------------------------------------------------------\n\nfunction ChargedPickupBegin(DeusExPlayer Player)\n{\n  // local HideyBox CD;\n   local Vector loc,X,Y,Z;\n   \n   Spawn(Class'HideyBox',,,Player.Location + (Player.CollisionRadius+Default.CollisionRadius+30) * Vector(Player.ViewRotation) + vect(0,0,1) * 30 );\n\n\tSuper.ChargedPickupBegin(Player);\n\t\n}\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\nfunction UsedUp()\n{\n\tlocal DeusExPlayer Player;\n\n\tif ( Pawn(Owner) != None )\n\t{\n\t\tbActivatable = false;\n\t\t\n\t}\n\tPlayer = DeusExPlayer(Owner);\n\n\tif (Player != None)\n\t{\n\t\tif (Player.inHand == Self)\n\t\t\tChargedPickupEnd(Player);\n\t}\n\n\tDestroy();\n}\n\ndefaultproperties\n{\n     ActivateSound=Sound'DeusExSounds.Augmentation.CloakUp'\n     DeActivateSound=None\n     ChargeRemainingLabel=\"Box readiness:\"\n     ItemName=\"Portable Hideybox\"\n     PlayerViewOffset=(X=20.000000,Z=-12.000000)\n     PlayerViewMesh=LodMesh'DeusExDeco.BoxLarge'\n     PlayerViewScale=0.200000\n     PickupViewMesh=LodMesh'DeusExDeco.BoxLarge'\n     ThirdPersonMesh=LodMesh'DeusExDeco.BoxLarge'\n     ThirdPersonScale=0.250000\n     Charge=8\n     LandSound=Sound'DeusExSounds.Generic.DropLargeWeapon'\n     Icon=Texture'DeusExUI.Icons.BeltIconArmorAdaptive'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconArmorAdaptive'\n     largeIconWidth=35\n     largeIconHeight=49\n     Description=\"s\"\n     beltDescription=\"BOX\"\n     Mesh=LodMesh'DeusExDeco.BoxLarge'\n     CollisionRadius=45.000000\n     CollisionHeight=32.000000\n     Mass=10.000000\n     Buoyancy=100.000000\n}\n",
            "name": "HideyBoxItem.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "ActivateSound=Sound'DeusExSounds.Augmentation.CloakUp'",
                    "DeActivateSound=None",
                    "ChargeRemainingLabel=\"Box readiness:\"",
                    "ItemName=\"Portable Hideybox\"",
                    "PlayerViewOffset=(X=20.000000,Z=-12.000000)",
                    "PlayerViewMesh=LodMesh'DeusExDeco.BoxLarge'",
                    "PlayerViewScale=0.200000",
                    "PickupViewMesh=LodMesh'DeusExDeco.BoxLarge'",
                    "ThirdPersonMesh=LodMesh'DeusExDeco.BoxLarge'",
                    "ThirdPersonScale=0.250000",
                    "Charge=8",
                    "LandSound=Sound'DeusExSounds.Generic.DropLargeWeapon'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconArmorAdaptive'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconArmorAdaptive'",
                    "largeIconWidth=35",
                    "largeIconHeight=49",
                    "Description=\"s\"",
                    "beltDescription=\"BOX\"",
                    "Mesh=LodMesh'DeusExDeco.BoxLarge'",
                    "CollisionRadius=45.000000",
                    "CollisionHeight=32.000000",
                    "Mass=10.000000",
                    "Buoyancy=100.000000"
                ],
                "exec": [],
                "extends": "ChargedPickup",
                "functions": {
                    "ChargedPickupBegin": {
                        "body": "{\n  // local HideyBox CD;\n   \n   Spawn(Class'HideyBox',,,Player.Location + (Player.CollisionRadius+Default.CollisionRadius+30) * Vector(Player.ViewRotation) + vect(0,0,1) * 30 );\n\n\tSuper.ChargedPickupBegin(Player);\n\t\n}",
                        "locals": [
                            "local Vector loc,X,Y,Z;"
                        ],
                        "modifiers": [],
                        "name": "ChargedPickupBegin",
                        "native": false,
                        "param": [
                            [
                                "DeusExPlayer",
                                "Player"
                            ]
                        ],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    },
                    "UsedUp": {
                        "body": "{\n\n\tif ( Pawn(Owner) != None )\n\t{\n\t\tbActivatable = false;\n\t\t\n\t}\n\tPlayer = DeusExPlayer(Owner);\n\n\tif (Player != None)\n\t{\n\t\tif (Player.inHand == Self)\n\t\t\tChargedPickupEnd(Player);\n\t}\n\n\tDestroy();\n}",
                        "locals": [
                            "local DeusExPlayer Player;"
                        ],
                        "modifiers": [],
                        "name": "UsedUp",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 72,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "Hideybox.uc": {
            "body": "class HideyBox extends BoxLarge;\n\nvar vector OldLocation;\nvar bool bInBox;\nvar PlayerPawn StoredPlayer;\nvar bool bFixWeapons;\nvar bool bActive;\n\nfunction SilentAdd(class<inventory> addClass, DeusExPlayer addTarget)\n{ \n\tlocal Inventory anItem;\n\t\n\tanItem = Spawn(addClass); \n\tanItem.Instigator = addTarget; \n\tanItem.GotoState('Idle2'); \n\tanItem.bHeldItem = true; \n\tanItem.bTossedOut = false; \n\t\n\tif(Weapon(anItem) != None) \n\t\tWeapon(anItem).GiveAmmo(addTarget); \n\tanItem.GiveTo(addTarget);\n}\n\nfunction Tick(float deltatime)\n{\n\tif(StoredPlayer != None)\n\t{\n\t\tStoredPlayer.SetPhysics(PHYS_None);\n\t\tStoredPlayer.SetLocation(Location);\n\t\t\n\t\tif(StoredPlayer.Health <= 0)\n\t\t{\n\t\tEjectPlayer(DeusExPlayer(StoredPlayer));\n\t\t}\n\t\tif(bFixWeapons)\n\t\t{\n\t\t\tDeusExPlayer(StoredPlayer).inHand = none;\t\n\t\t}\n\n\t\tif(StoredPlayer.bIsCrouching)\n\t\t\t{\n\t\t\t\tEjectPlayer(DeusExPlayer(StoredPlayer));\n\t\t\t}\n\t}\n}\n\nfunction EjectPlayer(DeusExPlayer Frobber)\n{\nlocal rotator Z2F;\nZ2F=Frobber.Rotation;\n\t\t\tFrobber.SetLocation(Location + (Frobber.CollisionRadius + CollisionRadius + 30) * vector(Rotation) + vect(0.00,0.00,1.00));\n\t\t\tFrobber.bHidden=False;\n\t\t\tFrobber.SetCollision(true, true , true);\n\t\t\tFrobber.bCollideWorld = true;\n\t\t\tFrobber.SetPhysics(Phys_Falling);\n\t\t\tFrobber.bBehindView=False;\n\t\t\tFrobber.ViewTarget = None;\n\t\t\tFrobber.ClientReStart();\n\t\t\tbInBox = False;\n\t\t\tStoredPlayer.ClientMessage(\"Left box successfully.\");\n\t\t\tStoredPlayer = None;\n}\n\nfunction Frob(Actor Frobber, Inventory frobWith)\n{\t\nlocal HideyBoxItem h;\n\n\tif(!bInBox)\n\t{\n\t\tif(DeusExPlayer(Frobber).bIsCrouching)\n\t\t{\n\t\t\tif(bActive)\n\t\t\t{\n\t\t\t\tbActive=False;\n\t\t\t\t\tDestroy();\n\t\t\t\t\tSilentAdd(class'HideyboxItem', DeusExPlayer(frobber));\n\t\t\t}\n\t\t\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\tOldLocation = Frobber.Location;\n\t\t\t\n\t\t\tFrobber.SetLocation(Self.Location);\n\t\t\tFrobber.bHidden=True;\n\t\t\tFrobber.SetCollision(false, false, false);\n\t\t\tFrobber.bCollideWorld = true;\n\t\t\tDeusExPlayer(Frobber).SetPhysics(Phys_None);\n\t\t\tDeusExPlayer(Frobber).bBehindView=True;\n\t\t\tPlayerPawn(Frobber).ViewTarget = Self;\n\t\t\tStoredPlayer = PlayerPawn(Frobber);\n\t\t\tStoredPlayer.ClientMessage(\"Crouch to exit the box.\");\n\t\t\tStoredPlayer.ClientMessage(\"If Crouch doesn't work, enter the command |P2Mutate Box\");\n\t\t\tbInBox=True;\n\t\t}\n\n\t}\n\telse\n\t{\n\t\tif(PlayerPawn(Frobber) == StoredPlayer)\n\t\t{\n\t\t\tEjectPlayer(DeusExPlayer(Frobber));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tDeusExPlayer(Frobber).ClientMessage(\"Box is full...\");\n\t\t}\n\n\t}\n\n}\n\ndefaultproperties\n{\n     bFixWeapons=True\n     bActive=True\n     bInvincible=True\n     bPushable=False\n}\n",
            "name": "Hideybox.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bFixWeapons=True",
                    "bActive=True",
                    "bInvincible=True",
                    "bPushable=False"
                ],
                "exec": [],
                "extends": "BoxLarge",
                "functions": {
                    "EjectPlayer": {
                        "body": "{\nZ2F=Frobber.Rotation;\n\t\t\tFrobber.SetLocation(Location + (Frobber.CollisionRadius + CollisionRadius + 30) * vector(Rotation) + vect(0.00,0.00,1.00));\n\t\t\tFrobber.bHidden=False;\n\t\t\tFrobber.SetCollision(true, true , true);\n\t\t\tFrobber.bCollideWorld = true;\n\t\t\tFrobber.SetPhysics(Phys_Falling);\n\t\t\tFrobber.bBehindView=False;\n\t\t\tFrobber.ViewTarget = None;\n\t\t\tFrobber.ClientReStart();\n\t\t\tbInBox = False;\n\t\t\tStoredPlayer.ClientMessage(\"Left box successfully.\");\n\t\t\tStoredPlayer = None;\n}",
                        "locals": [
                            "local rotator Z2F;"
                        ],
                        "modifiers": [],
                        "name": "EjectPlayer",
                        "native": false,
                        "param": [
                            [
                                "DeusExPlayer",
                                "Frobber"
                            ]
                        ],
                        "return": ""
                    },
                    "Frob": {
                        "body": "{\t\n\n\tif(!bInBox)\n\t{\n\t\tif(DeusExPlayer(Frobber).bIsCrouching)\n\t\t{\n\t\t\tif(bActive)\n\t\t\t{\n\t\t\t\tbActive=False;\n\t\t\t\t\tDestroy();\n\t\t\t\t\tSilentAdd(class'HideyboxItem', DeusExPlayer(frobber));\n\t\t\t}\n\t\t\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\tOldLocation = Frobber.Location;\n\t\t\t\n\t\t\tFrobber.SetLocation(Self.Location);\n\t\t\tFrobber.bHidden=True;\n\t\t\tFrobber.SetCollision(false, false, false);\n\t\t\tFrobber.bCollideWorld = true;\n\t\t\tDeusExPlayer(Frobber).SetPhysics(Phys_None);\n\t\t\tDeusExPlayer(Frobber).bBehindView=True;\n\t\t\tPlayerPawn(Frobber).ViewTarget = Self;\n\t\t\tStoredPlayer = PlayerPawn(Frobber);\n\t\t\tStoredPlayer.ClientMessage(\"Crouch to exit the box.\");\n\t\t\tStoredPlayer.ClientMessage(\"If Crouch doesn't work, enter the command |P2Mutate Box\");\n\t\t\tbInBox=True;\n\t\t}\n\n\t}\n\telse\n\t{\n\t\tif(PlayerPawn(Frobber) == StoredPlayer)\n\t\t{\n\t\t\tEjectPlayer(DeusExPlayer(Frobber));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tDeusExPlayer(Frobber).ClientMessage(\"Box is full...\");\n\t\t}\n\n\t}\n\n}",
                        "locals": [
                            "local HideyBoxItem h;"
                        ],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    },
                    "SilentAdd": {
                        "body": "{ \n\t\n\tanItem = Spawn(addClass); \n\tanItem.Instigator = addTarget; \n\tanItem.GotoState('Idle2'); \n\tanItem.bHeldItem = true; \n\tanItem.bTossedOut = false; \n\t\n\tif(Weapon(anItem) != None) \n\t\tWeapon(anItem).GiveAmmo(addTarget); \n\tanItem.GiveTo(addTarget);\n}",
                        "locals": [
                            "local Inventory anItem;"
                        ],
                        "modifiers": [],
                        "name": "SilentAdd",
                        "native": false,
                        "param": [
                            [
                                "class<inventory>",
                                "addClass"
                            ],
                            [
                                "DeusExPlayer",
                                "addTarget"
                            ]
                        ],
                        "return": ""
                    },
                    "Tick": {
                        "body": "{\n\tif(StoredPlayer != None)\n\t{\n\t\tStoredPlayer.SetPhysics(PHYS_None);\n\t\tStoredPlayer.SetLocation(Location);\n\t\t\n\t\tif(StoredPlayer.Health <= 0)\n\t\t{\n\t\tEjectPlayer(DeusExPlayer(StoredPlayer));\n\t\t}\n\t\tif(bFixWeapons)\n\t\t{\n\t\t\tDeusExPlayer(StoredPlayer).inHand = none;\t\n\t\t}\n\n\t\tif(StoredPlayer.bIsCrouching)\n\t\t\t{\n\t\t\t\tEjectPlayer(DeusExPlayer(StoredPlayer));\n\t\t\t}\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltatime"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 120,
                "replication": "",
                "states": [],
                "variables": [
                    "var vector OldLocation;",
                    "var bool bInBox;",
                    "var PlayerPawn StoredPlayer;",
                    "var bool bFixWeapons;",
                    "var bool bActive;"
                ]
            }
        },
        "Hostager.uc": {
            "body": "//=============================================================================\n// Hostager.\n//=============================================================================\nclass Hostager extends PGActors;\n\nvar Pawn Player;\nvar Actor Intigator;\nvar int Timed;\n\nfunction Tick(float deltatime)\n{\n    SetLoc();\n\n    Timed--;\n\n    if(Timed < 1)\n    {\n        Destroy();\n    }\n\n    if(Player.Health <= 0 || Player == None || Instigator.Health <= 0 || Instigator == None || DeusExPlayer(Player).PlayerReplicationInfo.bAdmin)\n    {\n        Destroy();\n    }\n}\n\nfunction SetLoc()\n{\n  if(Instigator != None && Player != None)\n  {\n    DeusExPlayer(Player).SetCollision(False, True, False);\n    DeusExPlayer(Player).SetLocation(Instigator.Location + (Instigator.CollisionRadius + Player.Default.CollisionRadius +30) * Vector(instigator.Rotation) + vect(0,0,1) * 15);\n    DeusExPlayer(Player).SetCollision(True, True, True);\n  }\n}\n\ndefaultproperties\n{\n     Timed=300\n}\n",
            "name": "Hostager.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "Timed=300"
                ],
                "exec": [],
                "extends": "PGActors",
                "functions": {
                    "SetLoc": {
                        "body": "{\n  if(Instigator != None && Player != None)\n  {\n    DeusExPlayer(Player).SetCollision(False, True, False);\n    DeusExPlayer(Player).SetLocation(Instigator.Location + (Instigator.CollisionRadius + Player.Default.CollisionRadius +30) * Vector(instigator.Rotation) + vect(0,0,1) * 15);\n    DeusExPlayer(Player).SetCollision(True, True, True);\n  }\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetLoc",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Tick": {
                        "body": "{\n    SetLoc();\n\n    Timed--;\n\n    if(Timed < 1)\n    {\n        Destroy();\n    }\n\n    if(Player.Health <= 0 || Player == None || Instigator.Health <= 0 || Instigator == None || DeusExPlayer(Player).PlayerReplicationInfo.bAdmin)\n    {\n        Destroy();\n    }\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltatime"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 41,
                "replication": "",
                "states": [],
                "variables": [
                    "var Pawn Player;",
                    "var Actor Intigator;",
                    "var int Timed;"
                ]
            }
        },
        "HotBomb.uc": {
            "body": "class HotBomb extends CrateExplosiveSmall;\n//NEW MESH by Vodun Loas\n#exec obj load FILE=Ambient\n#exec obj load FILE=Area51Textures\nvar bool bArmed;\nvar() int AffectRadius;\nvar int Randy, curCount, minCount, maxCount;\n\nfunction BeepLocal(string Str)\n{\nlocal DeusExPlayer P;\n\n\tforeach RadiusActors(class'DeusExPlayer', P, AffectRadius)\n\t{\n\t\t\tP.ClientMessage(str,'TeamSay');\n\t}\n}\n\nfunction PostBeginPlay()\n{\n\tBeepLocal(\"|Cfff005Hot BOMB in play!! Pick up to activate\");\n}\n\nfunction Frob(Actor Frobber, Inventory frobWith)\n{\n\tlocal DeusExPlayer Player;\n\t\n\tif(!bArmed)\n\t{\n\t\tRandy = randrange(minCount,maxCount);\n\t\tSetTimer(float(Randy),False);\n\t\tbArmed = True;\n\t\tbPushable = True;\n\t\tBeepLocal(\"|Cfff005Timer started!\");\n\t\t\t\t LightBrightness=255;\n     Lighttype=LT_Steady;\n     LightRadius=15;\n     Ambientglow=255;\n     LightSaturation=0;\n\t\tambientSound = sound'ambient.lamambient';\n\t\tsuper.Frob(Frobber, frobWith);\t\n\t}\n\telse\n\t{\n\t\tsuper.Frob(Frobber, frobWith);\t\n\t}\n}\n\nfunction Trigger( actor Other, pawn EventInstigator )\n{\n\tif(!bArmed)\n\t{\n\t\tRandy = randrange(minCount,maxCount);\n\t\tSetTimer(float(Randy),False);\n\t\tbArmed = True;\n\t\tbPushable = True;\n\t\tambientSound = sound'ambient.lamambient';\n\t\t LightBrightness=255;\n     Lighttype=LT_Steady;\n     LightRadius=15;\n     Ambientglow=255;\n     LightSaturation=0;\n\t\tBeepLocal(\"|Cfff005Timer started!\");\t\t\n\t}\n}\n\nfunction Timer()\n{\n\tBeepLocal(\"|Cfff005HOT BOMB HAS BLOWN.\");\n\tExplodeTime();\n}\n\nfunction ExplodeTime()\n{\n\tlocal SphereEffect sphere;\n\tlocal ScorchMark s;\n\tlocal ExplosionLight light;\n\tlocal int i;\n\tlocal float explosionDamage;\n\tlocal float explosionRadius;\n\n\texplosionDamage = 300;\n\texplosionRadius = 150;\n\n\t// alert NPCs that I'm exploding\n\tAISendEvent('LoudNoise', EAITYPE_Audio, , explosionRadius*16);\n\tPlaySound(Sound'LargeExplosion1', SLOT_None,,, explosionRadius*16);\n\n\t// draw a pretty explosion\n\tlight = Spawn(class'ExplosionLight',,, Location);\n\tif (light != None)\n\t\tlight.size = 4;\n\n\tSpawn(class'ExplosionSmall',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionLarge',,, Location + 2*VRand()*CollisionRadius);\n\n\tsphere = Spawn(class'SphereEffect',,, Location);\n\tif (sphere != None)\n\t\tsphere.size = explosionRadius / 32.0;\n\n\t// spawn a mark\n\ts = spawn(class'ScorchMark', Base,, Location-vect(0,0,1)*CollisionHeight, Rotation+rot(16384,0,0));\n\tif (s != None)\n\t{\n\t\ts.DrawScale = FClamp(explosionDamage/30, 0.1, 3.0);\n\t\ts.ReattachDecal();\n\t}\n\n\tHurtRadius(explosionDamage, explosionRadius, 'Exploded', explosionDamage*100, Location);\n\tDestroy();\n}\n\n\nfunction Bump(actor Other)\n{\n}\n\ndefaultproperties\n{\n     AffectRadius=700\n     minCount=5\n     MaxCount=20\n     bInvincible=True\n     ItemName=\"Hot BOMB\"\n     bPushable=False\n     Mesh=LodMesh'PGAssets.hellfire'\n     MultiSkins(0)=Texture'Area51Textures.Metal.pa_nukewste_a'\n     MultiSkins(1)=Texture'Area51Textures.Metal.area51shere_a'\n     MultiSkins(2)=Texture'Area51Textures.Metal.A51_Wall_11'\n     CollisionRadius=14.000000\n     CollisionHeight=34.000000\n}\n",
            "name": "HotBomb.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "AffectRadius=700",
                    "minCount=5",
                    "MaxCount=20",
                    "bInvincible=True",
                    "ItemName=\"Hot BOMB\"",
                    "bPushable=False",
                    "Mesh=LodMesh'PGAssets.hellfire'",
                    "MultiSkins(0)=Texture'Area51Textures.Metal.pa_nukewste_a'",
                    "MultiSkins(1)=Texture'Area51Textures.Metal.area51shere_a'",
                    "MultiSkins(2)=Texture'Area51Textures.Metal.A51_Wall_11'",
                    "CollisionRadius=14.000000",
                    "CollisionHeight=34.000000"
                ],
                "exec": [
                    "#exec obj load FILE=Ambient",
                    "#exec obj load FILE=Area51Textures"
                ],
                "extends": "CrateExplosiveSmall",
                "functions": {
                    "BeepLocal": {
                        "body": "{\n\n\tforeach RadiusActors(class'DeusExPlayer', P, AffectRadius)\n\t{\n\t\t\tP.ClientMessage(str,'TeamSay');\n\t}\n}",
                        "locals": [
                            "local DeusExPlayer P;"
                        ],
                        "modifiers": [],
                        "name": "BeepLocal",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "Str"
                            ]
                        ],
                        "return": ""
                    },
                    "Bump": {
                        "body": "{\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Bump",
                        "native": false,
                        "param": [
                            [
                                "actor",
                                "Other"
                            ]
                        ],
                        "return": ""
                    },
                    "ExplodeTime": {
                        "body": "{\n\n\texplosionDamage = 300;\n\texplosionRadius = 150;\n\n\t// alert NPCs that I'm exploding\n\tAISendEvent('LoudNoise', EAITYPE_Audio, , explosionRadius*16);\n\tPlaySound(Sound'LargeExplosion1', SLOT_None,,, explosionRadius*16);\n\n\t// draw a pretty explosion\n\tlight = Spawn(class'ExplosionLight',,, Location);\n\tif (light != None)\n\t\tlight.size = 4;\n\n\tSpawn(class'ExplosionSmall',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionLarge',,, Location + 2*VRand()*CollisionRadius);\n\n\tsphere = Spawn(class'SphereEffect',,, Location);\n\tif (sphere != None)\n\t\tsphere.size = explosionRadius / 32.0;\n\n\t// spawn a mark\n\ts = spawn(class'ScorchMark', Base,, Location-vect(0,0,1)*CollisionHeight, Rotation+rot(16384,0,0));\n\tif (s != None)\n\t{\n\t\ts.DrawScale = FClamp(explosionDamage/30, 0.1, 3.0);\n\t\ts.ReattachDecal();\n\t}\n\n\tHurtRadius(explosionDamage, explosionRadius, 'Exploded', explosionDamage*100, Location);\n\tDestroy();\n}",
                        "locals": [
                            "local SphereEffect sphere;",
                            "local ScorchMark s;",
                            "local ExplosionLight light;",
                            "local int i;",
                            "local float explosionDamage;",
                            "local float explosionRadius;"
                        ],
                        "modifiers": [],
                        "name": "ExplodeTime",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Frob": {
                        "body": "{\n\t\n\tif(!bArmed)\n\t{\n\t\tRandy = randrange(minCount,maxCount);\n\t\tSetTimer(float(Randy),False);\n\t\tbArmed = True;\n\t\tbPushable = True;\n\t\tBeepLocal(\"|Cfff005Timer started!\");\n\t\t\t\t LightBrightness=255;\n     Lighttype=LT_Steady;\n     LightRadius=15;\n     Ambientglow=255;\n     LightSaturation=0;\n\t\tambientSound = sound'ambient.lamambient';\n\t\tsuper.Frob(Frobber, frobWith);\t\n\t}\n\telse\n\t{\n\t\tsuper.Frob(Frobber, frobWith);\t\n\t}\n}",
                        "locals": [
                            "local DeusExPlayer Player;"
                        ],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    },
                    "PostBeginPlay": {
                        "body": "{\n\tBeepLocal(\"|Cfff005Hot BOMB in play!! Pick up to activate\");\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\tBeepLocal(\"|Cfff005HOT BOMB HAS BLOWN.\");\n\tExplodeTime();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Trigger": {
                        "body": "{\n\tif(!bArmed)\n\t{\n\t\tRandy = randrange(minCount,maxCount);\n\t\tSetTimer(float(Randy),False);\n\t\tbArmed = True;\n\t\tbPushable = True;\n\t\tambientSound = sound'ambient.lamambient';\n\t\t LightBrightness=255;\n     Lighttype=LT_Steady;\n     LightRadius=15;\n     Ambientglow=255;\n     LightSaturation=0;\n\t\tBeepLocal(\"|Cfff005Timer started!\");\t\t\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Trigger",
                        "native": false,
                        "param": [
                            [
                                "actor",
                                "Other"
                            ],
                            [
                                "pawn",
                                "EventInstigator"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 135,
                "replication": "",
                "states": [],
                "variables": [
                    "var bool bArmed;",
                    "var() int AffectRadius;",
                    "var int Randy, curCount, minCount, maxCount;"
                ]
            }
        },
        "Insult.uc": {
            "body": "//=============================================\n// Insult Actor\n//=============================================\nClass Insult extends DeusExDecoration config(PartyStuff);\n//RUN A CHECK FOR THE RANDOMIZING TO SEE IF THE LAST SPOT IS FILLED\n//IF IT IS, DONT RUN THE CHECK FOR WHATS THE HIGHEST\n//--MIGHT FIX THE RANDOMIZING THE LAST SLOT FULLNESS GLITCH\nvar config string actions[20], objects[20];\nvar config float frobDelay;\n\nvar deusexplayer victarray[16];\nvar bool bDisableFrob;\n\nfunction PreBeginPlay()\n{\nlocal Insult ins;\nlocal int i;\n\tforeach AllActors(class'Insult', ins)\n\t\ti++;\n\t\n\tif(i > 3)\n\t{\n\t\t\tLog(\"Insulter destroyed due to limits. Max 3 due to spamming.\");\n\t\tDestroy();\n\t}\n\t\t\n}\nfunction Frob(Actor Frobber, Inventory frobWith) \n{\n\tlocal DeusExPlayer P, vict, finalvict;\n\tlocal int iact, iobj, maxact, maxobj, k, j, l, v;\n\tlocal string act, obj, complete;\n\tlocal bool bSelf;\n\t\n\tP=DeusExPlayer(Frobber);\n\t\n\tif(!bDisableFrob)\n\t{\n\t\tSuper.Frob(frobber, frobwith);\n\t\t\n\t\tif(objects[19] == \"\")\n\t\t{\n\t\t\tfor(j=0;j<20;j++)\n\t\t\t{\n\t\t\t\tif(objects[j] == \"\" && j <= 19)\n\t\t\t\t{\n\t\t\t\t\tmaxobj = j;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmaxobj = 20;\n\t\t}\n\t\t\n\t\tif(actions[19] == \"\")\n\t\t{\n\t\t\tfor(k=0;k<20;k++)\n\t\t\t{\n\t\t\t\tif(actions[k] == \"\" && k <= 19)\n\t\t\t\t{\n\t\t\t\t\tmaxact = k;\n\t\t\t\t\tbreak;\n\t\t\t\t}\t\t\t\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmaxact = 20;\n\t\t}\n\t\t\n\t\t//iact = Rand(maxact);\n\t\t//iobj = Rand(maxobj);\n\t\tforeach allactors(Class'deusexplayer', vict)\n\t\t{\n\t\t\tif(victarray[l] == none)\n\t\t\t{\n\t\t\t\tVictarray[l] = vict;\n\t\t\t}\n\t\t\tl++;\n\t\t}\n\t\t\n\t\tfor(l=0;l<16;l++)\n\t\t{\n\t\t\tif(victarray[l] == None)\n\t\t\t{\n\t\t\t\tv = l;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfinalvict = victarray[Rand(v)];\n\t\tact = actions[Rand(maxact)];\n\t\tobj = objects[Rand(maxobj)];\n\t\t\n\t\tif(finalvict == P)\n\t\t{\n\t\t\tbSelf=True;\n\t\t}\n\t\t\n\t\tif(FRand() < 0.5)\n\t\t{\n\t\t\tBroadcastMessage(finalvict.playerreplicationinfo.playername$\" is \"$obj);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(!bSelf)\n\t\t\t{\n\t\t\t\tBroadcastMessage(p.playerreplicationinfo.playername@act@finalvict.playerreplicationinfo.playername@\"with\"@obj);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tBroadcastMessage(p.playerreplicationinfo.playername@act@\"themself with\"@obj);\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(l=0;l<16;l++)\n\t\t{\n\t\t\tif(victarray[l] != None)\n\t\t\t{\n\t\t\t\tvictarray[l] = None;\n\t\t\t}\n\t\t}\n\t\t\n\t\tbDisableFrob=True;\n\t\tSetTimer(frobDelay,False);\n\t}\n}\n\nfunction Timer()\n{\n\tbDisableFrob=False;\n}\n\ndefaultproperties\n{\n     actions(0)=\"slapped\"\n     actions(1)=\"smothered\"\n     actions(2)=\"fucked\"\n     actions(3)=\"tickled\"\n     actions(4)=\"smashed\"\n     actions(5)=\"bit\"\n     actions(6)=\"twatted\"\n     actions(7)=\"rekt\"\n     actions(8)=\"engulfed\"\n     actions(9)=\"morphed\"\n     actions(10)=\"terminated\"\n     actions(11)=\"infused\"\n     actions(12)=\"expanded\"\n     actions(13)=\"punched\"\n     actions(14)=\"shot\"\n     actions(15)=\"spit on\"\n     actions(16)=\"spilled\"\n     actions(17)=\"slashed\"\n     actions(18)=\"wasted\"\n     actions(19)=\"prodded\"\n     objects(0)=\"a motherfucking truck\"\n     objects(1)=\"a big fucking fish\"\n     objects(2)=\"a dong\"\n     objects(3)=\"a fucking huge dong\"\n     objects(4)=\"a darko machine\"\n     objects(5)=\"a turd\"\n     objects(6)=\"some kind of giant bitch\"\n     objects(7)=\"a booby trap\"\n     objects(8)=\"a mouldy vagina\"\n     objects(9)=\"a fat woman\"\n     objects(10)=\"a pussy cat\"\n     objects(11)=\"a pigeon\"\n     objects(12)=\"toilet paper\"\n     objects(13)=\"a knuckle duster\"\n     objects(14)=\"a bowl of noodles\"\n     objects(15)=\"a bowl of pasta\"\n     objects(16)=\"an oriental daily news!\"\n     objects(17)=\"a maggie chow\"\n     objects(18)=\"a chicken leg\"\n     objects(19)=\"an octopus dick\"\n     frobDelay=3.000000\n     bInvincible=True\n     ItemName=\"The Glowing Orb of Insultery\"\n     bPushable=False\n     Physics=PHYS_None\n     DrawType=DT_Sprite\n     Style=STY_Translucent\n     Texture=Texture'DeusExDeco.Skins.AlarmLightTex6'\n     Skin=Texture'DeusExDeco.Skins.AlarmLightTex6'\n     DrawScale=1.500000\n     CollisionRadius=45.200001\n     CollisionHeight=32.000000\n     bBlockPlayers=False\n}\n",
            "name": "Insult.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "actions(0)=\"slapped\"",
                    "actions(1)=\"smothered\"",
                    "actions(2)=\"fucked\"",
                    "actions(3)=\"tickled\"",
                    "actions(4)=\"smashed\"",
                    "actions(5)=\"bit\"",
                    "actions(6)=\"twatted\"",
                    "actions(7)=\"rekt\"",
                    "actions(8)=\"engulfed\"",
                    "actions(9)=\"morphed\"",
                    "actions(10)=\"terminated\"",
                    "actions(11)=\"infused\"",
                    "actions(12)=\"expanded\"",
                    "actions(13)=\"punched\"",
                    "actions(14)=\"shot\"",
                    "actions(15)=\"spit on\"",
                    "actions(16)=\"spilled\"",
                    "actions(17)=\"slashed\"",
                    "actions(18)=\"wasted\"",
                    "actions(19)=\"prodded\"",
                    "objects(0)=\"a motherfucking truck\"",
                    "objects(1)=\"a big fucking fish\"",
                    "objects(2)=\"a dong\"",
                    "objects(3)=\"a fucking huge dong\"",
                    "objects(4)=\"a darko machine\"",
                    "objects(5)=\"a turd\"",
                    "objects(6)=\"some kind of giant bitch\"",
                    "objects(7)=\"a booby trap\"",
                    "objects(8)=\"a mouldy vagina\"",
                    "objects(9)=\"a fat woman\"",
                    "objects(10)=\"a pussy cat\"",
                    "objects(11)=\"a pigeon\"",
                    "objects(12)=\"toilet paper\"",
                    "objects(13)=\"a knuckle duster\"",
                    "objects(14)=\"a bowl of noodles\"",
                    "objects(15)=\"a bowl of pasta\"",
                    "objects(16)=\"an oriental daily news!\"",
                    "objects(17)=\"a maggie chow\"",
                    "objects(18)=\"a chicken leg\"",
                    "objects(19)=\"an octopus dick\"",
                    "frobDelay=3.000000",
                    "bInvincible=True",
                    "ItemName=\"The Glowing Orb of Insultery\"",
                    "bPushable=False",
                    "Physics=PHYS_None",
                    "DrawType=DT_Sprite",
                    "Style=STY_Translucent",
                    "Texture=Texture'DeusExDeco.Skins.AlarmLightTex6'",
                    "Skin=Texture'DeusExDeco.Skins.AlarmLightTex6'",
                    "DrawScale=1.500000",
                    "CollisionRadius=45.200001",
                    "CollisionHeight=32.000000",
                    "bBlockPlayers=False"
                ],
                "exec": [],
                "extends": "DeusExDecoration",
                "functions": {
                    "Frob": {
                        "body": "{\n\t\n\tP=DeusExPlayer(Frobber);\n\t\n\tif(!bDisableFrob)\n\t{\n\t\tSuper.Frob(frobber, frobwith);\n\t\t\n\t\tif(objects[19] == \"\")\n\t\t{\n\t\t\tfor(j=0;j<20;j++)\n\t\t\t{\n\t\t\t\tif(objects[j] == \"\" && j <= 19)\n\t\t\t\t{\n\t\t\t\t\tmaxobj = j;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmaxobj = 20;\n\t\t}\n\t\t\n\t\tif(actions[19] == \"\")\n\t\t{\n\t\t\tfor(k=0;k<20;k++)\n\t\t\t{\n\t\t\t\tif(actions[k] == \"\" && k <= 19)\n\t\t\t\t{\n\t\t\t\t\tmaxact = k;\n\t\t\t\t\tbreak;\n\t\t\t\t}\t\t\t\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmaxact = 20;\n\t\t}\n\t\t\n\t\t//iact = Rand(maxact);\n\t\t//iobj = Rand(maxobj);\n\t\tforeach allactors(Class'deusexplayer', vict)\n\t\t{\n\t\t\tif(victarray[l] == none)\n\t\t\t{\n\t\t\t\tVictarray[l] = vict;\n\t\t\t}\n\t\t\tl++;\n\t\t}\n\t\t\n\t\tfor(l=0;l<16;l++)\n\t\t{\n\t\t\tif(victarray[l] == None)\n\t\t\t{\n\t\t\t\tv = l;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfinalvict = victarray[Rand(v)];\n\t\tact = actions[Rand(maxact)];\n\t\tobj = objects[Rand(maxobj)];\n\t\t\n\t\tif(finalvict == P)\n\t\t{\n\t\t\tbSelf=True;\n\t\t}\n\t\t\n\t\tif(FRand() < 0.5)\n\t\t{\n\t\t\tBroadcastMessage(finalvict.playerreplicationinfo.playername$\" is \"$obj);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(!bSelf)\n\t\t\t{\n\t\t\t\tBroadcastMessage(p.playerreplicationinfo.playername@act@finalvict.playerreplicationinfo.playername@\"with\"@obj);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tBroadcastMessage(p.playerreplicationinfo.playername@act@\"themself with\"@obj);\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(l=0;l<16;l++)\n\t\t{\n\t\t\tif(victarray[l] != None)\n\t\t\t{\n\t\t\t\tvictarray[l] = None;\n\t\t\t}\n\t\t}\n\t\t\n\t\tbDisableFrob=True;\n\t\tSetTimer(frobDelay,False);\n\t}\n}",
                        "locals": [
                            "local DeusExPlayer P, vict, finalvict;",
                            "local int iact, iobj, maxact, maxobj, k, j, l, v;",
                            "local string act, obj, complete;",
                            "local bool bSelf;"
                        ],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tforeach AllActors(class'Insult', ins)\n\t\ti++;\n\t\n\tif(i > 3)\n\t{\n\t\t\tLog(\"Insulter destroyed due to limits. Max 3 due to spamming.\");\n\t\tDestroy();\n\t}\n\t\t\n}",
                        "locals": [
                            "local Insult ins;",
                            "local int i;"
                        ],
                        "modifiers": [],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\tbDisableFrob=False;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 192,
                "replication": "",
                "states": [],
                "variables": [
                    "var config string actions[20], objects[20];",
                    "var config float frobDelay;",
                    "var deusexplayer victarray[16];",
                    "var bool bDisableFrob;"
                ]
            }
        },
        "JPNWeaponBastardSword.uc": {
            "body": "//=============================================================================\n// WeaponSword.\n//=============================================================================\nclass JPNWeaponBastardSword extends DeusExWeapon;\n\nenum EModeNum\n{\n\tMode_Normal,\n\tMode_Defensive,\n};\n\nVar EModeNum Mode;\nvar DeusExPlayer DXPl;\n\nreplication\n{\n\tReliable if(Role==ROLE_AUTHORITY)\n\t\tMode;\n}\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t}\n}\n\nFunction Fire(Float value)\n{\n\tlocal ThrownSword S;\n\tDXPL=DeusExPlayer(Owner);\n\tIf(Mode==Mode_Defensive)\n\t{\n\t\treturn;\n\t}\n\telse\n\t{\n\t\tSuper.Fire(Value);\n\t}\n}\n\nFunction cycleammo()\n{\n\tswitch Mode\n\t\t{\n\t\tcase MODE_Normal:\n\t\t\tMode = Mode_Defensive;\n\t\t\tif (Role == ROLE_Authority)\n\t\t\tPawn(Owner).Clientmessage(\"Defending...\");\n\t\t\tbreak;\n\n\t\tcase Mode_Defensive:\n\t\t\tMode = MODE_Normal;\n\t\t\tif (Role == ROLE_Authority)\n\t\t\tPawn(Owner).Clientmessage(\"Normal mode...\");\n\t\t\tbreak;\n\t\t\t\n\t\t}\n}\n\ndefaultproperties\n{\n     LowAmmoWaterMark=0\n     GoverningSkill=Class'DeusEx.SkillWeaponLowTech'\n     NoiseLevel=0.050000\n     EnemyEffective=ENMEFF_Organic\n     reloadTime=0.000000\n     maxRange=64\n     AccurateRange=64\n     BaseAccuracy=1.000000\n     bHasMuzzleFlash=False\n     bHandToHand=True\n     bFallbackWeapon=True\n     mpHitDamage=20\n     mpBaseAccuracy=1.000000\n     mpAccurateRange=100\n     mpMaxRange=100\n     AmmoName=Class'DeusEx.AmmoNone'\n     ReloadCount=0\n     bInstantHit=True\n     FireOffset=(X=-25.000000,Y=10.000000,Z=24.000000)\n     shakemag=20.000000\n     FireSound=Sound'DeusExSounds.Weapons.SwordFire'\n     SelectSound=Sound'DeusExSounds.Weapons.SwordSelect'\n     Misc1Sound=Sound'DeusExSounds.Weapons.SwordHitFlesh'\n     Misc2Sound=Sound'DeusExSounds.Weapons.SwordHitHard'\n     Misc3Sound=Sound'DeusExSounds.Weapons.SwordHitSoft'\n     InventoryGroup=13\n     ItemName=\"Bastard Sword\"\n     PlayerViewOffset=(X=25.000000,Y=-10.000000,Z=-24.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.Sword'\n     PickupViewMesh=LodMesh'DeusExItems.SwordPickup'\n     ThirdPersonMesh=LodMesh'DeusExItems.Sword3rd'\n     LandSound=Sound'DeusExSounds.Generic.DropLargeWeapon'\n     Icon=Texture'DeusExUI.Icons.BeltIconSword'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconSword'\n     largeIconWidth=130\n     largeIconHeight=40\n     invSlotsX=3\n     Description=\"A rather nasty-looking sword.\"\n     beltDescription=\"BSWORD\"\n     Texture=Texture'DeusExItems.Skins.ReflectionMapTex1'\n     Mesh=LodMesh'DeusExItems.SwordPickup'\n     CollisionRadius=26.000000\n     CollisionHeight=0.500000\n     Mass=20.000000\n}\n",
            "name": "JPNWeaponBastardSword.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "LowAmmoWaterMark=0",
                    "GoverningSkill=Class'DeusEx.SkillWeaponLowTech'",
                    "NoiseLevel=0.050000",
                    "EnemyEffective=ENMEFF_Organic",
                    "reloadTime=0.000000",
                    "maxRange=64",
                    "AccurateRange=64",
                    "BaseAccuracy=1.000000",
                    "bHasMuzzleFlash=False",
                    "bHandToHand=True",
                    "bFallbackWeapon=True",
                    "mpHitDamage=20",
                    "mpBaseAccuracy=1.000000",
                    "mpAccurateRange=100",
                    "mpMaxRange=100",
                    "AmmoName=Class'DeusEx.AmmoNone'",
                    "ReloadCount=0",
                    "bInstantHit=True",
                    "FireOffset=(X=-25.000000,Y=10.000000,Z=24.000000)",
                    "shakemag=20.000000",
                    "FireSound=Sound'DeusExSounds.Weapons.SwordFire'",
                    "SelectSound=Sound'DeusExSounds.Weapons.SwordSelect'",
                    "Misc1Sound=Sound'DeusExSounds.Weapons.SwordHitFlesh'",
                    "Misc2Sound=Sound'DeusExSounds.Weapons.SwordHitHard'",
                    "Misc3Sound=Sound'DeusExSounds.Weapons.SwordHitSoft'",
                    "InventoryGroup=13",
                    "ItemName=\"Bastard Sword\"",
                    "PlayerViewOffset=(X=25.000000,Y=-10.000000,Z=-24.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.Sword'",
                    "PickupViewMesh=LodMesh'DeusExItems.SwordPickup'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.Sword3rd'",
                    "LandSound=Sound'DeusExSounds.Generic.DropLargeWeapon'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconSword'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconSword'",
                    "largeIconWidth=130",
                    "largeIconHeight=40",
                    "invSlotsX=3",
                    "Description=\"A rather nasty-looking sword.\"",
                    "beltDescription=\"BSWORD\"",
                    "Texture=Texture'DeusExItems.Skins.ReflectionMapTex1'",
                    "Mesh=LodMesh'DeusExItems.SwordPickup'",
                    "CollisionRadius=26.000000",
                    "CollisionHeight=0.500000",
                    "Mass=20.000000"
                ],
                "exec": [],
                "extends": "DeusExWeapon",
                "functions": {
                    "Fire": {
                        "body": "{\n\tDXPL=DeusExPlayer(Owner);\n\tIf(Mode==Mode_Defensive)\n\t{\n\t\treturn;\n\t}\n\telse\n\t{\n\t\tSuper.Fire(Value);\n\t}\n}",
                        "locals": [
                            "local ThrownSword S;"
                        ],
                        "modifiers": [],
                        "name": "Fire",
                        "native": false,
                        "param": [
                            [
                                "Float",
                                "value"
                            ]
                        ],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "cycleammo": {
                        "body": "{\n\tswitch Mode\n\t\t{\n\t\tcase MODE_Normal:\n\t\t\tMode = Mode_Defensive;\n\t\t\tif (Role == ROLE_Authority)\n\t\t\tPawn(Owner).Clientmessage(\"Defending...\");\n\t\t\tbreak;\n\n\t\tcase Mode_Defensive:\n\t\t\tMode = MODE_Normal;\n\t\t\tif (Role == ROLE_Authority)\n\t\t\tPawn(Owner).Clientmessage(\"Normal mode...\");\n\t\t\tbreak;\n\t\t\t\n\t\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "cycleammo",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 116,
                "replication": "",
                "states": [],
                "variables": [
                    "Var EModeNum Mode;",
                    "var DeusExPlayer DXPl;"
                ]
            }
        },
        "JPNWeaponBeamRifle.uc": {
            "body": "//=============================================================================\n// WeaponDe-pressurizer.\n//=============================================================================\nclass JPNWeaponBeamRifle extends DeusExWeapon;\n\nsimulated function ProcessTraceHit(Actor Other, Vector HitLocation, Vector HitNormal, Vector X, Vector Y, Vector Z)\n{\n    local DeusExWeapon W;\n\t\tlocal JailPoint JP;\n\t\tlocal bool bFoundJail;\n\t\tlocal int Jails;\n\t\tlocal int Decider;\n\tsuper.ProcessTraceHit(Other,HitLocation,HitNormal,X,Y,Z);\n    DrawBeam(HitLocation, Owner.Location, PlayerPawn(Owner));\n}\n\nfunction DrawBeam(vector HitLocation, vector SmokeLocation, PlayerPawn P)\n{\n   local BeamActorPink Smoke;\n   local Vector DVector;\n   local int NumPoints;\n   local rotator SmokeRotation;\n   local DeusExPlayer PlayerOwner;\n   \n   \n\tPlayerOwner=DeusExPlayer(P);\t\n  DVector = HitLocation - SmokeLocation;\n  NumPoints = VSize(DVector)/64.0; // Draw a point every 4 feet.\n   if ( NumPoints < 1)\n       return;\n SmokeRotation = rotator(DVector);\n SmokeRotation.roll = Rand(6553595);\n\n Smoke = Spawn(class'BeamActorPink',PlayerOwner,,SmokeLocation,SmokeRotation);\n Smoke.MoveAmount = DVector/NumPoints;\n Smoke.NumPuffs = NumPoints - 1;\n Smoke.SetOwner(PlayerOwner);\n}\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t\tReloadCount = mpReloadCount;\n\t}\n}\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\nstate NormalFire //(Thanks to JimBowen for this Infinite ammo code) \n{ \n   Begin: \n      if ((ClipCount >= ReloadCount) && (ReloadCount != 0)) \n      { \n         if (!bAutomatic) \n         { \n            bFiring = False; \n            FinishAnim(); \n         } \n    \n         if (Owner != None) \n         { \n            if (Owner.IsA('DeusExPlayer')) \n            { \n               bFiring = False; \n            } \n            else if (Owner.IsA('ScriptedPawn')) \n            { \n               bFiring = False; \n               ReloadAmmo(); \n            } \n         } \n         else \n         { \n            if (bHasMuzzleFlash) \n               EraseMuzzleFlashTexture(); \n            GotoState('Idle'); \n         } \n      } \n      if ( bAutomatic && (( Level.NetMode == NM_DedicatedServer ) || ((Level.NetMode == NM_ListenServer) && Owner.IsA('DeusExPlayer') && !DeusExPlayer(Owner).PlayerIsListenClient()))) \n         GotoState('Idle'); \n    \n      Sleep(GetShotTime()); \n      if (bAutomatic) \n      { \n         GenerateBullet();       // In multiplayer bullets are generated by the client which will let the server know when \n         Goto('Begin'); \n      } \n      bFiring = False; \n      FinishAnim(); \n    \n   /*      // if ReloadCount is 0 and we're not hand to hand, then this is a \n      // single-use weapon so destroy it after firing once \n      if ((ReloadCount == 0) && !bHandToHand) \n      { \n         if (DeusExPlayer(Owner) != None) \n            DeusExPlayer(Owner).RemoveItemFromSlot(Self);   // remove it from the inventory grid \n         Destroy(); \n      } \n      */              // Do I REALLY need all that crap JUST for infinite ammo? \n      ReadyToFire(); \n   Done: \n      bFiring = False; \n      Finish(); \n}\n\ndefaultproperties\n{\n     LowAmmoWaterMark=12\n     GoverningSkill=Class'DeusEx.SkillWeaponHeavy'\n     reloadTime=2.000000\n     HitDamage=35\n     maxRange=24000\n     AccurateRange=14400\n     BaseAccuracy=0.600000\n     bCanHaveScope=True\n     bHasScope=True\n     ScopeFOV=20\n     bCanHaveLaser=True\n     bHasLaser=True\n     AreaOfEffect=AOE_Cone\n     bPenetrating=False\n     recoilStrength=0.300000\n     mpReloadTime=0.200000\n     mpHitDamage=50\n     mpBaseAccuracy=1.500000\n     mpAccurateRange=9000\n     mpMaxRange=10000\n     bCanHaveModBaseAccuracy=True\n     bCanHaveModReloadCount=True\n     bCanHaveModAccurateRange=True\n     bCanHaveModReloadTime=True\n     bCanHaveModRecoilStrength=True\n     ReloadCount=0\n     bInstantHit=True\n     shakemag=50.000000\n     FireSound=Sound'PGAssets.Generic.kiss'\n     AltFireSound=Sound'DeusExSounds.Weapons.PlasmaRifleReloadEnd'\n     CockingSound=Sound'DeusExSounds.Weapons.PlasmaRifleReload'\n     SelectSound=Sound'DeusExSounds.Weapons.PlasmaRifleSelect'\n     InventoryGroup=8\n     ItemName=\"Beam Rifle\"\n     PlayerViewOffset=(X=18.000000,Z=-7.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.PlasmaRifle'\n     PickupViewMesh=LodMesh'DeusExItems.PlasmaRiflePickup'\n     ThirdPersonMesh=LodMesh'DeusExItems.PlasmaRifle3rd'\n     LandSound=Sound'DeusExSounds.Generic.DropLargeWeapon'\n     Icon=Texture'DeusExUI.Icons.BeltIconPlasmaRifle'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconPlasmaRifle'\n     largeIconWidth=203\n     largeIconHeight=66\n     invSlotsX=4\n     invSlotsY=2\n     Description=\"A weapon made with TOP-SECRET technology from labs.\"\n     beltDescription=\"BEAM\"\n     Mesh=LodMesh'DeusExItems.PlasmaRiflePickup'\n     CollisionRadius=15.600000\n     CollisionHeight=5.200000\n     Mass=1.000000\n}\n",
            "name": "JPNWeaponBeamRifle.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "LowAmmoWaterMark=12",
                    "GoverningSkill=Class'DeusEx.SkillWeaponHeavy'",
                    "reloadTime=2.000000",
                    "HitDamage=35",
                    "maxRange=24000",
                    "AccurateRange=14400",
                    "BaseAccuracy=0.600000",
                    "bCanHaveScope=True",
                    "bHasScope=True",
                    "ScopeFOV=20",
                    "bCanHaveLaser=True",
                    "bHasLaser=True",
                    "AreaOfEffect=AOE_Cone",
                    "bPenetrating=False",
                    "recoilStrength=0.300000",
                    "mpReloadTime=0.200000",
                    "mpHitDamage=50",
                    "mpBaseAccuracy=1.500000",
                    "mpAccurateRange=9000",
                    "mpMaxRange=10000",
                    "bCanHaveModBaseAccuracy=True",
                    "bCanHaveModReloadCount=True",
                    "bCanHaveModAccurateRange=True",
                    "bCanHaveModReloadTime=True",
                    "bCanHaveModRecoilStrength=True",
                    "ReloadCount=0",
                    "bInstantHit=True",
                    "shakemag=50.000000",
                    "FireSound=Sound'PGAssets.Generic.kiss'",
                    "AltFireSound=Sound'DeusExSounds.Weapons.PlasmaRifleReloadEnd'",
                    "CockingSound=Sound'DeusExSounds.Weapons.PlasmaRifleReload'",
                    "SelectSound=Sound'DeusExSounds.Weapons.PlasmaRifleSelect'",
                    "InventoryGroup=8",
                    "ItemName=\"Beam Rifle\"",
                    "PlayerViewOffset=(X=18.000000,Z=-7.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.PlasmaRifle'",
                    "PickupViewMesh=LodMesh'DeusExItems.PlasmaRiflePickup'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.PlasmaRifle3rd'",
                    "LandSound=Sound'DeusExSounds.Generic.DropLargeWeapon'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconPlasmaRifle'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconPlasmaRifle'",
                    "largeIconWidth=203",
                    "largeIconHeight=66",
                    "invSlotsX=4",
                    "invSlotsY=2",
                    "Description=\"A weapon made with TOP-SECRET technology from labs.\"",
                    "beltDescription=\"BEAM\"",
                    "Mesh=LodMesh'DeusExItems.PlasmaRiflePickup'",
                    "CollisionRadius=15.600000",
                    "CollisionHeight=5.200000",
                    "Mass=1.000000"
                ],
                "exec": [],
                "extends": "DeusExWeapon",
                "functions": {
                    "DrawBeam": {
                        "body": "{\n   \n   \n\tPlayerOwner=DeusExPlayer(P);\t\n  DVector = HitLocation - SmokeLocation;\n  NumPoints = VSize(DVector)/64.0; // Draw a point every 4 feet.\n   if ( NumPoints < 1)\n       return;\n SmokeRotation = rotator(DVector);\n SmokeRotation.roll = Rand(6553595);\n\n Smoke = Spawn(class'BeamActorPink',PlayerOwner,,SmokeLocation,SmokeRotation);\n Smoke.MoveAmount = DVector/NumPoints;\n Smoke.NumPuffs = NumPoints - 1;\n Smoke.SetOwner(PlayerOwner);\n}",
                        "locals": [
                            "local BeamActorPink Smoke;",
                            "local Vector DVector;",
                            "local int NumPoints;",
                            "local rotator SmokeRotation;",
                            "local DeusExPlayer PlayerOwner;"
                        ],
                        "modifiers": [],
                        "name": "DrawBeam",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "HitLocation"
                            ],
                            [
                                "vector",
                                "SmokeLocation"
                            ],
                            [
                                "PlayerPawn",
                                "P"
                            ]
                        ],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t\tReloadCount = mpReloadCount;\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ProcessTraceHit": {
                        "body": "{\n\tsuper.ProcessTraceHit(Other,HitLocation,HitNormal,X,Y,Z);\n    DrawBeam(HitLocation, Owner.Location, PlayerPawn(Owner));\n}",
                        "locals": [
                            "local DeusExWeapon W;",
                            "local JailPoint JP;",
                            "local bool bFoundJail;",
                            "local int Jails;",
                            "local int Decider;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "ProcessTraceHit",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Other"
                            ],
                            [
                                "Vector",
                                "HitLocation"
                            ],
                            [
                                "Vector",
                                "HitNormal"
                            ],
                            [
                                "Vector",
                                "X"
                            ],
                            [
                                "Vector",
                                "Y"
                            ],
                            [
                                "Vector",
                                "Z"
                            ]
                        ],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 172,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "JailPoint.uc": {
            "body": "class JailPoint extends Actor;\n\nvar() int JailSlot;\n\ndefaultproperties\n{\n     bHidden=True\n}\n",
            "name": "JailPoint.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bHidden=True"
                ],
                "exec": [],
                "extends": "Actor",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 9,
                "replication": "",
                "states": [],
                "variables": [
                    "var() int JailSlot;"
                ]
            }
        },
        "JobScanner.uc": {
            "body": "//=============================================================================\n// Switch1.\n//=============================================================================\nclass JobScanner extends DeusExDecoration;\n\nvar DeusExPlayer assist1, assist2, assist3;\nvar(Job) string JobAlias, JobString;\nvar(Job) int Payoutcreds;\nvar(Job) int payoutdelay;\nvar(Job) string JobSkin;\nvar(Job) string JobInventory1;\nvar(Job) string JobInventory2;\nvar(Job) string JobInventory3;\nvar(Job) string JobInventory4;\n\nfunction Timer()\n{\nlocal DeusExPlayer p;\n\n\tif(Assist1 != None)\n\t{\n\t\tAssist1.Credits += Payoutcreds;\n\t\tAssist1.ClientMessage(\"You have been paid by a job, \"$JobAlias$\". Income: \"$Payoutcreds);\n\t}\n\tif(Assist2 != None)\n\t{\n\t\tAssist2.Credits += Payoutcreds;\n\t\tAssist2.ClientMessage(\"You have been paid by a job, \"$JobAlias$\". Income: \"$Payoutcreds);\n\t}\n\tif(Assist3 != None)\n\t{\n\t\tAssist3.Credits += Payoutcreds;\n\t\tAssist3.ClientMessage(\"You have been paid by a job, \"$JobAlias$\". Income: \"$Payoutcreds);\n\t}\n}\n\nfunction BeginPlay()\n{\n\tSetTimer(payoutdelay,True);\n}\n\nfunction Frob(Actor Frobber, Inventory frobWith)\n{\nlocal DeusExPlayer p;\nlocal JobScanner js;\nlocal class<ScriptedPawn> SCR;\nlocal class<inventory> invy, invy2, invy3, invy4;\nlocal inventory inv;\n\np = DeusExPlayer(Frobber);\n\n\tforeach AllActors(class'JobScanner',js)\n\t{\n\t\tif(js != Self)\n\t\t{\n\t\t\tif(js.Assist1 == P || js.Assist2 == P || js.Assist3 == P)\n\t\t\t{\n\t\t\t\tP.ClientMessage(\"You already have a job elsewhere.\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(P == Assist1)\n\t{\n\t\tAssist1 = None;\n\t\tP.ClientMessage(JobAlias$\" job resigned.\");\n\t\treturn;\n\t}\n\n\tif(P == Assist2)\n\t{\n\t\tAssist2 = None;\n\t\tP.ClientMessage(JobAlias$\" job resigned.\");\n\t\treturn;\n\t}\n\n\tif(P == Assist3)\n\t{\n\t\tAssist3 = None;\n\t\tP.ClientMessage(JobAlias$\" job resigned.\");\n\t\treturn;\n\t}\n\t\n\tif(Assist1 == None)\n\t{\n\t\tif(JobSkin != \"\")\n\t\t\tP.ConsoleCommand(\"say /skin\"@JobSkin);\n\t\t\n\t\tif(JobInventory1 != \"\")\n\t\t\tinvy = class<inventory>( DynamicLoadObject( JobInventory1, class'Class' ) );\n\t\tif(JobInventory2 != \"\")\n\t\t\tinvy2 = class<inventory>( DynamicLoadObject( JobInventory2, class'Class' ) );\n\t\tif(JobInventory3 != \"\")\n\t\t\tinvy3 = class<inventory>( DynamicLoadObject( JobInventory3, class'Class' ) );\n\t\tif(JobInventory4 != \"\")\n\t\t\tinvy4 = class<inventory>( DynamicLoadObject( JobInventory4, class'Class' ) );\n\t\tif( invy !=None )\n\t\t{\n\t\t\tinv=Spawn(invy);\n\t\t\tInv.Frob(DeusExPlayer(Frobber),None);\t  \n\t\t\tinv.Destroy();\n\t\t}\n\t\t\n\t\tif( invy2 !=None )\n\t\t{\n\t\t\tinv=Spawn(invy2);\n\t\t\tInv.Frob(DeusExPlayer(Frobber),None);\t  \n\t\t\tinv.Destroy();\n\t\t}\n\t\t\n\t\tif( invy3 !=None )\n\t\t{\n\t\t\tinv=Spawn(invy3);\n\t\t\tInv.Frob(DeusExPlayer(Frobber),None);\t  \n\t\t\tinv.Destroy();\n\t\t}\n\t\t\n\t\tif( invy4 !=None )\n\t\t{\n\t\t\tinv=Spawn(invy4);\n\t\t\tInv.Frob(DeusExPlayer(Frobber),None);\t  \n\t\t\tinv.Destroy();\n\t\t}\n\t\tAssist1 = P;\n\t\tP.ClientMessage(JobAlias$\" job joined.\");\n\t\t\tif(JobString != \"\")\n\t\t\t{\n\t\t\t\tP.ClientMessage(JobString);\n\t\t\t}\n\t\treturn;\n\t}\n\t\n\tif(Assist2 == None)\n\t{\n\t\tif(JobSkin != \"\")\n\t\t\tP.ConsoleCommand(\"say /skin\"@JobSkin);\n\t\tif(JobInventory1 != \"\")\n\t\t\tinvy = class<inventory>( DynamicLoadObject( JobInventory1, class'Class' ) );\n\t\tif(JobInventory2 != \"\")\n\t\t\tinvy2 = class<inventory>( DynamicLoadObject( JobInventory2, class'Class' ) );\n\t\tif(JobInventory3 != \"\")\n\t\t\tinvy3 = class<inventory>( DynamicLoadObject( JobInventory3, class'Class' ) );\n\t\tif(JobInventory4 != \"\")\n\t\t\tinvy4 = class<inventory>( DynamicLoadObject( JobInventory4, class'Class' ) );\n\t\tif( invy !=None )\n\t\t{\n\t\t\tinv=Spawn(invy);\n\t\t\tInv.Frob(DeusExPlayer(Frobber),None);\t  \n\t\t\tinv.Destroy();\n\t\t}\n\t\t\n\t\tif( invy2 !=None )\n\t\t{\n\t\t\tinv=Spawn(invy2);\n\t\t\tInv.Frob(DeusExPlayer(Frobber),None);\t  \n\t\t\tinv.Destroy();\n\t\t}\n\t\t\n\t\tif( invy3 !=None )\n\t\t{\n\t\t\tinv=Spawn(invy3);\n\t\t\tInv.Frob(DeusExPlayer(Frobber),None);\t  \n\t\t\tinv.Destroy();\n\t\t}\n\t\t\n\t\tif( invy4 !=None )\n\t\t{\n\t\t\tinv=Spawn(invy4);\n\t\t\tInv.Frob(DeusExPlayer(Frobber),None);\t  \n\t\t\tinv.Destroy();\n\t\t}\n\t\tAssist2 = P;\n\t\tP.ClientMessage(JobAlias$\" job joined.\");\n\t\t\tif(JobString != \"\")\n\t\t\t{\n\t\t\t\tP.ClientMessage(JobString);\n\t\t\t}\n\t\treturn;\n\t}\n\t\n\tif(Assist3 == None)\n\t{\n\t\tif(JobSkin != \"\")\n\t\t\tP.ConsoleCommand(\"say /skin\"@JobSkin);\n\t\tif(JobInventory1 != \"\")\n\t\t\tinvy = class<inventory>( DynamicLoadObject( JobInventory1, class'Class' ) );\n\t\tif(JobInventory2 != \"\")\n\t\t\tinvy2 = class<inventory>( DynamicLoadObject( JobInventory2, class'Class' ) );\n\t\tif(JobInventory3 != \"\")\n\t\t\tinvy3 = class<inventory>( DynamicLoadObject( JobInventory3, class'Class' ) );\n\t\tif(JobInventory4 != \"\")\n\t\t\tinvy4 = class<inventory>( DynamicLoadObject( JobInventory4, class'Class' ) );\n\t\n\t\tif( invy !=None )\n\t\t{\n\t\t\tinv=Spawn(invy);\n\t\t\tInv.Frob(DeusExPlayer(Frobber),None);\t  \n\t\t\tinv.Destroy();\n\t\t}\n\t\t\n\t\tif( invy2 !=None )\n\t\t{\n\t\t\tinv=Spawn(invy2);\n\t\t\tInv.Frob(DeusExPlayer(Frobber),None);\t  \n\t\t\tinv.Destroy();\n\t\t}\n\t\t\n\t\tif( invy3 !=None )\n\t\t{\n\t\t\tinv=Spawn(invy3);\n\t\t\tInv.Frob(DeusExPlayer(Frobber),None);\t  \n\t\t\tinv.Destroy();\n\t\t}\n\t\t\n\t\tif( invy4 !=None )\n\t\t{\n\t\t\tinv=Spawn(invy4);\n\t\t\tInv.Frob(DeusExPlayer(Frobber),None);\t  \n\t\t\tinv.Destroy();\n\t\t}\n\t\tAssist3 = P;\n\t\tP.ClientMessage(JobAlias$\" job joined.\");\n\t\t\tif(JobString != \"\")\n\t\t\t{\n\t\t\t\tP.ClientMessage(JobString);\n\t\t\t}\n\t\treturn;\n\t}\n}\n\ndefaultproperties\n{\n     JobAlias=\"DEFAULT JOB NAME\"\n     Payoutcreds=15\n     payoutdelay=60\n     bInvincible=True\n     ItemName=\"Job Scanner\"\n     bPushable=False\n     Physics=PHYS_None\n     Texture=Texture'DeusExItems.Skins.DataCubeTex2'\n     Mesh=LodMesh'DeusExItems.DataCube'\n     CollisionRadius=7.000000\n     CollisionHeight=1.270000\n     Buoyancy=12.000000\n}\n",
            "name": "JobScanner.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "JobAlias=\"DEFAULT JOB NAME\"",
                    "Payoutcreds=15",
                    "payoutdelay=60",
                    "bInvincible=True",
                    "ItemName=\"Job Scanner\"",
                    "bPushable=False",
                    "Physics=PHYS_None",
                    "Texture=Texture'DeusExItems.Skins.DataCubeTex2'",
                    "Mesh=LodMesh'DeusExItems.DataCube'",
                    "CollisionRadius=7.000000",
                    "CollisionHeight=1.270000",
                    "Buoyancy=12.000000"
                ],
                "exec": [],
                "extends": "DeusExDecoration",
                "functions": {
                    "BeginPlay": {
                        "body": "{\n\tSetTimer(payoutdelay,True);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "BeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Frob": {
                        "body": "{\n\np = DeusExPlayer(Frobber);\n\n\tforeach AllActors(class'JobScanner',js)\n\t{\n\t\tif(js != Self)\n\t\t{\n\t\t\tif(js.Assist1 == P || js.Assist2 == P || js.Assist3 == P)\n\t\t\t{\n\t\t\t\tP.ClientMessage(\"You already have a job elsewhere.\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(P == Assist1)\n\t{\n\t\tAssist1 = None;\n\t\tP.ClientMessage(JobAlias$\" job resigned.\");\n\t\treturn;\n\t}\n\n\tif(P == Assist2)\n\t{\n\t\tAssist2 = None;\n\t\tP.ClientMessage(JobAlias$\" job resigned.\");\n\t\treturn;\n\t}\n\n\tif(P == Assist3)\n\t{\n\t\tAssist3 = None;\n\t\tP.ClientMessage(JobAlias$\" job resigned.\");\n\t\treturn;\n\t}\n\t\n\tif(Assist1 == None)\n\t{\n\t\tif(JobSkin != \"\")\n\t\t\tP.ConsoleCommand(\"say /skin\"@JobSkin);\n\t\t\n\t\tif(JobInventory1 != \"\")\n\t\t\tinvy = class<inventory>( DynamicLoadObject( JobInventory1, class'Class' ) );\n\t\tif(JobInventory2 != \"\")\n\t\t\tinvy2 = class<inventory>( DynamicLoadObject( JobInventory2, class'Class' ) );\n\t\tif(JobInventory3 != \"\")\n\t\t\tinvy3 = class<inventory>( DynamicLoadObject( JobInventory3, class'Class' ) );\n\t\tif(JobInventory4 != \"\")\n\t\t\tinvy4 = class<inventory>( DynamicLoadObject( JobInventory4, class'Class' ) );\n\t\tif( invy !=None )\n\t\t{\n\t\t\tinv=Spawn(invy);\n\t\t\tInv.Frob(DeusExPlayer(Frobber),None);\t  \n\t\t\tinv.Destroy();\n\t\t}\n\t\t\n\t\tif( invy2 !=None )\n\t\t{\n\t\t\tinv=Spawn(invy2);\n\t\t\tInv.Frob(DeusExPlayer(Frobber),None);\t  \n\t\t\tinv.Destroy();\n\t\t}\n\t\t\n\t\tif( invy3 !=None )\n\t\t{\n\t\t\tinv=Spawn(invy3);\n\t\t\tInv.Frob(DeusExPlayer(Frobber),None);\t  \n\t\t\tinv.Destroy();\n\t\t}\n\t\t\n\t\tif( invy4 !=None )\n\t\t{\n\t\t\tinv=Spawn(invy4);\n\t\t\tInv.Frob(DeusExPlayer(Frobber),None);\t  \n\t\t\tinv.Destroy();\n\t\t}\n\t\tAssist1 = P;\n\t\tP.ClientMessage(JobAlias$\" job joined.\");\n\t\t\tif(JobString != \"\")\n\t\t\t{\n\t\t\t\tP.ClientMessage(JobString);\n\t\t\t}\n\t\treturn;\n\t}\n\t\n\tif(Assist2 == None)\n\t{\n\t\tif(JobSkin != \"\")\n\t\t\tP.ConsoleCommand(\"say /skin\"@JobSkin);\n\t\tif(JobInventory1 != \"\")\n\t\t\tinvy = class<inventory>( DynamicLoadObject( JobInventory1, class'Class' ) );\n\t\tif(JobInventory2 != \"\")\n\t\t\tinvy2 = class<inventory>( DynamicLoadObject( JobInventory2, class'Class' ) );\n\t\tif(JobInventory3 != \"\")\n\t\t\tinvy3 = class<inventory>( DynamicLoadObject( JobInventory3, class'Class' ) );\n\t\tif(JobInventory4 != \"\")\n\t\t\tinvy4 = class<inventory>( DynamicLoadObject( JobInventory4, class'Class' ) );\n\t\tif( invy !=None )\n\t\t{\n\t\t\tinv=Spawn(invy);\n\t\t\tInv.Frob(DeusExPlayer(Frobber),None);\t  \n\t\t\tinv.Destroy();\n\t\t}\n\t\t\n\t\tif( invy2 !=None )\n\t\t{\n\t\t\tinv=Spawn(invy2);\n\t\t\tInv.Frob(DeusExPlayer(Frobber),None);\t  \n\t\t\tinv.Destroy();\n\t\t}\n\t\t\n\t\tif( invy3 !=None )\n\t\t{\n\t\t\tinv=Spawn(invy3);\n\t\t\tInv.Frob(DeusExPlayer(Frobber),None);\t  \n\t\t\tinv.Destroy();\n\t\t}\n\t\t\n\t\tif( invy4 !=None )\n\t\t{\n\t\t\tinv=Spawn(invy4);\n\t\t\tInv.Frob(DeusExPlayer(Frobber),None);\t  \n\t\t\tinv.Destroy();\n\t\t}\n\t\tAssist2 = P;\n\t\tP.ClientMessage(JobAlias$\" job joined.\");\n\t\t\tif(JobString != \"\")\n\t\t\t{\n\t\t\t\tP.ClientMessage(JobString);\n\t\t\t}\n\t\treturn;\n\t}\n\t\n\tif(Assist3 == None)\n\t{\n\t\tif(JobSkin != \"\")\n\t\t\tP.ConsoleCommand(\"say /skin\"@JobSkin);\n\t\tif(JobInventory1 != \"\")\n\t\t\tinvy = class<inventory>( DynamicLoadObject( JobInventory1, class'Class' ) );\n\t\tif(JobInventory2 != \"\")\n\t\t\tinvy2 = class<inventory>( DynamicLoadObject( JobInventory2, class'Class' ) );\n\t\tif(JobInventory3 != \"\")\n\t\t\tinvy3 = class<inventory>( DynamicLoadObject( JobInventory3, class'Class' ) );\n\t\tif(JobInventory4 != \"\")\n\t\t\tinvy4 = class<inventory>( DynamicLoadObject( JobInventory4, class'Class' ) );\n\t\n\t\tif( invy !=None )\n\t\t{\n\t\t\tinv=Spawn(invy);\n\t\t\tInv.Frob(DeusExPlayer(Frobber),None);\t  \n\t\t\tinv.Destroy();\n\t\t}\n\t\t\n\t\tif( invy2 !=None )\n\t\t{\n\t\t\tinv=Spawn(invy2);\n\t\t\tInv.Frob(DeusExPlayer(Frobber),None);\t  \n\t\t\tinv.Destroy();\n\t\t}\n\t\t\n\t\tif( invy3 !=None )\n\t\t{\n\t\t\tinv=Spawn(invy3);\n\t\t\tInv.Frob(DeusExPlayer(Frobber),None);\t  \n\t\t\tinv.Destroy();\n\t\t}\n\t\t\n\t\tif( invy4 !=None )\n\t\t{\n\t\t\tinv=Spawn(invy4);\n\t\t\tInv.Frob(DeusExPlayer(Frobber),None);\t  \n\t\t\tinv.Destroy();\n\t\t}\n\t\tAssist3 = P;\n\t\tP.ClientMessage(JobAlias$\" job joined.\");\n\t\t\tif(JobString != \"\")\n\t\t\t{\n\t\t\t\tP.ClientMessage(JobString);\n\t\t\t}\n\t\treturn;\n\t}\n}",
                        "locals": [
                            "local DeusExPlayer p;",
                            "local JobScanner js;",
                            "local class<ScriptedPawn> SCR;",
                            "local class<inventory> invy, invy2, invy3, invy4;",
                            "local inventory inv;"
                        ],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\n\tif(Assist1 != None)\n\t{\n\t\tAssist1.Credits += Payoutcreds;\n\t\tAssist1.ClientMessage(\"You have been paid by a job, \"$JobAlias$\". Income: \"$Payoutcreds);\n\t}\n\tif(Assist2 != None)\n\t{\n\t\tAssist2.Credits += Payoutcreds;\n\t\tAssist2.ClientMessage(\"You have been paid by a job, \"$JobAlias$\". Income: \"$Payoutcreds);\n\t}\n\tif(Assist3 != None)\n\t{\n\t\tAssist3.Credits += Payoutcreds;\n\t\tAssist3.ClientMessage(\"You have been paid by a job, \"$JobAlias$\". Income: \"$Payoutcreds);\n\t}\n}",
                        "locals": [
                            "local DeusExPlayer p;"
                        ],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 247,
                "replication": "",
                "states": [],
                "variables": [
                    "var DeusExPlayer assist1, assist2, assist3;",
                    "var(Job) string JobAlias, JobString;",
                    "var(Job) int Payoutcreds;",
                    "var(Job) int payoutdelay;",
                    "var(Job) string JobSkin;",
                    "var(Job) string JobInventory1;",
                    "var(Job) string JobInventory2;",
                    "var(Job) string JobInventory3;",
                    "var(Job) string JobInventory4;"
                ]
            }
        },
        "KnifeBomb.uc": {
            "body": "class KnifeBomb expands ThrownProjectile;\n\nstate Exploding\n{\n\tignores ProcessTouch, HitWall, Explode;\n\n   function DamageRing()\n   {\n\t\tlocal Pawn apawn;\n\t\tlocal float damageRadius;\n\t\tlocal Vector dist;\n\t\tlocal ProjectileGenerator Projy;\n\t\n\t\t\tprojy = Spawn(class'ProjectileGenerator',,,Self.Location);\n\t\t\tprojy.Lifespan=0.7;\n\t\t\tprojy.EjectSpeed=400;\n\t\t\tprojy.bRandomEject = True;\n\t\t\tprojy.ProjectileClass=class'PoisonKnife';\n\t\t\tprojy.NumPerSpawn=12;\n\t\tif ( Level.NetMode != NM_Standalone )\n\t\t{\n\t\t\tdamageRadius = (blastRadius / gradualHurtSteps) * gradualHurtCounter;\n\n\t\t\tfor ( apawn = Level.PawnList; apawn != None; apawn = apawn.nextPawn )\n\t\t\t{\n\t\t\t\tif ( apawn.IsA('DeusExPlayer') )\n\t\t\t\t{\n\t\t\t\t\tdist = apawn.Location - Location;\n\t\t\t\t\tif ( VSize(dist) < damageRadius )\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( gradualHurtCounter <= 2 )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif ( apawn.FastTrace( apawn.Location, Location ))\n\t\t\t\t\t\t\t\tDeusExPlayer(apawn).myProjKiller = Self;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tDeusExPlayer(apawn).myProjKiller = Self;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n      //DEUS_EX AMSD Ignore Line of Sight on the lowest radius check, only in multiplayer\n\t\tHurtRadius\n\t\t(\n\t\t\t(2 * Damage) / gradualHurtSteps,\n\t\t\t(blastRadius / gradualHurtSteps) * gradualHurtCounter,\n\t\t\tdamageType,\n\t\t\tMomentumTransfer / gradualHurtSteps,\n\t\t\tLocation,\n         ((gradualHurtCounter <= 2) && (Level.NetMode != NM_Standalone))\n\t\t);\n   }\n\n\tfunction Timer()\n\t{\n\t\tgradualHurtCounter++;\n      DamageRing();\n\t\tif (gradualHurtCounter >= gradualHurtSteps)\n\t\t\tDestroy();\n\t}\n\nBegin:\n\t// stagger the HurtRadius outward using Timer()\n\t// do five separate blast rings increasing in size\n\tgradualHurtCounter = 1;\n\tgradualHurtSteps = 5;\n\tVelocity = vect(0,0,0);\n\tbHidden = True;\n\tLightType = LT_None;\n\tSetCollision(False, False, False);\n   DamageRing();\n\tSetTimer(0.25/float(gradualHurtSteps), True);\n}\n\n\nsimulated function SpawnEffects(Vector HitLocation, Vector HitNormal, Actor Other)\n{\n\tlocal int i;\n\tlocal SmokeTrail puff;\n\tlocal TearGas gas;\n\tlocal Fragment frag;\n\tlocal ParticleGenerator gen;\n\tlocal ProjectileGenerator projgen;\n\tlocal vector loc;\n\tlocal rotator rot;\n\tlocal ExplosionLight light;\n\tlocal DeusExDecal mark;\n   local AnimatedSprite expeffect;\n\n\trot.Pitch = 16384 + FRand() * 16384 - 8192;\n\trot.Yaw = FRand() * 65536;\n\trot.Roll = 0;\n\n\t// don't draw damage art on destroyed movers\n\tif (DeusExMover(Other) != None)\n\t\tif (DeusExMover(Other).bDestroyed)\n\t\t\tExplosionDecal = None;\n\n\tif (ExplosionDecal != None)\n\t{\n\t\tmark = DeusExDecal(Spawn(ExplosionDecal, Self,, HitLocation, Rotator(HitNormal)));\n\t\tif (mark != None)\n\t\t{\n\t\t\tmark.DrawScale = FClamp(damage/30, 0.1, 3.0);\n\t\t\tmark.ReattachDecal();\n         if (!bDamaged)\n            mark.RemoteRole = ROLE_None;\n\t\t}\n\t}\n\n\tfor (i=0; i<blastRadius/36; i++)\n\t{\n\t\tif (FRand() < 0.9)\n\t\t{\n\t\t\tif (bDebris && bStuck)\n\t\t\t{\n\t\t\t\tfrag = spawn(FragmentClass,,, HitLocation);\n\t\t\t\tif (!bDamaged)\n\t\t\t\t\tfrag.RemoteRole = ROLE_None;\n\t\t\t\tif (frag != None)\n\t\t\t\t\tfrag.CalcVelocity(VRand(), blastRadius);\n\t\t\t}\n\n\t\t\tloc = Location;\n\t\t\tloc.X += FRand() * blastRadius - blastRadius * 0.5;\n\t\t\tloc.Y += FRand() * blastRadius - blastRadius * 0.5;\n\n\t\t\tif (damageType == 'Exploded')\n\t\t\t{\n\t\t\t\tlight = Spawn(class'ExplosionLight',,, HitLocation);\n\t\t\t\tif ((light != None) && (!bDamaged))\n\t\t\t\t\tlight.RemoteRole = ROLE_None;\n\n\t\t\t\tif (FRand() < 0.5)\n\t\t\t\t{\n\t\t\t\t\texpeffect = spawn(class'ExplosionSmall',,, loc);\n\t\t\t\t\tlight.size = 2;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\texpeffect = spawn(class'ExplosionMedium',,, loc);\n\t\t\t\t\tlight.size = 4;\n\t\t\t\t}\n\t\t\t\tif ((expeffect != None) && (!bDamaged))\n\t\t\t\t\texpeffect.RemoteRole = ROLE_None;\n\t\t\t}\n\t\t\telse if (damageType == 'EMP')\n\t\t\t{\n\t\t\t\tlight = Spawn(class'ExplosionLight',,, HitLocation);\n\t\t\t\tif (light != None)\n\t\t\t\t{\n\t\t\t\t\tif (!bDamaged)\n\t\t\t\t\t\tlight.RemoteRole = ROLE_None;\n\t\t\t\t\tlight.size = 6;\n\t\t\t\t\tlight.LightHue = 170;\n\t\t\t\t\tlight.LightSaturation = 64;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\ndefaultproperties\n{\n     fuseLength=1.000000\n     proxRadius=128.000000\n     spawnWeaponClass=Class'PartyStuff.WeaponKnifeBomb'\n     spawnAmmoClass=Class'PartyStuff.AmmoKB'\n     ItemName=\"Knife Bomb\"\n     speed=1500.000000\n     ImpactSound=Sound'DeusExSounds.Generic.SmallExplosion2'\n     Mesh=LodMesh'DeusExItems.EMPGrenadePickup'\n}\n",
            "name": "KnifeBomb.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "fuseLength=1.000000",
                    "proxRadius=128.000000",
                    "spawnWeaponClass=Class'PartyStuff.WeaponKnifeBomb'",
                    "spawnAmmoClass=Class'PartyStuff.AmmoKB'",
                    "ItemName=\"Knife Bomb\"",
                    "speed=1500.000000",
                    "ImpactSound=Sound'DeusExSounds.Generic.SmallExplosion2'",
                    "Mesh=LodMesh'DeusExItems.EMPGrenadePickup'"
                ],
                "exec": [],
                "extends": "ThrownProjectile",
                "functions": {
                    "DamageRing": {
                        "body": "{\n\t\n\t\t\tprojy = Spawn(class'ProjectileGenerator',,,Self.Location);\n\t\t\tprojy.Lifespan=0.7;\n\t\t\tprojy.EjectSpeed=400;\n\t\t\tprojy.bRandomEject = True;\n\t\t\tprojy.ProjectileClass=class'PoisonKnife';\n\t\t\tprojy.NumPerSpawn=12;\n\t\tif ( Level.NetMode != NM_Standalone )\n\t\t{\n\t\t\tdamageRadius = (blastRadius / gradualHurtSteps) * gradualHurtCounter;\n\n\t\t\tfor ( apawn = Level.PawnList; apawn != None; apawn = apawn.nextPawn )\n\t\t\t{\n\t\t\t\tif ( apawn.IsA('DeusExPlayer') )\n\t\t\t\t{\n\t\t\t\t\tdist = apawn.Location - Location;\n\t\t\t\t\tif ( VSize(dist) < damageRadius )\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( gradualHurtCounter <= 2 )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif ( apawn.FastTrace( apawn.Location, Location ))\n\t\t\t\t\t\t\t\tDeusExPlayer(apawn).myProjKiller = Self;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tDeusExPlayer(apawn).myProjKiller = Self;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n      //DEUS_EX AMSD Ignore Line of Sight on the lowest radius check, only in multiplayer\n\t\tHurtRadius\n\t\t(\n\t\t\t(2 * Damage) / gradualHurtSteps,\n\t\t\t(blastRadius / gradualHurtSteps) * gradualHurtCounter,\n\t\t\tdamageType,\n\t\t\tMomentumTransfer / gradualHurtSteps,\n\t\t\tLocation,\n         ((gradualHurtCounter <= 2) && (Level.NetMode != NM_Standalone))\n\t\t);\n   }",
                        "locals": [
                            "local Pawn apawn;",
                            "local float damageRadius;",
                            "local Vector dist;",
                            "local ProjectileGenerator Projy;"
                        ],
                        "modifiers": [],
                        "name": "DamageRing",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "SpawnEffects": {
                        "body": "{\n\n\trot.Pitch = 16384 + FRand() * 16384 - 8192;\n\trot.Yaw = FRand() * 65536;\n\trot.Roll = 0;\n\n\t// don't draw damage art on destroyed movers\n\tif (DeusExMover(Other) != None)\n\t\tif (DeusExMover(Other).bDestroyed)\n\t\t\tExplosionDecal = None;\n\n\tif (ExplosionDecal != None)\n\t{\n\t\tmark = DeusExDecal(Spawn(ExplosionDecal, Self,, HitLocation, Rotator(HitNormal)));\n\t\tif (mark != None)\n\t\t{\n\t\t\tmark.DrawScale = FClamp(damage/30, 0.1, 3.0);\n\t\t\tmark.ReattachDecal();\n         if (!bDamaged)\n            mark.RemoteRole = ROLE_None;\n\t\t}\n\t}\n\n\tfor (i=0; i<blastRadius/36; i++)\n\t{\n\t\tif (FRand() < 0.9)\n\t\t{\n\t\t\tif (bDebris && bStuck)\n\t\t\t{\n\t\t\t\tfrag = spawn(FragmentClass,,, HitLocation);\n\t\t\t\tif (!bDamaged)\n\t\t\t\t\tfrag.RemoteRole = ROLE_None;\n\t\t\t\tif (frag != None)\n\t\t\t\t\tfrag.CalcVelocity(VRand(), blastRadius);\n\t\t\t}\n\n\t\t\tloc = Location;\n\t\t\tloc.X += FRand() * blastRadius - blastRadius * 0.5;\n\t\t\tloc.Y += FRand() * blastRadius - blastRadius * 0.5;\n\n\t\t\tif (damageType == 'Exploded')\n\t\t\t{\n\t\t\t\tlight = Spawn(class'ExplosionLight',,, HitLocation);\n\t\t\t\tif ((light != None) && (!bDamaged))\n\t\t\t\t\tlight.RemoteRole = ROLE_None;\n\n\t\t\t\tif (FRand() < 0.5)\n\t\t\t\t{\n\t\t\t\t\texpeffect = spawn(class'ExplosionSmall',,, loc);\n\t\t\t\t\tlight.size = 2;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\texpeffect = spawn(class'ExplosionMedium',,, loc);\n\t\t\t\t\tlight.size = 4;\n\t\t\t\t}\n\t\t\t\tif ((expeffect != None) && (!bDamaged))\n\t\t\t\t\texpeffect.RemoteRole = ROLE_None;\n\t\t\t}\n\t\t\telse if (damageType == 'EMP')\n\t\t\t{\n\t\t\t\tlight = Spawn(class'ExplosionLight',,, HitLocation);\n\t\t\t\tif (light != None)\n\t\t\t\t{\n\t\t\t\t\tif (!bDamaged)\n\t\t\t\t\t\tlight.RemoteRole = ROLE_None;\n\t\t\t\t\tlight.size = 6;\n\t\t\t\t\tlight.LightHue = 170;\n\t\t\t\t\tlight.LightSaturation = 64;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}",
                        "locals": [
                            "local int i;",
                            "local SmokeTrail puff;",
                            "local TearGas gas;",
                            "local Fragment frag;",
                            "local ParticleGenerator gen;",
                            "local ProjectileGenerator projgen;",
                            "local vector loc;",
                            "local rotator rot;",
                            "local ExplosionLight light;",
                            "local DeusExDecal mark;",
                            "local AnimatedSprite expeffect;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "SpawnEffects",
                        "native": false,
                        "param": [
                            [
                                "Vector",
                                "HitLocation"
                            ],
                            [
                                "Vector",
                                "HitNormal"
                            ],
                            [
                                "Actor",
                                "Other"
                            ]
                        ],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\t\tgradualHurtCounter++;\n      DamageRing();\n\t\tif (gradualHurtCounter >= gradualHurtSteps)\n\t\t\tDestroy();\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 174,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "LB.uc": {
            "body": "class LB extends DeusExProjectile;\n\nvar ParticleGenerator pGen1;\nvar ParticleGenerator pGen2;\n\nvar float mpDamage;\nvar float mpBlastRadius;\n\n#exec OBJ LOAD FILE=Effects\n\nsimulated function DrawExplosionEffects(vector HitLocation, vector HitNormal)\n{\n\tlocal ParticleGenerator gen;\n\n\t// create a particle generator shooting out plasma spheres\n\tgen = Spawn(class'ParticleGenerator',,, HitLocation, Rotator(HitNormal));\n\tif (gen != None)\n\t{\n      gen.RemoteRole = ROLE_None;\n\t\tgen.particleDrawScale = 2.0;\n\t\tgen.checkTime = 0.10;\n\t\tgen.frequency = 2.0;\n\t\tgen.ejectSpeed = 100.0;\n\t\tgen.bGravity = True;\n\t\tgen.bRandomEject = True;\n\t\tgen.particleLifeSpan = 14.00;\n\t\tgen.particleTexture = FireTexture'Effects.Laser.LaserSpot1';\n\t\tgen.LifeSpan = 18.5;\n\t}\n}\n\nfunction PostBeginPlay()\n{\n\tSuper.PostBeginPlay();\n\n   if ((Level.NetMode == NM_Standalone) || (Level.NetMode == NM_ListenServer))\n      SpawnPlasmaEffects();\n}\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\tDamage = mpDamage;\n\tblastRadius = mpBlastRadius;\n}\n\nsimulated function PostNetBeginPlay()\n{\n      SpawnPlasmaEffects();\n}\n\n// DEUS_EX AMSD Should not be called as server propagating to clients.\nsimulated function SpawnPlasmaEffects()\n{\n\tlocal Rotator rot;\n   rot = Rotation;\n\trot.Yaw -= 32768;\n\n   pGen2 = Spawn(class'ParticleGenerator', Self,, Location, rot);\n\tif (pGen2 != None)\n\t{\n      pGen2.RemoteRole = ROLE_None;\n\t\tpGen2.particleTexture = FireTexture'Effects.Laser.LaserSpot1';\n\t\tpGen2.particleDrawScale = 2.0;\n\t\tpGen2.checkTime = 0.04;\n\t\tpGen2.riseRate = 0.0;\n\t\tpGen2.ejectSpeed = 100.0;\n\t\tpGen2.particleLifeSpan = 4.0;\n\t\tpGen2.bRandomEject = True;\n\t\tpGen2.SetBase(Self);\n\t}\n   \n}\n\nsimulated function Destroyed()\n{\n\tif (pGen1 != None)\n\t\tpGen1.DelayedDestroy();\n\tif (pGen2 != None)\n\t\tpGen2.DelayedDestroy();\n\n\tSuper.Destroyed();\n}\n\ndefaultproperties\n{\n     mpDamage=5.000000\n     mpBlastRadius=100.000000\n     bExplodes=True\n     blastRadius=128.000000\n     DamageType=Sabot\n     AccurateRange=14400\n     maxRange=24000\n     bIgnoresNanoDefense=True\n     ItemName=\"Laser Bolt\"\n     ItemArticle=\"a\"\n     speed=1500.000000\n     MaxSpeed=1500.000000\n     Damage=5.000000\n     MomentumTransfer=5000\n     ImpactSound=Sound'DeusExSounds.Weapons.PlasmaRifleHit'\n     ExplosionDecal=Class'DeusEx.ScorchMark'\n     Texture=FireTexture'Effects.liquid.Virus_SFX'\n     Mesh=LodMesh'DeusExItems.Tracer'\n     DrawScale=3.000000\n     bUnlit=True\n     LightBrightness=200\n     LightHue=80\n     LightSaturation=128\n     LightRadius=3\n     bFixedRotationDir=True\n}\n",
            "name": "LB.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "mpDamage=5.000000",
                    "mpBlastRadius=100.000000",
                    "bExplodes=True",
                    "blastRadius=128.000000",
                    "DamageType=Sabot",
                    "AccurateRange=14400",
                    "maxRange=24000",
                    "bIgnoresNanoDefense=True",
                    "ItemName=\"Laser Bolt\"",
                    "ItemArticle=\"a\"",
                    "speed=1500.000000",
                    "MaxSpeed=1500.000000",
                    "Damage=5.000000",
                    "MomentumTransfer=5000",
                    "ImpactSound=Sound'DeusExSounds.Weapons.PlasmaRifleHit'",
                    "ExplosionDecal=Class'DeusEx.ScorchMark'",
                    "Texture=FireTexture'Effects.liquid.Virus_SFX'",
                    "Mesh=LodMesh'DeusExItems.Tracer'",
                    "DrawScale=3.000000",
                    "bUnlit=True",
                    "LightBrightness=200",
                    "LightHue=80",
                    "LightSaturation=128",
                    "LightRadius=3",
                    "bFixedRotationDir=True"
                ],
                "exec": [
                    "#exec OBJ LOAD FILE=Effects"
                ],
                "extends": "DeusExProjectile",
                "functions": {
                    "Destroyed": {
                        "body": "{\n\tif (pGen1 != None)\n\t\tpGen1.DelayedDestroy();\n\tif (pGen2 != None)\n\t\tpGen2.DelayedDestroy();\n\n\tSuper.Destroyed();\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Destroyed",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "DrawExplosionEffects": {
                        "body": "{\n\n\t// create a particle generator shooting out plasma spheres\n\tgen = Spawn(class'ParticleGenerator',,, HitLocation, Rotator(HitNormal));\n\tif (gen != None)\n\t{\n      gen.RemoteRole = ROLE_None;\n\t\tgen.particleDrawScale = 2.0;\n\t\tgen.checkTime = 0.10;\n\t\tgen.frequency = 2.0;\n\t\tgen.ejectSpeed = 100.0;\n\t\tgen.bGravity = True;\n\t\tgen.bRandomEject = True;\n\t\tgen.particleLifeSpan = 14.00;\n\t\tgen.particleTexture = FireTexture'Effects.Laser.LaserSpot1';\n\t\tgen.LifeSpan = 18.5;\n\t}\n}",
                        "locals": [
                            "local ParticleGenerator gen;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "DrawExplosionEffects",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "HitLocation"
                            ],
                            [
                                "vector",
                                "HitNormal"
                            ]
                        ],
                        "return": ""
                    },
                    "PostBeginPlay": {
                        "body": "{\n\tSuper.PostBeginPlay();\n\n   if ((Level.NetMode == NM_Standalone) || (Level.NetMode == NM_ListenServer))\n      SpawnPlasmaEffects();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PostNetBeginPlay": {
                        "body": "{\n      SpawnPlasmaEffects();\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PostNetBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\tDamage = mpDamage;\n\tblastRadius = mpBlastRadius;\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "SpawnPlasmaEffects": {
                        "body": "{\n   rot = Rotation;\n\trot.Yaw -= 32768;\n\n   pGen2 = Spawn(class'ParticleGenerator', Self,, Location, rot);\n\tif (pGen2 != None)\n\t{\n      pGen2.RemoteRole = ROLE_None;\n\t\tpGen2.particleTexture = FireTexture'Effects.Laser.LaserSpot1';\n\t\tpGen2.particleDrawScale = 2.0;\n\t\tpGen2.checkTime = 0.04;\n\t\tpGen2.riseRate = 0.0;\n\t\tpGen2.ejectSpeed = 100.0;\n\t\tpGen2.particleLifeSpan = 4.0;\n\t\tpGen2.bRandomEject = True;\n\t\tpGen2.SetBase(Self);\n\t}\n   \n}",
                        "locals": [
                            "local Rotator rot;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "SpawnPlasmaEffects",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 114,
                "replication": "",
                "states": [],
                "variables": [
                    "var ParticleGenerator pGen1;",
                    "var ParticleGenerator pGen2;",
                    "var float mpDamage;",
                    "var float mpBlastRadius;"
                ]
            }
        },
        "LB2.uc": {
            "body": "class LB2 extends DeusExProjectile;\n\nvar ParticleGenerator pGen1;\nvar ParticleGenerator pGen2;\n\nvar float mpDamage;\nvar float mpBlastRadius;\n\n#exec OBJ LOAD FILE=Effects\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\tDamage = mpDamage;\n\tblastRadius = mpBlastRadius;\n}\n\ndefaultproperties\n{\n     mpDamage=5.000000\n     mpBlastRadius=100.000000\n     bExplodes=True\n     blastRadius=128.000000\n     DamageType=Sabot\n     AccurateRange=14400\n     maxRange=24000\n     bIgnoresNanoDefense=True\n     ItemName=\"Beam Bolt\"\n     ItemArticle=\"a\"\n     speed=1500.000000\n     MaxSpeed=1500.000000\n     Damage=5.000000\n     MomentumTransfer=5000\n     ImpactSound=Sound'DeusExSounds.Weapons.PlasmaRifleHit'\n     ExplosionDecal=Class'DeusEx.ScorchMark'\n     Texture=FireTexture'Effects.liquid.Virus_SFX'\n     Mesh=LodMesh'DeusExItems.Tracer'\n     DrawScale=1.300000\n     bUnlit=True\n     LightBrightness=200\n     LightHue=80\n     LightSaturation=128\n     LightRadius=3\n     bFixedRotationDir=True\n}\n",
            "name": "LB2.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "mpDamage=5.000000",
                    "mpBlastRadius=100.000000",
                    "bExplodes=True",
                    "blastRadius=128.000000",
                    "DamageType=Sabot",
                    "AccurateRange=14400",
                    "maxRange=24000",
                    "bIgnoresNanoDefense=True",
                    "ItemName=\"Beam Bolt\"",
                    "ItemArticle=\"a\"",
                    "speed=1500.000000",
                    "MaxSpeed=1500.000000",
                    "Damage=5.000000",
                    "MomentumTransfer=5000",
                    "ImpactSound=Sound'DeusExSounds.Weapons.PlasmaRifleHit'",
                    "ExplosionDecal=Class'DeusEx.ScorchMark'",
                    "Texture=FireTexture'Effects.liquid.Virus_SFX'",
                    "Mesh=LodMesh'DeusExItems.Tracer'",
                    "DrawScale=1.300000",
                    "bUnlit=True",
                    "LightBrightness=200",
                    "LightHue=80",
                    "LightSaturation=128",
                    "LightRadius=3",
                    "bFixedRotationDir=True"
                ],
                "exec": [
                    "#exec OBJ LOAD FILE=Effects"
                ],
                "extends": "DeusExProjectile",
                "functions": {
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\tDamage = mpDamage;\n\tblastRadius = mpBlastRadius;\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 47,
                "replication": "",
                "states": [],
                "variables": [
                    "var ParticleGenerator pGen1;",
                    "var ParticleGenerator pGen2;",
                    "var float mpDamage;",
                    "var float mpBlastRadius;"
                ]
            }
        },
        "LB3.uc": {
            "body": "class LB3 extends DeusExProjectile;\n\nvar ParticleGenerator pGen1;\nvar ParticleGenerator pGen2;\n\nvar float mpDamage;\nvar float mpBlastRadius;\n\n#exec OBJ LOAD FILE=Effects\n\nfunction PostBeginPlay()\n{\n\tSuper.PostBeginPlay();\n\n   if ((Level.NetMode == NM_Standalone) || (Level.NetMode == NM_ListenServer))\n      SpawnPlasmaEffects();\n}\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\tDamage = mpDamage;\n\tblastRadius = mpBlastRadius;\n}\n\nsimulated function PostNetBeginPlay()\n{\n      SpawnPlasmaEffects();\n}\n\n// DEUS_EX AMSD Should not be called as server propagating to clients.\nsimulated function SpawnPlasmaEffects()\n{\n\tlocal Rotator rot;\n   rot = Rotation;\n\trot.Yaw -= 32768;\n\n   pGen2 = Spawn(class'ParticleGenerator', Self,, Location, rot);\n\tif (pGen2 != None)\n\t{\n      pGen2.RemoteRole = ROLE_None;\n\t\tpGen2.particleTexture = FireTexture'Effects.Laser.LaserSpot1';\n\t\tpGen2.particleDrawScale = 2.0;\n\t\tpGen2.checkTime = 0.04;\n\t\tpGen2.riseRate = 0.0;\n\t\tpGen2.ejectSpeed = 100.0;\n\t\tpGen2.particleLifeSpan = 4.0;\n\t\tpGen2.bRandomEject = True;\n\t\tpGen2.SetBase(Self);\n\t}\n   \n}\n\nsimulated function Destroyed()\n{\n\tif (pGen1 != None)\n\t\tpGen1.DelayedDestroy();\n\tif (pGen2 != None)\n\t\tpGen2.DelayedDestroy();\n\n\tSuper.Destroyed();\n}\n\ndefaultproperties\n{\n     mpDamage=20.000000\n     mpBlastRadius=255.000000\n     bExplodes=True\n     blastRadius=128.000000\n     DamageType=exploded\n     AccurateRange=14400\n     maxRange=24000\n     bIgnoresNanoDefense=True\n     ItemName=\"Heavy Bolt\"\n     ItemArticle=\"a\"\n     speed=1500.000000\n     MaxSpeed=1500.000000\n     Damage=5.000000\n     MomentumTransfer=5000\n     ImpactSound=Sound'DeusExSounds.Weapons.PlasmaRifleHit'\n     ExplosionDecal=Class'DeusEx.ScorchMark'\n     Texture=FireTexture'Effects.liquid.Virus_SFX'\n     Mesh=LodMesh'DeusExItems.Tracer'\n     DrawScale=3.500000\n     bUnlit=True\n     LightBrightness=200\n     LightHue=80\n     LightSaturation=128\n     LightRadius=3\n     bFixedRotationDir=True\n}\n",
            "name": "LB3.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "mpDamage=20.000000",
                    "mpBlastRadius=255.000000",
                    "bExplodes=True",
                    "blastRadius=128.000000",
                    "DamageType=exploded",
                    "AccurateRange=14400",
                    "maxRange=24000",
                    "bIgnoresNanoDefense=True",
                    "ItemName=\"Heavy Bolt\"",
                    "ItemArticle=\"a\"",
                    "speed=1500.000000",
                    "MaxSpeed=1500.000000",
                    "Damage=5.000000",
                    "MomentumTransfer=5000",
                    "ImpactSound=Sound'DeusExSounds.Weapons.PlasmaRifleHit'",
                    "ExplosionDecal=Class'DeusEx.ScorchMark'",
                    "Texture=FireTexture'Effects.liquid.Virus_SFX'",
                    "Mesh=LodMesh'DeusExItems.Tracer'",
                    "DrawScale=3.500000",
                    "bUnlit=True",
                    "LightBrightness=200",
                    "LightHue=80",
                    "LightSaturation=128",
                    "LightRadius=3",
                    "bFixedRotationDir=True"
                ],
                "exec": [
                    "#exec OBJ LOAD FILE=Effects"
                ],
                "extends": "DeusExProjectile",
                "functions": {
                    "Destroyed": {
                        "body": "{\n\tif (pGen1 != None)\n\t\tpGen1.DelayedDestroy();\n\tif (pGen2 != None)\n\t\tpGen2.DelayedDestroy();\n\n\tSuper.Destroyed();\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Destroyed",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PostBeginPlay": {
                        "body": "{\n\tSuper.PostBeginPlay();\n\n   if ((Level.NetMode == NM_Standalone) || (Level.NetMode == NM_ListenServer))\n      SpawnPlasmaEffects();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PostNetBeginPlay": {
                        "body": "{\n      SpawnPlasmaEffects();\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PostNetBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\tDamage = mpDamage;\n\tblastRadius = mpBlastRadius;\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "SpawnPlasmaEffects": {
                        "body": "{\n   rot = Rotation;\n\trot.Yaw -= 32768;\n\n   pGen2 = Spawn(class'ParticleGenerator', Self,, Location, rot);\n\tif (pGen2 != None)\n\t{\n      pGen2.RemoteRole = ROLE_None;\n\t\tpGen2.particleTexture = FireTexture'Effects.Laser.LaserSpot1';\n\t\tpGen2.particleDrawScale = 2.0;\n\t\tpGen2.checkTime = 0.04;\n\t\tpGen2.riseRate = 0.0;\n\t\tpGen2.ejectSpeed = 100.0;\n\t\tpGen2.particleLifeSpan = 4.0;\n\t\tpGen2.bRandomEject = True;\n\t\tpGen2.SetBase(Self);\n\t}\n   \n}",
                        "locals": [
                            "local Rotator rot;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "SpawnPlasmaEffects",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 93,
                "replication": "",
                "states": [],
                "variables": [
                    "var ParticleGenerator pGen1;",
                    "var ParticleGenerator pGen2;",
                    "var float mpDamage;",
                    "var float mpBlastRadius;"
                ]
            }
        },
        "LaserController.uc": {
            "body": "//=============================================================================\n// WeaponStealthPistol.\n//=============================================================================\nclass LaserController extends DeusExWeapon;\n\nvar bool bFailure;\n\nfunction ScopeToggle()\n{\nlocal LaserProj LP;\n\tforeach allactors(class'LaserProj', LP)\n\t{\n\t\t//LP.Arm();\n\t\tLP.SetTimer(1,False);\n\t}\n}\n\nfunction LaserToggle()\n{\nlocal LaserProj LP;\n\tforeach allactors(class'LaserProj', LP)\n\t{\n\t\tLP.DisArm();\n\t}\n}\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t\tReloadCount = mpReloadCount;\n\t}\n}\n\nfunction string GetName(DeusExPlayer P)\n{\n\t\treturn p.PlayerReplicationInfo.PlayerName;\n}\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\nfunction ProcessTraceHit(Actor Other, Vector HitLocation, Vector HitNormal, Vector X, Vector Y, Vector Z)\n{\n\tlocal LaserProj LP;\n\t\n\tif(LaserProj(Other) != None)\n\t{\n\t\tif(LaserProj(Other).bIsOn)\n\t\t{\n\t\t\tLaserProj(Other).Disarm();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t//LaserProj(Other).Arm();\n\t\t\tLaserProj(Other).SetTimer(1,False);\n\t\t}\n\t}\n}\n\nsimulated function float CalculateAccuracy()\n{\n\treturn 0.000000; //Dirty hack to always return dead on accuracy.\n}\n\nstate NormalFire //(Thanks to JimBowen for this Infinite ammo code) \n{ \n   Begin: \n      if ((ClipCount >= ReloadCount) && (ReloadCount != 0)) \n      { \n         if (!bAutomatic) \n         { \n            bFiring = False; \n            FinishAnim(); \n         } \n    \n         if (Owner != None) \n         { \n            if (Owner.IsA('DeusExPlayer')) \n            { \n               bFiring = False; \n            } \n            else if (Owner.IsA('ScriptedPawn')) \n            { \n               bFiring = False; \n               ReloadAmmo(); \n            } \n         } \n         else \n         { \n            if (bHasMuzzleFlash) \n               EraseMuzzleFlashTexture(); \n            GotoState('Idle'); \n         } \n      } \n      if ( bAutomatic && (( Level.NetMode == NM_DedicatedServer ) || ((Level.NetMode == NM_ListenServer) && Owner.IsA('DeusExPlayer') && !DeusExPlayer(Owner).PlayerIsListenClient()))) \n         GotoState('Idle'); \n    \n      Sleep(GetShotTime()); \n      if (bAutomatic) \n      { \n         GenerateBullet();       // In multiplayer bullets are generated by the client which will let the server know when \n         Goto('Begin'); \n      } \n      bFiring = False; \n      FinishAnim(); \n    \n   /*      // if ReloadCount is 0 and we're not hand to hand, then this is a \n      // single-use weapon so destroy it after firing once \n      if ((ReloadCount == 0) && !bHandToHand) \n      { \n         if (DeusExPlayer(Owner) != None) \n            DeusExPlayer(Owner).RemoveItemFromSlot(Self);   // remove it from the inventory grid \n         Destroy(); \n      } \n      */              // Do I REALLY need all that crap JUST for infinite ammo? \n      ReadyToFire(); \n   Done: \n      bFiring = False; \n      Finish(); \n}\n\ndefaultproperties\n{\n     GoverningSkill=Class'DeusEx.SkillWeaponPistol'\n     NoiseLevel=0.010000\n     ShotTime=0.150000\n     reloadTime=1.500000\n     HitDamage=0\n     maxRange=4800\n     AccurateRange=2400\n     BaseAccuracy=0.800000\n     bCanHaveScope=True\n     ScopeFOV=25\n     bCanHaveLaser=True\n     recoilStrength=0.100000\n     mpBaseAccuracy=0.200000\n     mpAccurateRange=1200\n     mpMaxRange=1200\n     bCanHaveModBaseAccuracy=True\n     bCanHaveModReloadCount=True\n     bCanHaveModAccurateRange=True\n     bCanHaveModReloadTime=True\n     bInstantHit=True\n     FireOffset=(X=-24.000000,Y=10.000000,Z=14.000000)\n     shakemag=50.000000\n     FireSound=Sound'DeusExSounds.Weapons.StealthPistolFire'\n     AltFireSound=Sound'DeusExSounds.Weapons.StealthPistolReloadEnd'\n     CockingSound=Sound'DeusExSounds.Weapons.StealthPistolReload'\n     SelectSound=Sound'DeusExSounds.Weapons.StealthPistolSelect'\n     InventoryGroup=61\n     ItemName=\"Laser Controller Gun\"\n     PlayerViewOffset=(X=24.000000,Y=-10.000000,Z=-14.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.StealthPistol'\n     PickupViewMesh=LodMesh'DeusExItems.StealthPistolPickup'\n     ThirdPersonMesh=LodMesh'DeusExItems.StealthPistol3rd'\n     Icon=Texture'DeusExUI.Icons.BeltIconStealthPistol'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconStealthPistol'\n     largeIconWidth=47\n     largeIconHeight=37\n     Description=\"The stealth pistol is a variant of the standard 10mm pistol with a larger clip and integrated silencer designed for wet work at very close ranges.\"\n     beltDescription=\"LASER\"\n     Mesh=LodMesh'DeusExItems.StealthPistolPickup'\n     CollisionRadius=8.000000\n     CollisionHeight=0.800000\n}\n",
            "name": "LaserController.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "GoverningSkill=Class'DeusEx.SkillWeaponPistol'",
                    "NoiseLevel=0.010000",
                    "ShotTime=0.150000",
                    "reloadTime=1.500000",
                    "HitDamage=0",
                    "maxRange=4800",
                    "AccurateRange=2400",
                    "BaseAccuracy=0.800000",
                    "bCanHaveScope=True",
                    "ScopeFOV=25",
                    "bCanHaveLaser=True",
                    "recoilStrength=0.100000",
                    "mpBaseAccuracy=0.200000",
                    "mpAccurateRange=1200",
                    "mpMaxRange=1200",
                    "bCanHaveModBaseAccuracy=True",
                    "bCanHaveModReloadCount=True",
                    "bCanHaveModAccurateRange=True",
                    "bCanHaveModReloadTime=True",
                    "bInstantHit=True",
                    "FireOffset=(X=-24.000000,Y=10.000000,Z=14.000000)",
                    "shakemag=50.000000",
                    "FireSound=Sound'DeusExSounds.Weapons.StealthPistolFire'",
                    "AltFireSound=Sound'DeusExSounds.Weapons.StealthPistolReloadEnd'",
                    "CockingSound=Sound'DeusExSounds.Weapons.StealthPistolReload'",
                    "SelectSound=Sound'DeusExSounds.Weapons.StealthPistolSelect'",
                    "InventoryGroup=61",
                    "ItemName=\"Laser Controller Gun\"",
                    "PlayerViewOffset=(X=24.000000,Y=-10.000000,Z=-14.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.StealthPistol'",
                    "PickupViewMesh=LodMesh'DeusExItems.StealthPistolPickup'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.StealthPistol3rd'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconStealthPistol'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconStealthPistol'",
                    "largeIconWidth=47",
                    "largeIconHeight=37",
                    "Description=\"The stealth pistol is a variant of the standard 10mm pistol with a larger clip and integrated silencer designed for wet work at very close ranges.\"",
                    "beltDescription=\"LASER\"",
                    "Mesh=LodMesh'DeusExItems.StealthPistolPickup'",
                    "CollisionRadius=8.000000",
                    "CollisionHeight=0.800000"
                ],
                "exec": [],
                "extends": "DeusExWeapon",
                "functions": {
                    "CalculateAccuracy": {
                        "body": "{\n\treturn 0.000000; //Dirty hack to always return dead on accuracy.\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "CalculateAccuracy",
                        "native": false,
                        "param": [],
                        "return": "float"
                    },
                    "GetName": {
                        "body": "{\n\t\treturn p.PlayerReplicationInfo.PlayerName;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetName",
                        "native": false,
                        "param": [
                            [
                                "DeusExPlayer",
                                "P"
                            ]
                        ],
                        "return": "string"
                    },
                    "LaserToggle": {
                        "body": "{\n\tforeach allactors(class'LaserProj', LP)\n\t{\n\t\tLP.DisArm();\n\t}\n}",
                        "locals": [
                            "local LaserProj LP;"
                        ],
                        "modifiers": [],
                        "name": "LaserToggle",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t\tReloadCount = mpReloadCount;\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ProcessTraceHit": {
                        "body": "{\n\t\n\tif(LaserProj(Other) != None)\n\t{\n\t\tif(LaserProj(Other).bIsOn)\n\t\t{\n\t\t\tLaserProj(Other).Disarm();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t//LaserProj(Other).Arm();\n\t\t\tLaserProj(Other).SetTimer(1,False);\n\t\t}\n\t}\n}",
                        "locals": [
                            "local LaserProj LP;"
                        ],
                        "modifiers": [],
                        "name": "ProcessTraceHit",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Other"
                            ],
                            [
                                "Vector",
                                "HitLocation"
                            ],
                            [
                                "Vector",
                                "HitNormal"
                            ],
                            [
                                "Vector",
                                "X"
                            ],
                            [
                                "Vector",
                                "Y"
                            ],
                            [
                                "Vector",
                                "Z"
                            ]
                        ],
                        "return": ""
                    },
                    "ScopeToggle": {
                        "body": "{\n\tforeach allactors(class'LaserProj', LP)\n\t{\n\t\t//LP.Arm();\n\t\tLP.SetTimer(1,False);\n\t}\n}",
                        "locals": [
                            "local LaserProj LP;"
                        ],
                        "modifiers": [],
                        "name": "ScopeToggle",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 177,
                "replication": "",
                "states": [],
                "variables": [
                    "var bool bFailure;"
                ]
            }
        },
        "LaserProj.uc": {
            "body": "class LaserProj extends ThrownProjectile;\n\nvar() bool bIsOn;\n\nfunction Arm(){}\nfunction Disarm(){}\n\ndefaultproperties\n{\n     DrawScale=1.300000\n}\n",
            "name": "LaserProj.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "DrawScale=1.300000"
                ],
                "exec": [],
                "extends": "ThrownProjectile",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 12,
                "replication": "",
                "states": [],
                "variables": [
                    "var() bool bIsOn;"
                ]
            }
        },
        "LightBall.uc": {
            "body": "//=============================================================================\n// LightBall\n//=============================================================================\nclass LightBall expands GraySpit;\n\nvar float TotalTime;\n\nvar() float TimeLimit;\t\t\t//until when should I spawn?\n\nfunction Tick(float deltaTime)\n{\n\tlocal PlayerPawn Player;\n\n\tTotalTime+=deltaTime;\n\n\tif (TotalTime > TimeLimit)\n\t{\n\t\tSelf.Destroy();\n\t}\t\n}\n\ndefaultproperties\n{\n     TimeLimit=0.500000\n     Damage=0.000000\n     SpawnSound=None\n     DrawType=DT_Sprite\n     Texture=Texture'DeusExDeco.Skins.AlarmLightTex4'\n     Mesh=None\n}\n",
            "name": "LightBall.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "TimeLimit=0.500000",
                    "Damage=0.000000",
                    "SpawnSound=None",
                    "DrawType=DT_Sprite",
                    "Texture=Texture'DeusExDeco.Skins.AlarmLightTex4'",
                    "Mesh=None"
                ],
                "exec": [],
                "extends": "GraySpit",
                "functions": {
                    "Tick": {
                        "body": "{\n\n\tTotalTime+=deltaTime;\n\n\tif (TotalTime > TimeLimit)\n\t{\n\t\tSelf.Destroy();\n\t}\t\n}",
                        "locals": [
                            "local PlayerPawn Player;"
                        ],
                        "modifiers": [],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltaTime"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 31,
                "replication": "",
                "states": [],
                "variables": [
                    "var float TotalTime;",
                    "var() float TimeLimit;\t\t\t//until when should I spawn?"
                ]
            }
        },
        "Lightshow.uc": {
            "body": "class Lightshow expands ThrownProjectile;\n\nsimulated function SpawnEffects(Vector HitLocation, Vector HitNormal, Actor Other)\n{\n}\n\nstate Exploding\n{\n\tignores ProcessTouch, HitWall, Explode;\n\n   function DamageRing()\n   {\n\t\tlocal Pawn apawn;\n\t\tlocal float damageRadius;\n\t\tlocal Vector dist;\n\t\tlocal ProjectileGenerator Projy;\n\t\n\t\t\tprojy = Spawn(class'ProjectileGenerator',,,Self.Location);\n\t\t\tprojy.Lifespan=1.5;\n\t\t\tprojy.EjectSpeed=250;\n\t\t\tprojy.bRandomEject = True;\n\t\t\tprojy.ProjectileClass=class'DartLight';\n\t\t\tprojy.NumPerSpawn=3;\n\t\t\t\n\t\tif ( Level.NetMode != NM_Standalone )\n\t\t{\n\t\t\tdamageRadius = (blastRadius / gradualHurtSteps) * gradualHurtCounter;\n\n\t\t\tfor ( apawn = Level.PawnList; apawn != None; apawn = apawn.nextPawn )\n\t\t\t{\n\t\t\t\tif ( apawn.IsA('DeusExPlayer') )\n\t\t\t\t{\n\t\t\t\t\tdist = apawn.Location - Location;\n\t\t\t\t\tif ( VSize(dist) < damageRadius )\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( gradualHurtCounter <= 2 )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif ( apawn.FastTrace( apawn.Location, Location ))\n\t\t\t\t\t\t\t\tDeusExPlayer(apawn).myProjKiller = Self;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tDeusExPlayer(apawn).myProjKiller = Self;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n      //DEUS_EX AMSD Ignore Line of Sight on the lowest radius check, only in multiplayer\n\t\tHurtRadius\n\t\t(\n\t\t\t(2 * Damage) / gradualHurtSteps,\n\t\t\t(blastRadius / gradualHurtSteps) * gradualHurtCounter,\n\t\t\tdamageType,\n\t\t\tMomentumTransfer / gradualHurtSteps,\n\t\t\tLocation,\n         ((gradualHurtCounter <= 2) && (Level.NetMode != NM_Standalone))\n\t\t);\n   }\n\n\tfunction Timer()\n\t{\n\t\tgradualHurtCounter++;\n      DamageRing();\n\t\tif (gradualHurtCounter >= gradualHurtSteps)\n\t\t\tDestroy();\n\t}\n\nBegin:\n\t// stagger the HurtRadius outward using Timer()\n\t// do five separate blast rings increasing in size\n\tgradualHurtCounter = 1;\n\tgradualHurtSteps = 5;\n\tVelocity = vect(0,0,0);\n\tbHidden = True;\n\tLightType = LT_None;\n\tSetCollision(False, False, False);\n   DamageRing();\n\tSetTimer(0.25/float(gradualHurtSteps), True);\n}\n\ndefaultproperties\n{\n     fuseLength=1.000000\n     proxRadius=128.000000\n     spawnWeaponClass=Class'PartyStuff.WeaponLightshow'\n     spawnAmmoClass=Class'PartyStuff.AmmoLS'\n     ItemName=\"Lightshow\"\n     speed=1500.000000\n     ImpactSound=Sound'DeusExSounds.Generic.SmallExplosion2'\n     Mesh=LodMesh'DeusExItems.EMPGrenadePickup'\n}\n",
            "name": "Lightshow.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "fuseLength=1.000000",
                    "proxRadius=128.000000",
                    "spawnWeaponClass=Class'PartyStuff.WeaponLightshow'",
                    "spawnAmmoClass=Class'PartyStuff.AmmoLS'",
                    "ItemName=\"Lightshow\"",
                    "speed=1500.000000",
                    "ImpactSound=Sound'DeusExSounds.Generic.SmallExplosion2'",
                    "Mesh=LodMesh'DeusExItems.EMPGrenadePickup'"
                ],
                "exec": [],
                "extends": "ThrownProjectile",
                "functions": {
                    "DamageRing": {
                        "body": "{\n\t\n\t\t\tprojy = Spawn(class'ProjectileGenerator',,,Self.Location);\n\t\t\tprojy.Lifespan=1.5;\n\t\t\tprojy.EjectSpeed=250;\n\t\t\tprojy.bRandomEject = True;\n\t\t\tprojy.ProjectileClass=class'DartLight';\n\t\t\tprojy.NumPerSpawn=3;\n\t\t\t\n\t\tif ( Level.NetMode != NM_Standalone )\n\t\t{\n\t\t\tdamageRadius = (blastRadius / gradualHurtSteps) * gradualHurtCounter;\n\n\t\t\tfor ( apawn = Level.PawnList; apawn != None; apawn = apawn.nextPawn )\n\t\t\t{\n\t\t\t\tif ( apawn.IsA('DeusExPlayer') )\n\t\t\t\t{\n\t\t\t\t\tdist = apawn.Location - Location;\n\t\t\t\t\tif ( VSize(dist) < damageRadius )\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( gradualHurtCounter <= 2 )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif ( apawn.FastTrace( apawn.Location, Location ))\n\t\t\t\t\t\t\t\tDeusExPlayer(apawn).myProjKiller = Self;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tDeusExPlayer(apawn).myProjKiller = Self;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n      //DEUS_EX AMSD Ignore Line of Sight on the lowest radius check, only in multiplayer\n\t\tHurtRadius\n\t\t(\n\t\t\t(2 * Damage) / gradualHurtSteps,\n\t\t\t(blastRadius / gradualHurtSteps) * gradualHurtCounter,\n\t\t\tdamageType,\n\t\t\tMomentumTransfer / gradualHurtSteps,\n\t\t\tLocation,\n         ((gradualHurtCounter <= 2) && (Level.NetMode != NM_Standalone))\n\t\t);\n   }",
                        "locals": [
                            "local Pawn apawn;",
                            "local float damageRadius;",
                            "local Vector dist;",
                            "local ProjectileGenerator Projy;"
                        ],
                        "modifiers": [],
                        "name": "DamageRing",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "SpawnEffects": {
                        "body": "{\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "SpawnEffects",
                        "native": false,
                        "param": [
                            [
                                "Vector",
                                "HitLocation"
                            ],
                            [
                                "Vector",
                                "HitNormal"
                            ],
                            [
                                "Actor",
                                "Other"
                            ]
                        ],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\t\tgradualHurtCounter++;\n      DamageRing();\n\t\tif (gradualHurtCounter >= gradualHurtSteps)\n\t\t\tDestroy();\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 91,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "Lumination.uc": {
            "body": "//=============================================================================\n// It's a tarp.\n//=============================================================================\nclass Lumination extends ChargedPickup;\n\nfunction ChargedPickupBegin(DeusExPlayer Player)\n{\n  local Luminous lum;\n   local Vector loc,X,Y,Z, v2;\n   \n\tlum = Spawn(class'Luminous', Player,, Location,);\n\tif (lum != None)\n\t{\n\t\tv2 = Player.Location;\n\t\tv2.Z += player.collisionHeight + 50;\n\t\tlum.SetLocation(v2);\n\t\tlum.LumOwner = Player;\n\t\tlum.Lifespan = 120;\n\t\t//lum.SetBase(Self);\n\t}\n\tSuper.ChargedPickupBegin(Player);\n\t\n}\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) || (BeltSpot == 0) );\n}\n\nfunction UsedUp()\n{\n\tlocal DeusExPlayer Player;\n\n\tif ( Pawn(Owner) != None )\n\t{\n\t\tbActivatable = false;\n\t\t\n\t}\n\tPlayer = DeusExPlayer(Owner);\n\n\tif (Player != None)\n\t{\n\t\tif (Player.inHand == Self)\n\t\t\tChargedPickupEnd(Player);\n\t}\n\n\tDestroy();\n}\n\ndefaultproperties\n{\n     ActivateSound=Sound'DeusExSounds.Augmentation.CloakUp'\n     DeActivateSound=None\n     ChargeRemainingLabel=\"Lum readiness:\"\n     ItemName=\"Temporary Lumination Spawner\"\n     PlayerViewOffset=(X=20.000000,Z=-12.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.VialAmbrosia'\n     PickupViewMesh=LodMesh'DeusExItems.VialAmbrosia'\n     ThirdPersonMesh=LodMesh'DeusExItems.VialAmbrosia'\n     Charge=8\n     LandSound=Sound'DeusExSounds.Generic.GlassHit1'\n     Icon=Texture'DeusExUI.Icons.BeltIconVialAmbrosia'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconVialAmbrosia'\n     largeIconWidth=35\n     largeIconHeight=49\n     Description=\"s\"\n     beltDescription=\"LUM\"\n     Mesh=LodMesh'DeusExItems.VialAmbrosia'\n     CollisionRadius=2.200000\n     CollisionHeight=4.890000\n     Mass=10.000000\n     Buoyancy=100.000000\n}\n",
            "name": "Lumination.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "ActivateSound=Sound'DeusExSounds.Augmentation.CloakUp'",
                    "DeActivateSound=None",
                    "ChargeRemainingLabel=\"Lum readiness:\"",
                    "ItemName=\"Temporary Lumination Spawner\"",
                    "PlayerViewOffset=(X=20.000000,Z=-12.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.VialAmbrosia'",
                    "PickupViewMesh=LodMesh'DeusExItems.VialAmbrosia'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.VialAmbrosia'",
                    "Charge=8",
                    "LandSound=Sound'DeusExSounds.Generic.GlassHit1'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconVialAmbrosia'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconVialAmbrosia'",
                    "largeIconWidth=35",
                    "largeIconHeight=49",
                    "Description=\"s\"",
                    "beltDescription=\"LUM\"",
                    "Mesh=LodMesh'DeusExItems.VialAmbrosia'",
                    "CollisionRadius=2.200000",
                    "CollisionHeight=4.890000",
                    "Mass=10.000000",
                    "Buoyancy=100.000000"
                ],
                "exec": [],
                "extends": "ChargedPickup",
                "functions": {
                    "ChargedPickupBegin": {
                        "body": "{\n   \n\tlum = Spawn(class'Luminous', Player,, Location,);\n\tif (lum != None)\n\t{\n\t\tv2 = Player.Location;\n\t\tv2.Z += player.collisionHeight + 50;\n\t\tlum.SetLocation(v2);\n\t\tlum.LumOwner = Player;\n\t\tlum.Lifespan = 120;\n\t\t//lum.SetBase(Self);\n\t}\n\tSuper.ChargedPickupBegin(Player);\n\t\n}",
                        "locals": [
                            "local Luminous lum;",
                            "local Vector loc,X,Y,Z, v2;"
                        ],
                        "modifiers": [],
                        "name": "ChargedPickupBegin",
                        "native": false,
                        "param": [
                            [
                                "DeusExPlayer",
                                "Player"
                            ]
                        ],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) || (BeltSpot == 0) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    },
                    "UsedUp": {
                        "body": "{\n\n\tif ( Pawn(Owner) != None )\n\t{\n\t\tbActivatable = false;\n\t\t\n\t}\n\tPlayer = DeusExPlayer(Owner);\n\n\tif (Player != None)\n\t{\n\t\tif (Player.inHand == Self)\n\t\t\tChargedPickupEnd(Player);\n\t}\n\n\tDestroy();\n}",
                        "locals": [
                            "local DeusExPlayer Player;"
                        ],
                        "modifiers": [],
                        "name": "UsedUp",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 74,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "Luminous.uc": {
            "body": "//=============================================\n// RestPoint\n//=============================================\nClass Luminous extends DeusExDecoration;\n\nvar Pawn LumOwner;\nvar int lLifespan;\n\nfunction Tick(float deltatime)\n{\n\tlocal vector v2;\n\t\n\tif (lumOwner != None)\n\t{\n\t\tif(lumOwner.Health <= 0)\n\t\t\tExplodeLum();\n\t\tv2 = lumOwner.Location;\n\t\tv2.Z += LumOwner.collisionHeight + 50;\n\t\tSetLocation(v2);\n\t}\n\telse\n\tExplodeLum();\n}\n\nfunction ExplodeLum()\n{\n\tlocal SphereEffect sphere;\n\tlocal ScorchMark s;\n\tlocal ExplosionLight light;\n\tlocal int i;\n\tlocal float explosionDamage;\n\tlocal float explosionRadius;\n\n\texplosionDamage = 100;\n\texplosionRadius = 256;\n\n\t// alert NPCs that I'm exploding\n\tAISendEvent('LoudNoise', EAITYPE_Audio, , explosionRadius*16);\n\tPlaySound(Sound'LargeExplosion1', SLOT_None,,, explosionRadius*16);\n\n\t// draw a pretty explosion\n\tlight = Spawn(class'ExplosionLight',,, Location);\n\tif (light != None)\n\t\tlight.size = 4;\n\n\tSpawn(class'ExplosionSmall',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionLarge',,, Location + 2*VRand()*CollisionRadius);\n\n\tsphere = Spawn(class'SphereEffect',,, Location);\n\tif (sphere != None)\n\t\tsphere.size = explosionRadius / 32.0;\n\n\t// spawn a mark\n\ts = spawn(class'ScorchMark', Base,, Location-vect(0,0,1)*CollisionHeight, Rotation+rot(16384,0,0));\n\tif (s != None)\n\t{\n\t\ts.DrawScale = FClamp(explosionDamage/30, 0.1, 3.0);\n\t\ts.ReattachDecal();\n\t}\n\n\t// spawn some rocks and flesh fragments\n\tfor (i=0; i<explosionDamage/6; i++)\n\t{\n\t\tif (FRand() < 0.3)\n\t\t\tspawn(class'Rockchip',,,Location);\n\t\telse\n\t\t\tspawn(class'FleshFragment',,,Location);\n\t}\n\n\tHurtRadius(explosionDamage, explosionRadius, 'Exploded', explosionDamage*100, Location);\n\tDestroy();\n}\n\ndefaultproperties\n{\n     bInvincible=True\n     bHighlight=False\n     ItemName=\"Lumination Point\"\n     bPushable=False\n     Physics=PHYS_None\n     DrawType=DT_Sprite\n     Style=STY_Translucent\n     Texture=Texture'DeusExDeco.Skins.AlarmLightTex6'\n     Skin=Texture'DeusExDeco.Skins.AlarmLightTex6'\n     DrawScale=1.500000\n     AmbientGlow=255\n     CollisionRadius=45.200001\n     CollisionHeight=32.000000\n     bBlockPlayers=False\n     LightType=LT_Steady\n     LightBrightness=124\n     LightSaturation=255\n     LightRadius=40\n}\n",
            "name": "Luminous.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bInvincible=True",
                    "bHighlight=False",
                    "ItemName=\"Lumination Point\"",
                    "bPushable=False",
                    "Physics=PHYS_None",
                    "DrawType=DT_Sprite",
                    "Style=STY_Translucent",
                    "Texture=Texture'DeusExDeco.Skins.AlarmLightTex6'",
                    "Skin=Texture'DeusExDeco.Skins.AlarmLightTex6'",
                    "DrawScale=1.500000",
                    "AmbientGlow=255",
                    "CollisionRadius=45.200001",
                    "CollisionHeight=32.000000",
                    "bBlockPlayers=False",
                    "LightType=LT_Steady",
                    "LightBrightness=124",
                    "LightSaturation=255",
                    "LightRadius=40"
                ],
                "exec": [],
                "extends": "DeusExDecoration",
                "functions": {
                    "ExplodeLum": {
                        "body": "{\n\n\texplosionDamage = 100;\n\texplosionRadius = 256;\n\n\t// alert NPCs that I'm exploding\n\tAISendEvent('LoudNoise', EAITYPE_Audio, , explosionRadius*16);\n\tPlaySound(Sound'LargeExplosion1', SLOT_None,,, explosionRadius*16);\n\n\t// draw a pretty explosion\n\tlight = Spawn(class'ExplosionLight',,, Location);\n\tif (light != None)\n\t\tlight.size = 4;\n\n\tSpawn(class'ExplosionSmall',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionLarge',,, Location + 2*VRand()*CollisionRadius);\n\n\tsphere = Spawn(class'SphereEffect',,, Location);\n\tif (sphere != None)\n\t\tsphere.size = explosionRadius / 32.0;\n\n\t// spawn a mark\n\ts = spawn(class'ScorchMark', Base,, Location-vect(0,0,1)*CollisionHeight, Rotation+rot(16384,0,0));\n\tif (s != None)\n\t{\n\t\ts.DrawScale = FClamp(explosionDamage/30, 0.1, 3.0);\n\t\ts.ReattachDecal();\n\t}\n\n\t// spawn some rocks and flesh fragments\n\tfor (i=0; i<explosionDamage/6; i++)\n\t{\n\t\tif (FRand() < 0.3)\n\t\t\tspawn(class'Rockchip',,,Location);\n\t\telse\n\t\t\tspawn(class'FleshFragment',,,Location);\n\t}\n\n\tHurtRadius(explosionDamage, explosionRadius, 'Exploded', explosionDamage*100, Location);\n\tDestroy();\n}",
                        "locals": [
                            "local SphereEffect sphere;",
                            "local ScorchMark s;",
                            "local ExplosionLight light;",
                            "local int i;",
                            "local float explosionDamage;",
                            "local float explosionRadius;"
                        ],
                        "modifiers": [],
                        "name": "ExplodeLum",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Tick": {
                        "body": "{\n\t\n\tif (lumOwner != None)\n\t{\n\t\tif(lumOwner.Health <= 0)\n\t\t\tExplodeLum();\n\t\tv2 = lumOwner.Location;\n\t\tv2.Z += LumOwner.collisionHeight + 50;\n\t\tSetLocation(v2);\n\t}\n\telse\n\tExplodeLum();\n}",
                        "locals": [
                            "local vector v2;"
                        ],
                        "modifiers": [],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltatime"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 97,
                "replication": "",
                "states": [],
                "variables": [
                    "var Pawn LumOwner;",
                    "var int lLifespan;"
                ]
            }
        },
        "MM.uc": {
            "body": "//=============================================================================\n// Medical Marijuana \n//=============================================================================\nclass MM extends DeusExPickup;\n#exec obj load file=..\\Textures\\CoreTexPaper.utx package=CoreTexPaper\nvar int rechargeAmount;\nvar int mpRechargeAmount;\n\nvar localized String msgRecharged;\nvar localized String RechargesLabel;\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t\tMaxCopies = 20;\n}\n\nfunction PostBeginPlay()\n{\n   Super.PostBeginPlay();\n   if (Level.NetMode != NM_Standalone)\n      rechargeAmount = mpRechargeAmount;\n}\n\nstate Activated\n{\n\tfunction Activate()\n\t{\n\t\t// can't turn it off\n\t}\n\n\tfunction BeginState()\n\t{\n\t\tlocal DeusExPlayer player;\n\t\tlocal vector loc;\n\t\tlocal rotator rot;\n\t\tlocal SmokeTrail puff;\n\t\tSuper.BeginState();\n\n\t\tplayer = DeusExPlayer(Owner);\n\t\tif (player != None)\n\t\t{\n\t\t\tplayer.ClientMessage(Sprintf(msgRecharged, rechargeAmount));\n\t\n\t\t\tplayer.PlaySound(sound'MaleBurp', SLOT_None,,, 256);\n\n\t\t\tplayer.Energy += rechargeAmount;\n\t\t\tif (player.Energy > player.EnergyMax)\n\t\t\t\tplayer.Energy = player.EnergyMax;\n\t\t\t\tplayer.HealPlayer(15, False);\n\t\t\t\t\n\t\t\tloc = Owner.Location;\n\t\t\trot = Owner.Rotation;\n\t\t\tloc += 2.0 * Owner.CollisionRadius * vector(Player.ViewRotation);\n\t\t\tloc.Z += Owner.CollisionHeight * 0.9;\n\t\t\tpuff = Spawn(class'SmokeTrail', Owner,, loc, rot);\n\t\t\tif (puff != None)\n\t\t\t{\n\t\t\t\tpuff.DrawScale = 1.0;\n\t\t\t\tpuff.origScale = puff.DrawScale;\n\t\t\t}\n\t\t\tPlaySound(sound'MaleCough');\n\t\t}\n\n\t\tUseOnce();\n\t}\nBegin:\n}\n\ndefaultproperties\n{\n     rechargeAmount=5\n     mpRechargeAmount=10\n     msgRecharged=\"Recharged %d points\"\n     RechargesLabel=\"Recharges %d Energy Units\"\n     maxCopies=20\n     bCanHaveMultipleCopies=True\n     bActivatable=True\n     ItemName=\"Medical Marijuana\"\n     PlayerViewOffset=(X=30.000000,Z=-12.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.Flare'\n     PickupViewMesh=LodMesh'DeusExItems.Flare'\n     ThirdPersonMesh=LodMesh'DeusExItems.Flare'\n     Icon=Texture'DeusExUI.Icons.BeltIconFlare'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconFlare'\n     largeIconWidth=24\n     largeIconHeight=38\n     Description=\"a spliff m7\"\n     beltDescription=\"MARIJUANA\"\n     Texture=Texture'CoreTexPaper.Paper.ClenWhitPaint_A'\n     Skin=Texture'CoreTexPaper.Paper.ClenWhitPaint_A'\n     Mesh=LodMesh'DeusExItems.Flare'\n     MultiSkins(0)=Texture'CoreTexPaper.Paper.ClenWhitPaint_A'\n     CollisionRadius=6.200000\n     CollisionHeight=1.200000\n     Mass=5.000000\n     Buoyancy=4.000000\n}\n",
            "name": "MM.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "rechargeAmount=5",
                    "mpRechargeAmount=10",
                    "msgRecharged=\"Recharged %d points\"",
                    "RechargesLabel=\"Recharges %d Energy Units\"",
                    "maxCopies=20",
                    "bCanHaveMultipleCopies=True",
                    "bActivatable=True",
                    "ItemName=\"Medical Marijuana\"",
                    "PlayerViewOffset=(X=30.000000,Z=-12.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.Flare'",
                    "PickupViewMesh=LodMesh'DeusExItems.Flare'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.Flare'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconFlare'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconFlare'",
                    "largeIconWidth=24",
                    "largeIconHeight=38",
                    "Description=\"a spliff m7\"",
                    "beltDescription=\"MARIJUANA\"",
                    "Texture=Texture'CoreTexPaper.Paper.ClenWhitPaint_A'",
                    "Skin=Texture'CoreTexPaper.Paper.ClenWhitPaint_A'",
                    "Mesh=LodMesh'DeusExItems.Flare'",
                    "MultiSkins(0)=Texture'CoreTexPaper.Paper.ClenWhitPaint_A'",
                    "CollisionRadius=6.200000",
                    "CollisionHeight=1.200000",
                    "Mass=5.000000",
                    "Buoyancy=4.000000"
                ],
                "exec": [
                    "#exec obj load file=..\\Textures\\CoreTexPaper.utx package=CoreTexPaper"
                ],
                "extends": "DeusExPickup",
                "functions": {
                    "Activate": {
                        "body": "{\n\t\t// can't turn it off\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Activate",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "BeginState": {
                        "body": "{\n\t\tSuper.BeginState();\n\n\t\tplayer = DeusExPlayer(Owner);\n\t\tif (player != None)\n\t\t{\n\t\t\tplayer.ClientMessage(Sprintf(msgRecharged, rechargeAmount));\n\t\n\t\t\tplayer.PlaySound(sound'MaleBurp', SLOT_None,,, 256);\n\n\t\t\tplayer.Energy += rechargeAmount;\n\t\t\tif (player.Energy > player.EnergyMax)\n\t\t\t\tplayer.Energy = player.EnergyMax;\n\t\t\t\tplayer.HealPlayer(15, False);\n\t\t\t\t\n\t\t\tloc = Owner.Location;\n\t\t\trot = Owner.Rotation;\n\t\t\tloc += 2.0 * Owner.CollisionRadius * vector(Player.ViewRotation);\n\t\t\tloc.Z += Owner.CollisionHeight * 0.9;\n\t\t\tpuff = Spawn(class'SmokeTrail', Owner,, loc, rot);\n\t\t\tif (puff != None)\n\t\t\t{\n\t\t\t\tpuff.DrawScale = 1.0;\n\t\t\t\tpuff.origScale = puff.DrawScale;\n\t\t\t}\n\t\t\tPlaySound(sound'MaleCough');\n\t\t}\n\n\t\tUseOnce();\n\t}",
                        "locals": [
                            "local DeusExPlayer player;",
                            "local vector loc;",
                            "local rotator rot;",
                            "local SmokeTrail puff;"
                        ],
                        "modifiers": [],
                        "name": "BeginState",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PostBeginPlay": {
                        "body": "{\n   Super.PostBeginPlay();\n   if (Level.NetMode != NM_Standalone)\n      rechargeAmount = mpRechargeAmount;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t\tMaxCopies = 20;\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 107,
                "replication": "",
                "states": [],
                "variables": [
                    "var int rechargeAmount;",
                    "var int mpRechargeAmount;",
                    "var localized String msgRecharged;",
                    "var localized String RechargesLabel;"
                ]
            }
        },
        "MPCarcass.uc": {
            "body": "class MPCarcass extends DeusExCarcass;\n\nfunction InitFor(Actor Other)\n{\n\tif (Other != None)\n\t{\n\t\t// set as unconscious or add the pawns name to the description\n\t\tif (!bAnimalCarcass)\n\t\t{\n\t\t\tif (bNotDead)\n\t\t\t\titemName = msgNotDead;\n\t\t\telse if (Other.IsA('ScriptedPawn'))\n\t\t\t\titemName = itemName $ \" (\" $ ScriptedPawn(Other).FamiliarName $ \")\";\n\t\t}\n\n\t\tMass           = Other.Mass;\n\t\tBuoyancy       = Mass * 1.2;\n\t\tMaxDamage      = 0.8*Mass;\n\t\tif (ScriptedPawn(Other) != None)\n\t\t\tif (ScriptedPawn(Other).bBurnedToDeath)\n\t\t\t\tCumulativeDamage = MaxDamage-1;\n\n\t\tSetScaleGlow();\n\n\t\t// Will this carcass spawn flies?\n\t\tif (bAnimalCarcass)\n\t\t{\n\t\t\titemName = msgAnimalCarcass;\n\t\t\tif (FRand() < 0.2)\n\t\t\t\tbGenerateFlies = true;\n\t\t}\n\t\telse if (!Other.IsA('Robot') && !bNotDead)\n\t\t{\n\t\t\tif (FRand() < 0.1)\n\t\t\t\tbGenerateFlies = true;\n\t\t\tbEmitCarcass = true;\n\t\t}\n\n\t\tif (Other.AnimSequence == 'DeathFront')\n\t\t\tMesh = Mesh2;\n\n\t\t// set the instigator and tag information\n\t\tif (Other.Instigator != None)\n\t\t{\n\t\t\tKillerBindName = Other.Instigator.BindName;\n\t\t\tKillerAlliance = Other.Instigator.Alliance;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tKillerBindName = Other.BindName;\n\t\t\tKillerAlliance = '';\n\t\t}\n\t\tTag = Other.Tag;\n\t\tAlliance = Pawn(Other).Alliance;\n\t\tCarcassName = Other.Name;\n\t}\n}\n\nfunction PostBeginPlay()\n{\n\tlocal int i, j;\n\tlocal Inventory inv;\n\n\tbCollideWorld = true;\n\n\t// Use the carcass name by default\n\tCarcassName = Name;\n\n\t// Add initial inventory items\n\tfor (i=0; i<8; i++)\n\t{\n\t\tif ((InitialInventory[i].inventory != None) && (InitialInventory[i].count > 0))\n\t\t{\n\t\t\tfor (j=0; j<InitialInventory[i].count; j++)\n\t\t\t{\n\t\t\t\tinv = spawn(InitialInventory[i].inventory, self);\n\t\t\t\tif (inv != None)\n\t\t\t\t{\n\t\t\t\t\tinv.bHidden = True;\n\t\t\t\t\tinv.SetPhysics(PHYS_None);\n\t\t\t\t\tAddInventory(inv);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// use the correct mesh\n\tif (Region.Zone.bWaterZone)\n\t{\n\t\tMesh = Mesh3;\n\t\tbNotDead = False;\t\t// you will die in water every time\n\t}\n\n\tif (bAnimalCarcass)\n\t\titemName = msgAnimalCarcass;\n\n\tMaxDamage = 0.8*Mass;\n\tSetScaleGlow();\n\n\tSetTimer(30.0, False);\n\n\tSuper.PostBeginPlay();\n}\n\nfunction ZoneChange(ZoneInfo NewZone)\n{\n\tSuper.ZoneChange(NewZone);\n\n\t// use the correct mesh for water\n\tif (NewZone.bWaterZone)\n\t\tMesh = Mesh3;\n}\n\nfunction Destroyed()\n{\n\tif (flyGen != None)\n\t{\n\t\tflyGen.StopGenerator();\n\t\tflyGen = None;\n\t}\n\n\tSuper.Destroyed();\n}\n\nfunction Tick(float deltaSeconds)\n{\n\tif (!bInit)\n\t{\n\t\tbInit = true;\n\t\tif (bEmitCarcass)\n\t\t\tAIStartEvent('Carcass', EAITYPE_Visual);\n\t}\n\tSuper.Tick(deltaSeconds);\n}\n\nfunction Timer()\n{\n\tif (bGenerateFlies)\n\t{\n\t\tflyGen = Spawn(Class'FlyGenerator', , , Location, Rotation);\n\t\tif (flyGen != None)\n\t\t\tflyGen.SetBase(self);\n\t}\n}\n\nfunction ChunkUp(int Damage)\n{\n\tlocal int i;\n\tlocal float size;\n\tlocal Vector loc;\n\tlocal FleshFragment chunk;\n\n\t// gib the carcass\n\tsize = (CollisionRadius + CollisionHeight) / 2;\n\tif (size > 10.0)\n\t{\n\t\tfor (i=0; i<size/4.0; i++)\n\t\t{\n\t\t\tloc.X = (1-2*FRand()) * CollisionRadius;\n\t\t\tloc.Y = (1-2*FRand()) * CollisionRadius;\n\t\t\tloc.Z = (1-2*FRand()) * CollisionHeight;\n\t\t\tloc += Location;\n\t\t\tchunk = spawn(class'FleshFragment', None,, loc);\n\t\t\tif (chunk != None)\n\t\t\t{\n\t\t\t\tchunk.DrawScale = size / 25;\n\t\t\t\tchunk.SetCollisionSize(chunk.CollisionRadius / chunk.DrawScale, chunk.CollisionHeight / chunk.DrawScale);\n\t\t\t\tchunk.bFixedRotationDir = True;\n\t\t\t\tchunk.RotationRate = RotRand(False);\n\t\t\t}\n\t\t}\n\t}\n\n\tSuper.ChunkUp(Damage);\n}\n\nfunction TakeDamage(int Damage, Pawn instigatedBy, Vector hitLocation, Vector momentum, name damageType)\n{\n\tlocal int i;\n\n\tif (bInvincible)\n\t\treturn;\n\n\t// only take \"gib\" damage from these damage types\n\tif ((damageType == 'Shot') || (damageType == 'Sabot') || (damageType == 'Exploded') || (damageType == 'Munch') ||\n\t    (damageType == 'Tantalus'))\n\t{\n\t\tif ((damageType != 'Munch') && (damageType != 'Tantalus'))\n\t\t{\n         if ((DeusExMPGame(Level.Game) != None) && (!DeusExMPGame(Level.Game).bSpawnEffects))\n         {\n         }\n         else\n         {\n            spawn(class'BloodSpurt',,,HitLocation);\n            spawn(class'BloodDrop',,, HitLocation);\n            for (i=0; i<Damage; i+=10)\n               spawn(class'BloodDrop',,, HitLocation);\n         }\n\t\t}\n\n\t\t// this section copied from Carcass::TakeDamage() and modified a little\n\t\tif (!bDecorative)\n\t\t{\n\t\t\tbBobbing = false;\n\t\t\tSetPhysics(PHYS_Falling);\n\t\t}\n\t\tif ((Physics == PHYS_None) && (Momentum.Z < 0))\n\t\t\tMomentum.Z *= -1;\n\t\tVelocity += 3 * momentum/(Mass + 200);\n\t\tif (DamageType == 'Shot')\n\t\t\tDamage *= 0.4;\n\t\tCumulativeDamage += Damage;\n\t\tif (CumulativeDamage >= MaxDamage)\n\t\t\tChunkUp(Damage);\n\t\tif (bDecorative)\n\t\t\tVelocity = vect(0,0,0);\n\t}\n\n\tSetScaleGlow();\n}\n\nfunction SetScaleGlow()\n{\n\tlocal float pct;\n\n\t// scaleglow based on damage\n\tpct = FClamp(1.0-float(CumulativeDamage)/MaxDamage, 0.1, 1.0);\n\tScaleGlow = pct;\n}\n\n//Todo - dont delete when frobbed\nfunction Frob(Actor Frobber, Inventory frobWith)\n{\n\tlocal Inventory item, nextItem, startItem;\n\tlocal Pawn P;\n\tlocal DeusExWeapon W;\n\tlocal bool bFoundSomething;\n\tlocal DeusExPlayer player;\n\tlocal ammo AmmoType;\n\tlocal bool bPickedItemUp;\n\tlocal POVCorpse corpse;\n\tlocal DeusExPickup invItem;\n\tlocal int itemCount;\n\n//log(\"DeusExCarcass::Frob()--------------------------------\");\n\n\t// Can we assume only the *PLAYER* would actually be frobbing carci?\n\tplayer = DeusExPlayer(Frobber);\n\n\t// No doublefrobbing in multiplayer.\n\tif (bQueuedDestroy)\n\t\treturn;\n\n\t// if we've already been searched, let the player pick us up\n\t// don't pick up animal carcii\n\tif (!bAnimalCarcass)\n\t{\n      // DEUS_EX AMSD Since we don't have animations for carrying corpses, and since it has no real use in multiplayer,\n      // and since the PutInHand propagation doesn't just work, this is work we don't need to do.\n      // Were you to do it, you'd need to check the respawning issue, destroy the POVcorpse it creates and point to the\n      // one in inventory (like I did when giving the player starting inventory).\n\t\tif ((Inventory == None) && (player != None) && (player.inHand == None) && (Level.NetMode == NM_Standalone))\n\t\t{\n\t\t\tif (!bInvincible)\n\t\t\t{\n\t\t\t\tcorpse = Spawn(class'POVCorpse');\n\t\t\t\tif (corpse != None)\n\t\t\t\t{\n\t\t\t\t\t// destroy the actual carcass and put the fake one\n\t\t\t\t\t// in the player's hands\n\t\t\t\t\tcorpse.carcClassString = String(Class);\n\t\t\t\t\tcorpse.KillerAlliance = KillerAlliance;\n\t\t\t\t\tcorpse.KillerBindName = KillerBindName;\n\t\t\t\t\tcorpse.Alliance = Alliance;\n\t\t\t\t\tcorpse.bNotDead = bNotDead;\n\t\t\t\t\tcorpse.bEmitCarcass = bEmitCarcass;\n\t\t\t\t\tcorpse.CumulativeDamage = CumulativeDamage;\n\t\t\t\t\tcorpse.MaxDamage = MaxDamage;\n\t\t\t\t\tcorpse.CorpseItemName = itemName;\n\t\t\t\t\tcorpse.CarcassName = CarcassName;\n\t\t\t\t\tcorpse.Frob(player, None);\n\t\t\t\t\tcorpse.SetBase(player);\n\t\t\t\t\tplayer.PutInHand(corpse);\n\t\t\t\t\tbQueuedDestroy=True;\n\t\t\t\t\tDestroy();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tbFoundSomething = False;\n\tbSearchMsgPrinted = False;\n\tP = Pawn(Frobber);\n\tif (P != None)\n\t{\n\t\t// Make sure the \"Received Items\" display is cleared\n      // DEUS_EX AMSD Don't bother displaying in multiplayer.  For propagation\n      // reasons it is a lot more of a hassle than it is worth.\n\t\tif ( (player != None) && (Level.NetMode == NM_Standalone) )\n         DeusExRootWindow(player.rootWindow).hud.receivedItems.RemoveItems();\n\n\t\tif (Inventory != None)\n\t\t{\n\n\t\t\titem = Inventory;\n\t\t\tstartItem = item;\n\n\t\t\tdo\n\t\t\t{\n//\t\t\t\tlog(\"===>DeusExCarcass:item=\"$item );\n\n\t\t\t\tnextItem = item.Inventory;\n\n\t\t\t\tbPickedItemUp = False;\n\n\t\t\t\tif (item.IsA('Ammo'))\n\t\t\t\t{\n\t\t\t\t\t// Only let the player pick up ammo that's already in a weapon\n\t\t\t\t\tDeleteInventory(item);\n\t\t\t\t\titem.Destroy();\n\t\t\t\t\titem = None;\n\t\t\t\t}\n\t\t\t\telse if ( (item.IsA('DeusExWeapon')) )\n\t\t\t\t{\n               // Any weapons have their ammo set to a random number of rounds (1-4)\n               // unless it's a grenade, in which case we only want to dole out one.\n               // DEUS_EX AMSD In multiplayer, give everything away.\n               W = DeusExWeapon(item);\n               \n               // Grenades and LAMs always pickup 1\n               if (W.IsA('WeaponNanoVirusGrenade') || \n                  W.IsA('WeaponGasGrenade') || \n                  W.IsA('WeaponEMPGrenade') ||\n                  W.IsA('WeaponLAM'))\n                  W.PickupAmmoCount = 1;\n               else if (Level.NetMode == NM_Standalone)\n                  W.PickupAmmoCount = Rand(4) + 1;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (item != None)\n\t\t\t\t{\n\t\t\t\t\tbFoundSomething = True;\n\n\t\t\t\t\tif (item.IsA('NanoKey'))\n\t\t\t\t\t{\n\t\t\t\t\t\tif (player != None)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tplayer.PickupNanoKey(NanoKey(item));\n\t\t\t\t\t\t\tAddReceivedItem(player, item, 1);\n\t\t\t\t\t\t\tDeleteInventory(item);\n\t\t\t\t\t\t\titem.Destroy();\n\t\t\t\t\t\t\titem = None;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbPickedItemUp = True;\n\t\t\t\t\t}\n\t\t\t\t\telse if (item.IsA('Credits'))\t\t// I hate special cases\n\t\t\t\t\t{\n\t\t\t\t\t\tif (player != None)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tAddReceivedItem(player, item, Credits(item).numCredits);\n\t\t\t\t\t\t\tplayer.Credits += Credits(item).numCredits;\n\t\t\t\t\t\t\tP.ClientMessage(Sprintf(Credits(item).msgCreditsAdded, Credits(item).numCredits));\n\t\t\t\t\t\t\tDeleteInventory(item);\n\t\t\t\t\t\t\titem.Destroy();\n\t\t\t\t\t\t\titem = None;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbPickedItemUp = True;\n\t\t\t\t\t}\n\t\t\t\t\telse if (item.IsA('DeusExWeapon'))   // I *really* hate special cases\n\t\t\t\t\t{\n\t\t\t\t\t\t// Okay, check to see if the player already has this weapon.  If so,\n\t\t\t\t\t\t// then just give the ammo and not the weapon.  Otherwise give\n\t\t\t\t\t\t// the weapon normally. \n\t\t\t\t\t\tW = DeusExWeapon(player.FindInventoryType(item.Class));\n\n\t\t\t\t\t\t// If the player already has this item in his inventory, piece of cake,\n\t\t\t\t\t\t// we just give him the ammo.  However, if the Weapon is *not* in the \n\t\t\t\t\t\t// player's inventory, first check to see if there's room for it.  If so,\n\t\t\t\t\t\t// then we'll give it to him normally.  If there's *NO* room, then we \n\t\t\t\t\t\t// want to give the player the AMMO only (as if the player already had \n\t\t\t\t\t\t// the weapon).\n\n\t\t\t\t\t\tif ((W != None) || ((W == None) && (!player.FindInventorySlot(item, True))))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Don't bother with this is there's no ammo\n\t\t\t\t\t\t\tif ((Weapon(item).AmmoType != None) && (Weapon(item).AmmoType.AmmoAmount > 0))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tAmmoType = Ammo(player.FindInventoryType(Weapon(item).AmmoName));\n\n                        if ((AmmoType != None) && (AmmoType.AmmoAmount < AmmoType.MaxAmmo))\n\t\t\t\t\t\t\t\t{\n                           AmmoType.AddAmmo(Weapon(item).PickupAmmoCount);\n                           AddReceivedItem(player, AmmoType, Weapon(item).PickupAmmoCount);\n                           \n\t\t\t\t\t\t\t\t\t// Update the ammo display on the object belt\n\t\t\t\t\t\t\t\t\tplayer.UpdateAmmoBeltText(AmmoType);\n\n\t\t\t\t\t\t\t\t\t// if this is an illegal ammo type, use the weapon name to print the message\n\t\t\t\t\t\t\t\t\tif (AmmoType.PickupViewMesh == Mesh'TestBox')\n\t\t\t\t\t\t\t\t\t\tP.ClientMessage(item.PickupMessage @ item.itemArticle @ item.itemName, 'Pickup');\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\tP.ClientMessage(AmmoType.PickupMessage @ AmmoType.itemArticle @ AmmoType.itemName, 'Pickup');\n\n\t\t\t\t\t\t\t\t\t// Mark it as 0 to prevent it from being added twice\n\t\t\t\t\t\t\t\t\tWeapon(item).AmmoType.AmmoAmount = 0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Print a message \"Cannot pickup blah blah blah\" if inventory is full\n\t\t\t\t\t\t\t// and the player can't pickup this weapon, so the player at least knows\n\t\t\t\t\t\t\t// if he empties some inventory he can get something potentially cooler\n\t\t\t\t\t\t\t// than he already has. \n\t\t\t\t\t\t\tif ((W == None) && (!player.FindInventorySlot(item, True)))\n\t\t\t\t\t\t\t\tP.ClientMessage(Sprintf(Player.InventoryFull, item.itemName));\n\n\t\t\t\t\t\t\t// Only destroy the weapon if the player already has it.\n\t\t\t\t\t\t\tif (W != None)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Destroy the weapon, baby!\n\t\t\t\t\t\t\t\tDeleteInventory(item);\n\t\t\t\t\t\t\t\titem.Destroy();\n\t\t\t\t\t\t\t\titem = None;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbPickedItemUp = True;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\telse if (item.IsA('DeusExAmmo'))\n\t\t\t\t\t{\n\t\t\t\t\t\tif (DeusExAmmo(item).AmmoAmount == 0)\n\t\t\t\t\t\t\tbPickedItemUp = True;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!bPickedItemUp)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Special case if this is a DeusExPickup(), it can have multiple copies\n\t\t\t\t\t\t// and the player already has it.\n\n\t\t\t\t\t\tif ((item.IsA('DeusExPickup')) && (DeusExPickup(item).bCanHaveMultipleCopies) && (player.FindInventoryType(item.class) != None))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tinvItem   = DeusExPickup(player.FindInventoryType(item.class));\n\t\t\t\t\t\t\titemCount = DeusExPickup(item).numCopies;\n\n\t\t\t\t\t\t\t// Make sure the player doesn't have too many copies\n\t\t\t\t\t\t\tif ((invItem.MaxCopies > 0) && (DeusExPickup(item).numCopies + invItem.numCopies > invItem.MaxCopies))\n\t\t\t\t\t\t\t{\t\n\t\t\t\t\t\t\t\t// Give the player the max #\n\t\t\t\t\t\t\t\tif ((invItem.MaxCopies - invItem.numCopies) > 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\titemCount = (invItem.MaxCopies - invItem.numCopies);\n\t\t\t\t\t\t\t\t\tDeusExPickup(item).numCopies -= itemCount;\n\t\t\t\t\t\t\t\t\tinvItem.numCopies = invItem.MaxCopies;\n\t\t\t\t\t\t\t\t\tP.ClientMessage(invItem.PickupMessage @ invItem.itemArticle @ invItem.itemName, 'Pickup');\n\t\t\t\t\t\t\t\t\tAddReceivedItem(player, invItem, itemCount);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tP.ClientMessage(Sprintf(msgCannotPickup, invItem.itemName));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tinvItem.numCopies += itemCount;\n\t\t\t\t\t\t\t\tDeleteInventory(item);\n\n\t\t\t\t\t\t\t\tP.ClientMessage(invItem.PickupMessage @ invItem.itemArticle @ invItem.itemName, 'Pickup');\n\t\t\t\t\t\t\t\tAddReceivedItem(player, invItem, itemCount);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// check if the pawn is allowed to pick this up\n\t\t\t\t\t\t\tif ((P.Inventory == None) || (Level.Game.PickupQuery(P, item)))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tDeusExPlayer(P).FrobTarget = item;\n\t\t\t\t\t\t\t\tif (DeusExPlayer(P).HandleItemPickup(Item) != False)\n\t\t\t\t\t\t\t\t{\n                           DeleteInventory(item);\n\n                           // DEUS_EX AMSD Belt info isn't always getting cleaned up.  Clean it up.\n                           item.bInObjectBelt=False;\n                           item.BeltPos=-1;\n\t\t\t\t\t\t\t\t\t\n                           item.SpawnCopy(P);\n\n\t\t\t\t\t\t\t\t\t// Show the item received in the ReceivedItems window and also \n\t\t\t\t\t\t\t\t\t// display a line in the Log\n\t\t\t\t\t\t\t\t\tAddReceivedItem(player, item, 1);\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tP.ClientMessage(Item.PickupMessage @ Item.itemArticle @ Item.itemName, 'Pickup');\n\t\t\t\t\t\t\t\t\tPlaySound(Item.PickupSound);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tDeleteInventory(item);\n\t\t\t\t\t\t\t\titem.Destroy();\n\t\t\t\t\t\t\t\titem = None;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\titem = nextItem;\n\t\t\t}\n\t\t\tuntil ((item == None) || (item == startItem));\n\t\t}\n\n//log(\"  bFoundSomething = \" $ bFoundSomething);\n\n\t\tif (!bFoundSomething)\n\t\t\tP.ClientMessage(msgEmpty);\n\t}\n\n   if ((player != None) && (Level.Netmode != NM_Standalone))\n   {\n      player.ClientMessage(Sprintf(msgRecharged, 25));\n      \n      PlaySound(sound'BioElectricHiss', SLOT_None,,, 256);\n      \n      player.Energy += 25;\n      if (player.Energy > player.EnergyMax)\n         player.Energy = player.EnergyMax;\n   }\n\n\tSuper.Frob(Frobber, frobWith);\n\n   if ((Level.Netmode != NM_Standalone) && (Player != None))   \n   {\n\t   bQueuedDestroy = true;\n\t   Destroy();\t  \n   }\n}\n\nfunction AddReceivedItem(DeusExPlayer player, Inventory item, int count)\n{\n\tlocal DeusExWeapon w;\n\tlocal Inventory altAmmo;\n\n\tif (!bSearchMsgPrinted)\n\t{\n\t\tplayer.ClientMessage(msgSearching);\n\t\tbSearchMsgPrinted = True;\n\t}\n\n   DeusExRootWindow(player.rootWindow).hud.receivedItems.AddItem(item, 1);\n\n\t// Make sure the object belt is updated\n\tif (item.IsA('Ammo'))\n\t\tplayer.UpdateAmmoBeltText(Ammo(item));\n\telse\n\t\tplayer.UpdateBeltText(item);\n\n\t// Deny 20mm and WP rockets off of bodies in multiplayer\n\tif ( Level.NetMode != NM_Standalone )\n\t{\n\t\tif ( item.IsA('WeaponAssaultGun') || item.IsA('WeaponGEPGun') )\n\t\t{\n\t\t\tw = DeusExWeapon(player.FindInventoryType(item.Class));\n\t\t\tif (( Ammo20mm(w.AmmoType) != None ) || ( AmmoRocketWP(w.AmmoType) != None ))\n\t\t\t{\n\t\t\t\taltAmmo = Spawn( w.AmmoNames[0] );\n\t\t\t\tDeusExAmmo(altAmmo).AmmoAmount = w.PickupAmmoCount;\n\t\t\t\taltAmmo.Frob(player,None);\n\t\t\t\taltAmmo.Destroy();\n\t\t\t\tw.AmmoType.Destroy();\n\t\t\t\tw.LoadAmmo( 0 );\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction bool AddInventory( inventory NewItem )\n{\n\t// Skip if already in the inventory.\n\tlocal inventory Inv;\n\n\tfor( Inv=Inventory; Inv!=None; Inv=Inv.Inventory )\n\t\tif( Inv == NewItem )\n\t\t\treturn false;\n\n\t// The item should not have been destroyed if we get here.\n\tassert(NewItem!=None);\n\n\t// Add to front of inventory chain.\n\tNewItem.SetOwner(Self);\n\tNewItem.Inventory = Inventory;\n\tNewItem.InitialState = 'Idle2';\n\tInventory = NewItem;\n\n\treturn true;\n}\n\nfunction bool DeleteInventory( inventory Item )\n{\n\t// If this item is in our inventory chain, unlink it.\n\tlocal actor Link;\n\n\tfor( Link = Self; Link!=None; Link=Link.Inventory )\n\t{\n\t\tif( Link.Inventory == Item )\n\t\t{\n\t\t\tLink.Inventory = Item.Inventory;\n\t\t\tbreak;\n\t\t}\n\t}\n   Item.SetOwner(None);\n}\n\nauto state Dead\n{\n\tfunction HandleLanding()\n\t{\n\t\tlocal Vector HitLocation, HitNormal, EndTrace;\n\t\tlocal Actor hit;\n\t\tlocal BloodPool pool;\n\n\t\tif (!bNotDead)\n\t\t{\n\t\t\t// trace down about 20 feet if we're not in water\n\t\t\tif (!Region.Zone.bWaterZone)\n\t\t\t{\n\t\t\t\tEndTrace = Location - vect(0,0,320);\n\t\t\t\thit = Trace(HitLocation, HitNormal, EndTrace, Location, False);\n            if ((DeusExMPGame(Level.Game) != None) && (!DeusExMPGame(Level.Game).bSpawnEffects))\n            {\n               pool = None;\n            }\n            else\n            {\n               pool = spawn(class'BloodPool',,, HitLocation+HitNormal, Rotator(HitNormal));\n            }\n\t\t\t\tif (pool != None)\n\t\t\t\t\tpool.maxDrawScale = CollisionRadius / 40.0;\n\t\t\t}\n\n\t\t\t// alert NPCs that I'm food\n\t\t\tAIStartEvent('Food', EAITYPE_Visual);\n\t\t}\n\n\t\t// by default, the collision radius is small so there won't be as\n\t\t// many problems spawning carcii\n\t\t// expand the collision radius back to where it's supposed to be\n\t\t// don't change animal carcass collisions\n\t\tif (!bAnimalCarcass)\n\t\t\tSetCollisionSize(40.0, Default.CollisionHeight);\n\n\t\t// alert NPCs that I'm really disgusting\n\t\tif (bEmitCarcass)\n\t\t\tAIStartEvent('Carcass', EAITYPE_Visual);\n\t}\n\nBegin:\n\twhile (Physics == PHYS_Falling)\n\t{\n\t\tSleep(1.0);\n\t}\n\tHandleLanding();\n}\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n\ndefaultproperties\n{\n     CollisionRadius=40.000000\n}\n",
            "name": "MPCarcass.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "CollisionRadius=40.000000"
                ],
                "exec": [],
                "extends": "DeusExCarcass",
                "functions": {
                    "AddInventory": {
                        "body": "{\n\t// Skip if already in the inventory.\n\n\tfor( Inv=Inventory; Inv!=None; Inv=Inv.Inventory )\n\t\tif( Inv == NewItem )\n\t\t\treturn false;\n\n\t// The item should not have been destroyed if we get here.\n\tassert(NewItem!=None);\n\n\t// Add to front of inventory chain.\n\tNewItem.SetOwner(Self);\n\tNewItem.Inventory = Inventory;\n\tNewItem.InitialState = 'Idle2';\n\tInventory = NewItem;\n\n\treturn true;\n}",
                        "locals": [
                            "local inventory Inv;"
                        ],
                        "modifiers": [],
                        "name": "AddInventory",
                        "native": false,
                        "param": [
                            [
                                "inventory",
                                "NewItem"
                            ]
                        ],
                        "return": "bool"
                    },
                    "AddReceivedItem": {
                        "body": "{\n\n\tif (!bSearchMsgPrinted)\n\t{\n\t\tplayer.ClientMessage(msgSearching);\n\t\tbSearchMsgPrinted = True;\n\t}\n\n   DeusExRootWindow(player.rootWindow).hud.receivedItems.AddItem(item, 1);\n\n\t// Make sure the object belt is updated\n\tif (item.IsA('Ammo'))\n\t\tplayer.UpdateAmmoBeltText(Ammo(item));\n\telse\n\t\tplayer.UpdateBeltText(item);\n\n\t// Deny 20mm and WP rockets off of bodies in multiplayer\n\tif ( Level.NetMode != NM_Standalone )\n\t{\n\t\tif ( item.IsA('WeaponAssaultGun') || item.IsA('WeaponGEPGun') )\n\t\t{\n\t\t\tw = DeusExWeapon(player.FindInventoryType(item.Class));\n\t\t\tif (( Ammo20mm(w.AmmoType) != None ) || ( AmmoRocketWP(w.AmmoType) != None ))\n\t\t\t{\n\t\t\t\taltAmmo = Spawn( w.AmmoNames[0] );\n\t\t\t\tDeusExAmmo(altAmmo).AmmoAmount = w.PickupAmmoCount;\n\t\t\t\taltAmmo.Frob(player,None);\n\t\t\t\taltAmmo.Destroy();\n\t\t\t\tw.AmmoType.Destroy();\n\t\t\t\tw.LoadAmmo( 0 );\n\t\t\t}\n\t\t}\n\t}\n}",
                        "locals": [
                            "local DeusExWeapon w;",
                            "local Inventory altAmmo;"
                        ],
                        "modifiers": [],
                        "name": "AddReceivedItem",
                        "native": false,
                        "param": [
                            [
                                "DeusExPlayer",
                                "player"
                            ],
                            [
                                "Inventory",
                                "item"
                            ],
                            [
                                "int",
                                "count"
                            ]
                        ],
                        "return": ""
                    },
                    "ChunkUp": {
                        "body": "{\n\n\t// gib the carcass\n\tsize = (CollisionRadius + CollisionHeight) / 2;\n\tif (size > 10.0)\n\t{\n\t\tfor (i=0; i<size/4.0; i++)\n\t\t{\n\t\t\tloc.X = (1-2*FRand()) * CollisionRadius;\n\t\t\tloc.Y = (1-2*FRand()) * CollisionRadius;\n\t\t\tloc.Z = (1-2*FRand()) * CollisionHeight;\n\t\t\tloc += Location;\n\t\t\tchunk = spawn(class'FleshFragment', None,, loc);\n\t\t\tif (chunk != None)\n\t\t\t{\n\t\t\t\tchunk.DrawScale = size / 25;\n\t\t\t\tchunk.SetCollisionSize(chunk.CollisionRadius / chunk.DrawScale, chunk.CollisionHeight / chunk.DrawScale);\n\t\t\t\tchunk.bFixedRotationDir = True;\n\t\t\t\tchunk.RotationRate = RotRand(False);\n\t\t\t}\n\t\t}\n\t}\n\n\tSuper.ChunkUp(Damage);\n}",
                        "locals": [
                            "local int i;",
                            "local float size;",
                            "local Vector loc;",
                            "local FleshFragment chunk;"
                        ],
                        "modifiers": [],
                        "name": "ChunkUp",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "Damage"
                            ]
                        ],
                        "return": ""
                    },
                    "DeleteInventory": {
                        "body": "{\n\t// If this item is in our inventory chain, unlink it.\n\n\tfor( Link = Self; Link!=None; Link=Link.Inventory )\n\t{\n\t\tif( Link.Inventory == Item )\n\t\t{\n\t\t\tLink.Inventory = Item.Inventory;\n\t\t\tbreak;\n\t\t}\n\t}\n   Item.SetOwner(None);\n}",
                        "locals": [
                            "local actor Link;"
                        ],
                        "modifiers": [],
                        "name": "DeleteInventory",
                        "native": false,
                        "param": [
                            [
                                "inventory",
                                "Item"
                            ]
                        ],
                        "return": "bool"
                    },
                    "Destroyed": {
                        "body": "{\n\tif (flyGen != None)\n\t{\n\t\tflyGen.StopGenerator();\n\t\tflyGen = None;\n\t}\n\n\tSuper.Destroyed();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Destroyed",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Frob": {
                        "body": "{\n\n//log(\"DeusExCarcass::Frob()--------------------------------\");\n\n\t// Can we assume only the *PLAYER* would actually be frobbing carci?\n\tplayer = DeusExPlayer(Frobber);\n\n\t// No doublefrobbing in multiplayer.\n\tif (bQueuedDestroy)\n\t\treturn;\n\n\t// if we've already been searched, let the player pick us up\n\t// don't pick up animal carcii\n\tif (!bAnimalCarcass)\n\t{\n      // DEUS_EX AMSD Since we don't have animations for carrying corpses, and since it has no real use in multiplayer,\n      // and since the PutInHand propagation doesn't just work, this is work we don't need to do.\n      // Were you to do it, you'd need to check the respawning issue, destroy the POVcorpse it creates and point to the\n      // one in inventory (like I did when giving the player starting inventory).\n\t\tif ((Inventory == None) && (player != None) && (player.inHand == None) && (Level.NetMode == NM_Standalone))\n\t\t{\n\t\t\tif (!bInvincible)\n\t\t\t{\n\t\t\t\tcorpse = Spawn(class'POVCorpse');\n\t\t\t\tif (corpse != None)\n\t\t\t\t{\n\t\t\t\t\t// destroy the actual carcass and put the fake one\n\t\t\t\t\t// in the player's hands\n\t\t\t\t\tcorpse.carcClassString = String(Class);\n\t\t\t\t\tcorpse.KillerAlliance = KillerAlliance;\n\t\t\t\t\tcorpse.KillerBindName = KillerBindName;\n\t\t\t\t\tcorpse.Alliance = Alliance;\n\t\t\t\t\tcorpse.bNotDead = bNotDead;\n\t\t\t\t\tcorpse.bEmitCarcass = bEmitCarcass;\n\t\t\t\t\tcorpse.CumulativeDamage = CumulativeDamage;\n\t\t\t\t\tcorpse.MaxDamage = MaxDamage;\n\t\t\t\t\tcorpse.CorpseItemName = itemName;\n\t\t\t\t\tcorpse.CarcassName = CarcassName;\n\t\t\t\t\tcorpse.Frob(player, None);\n\t\t\t\t\tcorpse.SetBase(player);\n\t\t\t\t\tplayer.PutInHand(corpse);\n\t\t\t\t\tbQueuedDestroy=True;\n\t\t\t\t\tDestroy();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tbFoundSomething = False;\n\tbSearchMsgPrinted = False;\n\tP = Pawn(Frobber);\n\tif (P != None)\n\t{\n\t\t// Make sure the \"Received Items\" display is cleared\n      // DEUS_EX AMSD Don't bother displaying in multiplayer.  For propagation\n      // reasons it is a lot more of a hassle than it is worth.\n\t\tif ( (player != None) && (Level.NetMode == NM_Standalone) )\n         DeusExRootWindow(player.rootWindow).hud.receivedItems.RemoveItems();\n\n\t\tif (Inventory != None)\n\t\t{\n\n\t\t\titem = Inventory;\n\t\t\tstartItem = item;\n\n\t\t\tdo\n\t\t\t{\n//\t\t\t\tlog(\"===>DeusExCarcass:item=\"$item );\n\n\t\t\t\tnextItem = item.Inventory;\n\n\t\t\t\tbPickedItemUp = False;\n\n\t\t\t\tif (item.IsA('Ammo'))\n\t\t\t\t{\n\t\t\t\t\t// Only let the player pick up ammo that's already in a weapon\n\t\t\t\t\tDeleteInventory(item);\n\t\t\t\t\titem.Destroy();\n\t\t\t\t\titem = None;\n\t\t\t\t}\n\t\t\t\telse if ( (item.IsA('DeusExWeapon')) )\n\t\t\t\t{\n               // Any weapons have their ammo set to a random number of rounds (1-4)\n               // unless it's a grenade, in which case we only want to dole out one.\n               // DEUS_EX AMSD In multiplayer, give everything away.\n               W = DeusExWeapon(item);\n               \n               // Grenades and LAMs always pickup 1\n               if (W.IsA('WeaponNanoVirusGrenade') || \n                  W.IsA('WeaponGasGrenade') || \n                  W.IsA('WeaponEMPGrenade') ||\n                  W.IsA('WeaponLAM'))\n                  W.PickupAmmoCount = 1;\n               else if (Level.NetMode == NM_Standalone)\n                  W.PickupAmmoCount = Rand(4) + 1;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (item != None)\n\t\t\t\t{\n\t\t\t\t\tbFoundSomething = True;\n\n\t\t\t\t\tif (item.IsA('NanoKey'))\n\t\t\t\t\t{\n\t\t\t\t\t\tif (player != None)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tplayer.PickupNanoKey(NanoKey(item));\n\t\t\t\t\t\t\tAddReceivedItem(player, item, 1);\n\t\t\t\t\t\t\tDeleteInventory(item);\n\t\t\t\t\t\t\titem.Destroy();\n\t\t\t\t\t\t\titem = None;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbPickedItemUp = True;\n\t\t\t\t\t}\n\t\t\t\t\telse if (item.IsA('Credits'))\t\t// I hate special cases\n\t\t\t\t\t{\n\t\t\t\t\t\tif (player != None)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tAddReceivedItem(player, item, Credits(item).numCredits);\n\t\t\t\t\t\t\tplayer.Credits += Credits(item).numCredits;\n\t\t\t\t\t\t\tP.ClientMessage(Sprintf(Credits(item).msgCreditsAdded, Credits(item).numCredits));\n\t\t\t\t\t\t\tDeleteInventory(item);\n\t\t\t\t\t\t\titem.Destroy();\n\t\t\t\t\t\t\titem = None;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbPickedItemUp = True;\n\t\t\t\t\t}\n\t\t\t\t\telse if (item.IsA('DeusExWeapon'))   // I *really* hate special cases\n\t\t\t\t\t{\n\t\t\t\t\t\t// Okay, check to see if the player already has this weapon.  If so,\n\t\t\t\t\t\t// then just give the ammo and not the weapon.  Otherwise give\n\t\t\t\t\t\t// the weapon normally. \n\t\t\t\t\t\tW = DeusExWeapon(player.FindInventoryType(item.Class));\n\n\t\t\t\t\t\t// If the player already has this item in his inventory, piece of cake,\n\t\t\t\t\t\t// we just give him the ammo.  However, if the Weapon is *not* in the \n\t\t\t\t\t\t// player's inventory, first check to see if there's room for it.  If so,\n\t\t\t\t\t\t// then we'll give it to him normally.  If there's *NO* room, then we \n\t\t\t\t\t\t// want to give the player the AMMO only (as if the player already had \n\t\t\t\t\t\t// the weapon).\n\n\t\t\t\t\t\tif ((W != None) || ((W == None) && (!player.FindInventorySlot(item, True))))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Don't bother with this is there's no ammo\n\t\t\t\t\t\t\tif ((Weapon(item).AmmoType != None) && (Weapon(item).AmmoType.AmmoAmount > 0))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tAmmoType = Ammo(player.FindInventoryType(Weapon(item).AmmoName));\n\n                        if ((AmmoType != None) && (AmmoType.AmmoAmount < AmmoType.MaxAmmo))\n\t\t\t\t\t\t\t\t{\n                           AmmoType.AddAmmo(Weapon(item).PickupAmmoCount);\n                           AddReceivedItem(player, AmmoType, Weapon(item).PickupAmmoCount);\n                           \n\t\t\t\t\t\t\t\t\t// Update the ammo display on the object belt\n\t\t\t\t\t\t\t\t\tplayer.UpdateAmmoBeltText(AmmoType);\n\n\t\t\t\t\t\t\t\t\t// if this is an illegal ammo type, use the weapon name to print the message\n\t\t\t\t\t\t\t\t\tif (AmmoType.PickupViewMesh == Mesh'TestBox')\n\t\t\t\t\t\t\t\t\t\tP.ClientMessage(item.PickupMessage @ item.itemArticle @ item.itemName, 'Pickup');\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\tP.ClientMessage(AmmoType.PickupMessage @ AmmoType.itemArticle @ AmmoType.itemName, 'Pickup');\n\n\t\t\t\t\t\t\t\t\t// Mark it as 0 to prevent it from being added twice\n\t\t\t\t\t\t\t\t\tWeapon(item).AmmoType.AmmoAmount = 0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Print a message \"Cannot pickup blah blah blah\" if inventory is full\n\t\t\t\t\t\t\t// and the player can't pickup this weapon, so the player at least knows\n\t\t\t\t\t\t\t// if he empties some inventory he can get something potentially cooler\n\t\t\t\t\t\t\t// than he already has. \n\t\t\t\t\t\t\tif ((W == None) && (!player.FindInventorySlot(item, True)))\n\t\t\t\t\t\t\t\tP.ClientMessage(Sprintf(Player.InventoryFull, item.itemName));\n\n\t\t\t\t\t\t\t// Only destroy the weapon if the player already has it.\n\t\t\t\t\t\t\tif (W != None)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Destroy the weapon, baby!\n\t\t\t\t\t\t\t\tDeleteInventory(item);\n\t\t\t\t\t\t\t\titem.Destroy();\n\t\t\t\t\t\t\t\titem = None;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbPickedItemUp = True;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\telse if (item.IsA('DeusExAmmo'))\n\t\t\t\t\t{\n\t\t\t\t\t\tif (DeusExAmmo(item).AmmoAmount == 0)\n\t\t\t\t\t\t\tbPickedItemUp = True;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!bPickedItemUp)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Special case if this is a DeusExPickup(), it can have multiple copies\n\t\t\t\t\t\t// and the player already has it.\n\n\t\t\t\t\t\tif ((item.IsA('DeusExPickup')) && (DeusExPickup(item).bCanHaveMultipleCopies) && (player.FindInventoryType(item.class) != None))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tinvItem   = DeusExPickup(player.FindInventoryType(item.class));\n\t\t\t\t\t\t\titemCount = DeusExPickup(item).numCopies;\n\n\t\t\t\t\t\t\t// Make sure the player doesn't have too many copies\n\t\t\t\t\t\t\tif ((invItem.MaxCopies > 0) && (DeusExPickup(item).numCopies + invItem.numCopies > invItem.MaxCopies))\n\t\t\t\t\t\t\t{\t\n\t\t\t\t\t\t\t\t// Give the player the max #\n\t\t\t\t\t\t\t\tif ((invItem.MaxCopies - invItem.numCopies) > 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\titemCount = (invItem.MaxCopies - invItem.numCopies);\n\t\t\t\t\t\t\t\t\tDeusExPickup(item).numCopies -= itemCount;\n\t\t\t\t\t\t\t\t\tinvItem.numCopies = invItem.MaxCopies;\n\t\t\t\t\t\t\t\t\tP.ClientMessage(invItem.PickupMessage @ invItem.itemArticle @ invItem.itemName, 'Pickup');\n\t\t\t\t\t\t\t\t\tAddReceivedItem(player, invItem, itemCount);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tP.ClientMessage(Sprintf(msgCannotPickup, invItem.itemName));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tinvItem.numCopies += itemCount;\n\t\t\t\t\t\t\t\tDeleteInventory(item);\n\n\t\t\t\t\t\t\t\tP.ClientMessage(invItem.PickupMessage @ invItem.itemArticle @ invItem.itemName, 'Pickup');\n\t\t\t\t\t\t\t\tAddReceivedItem(player, invItem, itemCount);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// check if the pawn is allowed to pick this up\n\t\t\t\t\t\t\tif ((P.Inventory == None) || (Level.Game.PickupQuery(P, item)))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tDeusExPlayer(P).FrobTarget = item;\n\t\t\t\t\t\t\t\tif (DeusExPlayer(P).HandleItemPickup(Item) != False)\n\t\t\t\t\t\t\t\t{\n                           DeleteInventory(item);\n\n                           // DEUS_EX AMSD Belt info isn't always getting cleaned up.  Clean it up.\n                           item.bInObjectBelt=False;\n                           item.BeltPos=-1;\n\t\t\t\t\t\t\t\t\t\n                           item.SpawnCopy(P);\n\n\t\t\t\t\t\t\t\t\t// Show the item received in the ReceivedItems window and also \n\t\t\t\t\t\t\t\t\t// display a line in the Log\n\t\t\t\t\t\t\t\t\tAddReceivedItem(player, item, 1);\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tP.ClientMessage(Item.PickupMessage @ Item.itemArticle @ Item.itemName, 'Pickup');\n\t\t\t\t\t\t\t\t\tPlaySound(Item.PickupSound);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tDeleteInventory(item);\n\t\t\t\t\t\t\t\titem.Destroy();\n\t\t\t\t\t\t\t\titem = None;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\titem = nextItem;\n\t\t\t}\n\t\t\tuntil ((item == None) || (item == startItem));\n\t\t}\n\n//log(\"  bFoundSomething = \" $ bFoundSomething);\n\n\t\tif (!bFoundSomething)\n\t\t\tP.ClientMessage(msgEmpty);\n\t}\n\n   if ((player != None) && (Level.Netmode != NM_Standalone))\n   {\n      player.ClientMessage(Sprintf(msgRecharged, 25));\n      \n      PlaySound(sound'BioElectricHiss', SLOT_None,,, 256);\n      \n      player.Energy += 25;\n      if (player.Energy > player.EnergyMax)\n         player.Energy = player.EnergyMax;\n   }\n\n\tSuper.Frob(Frobber, frobWith);\n\n   if ((Level.Netmode != NM_Standalone) && (Player != None))   \n   {\n\t   bQueuedDestroy = true;\n\t   Destroy();\t  \n   }\n}",
                        "locals": [
                            "local Inventory item, nextItem, startItem;",
                            "local Pawn P;",
                            "local DeusExWeapon W;",
                            "local bool bFoundSomething;",
                            "local DeusExPlayer player;",
                            "local ammo AmmoType;",
                            "local bool bPickedItemUp;",
                            "local POVCorpse corpse;",
                            "local DeusExPickup invItem;",
                            "local int itemCount;"
                        ],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    },
                    "HandleLanding": {
                        "body": "{\n\n\t\tif (!bNotDead)\n\t\t{\n\t\t\t// trace down about 20 feet if we're not in water\n\t\t\tif (!Region.Zone.bWaterZone)\n\t\t\t{\n\t\t\t\tEndTrace = Location - vect(0,0,320);\n\t\t\t\thit = Trace(HitLocation, HitNormal, EndTrace, Location, False);\n            if ((DeusExMPGame(Level.Game) != None) && (!DeusExMPGame(Level.Game).bSpawnEffects))\n            {\n               pool = None;\n            }\n            else\n            {\n               pool = spawn(class'BloodPool',,, HitLocation+HitNormal, Rotator(HitNormal));\n            }\n\t\t\t\tif (pool != None)\n\t\t\t\t\tpool.maxDrawScale = CollisionRadius / 40.0;\n\t\t\t}\n\n\t\t\t// alert NPCs that I'm food\n\t\t\tAIStartEvent('Food', EAITYPE_Visual);\n\t\t}\n\n\t\t// by default, the collision radius is small so there won't be as\n\t\t// many problems spawning carcii\n\t\t// expand the collision radius back to where it's supposed to be\n\t\t// don't change animal carcass collisions\n\t\tif (!bAnimalCarcass)\n\t\t\tSetCollisionSize(40.0, Default.CollisionHeight);\n\n\t\t// alert NPCs that I'm really disgusting\n\t\tif (bEmitCarcass)\n\t\t\tAIStartEvent('Carcass', EAITYPE_Visual);\n\t}",
                        "locals": [
                            "local Vector HitLocation, HitNormal, EndTrace;",
                            "local Actor hit;",
                            "local BloodPool pool;"
                        ],
                        "modifiers": [],
                        "name": "HandleLanding",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "InitFor": {
                        "body": "{\n\tif (Other != None)\n\t{\n\t\t// set as unconscious or add the pawns name to the description\n\t\tif (!bAnimalCarcass)\n\t\t{\n\t\t\tif (bNotDead)\n\t\t\t\titemName = msgNotDead;\n\t\t\telse if (Other.IsA('ScriptedPawn'))\n\t\t\t\titemName = itemName $ \" (\" $ ScriptedPawn(Other).FamiliarName $ \")\";\n\t\t}\n\n\t\tMass           = Other.Mass;\n\t\tBuoyancy       = Mass * 1.2;\n\t\tMaxDamage      = 0.8*Mass;\n\t\tif (ScriptedPawn(Other) != None)\n\t\t\tif (ScriptedPawn(Other).bBurnedToDeath)\n\t\t\t\tCumulativeDamage = MaxDamage-1;\n\n\t\tSetScaleGlow();\n\n\t\t// Will this carcass spawn flies?\n\t\tif (bAnimalCarcass)\n\t\t{\n\t\t\titemName = msgAnimalCarcass;\n\t\t\tif (FRand() < 0.2)\n\t\t\t\tbGenerateFlies = true;\n\t\t}\n\t\telse if (!Other.IsA('Robot') && !bNotDead)\n\t\t{\n\t\t\tif (FRand() < 0.1)\n\t\t\t\tbGenerateFlies = true;\n\t\t\tbEmitCarcass = true;\n\t\t}\n\n\t\tif (Other.AnimSequence == 'DeathFront')\n\t\t\tMesh = Mesh2;\n\n\t\t// set the instigator and tag information\n\t\tif (Other.Instigator != None)\n\t\t{\n\t\t\tKillerBindName = Other.Instigator.BindName;\n\t\t\tKillerAlliance = Other.Instigator.Alliance;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tKillerBindName = Other.BindName;\n\t\t\tKillerAlliance = '';\n\t\t}\n\t\tTag = Other.Tag;\n\t\tAlliance = Pawn(Other).Alliance;\n\t\tCarcassName = Other.Name;\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "InitFor",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Other"
                            ]
                        ],
                        "return": ""
                    },
                    "PostBeginPlay": {
                        "body": "{\n\n\tbCollideWorld = true;\n\n\t// Use the carcass name by default\n\tCarcassName = Name;\n\n\t// Add initial inventory items\n\tfor (i=0; i<8; i++)\n\t{\n\t\tif ((InitialInventory[i].inventory != None) && (InitialInventory[i].count > 0))\n\t\t{\n\t\t\tfor (j=0; j<InitialInventory[i].count; j++)\n\t\t\t{\n\t\t\t\tinv = spawn(InitialInventory[i].inventory, self);\n\t\t\t\tif (inv != None)\n\t\t\t\t{\n\t\t\t\t\tinv.bHidden = True;\n\t\t\t\t\tinv.SetPhysics(PHYS_None);\n\t\t\t\t\tAddInventory(inv);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// use the correct mesh\n\tif (Region.Zone.bWaterZone)\n\t{\n\t\tMesh = Mesh3;\n\t\tbNotDead = False;\t\t// you will die in water every time\n\t}\n\n\tif (bAnimalCarcass)\n\t\titemName = msgAnimalCarcass;\n\n\tMaxDamage = 0.8*Mass;\n\tSetScaleGlow();\n\n\tSetTimer(30.0, False);\n\n\tSuper.PostBeginPlay();\n}",
                        "locals": [
                            "local int i, j;",
                            "local Inventory inv;"
                        ],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "SetScaleGlow": {
                        "body": "{\n\n\t// scaleglow based on damage\n\tpct = FClamp(1.0-float(CumulativeDamage)/MaxDamage, 0.1, 1.0);\n\tScaleGlow = pct;\n}",
                        "locals": [
                            "local float pct;"
                        ],
                        "modifiers": [],
                        "name": "SetScaleGlow",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "TakeDamage": {
                        "body": "{\n\n\tif (bInvincible)\n\t\treturn;\n\n\t// only take \"gib\" damage from these damage types\n\tif ((damageType == 'Shot') || (damageType == 'Sabot') || (damageType == 'Exploded') || (damageType == 'Munch') ||\n\t    (damageType == 'Tantalus'))\n\t{\n\t\tif ((damageType != 'Munch') && (damageType != 'Tantalus'))\n\t\t{\n         if ((DeusExMPGame(Level.Game) != None) && (!DeusExMPGame(Level.Game).bSpawnEffects))\n         {\n         }\n         else\n         {\n            spawn(class'BloodSpurt',,,HitLocation);\n            spawn(class'BloodDrop',,, HitLocation);\n            for (i=0; i<Damage; i+=10)\n               spawn(class'BloodDrop',,, HitLocation);\n         }\n\t\t}\n\n\t\t// this section copied from Carcass::TakeDamage() and modified a little\n\t\tif (!bDecorative)\n\t\t{\n\t\t\tbBobbing = false;\n\t\t\tSetPhysics(PHYS_Falling);\n\t\t}\n\t\tif ((Physics == PHYS_None) && (Momentum.Z < 0))\n\t\t\tMomentum.Z *= -1;\n\t\tVelocity += 3 * momentum/(Mass + 200);\n\t\tif (DamageType == 'Shot')\n\t\t\tDamage *= 0.4;\n\t\tCumulativeDamage += Damage;\n\t\tif (CumulativeDamage >= MaxDamage)\n\t\t\tChunkUp(Damage);\n\t\tif (bDecorative)\n\t\t\tVelocity = vect(0,0,0);\n\t}\n\n\tSetScaleGlow();\n}",
                        "locals": [
                            "local int i;"
                        ],
                        "modifiers": [],
                        "name": "TakeDamage",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "Damage"
                            ],
                            [
                                "Pawn",
                                "instigatedBy"
                            ],
                            [
                                "Vector",
                                "hitLocation"
                            ],
                            [
                                "Vector",
                                "momentum"
                            ],
                            [
                                "name",
                                "damageType"
                            ]
                        ],
                        "return": ""
                    },
                    "Tick": {
                        "body": "{\n\tif (!bInit)\n\t{\n\t\tbInit = true;\n\t\tif (bEmitCarcass)\n\t\t\tAIStartEvent('Carcass', EAITYPE_Visual);\n\t}\n\tSuper.Tick(deltaSeconds);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltaSeconds"
                            ]
                        ],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\tif (bGenerateFlies)\n\t{\n\t\tflyGen = Spawn(Class'FlyGenerator', , , Location, Rotation);\n\t\tif (flyGen != None)\n\t\t\tflyGen.SetBase(self);\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ZoneChange": {
                        "body": "{\n\tSuper.ZoneChange(NewZone);\n\n\t// use the correct mesh for water\n\tif (NewZone.bWaterZone)\n\t\tMesh = Mesh3;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "ZoneChange",
                        "native": false,
                        "param": [
                            [
                                "ZoneInfo",
                                "NewZone"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 671,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "MPLaserEmitter.uc": {
            "body": "class MPLaserEmitter extends Effects;\n\n#exec OBJ LOAD FILE=Effects\n\nvar LaserSpot spot[2];\t\t\t// max of 2 reflections\nvar bool bIsOn;\nvar actor HitActor;\nvar bool bFrozen;\t\t\t\t// are we out of the player's sight?\nvar bool bRandomBeam;\nvar bool bBlueBeam;\t\t\t\t// is this beam blue?\nvar bool bHiddenBeam;\t\t\t// is this beam hidden?\n\nvar LaserProxy proxy;\nvar bool bInitialized;\n\n\nreplication\n{\n\n    reliable if(Role == ROLE_Authority)\n      proxy,bFrozen, spot, bRandomBeam;\n\n    reliable if(Role == ROLE_Authority)\n      bIsOn;\n}\n\nsimulated function CalcTrace(float deltaTime)\n{\n\tlocal vector StartTrace, EndTrace, HitLocation, HitNormal, Reflection;\n\tlocal actor target;\n\tlocal int i, texFlags;\n\tlocal name texName, texGroup;\n\n\tStartTrace = Location;\n\tEndTrace = Location + 5000 * vector(Rotation);\n\tHitActor = None;\n\n\t// trace the path of the reflected beam and draw points at each hit\n\tfor (i=0; i<ArrayCount(spot); i++)\n\t{\n\t\tforeach TraceTexture(class'Actor', target, texName, texGroup, texFlags, HitLocation, HitNormal, EndTrace, StartTrace)\n\t\t{\n\t\t\tif ((target.DrawType == DT_None) || target.bHidden)\n\t\t\t{\n\t\t\t\t// do nothing - keep on tracing\n\t\t\t}\n\t\t\telse if ((target == Level) || target.IsA('Mover'))\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tHitActor = target;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n        if(spot[i] != none)\n        {\n\t\t    Reflection = MirrorVectorByNormal(Normal(spot[i].location - StartTrace), HitNormal);\n\t\t    StartTrace = HitLocation + HitNormal;\n\t\t    EndTrace = Reflection * 10000;\n        }\n\n        if(Level.NetMode != NM_DedicatedServer)\n        {\n            //GetPlayerPawn().ClientMessage(\"calcing:\"@deltaTime);\n\t    \t// draw first beam\n\t\t\tif (i == 0)\n\t\t\t{\n\t\t   \t\t// log(\"drawing at rot:\"@Rotation);\n\t\t\t\tif (MPLaserIterator(RenderInterface) != None)\n\t\t\t\t    MPLaserIterator(RenderInterface).AddBeam(i, Location, rotator(spot[i].location - Location), VSize(Location - spot[i].location));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (MPLaserIterator(RenderInterface) != None)\n\t\t\t\t\tMPLaserIterator(RenderInterface).AddBeam(i, StartTrace - HitNormal, Rotator(Reflection), VSize(StartTrace - spot[i].location - HitNormal));\n\t\t\t}\n        }\n        if(level.netmode != NM_Client)\n        {\n\t\t\tif (spot[i] == None)\n\t\t\t{\n\t\t\t\tspot[i] = Spawn(class'LaserSpot', Self, , HitLocation, Rotator(HitNormal));\n\t\t\t\tspot[i].RemoteRole=ROLE_DumbProxy;\n\t\t\t\tspot[i].bAlwaysRelevant=true;\n\t\t\t\tspot[i].NetUpdateFrequency=10;\n\t\t\t\tif (bBlueBeam && (spot[i] != None))\n\t\t\t\t\tspot[i].Skin = Texture'LaserSpot2';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t   // Broadcastmessage(\"oldloc=\"$spot[i].location$\", newloc=\"$hitlocation);\n\t\t\t\tspot[i].SetLocation(HitLocation);\n\t\t\t\tspot[i].SetRotation(Rotator(HitNormal));\n\t\t\t}\n        }\n\t\t// don't reflect any more if we don't hit a mirror\n\t\t// 0x08000000 is the PF_Mirrored flag from UnObj.h\n\t\tif ((texFlags & 0x08000000) == 0)\n\t\t{\n\t\t\t// kill all of the other spots after this one\n\t\t\tif (i < ArrayCount(spot)-1)\n\t\t\t{\n\t\t\t\tdo\n\t\t\t\t{\n\t\t\t\t\ti++;\n\t\t\t\t\tif(level.netmode != NM_Client)\n\t\t\t\t\t{\n\t\t\t\t\t    if (spot[i] != None)\n\t\t\t\t\t    {\n\t\t\t\t  \t        spot[i].Destroy();\n\t\t\t\t  \t        spot[i] = None;\n\t\t\t\t  \t    }\n\t\t  \t        }\n\t\t  \t        else if(Level.NetMode != NM_DedicatedServer)\n\t\t\t\t\t\tif (MPLaserIterator(RenderInterface) != None)\n\t\t\t\t\t\t\tMPLaserIterator(RenderInterface).DeleteBeam(i);\n\n\t\t\t\t} until (i>=ArrayCount(spot)-1);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\n\t}\n}\n\nsimulated function TurnOn()\n{\n\tif (!bIsOn)\n\t{\n\t\tbIsOn = True;\n\t\tHitActor = None;\n\t\t//CalcTrace(0.0);\n\t\tif (!bHiddenBeam)\n\t\t{\n\t\t\tproxy.DrawType=DT_Mesh;\n            proxy.bHidden = False;\n\t\t}\n        SoundVolume = 45;\n\t}\n}\n\nsimulated function TurnOff()\n{\n\tlocal int i;\n\n\tif (bIsOn)\n\t{\n\t\tfor (i=0; i<ArrayCount(spot); i++)\n\t\t\tif (spot[i] != None)\n\t\t\t{\n\t\t\t\tspot[i].Destroy();\n\t\t\t\tspot[i] = None;\n\t\t\t}\n\n\t\tHitActor = None;\n\t\tbIsOn = False;\n\n\t\tif (!bHiddenBeam)\n\t\t{\n\t\t    proxy.DrawType=DT_None;\n\t\t\tproxy.bHidden = True;\n\t\t}\n\t\tSoundVolume = 0;\n\t}\n}\n\nsimulated function Destroyed()\n{\n\tTurnOff();\n\n\tif (proxy != None)\n\t{\n\t\tproxy.Destroy();\n\t\tproxy = None;\n\t}\n\n\tSuper.Destroyed();\n}\n\nsimulated function Tick(float deltaTime)\n{\n\tlocal DeusExPlayer player;\n\tlocal int i;\n\n\t// check for visibility\n\tplayer = DeusExPlayer(GetPlayerPawn());\n\n\tif (bIsOn)\n\t{\n\t\t// if we are a weapon's laser sight, do not freeze us\n\t\tif ((Owner != None) && (Owner.IsA('Weapon') || Owner.IsA('ScriptedPawn')))\n\t\t\tbFrozen = False;\n\t\telse if (proxy != None)\n\t\t{\n\t\t\t// if we are close, say 60 feet\n\t\t\tif (proxy.DistanceFromPlayer < 960)\n\t\t\t\tbFrozen = False;\n\t\t\telse\n\t\t\t{\n\t\t\t\t// can the player see the generator?\n\t\t\t\tif (proxy.LastRendered() <= 2.0)\n\t\t\t\t\tbFrozen = False;\n\t\t\t\telse\n\t\t\t\t\tbFrozen = True;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\tbFrozen = True;\n\n\t\tif (bFrozen)\n\t\t\treturn;\n\n\t\t\n\t\tCalcTrace(deltaTime);\n\t}\n}\n\nsimulated function PostBeginPlay()\n{\n\tSuper.PostBeginPlay();\n\tif (proxy == None && level.netMode != NM_Client)\n\t{\n\t\tproxy = Spawn(class'LaserProxy',,, Location, Rotation);\n\t\tif(proxy != none)\n\t\t{\n\t\t    proxy.bAlwaysRelevant=bAlwaysRelevant;\n\t\t    proxy.NetUpdateFrequency=NetUpdateFrequency;\n\t\t}\n\t\t//proxy.Mesh=LodMesh'DeusExItems.NanoSwordPickup';\n\t\tif(bBlueBeam)\n\t\t  SetBlueBeam();\n\t\t//broadcastmessage(\"postbeginplay server(\"$level.netmode$\").. proxy:\"@proxy@\"  proxyrot:\"@proxy.rotation@\"  skin:\"@proxy.Skin);\n    }\n\tif(level.netMode != NM_DedicatedServer)\n      SetTimer(0.5,false);\n//    log(\"pbp\");\n}\n\nsimulated function Timer()\n{\n    if(level.NetMode != NM_DedicatedServer)\n\t{\n\t\t//GetPlayerPawn().ClientMessage(\"timer called clientside(\"$level.netmode$\").. proxy:\"@proxy@\"  proxyrot:\"@proxy.rotation@\"  skin:\"@proxy.Skin);\n\t\tif(Proxy != none)\n\t\t{\n\t\t\t//GetPlayerPawn().ClientMessage(\"PROXY FOUND - setting old rotation (\"$Rotation$\") to new rotation:\"@proxy.Rotation);\n\t\t\tSetRotation(proxy.Rotation);\n\t\t\t//GetPlayerPawn().ClientMessage(\"NEW ROTATION:\"@Rotation);\n\t\t\tbInitialized=true;\n\t\t\t\n\t\t}\n\t\telse\n\t\t\tSetTimer(0.5,false);\n\t}\n//      log(\"setting rotation to\"@owner.Rotation);\n\t// create our proxy laser beam\n\n}\n\nfunction SetBlueBeam()\n{\n\tbBlueBeam = True;\n\tif (proxy != None)\n\t\tproxy.Skin = Texture'LaserBeam2';\n}\n\nfunction SetHiddenBeam(bool bHide)\n{\n\tbHiddenBeam = bHide;\n\tif (proxy != None)\n\t\tproxy.bHidden = bHide;\n}\n\ndefaultproperties\n{\n     bBlueBeam=True\n     bAlwaysRelevant=True\n     SoundRadius=16\n     AmbientSound=Sound'Ambient.Ambient.Laser'\n     CollisionRadius=40.000000\n     CollisionHeight=40.000000\n     NetUpdateFrequency=15.000000\n     RenderIteratorClass=Class'PartyStuff.MPLaserIterator'\n}\n",
            "name": "MPLaserEmitter.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bBlueBeam=True",
                    "bAlwaysRelevant=True",
                    "SoundRadius=16",
                    "AmbientSound=Sound'Ambient.Ambient.Laser'",
                    "CollisionRadius=40.000000",
                    "CollisionHeight=40.000000",
                    "NetUpdateFrequency=15.000000",
                    "RenderIteratorClass=Class'PartyStuff.MPLaserIterator'"
                ],
                "exec": [
                    "#exec OBJ LOAD FILE=Effects"
                ],
                "extends": "Effects",
                "functions": {
                    "CalcTrace": {
                        "body": "{\n\n\tStartTrace = Location;\n\tEndTrace = Location + 5000 * vector(Rotation);\n\tHitActor = None;\n\n\t// trace the path of the reflected beam and draw points at each hit\n\tfor (i=0; i<ArrayCount(spot); i++)\n\t{\n\t\tforeach TraceTexture(class'Actor', target, texName, texGroup, texFlags, HitLocation, HitNormal, EndTrace, StartTrace)\n\t\t{\n\t\t\tif ((target.DrawType == DT_None) || target.bHidden)\n\t\t\t{\n\t\t\t\t// do nothing - keep on tracing\n\t\t\t}\n\t\t\telse if ((target == Level) || target.IsA('Mover'))\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tHitActor = target;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n        if(spot[i] != none)\n        {\n\t\t    Reflection = MirrorVectorByNormal(Normal(spot[i].location - StartTrace), HitNormal);\n\t\t    StartTrace = HitLocation + HitNormal;\n\t\t    EndTrace = Reflection * 10000;\n        }\n\n        if(Level.NetMode != NM_DedicatedServer)\n        {\n            //GetPlayerPawn().ClientMessage(\"calcing:\"@deltaTime);\n\t    \t// draw first beam\n\t\t\tif (i == 0)\n\t\t\t{\n\t\t   \t\t// log(\"drawing at rot:\"@Rotation);\n\t\t\t\tif (MPLaserIterator(RenderInterface) != None)\n\t\t\t\t    MPLaserIterator(RenderInterface).AddBeam(i, Location, rotator(spot[i].location - Location), VSize(Location - spot[i].location));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (MPLaserIterator(RenderInterface) != None)\n\t\t\t\t\tMPLaserIterator(RenderInterface).AddBeam(i, StartTrace - HitNormal, Rotator(Reflection), VSize(StartTrace - spot[i].location - HitNormal));\n\t\t\t}\n        }\n        if(level.netmode != NM_Client)\n        {\n\t\t\tif (spot[i] == None)\n\t\t\t{\n\t\t\t\tspot[i] = Spawn(class'LaserSpot', Self, , HitLocation, Rotator(HitNormal));\n\t\t\t\tspot[i].RemoteRole=ROLE_DumbProxy;\n\t\t\t\tspot[i].bAlwaysRelevant=true;\n\t\t\t\tspot[i].NetUpdateFrequency=10;\n\t\t\t\tif (bBlueBeam && (spot[i] != None))\n\t\t\t\t\tspot[i].Skin = Texture'LaserSpot2';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t   // Broadcastmessage(\"oldloc=\"$spot[i].location$\", newloc=\"$hitlocation);\n\t\t\t\tspot[i].SetLocation(HitLocation);\n\t\t\t\tspot[i].SetRotation(Rotator(HitNormal));\n\t\t\t}\n        }\n\t\t// don't reflect any more if we don't hit a mirror\n\t\t// 0x08000000 is the PF_Mirrored flag from UnObj.h\n\t\tif ((texFlags & 0x08000000) == 0)\n\t\t{\n\t\t\t// kill all of the other spots after this one\n\t\t\tif (i < ArrayCount(spot)-1)\n\t\t\t{\n\t\t\t\tdo\n\t\t\t\t{\n\t\t\t\t\ti++;\n\t\t\t\t\tif(level.netmode != NM_Client)\n\t\t\t\t\t{\n\t\t\t\t\t    if (spot[i] != None)\n\t\t\t\t\t    {\n\t\t\t\t  \t        spot[i].Destroy();\n\t\t\t\t  \t        spot[i] = None;\n\t\t\t\t  \t    }\n\t\t  \t        }\n\t\t  \t        else if(Level.NetMode != NM_DedicatedServer)\n\t\t\t\t\t\tif (MPLaserIterator(RenderInterface) != None)\n\t\t\t\t\t\t\tMPLaserIterator(RenderInterface).DeleteBeam(i);\n\n\t\t\t\t} until (i>=ArrayCount(spot)-1);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\n\t}\n}",
                        "locals": [
                            "local vector StartTrace, EndTrace, HitLocation, HitNormal, Reflection;",
                            "local actor target;",
                            "local int i, texFlags;",
                            "local name texName, texGroup;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "CalcTrace",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltaTime"
                            ]
                        ],
                        "return": ""
                    },
                    "Destroyed": {
                        "body": "{\n\tTurnOff();\n\n\tif (proxy != None)\n\t{\n\t\tproxy.Destroy();\n\t\tproxy = None;\n\t}\n\n\tSuper.Destroyed();\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Destroyed",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PostBeginPlay": {
                        "body": "{\n\tSuper.PostBeginPlay();\n\tif (proxy == None && level.netMode != NM_Client)\n\t{\n\t\tproxy = Spawn(class'LaserProxy',,, Location, Rotation);\n\t\tif(proxy != none)\n\t\t{\n\t\t    proxy.bAlwaysRelevant=bAlwaysRelevant;\n\t\t    proxy.NetUpdateFrequency=NetUpdateFrequency;\n\t\t}\n\t\t//proxy.Mesh=LodMesh'DeusExItems.NanoSwordPickup';\n\t\tif(bBlueBeam)\n\t\t  SetBlueBeam();\n\t\t//broadcastmessage(\"postbeginplay server(\"$level.netmode$\").. proxy:\"@proxy@\"  proxyrot:\"@proxy.rotation@\"  skin:\"@proxy.Skin);\n    }\n\tif(level.netMode != NM_DedicatedServer)\n      SetTimer(0.5,false);\n//    log(\"pbp\");\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "SetBlueBeam": {
                        "body": "{\n\tbBlueBeam = True;\n\tif (proxy != None)\n\t\tproxy.Skin = Texture'LaserBeam2';\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetBlueBeam",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "SetHiddenBeam": {
                        "body": "{\n\tbHiddenBeam = bHide;\n\tif (proxy != None)\n\t\tproxy.bHidden = bHide;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetHiddenBeam",
                        "native": false,
                        "param": [
                            [
                                "bool",
                                "bHide"
                            ]
                        ],
                        "return": ""
                    },
                    "Tick": {
                        "body": "{\n\n\t// check for visibility\n\tplayer = DeusExPlayer(GetPlayerPawn());\n\n\tif (bIsOn)\n\t{\n\t\t// if we are a weapon's laser sight, do not freeze us\n\t\tif ((Owner != None) && (Owner.IsA('Weapon') || Owner.IsA('ScriptedPawn')))\n\t\t\tbFrozen = False;\n\t\telse if (proxy != None)\n\t\t{\n\t\t\t// if we are close, say 60 feet\n\t\t\tif (proxy.DistanceFromPlayer < 960)\n\t\t\t\tbFrozen = False;\n\t\t\telse\n\t\t\t{\n\t\t\t\t// can the player see the generator?\n\t\t\t\tif (proxy.LastRendered() <= 2.0)\n\t\t\t\t\tbFrozen = False;\n\t\t\t\telse\n\t\t\t\t\tbFrozen = True;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\tbFrozen = True;\n\n\t\tif (bFrozen)\n\t\t\treturn;\n\n\t\t\n\t\tCalcTrace(deltaTime);\n\t}\n}",
                        "locals": [
                            "local DeusExPlayer player;",
                            "local int i;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltaTime"
                            ]
                        ],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n    if(level.NetMode != NM_DedicatedServer)\n\t{\n\t\t//GetPlayerPawn().ClientMessage(\"timer called clientside(\"$level.netmode$\").. proxy:\"@proxy@\"  proxyrot:\"@proxy.rotation@\"  skin:\"@proxy.Skin);\n\t\tif(Proxy != none)\n\t\t{\n\t\t\t//GetPlayerPawn().ClientMessage(\"PROXY FOUND - setting old rotation (\"$Rotation$\") to new rotation:\"@proxy.Rotation);\n\t\t\tSetRotation(proxy.Rotation);\n\t\t\t//GetPlayerPawn().ClientMessage(\"NEW ROTATION:\"@Rotation);\n\t\t\tbInitialized=true;\n\t\t\t\n\t\t}\n\t\telse\n\t\t\tSetTimer(0.5,false);\n\t}\n//      log(\"setting rotation to\"@owner.Rotation);\n\t// create our proxy laser beam\n\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "TurnOff": {
                        "body": "{\n\n\tif (bIsOn)\n\t{\n\t\tfor (i=0; i<ArrayCount(spot); i++)\n\t\t\tif (spot[i] != None)\n\t\t\t{\n\t\t\t\tspot[i].Destroy();\n\t\t\t\tspot[i] = None;\n\t\t\t}\n\n\t\tHitActor = None;\n\t\tbIsOn = False;\n\n\t\tif (!bHiddenBeam)\n\t\t{\n\t\t    proxy.DrawType=DT_None;\n\t\t\tproxy.bHidden = True;\n\t\t}\n\t\tSoundVolume = 0;\n\t}\n}",
                        "locals": [
                            "local int i;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TurnOff",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "TurnOn": {
                        "body": "{\n\tif (!bIsOn)\n\t{\n\t\tbIsOn = True;\n\t\tHitActor = None;\n\t\t//CalcTrace(0.0);\n\t\tif (!bHiddenBeam)\n\t\t{\n\t\t\tproxy.DrawType=DT_Mesh;\n            proxy.bHidden = False;\n\t\t}\n        SoundVolume = 45;\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TurnOn",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 290,
                "replication": "",
                "states": [],
                "variables": [
                    "var LaserSpot spot[2];\t\t\t// max of 2 reflections",
                    "var bool bIsOn;",
                    "var actor HitActor;",
                    "var bool bFrozen;\t\t\t\t// are we out of the player's sight?",
                    "var bool bRandomBeam;",
                    "var bool bBlueBeam;\t\t\t\t// is this beam blue?",
                    "var bool bHiddenBeam;\t\t\t// is this beam hidden?",
                    "var LaserProxy proxy;",
                    "var bool bInitialized;"
                ]
            }
        },
        "MPLaserIterator.uc": {
            "body": "class MPLaserIterator extends LaserIterator;\n\nfunction sBeam getBeam(int i)\n{\n    return beams[i];\n}\n\nfunction Init(PlayerPawn Camera)\n{\n\tlocal MPLaserEmitter Owner;\n\tlocal int i;\n\n\tOwner = MPLaserEmitter(Outer);\n\tif (Owner != None)\n\t{\n\t\tMaxItems = 0;\n\t\tnextItem = 0;\n\t\tprevLoc = Owner.Location;\n\t\tprevRand = vect(0,0,0);\n\t\tsavedLoc = Owner.Location;\n\t\tsavedRot = Owner.Rotation;\n\t\tproxy = Owner.proxy;\n\t\tbRandomBeam = Owner.bRandomBeam;\n\t\tif (!Owner.bFrozen && !Owner.bHiddenBeam)\n\t\t{\n\t\t\t// set MaxItems based on length of beams\n\t\t\tfor (i=0; i<ArrayCount(Beams); i++)\n\t\t\t\tif (Beams[i].bActive)\n\t\t\t\t\tMaxItems += Beams[i].numSegments;\n\n\t\t\t// make sure we render the last one\n\t\t\tif (MaxItems > 0)\n\t\t\t\tMaxItems++;\n\t\t}\n\t}\n}\n\ndefaultproperties\n{\n}\n",
            "name": "MPLaserIterator.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "LaserIterator",
                "functions": {
                    "Init": {
                        "body": "{\n\n\tOwner = MPLaserEmitter(Outer);\n\tif (Owner != None)\n\t{\n\t\tMaxItems = 0;\n\t\tnextItem = 0;\n\t\tprevLoc = Owner.Location;\n\t\tprevRand = vect(0,0,0);\n\t\tsavedLoc = Owner.Location;\n\t\tsavedRot = Owner.Rotation;\n\t\tproxy = Owner.proxy;\n\t\tbRandomBeam = Owner.bRandomBeam;\n\t\tif (!Owner.bFrozen && !Owner.bHiddenBeam)\n\t\t{\n\t\t\t// set MaxItems based on length of beams\n\t\t\tfor (i=0; i<ArrayCount(Beams); i++)\n\t\t\t\tif (Beams[i].bActive)\n\t\t\t\t\tMaxItems += Beams[i].numSegments;\n\n\t\t\t// make sure we render the last one\n\t\t\tif (MaxItems > 0)\n\t\t\t\tMaxItems++;\n\t\t}\n\t}\n}",
                        "locals": [
                            "local MPLaserEmitter Owner;",
                            "local int i;"
                        ],
                        "modifiers": [],
                        "name": "Init",
                        "native": false,
                        "param": [
                            [
                                "PlayerPawn",
                                "Camera"
                            ]
                        ],
                        "return": ""
                    },
                    "getBeam": {
                        "body": "{\n    return beams[i];\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "getBeam",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "i"
                            ]
                        ],
                        "return": "sBeam"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 41,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "MPLaserTrigger.uc": {
            "body": "class MPLaserTrigger extends Trigger;\n\nvar MPLaserEmitter emitter;\nvar() bool bIsOn;\nvar() bool bNoAlarm;\t\t\t// if True, does NOT sound alarm\nvar actor LastHitActor;\nvar bool bConfused;\t\t\t\t// used when hit by EMP\nvar float confusionTimer;\t\t// how long until trigger resumes normal operation\nvar() float confusionDuration;\t// how long does EMP hit last?\nvar int HitPoints;\nvar int minDamageThreshold;\nvar float lastAlarmTime;\t\t// last time the alarm was sounded\nvar int alarmTimeout;\t\t\t// how long before the alarm silences itself\nvar actor triggerActor;\t\t\t// actor which last triggered the alarm\nvar vector actorLocation;\t\t// last known location of actor that triggered alarm\nvar() bool bDisableAtStart; //Added to provide a way to start the lasers disabled\n\nreplication\n{\n    reliable if(Role == ROLE_Authority)\n      bConfused,bIsOn;\n}\n\nsingular function Touch(Actor Other)\n{\n\t// does nothing when touched\n}\n\nfunction BeginAlarm()\n{\n\tAmbientSound = Sound'Klaxon2';\n\tSoundVolume = 128;\n\tSoundRadius = 64;\n\tlastAlarmTime = Level.TimeSeconds;\n\tAIStartEvent('Alarm', EAITYPE_Audio, SoundVolume/255.0, 25*(SoundRadius+1));\n\n\t// make sure we can't go into stasis while we're alarming\n\tbStasis = False;\n}\n\nfunction EndAlarm()\n{\n\tAmbientSound = None;\n\tlastAlarmTime = 0;\n\tAIEndEvent('Alarm', EAITYPE_Audio);\n\n\t// reset our stasis info\n\tbStasis = Default.bStasis;\n}\n\nsimulated function Tick(float deltaTime)\n{\n\tlocal Actor A;\n\tlocal AdaptiveArmor armor;\n\tlocal bool bTrigger;\n\n\tif (emitter != None)\n\t{\n\t\t// shut off the alarm if the timeout has expired\n\t\tif (lastAlarmTime != 0)\n\t\t{\n\t\t\tif (Level.TimeSeconds - lastAlarmTime >= alarmTimeout)\n\t\t\t\tEndAlarm();\n\t\t}\n\n\t\t// if we've been EMP'ed, act confused\n\t\tif (bConfused && bIsOn)\n\t\t{\n\t\t\tconfusionTimer += deltaTime;\n\n\t\t\t// randomly turn on/off the beam\n\t\t\tif (FRand() > 0.95)\n\t\t\t\temitter.TurnOn();\n\t\t\telse\n\t\t\t\temitter.TurnOff();\n\n\t\t\tif (confusionTimer > confusionDuration)\n\t\t\t{\n\t\t\t\tbConfused = False;\n\t\t\t\tconfusionTimer = 0;\n\t\t\t\temitter.TurnOn();\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\t//emitter.SetLocation(Location);\n\t\t//emitter.SetRotation(Rotation);\n\n\t\tif (!bNoAlarm)\n\t\t{\n\t\t\tif ((emitter.HitActor != None) && (LastHitActor != emitter.HitActor))\n\t\t\t{\n\t\t\t\t// TT_PlayerProximity actually works with decorations, too\n\t\t\t\tif (IsRelevant(emitter.HitActor) ||\n\t\t\t\t\t((TriggerType == TT_PlayerProximity) && emitter.HitActor.IsA('Decoration')))\n\t\t\t\t{\n\t\t\t\t\tbTrigger = True;\n\n\t\t\t\t\tif (emitter.HitActor.IsA('DeusExPlayer'))\n\t\t\t\t\t{\n\t\t\t\t\t\t// check for adaptive armor - makes the player invisible\n\t\t\t\t\t\tforeach AllActors(class'AdaptiveArmor', armor)\n\t\t\t\t\t\t\tif ((armor.Owner == emitter.HitActor) && armor.bActive)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tbTrigger = False;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (bTrigger)\n\t\t\t\t\t{\n\t\t\t\t\t\t// now, the trigger sounds its own alarm\n\t\t\t\t\t\tif (AmbientSound == None)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttriggerActor = emitter.HitActor;\n\t\t\t\t\t\t\tactorLocation = emitter.HitActor.Location - vect(0,0,1)*(emitter.HitActor.CollisionHeight-1);\n\t\t\t\t\t\t\tBeginAlarm();\n\t\t\t\t\t\t\tProcessTriggers(emitter.HitActor);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// play \"beam broken\" sound\n\t\t\t\t\t\tPlaySound(sound'Beep2',,,, 1280, 3.0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tLastHitActor = emitter.HitActor;\n\t}\n}\n\nstate() NormalTrigger\n{\n\n// if we are triggered, turn us on\nfunction Trigger(Actor Other, Pawn Instigator)\n{\n\tif (bConfused)\n\t\treturn;\n\n\tif (emitter != None)\n\t{\n\t\tif (!bIsOn)\n\t\t{\n\t\t\temitter.TurnOn();\n\t\t\tbIsOn = True;\n\t\t\tLastHitActor = None;\n\t\t\tMultiSkins[1] = Texture'LaserSpot1';\n\t\t}\n\t}\n\n\tSuper.Trigger(Other, Instigator);\n}\n\n// if we are untriggered, turn us off\nfunction UnTrigger(Actor Other, Pawn Instigator)\n{\n\tif (bConfused)\n\t\treturn;\n\n\tif (emitter != None)\n\t{\n\t\tif (bIsOn)\n\t\t{\n\t\t\temitter.TurnOff();\n\t\t\tbIsOn = False;\n\t\t\tLastHitActor = None;\n\t\t\tMultiSkins[1] = Texture'BlackMaskTex';\n\t\t\tEndAlarm();\n\t\t}\n\t}\n\n\tSuper.UnTrigger(Other, Instigator);\n}\n}\n\nstate() OtherTriggerToggles\n{\n\n// if we are triggered, turn us on\nfunction Trigger(Actor Other, Pawn Instigator)\n{\n\tif (bConfused)\n\t\treturn;\n\n\tif (emitter != None)\n\t{\n\t\tif (!bIsOn)\n\t\t{\n\t\t\temitter.TurnOn();\n\t\t\tbIsOn = True;\n\t\t\tLastHitActor = None;\n\t\t\tMultiSkins[1] = Texture'LaserSpot1';\n\t\t}\n\t\telse\n\t\t{\n\t\t\temitter.TurnOff();\n\t\t\tbIsOn = False;\n\t\t\tLastHitActor = None;\n\t\t\tMultiSkins[1] = Texture'BlackMaskTex';\n\t\t\tEndAlarm();\n\t\t}\n\t}\n\n\tSuper.Trigger(Other, Instigator);\n}\n\n// no untrigger\nfunction UnTrigger(Actor Other, Pawn Instigator)\n{\n}\n\n}\n\nfunction BeginPlay()\n{\n\tSuper.BeginPlay();\n\n\tLastHitActor = None;\n\temitter = Spawn(class'MPLaserEmitter',self,,location,rotation);\n\n\tif (emitter != None)\n\t{\n\t\temitter.TurnOn();\n\t\tbIsOn = True;\n\n\t\t// turn off the sound if we should\n\t\tif (SoundVolume == 0)\n\t\t\temitter.AmbientSound = None;\n\t}\n\telse\n\t\tbIsOn = False;\n\t\t\n\tif(bDisableAtStart)\n\t{\n\t\tTrigger(None, None);\n\t}\n}\n\nfunction ProcessTriggers(Actor Inst)\n{\n\tlocal Actor A;\n\t\n\tforeach AllActors(class'Actor', A, Event)\n\t{\n\t\tA.Trigger(Self, Pawn(Inst));\n\t}\n}\n\nfunction TakeDamage(int Damage, Pawn EventInstigator, vector HitLocation, vector Momentum, name DamageType)\n{\n\tlocal MetalFragment frag;\n\n\tif ((DamageType == 'EMP') || (DamageType == 'Exploded') || (DamageType == 'Shot'))\n\t{\n\t\tconfusionTimer = 0;\n\t\tif (!bConfused)\n\t\t{\n\t\t\tbConfused = True;\n\t\t\tPlaySound(sound'EMPZap', SLOT_None,,, 1280);\n\t\t}\n\t}\n\t/*else if ((DamageType == 'Exploded') || (DamageType == 'Shot'))\n\t{\n\t\tif (Damage >= minDamageThreshold)\n\t\t\tHitPoints -= Damage;\n\n\t\tif (HitPoints <= 0)\n\t\t{\n\t\t\tfrag = Spawn(class'MetalFragment', Owner);\n\t\t\tif (frag != None)\n\t\t\t{\n\t\t\t\tfrag.Instigator = EventInstigator;\n\t\t\t\tfrag.CalcVelocity(Momentum,0);\n\t\t\t\tfrag.DrawScale = 0.5*FRand();\n\t\t\t\tfrag.Skin = GetMeshTexture();\n\t\t\t}\n\n\t\t\tDestroy();\n\t\t}\n\t}*/\n}\n\nfunction Destroyed()\n{\n\tif (emitter != None)\n\t{\n\t\temitter.Destroy();\n\t\temitter = None;\n\t}\n\n\tSuper.Destroyed();\n}\n\ndefaultproperties\n{\n     bIsOn=True\n     confusionDuration=10.000000\n     HitPoints=50\n     minDamageThreshold=50\n     alarmTimeout=30\n     bHidden=False\n     InitialState=OtherTriggerToggles\n     bDirectional=True\n     Mesh=LodMesh'DeusExDeco.LaserEmitter'\n     CollisionRadius=2.500000\n     CollisionHeight=2.500000\n}\n",
            "name": "MPLaserTrigger.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bIsOn=True",
                    "confusionDuration=10.000000",
                    "HitPoints=50",
                    "minDamageThreshold=50",
                    "alarmTimeout=30",
                    "bHidden=False",
                    "InitialState=OtherTriggerToggles",
                    "bDirectional=True",
                    "Mesh=LodMesh'DeusExDeco.LaserEmitter'",
                    "CollisionRadius=2.500000",
                    "CollisionHeight=2.500000"
                ],
                "exec": [],
                "extends": "Trigger",
                "functions": {
                    "BeginAlarm": {
                        "body": "{\n\tAmbientSound = Sound'Klaxon2';\n\tSoundVolume = 128;\n\tSoundRadius = 64;\n\tlastAlarmTime = Level.TimeSeconds;\n\tAIStartEvent('Alarm', EAITYPE_Audio, SoundVolume/255.0, 25*(SoundRadius+1));\n\n\t// make sure we can't go into stasis while we're alarming\n\tbStasis = False;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "BeginAlarm",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "BeginPlay": {
                        "body": "{\n\tSuper.BeginPlay();\n\n\tLastHitActor = None;\n\temitter = Spawn(class'MPLaserEmitter',self,,location,rotation);\n\n\tif (emitter != None)\n\t{\n\t\temitter.TurnOn();\n\t\tbIsOn = True;\n\n\t\t// turn off the sound if we should\n\t\tif (SoundVolume == 0)\n\t\t\temitter.AmbientSound = None;\n\t}\n\telse\n\t\tbIsOn = False;\n\t\t\n\tif(bDisableAtStart)\n\t{\n\t\tTrigger(None, None);\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "BeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Destroyed": {
                        "body": "{\n\tif (emitter != None)\n\t{\n\t\temitter.Destroy();\n\t\temitter = None;\n\t}\n\n\tSuper.Destroyed();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Destroyed",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "EndAlarm": {
                        "body": "{\n\tAmbientSound = None;\n\tlastAlarmTime = 0;\n\tAIEndEvent('Alarm', EAITYPE_Audio);\n\n\t// reset our stasis info\n\tbStasis = Default.bStasis;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "EndAlarm",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ProcessTriggers": {
                        "body": "{\n\t\n\tforeach AllActors(class'Actor', A, Event)\n\t{\n\t\tA.Trigger(Self, Pawn(Inst));\n\t}\n}",
                        "locals": [
                            "local Actor A;"
                        ],
                        "modifiers": [],
                        "name": "ProcessTriggers",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Inst"
                            ]
                        ],
                        "return": ""
                    },
                    "TakeDamage": {
                        "body": "{\n\n\tif ((DamageType == 'EMP') || (DamageType == 'Exploded') || (DamageType == 'Shot'))\n\t{\n\t\tconfusionTimer = 0;\n\t\tif (!bConfused)\n\t\t{\n\t\t\tbConfused = True;\n\t\t\tPlaySound(sound'EMPZap', SLOT_None,,, 1280);\n\t\t}\n\t}\n\t/*else if ((DamageType == 'Exploded') || (DamageType == 'Shot'))\n\t{\n\t\tif (Damage >= minDamageThreshold)\n\t\t\tHitPoints -= Damage;\n\n\t\tif (HitPoints <= 0)\n\t\t{\n\t\t\tfrag = Spawn(class'MetalFragment', Owner);\n\t\t\tif (frag != None)\n\t\t\t{\n\t\t\t\tfrag.Instigator = EventInstigator;\n\t\t\t\tfrag.CalcVelocity(Momentum,0);\n\t\t\t\tfrag.DrawScale = 0.5*FRand();\n\t\t\t\tfrag.Skin = GetMeshTexture();\n\t\t\t}\n\n\t\t\tDestroy();\n\t\t}\n\t}*/\n}",
                        "locals": [
                            "local MetalFragment frag;"
                        ],
                        "modifiers": [],
                        "name": "TakeDamage",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "Damage"
                            ],
                            [
                                "Pawn",
                                "EventInstigator"
                            ],
                            [
                                "vector",
                                "HitLocation"
                            ],
                            [
                                "vector",
                                "Momentum"
                            ],
                            [
                                "name",
                                "DamageType"
                            ]
                        ],
                        "return": ""
                    },
                    "Tick": {
                        "body": "{\n\n\tif (emitter != None)\n\t{\n\t\t// shut off the alarm if the timeout has expired\n\t\tif (lastAlarmTime != 0)\n\t\t{\n\t\t\tif (Level.TimeSeconds - lastAlarmTime >= alarmTimeout)\n\t\t\t\tEndAlarm();\n\t\t}\n\n\t\t// if we've been EMP'ed, act confused\n\t\tif (bConfused && bIsOn)\n\t\t{\n\t\t\tconfusionTimer += deltaTime;\n\n\t\t\t// randomly turn on/off the beam\n\t\t\tif (FRand() > 0.95)\n\t\t\t\temitter.TurnOn();\n\t\t\telse\n\t\t\t\temitter.TurnOff();\n\n\t\t\tif (confusionTimer > confusionDuration)\n\t\t\t{\n\t\t\t\tbConfused = False;\n\t\t\t\tconfusionTimer = 0;\n\t\t\t\temitter.TurnOn();\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\t//emitter.SetLocation(Location);\n\t\t//emitter.SetRotation(Rotation);\n\n\t\tif (!bNoAlarm)\n\t\t{\n\t\t\tif ((emitter.HitActor != None) && (LastHitActor != emitter.HitActor))\n\t\t\t{\n\t\t\t\t// TT_PlayerProximity actually works with decorations, too\n\t\t\t\tif (IsRelevant(emitter.HitActor) ||\n\t\t\t\t\t((TriggerType == TT_PlayerProximity) && emitter.HitActor.IsA('Decoration')))\n\t\t\t\t{\n\t\t\t\t\tbTrigger = True;\n\n\t\t\t\t\tif (emitter.HitActor.IsA('DeusExPlayer'))\n\t\t\t\t\t{\n\t\t\t\t\t\t// check for adaptive armor - makes the player invisible\n\t\t\t\t\t\tforeach AllActors(class'AdaptiveArmor', armor)\n\t\t\t\t\t\t\tif ((armor.Owner == emitter.HitActor) && armor.bActive)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tbTrigger = False;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (bTrigger)\n\t\t\t\t\t{\n\t\t\t\t\t\t// now, the trigger sounds its own alarm\n\t\t\t\t\t\tif (AmbientSound == None)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttriggerActor = emitter.HitActor;\n\t\t\t\t\t\t\tactorLocation = emitter.HitActor.Location - vect(0,0,1)*(emitter.HitActor.CollisionHeight-1);\n\t\t\t\t\t\t\tBeginAlarm();\n\t\t\t\t\t\t\tProcessTriggers(emitter.HitActor);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// play \"beam broken\" sound\n\t\t\t\t\t\tPlaySound(sound'Beep2',,,, 1280, 3.0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tLastHitActor = emitter.HitActor;\n\t}\n}",
                        "locals": [
                            "local Actor A;",
                            "local AdaptiveArmor armor;",
                            "local bool bTrigger;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltaTime"
                            ]
                        ],
                        "return": ""
                    },
                    "Touch": {
                        "body": "{\n\t// does nothing when touched\n}",
                        "locals": [],
                        "modifiers": [
                            "singular"
                        ],
                        "name": "Touch",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Other"
                            ]
                        ],
                        "return": ""
                    },
                    "Trigger": {
                        "body": "{\n\tif (bConfused)\n\t\treturn;\n\n\tif (emitter != None)\n\t{\n\t\tif (!bIsOn)\n\t\t{\n\t\t\temitter.TurnOn();\n\t\t\tbIsOn = True;\n\t\t\tLastHitActor = None;\n\t\t\tMultiSkins[1] = Texture'LaserSpot1';\n\t\t}\n\t\telse\n\t\t{\n\t\t\temitter.TurnOff();\n\t\t\tbIsOn = False;\n\t\t\tLastHitActor = None;\n\t\t\tMultiSkins[1] = Texture'BlackMaskTex';\n\t\t\tEndAlarm();\n\t\t}\n\t}\n\n\tSuper.Trigger(Other, Instigator);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Trigger",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Other"
                            ],
                            [
                                "Pawn",
                                "Instigator"
                            ]
                        ],
                        "return": ""
                    },
                    "UnTrigger": {
                        "body": "{\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "UnTrigger",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Other"
                            ],
                            [
                                "Pawn",
                                "Instigator"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 310,
                "replication": "",
                "states": [],
                "variables": [
                    "var MPLaserEmitter emitter;",
                    "var() bool bIsOn;",
                    "var() bool bNoAlarm;\t\t\t// if True, does NOT sound alarm",
                    "var actor LastHitActor;",
                    "var bool bConfused;\t\t\t\t// used when hit by EMP",
                    "var float confusionTimer;\t\t// how long until trigger resumes normal operation",
                    "var() float confusionDuration;\t// how long does EMP hit last?",
                    "var int HitPoints;",
                    "var int minDamageThreshold;",
                    "var float lastAlarmTime;\t\t// last time the alarm was sounded",
                    "var int alarmTimeout;\t\t\t// how long before the alarm silences itself",
                    "var actor triggerActor;\t\t\t// actor which last triggered the alarm",
                    "var vector actorLocation;\t\t// last known location of actor that triggered alarm",
                    "var() bool bDisableAtStart; //Added to provide a way to start the lasers disabled"
                ]
            }
        },
        "MPParticleProxy.uc": {
            "body": "//=============================================================================\n// BarrelToxic.\n//=============================================================================\nclass MPParticleProxy extends Actor;\n\nvar ParticleGenerator pg;\nvar() bool bParticlesUnlit;\nvar() bool bTranslucent;\nvar() float particleDrawScale;\nvar() float checkTime;\nvar() float frequency;\nvar() float riseRate;\nvar() float ejectSpeed;\nvar() float particleLifeSpan;\nvar() bool bRandomEject;\nvar() float numPerSpawn;\nvar() texture particleTexture;\n\t\t\nfunction Destroyed()\n{\n\tif (pg != None)\n\t\tpg.DelayedDestroy();\n\n\tSuper.Destroyed();\n}\n\nsimulated function PostBeginPlay()\n{\nlocal ParticleGenerator ToxicDrip;\n\tSuper.PostBeginPlay();\n\n\tToxicDrip = Spawn(class'ParticleGenerator', Self,, Location, rot(16384,0,0));\n\tif (ToxicDrip != None)\n\t{\n\t\tToxicDrip.bParticlesUnlit = bParticlesUnlit;\n\t\tToxicDrip.bTranslucent = bTranslucent;\n\t\tToxicDrip.particleDrawScale = particleDrawScale;\n\t\tToxicDrip.checkTime = checkTime;\n\t\tToxicDrip.frequency = frequency;\n\t\tToxicDrip.riseRate = riseRate;\n\t\tToxicDrip.ejectSpeed = ejectSpeed;\n\t\tToxicDrip.particleLifeSpan = particleLifeSpan;\n\t\tToxicDrip.bRandomEject = bRandomEject;\n\t\tToxicDrip.numPerSpawn = numPerSpawn;\n\t\tToxicDrip.particleTexture = particleTexture;\n\t\tToxicDrip.SetBase(Self);\n\t\tpg = ToxicDrip;\n\t}\n}\n\ndefaultproperties\n{\n     bParticlesUnlit=True\n     bTranslucent=True\n     particleDrawScale=0.050000\n     checkTime=0.250000\n     Frequency=0.800000\n     RiseRate=5.000000\n     ejectSpeed=10.000000\n     particleLifeSpan=2.000000\n     bRandomEject=True\n     numPerSpawn=2.000000\n     particleTexture=FireTexture'Effects.Smoke.SmokePuff1'\n     bHidden=True\n}\n",
            "name": "MPParticleProxy.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bParticlesUnlit=True",
                    "bTranslucent=True",
                    "particleDrawScale=0.050000",
                    "checkTime=0.250000",
                    "Frequency=0.800000",
                    "RiseRate=5.000000",
                    "ejectSpeed=10.000000",
                    "particleLifeSpan=2.000000",
                    "bRandomEject=True",
                    "numPerSpawn=2.000000",
                    "particleTexture=FireTexture'Effects.Smoke.SmokePuff1'",
                    "bHidden=True"
                ],
                "exec": [],
                "extends": "Actor",
                "functions": {
                    "Destroyed": {
                        "body": "{\n\tif (pg != None)\n\t\tpg.DelayedDestroy();\n\n\tSuper.Destroyed();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Destroyed",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PostBeginPlay": {
                        "body": "{\n\tSuper.PostBeginPlay();\n\n\tToxicDrip = Spawn(class'ParticleGenerator', Self,, Location, rot(16384,0,0));\n\tif (ToxicDrip != None)\n\t{\n\t\tToxicDrip.bParticlesUnlit = bParticlesUnlit;\n\t\tToxicDrip.bTranslucent = bTranslucent;\n\t\tToxicDrip.particleDrawScale = particleDrawScale;\n\t\tToxicDrip.checkTime = checkTime;\n\t\tToxicDrip.frequency = frequency;\n\t\tToxicDrip.riseRate = riseRate;\n\t\tToxicDrip.ejectSpeed = ejectSpeed;\n\t\tToxicDrip.particleLifeSpan = particleLifeSpan;\n\t\tToxicDrip.bRandomEject = bRandomEject;\n\t\tToxicDrip.numPerSpawn = numPerSpawn;\n\t\tToxicDrip.particleTexture = particleTexture;\n\t\tToxicDrip.SetBase(Self);\n\t\tpg = ToxicDrip;\n\t}\n}",
                        "locals": [
                            "local ParticleGenerator ToxicDrip;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 66,
                "replication": "",
                "states": [],
                "variables": [
                    "var ParticleGenerator pg;",
                    "var() bool bParticlesUnlit;",
                    "var() bool bTranslucent;",
                    "var() float particleDrawScale;",
                    "var() float checkTime;",
                    "var() float frequency;",
                    "var() float riseRate;",
                    "var() float ejectSpeed;",
                    "var() float particleLifeSpan;",
                    "var() bool bRandomEject;",
                    "var() float numPerSpawn;",
                    "var() texture particleTexture;"
                ]
            }
        },
        "MSGR.uc": {
            "body": "//=============================================\n// MSGR object\n//=============================================\nClass MSGR extends DeusExDecoration;\n\n//make the glowing thing permenant, do something else for unread\nvar bool bNew, bReturning;\nvar(MSGR) string myMSG, MSGSender, MSGTimestamp;\nvar bool bSentByPlayer;\n\nfunction Tick(float v)\n{\n\t/*if(bNew && LightType != LT_Steady)\n\t{\n\t\tLightHue=0;\n\t\tLightRadius=18;\n\t\tLightSaturation=175;\n\t\tLightType=LT_Steady;\n\t\tLightEffect=LE_NonIncidence;\n\t}*/\n\t\t\n\tif(!bReturning)\n\t{\n\t\tDrawscale+=0.02;\n\t\tif(Drawscale >= 1.5)\n\t\t{\n\t\t\tbReturning=True;\n\t\t}\n\t}\n\telse\n\t{\n\t\tDrawscale-=0.02;\n\t\tif(Drawscale <= 1.0)\n\t\t{\n\t\t\tbReturning=False;\n\t\t}\n\t}\n\n}\n\nfunction Frob(Actor Frobber, Inventory frobWith) \n{\n\tlocal DeusExPlayer P;\n\n\t/*if(bNew)\n\t{\n\t\tbNew=False;\n\t\tLightType=LT_None;\n\t}*/\n\t\n\tP = DeusExPlayer(Frobber);\n//\tP.ClientMessage(\"|P3\"$MSGSender$\"|P3 @ \"$MSGTimestamp);\n\tif(bSentByPlayer)\n\t{\n\t\tP.ClientMessage(\"|P3[\"$MSGSender$\"|P3 @ \"$MSGTimestamp$\"]\");\n\t\tP.ClientMessage(\"|P1\"$myMsg);\n\t}\n\telse\n\t{\n\t\tif(MSGSender != \"\")\n\t\t\tP.ClientMessage(\"|P3[\"$MSGSender$\"|P3]\");\n\t\tP.ClientMessage(\"|P1\"$myMsg);\n\t}\n\t\t\n\t\tif(P.bIsCrouching && P.bAdmin && bSentByPlayer)\n\t\t{\n\t\t\tP.ClientMessage(\"Message deleted.\");\n\t\t\tDestroy();\n\t\t}\n\t\t\n\tSuper.Frob(frobber, frobwith);\n}\n\ndefaultproperties\n{\n     myMSG=\"DEFAULT MSG - REPORT AS BUG\"\n     msgsender=\"NO SENDER DATA\"\n     MSGTimestamp=\"NO:TIME\"\n     bInvincible=True\n     ItemName=\"Player Created Message\"\n     bPushable=False\n     Physics=PHYS_None\n     DrawType=DT_Sprite\n     Style=STY_Translucent\n     Sprite=Texture'DeusExUI.UserInterface.LogIcon'\n     Texture=Texture'DeusExUI.UserInterface.LogIcon'\n     Skin=Texture'DeusExUI.UserInterface.LogIcon'\n     CollisionRadius=25.200001\n     CollisionHeight=25.000000\n     bBlockPlayers=False\n}\n",
            "name": "MSGR.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "myMSG=\"DEFAULT MSG - REPORT AS BUG\"",
                    "msgsender=\"NO SENDER DATA\"",
                    "MSGTimestamp=\"NO:TIME\"",
                    "bInvincible=True",
                    "ItemName=\"Player Created Message\"",
                    "bPushable=False",
                    "Physics=PHYS_None",
                    "DrawType=DT_Sprite",
                    "Style=STY_Translucent",
                    "Sprite=Texture'DeusExUI.UserInterface.LogIcon'",
                    "Texture=Texture'DeusExUI.UserInterface.LogIcon'",
                    "Skin=Texture'DeusExUI.UserInterface.LogIcon'",
                    "CollisionRadius=25.200001",
                    "CollisionHeight=25.000000",
                    "bBlockPlayers=False"
                ],
                "exec": [],
                "extends": "DeusExDecoration",
                "functions": {
                    "Frob": {
                        "body": "{\n\n\t/*if(bNew)\n\t{\n\t\tbNew=False;\n\t\tLightType=LT_None;\n\t}*/\n\t\n\tP = DeusExPlayer(Frobber);\n//\tP.ClientMessage(\"|P3\"$MSGSender$\"|P3 @ \"$MSGTimestamp);\n\tif(bSentByPlayer)\n\t{\n\t\tP.ClientMessage(\"|P3[\"$MSGSender$\"|P3 @ \"$MSGTimestamp$\"]\");\n\t\tP.ClientMessage(\"|P1\"$myMsg);\n\t}\n\telse\n\t{\n\t\tif(MSGSender != \"\")\n\t\t\tP.ClientMessage(\"|P3[\"$MSGSender$\"|P3]\");\n\t\tP.ClientMessage(\"|P1\"$myMsg);\n\t}\n\t\t\n\t\tif(P.bIsCrouching && P.bAdmin && bSentByPlayer)\n\t\t{\n\t\t\tP.ClientMessage(\"Message deleted.\");\n\t\t\tDestroy();\n\t\t}\n\t\t\n\tSuper.Frob(frobber, frobwith);\n}",
                        "locals": [
                            "local DeusExPlayer P;"
                        ],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    },
                    "Tick": {
                        "body": "{\n\t/*if(bNew && LightType != LT_Steady)\n\t{\n\t\tLightHue=0;\n\t\tLightRadius=18;\n\t\tLightSaturation=175;\n\t\tLightType=LT_Steady;\n\t\tLightEffect=LE_NonIncidence;\n\t}*/\n\t\t\n\tif(!bReturning)\n\t{\n\t\tDrawscale+=0.02;\n\t\tif(Drawscale >= 1.5)\n\t\t{\n\t\t\tbReturning=True;\n\t\t}\n\t}\n\telse\n\t{\n\t\tDrawscale-=0.02;\n\t\tif(Drawscale <= 1.0)\n\t\t{\n\t\t\tbReturning=False;\n\t\t}\n\t}\n\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "v"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 92,
                "replication": "",
                "states": [],
                "variables": [
                    "var bool bNew, bReturning;",
                    "var(MSGR) string myMSG, MSGSender, MSGTimestamp;",
                    "var bool bSentByPlayer;"
                ]
            }
        },
        "MagicRing.uc": {
            "body": "//=============================================================================\n// MagicRing.\n//=============================================================================\nclass MagicRing expands SizableEffects;\n\ndefaultproperties\n{\n     LifeSpan=1.500000\n     Skin=Texture'PGAssets.Skins.YellowRay'\n     Mesh=LodMesh'DeusExItems.FlatFX'\n}\n",
            "name": "MagicRing.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "LifeSpan=1.500000",
                    "Skin=Texture'PGAssets.Skins.YellowRay'",
                    "Mesh=LodMesh'DeusExItems.FlatFX'"
                ],
                "exec": [],
                "extends": "SizableEffects",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 12,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "MenuAlert.uc": {
            "body": "//=============================================================================\n// BoxSizeWindow.\n//=============================================================================\nclass MenuAlert expands MenuUIScreenWindow;\n\nvar MenuUIActionButtonWindow SendButton, exitButton;\nvar MenuUIEditWindow editCommand, editPassword;\nvar MenuUIHeaderWindow winText;\nvar localized string exitbuttontext, passwordlabel, sendbuttontext, commandlabel;\nvar DeusExPlayer _windowOwner;\nvar PSComputer Ac;\nvar PSComputerReplicationActor Mastah;\nvar localized string Username;\nvar string Password;\nvar bool bRem;\nvar MenuUIMessageBoxWindow AlertWin;\n\nevent InitWindow()\n{\n   local Window W;\n\n   Super.InitWindow();\n   CreateTextWindow();\n   //SendButton = winButtonBar.AddButton(sendButtonText, HALIGN_Right);\n  // exitButton = winButtonBar.AddButton(exitButtonText, HALIGN_Right);\n\t\n   winClient.SetBackground(Texture'DeusExUI.MaskTexture');\n   winClient.SetBackgroundStyle(DSTY_Modulated);\n\n   W = winClient.NewChild(Class'Window');\n   W.SetSize(ClientWidth, ClientHeight);\n   W.SetBackground(Texture'DeusExDeco.BlackMaskTex');//(Texture'DeusExUI.MaskTexture');\n   W.SetBackgroundStyle(DSTY_normal); //modulated\n   W.Lower();\n}\n\nfunction Crt(string title, string str)\n{\n\tlocal float i;\n\ti = ClientWidth;\n\ti += Len(Str)*10;\n\tSetTitle(title);\n\tCreateMenuLabelX(10, 22, str, winClient);\n\tSetSize(ClientWidth,ClientHeight);\n\tAskParentForReconfigure();\n}\n\nfunction MenuUILabelWindow CreateMenuLabelX(int posX, int posY, String strLabel, Window winParent)\n{\n\tlocal MenuUILabelWindow newLabel;\n\n\tnewLabel = MenuUILabelWindow(winParent.NewChild(Class'MenuUILabelWindow'));\n\n\tnewLabel.SetPos(posX, posY);\n\tnewLabel.SetText(strLabel);\n\tnewLabel.SetWordWrap(True);\n\tnewLabel.SetMinWidth(300);\n\tnewLabel.SetFont(Font'FontMenuSmall_DS');\n\treturn newLabel;\n}\n\nfunction CreateTextWindow()\n{\n\twinText = CreateMenuHeader(21, 13, \"\", winClient);\n\twinText.SetTextAlignments(HALIGN_Center, VALIGN_Center);\n\twinText.SetFont(Font'FontMenuHeaders_DS');\n\twinText.SetWindowAlignments(HALIGN_Full, VALIGN_Full, 20, 14);\n}\n\nfunction SetMessageText( String msgText )\n{\n\twinText.SetText(msgText);\n\n\tAskParentForReconfigure();\n}\n\n\nevent bool VirtualKeyPressed(EInputKey key, bool bRepeat)\n{\n\tlocal bool bHandled;\n\n\tswitch( key )\n\t{\n\t\tcase IK_Enter:\n\t\t\tbHandled = True;\n\t\t\tbreak;\n\t}\n\n\treturn bHandled;\n}\n\nevent bool RawKeyPressed(EInputKey key, EInputState iState, bool bRepeat)\n{\n\tif (key == IK_Enter)// &&//(iState == IST_Release))\n\t{\n\t\treturn False;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\n\ndefaultproperties\n{\n     exitbuttontext=\"Exit\"\n     PasswordLabel=\"Password\"\n     sendbuttontext=\"Send <Enter>\"\n     commandlabel=\"Command\"\n     ClientWidth=600\n     ClientHeight=150\n     clientTextures(0)=Texture'DeusExUI.UserInterface.MenuMessageBoxBackground_1'\n     clientTextures(1)=Texture'DeusExUI.UserInterface.MenuMessageBoxBackground_2'\n     textureRows=3\n     textureCols=2\n     bUsesHelpWindow=False\n}\n",
            "name": "MenuAlert.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "exitbuttontext=\"Exit\"",
                    "PasswordLabel=\"Password\"",
                    "sendbuttontext=\"Send <Enter>\"",
                    "commandlabel=\"Command\"",
                    "ClientWidth=600",
                    "ClientHeight=150",
                    "clientTextures(0)=Texture'DeusExUI.UserInterface.MenuMessageBoxBackground_1'",
                    "clientTextures(1)=Texture'DeusExUI.UserInterface.MenuMessageBoxBackground_2'",
                    "textureRows=3",
                    "textureCols=2",
                    "bUsesHelpWindow=False"
                ],
                "exec": [],
                "extends": "MenuUIScreenWindow",
                "functions": {
                    "CreateMenuLabelX": {
                        "body": "{\n\n\tnewLabel = MenuUILabelWindow(winParent.NewChild(Class'MenuUILabelWindow'));\n\n\tnewLabel.SetPos(posX, posY);\n\tnewLabel.SetText(strLabel);\n\tnewLabel.SetWordWrap(True);\n\tnewLabel.SetMinWidth(300);\n\tnewLabel.SetFont(Font'FontMenuSmall_DS');\n\treturn newLabel;\n}",
                        "locals": [
                            "local MenuUILabelWindow newLabel;"
                        ],
                        "modifiers": [],
                        "name": "CreateMenuLabelX",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "posX"
                            ],
                            [
                                "int",
                                "posY"
                            ],
                            [
                                "String",
                                "strLabel"
                            ],
                            [
                                "Window",
                                "winParent"
                            ]
                        ],
                        "return": "MenuUILabelWindow"
                    },
                    "CreateTextWindow": {
                        "body": "{\n\twinText = CreateMenuHeader(21, 13, \"\", winClient);\n\twinText.SetTextAlignments(HALIGN_Center, VALIGN_Center);\n\twinText.SetFont(Font'FontMenuHeaders_DS');\n\twinText.SetWindowAlignments(HALIGN_Full, VALIGN_Full, 20, 14);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "CreateTextWindow",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Crt": {
                        "body": "{\n\ti = ClientWidth;\n\ti += Len(Str)*10;\n\tSetTitle(title);\n\tCreateMenuLabelX(10, 22, str, winClient);\n\tSetSize(ClientWidth,ClientHeight);\n\tAskParentForReconfigure();\n}",
                        "locals": [
                            "local float i;"
                        ],
                        "modifiers": [],
                        "name": "Crt",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "title"
                            ],
                            [
                                "string",
                                "str"
                            ]
                        ],
                        "return": ""
                    },
                    "InitWindow": {
                        "body": "{\n\n   Super.InitWindow();\n   CreateTextWindow();\n   //SendButton = winButtonBar.AddButton(sendButtonText, HALIGN_Right);\n  // exitButton = winButtonBar.AddButton(exitButtonText, HALIGN_Right);\n\t\n   winClient.SetBackground(Texture'DeusExUI.MaskTexture');\n   winClient.SetBackgroundStyle(DSTY_Modulated);\n\n   W = winClient.NewChild(Class'Window');\n   W.SetSize(ClientWidth, ClientHeight);\n   W.SetBackground(Texture'DeusExDeco.BlackMaskTex');//(Texture'DeusExUI.MaskTexture');\n   W.SetBackgroundStyle(DSTY_normal); //modulated\n   W.Lower();\n}",
                        "locals": [
                            "local Window W;"
                        ],
                        "modifiers": [],
                        "name": "InitWindow",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "RawKeyPressed": {
                        "body": "{\n\tif (key == IK_Enter)// &&//(iState == IST_Release))\n\t{\n\t\treturn False;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "RawKeyPressed",
                        "native": false,
                        "param": [
                            [
                                "EInputKey",
                                "key"
                            ],
                            [
                                "EInputState",
                                "iState"
                            ],
                            [
                                "bool",
                                "bRepeat"
                            ]
                        ],
                        "return": "bool"
                    },
                    "SetMessageText": {
                        "body": "{\n\twinText.SetText(msgText);\n\n\tAskParentForReconfigure();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetMessageText",
                        "native": false,
                        "param": [
                            [
                                "String",
                                "msgText"
                            ]
                        ],
                        "return": ""
                    },
                    "VirtualKeyPressed": {
                        "body": "{\n\n\tswitch( key )\n\t{\n\t\tcase IK_Enter:\n\t\t\tbHandled = True;\n\t\t\tbreak;\n\t}\n\n\treturn bHandled;\n}",
                        "locals": [
                            "local bool bHandled;"
                        ],
                        "modifiers": [],
                        "name": "VirtualKeyPressed",
                        "native": false,
                        "param": [
                            [
                                "EInputKey",
                                "key"
                            ],
                            [
                                "bool",
                                "bRepeat"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 118,
                "replication": "",
                "states": [],
                "variables": [
                    "var MenuUIActionButtonWindow SendButton, exitButton;",
                    "var MenuUIEditWindow editCommand, editPassword;",
                    "var MenuUIHeaderWindow winText;",
                    "var localized string exitbuttontext, passwordlabel, sendbuttontext, commandlabel;",
                    "var DeusExPlayer _windowOwner;",
                    "var PSComputer Ac;",
                    "var PSComputerReplicationActor Mastah;",
                    "var localized string Username;",
                    "var string Password;",
                    "var bool bRem;",
                    "var MenuUIMessageBoxWindow AlertWin;"
                ]
            }
        },
        "Mercury.uc": {
            "body": "//=============================================================================\n// DXLogo.\n//=============================================================================\nclass Mercury extends OutdoorThings;\n\ndefaultproperties\n{\n     bStatic=False\n     Physics=PHYS_Rotating\n     Texture=Texture'DeusExDeco.Skins.DXLogoTex1'\n     Mesh=LodMesh'DeusExDeco.Earth'\n     DrawScale=2.250000\n     bMeshEnviroMap=True\n     CollisionRadius=123.639999\n     CollisionHeight=125.699997\n     bCollideActors=False\n     bCollideWorld=False\n     bBlockActors=False\n     bBlockPlayers=False\n     bFixedRotationDir=True\n     Mass=5000.000000\n     Buoyancy=500.000000\n     RotationRate=(Yaw=8192)\n}\n",
            "name": "Mercury.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bStatic=False",
                    "Physics=PHYS_Rotating",
                    "Texture=Texture'DeusExDeco.Skins.DXLogoTex1'",
                    "Mesh=LodMesh'DeusExDeco.Earth'",
                    "DrawScale=2.250000",
                    "bMeshEnviroMap=True",
                    "CollisionRadius=123.639999",
                    "CollisionHeight=125.699997",
                    "bCollideActors=False",
                    "bCollideWorld=False",
                    "bBlockActors=False",
                    "bBlockPlayers=False",
                    "bFixedRotationDir=True",
                    "Mass=5000.000000",
                    "Buoyancy=500.000000",
                    "RotationRate=(Yaw=8192)"
                ],
                "exec": [],
                "extends": "OutdoorThings",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 25,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "MomsKnife.uc": {
            "body": "//=============================================================================\n// Shuriken.\n//=============================================================================\nclass MomsKnife extends DeusExProjectile;\n\nvar float\tmpDamage;\nvar int\t\tmpAccurateRange;\nvar int\t\tmpMaxRange;\n\n// set it's rotation correctly\nsimulated function Tick(float deltaTime)\n{\n\tlocal Rotator rot;\n\n\tif (bStuck)\n\t\treturn;\n\n\tSuper.Tick(deltaTime);\n\n\tif (Level.Netmode != NM_DedicatedServer)\n\t{\n\t\trot = Rotation;\n\t\trot.Roll += 16384;\n\t\trot.Pitch -= 13384;\n\t\tSetRotation(rot);\n\t}\n}\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tDamage = mpDamage;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t}\n}\n\ndefaultproperties\n{\n     mpDamage=90.000000\n     mpAccurateRange=640\n     mpMaxRange=640\n     bBlood=True\n     bStickToWall=True\n     DamageType=shot\n     AccurateRange=640\n     maxRange=1280\n     bIgnoresNanoDefense=True\n     ItemName=\"Knife\"\n     ItemArticle=\"Mom's\"\n     speed=500.000000\n     MaxSpeed=500.000000\n     Damage=100.000000\n     MomentumTransfer=1000\n     ImpactSound=Sound'DeusExSounds.Generic.BulletHitFlesh'\n     Mesh=LodMesh'DeusExItems.CombatKnifePickup'\n     CollisionRadius=12.650000\n     CollisionHeight=0.800000\n}\n",
            "name": "MomsKnife.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "mpDamage=90.000000",
                    "mpAccurateRange=640",
                    "mpMaxRange=640",
                    "bBlood=True",
                    "bStickToWall=True",
                    "DamageType=shot",
                    "AccurateRange=640",
                    "maxRange=1280",
                    "bIgnoresNanoDefense=True",
                    "ItemName=\"Knife\"",
                    "ItemArticle=\"Mom's\"",
                    "speed=500.000000",
                    "MaxSpeed=500.000000",
                    "Damage=100.000000",
                    "MomentumTransfer=1000",
                    "ImpactSound=Sound'DeusExSounds.Generic.BulletHitFlesh'",
                    "Mesh=LodMesh'DeusExItems.CombatKnifePickup'",
                    "CollisionRadius=12.650000",
                    "CollisionHeight=0.800000"
                ],
                "exec": [],
                "extends": "DeusExProjectile",
                "functions": {
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tDamage = mpDamage;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Tick": {
                        "body": "{\n\n\tif (bStuck)\n\t\treturn;\n\n\tSuper.Tick(deltaTime);\n\n\tif (Level.Netmode != NM_DedicatedServer)\n\t{\n\t\trot = Rotation;\n\t\trot.Roll += 16384;\n\t\trot.Pitch -= 13384;\n\t\tSetRotation(rot);\n\t}\n}",
                        "locals": [
                            "local Rotator rot;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltaTime"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 64,
                "replication": "",
                "states": [],
                "variables": [
                    "var float\tmpDamage;",
                    "var int\t\tmpAccurateRange;",
                    "var int\t\tmpMaxRange;"
                ]
            }
        },
        "MomsKnifeRespawner.uc": {
            "body": "class MomsKnifeRespawner extends PGActors;\nvar PlayerPawn Giver;\n\nfunction Timer()\n{\n\tSilentAdd(class'WeaponMomsKnife', DeusExPlayer(Giver));\ndestroy();\n}\n\nfunction SilentAdd(class<inventory> addClass, DeusExPlayer addTarget)\n{ \n\tlocal Inventory anItem;\n\t\n\tanItem = Spawn(addClass,,,addTarget.Location); \n\tanItem.SpawnCopy(addTarget);\n\tanItem.Destroy();\n\t/*anItem.Instigator = addTarget; \n\tanItem.GotoState('Idle2'); \n\tanItem.bHeldItem = true; \n\tanItem.bTossedOut = false; \n\t\n\tif(Weapon(anItem) != None) \n\t\tWeapon(anItem).GiveAmmo(addTarget); \n\tanItem.GiveTo(addTarget);*/\n}\n\ndefaultproperties\n{\n}\n",
            "name": "MomsKnifeRespawner.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "PGActors",
                "functions": {
                    "SilentAdd": {
                        "body": "{ \n\t\n\tanItem = Spawn(addClass,,,addTarget.Location); \n\tanItem.SpawnCopy(addTarget);\n\tanItem.Destroy();\n\t/*anItem.Instigator = addTarget; \n\tanItem.GotoState('Idle2'); \n\tanItem.bHeldItem = true; \n\tanItem.bTossedOut = false; \n\t\n\tif(Weapon(anItem) != None) \n\t\tWeapon(anItem).GiveAmmo(addTarget); \n\tanItem.GiveTo(addTarget);*/\n}",
                        "locals": [
                            "local Inventory anItem;"
                        ],
                        "modifiers": [],
                        "name": "SilentAdd",
                        "native": false,
                        "param": [
                            [
                                "class<inventory>",
                                "addClass"
                            ],
                            [
                                "DeusExPlayer",
                                "addTarget"
                            ]
                        ],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\tSilentAdd(class'WeaponMomsKnife', DeusExPlayer(Giver));\ndestroy();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 30,
                "replication": "",
                "states": [],
                "variables": [
                    "var PlayerPawn Giver;"
                ]
            }
        },
        "MusicBotWindow.uc": {
            "body": "//=============================================================\n// Permenant song play, plus other enhancements eventually\n//=============================================================\nclass MusicBotWindow extends PlayMusicWindow;\n\nevent InitWindow()\n{\nSuper.InitWindow();\n\nSetTitle(\"Radio\");\nEnableWindow(True);\nShow(True);\n}\n\nevent DestroyWindow()\n{\n}\n\nfunction PlaySong(int rowID)\n{\nlocal String songName;\nlocal Int songSection;\n\nif (btnAmbient.GetToggle())\n songSection = 0;\nelse if (btnCombat.GetToggle())\n songSection = 3;\nelse if (btnConversation.GetToggle())\n songSection = 4;\nelse if (btnOutro.GetToggle())\n songSection = 5;\nelse if (btnDying.GetToggle())\n songSection = 1;\n\nsongName = lstSongs.GetField(rowID, 1);\nplayer.ConsoleCommand(\"Set LevelInfo Song None\");\n\nplayer.PlayMusic(songName, songSection);\n}\n\ndefaultproperties\n{\n}\n",
            "name": "MusicBotWindow.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "PlayMusicWindow",
                "functions": {
                    "DestroyWindow": {
                        "body": "{\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "DestroyWindow",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "InitWindow": {
                        "body": "{\nSuper.InitWindow();\n\nSetTitle(\"Radio\");\nEnableWindow(True);\nShow(True);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "InitWindow",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PlaySong": {
                        "body": "{\n\nif (btnAmbient.GetToggle())\n songSection = 0;\nelse if (btnCombat.GetToggle())\n songSection = 3;\nelse if (btnConversation.GetToggle())\n songSection = 4;\nelse if (btnOutro.GetToggle())\n songSection = 5;\nelse if (btnDying.GetToggle())\n songSection = 1;\n\nsongName = lstSongs.GetField(rowID, 1);\nplayer.ConsoleCommand(\"Set LevelInfo Song None\");\n\nplayer.PlayMusic(songName, songSection);\n}",
                        "locals": [
                            "local String songName;",
                            "local Int songSection;"
                        ],
                        "modifiers": [],
                        "name": "PlaySong",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "rowID"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 44,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "MusicMemory.uc": {
            "body": "class MusicMemory extends PGActors;\n\nvar DeusExPlayer Watcher;\nvar music CurrentSong;\nvar bool bMMLocked;\n\nfunction PostBeginPlay()\n{\n\tSetTimer(5,True);\n}\n\nfunction Timer()\n{\n\tif(Watcher == None)\n\t\tDestroy();\n}\n\ndefaultproperties\n{\n}\n",
            "name": "MusicMemory.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "PGActors",
                "functions": {
                    "PostBeginPlay": {
                        "body": "{\n\tSetTimer(5,True);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\tif(Watcher == None)\n\t\tDestroy();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 21,
                "replication": "",
                "states": [],
                "variables": [
                    "var DeusExPlayer Watcher;",
                    "var music CurrentSong;",
                    "var bool bMMLocked;"
                ]
            }
        },
        "MusicPoint.uc": {
            "body": "//=============================================\n// RestPoint\n//=============================================\nClass MusicPoint extends DeusExDecoration;\n//ADD SMG_MOD RADIO BOT ITEM ON CYClEAMMO\nvar int PlaySlot;\nvar() music myTrackList[10];\nvar() EMusicTransition Transition;\nvar() byte             SongSection;\nvar() byte             CdTrack;\nvar() bool bAffectAllPlayers;\n\nfunction BeginPlay()\n{\nPlaySlot = 0;\n}\n\nfunction bool MMLocked(DeusExPlayer Them)\n{\nlocal MusicMemory MM;\n\tforeach AllActors(class'MusicMemory', MM)\n\t{\n\t\tif(MM.Watcher == Them)\n\t\t{\n\t\t\treturn MM.bMMLocked;\n\t\t}\n\t}\n}\n\nfunction MemorizeMusic(music This, DeusExPlayer Them)\n{\nlocal MusicMemory MM;\n\tforeach AllActors(class'MusicMemory', MM)\n\t{\n\t\tif(MM.Watcher == Them)\n\t\t{\n\t\t\tMM.CurrentSong = This;\n\t\t\t//Log(\"Track memorized.\"@This@them.playerreplicationinfo.playername);\n\t\t\tThem.ClientSetMusic( This, SongSection, CdTrack, Transition );\n\t\t}\n\t}\n}\n\nfunction bool mmIsPlaying(music This, DeusExPlayer Them)\n{\nlocal MusicMemory MM;\nlocal bool bFound;\n\n\tforeach AllActors(class'MusicMemory', MM)\n\t{\n\t\tif(MM.Watcher == Them)\n\t\t{\n\t\t\tbFound=True;\n\t\t\tif(MM.CurrentSong == This)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\t\n\tif(!bFound)\n\t{\n\t\tMM = Spawn(class'MusicMemory');\n\t\tMM.Watcher=Them;\n\t\tLog(\"New music memory.\"@This@them.playerreplicationinfo.playername);\n\t}\n}\n\nfunction Frob(Actor Frobber, Inventory frobWith)\n{\n\tlocal DeusExPlayer P;\n\tlocal Pawn A;\n\n\tif( bAffectAllPlayers )\n\t{\n\t\tPlaySlot++;\n\t\tif(myTrackList[PlaySlot] == None || PlaySlot >= Arraycount(myTrackList))\n\t\t{ \n\t\t\tPlaySlot=0;\n\t\t}\n\t\tBroadcastMessage(DeusExPlayer(Frobber).PlayerReplicationInfo.PlayerName$\"(\"$DeusExPlayer(Frobber).PlayerReplicationInfo.PlayerID$\"): Now playing track: \"$Left(string(myTrackList[PlaySlot]), InStr(string(myTrackList[PlaySlot]), \".\")));\n\t\t\tforeach AllActors(class'DeusExPlayer',P)\n\t\t\t\tif(!mmIsPlaying( myTrackList[PlaySlot], P) && !mmLocked(P))\n\t\t\t\t\tMemorizeMusic(myTrackList[PlaySlot], P);\n\t\t\t\t\n\t\t\t\t//P.ClientSetMusic( myTrackList[PlaySlot], SongSection, CdTrack, Transition );\n\t}\n\telse\n\t{\n\t\t\tP = DeusExPlayer(Frobber);\n\t\tif( P==None )\n\t\t\treturn;\n\t\tPlaySlot++;\n\t\tif(myTrackList[PlaySlot] == None || PlaySlot > Arraycount(myTrackList))\n\t\t{    //IT DOESNT RESET\n\t\t\tPlaySlot=0;\n\t\t}\t\t\n\t\t// Go to music.\n\t\tP.ClientSetMusic( myTrackList[PlaySlot], SongSection, CdTrack, Transition );\n\t\t\t\tif(!mmIsPlaying( myTrackList[PlaySlot], P))\n\t\t\t\t\tMemorizeMusic(myTrackList[PlaySlot], P);\n\t\tP.ClientMessage(\"Now playing track: \"$Left(string(myTrackList[PlaySlot]), InStr(string(myTrackList[PlaySlot]), \".\")));\n\t}\n}\n\ndefaultproperties\n{\n     Transition=MTRAN_Fade\n     CdTrack=255\n     bAffectAllPlayers=True\n     bInvincible=True\n     ItemName=\"Music Point\"\n     bPushable=False\n     DrawType=DT_Sprite\n     Style=STY_Translucent\n     Texture=Texture'DeusExDeco.Skins.AlarmLightTex8'\n     Skin=Texture'DeusExDeco.Skins.AlarmLightTex8'\n     DrawScale=1.500000\n     CollisionRadius=45.200001\n     CollisionHeight=32.000000\n     bBlockPlayers=False\n}\n",
            "name": "MusicPoint.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "Transition=MTRAN_Fade",
                    "CdTrack=255",
                    "bAffectAllPlayers=True",
                    "bInvincible=True",
                    "ItemName=\"Music Point\"",
                    "bPushable=False",
                    "DrawType=DT_Sprite",
                    "Style=STY_Translucent",
                    "Texture=Texture'DeusExDeco.Skins.AlarmLightTex8'",
                    "Skin=Texture'DeusExDeco.Skins.AlarmLightTex8'",
                    "DrawScale=1.500000",
                    "CollisionRadius=45.200001",
                    "CollisionHeight=32.000000",
                    "bBlockPlayers=False"
                ],
                "exec": [],
                "extends": "DeusExDecoration",
                "functions": {
                    "BeginPlay": {
                        "body": "{\nPlaySlot = 0;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "BeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Frob": {
                        "body": "{\n\n\tif( bAffectAllPlayers )\n\t{\n\t\tPlaySlot++;\n\t\tif(myTrackList[PlaySlot] == None || PlaySlot >= Arraycount(myTrackList))\n\t\t{ \n\t\t\tPlaySlot=0;\n\t\t}\n\t\tBroadcastMessage(DeusExPlayer(Frobber).PlayerReplicationInfo.PlayerName$\"(\"$DeusExPlayer(Frobber).PlayerReplicationInfo.PlayerID$\"): Now playing track: \"$Left(string(myTrackList[PlaySlot]), InStr(string(myTrackList[PlaySlot]), \".\")));\n\t\t\tforeach AllActors(class'DeusExPlayer',P)\n\t\t\t\tif(!mmIsPlaying( myTrackList[PlaySlot], P) && !mmLocked(P))\n\t\t\t\t\tMemorizeMusic(myTrackList[PlaySlot], P);\n\t\t\t\t\n\t\t\t\t//P.ClientSetMusic( myTrackList[PlaySlot], SongSection, CdTrack, Transition );\n\t}\n\telse\n\t{\n\t\t\tP = DeusExPlayer(Frobber);\n\t\tif( P==None )\n\t\t\treturn;\n\t\tPlaySlot++;\n\t\tif(myTrackList[PlaySlot] == None || PlaySlot > Arraycount(myTrackList))\n\t\t{    //IT DOESNT RESET\n\t\t\tPlaySlot=0;\n\t\t}\t\t\n\t\t// Go to music.\n\t\tP.ClientSetMusic( myTrackList[PlaySlot], SongSection, CdTrack, Transition );\n\t\t\t\tif(!mmIsPlaying( myTrackList[PlaySlot], P))\n\t\t\t\t\tMemorizeMusic(myTrackList[PlaySlot], P);\n\t\tP.ClientMessage(\"Now playing track: \"$Left(string(myTrackList[PlaySlot]), InStr(string(myTrackList[PlaySlot]), \".\")));\n\t}",
                        "locals": [
                            "local DeusExPlayer P;",
                            "local Pawn A;"
                        ],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    },
                    "MMLocked": {
                        "body": "{\n\tforeach AllActors(class'MusicMemory', MM)\n\t{\n\t\tif(MM.Watcher == Them)\n\t\t{\n\t\t\treturn MM.bMMLocked;\n\t\t}\n\t}\n}",
                        "locals": [
                            "local MusicMemory MM;"
                        ],
                        "modifiers": [],
                        "name": "MMLocked",
                        "native": false,
                        "param": [
                            [
                                "DeusExPlayer",
                                "Them"
                            ]
                        ],
                        "return": "bool"
                    },
                    "MemorizeMusic": {
                        "body": "{\n\tforeach AllActors(class'MusicMemory', MM)\n\t{\n\t\tif(MM.Watcher == Them)\n\t\t{\n\t\t\tMM.CurrentSong = This;\n\t\t\t//Log(\"Track memorized.\"@This@them.playerreplicationinfo.playername);\n\t\t\tThem.ClientSetMusic( This, SongSection, CdTrack, Transition );\n\t\t}\n\t}\n}",
                        "locals": [
                            "local MusicMemory MM;"
                        ],
                        "modifiers": [],
                        "name": "MemorizeMusic",
                        "native": false,
                        "param": [
                            [
                                "music",
                                "This"
                            ],
                            [
                                "DeusExPlayer",
                                "Them"
                            ]
                        ],
                        "return": ""
                    },
                    "mmIsPlaying": {
                        "body": "{\n\n\tforeach AllActors(class'MusicMemory', MM)\n\t{\n\t\tif(MM.Watcher == Them)\n\t\t{\n\t\t\tbFound=True;\n\t\t\tif(MM.CurrentSong == This)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\t\n\tif(!bFound)\n\t{\n\t\tMM = Spawn(class'MusicMemory');\n\t\tMM.Watcher=Them;\n\t\tLog(\"New music memory.\"@This@them.playerreplicationinfo.playername);\n\t}\n}",
                        "locals": [
                            "local MusicMemory MM;",
                            "local bool bFound;"
                        ],
                        "modifiers": [],
                        "name": "mmIsPlaying",
                        "native": false,
                        "param": [
                            [
                                "music",
                                "This"
                            ],
                            [
                                "DeusExPlayer",
                                "Them"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 121,
                "replication": "",
                "states": [],
                "variables": [
                    "var int PlaySlot;",
                    "var() music myTrackList[10];",
                    "var() EMusicTransition Transition;",
                    "var() byte             SongSection;",
                    "var() byte             CdTrack;",
                    "var() bool bAffectAllPlayers;"
                ]
            }
        },
        "Nail.uc": {
            "body": "//=============================================================================\n// Nail.  \n//=============================================================================\nclass Nail extends DeusExProjectile;\n\nvar float mpDamage;\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\tif ( Level.NetMode != NM_Standalone )\n\t\tDamage = mpDamage;\n}\n\ndefaultproperties\n{\n     mpDamage=30.000000\n     bBlood=True\n     bStickToWall=True\n     DamageType=shot\n     bIgnoresNanoDefense=True\n     ItemName=\"Nail Gun\"\n     ItemArticle=\"a\"\n     speed=5000.000000\n     MaxSpeed=7000.000000\n     Damage=15.000000\n     MomentumTransfer=10000\n     ImpactSound=Sound'DeusExSounds.Generic.BulletHitFlesh'\n     Texture=Texture'PGAssets.Skins.NailTex4'\n     Skin=Texture'PGAssets.Skins.NailTex4'\n     Mesh=LodMesh'DeusExItems.Dart'\n     CollisionRadius=3.000000\n     CollisionHeight=0.500000\n}\n",
            "name": "Nail.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "mpDamage=30.000000",
                    "bBlood=True",
                    "bStickToWall=True",
                    "DamageType=shot",
                    "bIgnoresNanoDefense=True",
                    "ItemName=\"Nail Gun\"",
                    "ItemArticle=\"a\"",
                    "speed=5000.000000",
                    "MaxSpeed=7000.000000",
                    "Damage=15.000000",
                    "MomentumTransfer=10000",
                    "ImpactSound=Sound'DeusExSounds.Generic.BulletHitFlesh'",
                    "Texture=Texture'PGAssets.Skins.NailTex4'",
                    "Skin=Texture'PGAssets.Skins.NailTex4'",
                    "Mesh=LodMesh'DeusExItems.Dart'",
                    "CollisionRadius=3.000000",
                    "CollisionHeight=0.500000"
                ],
                "exec": [],
                "extends": "DeusExProjectile",
                "functions": {
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\tif ( Level.NetMode != NM_Standalone )\n\t\tDamage = mpDamage;\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 36,
                "replication": "",
                "states": [],
                "variables": [
                    "var float mpDamage;"
                ]
            }
        },
        "Nail2.uc": {
            "body": "//=============================================================================\n// Nail.  \n//=============================================================================\nclass Nail2 extends DeusExProjectile;\n\nvar float mpDamage;\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\tif ( Level.NetMode != NM_Standalone )\n\t\tDamage = mpDamage;\n}\n\ndefaultproperties\n{\n     mpDamage=3.000000\n     bBlood=True\n     bStickToWall=True\n     DamageType=shot\n     bIgnoresNanoDefense=True\n     ItemName=\"Nail Gun\"\n     ItemArticle=\"a\"\n     speed=5000.000000\n     MaxSpeed=7000.000000\n     Damage=4.000000\n     MomentumTransfer=10000\n     ImpactSound=Sound'DeusExSounds.Generic.BulletHitFlesh'\n     Texture=Texture'PGAssets.Skins.NailTex4'\n     Skin=Texture'PGAssets.Skins.NailTex4'\n     Mesh=LodMesh'DeusExItems.Dart'\n     CollisionRadius=3.000000\n     CollisionHeight=0.500000\n}\n",
            "name": "Nail2.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "mpDamage=3.000000",
                    "bBlood=True",
                    "bStickToWall=True",
                    "DamageType=shot",
                    "bIgnoresNanoDefense=True",
                    "ItemName=\"Nail Gun\"",
                    "ItemArticle=\"a\"",
                    "speed=5000.000000",
                    "MaxSpeed=7000.000000",
                    "Damage=4.000000",
                    "MomentumTransfer=10000",
                    "ImpactSound=Sound'DeusExSounds.Generic.BulletHitFlesh'",
                    "Texture=Texture'PGAssets.Skins.NailTex4'",
                    "Skin=Texture'PGAssets.Skins.NailTex4'",
                    "Mesh=LodMesh'DeusExItems.Dart'",
                    "CollisionRadius=3.000000",
                    "CollisionHeight=0.500000"
                ],
                "exec": [],
                "extends": "DeusExProjectile",
                "functions": {
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\tif ( Level.NetMode != NM_Standalone )\n\t\tDamage = mpDamage;\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 36,
                "replication": "",
                "states": [],
                "variables": [
                    "var float mpDamage;"
                ]
            }
        },
        "Nail3.uc": {
            "body": "//=============================================================================\n// Nail.  \n//=============================================================================\nclass Nail3 extends DeusExProjectile;\n\nvar float mpDamage;\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\tif ( Level.NetMode != NM_Standalone )\n\t\tDamage = mpDamage;\n}\n\nfunction BeginPlay()\n{\n\tspawn(class'SmokeTrail',,, Location);\n}\n\ndefaultproperties\n{\n     mpDamage=30.000000\n     bBlood=True\n     bStickToWall=True\n     DamageType=exploded\n     bIgnoresNanoDefense=True\n     ItemName=\"Nail Gun\"\n     ItemArticle=\"a\"\n     speed=5000.000000\n     MaxSpeed=7000.000000\n     Damage=15.000000\n     MomentumTransfer=10000\n     ImpactSound=Sound'DeusExSounds.Generic.BulletHitFlesh'\n     Texture=Texture'PGAssets.Skins.NailTex3'\n     Skin=Texture'PGAssets.Skins.NailTex3'\n     Mesh=LodMesh'DeusExItems.Dart'\n     DrawScale=2.000000\n     CollisionRadius=3.000000\n     CollisionHeight=0.500000\n}\n",
            "name": "Nail3.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "mpDamage=30.000000",
                    "bBlood=True",
                    "bStickToWall=True",
                    "DamageType=exploded",
                    "bIgnoresNanoDefense=True",
                    "ItemName=\"Nail Gun\"",
                    "ItemArticle=\"a\"",
                    "speed=5000.000000",
                    "MaxSpeed=7000.000000",
                    "Damage=15.000000",
                    "MomentumTransfer=10000",
                    "ImpactSound=Sound'DeusExSounds.Generic.BulletHitFlesh'",
                    "Texture=Texture'PGAssets.Skins.NailTex3'",
                    "Skin=Texture'PGAssets.Skins.NailTex3'",
                    "Mesh=LodMesh'DeusExItems.Dart'",
                    "DrawScale=2.000000",
                    "CollisionRadius=3.000000",
                    "CollisionHeight=0.500000"
                ],
                "exec": [],
                "extends": "DeusExProjectile",
                "functions": {
                    "BeginPlay": {
                        "body": "{\n\tspawn(class'SmokeTrail',,, Location);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "BeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\tif ( Level.NetMode != NM_Standalone )\n\t\tDamage = mpDamage;\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 42,
                "replication": "",
                "states": [],
                "variables": [
                    "var float mpDamage;"
                ]
            }
        },
        "NanoArmour.uc": {
            "body": "//=============================================================================\n// AdaptiveArmor.\n//=============================================================================\nclass NanoArmour extends PGArmour;\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\ndefaultproperties\n{\n     Dur=10000\n     Def=10\n     ItemName=\"Nano Armour\"\n     beltDescription=\"NANO\"\n}\n",
            "name": "NanoArmour.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "Dur=10000",
                    "Def=10",
                    "ItemName=\"Nano Armour\"",
                    "beltDescription=\"NANO\""
                ],
                "exec": [],
                "extends": "PGArmour",
                "functions": {
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 18,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "NanoCompactor.uc": {
            "body": "//=============================================================================\n// WeaponStealthPistol.\n//=============================================================================\nclass NanoCompactor extends DeusExWeapon;\n\nvar() class<Actor> StoredActor, rstoredactor;\nvar() rotator storedRotation;\nvar bool bRotLock;\nvar string storedstr;\n\nreplication\n{\nreliable if (Role==ROLE_Authority)\nrstoredactor, storedstr;\n}\n\nfunction string GetDisplayString(Actor P)\n{\n\tif(P.isA('ScriptedPawn'))\n\t\treturn ScriptedPawn(P).FamiliarName;\n\telse if(P.isA('DeusExDecoration'))\n\t\treturn DeusExDecoration(P).ItemName;\n}\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t\tReloadCount = mpReloadCount;\n\t\tstoredstr = \"none\";\n\t}\n}\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\nfunction ProcessTraceHit(Actor Other, Vector HitLocation, Vector HitNormal, Vector X, Vector Y, Vector Z)\n{\n\tlocal float        mult;\n\tlocal name         damageType;\n\tlocal DeusExPlayer dxPlayer, DXP;\n\tlocal Pawn P;\n\tlocal Actor a;\n\tif(StoredActor == None)\n\t{\n\t\tif(Other.isa('ScriptedPawn') || Other.isa('Decoration'))\n\t\t{\n\t\t\tif(Other.isa('HackableDevices') || other.isa('Switch1') || other.isa('Switch2'))\n\t\t\t{\n\t\t\t\tDeusExPlayer(Owner).ClientMessage(\"This object can't be moved.\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tStoredActor = Other.Class;\n\t\t\trStoredActor = StoredActor;\n\t\t\tstoredstr = GetDisplayString(Other);\n\t\t\tStoredRotation = Other.Rotation;\n\t\t\tDeusExPlayer(Owner).ClientMessage(\"Stored: \"$GetDisplayString(Other));\n\t\t\tDeusExPlayer(Owner).ClientMessage(\"Fire now spawns. Laser to toggle rotation.\");\n\t\t\tOther.Destroy();\n\t\t\treturn;\n\t\t}\n\t}\n\telse\n\t{\n\t\tif(bRotLock)\n\t\t{\n\t\ta = Spawn(StoredActor,,,HitLocation, StoredRotation);\n\t\t\tif(a!=none)\n\t\t\t{\n\t\t\t\tDeusExPlayer(Owner).ClientMessage(\"Object spawned.\");\n\t\t\t\tStoredActor=None;\n\t\t\t\trStoredActor = StoredActor;\n\t\t\t\tstoredstr = \"NONE\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tDeusExPlayer(Owner).ClientMessage(\"|P2Object didn't spawn. Make sure there is enough space for it.\");\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\ta = Spawn(StoredActor,,,HitLocation, Owner.Rotation);\t\n\t\t\tif(a!=none)\n\t\t\t{\n\t\t\t\tDeusExPlayer(Owner).ClientMessage(\"Object spawned.\");\n\t\t\t\tStoredActor=None;\n\t\t\t\trStoredActor = StoredActor;\n\t\t\t\tstoredstr = \"NONE\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tDeusExPlayer(Owner).ClientMessage(\"|P2Object didn't spawn. Make sure there is enough space for it.\");\n\t\t\t}\t\t\n\t\t}\n\t}\n}\n\n\nsimulated function float CalculateAccuracy()\n{\n\treturn 0.000000; //Dirty hack to always return dead on accuracy.\n}\n\nstate NormalFire //(Thanks to JimBowen for this Infinite ammo code) \n{ \n   Begin: \n      if ((ClipCount >= ReloadCount) && (ReloadCount != 0)) \n      { \n         if (!bAutomatic) \n         { \n            bFiring = False; \n            FinishAnim(); \n         } \n    \n         if (Owner != None) \n         { \n            if (Owner.IsA('DeusExPlayer')) \n            { \n               bFiring = False; \n            } \n            else if (Owner.IsA('ScriptedPawn')) \n            { \n               bFiring = False; \n               ReloadAmmo(); \n            } \n         } \n         else \n         { \n            if (bHasMuzzleFlash) \n               EraseMuzzleFlashTexture(); \n            GotoState('Idle'); \n         } \n      } \n      if ( bAutomatic && (( Level.NetMode == NM_DedicatedServer ) || ((Level.NetMode == NM_ListenServer) && Owner.IsA('DeusExPlayer') && !DeusExPlayer(Owner).PlayerIsListenClient()))) \n         GotoState('Idle'); \n    \n      Sleep(GetShotTime()); \n      if (bAutomatic) \n      { \n         GenerateBullet();       // In multiplayer bullets are generated by the client which will let the server know when \n         Goto('Begin'); \n      } \n      bFiring = False; \n      FinishAnim(); \n    \n   /*      // if ReloadCount is 0 and we're not hand to hand, then this is a \n      // single-use weapon so destroy it after firing once \n      if ((ReloadCount == 0) && !bHandToHand) \n      { \n         if (DeusExPlayer(Owner) != None) \n            DeusExPlayer(Owner).RemoveItemFromSlot(Self);   // remove it from the inventory grid \n         Destroy(); \n      } \n      */              // Do I REALLY need all that crap JUST for infinite ammo? \n      ReadyToFire(); \n   Done: \n      bFiring = False; \n      Finish(); \n}\n\nfunction ScopeToggle()\n{\n}\n\nsimulated event RenderOverlays(canvas Canvas)\n{\n\tlocal DeusExPlayer P;\n\tlocal Actor CrosshairTarget;\n\tlocal float Scale, Accuracy, Dist;\n\tlocal vector HitLocation, HitNormal, StartTrace, EndTrace, X,Y,Z;\n\t\tlocal vector loc, line;\n\t\t\tlocal String KeyName, Alias, curKeyName;\n\tlocal int i;\n\tSuper.RenderOverlays(Canvas);\n\tP = DeusExPlayer(Owner);\n\tif ( P != None ) \n\t{\t\n\t\t\t\tbOwnsCrossHair = True; \n\t\t\t\tScale = Canvas.ClipX/640;\n\t\t\t\tCanvas.SetPos(0.5 * Canvas.ClipX - 16 * Scale, 0.5 * Canvas.ClipY - 16 * Scale );\n\t\t\t\t//Canvas.Style = ERenderStyle.STY_Translucent;\n\t\t\t\tCanvas.DrawColor.R = 255;\n\t\t\t\tCanvas.DrawColor.G = 250;\n\t\t\t\tCanvas.DrawColor.B = 255;\n\t\t\t\tCanvas.Font = Canvas.SmallFont;\n\t\t\t\tcurKeyName = \"\";\n\t\t\t\tfor ( i=0; i<255; i++ )\n\t\t\t\t{\n\t\t\t\t\tKeyName = Owner.ConsoleCommand ( \"KEYNAME \"$i );\n\t\t\t\t\tif ( KeyName != \"\" )\n\t\t\t\t\t{\n\t\t\t\t\t\tAlias = Owner.ConsoleCommand( \"KEYBINDING \"$KeyName );\n\t\t\t\t\t\tif ( Alias ~= \"ToggleLaser\" )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurKeyName = KeyName;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ( curKeyName ~= \"\" )\n\t\t\t\t\tcurKeyName = \"NONE\";\n\t\t\t\tCanvas.DrawText(\"       Stored Class: \"$storedstr);\n\n\t\t\t}\n\t\t\telse\n\t\t\t\tbOwnsCrossHair = False; // Only for compatibility with HDX50\t\t\n\t\t//}\t\n//}\t\t\n}\n\nfunction LaserToggle()\n{\n\tif(StoredActor != None)\n\t{\n\tbRotLock = !bRotLock;\n\tDeusExPlayer(Owner).ClientMessage(\"rotation Lock: \"$bRotLock);\n\t}\n}\n\ndefaultproperties\n{\n     GoverningSkill=Class'DeusEx.SkillWeaponPistol'\n     NoiseLevel=0.010000\n     ShotTime=0.150000\n     reloadTime=1.500000\n     HitDamage=0\n     maxRange=4800\n     AccurateRange=2400\n     BaseAccuracy=0.800000\n     bCanHaveScope=True\n     ScopeFOV=25\n     bCanHaveLaser=True\n     recoilStrength=0.100000\n     mpBaseAccuracy=0.200000\n     mpAccurateRange=1200\n     mpMaxRange=1200\n     bCanHaveModBaseAccuracy=True\n     bCanHaveModReloadCount=True\n     bCanHaveModAccurateRange=True\n     bCanHaveModReloadTime=True\n     bInstantHit=True\n     FireOffset=(X=-24.000000,Y=10.000000,Z=14.000000)\n     shakemag=50.000000\n     FireSound=Sound'DeusExSounds.Weapons.StealthPistolFire'\n     AltFireSound=Sound'DeusExSounds.Weapons.StealthPistolReloadEnd'\n     CockingSound=Sound'DeusExSounds.Weapons.StealthPistolReload'\n     SelectSound=Sound'DeusExSounds.Weapons.StealthPistolSelect'\n     InventoryGroup=131\n     ItemName=\"Nano Compactor Gun\"\n     PlayerViewOffset=(X=24.000000,Y=-10.000000,Z=-14.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.StealthPistol'\n     PickupViewMesh=LodMesh'DeusExItems.StealthPistolPickup'\n     ThirdPersonMesh=LodMesh'DeusExItems.StealthPistol3rd'\n     Icon=Texture'DeusExUI.Icons.BeltIconStealthPistol'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconStealthPistol'\n     largeIconWidth=47\n     largeIconHeight=37\n     Description=\"The stealth pistol is a variant of the standard 10mm pistol with a larger clip and integrated silencer designed for wet work at very close ranges.\"\n     beltDescription=\"COMPACTOR\"\n     Mesh=LodMesh'DeusExItems.StealthPistolPickup'\n     CollisionRadius=8.000000\n     CollisionHeight=0.800000\n}\n",
            "name": "NanoCompactor.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "GoverningSkill=Class'DeusEx.SkillWeaponPistol'",
                    "NoiseLevel=0.010000",
                    "ShotTime=0.150000",
                    "reloadTime=1.500000",
                    "HitDamage=0",
                    "maxRange=4800",
                    "AccurateRange=2400",
                    "BaseAccuracy=0.800000",
                    "bCanHaveScope=True",
                    "ScopeFOV=25",
                    "bCanHaveLaser=True",
                    "recoilStrength=0.100000",
                    "mpBaseAccuracy=0.200000",
                    "mpAccurateRange=1200",
                    "mpMaxRange=1200",
                    "bCanHaveModBaseAccuracy=True",
                    "bCanHaveModReloadCount=True",
                    "bCanHaveModAccurateRange=True",
                    "bCanHaveModReloadTime=True",
                    "bInstantHit=True",
                    "FireOffset=(X=-24.000000,Y=10.000000,Z=14.000000)",
                    "shakemag=50.000000",
                    "FireSound=Sound'DeusExSounds.Weapons.StealthPistolFire'",
                    "AltFireSound=Sound'DeusExSounds.Weapons.StealthPistolReloadEnd'",
                    "CockingSound=Sound'DeusExSounds.Weapons.StealthPistolReload'",
                    "SelectSound=Sound'DeusExSounds.Weapons.StealthPistolSelect'",
                    "InventoryGroup=131",
                    "ItemName=\"Nano Compactor Gun\"",
                    "PlayerViewOffset=(X=24.000000,Y=-10.000000,Z=-14.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.StealthPistol'",
                    "PickupViewMesh=LodMesh'DeusExItems.StealthPistolPickup'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.StealthPistol3rd'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconStealthPistol'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconStealthPistol'",
                    "largeIconWidth=47",
                    "largeIconHeight=37",
                    "Description=\"The stealth pistol is a variant of the standard 10mm pistol with a larger clip and integrated silencer designed for wet work at very close ranges.\"",
                    "beltDescription=\"COMPACTOR\"",
                    "Mesh=LodMesh'DeusExItems.StealthPistolPickup'",
                    "CollisionRadius=8.000000",
                    "CollisionHeight=0.800000"
                ],
                "exec": [],
                "extends": "DeusExWeapon",
                "functions": {
                    "CalculateAccuracy": {
                        "body": "{\n\treturn 0.000000; //Dirty hack to always return dead on accuracy.\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "CalculateAccuracy",
                        "native": false,
                        "param": [],
                        "return": "float"
                    },
                    "GetDisplayString": {
                        "body": "{\n\tif(P.isA('ScriptedPawn'))\n\t\treturn ScriptedPawn(P).FamiliarName;\n\telse if(P.isA('DeusExDecoration'))\n\t\treturn DeusExDecoration(P).ItemName;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetDisplayString",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "P"
                            ]
                        ],
                        "return": "string"
                    },
                    "LaserToggle": {
                        "body": "{\n\tif(StoredActor != None)\n\t{\n\tbRotLock = !bRotLock;\n\tDeusExPlayer(Owner).ClientMessage(\"rotation Lock: \"$bRotLock);\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "LaserToggle",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t\tReloadCount = mpReloadCount;\n\t\tstoredstr = \"none\";\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ProcessTraceHit": {
                        "body": "{\n\tif(StoredActor == None)\n\t{\n\t\tif(Other.isa('ScriptedPawn') || Other.isa('Decoration'))\n\t\t{\n\t\t\tif(Other.isa('HackableDevices') || other.isa('Switch1') || other.isa('Switch2'))\n\t\t\t{\n\t\t\t\tDeusExPlayer(Owner).ClientMessage(\"This object can't be moved.\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tStoredActor = Other.Class;\n\t\t\trStoredActor = StoredActor;\n\t\t\tstoredstr = GetDisplayString(Other);\n\t\t\tStoredRotation = Other.Rotation;\n\t\t\tDeusExPlayer(Owner).ClientMessage(\"Stored: \"$GetDisplayString(Other));\n\t\t\tDeusExPlayer(Owner).ClientMessage(\"Fire now spawns. Laser to toggle rotation.\");\n\t\t\tOther.Destroy();\n\t\t\treturn;\n\t\t}\n\t}\n\telse\n\t{\n\t\tif(bRotLock)\n\t\t{\n\t\ta = Spawn(StoredActor,,,HitLocation, StoredRotation);\n\t\t\tif(a!=none)\n\t\t\t{\n\t\t\t\tDeusExPlayer(Owner).ClientMessage(\"Object spawned.\");\n\t\t\t\tStoredActor=None;\n\t\t\t\trStoredActor = StoredActor;\n\t\t\t\tstoredstr = \"NONE\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tDeusExPlayer(Owner).ClientMessage(\"|P2Object didn't spawn. Make sure there is enough space for it.\");\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\ta = Spawn(StoredActor,,,HitLocation, Owner.Rotation);\t\n\t\t\tif(a!=none)\n\t\t\t{\n\t\t\t\tDeusExPlayer(Owner).ClientMessage(\"Object spawned.\");\n\t\t\t\tStoredActor=None;\n\t\t\t\trStoredActor = StoredActor;\n\t\t\t\tstoredstr = \"NONE\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tDeusExPlayer(Owner).ClientMessage(\"|P2Object didn't spawn. Make sure there is enough space for it.\");\n\t\t\t}\t\t\n\t\t}\n\t}\n}",
                        "locals": [
                            "local float        mult;",
                            "local name         damageType;",
                            "local DeusExPlayer dxPlayer, DXP;",
                            "local Pawn P;",
                            "local Actor a;"
                        ],
                        "modifiers": [],
                        "name": "ProcessTraceHit",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Other"
                            ],
                            [
                                "Vector",
                                "HitLocation"
                            ],
                            [
                                "Vector",
                                "HitNormal"
                            ],
                            [
                                "Vector",
                                "X"
                            ],
                            [
                                "Vector",
                                "Y"
                            ],
                            [
                                "Vector",
                                "Z"
                            ]
                        ],
                        "return": ""
                    },
                    "RenderOverlays": {
                        "body": "{\n\tSuper.RenderOverlays(Canvas);\n\tP = DeusExPlayer(Owner);\n\tif ( P != None ) \n\t{\t\n\t\t\t\tbOwnsCrossHair = True; \n\t\t\t\tScale = Canvas.ClipX/640;\n\t\t\t\tCanvas.SetPos(0.5 * Canvas.ClipX - 16 * Scale, 0.5 * Canvas.ClipY - 16 * Scale );\n\t\t\t\t//Canvas.Style = ERenderStyle.STY_Translucent;\n\t\t\t\tCanvas.DrawColor.R = 255;\n\t\t\t\tCanvas.DrawColor.G = 250;\n\t\t\t\tCanvas.DrawColor.B = 255;\n\t\t\t\tCanvas.Font = Canvas.SmallFont;\n\t\t\t\tcurKeyName = \"\";\n\t\t\t\tfor ( i=0; i<255; i++ )\n\t\t\t\t{\n\t\t\t\t\tKeyName = Owner.ConsoleCommand ( \"KEYNAME \"$i );\n\t\t\t\t\tif ( KeyName != \"\" )\n\t\t\t\t\t{\n\t\t\t\t\t\tAlias = Owner.ConsoleCommand( \"KEYBINDING \"$KeyName );\n\t\t\t\t\t\tif ( Alias ~= \"ToggleLaser\" )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurKeyName = KeyName;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ( curKeyName ~= \"\" )\n\t\t\t\t\tcurKeyName = \"NONE\";\n\t\t\t\tCanvas.DrawText(\"       Stored Class: \"$storedstr);\n\n\t\t\t}\n\t\t\telse\n\t\t\t\tbOwnsCrossHair = False; // Only for compatibility with HDX50\t\t\n\t\t//}",
                        "locals": [
                            "local DeusExPlayer P;",
                            "local Actor CrosshairTarget;",
                            "local float Scale, Accuracy, Dist;",
                            "local vector HitLocation, HitNormal, StartTrace, EndTrace, X,Y,Z;",
                            "local vector loc, line;",
                            "local String KeyName, Alias, curKeyName;",
                            "local int i;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "RenderOverlays",
                        "native": false,
                        "param": [
                            [
                                "canvas",
                                "Canvas"
                            ]
                        ],
                        "return": ""
                    },
                    "ScopeToggle": {
                        "body": "{\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "ScopeToggle",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 274,
                "replication": "",
                "states": [],
                "variables": [
                    "var() class<Actor> StoredActor, rstoredactor;",
                    "var() rotator storedRotation;",
                    "var bool bRotLock;",
                    "var string storedstr;"
                ]
            }
        },
        "NanoFlowers.uc": {
            "body": "//=============================================================================\n// Flowers.\n//=============================================================================\nclass NanoFlowers extends DeusExDecoration;\n\nfunction BeginPlay()\n{\n\tSetTimer(2,True);\n}\n\nfunction Bump(actor Other)\n{\n//Do nothing.\n}\n\nfunction Timer()\n{\nlocal DeusExDecoration deco;\nlocal DeusExPlayer paw;\nlocal deusexcarcass dec;\n\n\n\tforeach VisibleActors(class'DeusExPlayer', paw, 256)\n\t{\n\t\tif (paw != None)\n\t\t{\n\t\t\tif(paw.Health < 100)\n\t\t\t{\n\t\t\t\t\tpaw.HealPlayer(100, True);\n\t\t\t}\n\t\t\tif(paw.Energy < 100)\n\t\t\t{\n\t\t\t\tpaw.Energy = 100;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach VisibleActors(class'DeusExCarcass', DEC, 256)\n\t{\n\t\tif (dec != None)\n\t\t{\n\t\t\tRezz(dec);\n\t\t}\n\t}\n}\n\nfunction Rezz(deusexcarcass carcian)\n{\nlocal string tempname, carcassname;\nlocal class<scriptedpawn> newpawn;\n\n\tTempName = string(carcian.Class);\n\n\tif( InStr(TempName,\"Carcass\")>=0 )\n\t\tCarcassName = Left( TempName, InStr(TempName,\"Carcass\") );\n\n\tSpawn(class<ScriptedPawn>( DynamicLoadObject(CarcassName, class'Class' ) ),,, carcian.Location);\t\n\tcarcian.Destroy();\n}\n\ndefaultproperties\n{\n     FragType=Class'DeusEx.PlasticFragment'\n     ItemName=\"Nanite Infused Flowers\"\n     Mesh=LodMesh'DeusExDeco.Flowers'\n     CollisionRadius=11.880000\n     CollisionHeight=9.630000\n     Mass=20.000000\n     Buoyancy=10.000000\n}\n",
            "name": "NanoFlowers.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "FragType=Class'DeusEx.PlasticFragment'",
                    "ItemName=\"Nanite Infused Flowers\"",
                    "Mesh=LodMesh'DeusExDeco.Flowers'",
                    "CollisionRadius=11.880000",
                    "CollisionHeight=9.630000",
                    "Mass=20.000000",
                    "Buoyancy=10.000000"
                ],
                "exec": [],
                "extends": "DeusExDecoration",
                "functions": {
                    "BeginPlay": {
                        "body": "{\n\tSetTimer(2,True);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "BeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Bump": {
                        "body": "{\n//Do nothing.\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Bump",
                        "native": false,
                        "param": [
                            [
                                "actor",
                                "Other"
                            ]
                        ],
                        "return": ""
                    },
                    "Rezz": {
                        "body": "{\n\n\tTempName = string(carcian.Class);\n\n\tif( InStr(TempName,\"Carcass\")>=0 )\n\t\tCarcassName = Left( TempName, InStr(TempName,\"Carcass\") );\n\n\tSpawn(class<ScriptedPawn>( DynamicLoadObject(CarcassName, class'Class' ) ),,, carcian.Location);\t\n\tcarcian.Destroy();\n}",
                        "locals": [
                            "local string tempname, carcassname;",
                            "local class<scriptedpawn> newpawn;"
                        ],
                        "modifiers": [],
                        "name": "Rezz",
                        "native": false,
                        "param": [
                            [
                                "deusexcarcass",
                                "carcian"
                            ]
                        ],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\n\n\tforeach VisibleActors(class'DeusExPlayer', paw, 256)\n\t{\n\t\tif (paw != None)\n\t\t{\n\t\t\tif(paw.Health < 100)\n\t\t\t{\n\t\t\t\t\tpaw.HealPlayer(100, True);\n\t\t\t}\n\t\t\tif(paw.Energy < 100)\n\t\t\t{\n\t\t\t\tpaw.Energy = 100;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach VisibleActors(class'DeusExCarcass', DEC, 256)\n\t{\n\t\tif (dec != None)\n\t\t{\n\t\t\tRezz(dec);\n\t\t}\n\t}\n}",
                        "locals": [
                            "local DeusExDecoration deco;",
                            "local DeusExPlayer paw;",
                            "local deusexcarcass dec;"
                        ],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 71,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "OwnedScanner.uc": {
            "body": "//=============================================================================\n// Switch1.\n//=============================================================================\nclass OwnedScanner extends DeusExDecoration;\n\nvar DeusExPlayer owner;\nvar bool bOwned;\nvar(Owning) bool bPaytoOwn;\nvar(Owning) int Price;\nvar(Owning) string OwnedAlias;\nvar(Owning) bool bAllowBidding;\nvar(Owning) bool bIncomeGenerator;\nvar(Owning) bool bIncomeSubtractor;\nvar(Owning) int Payoutcreds;\nvar(Owning) int payoutdelay;\nvar bool bConfirm;\nvar int Bid;\nvar bool bPayout;\n\nfunction Tick(float Deltatime)\n{\n\t//Check Ownage.\n\tif(bOwned)\n\t{\n\t\tif(owner.PlayerReplicationInfo.PlayerName == \"\")\n\t\t{\n\t\tbOwned=False;\n\t\tbPayout=False;\n\t\t}\n\t}\n\n\tsuper.Tick(Deltatime);\n}\n\nfunction Timer()\n{\nlocal DeusExPlayer p;\n\t\n\tif(bPayout)\n\t{\n\t\tif(bIncomeGenerator)\n\t\t{\n\t\t\towner.Credits += Payoutcreds;\n\t\t\towner.ClientMessage(\"You have been paid by an object you own, \"$OwnedAlias$\". Income: \"$Payoutcreds$\" |P1(New credits: \"$P.Credits$\")\");\n\t\t}\n\t\t\n\t\tif(bIncomeSubtractor)\n\t\t{\n\t\t\towner.Credits -= Payoutcreds;\n\t\t\towner.ClientMessage(\"You have been charged credits by an object you own, \"$OwnedAlias$\". Money Taken: \"$Payoutcreds$\" |P1(New credits: \"$P.Credits$\")\");\n\t\t}\n\t\telse if(!bIncomeGenerator && !bIncomeSubtractor)\n\t\t{\n\t\tbPayout=False;\n\t\t}\n\t}\nif(bConfirm)\n{bConfirm=False;}\n}\n\nfunction Frob(Actor Frobber, Inventory frobWith)\n{\nlocal DeusExPlayer p;\np = DeusExPlayer(Frobber);\n\n\tif(bOwned)//We are owned, checking if frobber is owner.\n\t{\n\t\tif(owner == p)\n\t\t{//Check passed.\n\t\tp.ClientMessage(\"You own this object!\");\n\t\t\tsuper.Frob(frobber, frobWith);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tp.ClientMessage(\"You do not own this object. Currently owned by\"@owner.PlayerReplicationInfo.PlayerName);\n\t\t\t\tif(bAllowBidding)\n\t\t\t\t{\n\t\t\t\t\tif(!bConfirm)\n\t\t\t\t\t{\t\n\t\t\t\t\t\tp.ClientMessage(\"Bid \"$Price*1.2$\" to own \"$ownedalias$\", press again to confirm? |P1(Current credits: \"$P.Credits$\")\");\n\t\t\t\t\t\tbConfirm = True;\n\t\t\t\t\t\tSetTimer(3,False);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif(p.Credits >= Price)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\towner.ClientMessage(owner.PlayerReplicationInfo.PlayerName$\", you have lost the owned object\"@ownedalias);\n\t\t\t\t\t\t\tBid = Price*1.2;\n\t\t\t\t\t\t\tPrice = Bid;\n\t\t\t\t\t\t\towner = p;\n\t\t\t\t\t\t\tp.Credits -= Price;\n\t\t\t\t\t\t\tp.ClientMessage(owner.PlayerReplicationInfo.PlayerName$\", you now own the object\"@ownedalias$\" |P1(New credits: \"$P.Credits$\")\");\n\t\t\t\t\t\t\tbConfirm = False;\n\t\t\t\t\t\t\tbOwned=True;\n\t\t\t\t\t\t\tbPayout=True;\n\t\t\t\t\t\t\tSetTimer(PayoutDelay,True);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{p.ClientMessage(\"You can't afford this purchase.\");}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t}\n\n\t}\n\telse\n\t{\n\t\tif(bPaytoOwn)\n\t\t{//Pay to own\n\t\t\tif(!bConfirm)\n\t\t\t{\n\t\t\t\tp.ClientMessage(Price$\" to own \"$ownedalias$\", press again to confirm? |P1(Current credits: \"$P.Credits$\")\");\n\t\t\t\tbConfirm = True;\n\t\t\t\tSetTimer(3,False);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(p.Credits >= Price)\n\t\t\t\t{\n\t\t\t\t\towner = p;\n\t\t\t\t\tp.Credits -= Price;\n\t\t\t\t\tp.ClientMessage(owner.PlayerReplicationInfo.PlayerName$\", you now own the object\"@ownedalias$\" |P1(New credits: \"$P.Credits$\")\");\n\t\t\t\t\tbConfirm = False;\n\t\t\t\t\tbOwned=True;\n\t\t\t\t\tbPayout=True;\n\t\t\t\t\tSetTimer(PayoutDelay,True);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{p.ClientMessage(\"You can't afford this purchase.\");}\n\t\t\t}\n\n\t\t}\n\t\telse\n\t\t{//Free to own.\n\t\t\towner = p;\n\t\t\tbOwned=True;\n\t\t\t\t\t\t\t\tbPayout=True;\n\t\t\t\t\tSetTimer(PayoutDelay,True);\n\t\t\tp.ClientMessage(owner.PlayerReplicationInfo.PlayerName$\", you now own the object\"@ownedalias);\n\t\t}\n\t}\n}\n\ndefaultproperties\n{\n     bInvincible=True\n     ItemName=\"Ownable Scanner\"\n     bPushable=False\n     Physics=PHYS_None\n     Texture=Texture'DeusExItems.Skins.DataCubeTex2'\n     Mesh=LodMesh'DeusExItems.DataCube'\n     CollisionRadius=7.000000\n     CollisionHeight=1.270000\n     Buoyancy=12.000000\n}\n",
            "name": "OwnedScanner.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bInvincible=True",
                    "ItemName=\"Ownable Scanner\"",
                    "bPushable=False",
                    "Physics=PHYS_None",
                    "Texture=Texture'DeusExItems.Skins.DataCubeTex2'",
                    "Mesh=LodMesh'DeusExItems.DataCube'",
                    "CollisionRadius=7.000000",
                    "CollisionHeight=1.270000",
                    "Buoyancy=12.000000"
                ],
                "exec": [],
                "extends": "DeusExDecoration",
                "functions": {
                    "Frob": {
                        "body": "{\np = DeusExPlayer(Frobber);\n\n\tif(bOwned)//We are owned, checking if frobber is owner.\n\t{\n\t\tif(owner == p)\n\t\t{//Check passed.\n\t\tp.ClientMessage(\"You own this object!\");\n\t\t\tsuper.Frob(frobber, frobWith);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tp.ClientMessage(\"You do not own this object. Currently owned by\"@owner.PlayerReplicationInfo.PlayerName);\n\t\t\t\tif(bAllowBidding)\n\t\t\t\t{\n\t\t\t\t\tif(!bConfirm)\n\t\t\t\t\t{\t\n\t\t\t\t\t\tp.ClientMessage(\"Bid \"$Price*1.2$\" to own \"$ownedalias$\", press again to confirm? |P1(Current credits: \"$P.Credits$\")\");\n\t\t\t\t\t\tbConfirm = True;\n\t\t\t\t\t\tSetTimer(3,False);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif(p.Credits >= Price)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\towner.ClientMessage(owner.PlayerReplicationInfo.PlayerName$\", you have lost the owned object\"@ownedalias);\n\t\t\t\t\t\t\tBid = Price*1.2;\n\t\t\t\t\t\t\tPrice = Bid;\n\t\t\t\t\t\t\towner = p;\n\t\t\t\t\t\t\tp.Credits -= Price;\n\t\t\t\t\t\t\tp.ClientMessage(owner.PlayerReplicationInfo.PlayerName$\", you now own the object\"@ownedalias$\" |P1(New credits: \"$P.Credits$\")\");\n\t\t\t\t\t\t\tbConfirm = False;\n\t\t\t\t\t\t\tbOwned=True;\n\t\t\t\t\t\t\tbPayout=True;\n\t\t\t\t\t\t\tSetTimer(PayoutDelay,True);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{p.ClientMessage(\"You can't afford this purchase.\");}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t}",
                        "locals": [
                            "local DeusExPlayer p;"
                        ],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    },
                    "Tick": {
                        "body": "{\n\t//Check Ownage.\n\tif(bOwned)\n\t{\n\t\tif(owner.PlayerReplicationInfo.PlayerName == \"\")\n\t\t{\n\t\tbOwned=False;\n\t\tbPayout=False;\n\t\t}\n\t}\n\n\tsuper.Tick(Deltatime);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "Deltatime"
                            ]
                        ],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\t\n\tif(bPayout)\n\t{\n\t\tif(bIncomeGenerator)\n\t\t{\n\t\t\towner.Credits += Payoutcreds;\n\t\t\towner.ClientMessage(\"You have been paid by an object you own, \"$OwnedAlias$\". Income: \"$Payoutcreds$\" |P1(New credits: \"$P.Credits$\")\");\n\t\t}\n\t\t\n\t\tif(bIncomeSubtractor)\n\t\t{\n\t\t\towner.Credits -= Payoutcreds;\n\t\t\towner.ClientMessage(\"You have been charged credits by an object you own, \"$OwnedAlias$\". Money Taken: \"$Payoutcreds$\" |P1(New credits: \"$P.Credits$\")\");\n\t\t}\n\t\telse if(!bIncomeGenerator && !bIncomeSubtractor)\n\t\t{\n\t\tbPayout=False;\n\t\t}\n\t}\nif(bConfirm)\n{bConfirm=False;}",
                        "locals": [
                            "local DeusExPlayer p;"
                        ],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 157,
                "replication": "",
                "states": [],
                "variables": [
                    "var DeusExPlayer owner;",
                    "var bool bOwned;",
                    "var(Owning) bool bPaytoOwn;",
                    "var(Owning) int Price;",
                    "var(Owning) string OwnedAlias;",
                    "var(Owning) bool bAllowBidding;",
                    "var(Owning) bool bIncomeGenerator;",
                    "var(Owning) bool bIncomeSubtractor;",
                    "var(Owning) int Payoutcreds;",
                    "var(Owning) int payoutdelay;",
                    "var bool bConfirm;",
                    "var int Bid;",
                    "var bool bPayout;"
                ]
            }
        },
        "OwnedScanner2.uc": {
            "body": "//=============================================================================\n// Switch1.\n//=============================================================================\nclass OwnedScanner2 extends DeusExDecoration\nconfig (Owning);\n\nvar(Owning) bool bPaytoOwn;\nvar(Owning) int Price;\nvar(Owning) string OwnedAlias;\nvar(Owning) int ReadNumber;\nvar OwningController MyController;\n \nvar bool bConfirm;\nvar int Bid;\nvar bool bPayout;\n\nfunction string GetName(deusexplayer P)\n{\n\treturn P.PlayerReplicationInfo.PlayerName;\n}\n\nfunction Frob(Actor Frobber, Inventory frobWith)\n{\nlocal DeusExPlayer p;\np = DeusExPlayer(Frobber);\n\n\tif(MyController.Owners[readNumber] != \"\")\n\t{\n\t\tif(getName(p) ~= MyController.Owners[readnumber])\n\t\t{\n\t\t\tp.ClientMessage(\"|P3Passed owner check! Welcome back, Owner #\"$ReadNumber$\" - \"$MyController.Owners[readnumber]);\n\t\t\tsuper.Frob(frobber, frobWith);\n\t\t\treturn;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tp.ClientMessage(\"|P2Failed owner check! Owned by #\"$ReadNumber$\" - \"$MyController.Owners[readnumber]);\n\t\t\treturn;\n\t\t}\n\t}\n\n\t\tif(bPaytoOwn)\n\t\t{\n\t\t\tif(!bConfirm)\n\t\t\t{\n\t\t\t\tp.ClientMessage(Price$\" to own \"$ownedalias$\", press again to confirm? |P1(Current credits: \"$P.Credits$\")\");\n\t\t\t\tbConfirm = True;\n\t\t\t\tSetTimer(3,False);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(p.Credits >= Price)\n\t\t\t\t{\n\t\t\t\t\tmyController.Owners[readNumber] = GetName(P);\n\t\t\t\t\tmyController.SaveConfig();\n\t\t\t\t\tp.Credits -= Price;\n\t\t\t\t\tp.ClientMessage(GetName(P)$\", you now own the object\"@ownedalias$\" |P1(New credits: \"$P.Credits$\")\");\n\t\t\t\t\tbConfirm = False;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{p.ClientMessage(\"You can't afford this purchase.\");}\n\t\t\t}\n\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmyController.Owners[readNumber] = GetName(P);\n\t\t\tmyController.SaveConfig();\n\t\t\tp.ClientMessage(P.PlayerReplicationInfo.PlayerName$\", you now own the object\"@ownedalias);\n\t\t}\n\n}\n\ndefaultproperties\n{\n     bInvincible=True\n     ItemName=\"Ownable Scanner\"\n     bPushable=False\n     Physics=PHYS_None\n     Texture=Texture'DeusExItems.Skins.DataCubeTex2'\n     Mesh=LodMesh'DeusExItems.DataCube'\n     CollisionRadius=7.000000\n     CollisionHeight=1.270000\n     Buoyancy=12.000000\n}\n",
            "name": "OwnedScanner2.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bInvincible=True",
                    "ItemName=\"Ownable Scanner\"",
                    "bPushable=False",
                    "Physics=PHYS_None",
                    "Texture=Texture'DeusExItems.Skins.DataCubeTex2'",
                    "Mesh=LodMesh'DeusExItems.DataCube'",
                    "CollisionRadius=7.000000",
                    "CollisionHeight=1.270000",
                    "Buoyancy=12.000000"
                ],
                "exec": [],
                "extends": "DeusExDecoration",
                "functions": {
                    "Frob": {
                        "body": "{\np = DeusExPlayer(Frobber);\n\n\tif(MyController.Owners[readNumber] != \"\")\n\t{\n\t\tif(getName(p) ~= MyController.Owners[readnumber])\n\t\t{\n\t\t\tp.ClientMessage(\"|P3Passed owner check! Welcome back, Owner #\"$ReadNumber$\" - \"$MyController.Owners[readnumber]);\n\t\t\tsuper.Frob(frobber, frobWith);\n\t\t\treturn;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tp.ClientMessage(\"|P2Failed owner check! Owned by #\"$ReadNumber$\" - \"$MyController.Owners[readnumber]);\n\t\t\treturn;\n\t\t}\n\t}\n\n\t\tif(bPaytoOwn)\n\t\t{\n\t\t\tif(!bConfirm)\n\t\t\t{\n\t\t\t\tp.ClientMessage(Price$\" to own \"$ownedalias$\", press again to confirm? |P1(Current credits: \"$P.Credits$\")\");\n\t\t\t\tbConfirm = True;\n\t\t\t\tSetTimer(3,False);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(p.Credits >= Price)\n\t\t\t\t{\n\t\t\t\t\tmyController.Owners[readNumber] = GetName(P);\n\t\t\t\t\tmyController.SaveConfig();\n\t\t\t\t\tp.Credits -= Price;\n\t\t\t\t\tp.ClientMessage(GetName(P)$\", you now own the object\"@ownedalias$\" |P1(New credits: \"$P.Credits$\")\");\n\t\t\t\t\tbConfirm = False;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{p.ClientMessage(\"You can't afford this purchase.\");}\n\t\t\t}\n\n\t\t}",
                        "locals": [
                            "local DeusExPlayer p;"
                        ],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    },
                    "GetName": {
                        "body": "{\n\treturn P.PlayerReplicationInfo.PlayerName;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetName",
                        "native": false,
                        "param": [
                            [
                                "deusexplayer",
                                "P"
                            ]
                        ],
                        "return": "string"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 86,
                "replication": "",
                "states": [],
                "variables": [
                    "var(Owning) bool bPaytoOwn;",
                    "var(Owning) int Price;",
                    "var(Owning) string OwnedAlias;",
                    "var(Owning) int ReadNumber;",
                    "var OwningController MyController;",
                    "var bool bConfirm;",
                    "var int Bid;",
                    "var bool bPayout;"
                ]
            }
        },
        "OwningController.uc": {
            "body": "class OwningController extends Mutator\nconfig(Owning);\n\nvar config string Owners[30];\n\nfunction PostBeginPlay()\n{\nlocal OwnedScanner2 OS;\n\n\tLog(\"OwnedScanner mutator enabled.\",'TC');\n\tLevel.Game.BaseMutator.AddMutator (Self);\n\t\n\tforeach AllActors(class'OwnedScanner2', OS)\n\t{\n\t\tOS.myController = Self;\n\t}\n}\n\nfunction Mutate(string MutateString, PlayerPawn Sender)\n{\n\tlocal Actor hitActor;\n\tlocal vector loc, line, HitLocation, hitNormal;\n\tlocal string inputstr;\n\tlocal int inputint;\n\t\n\t\n\t   \tsuper.Mutate(MutateString, Sender);\n\t\t\n\t\tif(MutateString ~= \"sell\")\n\t\t{\n\t\t\tloc = Sender.Location;\n\t\t\tloc.Z += Sender.BaseEyeHeight;\n\t\t\tline = Vector(Sender.ViewRotation) * 4000;\n\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+line, loc, true);\n\t\t\t\n\t\t\tif(OwnedScanner2(HitActor) != None && Owners[OwnedScanner2(HitActor).ReadNumber] != \"\" && Owners[OwnedScanner2(HitActor).ReadNumber] == Sender.PlayerReplicationInfo.PlayerName)\n\t\t\t{\n\t\t\t\tOwners[OwnedScanner2(HitActor).ReadNumber] = \"\";\n\t\t\t\tSender.ClientMessage(\"Object sold.\");\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(Left(MutateString,5) ~= \"find \")\n        {\n\t\t   inputint = int(Right(MutateString, Len(MutateString) - 5));\n\t\t   Sender.ClientMessage(Owners[inputint]);\n\t\t}\n\t\t\n\t\tif(Left(MutateString,6) ~= \"clear \")\n        {\n\t\t   inputint = int(Right(MutateString, Len(MutateString) - 6));\n\t\t   if(Sender.bAdmin)\n\t\t   {\n\t\t\t    Sender.ClientMessage(\"|P2Deleting \"$Owners[inputint]);\n\t\t\t   Owners[inputint] = \"\";\n\t\t   }\n\t\t}\n}\n\ndefaultproperties\n{\n}\n",
            "name": "OwningController.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "Mutator",
                "functions": {
                    "Mutate": {
                        "body": "{\n\t\n\t\n\t   \tsuper.Mutate(MutateString, Sender);\n\t\t\n\t\tif(MutateString ~= \"sell\")\n\t\t{\n\t\t\tloc = Sender.Location;\n\t\t\tloc.Z += Sender.BaseEyeHeight;\n\t\t\tline = Vector(Sender.ViewRotation) * 4000;\n\t\t\tHitActor = Trace(hitLocation, hitNormal, loc+line, loc, true);\n\t\t\t\n\t\t\tif(OwnedScanner2(HitActor) != None && Owners[OwnedScanner2(HitActor).ReadNumber] != \"\" && Owners[OwnedScanner2(HitActor).ReadNumber] == Sender.PlayerReplicationInfo.PlayerName)\n\t\t\t{\n\t\t\t\tOwners[OwnedScanner2(HitActor).ReadNumber] = \"\";\n\t\t\t\tSender.ClientMessage(\"Object sold.\");\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(Left(MutateString,5) ~= \"find \")\n        {\n\t\t   inputint = int(Right(MutateString, Len(MutateString) - 5));\n\t\t   Sender.ClientMessage(Owners[inputint]);\n\t\t}\n\t\t\n\t\tif(Left(MutateString,6) ~= \"clear \")\n        {\n\t\t   inputint = int(Right(MutateString, Len(MutateString) - 6));\n\t\t   if(Sender.bAdmin)\n\t\t   {\n\t\t\t    Sender.ClientMessage(\"|P2Deleting \"$Owners[inputint]);\n\t\t\t   Owners[inputint] = \"\";\n\t\t   }\n\t\t}\n}",
                        "locals": [
                            "local Actor hitActor;",
                            "local vector loc, line, HitLocation, hitNormal;",
                            "local string inputstr;",
                            "local int inputint;"
                        ],
                        "modifiers": [],
                        "name": "Mutate",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "MutateString"
                            ],
                            [
                                "PlayerPawn",
                                "Sender"
                            ]
                        ],
                        "return": ""
                    },
                    "PostBeginPlay": {
                        "body": "{\n\n\tLog(\"OwnedScanner mutator enabled.\",'TC');\n\tLevel.Game.BaseMutator.AddMutator (Self);\n\t\n\tforeach AllActors(class'OwnedScanner2', OS)\n\t{\n\t\tOS.myController = Self;\n\t}\n}",
                        "locals": [
                            "local OwnedScanner2 OS;"
                        ],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 63,
                "replication": "",
                "states": [],
                "variables": [
                    "var config string Owners[30];"
                ]
            }
        },
        "PBeam.uc": {
            "body": "//=============================================================================\n// PressureBeam.\n//=============================================================================\nclass PBeam extends DeusExProjectile;\n\nvar ParticleGenerator pGen1;\nvar ParticleGenerator pGen2;\n\nvar float mpDamage;\nvar float mpBlastRadius;\n\n#exec OBJ LOAD FILE=Effects\n\nsimulated function DrawExplosionEffects(vector HitLocation, vector HitNormal)\n{\n\tlocal ParticleGenerator gen;\n\n\t// create a particle generator shooting out plasma spheres\n\tgen = Spawn(class'ParticleGenerator',,, HitLocation, Rotator(HitNormal));\n\tif (gen != None)\n\t{\n      gen.RemoteRole = ROLE_None;\n\t\tgen.particleDrawScale = 2.3;\n\t\tgen.checkTime = 0.10;\n\t\tgen.frequency = 3.0;\n\t\tgen.ejectSpeed = 400.0;\n\t\tgen.bGravity = True;\n\t\tgen.bRandomEject = True;\n\t\tgen.particleLifeSpan = 6.75;\n\t\tgen.particleTexture = Texture'Effects.Fire.Proj_PRifle';\n\t\tgen.LifeSpan = 1.3;\n\t}\n}\n\nfunction PostBeginPlay()\n{\n\tSuper.PostBeginPlay();\n\n   if ((Level.NetMode == NM_Standalone) || (Level.NetMode == NM_ListenServer))\n      SpawnPlasmaEffects();\n}\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\tDamage = mpDamage;\n\tblastRadius = mpBlastRadius;\n}\n\nsimulated function PostNetBeginPlay()\n{\n   if (Role < ROLE_Authority)\n      SpawnPlasmaEffects();\n}\n\n// DEUS_EX AMSD Should not be called as server propagating to clients.\nsimulated function SpawnPlasmaEffects()\n{\n\tlocal Rotator rot;\n   rot = Rotation;\n\trot.Yaw -= 32768;\n\n   pGen2 = Spawn(class'ParticleGenerator', Self,, Location, rot);\n\tif (pGen2 != None)\n\t{\n      pGen2.RemoteRole = ROLE_None;\n\t\tpGen2.particleTexture = Texture'Effects.Fire.Proj_PRifle';\n\t\tpGen2.particleDrawScale = 0.3;\n\t\tpGen2.checkTime = 0.04;\n\t\tpGen2.riseRate = 0.0;\n\t\tpGen2.ejectSpeed = 100.0;\n\t\tpGen2.particleLifeSpan = 6.5;\n\t\tpGen2.bRandomEject = True;\n\t\tpGen2.SetBase(Self);\n\t}\n\n}\n\nsimulated function Destroyed()\n{\n\tif (pGen1 != None)\n\t\tpGen1.DelayedDestroy();\n\tif (pGen2 != None)\n\t\tpGen2.DelayedDestroy();\n\n\tSuper.Destroyed();\n}\n\ndefaultproperties\n{\n     mpDamage=25.000000\n     mpBlastRadius=700.000000\n     bExplodes=True\n     bBlood=True\n     bDebris=True\n     blastRadius=128.000000\n     DamageType=Electrified\n     AccurateRange=14400\n     maxRange=54000\n     bIgnoresNanoDefense=True\n     ItemName=\"Pressure Beam\"\n     ItemArticle=\"a\"\n     speed=1500.000000\n     MaxSpeed=1500.000000\n     Damage=40.000000\n     MomentumTransfer=9000\n     ImpactSound=Sound'DeusExSounds.Weapons.PlasmaRifleHit'\n     ExplosionDecal=Class'DeusEx.ScorchMark'\n     Skin=FireTexture'Effects.Fire.flmethrwr_flme'\n     Mesh=LodMesh'DeusExItems.PlasmaBolt'\n     DrawScale=5.000000\n     bUnlit=True\n     LightBrightness=200\n     LightHue=80\n     LightSaturation=128\n     LightRadius=3\n     bFixedRotationDir=True\n}\n",
            "name": "PBeam.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "mpDamage=25.000000",
                    "mpBlastRadius=700.000000",
                    "bExplodes=True",
                    "bBlood=True",
                    "bDebris=True",
                    "blastRadius=128.000000",
                    "DamageType=Electrified",
                    "AccurateRange=14400",
                    "maxRange=54000",
                    "bIgnoresNanoDefense=True",
                    "ItemName=\"Pressure Beam\"",
                    "ItemArticle=\"a\"",
                    "speed=1500.000000",
                    "MaxSpeed=1500.000000",
                    "Damage=40.000000",
                    "MomentumTransfer=9000",
                    "ImpactSound=Sound'DeusExSounds.Weapons.PlasmaRifleHit'",
                    "ExplosionDecal=Class'DeusEx.ScorchMark'",
                    "Skin=FireTexture'Effects.Fire.flmethrwr_flme'",
                    "Mesh=LodMesh'DeusExItems.PlasmaBolt'",
                    "DrawScale=5.000000",
                    "bUnlit=True",
                    "LightBrightness=200",
                    "LightHue=80",
                    "LightSaturation=128",
                    "LightRadius=3",
                    "bFixedRotationDir=True"
                ],
                "exec": [
                    "#exec OBJ LOAD FILE=Effects"
                ],
                "extends": "DeusExProjectile",
                "functions": {
                    "Destroyed": {
                        "body": "{\n\tif (pGen1 != None)\n\t\tpGen1.DelayedDestroy();\n\tif (pGen2 != None)\n\t\tpGen2.DelayedDestroy();\n\n\tSuper.Destroyed();\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Destroyed",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "DrawExplosionEffects": {
                        "body": "{\n\n\t// create a particle generator shooting out plasma spheres\n\tgen = Spawn(class'ParticleGenerator',,, HitLocation, Rotator(HitNormal));\n\tif (gen != None)\n\t{\n      gen.RemoteRole = ROLE_None;\n\t\tgen.particleDrawScale = 2.3;\n\t\tgen.checkTime = 0.10;\n\t\tgen.frequency = 3.0;\n\t\tgen.ejectSpeed = 400.0;\n\t\tgen.bGravity = True;\n\t\tgen.bRandomEject = True;\n\t\tgen.particleLifeSpan = 6.75;\n\t\tgen.particleTexture = Texture'Effects.Fire.Proj_PRifle';\n\t\tgen.LifeSpan = 1.3;\n\t}\n}",
                        "locals": [
                            "local ParticleGenerator gen;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "DrawExplosionEffects",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "HitLocation"
                            ],
                            [
                                "vector",
                                "HitNormal"
                            ]
                        ],
                        "return": ""
                    },
                    "PostBeginPlay": {
                        "body": "{\n\tSuper.PostBeginPlay();\n\n   if ((Level.NetMode == NM_Standalone) || (Level.NetMode == NM_ListenServer))\n      SpawnPlasmaEffects();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PostNetBeginPlay": {
                        "body": "{\n   if (Role < ROLE_Authority)\n      SpawnPlasmaEffects();\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PostNetBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\tDamage = mpDamage;\n\tblastRadius = mpBlastRadius;\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "SpawnPlasmaEffects": {
                        "body": "{\n   rot = Rotation;\n\trot.Yaw -= 32768;\n\n   pGen2 = Spawn(class'ParticleGenerator', Self,, Location, rot);\n\tif (pGen2 != None)\n\t{\n      pGen2.RemoteRole = ROLE_None;\n\t\tpGen2.particleTexture = Texture'Effects.Fire.Proj_PRifle';\n\t\tpGen2.particleDrawScale = 0.3;\n\t\tpGen2.checkTime = 0.04;\n\t\tpGen2.riseRate = 0.0;\n\t\tpGen2.ejectSpeed = 100.0;\n\t\tpGen2.particleLifeSpan = 6.5;\n\t\tpGen2.bRandomEject = True;\n\t\tpGen2.SetBase(Self);\n\t}\n\n}",
                        "locals": [
                            "local Rotator rot;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "SpawnPlasmaEffects",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 120,
                "replication": "",
                "states": [],
                "variables": [
                    "var ParticleGenerator pGen1;",
                    "var ParticleGenerator pGen2;",
                    "var float mpDamage;",
                    "var float mpBlastRadius;"
                ]
            }
        },
        "PGArmour.uc": {
            "body": "//=============================================================================\n// AdaptiveArmor.\n//=============================================================================\nclass PGArmour extends DeusExPickup;\n\nvar() int Dur, Def;\nvar() bool bResistFire, bResistEMP, bResistPoison;\nvar int rDur, rDef;\n\nreplication\n{\nreliable if (bNetOwner && Role==ROLE_Authority)\nrDur, rdef;\n}\n\nfunction BeginPlay()\n{\n\trDur = Dur;\n\trdef = Def;\n}\n\nsimulated event RenderOverlays(canvas Canvas)\n{\n\tlocal DeusExPlayer P;\n\tlocal Actor CrosshairTarget;\n\tlocal float Scale, Accuracy, Dist;\n\tlocal vector HitLocation, HitNormal, StartTrace, EndTrace, X,Y,Z;\n\t\tlocal vector loc, line;\n\t\t\tlocal String KeyName, Alias, curKeyName;\n\tlocal int i;\n\tlocal string str;\n\t\n\tSuper.RenderOverlays(Canvas);\n\tP = DeusExPlayer(Owner);\n\tif ( P != None ) \n\t{\t\n\t\t\t\t//bOwnsCrossHair = True; \n\t\t\t\tScale = Canvas.ClipX/640;\n\t\t\t\tCanvas.SetPos(0.5 * Canvas.ClipX - 16 * Scale, 0.5 * Canvas.ClipY - 16 * Scale );\n\t\t\t\t//Canvas.Style = ERenderStyle.STY_Translucent;\n\t\t\t\tCanvas.DrawColor.R = 255;\n\t\t\t\tCanvas.DrawColor.G = 250;\n\t\t\t\tCanvas.DrawColor.B = 255;\n\t\t\t\tCanvas.Font = Canvas.SmallFont;\n\t\t\t\t\n\t\t\t\tif(bResistFire)\n\t\t\t\t\tstr = str@\"- Resists Flame\";\n\t\t\t\t\t\n\t\t\t\tif(bResistPoison)\n\t\t\t\t\tstr = str@\"- Resists Poison\";\n\t\t\t\t\n\t\t\t\tif(bResistEMP)\n\t\t\t\t\tstr = str@\"- Resists EMP\";\n\t\t\t\t\t\n\t\t\t\tCanvas.DrawText(\"      Armour: \"$rDef$\" - Durability: \"$rDur$str);\n\t}\n\t\t\t//else\n\t\t\t\t//bOwnsCrossHair = False; // Only for compatibility with HDX50\t\t\n}\n\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\ndefaultproperties\n{\n     Dur=5\n     Def=5\n     ItemName=\"Basic Armour\"\n     ItemArticle=\"some\"\n     PlayerViewOffset=(X=30.000000,Z=-12.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.AdaptiveArmor'\n     PickupViewMesh=LodMesh'DeusExItems.AdaptiveArmor'\n     ThirdPersonMesh=LodMesh'DeusExItems.AdaptiveArmor'\n     Charge=500\n     LandSound=Sound'DeusExSounds.Generic.PaperHit2'\n     Icon=Texture'DeusExUI.Icons.BeltIconArmorAdaptive'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconArmorAdaptive'\n     largeIconWidth=35\n     largeIconHeight=49\n     Description=\"Integrating woven fiber-optics and an advanced computing system, thermoptic camo can render an agent invisible to both humans and bots by dynamically refracting light and radar waves; however, the high power drain makes it impractial for more than short-term use, after which the circuitry is fused and it becomes useless.\"\n     beltDescription=\"ARMOUR\"\n     Mesh=LodMesh'DeusExItems.AdaptiveArmor'\n     CollisionRadius=11.500000\n     CollisionHeight=13.810000\n     Mass=30.000000\n     Buoyancy=20.000000\n}\n",
            "name": "PGArmour.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "Dur=5",
                    "Def=5",
                    "ItemName=\"Basic Armour\"",
                    "ItemArticle=\"some\"",
                    "PlayerViewOffset=(X=30.000000,Z=-12.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.AdaptiveArmor'",
                    "PickupViewMesh=LodMesh'DeusExItems.AdaptiveArmor'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.AdaptiveArmor'",
                    "Charge=500",
                    "LandSound=Sound'DeusExSounds.Generic.PaperHit2'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconArmorAdaptive'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconArmorAdaptive'",
                    "largeIconWidth=35",
                    "largeIconHeight=49",
                    "Description=\"Integrating woven fiber-optics and an advanced computing system, thermoptic camo can render an agent invisible to both humans and bots by dynamically refracting light and radar waves; however, the high power drain makes it impractial for more than short-term use, after which the circuitry is fused and it becomes useless.\"",
                    "beltDescription=\"ARMOUR\"",
                    "Mesh=LodMesh'DeusExItems.AdaptiveArmor'",
                    "CollisionRadius=11.500000",
                    "CollisionHeight=13.810000",
                    "Mass=30.000000",
                    "Buoyancy=20.000000"
                ],
                "exec": [],
                "extends": "DeusExPickup",
                "functions": {
                    "BeginPlay": {
                        "body": "{\n\trDur = Dur;\n\trdef = Def;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "BeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "RenderOverlays": {
                        "body": "{\n\t\n\tSuper.RenderOverlays(Canvas);\n\tP = DeusExPlayer(Owner);\n\tif ( P != None ) \n\t{\t\n\t\t\t\t//bOwnsCrossHair = True; \n\t\t\t\tScale = Canvas.ClipX/640;\n\t\t\t\tCanvas.SetPos(0.5 * Canvas.ClipX - 16 * Scale, 0.5 * Canvas.ClipY - 16 * Scale );\n\t\t\t\t//Canvas.Style = ERenderStyle.STY_Translucent;\n\t\t\t\tCanvas.DrawColor.R = 255;\n\t\t\t\tCanvas.DrawColor.G = 250;\n\t\t\t\tCanvas.DrawColor.B = 255;\n\t\t\t\tCanvas.Font = Canvas.SmallFont;\n\t\t\t\t\n\t\t\t\tif(bResistFire)\n\t\t\t\t\tstr = str@\"- Resists Flame\";\n\t\t\t\t\t\n\t\t\t\tif(bResistPoison)\n\t\t\t\t\tstr = str@\"- Resists Poison\";\n\t\t\t\t\n\t\t\t\tif(bResistEMP)\n\t\t\t\t\tstr = str@\"- Resists EMP\";\n\t\t\t\t\t\n\t\t\t\tCanvas.DrawText(\"      Armour: \"$rDef$\" - Durability: \"$rDur$str);\n\t}\n\t\t\t//else\n\t\t\t\t//bOwnsCrossHair = False; // Only for compatibility with HDX50\t\t\n}",
                        "locals": [
                            "local DeusExPlayer P;",
                            "local Actor CrosshairTarget;",
                            "local float Scale, Accuracy, Dist;",
                            "local vector HitLocation, HitNormal, StartTrace, EndTrace, X,Y,Z;",
                            "local vector loc, line;",
                            "local String KeyName, Alias, curKeyName;",
                            "local int i;",
                            "local string str;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "RenderOverlays",
                        "native": false,
                        "param": [
                            [
                                "canvas",
                                "Canvas"
                            ]
                        ],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 91,
                "replication": "",
                "states": [],
                "variables": [
                    "var() int Dur, Def;",
                    "var() bool bResistFire, bResistEMP, bResistPoison;",
                    "var int rDur, rDef;"
                ]
            }
        },
        "PGGames.uc": {
            "body": "//=============================================================================\n// PGGames\n//=============================================================================\nclass PGGames extends Mutator Config (TCMod);\n\nvar DeusExPlayer LastSeeker, Seeker, GameMaster, PGPlayerList[16];\nvar int randy, PlayerCount, ScavengerItemCount, HideRound, ScavengerRound, GuessRound, ClueCount, HuntRound, ScoundrelRound, FlagsRound, failedGuesses, Captures, MurderRound, MurderTarget;\n//Hide and Seek, Scavenger, Guess, Hunt, Scoundrel, Capture, Murderer\nvar bool bHSOn, bSOn, bGOn, bHOn, bScOn, bCOn, bMOn;\nvar bool bHidePhase; \nvar string SavedGuess;\nvar ScoundrelManager SM;\nvar DeusExPlayer Murderer;\n\nfunction BeepToAll(string str)\n{\n\tlocal DeusExPlayer DXP;\n\t\n\tforeach allactors(class'DeusExPlayer',DXP)\n\t{\n\t\tDXP.ClientMessage(str,'Say');\n\t}\n}\n\nfunction BeepToAdmins(string str)\n{\n\tlocal DeusExPlayer DXP;\n\t\n\tforeach allactors(class'DeusExPlayer',DXP)\n\t{\n\t\tif(DXP.bAdmin)\n\t\t{\n\t\t\tDXP.ClientMessage(\"|P2ADMIN: \"$str,'TeamSay');\t\n\t\t}\t\n\t}\n}\n\nfunction ModifyPlayer(Pawn Other)\n{\n\tlocal int x;\n\tlocal int k;\n\tlocal int i;\n\tlocal int m;\n\tlocal DeusExPlayer P;\n\tlocal PGSeeker ccc;\n\tlocal inventory inv;\n\t\tP = DeusExPlayer(Other);\n\n\tif(P==Seeker)\n\t{\n\t\tinv=Spawn(class'PGSeeker');\n\t\tInv.Frob(Seeker,None);\t  \n\t\tInventory.bInObjectBelt = True;\n\t\tinv.Destroy();\n\t}\n\n\t   Super.ModifyPlayer(Other);\n}\n\nfunction Tick(float deltatime)\n{\nlocal PGSItem PGSI;\nlocal int myCount;\nlocal DeusExPlayer DXP;\nlocal PGSeeker PGS;\nlocal PGHiderActors PGH;\nlocal inventory inv;\nlocal HideFailActor Fail;\n\n\tif(bScOn)\n\t{\n\t\tif(SM == None)\n\t\t{\n\t\t\tBroadcastMessage(\"ScoundrelManager not in play, disabling.\");\n\t\t\tbScOn=False;\t\t\n\t\t}\n\n\t}\n\t\n\tforeach AllActors(class'HideFailActor',Fail)\n\t{\n\t\tif(Fail != None)\n\t\t{\n\t\t\tif(Fail.BadPlayer == Seeker)\n\t\t\t{\n\t\t\t\tbHSOn=False;\n\t\t\t\tLastSeeker = Seeker;\n\t\t\t\tSeeker = None;\n\t\t\t\tFail.Destroy();\n\t\t\t\t\n\t\t\t\tforeach allactors(class'PGSeeker',PGS)\n\t\t\t\t{\n\t\t\t\t\tPGS.Destroy();\n\t\t\t\t}\t\t\t\n\t\t\t\t\n\t\t\t\tforeach allactors(class'PGHiderActors',PGH)\n\t\t\t\t{\n\t\t\t\t\tPGH.Destroy();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tforeach allactors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(!DXP.isinState('Spectating'))\n\t\t\t\t\t{\n\t\t\t\t\t\tDXP.bHidden=False;\n\t\t\t\t\t\tDXP.SetPhysics(PHYS_Falling);\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tBeepToAll(\"|P3Hide and Seek round \"$HideRound$\" has ended due to seeker failure.\");\t\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction PostBeginPlay ()\n{\n\tLevel.Game.BaseMutator.AddMutator (Self);\n\tbHSOn=False;\n\tbSOn=False;\n\tbGOn=False;\n\tbHOn=False;\n\tbScOn=False;\n\tbCOn=False;\n\tbMOn=False;\n\tHideRound = 0;\n\tScavengerRound = 0;\n\tGuessRound = 0;\n\tScoundrelRound = 0;\n\tFlagsRound = 0;\n\tHuntRound = 0;\n\tClueCount = 0;\n\tfailedGuesses = 0;\n\tCaptures=0;\n\tMurderRound=0;\n\tSavedGuess = \"\";\n\t//super.PostBeginPlay();\n}\n\nfunction Timer()\n{\nlocal PGSItem PGSI;\nlocal int myCount;\nlocal DeusExPlayer DXP;\nlocal PGSeeker PGS;\nlocal PGHiderActors PGH;\nlocal inventory inv;\n\n\tif(bHSOn && bHidePhase)\n\t{\n\t\tbHidePhase=False;\n\t\tBeepToAll(\"Hiding phase is over.\");\n\t\t\n\t\tforeach allactors(class'DeusExPlayer',DXP)\n\t\t{\n\t\t\t\tif(!DXP.isinState('Spectating'))\n\t\t\t\t{\n\t\t\t\t\tDXP.bHidden=False;\n\t\t\t\t}\n\t\t}\n\t\tinv=Spawn(class'PGSeeker');\n\t\tInv.Frob(Seeker,None);\t  \n\t\tInventory.bInObjectBelt = True;\n\t\tinv.Destroy();\n\t\tSeeker.SetPhysics(PHYS_Falling);\n\t\tSetTimer(2,False);\n\t}\n\t\n\tif(bHSOn && !bHidePhase)\n\t{\n\t\tmyCount=0;\n\t\tforeach allactors(class'DeusExPlayer',DXP)\n\t\t{\n\t\t\t\tif(!DXP.isinState('Spectating'))\n\t\t\t\t{\n\t\t\t\t\tmyCount++;\n\t\t\t\t}\n\t\t}\n\t\tforeach AllActors(class'PGHiderActors',PGH)\n\t\t{\n\t\t\tmyCount--;\n\t\t}\n\t\tmyCount--; //Negative one for the Seeker\n\t\t\n\t\tif(myCount <= 0)\n\t\t{\n\t\t\tbHSOn=False;\n\t\t\tLastSeeker = Seeker;\n\t\t\tSeeker = None;\n\t\t\tforeach allactors(class'PGSeeker',PGS)\n\t\t\t{\n\t\t\t\tPGS.Destroy();\n\t\t\t}\t\t\t\n\t\t\t\n\t\t\tforeach allactors(class'PGHiderActors',PGH)\n\t\t\t{\n\t\t\t\tPGH.Destroy();\n\t\t\t}\n\t\t\tBeepToAll(\"|P3Hide and Seek round \"$HideRound$\" has ended.\");\n\t\t}\n\t\telse if(myCount >= 1)\n\t\t{\n\t\t\tSetTimer(2,False);\n\t\t}\t\n\t}\n\t\n\tif(bSOn)\n\t{\n\t\tmyCount=0;\n\t\tforeach AllActors(class'PGSItem',PGSI)\n\t\t{\n\t\t\tmyCount++;\n\t\t}\n\t\t\n\t\tif(myCount == 0)\n\t\t{\n\t\t\tbSOn=False;\n\t\t\t\n\t\t\tforeach AllActors(class'PGSItem',PGSI)\n\t\t\t{\n\t\t\t\tPGSI.Destroy();\n\t\t\t}\n\t\t\t\n\t\t\tBeepToAll(\"|P2Scavenger Hunt round \"$ScavengerRound$\" has ended.\");\t\n\t\t}\n\t\telse if(myCount >= 1)\n\t\t{\n\t\t\tSetTimer(2,False);\n\t\t}\t\n\t}\n\n\tif(bMOn)\n\t{\n\t\tGiveMurdererInv();\n\t\tGiveSurviveInv();\n\t\tBeepToAll(\"Begin the hunt.\");\n\t\t\tforeach AllActors(class'DeusExPlayer', DXP)\n\t\t\t{\n\t\t\t\tif(Murderer == DXP)\n\t\t\t\t{\n\t\t\t\t\tDXP.ClientMessage(\"|P2You are the murderer. \"$MurderTarget$\" kills to win.\");\n\t\t\t\t}\n\t\t\t}\n\t}\n}\n\nfunction Mutate (String S, PlayerPawn PP)\n{\n\tlocal int ID, JSlot;\n\tlocal string part, pg;\n\tlocal Pawn APawn;\n\tlocal DeusExPlayer DXP;\n\tlocal Inventory inv;\n\tlocal PGSItem PGSI;\n\tlocal int myCount;\n\tlocal PGSeeker PGS;\n\tlocal PGHiderActors PGH;\n\tlocal psRepeater rep;\n\tlocal CaptureFlag CFlag;\n\tlocal CaptureFlagSpawner CF;\n\tSuper.Mutate (S, PP);\n\t\n\t\tif(S ~= \"GameList\")\n\t\t{\n\t\tBroadcastMessage(\"|P1GAMES: |P3HIDE|P1, |P3SCAVENGER|P1, |P3GUESS|P1, |P4SCOUNDREL|P1, |P2CAPTURE|P1, |P2HUNT|P1, |P2MURDER|P1.\");\n\t\tBroadcastMessage(\"|P2<UNPLAYABLE> |P3<COMPLETE> |P4<EXPERIMENTAL>\");\n\t\t}\n\t\t\n\t\tif(S ~= \"GameCommands\")\n\t\t{\n\t\tBroadcastMessage(\"|P4HideStart, GuessStart, Guess, GuessClue, ScoundrelStart, ScavengerStart, MurderStart. MurderEnd\");\n\t\tBroadcastMessage(\"|P4HideEnd, GuessEnd, ScoundrelEnd, ScavengerEnd, ScavengerCount, HideCount, GetSeeker, CaptureStart, CaptureEnd\");\n\t\tBroadcastMessage(\"|P4Games, GameList\");\n\t\t}\n\t\t\n\t\tif(S ~= \"Games\")\n\t\t{\n\t\t\tif(bGOn)\n\t\t\t{\n\t\t\t\tBroadcastMessage(\"Guessing game is active! [Round \"$GuessRound$\"]\");\n\t\t\t\tBeepToAll(\"Game Starter: \"$GameMaster.PlayerReplicationInfo.PlayerName);\n\t\t\t\tpg = left(SavedGuess,ClueCount);\n\t\t\t\tmyCount = Len(SavedGuess);\n\t\t\t\tBeepToAll(\"Current Clue: \"$pg);\n\t\t\t\tBroadcastMessage(\"Failed Guesses:\"@failedGuesses);\n\t\t\t\tif(ClueCount >= 3)\n\t\t\t\t{\n\t\t\t\t\tBroadcastMessage(myCount$\" characters long.\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif(bHSOn)\n\t\t\t{\n\t\t\t\tBroadcastMessage(\"Hide and Seek is active! [Round \"$HideRound$\"]\");\n\t\t\t\tBeepToAll(\"Seeker: \"$Seeker.PlayerReplicationInfo.PlayerName);\n\t\t\t\tmyCount=0;\n\t\t\t\tforeach allactors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(!DXP.isinState('Spectating'))\n\t\t\t\t\t{\n\t\t\t\t\tmyCount++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tforeach AllActors(class'PGHiderActors',PGH)\n\t\t\t\t{\n\t\t\t\t\tmyCount--;\n\t\t\t\t}\n\t\t\t\tmyCount--; //Negative one for the Seeker\n\t\t\t\tBroadcastMessage(myCount$\" hiders remaining.\");\n\t\t\t\tif(bHidePhase)\n\t\t\t\t{\n\t\t\t\t\tBroadcastMessage(\"Currently in hiding phase.\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif(bSOn)\n\t\t\t{\n\t\t\t\tBeepToAll(\"Scavenger hunt is active! [Round \"$ScavengerRound$\"]\");\n\t\t\t\tmyCount=0;\n\t\t\t\tforeach AllActors(class'PGSItem',PGSI)\n\t\t\t\t{\n\t\t\t\t\tmyCount++;\n\t\t\t\t}\t\t\n\t\t\t\tBroadcastMessage(myCount$\" items remaining.\");\n\t\t\t}\n\t\t\t\n\t\t\tif(bScOn)\n\t\t\t{\n\t\t\t\tBeepToAll(\"Scoundrel hunt is active! [Round \"$ScoundrelRound$\"]\");\t\t\t\t\n\t\t\t}\n\t\t\t\t\t\n\t\t\tif(bCOn)\n\t\t\t{\n\t\t\t\tBeepToAll(\"Capture is running!\");\t\t\t\t\n\t\t\t}\n\t\t\tif(bMOn)\n\t\t\t{\n\t\t\t\tBeepToAll(\"Murder is running!\");\t\t\t\t\n\t\t\t}\t\t\t\n\t\t}\n\t\t\n\t\tif(S ~= \"ScoundrelStart\" && PP.bAdmin) \n\t\t{\n\t\t\tbScOn=True;\n\t\t\tScoundrelRound++;\n\t\t\tBroadcastMessage(\"Scoundrel starting! [Round \"$ScoundrelRound$\"]\");\n\t\t\tSM = spawn(class'ScoundrelManager',,,Location,);\n\t\t\tSM.myRef = Self;\n\t\t}\n\t\t\n\t\tif(S ~= \"ScoundrelEnd\" && bScOn) \n\t\t{\n\t\t\tbScOn=False;\n\t\t\tSM.CloseGame();\n\t\t}\t\n\t\t\t\t\n\t\tif(left(S,11) ~= \"GuessStart \" && !bGOn)\n        {\n\t\t\tPG = Right(S, Len(S) - 11);\n\t\t\tbGOn=True;\n\t\t\tSavedGuess = PG;\n\t\t\tGameMaster = DeusExPlayer(PP);\n\t\t\tClueCount=0;\n\t\t\tPP.ClientMessage(\"CLIENT: \"$SavedGuess$\" answered locked in.\");\n\t\t\tGuessRound++;\n\t\t\tBeepToAll(\"|P2Guessing game has begun. [Round \"$GuessRound$\"]\");\n\t\t\tBroadcastMessage(\"|P2\"$GameMaster.PlayerReplicationInfo.PlayerName$\" has locked in an answer. [\"$len(SavedGuess)$\" characters]\");\n\t\t}\n\t\n\t\tif(S ~= \"GuessEnd\" && bGOn && (PP == GameMaster || PP.bAdmin))\n        {\n\t\t\tbGOn=False;\n\t\t\tClueCount = 0;\n\t\t\tfailedGuesses = 0;\n\t\t\tSavedGuess = \"\";\n\t\t\tGameMaster = None;\n\t\t\tBeepToAll(\"|P2Guessing game has ended. [Round \"$GuessRound$\"]\");\n\t\t}\n\t\n\t\tif(left(S,6) ~= \"Guess \" && bGOn && PP != GameMaster)\n        {\n          //  PG = Right(S, Len(S) - 6),InStr(S,\" \"));\n\t\t\tPG = Right(S, Len(S) - 6);\n\t\t\t\tif(PG ~= SavedGuess)\n\t\t\t\t{\n\t\t\t\t\tBeepToAll(\"|P3\"$DeusExPlayer(PP).PlayerReplicationInfo.PlayerName$\" guessed \"$PG$\" [\"$len(PG)$\"]\");\n\t\t\t\t\tBroadcastMessage(PG$\" was correct! [\"$failedGuesses$\" incorrect guesses this round]\");\n\t\t\t\t\tDeusExPlayer(PP).PlayerReplicationInfo.Score += 10;\n\t\t\t\t\tbGOn=False;\n\t\t\t\t\tClueCount = 0;\n\t\t\t\t\tfailedGuesses = 0;\n\t\t\t\t\tSavedGuess = \"\";\n\t\t\t\t\tGameMaster = None;\n\t\t\t\t\tBroadcastMessage(\"|P2Guessing game has ended. [Round \"$GuessRound$\"]\");\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tBroadcastMessage(\"|P2\"$DeusExPlayer(PP).PlayerReplicationInfo.PlayerName$\" guessed \"$PG$\". [\"$len(PG)$\"]\");\n\t\t\t\t\tBeepToAll(PG$\" was incorrect!\");\n\t\t\t\t\tfailedGuesses++;\n\t\t\t\t\tDeusExPlayer(PP).PlayerReplicationInfo.Score -= 1;\n\t\t\t\t\tif(failedGuesses == 2 || failedGuesses == 5 || failedGuesses == 10 || failedGuesses == 20 || failedGuesses == 30)\n\t\t\t\t\t{\n\t\t\t\t\t\tClueCount++;\n\t\t\t\t\t\tpg = left(SavedGuess,ClueCount);\n\t\t\t\t\t\tmyCount = Len(SavedGuess);\n\t\t\t\t\t\tBroadcastMessage(\"Clue was given: \"$pg);\n\t\t\t\t\t\tif(ClueCount >= 3)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tBroadcastMessage(myCount$\" characters long.\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t}\n\t\t\n\t\tif(S ~= \"GuessClue\" && bGOn && PP == GameMaster)\n        {\n\t\t\tClueCount++;\n\t\t\tpg = left(SavedGuess,ClueCount);\n\t\t\tmyCount = Len(SavedGuess);\n\t\t\tBeepToAll(\"Clue was given: \"$pg);\n\t\t\tif(ClueCount >= 3)\n\t\t\t{\n\t\t\t\tBroadcastMessage(myCount$\" characters long.\");\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(S ~= \"HideStart\" && !bHSOn  ) \n\t\t{\n\t\t\tbHSOn=True;\n\n\t\t\tSeeker = DeusExPlayer(PP);\n\n\t\t\tforeach allactors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(!DXP.isinState('Spectating'))\n\t\t\t\t{\n\t\t\t\tDXP.bHidden=True;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSeeker.bHidden=False;\n\t\t\tSeeker.SetPhysics(PHYS_None);\n\t\t\tHideRound++;\n\t\t\tBeepToAll(\"|P2Hide and Seek game has begun. [Round \"$HideRound$\"]\");\n\t\t\tBroadcastMessage(Seeker.PlayerReplicationInfo.PlayerName$\" is now a Seeker.\");\n\t\t\tBroadcastMessage(\"HIDE PHASE: Players are invisible, seeker is locked in position.\");\n\t\t\tbHidePhase=True;\n\t\t\tSetTimer(60,False);\n\t\t}\n\t\t\n\t\tif(S ~= \"GetSeeker\" && bHSOn && DeusExPlayer(PP) == Seeker)\n\t\t{\t\t\n\t\t\tinv=Spawn(class'PGSeeker');\n\t\t\tInv.Frob(Seeker,None);\t  \n\t\t\tInventory.bInObjectBelt = True;\n\t\t\tinv.Destroy();\t\n\t\t}\n\t\t\n\t\tif(S ~= \"HideEnd\" && bHSOn && DeusExPlayer(PP).bAdmin)\n\t\t{\n\t\tbHSOn=False;\n\t\tLastSeeker = Seeker;\n\t\tSeeker = None;\n\t\t\tforeach allactors(class'PGSeeker',PGS)\n\t\t\t{\n\t\t\t\tPGS.Destroy();\n\t\t\t}\t\t\t\n\t\t\t\n\t\t\tforeach allactors(class'PGHiderActors',PGH)\n\t\t\t{\n\t\t\t\tPGH.Destroy();\n\t\t\t}\n\t\t\tforeach allactors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(!DXP.isinState('Spectating'))\n\t\t\t\t{\n\t\t\t\t\tDXP.bHidden=False;\n\t\t\t\t\tDXP.SetPhysics(PHYS_Falling);\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\tBeepToAll(\"|P3Hide and Seek round \"$HideRound$\" has ended.\");\n\t\t}\n\t\t\t\t\n\t\tif(S ~= \"ScavengerStart\" && !bSOn && DeusExPlayer(PP).bAdmin)\n\t\t{\n\t\t\t//ResetScores();\n\t\t\tScavengerItemCount=0;\n\t\t\tforeach AllActors(class'PGSItem',PGSI)\n\t\t\t{\n\t\t\t\tScavengerItemCount++;\n\t\t\t\tPGSI.bActive=True;\n\t\t\t}\n\t\t\t\tif(ScavengerItemCount == 0)\n\t\t\t\t{\n\t\t\t\t\tBroadcastMessage(\"Scavenger Hunt could not begin! :: No Items Placed.\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\tbSOn=True;\n\t\t\tScavengerRound++;\n\t\t\tBeepToAll(\"|P2Scavenger Hunt game has begun. [Round \"$ScavengerRound$\"]\");\n\t\t\tBroadcastMessage(ScavengerItemCount$\" items to find.\");\n\t\t\tSetTimer(2,False);\n\t\t}\n\t\t\n\t\tif(S ~= \"ScavengerEnd\" && bSOn && DeusExPlayer(PP).bAdmin)\n\t\t{\n\t\t\tbSOn=False;\n\t\t\t\n\t\t\tforeach AllActors(class'PGSItem',PGSI)\n\t\t\t{\n\t\t\t\tPGSI.Destroy();\n\t\t\t}\n\t\t\t\n\t\t\tBroadcastMessage(\"|P2Scavenger Hunt round \"$ScavengerRound$\" has ended.\");\n\t\t}\n\t\t\n\t\tif(S ~= \"ScavengerCount\" && bSOn) \n\t\t{\n\n\t\t\tmyCount=0;\n\t\t\tforeach AllActors(class'PGSItem',PGSI)\n\t\t\t{\n\t\t\t\tmyCount++;\n\t\t\t}\t\t\n\t\t\tBroadcastMessage(myCount$\" items remaining.\");\n\t\t}\n\t\t\n\t\tif(S ~= \"HideCount\" && bHSOn)\n\t\t{\n\t\t\tmyCount=0;\n\t\t\tforeach allactors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(!DXP.isinState('Spectating'))\n\t\t\t\t{\n\t\t\t\tmyCount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tforeach AllActors(class'PGHiderActors',PGH)\n\t\t\t{\n\t\t\t\tmyCount--;\n\t\t\t}\n\t\t\tmyCount--; //Negative one for the Seeker\n\t\t\tBroadcastMessage(myCount$\" hiders remaining.\");\n\t\t}\n\t\t\n\t\tif(S ~= \"MurderStart\" && !bMOn && !bHSOn)\n\t\t{\n\t\t\tBroadcastMessage(\"There's a murderer among you...\");\n\t\t\tSelectMurderer();\n\t\t\tbMOn=True;\n\t\t\tMurderRound++;\n\t\t}\n\n\t\tif(S ~= \"MurderEnd\" && bMOn)\n\t\t{\n\t\t\n\t\t}\n\t\t\n\t\tif(S ~= \"CaptureStart\" && !bCOn)\n\t\t{\n\t\t\tCaptures++;\n\t\t\tBroadcastMessage(\"Starting Capture. [Round \"$Captures$\"]\");\n\t\t\tbCOn=True;\n\t\t\tforeach AllActors(class'CaptureFlagSpawner',CF)\n\t\t\t\tCF.SetTimer(10,False);\n\t\t}\n\n\t\tif(S ~= \"CaptureEnd\" && bCOn)\n\t\t{\n\t\t\tbCOn=False;\n\t\t\tforeach AllActors(class'CaptureFlag',CFlag)\n\t\t\t\tCFlag.Destroy();\n\t\t}\n\t\t\n\t\tif( DeusExPlayer(PP).bAdmin && S ~= \"ClearScore\"  && !bHSOn  && !bSOn && !bGOn && !bScOn && !bMOn )\n\t\t{\n\t\t\tBeepToAll(\"Scoreboard reset.\");\n\t\t\tResetScores();\n\t\t}\n}\n\nfunction SelectMurderer()\n{\nlocal int i, u, k;\n    local Pawn APawn;\n//Pass one, count the player numbers\n\tfor(APawn = level.PawnList; APawn != none; APawn = APawn.nextPawn)\n        if(APawn.bIsPlayer && !APawn.IsInState('Spectating'))\n            if(PlayerPawn(APawn) == none || NetConnection(PlayerPawn(APawn).Player) != none)\n\t\t\t\ti++;\n\t\t\t\t\n\tBeepToAll(i$\" players. Randomizing selection.\");\n\tk = Rand(i);\n\tBeepToAll(string(k));\n\t\n\tfor(APawn = level.PawnList; APawn != none; APawn = APawn.nextPawn)\n        if(APawn.bIsPlayer && !APawn.IsInState('Spectating'))\n            if(PlayerPawn(APawn) == none || NetConnection(PlayerPawn(APawn).Player) != none)\n\t\t\t{\n\t\t\t\tif(u == k)\n\t\t\t\t{\t\n\t\t\t\t\tMurderer = DeusExPlayer(APawn);\n\t\t\t\t\tBeepToAll(\"Selection process ended.\");\n\t\t\t\t\tSetTimer(10,False);\n\t\t\t\t\tMurderTarget=i;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tu++;\n\t\t\t\t}\n\t\t\t}\n}\n\nfunction GiveSurviveInv()\n{\nlocal inventory inv;\n    local Pawn APawn;\n\tfor(APawn = level.PawnList; APawn != none; APawn = APawn.nextPawn)\n\t\tif(APawn.bIsPlayer)\n\t\t\tif(PlayerPawn(APawn) == none || NetConnection(PlayerPawn(APawn).Player) != none)\n\t\t\t{\n\t\t\t\tif(DeusExPlayer(APawn) != Murderer)\n\t\t\t\t{\n\t\t\t\t\t/*HDisarm(DeusExPlayer(APawn));\n\t\t\t\t\tinv=Spawn(class'WeaponSurviveKnife');\n\t\t\t\t\tInv.Frob(DeusExPlayer(APawn),None);\t  \n\t\t\t\t\tInventory.bInObjectBelt = True;\n\t\t\t\t\tinv.Destroy();\n\n\t\t\t\t\tinv=Spawn(class'WeaponSurvivePistol');\n\t\t\t\t\tInv.Frob(DeusExPlayer(APawn),None);\t  \n\t\t\t\t\tInventory.bInObjectBelt = True;\n\t\t\t\t\tinv.Destroy();*/\n\t\t\t\t}\n\t\t\t}\n}\n\nfunction GiveMurdererInv()\n{\nlocal inventory inv;\n    local Pawn APawn;\n\tfor(APawn = level.PawnList; APawn != none; APawn = APawn.nextPawn)\n\t\tif(APawn.bIsPlayer)\n\t\t\tif(PlayerPawn(APawn) == none || NetConnection(PlayerPawn(APawn).Player) != none)\n\t\t\t{\n\t\t\t\tif(DeusExPlayer(APawn) == Murderer)\n\t\t\t\t{\n\t\t\t\t\tHDisarm(DeusExPlayer(APawn));\n\t\t\t\t/*\tinv=Spawn(class'WeaponMurderKnife');\n\t\t\t\t\tInv.Frob(DeusExPlayer(APawn),None);\t  \n\t\t\t\t\tInventory.bInObjectBelt = True;\n\t\t\t\t\tinv.Destroy();\n\n\t\t\t\t\tinv=Spawn(class'WeaponMurderPistol');\n\t\t\t\t\tInv.Frob(DeusExPlayer(APawn),None);\t  \n\t\t\t\t\tInventory.bInObjectBelt = True;\n\t\t\t\t\tinv.Destroy();*/\n\t\t\t\t}\n\t\t\t}\n}\n\nfunction HDisarm(DeusExPlayer Other)\n{\nlocal DeusExWeapon w;\n  foreach allactors(class'DeusExWeapon',W)\n\t{\n\t\tif(W.Owner == Other)\n\t\t{\n\t\t\tW.Destroy();\n\t\t}\n\t}\n}\n\nfunction ResetScores()\n{\nlocal PlayerReplicationInfo PRI;\n\tforeach allactors(class'PlayerReplicationInfo',PRI)\n\t{\n\t\tPRI.Score = 0;\n\t\tPRI.Deaths = 0;\n\t\tPRI.Streak = 0;\n\t}\n}\n\ndefaultproperties\n{\n}\n",
            "name": "PGGames.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "Mutator",
                "functions": {
                    "BeepToAdmins": {
                        "body": "{\n\t\n\tforeach allactors(class'DeusExPlayer',DXP)\n\t{\n\t\tif(DXP.bAdmin)\n\t\t{\n\t\t\tDXP.ClientMessage(\"|P2ADMIN: \"$str,'TeamSay');\t\n\t\t}\t\n\t}\n}",
                        "locals": [
                            "local DeusExPlayer DXP;"
                        ],
                        "modifiers": [],
                        "name": "BeepToAdmins",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "str"
                            ]
                        ],
                        "return": ""
                    },
                    "BeepToAll": {
                        "body": "{\n\t\n\tforeach allactors(class'DeusExPlayer',DXP)\n\t{\n\t\tDXP.ClientMessage(str,'Say');\n\t}\n}",
                        "locals": [
                            "local DeusExPlayer DXP;"
                        ],
                        "modifiers": [],
                        "name": "BeepToAll",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "str"
                            ]
                        ],
                        "return": ""
                    },
                    "GiveMurdererInv": {
                        "body": "{\n\tfor(APawn = level.PawnList; APawn != none; APawn = APawn.nextPawn)\n\t\tif(APawn.bIsPlayer)\n\t\t\tif(PlayerPawn(APawn) == none || NetConnection(PlayerPawn(APawn).Player) != none)\n\t\t\t{\n\t\t\t\tif(DeusExPlayer(APawn) == Murderer)\n\t\t\t\t{\n\t\t\t\t\tHDisarm(DeusExPlayer(APawn));\n\t\t\t\t/*\tinv=Spawn(class'WeaponMurderKnife');\n\t\t\t\t\tInv.Frob(DeusExPlayer(APawn),None);\t  \n\t\t\t\t\tInventory.bInObjectBelt = True;\n\t\t\t\t\tinv.Destroy();\n\n\t\t\t\t\tinv=Spawn(class'WeaponMurderPistol');\n\t\t\t\t\tInv.Frob(DeusExPlayer(APawn),None);\t  \n\t\t\t\t\tInventory.bInObjectBelt = True;\n\t\t\t\t\tinv.Destroy();*/\n\t\t\t\t}\n\t\t\t}\n}",
                        "locals": [
                            "local inventory inv;",
                            "local Pawn APawn;"
                        ],
                        "modifiers": [],
                        "name": "GiveMurdererInv",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "GiveSurviveInv": {
                        "body": "{\n\tfor(APawn = level.PawnList; APawn != none; APawn = APawn.nextPawn)\n\t\tif(APawn.bIsPlayer)\n\t\t\tif(PlayerPawn(APawn) == none || NetConnection(PlayerPawn(APawn).Player) != none)\n\t\t\t{\n\t\t\t\tif(DeusExPlayer(APawn) != Murderer)\n\t\t\t\t{\n\t\t\t\t\t/*HDisarm(DeusExPlayer(APawn));\n\t\t\t\t\tinv=Spawn(class'WeaponSurviveKnife');\n\t\t\t\t\tInv.Frob(DeusExPlayer(APawn),None);\t  \n\t\t\t\t\tInventory.bInObjectBelt = True;\n\t\t\t\t\tinv.Destroy();\n\n\t\t\t\t\tinv=Spawn(class'WeaponSurvivePistol');\n\t\t\t\t\tInv.Frob(DeusExPlayer(APawn),None);\t  \n\t\t\t\t\tInventory.bInObjectBelt = True;\n\t\t\t\t\tinv.Destroy();*/\n\t\t\t\t}\n\t\t\t}\n}",
                        "locals": [
                            "local inventory inv;",
                            "local Pawn APawn;"
                        ],
                        "modifiers": [],
                        "name": "GiveSurviveInv",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "HDisarm": {
                        "body": "{\n  foreach allactors(class'DeusExWeapon',W)\n\t{\n\t\tif(W.Owner == Other)\n\t\t{\n\t\t\tW.Destroy();\n\t\t}\n\t}\n}",
                        "locals": [
                            "local DeusExWeapon w;"
                        ],
                        "modifiers": [],
                        "name": "HDisarm",
                        "native": false,
                        "param": [
                            [
                                "DeusExPlayer",
                                "Other"
                            ]
                        ],
                        "return": ""
                    },
                    "ModifyPlayer": {
                        "body": "{\n\t\tP = DeusExPlayer(Other);\n\n\tif(P==Seeker)\n\t{\n\t\tinv=Spawn(class'PGSeeker');\n\t\tInv.Frob(Seeker,None);\t  \n\t\tInventory.bInObjectBelt = True;\n\t\tinv.Destroy();\n\t}\n\n\t   Super.ModifyPlayer(Other);\n}",
                        "locals": [
                            "local int x;",
                            "local int k;",
                            "local int i;",
                            "local int m;",
                            "local DeusExPlayer P;",
                            "local PGSeeker ccc;",
                            "local inventory inv;"
                        ],
                        "modifiers": [],
                        "name": "ModifyPlayer",
                        "native": false,
                        "param": [
                            [
                                "Pawn",
                                "Other"
                            ]
                        ],
                        "return": ""
                    },
                    "Mutate": {
                        "body": "{\n\tSuper.Mutate (S, PP);\n\t\n\t\tif(S ~= \"GameList\")\n\t\t{\n\t\tBroadcastMessage(\"|P1GAMES: |P3HIDE|P1, |P3SCAVENGER|P1, |P3GUESS|P1, |P4SCOUNDREL|P1, |P2CAPTURE|P1, |P2HUNT|P1, |P2MURDER|P1.\");\n\t\tBroadcastMessage(\"|P2<UNPLAYABLE> |P3<COMPLETE> |P4<EXPERIMENTAL>\");\n\t\t}\n\t\t\n\t\tif(S ~= \"GameCommands\")\n\t\t{\n\t\tBroadcastMessage(\"|P4HideStart, GuessStart, Guess, GuessClue, ScoundrelStart, ScavengerStart, MurderStart. MurderEnd\");\n\t\tBroadcastMessage(\"|P4HideEnd, GuessEnd, ScoundrelEnd, ScavengerEnd, ScavengerCount, HideCount, GetSeeker, CaptureStart, CaptureEnd\");\n\t\tBroadcastMessage(\"|P4Games, GameList\");\n\t\t}\n\t\t\n\t\tif(S ~= \"Games\")\n\t\t{\n\t\t\tif(bGOn)\n\t\t\t{\n\t\t\t\tBroadcastMessage(\"Guessing game is active! [Round \"$GuessRound$\"]\");\n\t\t\t\tBeepToAll(\"Game Starter: \"$GameMaster.PlayerReplicationInfo.PlayerName);\n\t\t\t\tpg = left(SavedGuess,ClueCount);\n\t\t\t\tmyCount = Len(SavedGuess);\n\t\t\t\tBeepToAll(\"Current Clue: \"$pg);\n\t\t\t\tBroadcastMessage(\"Failed Guesses:\"@failedGuesses);\n\t\t\t\tif(ClueCount >= 3)\n\t\t\t\t{\n\t\t\t\t\tBroadcastMessage(myCount$\" characters long.\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif(bHSOn)\n\t\t\t{\n\t\t\t\tBroadcastMessage(\"Hide and Seek is active! [Round \"$HideRound$\"]\");\n\t\t\t\tBeepToAll(\"Seeker: \"$Seeker.PlayerReplicationInfo.PlayerName);\n\t\t\t\tmyCount=0;\n\t\t\t\tforeach allactors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(!DXP.isinState('Spectating'))\n\t\t\t\t\t{\n\t\t\t\t\tmyCount++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tforeach AllActors(class'PGHiderActors',PGH)\n\t\t\t\t{\n\t\t\t\t\tmyCount--;\n\t\t\t\t}\n\t\t\t\tmyCount--; //Negative one for the Seeker\n\t\t\t\tBroadcastMessage(myCount$\" hiders remaining.\");\n\t\t\t\tif(bHidePhase)\n\t\t\t\t{\n\t\t\t\t\tBroadcastMessage(\"Currently in hiding phase.\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif(bSOn)\n\t\t\t{\n\t\t\t\tBeepToAll(\"Scavenger hunt is active! [Round \"$ScavengerRound$\"]\");\n\t\t\t\tmyCount=0;\n\t\t\t\tforeach AllActors(class'PGSItem',PGSI)\n\t\t\t\t{\n\t\t\t\t\tmyCount++;\n\t\t\t\t}\t\t\n\t\t\t\tBroadcastMessage(myCount$\" items remaining.\");\n\t\t\t}\n\t\t\t\n\t\t\tif(bScOn)\n\t\t\t{\n\t\t\t\tBeepToAll(\"Scoundrel hunt is active! [Round \"$ScoundrelRound$\"]\");\t\t\t\t\n\t\t\t}\n\t\t\t\t\t\n\t\t\tif(bCOn)\n\t\t\t{\n\t\t\t\tBeepToAll(\"Capture is running!\");\t\t\t\t\n\t\t\t}\n\t\t\tif(bMOn)\n\t\t\t{\n\t\t\t\tBeepToAll(\"Murder is running!\");\t\t\t\t\n\t\t\t}\t\t\t\n\t\t}\n\t\t\n\t\tif(S ~= \"ScoundrelStart\" && PP.bAdmin) \n\t\t{\n\t\t\tbScOn=True;\n\t\t\tScoundrelRound++;\n\t\t\tBroadcastMessage(\"Scoundrel starting! [Round \"$ScoundrelRound$\"]\");\n\t\t\tSM = spawn(class'ScoundrelManager',,,Location,);\n\t\t\tSM.myRef = Self;\n\t\t}\n\t\t\n\t\tif(S ~= \"ScoundrelEnd\" && bScOn) \n\t\t{\n\t\t\tbScOn=False;\n\t\t\tSM.CloseGame();\n\t\t}\t\n\t\t\t\t\n\t\tif(left(S,11) ~= \"GuessStart \" && !bGOn)\n        {\n\t\t\tPG = Right(S, Len(S) - 11);\n\t\t\tbGOn=True;\n\t\t\tSavedGuess = PG;\n\t\t\tGameMaster = DeusExPlayer(PP);\n\t\t\tClueCount=0;\n\t\t\tPP.ClientMessage(\"CLIENT: \"$SavedGuess$\" answered locked in.\");\n\t\t\tGuessRound++;\n\t\t\tBeepToAll(\"|P2Guessing game has begun. [Round \"$GuessRound$\"]\");\n\t\t\tBroadcastMessage(\"|P2\"$GameMaster.PlayerReplicationInfo.PlayerName$\" has locked in an answer. [\"$len(SavedGuess)$\" characters]\");\n\t\t}\n\t\n\t\tif(S ~= \"GuessEnd\" && bGOn && (PP == GameMaster || PP.bAdmin))\n        {\n\t\t\tbGOn=False;\n\t\t\tClueCount = 0;\n\t\t\tfailedGuesses = 0;\n\t\t\tSavedGuess = \"\";\n\t\t\tGameMaster = None;\n\t\t\tBeepToAll(\"|P2Guessing game has ended. [Round \"$GuessRound$\"]\");\n\t\t}\n\t\n\t\tif(left(S,6) ~= \"Guess \" && bGOn && PP != GameMaster)\n        {\n          //  PG = Right(S, Len(S) - 6),InStr(S,\" \"));\n\t\t\tPG = Right(S, Len(S) - 6);\n\t\t\t\tif(PG ~= SavedGuess)\n\t\t\t\t{\n\t\t\t\t\tBeepToAll(\"|P3\"$DeusExPlayer(PP).PlayerReplicationInfo.PlayerName$\" guessed \"$PG$\" [\"$len(PG)$\"]\");\n\t\t\t\t\tBroadcastMessage(PG$\" was correct! [\"$failedGuesses$\" incorrect guesses this round]\");\n\t\t\t\t\tDeusExPlayer(PP).PlayerReplicationInfo.Score += 10;\n\t\t\t\t\tbGOn=False;\n\t\t\t\t\tClueCount = 0;\n\t\t\t\t\tfailedGuesses = 0;\n\t\t\t\t\tSavedGuess = \"\";\n\t\t\t\t\tGameMaster = None;\n\t\t\t\t\tBroadcastMessage(\"|P2Guessing game has ended. [Round \"$GuessRound$\"]\");\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tBroadcastMessage(\"|P2\"$DeusExPlayer(PP).PlayerReplicationInfo.PlayerName$\" guessed \"$PG$\". [\"$len(PG)$\"]\");\n\t\t\t\t\tBeepToAll(PG$\" was incorrect!\");\n\t\t\t\t\tfailedGuesses++;\n\t\t\t\t\tDeusExPlayer(PP).PlayerReplicationInfo.Score -= 1;\n\t\t\t\t\tif(failedGuesses == 2 || failedGuesses == 5 || failedGuesses == 10 || failedGuesses == 20 || failedGuesses == 30)\n\t\t\t\t\t{\n\t\t\t\t\t\tClueCount++;\n\t\t\t\t\t\tpg = left(SavedGuess,ClueCount);\n\t\t\t\t\t\tmyCount = Len(SavedGuess);\n\t\t\t\t\t\tBroadcastMessage(\"Clue was given: \"$pg);\n\t\t\t\t\t\tif(ClueCount >= 3)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tBroadcastMessage(myCount$\" characters long.\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t}\n\t\t\n\t\tif(S ~= \"GuessClue\" && bGOn && PP == GameMaster)\n        {\n\t\t\tClueCount++;\n\t\t\tpg = left(SavedGuess,ClueCount);\n\t\t\tmyCount = Len(SavedGuess);\n\t\t\tBeepToAll(\"Clue was given: \"$pg);\n\t\t\tif(ClueCount >= 3)\n\t\t\t{\n\t\t\t\tBroadcastMessage(myCount$\" characters long.\");\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(S ~= \"HideStart\" && !bHSOn  ) \n\t\t{\n\t\t\tbHSOn=True;\n\n\t\t\tSeeker = DeusExPlayer(PP);\n\n\t\t\tforeach allactors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(!DXP.isinState('Spectating'))\n\t\t\t\t{\n\t\t\t\tDXP.bHidden=True;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSeeker.bHidden=False;\n\t\t\tSeeker.SetPhysics(PHYS_None);\n\t\t\tHideRound++;\n\t\t\tBeepToAll(\"|P2Hide and Seek game has begun. [Round \"$HideRound$\"]\");\n\t\t\tBroadcastMessage(Seeker.PlayerReplicationInfo.PlayerName$\" is now a Seeker.\");\n\t\t\tBroadcastMessage(\"HIDE PHASE: Players are invisible, seeker is locked in position.\");\n\t\t\tbHidePhase=True;\n\t\t\tSetTimer(60,False);\n\t\t}\n\t\t\n\t\tif(S ~= \"GetSeeker\" && bHSOn && DeusExPlayer(PP) == Seeker)\n\t\t{\t\t\n\t\t\tinv=Spawn(class'PGSeeker');\n\t\t\tInv.Frob(Seeker,None);\t  \n\t\t\tInventory.bInObjectBelt = True;\n\t\t\tinv.Destroy();\t\n\t\t}\n\t\t\n\t\tif(S ~= \"HideEnd\" && bHSOn && DeusExPlayer(PP).bAdmin)\n\t\t{\n\t\tbHSOn=False;\n\t\tLastSeeker = Seeker;\n\t\tSeeker = None;\n\t\t\tforeach allactors(class'PGSeeker',PGS)\n\t\t\t{\n\t\t\t\tPGS.Destroy();\n\t\t\t}\t\t\t\n\t\t\t\n\t\t\tforeach allactors(class'PGHiderActors',PGH)\n\t\t\t{\n\t\t\t\tPGH.Destroy();\n\t\t\t}\n\t\t\tforeach allactors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(!DXP.isinState('Spectating'))\n\t\t\t\t{\n\t\t\t\t\tDXP.bHidden=False;\n\t\t\t\t\tDXP.SetPhysics(PHYS_Falling);\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\tBeepToAll(\"|P3Hide and Seek round \"$HideRound$\" has ended.\");\n\t\t}\n\t\t\t\t\n\t\tif(S ~= \"ScavengerStart\" && !bSOn && DeusExPlayer(PP).bAdmin)\n\t\t{\n\t\t\t//ResetScores();\n\t\t\tScavengerItemCount=0;\n\t\t\tforeach AllActors(class'PGSItem',PGSI)\n\t\t\t{\n\t\t\t\tScavengerItemCount++;\n\t\t\t\tPGSI.bActive=True;\n\t\t\t}\n\t\t\t\tif(ScavengerItemCount == 0)\n\t\t\t\t{\n\t\t\t\t\tBroadcastMessage(\"Scavenger Hunt could not begin! :: No Items Placed.\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\tbSOn=True;\n\t\t\tScavengerRound++;\n\t\t\tBeepToAll(\"|P2Scavenger Hunt game has begun. [Round \"$ScavengerRound$\"]\");\n\t\t\tBroadcastMessage(ScavengerItemCount$\" items to find.\");\n\t\t\tSetTimer(2,False);\n\t\t}\n\t\t\n\t\tif(S ~= \"ScavengerEnd\" && bSOn && DeusExPlayer(PP).bAdmin)\n\t\t{\n\t\t\tbSOn=False;\n\t\t\t\n\t\t\tforeach AllActors(class'PGSItem',PGSI)\n\t\t\t{\n\t\t\t\tPGSI.Destroy();\n\t\t\t}\n\t\t\t\n\t\t\tBroadcastMessage(\"|P2Scavenger Hunt round \"$ScavengerRound$\" has ended.\");\n\t\t}\n\t\t\n\t\tif(S ~= \"ScavengerCount\" && bSOn) \n\t\t{\n\n\t\t\tmyCount=0;\n\t\t\tforeach AllActors(class'PGSItem',PGSI)\n\t\t\t{\n\t\t\t\tmyCount++;\n\t\t\t}\t\t\n\t\t\tBroadcastMessage(myCount$\" items remaining.\");\n\t\t}\n\t\t\n\t\tif(S ~= \"HideCount\" && bHSOn)\n\t\t{\n\t\t\tmyCount=0;\n\t\t\tforeach allactors(class'DeusExPlayer',DXP)\n\t\t\t{\n\t\t\t\tif(!DXP.isinState('Spectating'))\n\t\t\t\t{\n\t\t\t\tmyCount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tforeach AllActors(class'PGHiderActors',PGH)\n\t\t\t{\n\t\t\t\tmyCount--;\n\t\t\t}\n\t\t\tmyCount--; //Negative one for the Seeker\n\t\t\tBroadcastMessage(myCount$\" hiders remaining.\");\n\t\t}\n\t\t\n\t\tif(S ~= \"MurderStart\" && !bMOn && !bHSOn)\n\t\t{\n\t\t\tBroadcastMessage(\"There's a murderer among you...\");\n\t\t\tSelectMurderer();\n\t\t\tbMOn=True;\n\t\t\tMurderRound++;\n\t\t}\n\n\t\tif(S ~= \"MurderEnd\" && bMOn)\n\t\t{\n\t\t\n\t\t}\n\t\t\n\t\tif(S ~= \"CaptureStart\" && !bCOn)\n\t\t{\n\t\t\tCaptures++;\n\t\t\tBroadcastMessage(\"Starting Capture. [Round \"$Captures$\"]\");\n\t\t\tbCOn=True;\n\t\t\tforeach AllActors(class'CaptureFlagSpawner',CF)\n\t\t\t\tCF.SetTimer(10,False);\n\t\t}\n\n\t\tif(S ~= \"CaptureEnd\" && bCOn)\n\t\t{\n\t\t\tbCOn=False;\n\t\t\tforeach AllActors(class'CaptureFlag',CFlag)\n\t\t\t\tCFlag.Destroy();\n\t\t}\n\t\t\n\t\tif( DeusExPlayer(PP).bAdmin && S ~= \"ClearScore\"  && !bHSOn  && !bSOn && !bGOn && !bScOn && !bMOn )\n\t\t{\n\t\t\tBeepToAll(\"Scoreboard reset.\");\n\t\t\tResetScores();\n\t\t}\n}",
                        "locals": [
                            "local int ID, JSlot;",
                            "local string part, pg;",
                            "local Pawn APawn;",
                            "local DeusExPlayer DXP;",
                            "local Inventory inv;",
                            "local PGSItem PGSI;",
                            "local int myCount;",
                            "local PGSeeker PGS;",
                            "local PGHiderActors PGH;",
                            "local psRepeater rep;",
                            "local CaptureFlag CFlag;",
                            "local CaptureFlagSpawner CF;"
                        ],
                        "modifiers": [],
                        "name": "Mutate",
                        "native": false,
                        "param": [
                            [
                                "String",
                                "S"
                            ],
                            [
                                "PlayerPawn",
                                "PP"
                            ]
                        ],
                        "return": ""
                    },
                    "PostBeginPlay": {
                        "body": "{\n\tLevel.Game.BaseMutator.AddMutator (Self);\n\tbHSOn=False;\n\tbSOn=False;\n\tbGOn=False;\n\tbHOn=False;\n\tbScOn=False;\n\tbCOn=False;\n\tbMOn=False;\n\tHideRound = 0;\n\tScavengerRound = 0;\n\tGuessRound = 0;\n\tScoundrelRound = 0;\n\tFlagsRound = 0;\n\tHuntRound = 0;\n\tClueCount = 0;\n\tfailedGuesses = 0;\n\tCaptures=0;\n\tMurderRound=0;\n\tSavedGuess = \"\";\n\t//super.PostBeginPlay();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ResetScores": {
                        "body": "{\n\tforeach allactors(class'PlayerReplicationInfo',PRI)\n\t{\n\t\tPRI.Score = 0;\n\t\tPRI.Deaths = 0;\n\t\tPRI.Streak = 0;\n\t}\n}",
                        "locals": [
                            "local PlayerReplicationInfo PRI;"
                        ],
                        "modifiers": [],
                        "name": "ResetScores",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "SelectMurderer": {
                        "body": "{\n//Pass one, count the player numbers\n\tfor(APawn = level.PawnList; APawn != none; APawn = APawn.nextPawn)\n        if(APawn.bIsPlayer && !APawn.IsInState('Spectating'))\n            if(PlayerPawn(APawn) == none || NetConnection(PlayerPawn(APawn).Player) != none)\n\t\t\t\ti++;\n\t\t\t\t\n\tBeepToAll(i$\" players. Randomizing selection.\");\n\tk = Rand(i);\n\tBeepToAll(string(k));\n\t\n\tfor(APawn = level.PawnList; APawn != none; APawn = APawn.nextPawn)\n        if(APawn.bIsPlayer && !APawn.IsInState('Spectating'))\n            if(PlayerPawn(APawn) == none || NetConnection(PlayerPawn(APawn).Player) != none)\n\t\t\t{\n\t\t\t\tif(u == k)\n\t\t\t\t{\t\n\t\t\t\t\tMurderer = DeusExPlayer(APawn);\n\t\t\t\t\tBeepToAll(\"Selection process ended.\");\n\t\t\t\t\tSetTimer(10,False);\n\t\t\t\t\tMurderTarget=i;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tu++;\n\t\t\t\t}\n\t\t\t}\n}",
                        "locals": [
                            "local int i, u, k;",
                            "local Pawn APawn;"
                        ],
                        "modifiers": [],
                        "name": "SelectMurderer",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Tick": {
                        "body": "{\n\n\tif(bScOn)\n\t{\n\t\tif(SM == None)\n\t\t{\n\t\t\tBroadcastMessage(\"ScoundrelManager not in play, disabling.\");\n\t\t\tbScOn=False;\t\t\n\t\t}\n\n\t}\n\t\n\tforeach AllActors(class'HideFailActor',Fail)\n\t{\n\t\tif(Fail != None)\n\t\t{\n\t\t\tif(Fail.BadPlayer == Seeker)\n\t\t\t{\n\t\t\t\tbHSOn=False;\n\t\t\t\tLastSeeker = Seeker;\n\t\t\t\tSeeker = None;\n\t\t\t\tFail.Destroy();\n\t\t\t\t\n\t\t\t\tforeach allactors(class'PGSeeker',PGS)\n\t\t\t\t{\n\t\t\t\t\tPGS.Destroy();\n\t\t\t\t}\t\t\t\n\t\t\t\t\n\t\t\t\tforeach allactors(class'PGHiderActors',PGH)\n\t\t\t\t{\n\t\t\t\t\tPGH.Destroy();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tforeach allactors(class'DeusExPlayer',DXP)\n\t\t\t\t{\n\t\t\t\t\tif(!DXP.isinState('Spectating'))\n\t\t\t\t\t{\n\t\t\t\t\t\tDXP.bHidden=False;\n\t\t\t\t\t\tDXP.SetPhysics(PHYS_Falling);\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tBeepToAll(\"|P3Hide and Seek round \"$HideRound$\" has ended due to seeker failure.\");\t\n\t\t\t}\n\t\t}\n\t}\n}",
                        "locals": [
                            "local PGSItem PGSI;",
                            "local int myCount;",
                            "local DeusExPlayer DXP;",
                            "local PGSeeker PGS;",
                            "local PGHiderActors PGH;",
                            "local inventory inv;",
                            "local HideFailActor Fail;"
                        ],
                        "modifiers": [],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltatime"
                            ]
                        ],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\n\tif(bHSOn && bHidePhase)\n\t{\n\t\tbHidePhase=False;\n\t\tBeepToAll(\"Hiding phase is over.\");\n\t\t\n\t\tforeach allactors(class'DeusExPlayer',DXP)\n\t\t{\n\t\t\t\tif(!DXP.isinState('Spectating'))\n\t\t\t\t{\n\t\t\t\t\tDXP.bHidden=False;\n\t\t\t\t}\n\t\t}\n\t\tinv=Spawn(class'PGSeeker');\n\t\tInv.Frob(Seeker,None);\t  \n\t\tInventory.bInObjectBelt = True;\n\t\tinv.Destroy();\n\t\tSeeker.SetPhysics(PHYS_Falling);\n\t\tSetTimer(2,False);\n\t}\n\t\n\tif(bHSOn && !bHidePhase)\n\t{\n\t\tmyCount=0;\n\t\tforeach allactors(class'DeusExPlayer',DXP)\n\t\t{\n\t\t\t\tif(!DXP.isinState('Spectating'))\n\t\t\t\t{\n\t\t\t\t\tmyCount++;\n\t\t\t\t}\n\t\t}\n\t\tforeach AllActors(class'PGHiderActors',PGH)\n\t\t{\n\t\t\tmyCount--;\n\t\t}\n\t\tmyCount--; //Negative one for the Seeker\n\t\t\n\t\tif(myCount <= 0)\n\t\t{\n\t\t\tbHSOn=False;\n\t\t\tLastSeeker = Seeker;\n\t\t\tSeeker = None;\n\t\t\tforeach allactors(class'PGSeeker',PGS)\n\t\t\t{\n\t\t\t\tPGS.Destroy();\n\t\t\t}\t\t\t\n\t\t\t\n\t\t\tforeach allactors(class'PGHiderActors',PGH)\n\t\t\t{\n\t\t\t\tPGH.Destroy();\n\t\t\t}\n\t\t\tBeepToAll(\"|P3Hide and Seek round \"$HideRound$\" has ended.\");\n\t\t}\n\t\telse if(myCount >= 1)\n\t\t{\n\t\t\tSetTimer(2,False);\n\t\t}\t\n\t}\n\t\n\tif(bSOn)\n\t{\n\t\tmyCount=0;\n\t\tforeach AllActors(class'PGSItem',PGSI)\n\t\t{\n\t\t\tmyCount++;\n\t\t}\n\t\t\n\t\tif(myCount == 0)\n\t\t{\n\t\t\tbSOn=False;\n\t\t\t\n\t\t\tforeach AllActors(class'PGSItem',PGSI)\n\t\t\t{\n\t\t\t\tPGSI.Destroy();\n\t\t\t}\n\t\t\t\n\t\t\tBeepToAll(\"|P2Scavenger Hunt round \"$ScavengerRound$\" has ended.\");\t\n\t\t}\n\t\telse if(myCount >= 1)\n\t\t{\n\t\t\tSetTimer(2,False);\n\t\t}\t\n\t}\n\n\tif(bMOn)\n\t{\n\t\tGiveMurdererInv();\n\t\tGiveSurviveInv();\n\t\tBeepToAll(\"Begin the hunt.\");\n\t\t\tforeach AllActors(class'DeusExPlayer', DXP)\n\t\t\t{\n\t\t\t\tif(Murderer == DXP)\n\t\t\t\t{\n\t\t\t\t\tDXP.ClientMessage(\"|P2You are the murderer. \"$MurderTarget$\" kills to win.\");\n\t\t\t\t}\n\t\t\t}\n\t}\n}",
                        "locals": [
                            "local PGSItem PGSI;",
                            "local int myCount;",
                            "local DeusExPlayer DXP;",
                            "local PGSeeker PGS;",
                            "local PGHiderActors PGH;",
                            "local inventory inv;"
                        ],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 688,
                "replication": "",
                "states": [],
                "variables": [
                    "var DeusExPlayer LastSeeker, Seeker, GameMaster, PGPlayerList[16];",
                    "var int randy, PlayerCount, ScavengerItemCount, HideRound, ScavengerRound, GuessRound, ClueCount, HuntRound, ScoundrelRound, FlagsRound, failedGuesses, Captures, MurderRound, MurderTarget;",
                    "var bool bHSOn, bSOn, bGOn, bHOn, bScOn, bCOn, bMOn;",
                    "var bool bHidePhase;",
                    "var string SavedGuess;",
                    "var ScoundrelManager SM;",
                    "var DeusExPlayer Murderer;"
                ]
            }
        },
        "PGHiderActors.uc": {
            "body": "class PGHiderActors extends PGActors;\n\nvar DeusExPlayer Hider;\nvar string SavedName;\n\ndefaultproperties\n{\n}\n",
            "name": "PGHiderActors.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "PGActors",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 9,
                "replication": "",
                "states": [],
                "variables": [
                    "var DeusExPlayer Hider;",
                    "var string SavedName;"
                ]
            }
        },
        "PGMutator.uc": {
            "body": "//=============================================================================\n// PGMutator / Handling everything that needs handling\n//=============================================================================\nclass PGMutator extends Mutator Config (TCMod);\n\nvar config bool bSuperGore;\nvar config bool bSpydroneMod;\nvar config bool bAllowPlay;\nvar config bool bAllowPlayAll;\nvar config bool bGiveAutoMed;\nvar config bool bAntiCheatKill;\nvar config bool bCrits;\nvar config bool bPersistZones;\nvar config int SaveTimer;\nvar config string PersistMap;\nvar config bool bLoadPersistance;\nvar config bool bGivePSCC;\nvar config bool bClearSpawnInventory;\n\nreplication\n{\nreliable if (Role == ROLE_Authority)\n    ShowMessage;\n}\n\nsimulated function ShowMessage(DeusExPlayer Player, string Message)\n{\nlocal HUDMissionStartTextDisplay    HUD;\nif ((Player.RootWindow != None) && (DeusExRootWindow(Player.RootWindow).HUD != None))\n{\n    HUD = DeusExRootWindow(Player.RootWindow).HUD.startDisplay;\n}\nif(HUD != None)\n{\n    HUD.shadowDist = 0;\n    //HUD.setFont(Font'FontMenuTitle');\n    HUD.fontText = Font'FontMenuExtraLarge';\n    HUD.Message = \"\";\n    HUD.charIndex = 0;\n    HUD.winText.SetText(\"\");\n    HUD.winTextShadow.SetText(\"\");\n    HUD.displayTime = 5.50;\n    HUD.perCharDelay = 0.01;\n    HUD.AddMessage(Message);\n    HUD.StartMessage();\n}\n}\n\nfunction PostBeginPlay ()\n{\nlocal PGMutator R;\nlocal bool bMutatorFound;\nlocal ProjectileGenerator PG;\nlocal ScriptedPawn SP;\nlocal BreakableGlass BG;\nlocal Actor A;\nlocal SecurityCamera SC;\nlocal PSZoneInfo psz;\nlocal Persist p;\n    //Super.PostBeginPlay ();\n    Level.Game.BaseMutator.AddMutator (Self);\n    Level.Game.RegisterDamageMutator (Self);\n    \n    if(bPersistZones)\n    {\n        if(InStr(string(Level), PersistMap) != -1)\n        {\n            log(\"Enabling Actor Persist\");\n            p = spawn(class'Persist');\n            if(bLoadPersistance)\n                p.Load();\n            p.SetTimer(SaveTimer,True);\n        }\n    }\n    foreach AllActors(class'SecurityCamera', SC)\n    {\n        SC.bActive=False; //NO CAM GIRLS\n    }\n    foreach AllActors(class'Actor', A)\n    {\t\t  \n        if(string(a.class) ~= \"DXMTL152b1.CBPAmmocrate\") \n        {\n            Spawn(class'acrate',,,A.Location);\n            a.Destroy();\n        }\n    }\n    \n    if(Left(string(Level), InStr(string(Level), \".\")) ~= \"DXMP_RPGCity\")\n    {\n        foreach AllActors(class'ScriptedPawn',SP)\n        {\n            SP.Destroy();\n        }\n        foreach AllActors(class'BreakableGlass',BG)\n        {\n            BG.bBreakable = False;\n        }\n    }\n}\n\nfunction AdminArmour HasAA(PlayerPawn PP)\n{\nlocal AdminArmour AA;\n\n    foreach AllActors(class'AdminArmour', AA)\n        if(AA.Owner == PP)\n            return AA;\n}\n\nfunction PGArmour HasPA(PlayerPawn PP)\n{\nlocal PGArmour AA;\n\n    foreach AllActors(class'PGArmour', AA)\n        if(AA.Owner == PP)\n            return AA;\n}\n\nfunction int GetPADur(PlayerPawn PP)\n{\nlocal PGArmour AA;\n\n    foreach AllActors(class'PGArmour', AA)\n        if(AA.Owner == PP)\n            return AA.Dur;\n}\n\nfunction int GetPADef(PlayerPawn PP)\n{\nlocal PGArmour AA;\n\n    foreach AllActors(class'PGArmour', AA)\n        if(AA.Owner == PP)\n            return AA.Def;\n}\n\nfunction HitPA(PlayerPawn PP, int i)\n{\nlocal PGArmour AA;\n\n    foreach AllActors(class'PGArmour', AA)\n        if(AA.Owner == PP)\n        {\n            AA.Dur -= i;\n            AA.rDur = AA.Dur;\n        }\n}\n\nfunction DrawAdminShield(pawn Victim)\n{\n    local AdminArmourEffect shield;\n\n    shield = Spawn(class'AdminArmourEffect', Victim,, Victim.Location, Victim.Rotation);\n    if (shield != None)\n    {\n        Shield.DrawScale = Victim.Drawscale;\n        shield.SetBase(Victim);\n    }\n}\n\nfunction DrawProtShield(pawn Victim)\n{\n    local ProtEffect shield;\n\n    shield = Spawn(class'ProtEffect', Victim,, Victim.Location, Victim.Rotation);\n    if (shield != None)\n    {\n        Shield.DrawScale = Victim.Drawscale;\n        shield.SetBase(Victim);\n    }\n}\n\nfunction ReturnArmour HasRA(PlayerPawn PP)\n{\nlocal ReturnArmour AA;\n\n    foreach AllActors(class'ReturnArmour', AA)\n        if(AA.Owner == PP)\n            return AA;\n}\n\nfunction Vialgrow HasVG(PlayerPawn PP)\n{\nlocal Vialgrow AA;\n\n    foreach AllActors(class'Vialgrow', AA)\n        if(AA.Owner == PP && AA.bOn)\n            return AA;\n}\n\nfunction DrawReturnShield(pawn Victim)\n{\n    local ReturnArmourEffect shield;\n\n    shield = Spawn(class'ReturnArmourEffect', Victim,, Victim.Location, Victim.Rotation);\n    if (shield != None)\n    {\n        Shield.DrawScale = Victim.Drawscale;\n        shield.SetBase(Victim);\n    }\n}\n\nfunction SpawnExplosion(Pawn victim, Pawn Instigator)\n{\nlocal ShockRing s1, s2, s3;\nlocal int r;\nlocal DeusExPlayer player;\n    s1 = spawn(class'ShockRing',,,Victim.Location,rot(16384,0,0));\n    s1.Lifespan = 2.5;\n    s2 = spawn(class'ShockRing',,,Victim.Location,rot(0,16384,0));\n    s2.Lifespan = 2.5;\n    s3 = spawn(class'ShockRing',,,Victim.Location,rot(0,0,16384));\n    S3.Lifespan = 2.5;\n    \n    r = Rand(100);\n    if(r < 10)\n    {\n        foreach VisibleActors(class'DeusExPlayer', player, 250)\n        {\n            if (player != None)\n            {\n                player.TakeDamage(100, Instigator, player.Location, vect(0,0,0), 'Flamed');\n                DeusExPlayer(Instigator).HealPlayer(50, True);\n                DeusExPlayer(Instigator).StopPoison();\n                DeusExPlayer(Instigator).ExtinguishFire();\n                DeusExPlayer(Instigator).drugEffectTimer = 0;\n                DeusExPlayer(Instigator).Energy += 25;\n                if (DeusExPlayer(Instigator).Energy > DeusExPlayer(Instigator).EnergyMax)\n                    DeusExPlayer(Instigator).Energy = DeusExPlayer(Instigator).EnergyMax;\n            }\n        }\n    }\n}\n\nfunction MutatorTakeDamage( out int ActualDamage, Pawn Victim, Pawn InstigatedBy, out Vector HitLocation, \n                        out Vector Momentum, name DamageType)\n{\nlocal int TD,red, hp;\nlocal bool bCrit;\n    if(DeusExPlayer(Victim) != None && DeusExPlayer(Victim).ReducedDamageType == 'All')\n        DrawProtShield(victim);\n    if(ScriptedPawn(Victim) != None && ScriptedPawn(Victim).bInvincible)\n        DrawProtShield(victim);\t\n    if(bCrits)\n    {\n        if(Rand(100) < 10)\n        {\n            DeusExPlayer(InstigatedBy).ClientMessage(\"|P4CRITICAL HIT!\");\n            ActualDamage = ActualDamage * 2;\n            SpawnExplosion(Victim, InstigatedBy);\n            hp=Victim.Health;\n            bCrit=true;\n        }\n        \n    }\n    if(DeusExPlayer(InstigatedBy) != None && DeusExPlayer(Victim) != None && bAntiCheatKill)\n    {\n        if(DeusExPlayer(InstigatedBy).ReducedDamageType == 'All')\n            ActualDamage=0;\n            \n        if(DamageType == 'Tantalus')\n            ActualDamage = 0;\n        \n        if(DeusExPlayer(InstigatedBy).IsInState('cheatFlying'))\n            ActualDamage=0;\n            \n        if(ActualDamage == 0)\n            DrawProtShield(victim);\n    }\n    \n    if(PlayerPawn(InstigatedBy) != None && HasVG(PlayerPawn(InstigatedBy)) != None && HasVG(PlayerPawn(InstigatedBy)).bOn)\n        ActualDamage = ActualDamage * 2;\n        \n    if(PlayerPawn(Victim) != None && HasPA(PlayerPawn(Victim)) != None)\n    {\n        if(GetPADur(PlayerPawn(Victim)) >= 0)\n        {\n            if(HasPA(PlayerPawn(Victim)).bResistFire && DamageType == 'Flamed')\n            {\n                DamageType = 'None';\n                ActualDamage=0;\n            }\n            if(HasPA(PlayerPawn(Victim)).bResistPoison && DamageType == 'Poison')\n            {\n                DamageType = 'None';\n                PlayerPawn(Victim).TakeDamage(ActualDamage, instigatedBy, Victim.Location, vect(0,0,1),'Shot');\n                ActualDamage = 0;\n            }\n            if(HasPA(PlayerPawn(Victim)).bResistEMP && DamageType == 'EMP')\n            {\n                DamageType = 'None';\n                ActualDamage=0;\n            }\n            HitPA(PlayerPawn(Victim),1);\n            red = ActualDamage - GetPADef(PlayerPawn(Victim));\n            //Log(\"Armour debug: \"$ActualDamage$\" to \"$red);\n            ActualDamage -= GetPADef(PlayerPawn(Victim));\n            DamageType = 'shot';\n            DrawProtShield(victim);\n            \n            if(GetPADur(PlayerPawn(Victim)) <= 0)\n            {\n                DeusExPlayer(victim).ClientMessage(\"Your armour broke! (\"$HasPA(PlayerPawn(Victim)).ItemName$\")\");\n                Victim.PlaySound(Sound'DeusExSounds.Augmentation.CloakDown', SLOT_None,,, 2048);\n                HasPA(PlayerPawn(Victim)).Destroy();\n            }\n            super.MutatorTakeDamage(ActualDamage, victim, instigatedby, hitLocation, momentum, damagetype);\n            return;\n        }\n    }\n        \n    if(PlayerPawn(Victim) != None && HasAA(PlayerPawn(Victim)) != None)\n    {\n        if(DeusExPlayer(Victim).Energy >= 1)\n        {\n            TD = ActualDamage / 4;\n            DeusExPlayer(Victim).Energy -= TD;\n            ActualDamage = 0;\n            DamageType = 'shot';\n            DrawAdminShield(victim);\n            if(DeusExPlayer(Victim).Energy < 1)\n            {\n                Victim.PlaySound(Sound'DeusExSounds.Augmentation.CloakDown', SLOT_None,,, 2048);\n            }\n            return;\n        }\n    }\n    if(PlayerPawn(Victim) != None && HasRA(PlayerPawn(Victim)) != None && InstigatedBy != None)\n    {\n        if(DeusExPlayer(Victim).Energy >= 1)\n        {\n            //Disabling for others using Return Armour due to infinite recursion\n            if(DXScriptedPawn(InstigatedBy) != None && DXScriptedPawn(InstigatedBy).bReturnArmour)\n                return;\n            if(PlayerPawn(InstigatedBy) != None && HasRA(PlayerPawn(InstigatedBy)) != None)\n                return;\n            DeusExPlayer(Victim).Energy -= ActualDamage / 3;\n            InstigatedBy.TakeDamage(ActualDamage / 2, InstigatedBy, hitLocation, Momentum, DamageType);\n            ActualDamage = ActualDamage / 4;\n            DrawReturnShield(victim);\n            if(DeusExPlayer(Victim).Energy < 1)\n            {\n                Victim.PlaySound(Sound'DeusExSounds.Augmentation.CloakDown', SLOT_None,,, 2048);\n            }\n            return;\n        }\n    }\n    \n    hp -= ActualDamage;\n    \n    if(bCrit && hp <= 0 && DeusExPlayer(Victim).ReducedDamageType != 'All' && !ScriptedPawn(Victim).bInvincible)\n    {\n        DeusExPlayer(InstigatedBy).ClientMessage(\"|P2CRITICAL KILL!\");\n        DeusExPlayer(InstigatedBy).HealPlayer(50, True);\n        DeusExPlayer(InstigatedBy).StopPoison();\n        DeusExPlayer(InstigatedBy).ExtinguishFire();\n        DeusExPlayer(InstigatedBy).drugEffectTimer = 0;\n        DeusExPlayer(InstigatedBy).Energy += 25;\n        if (DeusExPlayer(InstigatedBy).Energy > DeusExPlayer(InstigatedBy).EnergyMax)\n            DeusExPlayer(InstigatedBy).Energy = DeusExPlayer(InstigatedBy).EnergyMax;\n    }\n    super.MutatorTakeDamage(ActualDamage, victim, instigatedby, hitLocation, momentum, damagetype);\n}\n\nfunction ModifyPlayer(Pawn Other)\n{\n    local int x;\n    local int k;\n    local int i;\n    local int m;\n    local DeusExPlayer P;\n    local PSCreditCard ccc;\n    local inventory inv;\n        P = DeusExPlayer(Other);\n\n    if(P != None)\n        P.MaxRegenPoint = 0;\n    \n    if(bClearSpawnInventory)\n    {\n        foreach AllActors(class'Inventory',inv)\n        {\n            if(Inv.Owner == Other)\n            {\n                if(Inv.IsA('Medkit'))\n                    Inv.Destroy();\n                if(Inv.IsA('Lockpick'))\n                    Inv.Destroy();\n                if(Inv.IsA('Multitool'))\n                    Inv.Destroy();\n            }\n        }\n    }\n\n        //p.Credits = 200;\n\n    p.Credits = 50;\n    \n    if(P!=None && bGiveAutomed)\n    {\n        inv=Spawn(class'Automed');\n        Inv.Frob(P,None);\t  \n        Inventory.bInObjectBelt = True;\n        inv.Destroy();\n    }\n    \n    if(P!=None && bGivePSCC)\n    {\n        ccc = Spawn(class'PSCreditCard');\n        ccc.Frob(p,None);\n        ccc.Destroy();\n    }\n    Super.ModifyPlayer(Other);\n}\n\nfunction Tick(float deltatime)\n{\nlocal Spydrone SD;\nlocal FleshFragment F;\nlocal int Random;\n\nif(bSuperGore)\n{\n    Random = Rand(100);\n\n    ForEach AllActors(class'FleshFragment', F)\n    {\n            F.Velocity   = vect(10, 10, 1000);\n            F.Fatness    = F.Default.Fatness + Random;\n            F.elasticity = 1.0;\n        }\n    }\n    \n    if(bSpydroneMod)\n    {\n        foreach AllActors(class'SpyDrone',SD)\n        {\n            if(SD != None)\n            {\n                SD.bBlockPlayers = True;\n                SD.DamageType = 'None';\n                SD.Damage = 0;\n                SD.MaxSpeed = 700;\n                ConsoleCommand(\"Set Augdrone ReconstructTime 1\");\n            }\n        }\n    }\n}\n\nfunction Mutate (String S, PlayerPawn PP)\n{\n    local int a, i, j, ID, amount;\n    local string IP, AName, Part, noobCommand, bm, Others, _tmpString, Message;\n    local DeusExPlayer SP;\nlocal Box PC;\nlocal int JSlot;\n    local Pawn APawn;\nlocal string msgs;\nlocal MSGR msobj;\nlocal string formattedmin;\n    local sound pgSound;\n    local DeusExPlayer DXP;\n    local string oldmsgs, msgs2;\n    local bool bAutoPackage;\n    local float Pitch;\n    local Actor hitActor;\n    local vector loc, line, HitLocation, hitNormal;\n    local Decal Dec;\n    local JobScanner JS;\n    \n    Super.Mutate (S, PP);\n    \n        if(left(S,5) ~= \"MSGR \")\n        {\n            msgs = Right(S, Len(S) - 5);\n            msobj = Spawn(Class'MSGR',,,PP.Location + (PP.CollisionRadius+Default.CollisionRadius+30) * Vector(PP.ViewRotation) + vect(0,0,1) * 30 );\n            msobj.MSGSender = PP.PlayerReplicationInfo.PlayerName;\n                if(level.minute <= 9)\n                {\n                    formattedmin = \"0\"$level.minute;\n                }\n                else\n                {\n                    formattedmin = string(level.minute);\n                }\n            msobj.MSGTimestamp = level.hour$\":\"$formattedmin;\n            msobj.myMSG = msgs;\n            msobj.bSentByPlayer=True;\n            PP.ClientMessage(\"Message created.\");\n        }\n        \n        if(left(S,7) ~= \"setplay\" && PP.bAdmin)\n        {\n            msgs = Right(S, Len(S) - 7);\n            if(msgs ~= \"allon\")\n            {\n                bAllowPlayAll=True;\n            }\n            if(msgs ~= \"alloff\")\n            {\n                bAllowPlayAll=False;\n            }\n            if(msgs ~= \"on\")\n            {\n                bAllowPlay=True;\n            }\n            if(msgs ~= \"off\")\n            {\n                bAllowPlay=false;\n            }\n            SaveConfig();\n            BroadcastMessage(\"PLAY SETTINGS: bAllowPlay\"@bAllowPlay@\": bAllowPlayAll\"@bAllowPlayAll);\n        }\n        \n        if(left(S,5) ~= \"play \" && bAllowPlay)\n        {\n            msgs = Right(S, Len(S) - 5);\n            pitch = 1;\n                if(instr(caps(msgs), caps(\" \")) != -1) //Assuming theres other words after\n                {\n                    msgs2 = Right(msgs, Len(msgs)-instr(msgs,\" \")-Len(\" \"));\n                    msgs = Left(msgs, InStr(msgs,\" \"));\n\n                    if(msgs2 != \"\")\n                    {\n                        j = int(msgs2);\n                        pitch = (j*0.15)+0.5;\n                    }\n                    pitch = FClamp(pitch, 0.5, 2.0);\n                    //Log(\"OUT:\"$msgs@msgs2@pitch);\n                }\n\n            \n\n            oldmsgs = msgs;\n            if ( InStr(msgs,\".\") == -1 )//No package specified, passing through to the auto-namer to see if anything matches.\n            {\n                bAutoPackage=True;\n                msgs=\"DeusExSounds.\" $ msgs;\n                pgSound = Sound(DynamicLoadObject(msgs, class'Sound', true));\n                    if (pgSound == None) //Nothing found in Deus Ex, now checking PartySoundPack, but if it IS found, move along to the sound\n                    {\n                        msgs = oldmsgs; //Resetting for pass two, assuming PartySoundPack\n                            msgs=\"PartySoundPack.\" $ msgs;\n                            pgSound = Sound(DynamicLoadObject(msgs, class'Sound', true));\n                            if (pgSound == None) //Nothing found, erroring\n                            {\n                            DeusExPlayer(PP).ClientMessage(\"|P2ERROR: DynamicLoadObject failed or no package specified. (DynamicLoadObject could not find \" $ oldmsgs $ \")\");\n                            return;\n                            }\n                    }\n            }\n            \n            if(!bAutoPackage)\n                pgSound = Sound(DynamicLoadObject(msgs, class'Sound', true));\n            //if(j == 0)\n            //\tj = DefaultPitch;\n                \n            if (pgSound != None)\n                PP.PlaySound(pgSound, SLOT_Talk,2,,1024,pitch);\n            else\n                DeusExPlayer(PP).ClientMessage(\"|P2ERROR: Audio file not found.\");\n\n        }\n        \n        if(left(S,8) ~= \"playall \" && bAllowPlayAll)\n        {\n            msgs = Right(S, Len(S) - 8);\n            pitch=1;\n                if(instr(caps(msgs), caps(\" \")) != -1) //Assuming theres other words after\n                {\n                    msgs2 = Right(msgs, Len(msgs)-instr(msgs,\" \")-Len(\" \"));\n                    msgs = Left(msgs, InStr(msgs,\" \"));\n\n                    if(msgs2 != \"\")\n                    {\n                        j = int(msgs2);\n                        pitch = (j*0.15)+0.5;\n                    }\n                    pitch = FClamp(pitch, 0.5, 2.0);\n                    //Log(\"OUT:\"$msgs@msgs2@pitch);\n                }\n\n                        oldmsgs = msgs;\n            if ( InStr(msgs,\".\") == -1 )//No package specified, passing through to the auto-namer to see if anything matches.\n            {\n                bAutoPackage=True;\n                msgs=\"DeusExSounds.\" $ msgs;\n                pgSound = Sound(DynamicLoadObject(msgs, class'Sound', true));\n                    if (pgSound == None) //Nothing found in Deus Ex, now checking PartySoundPack, but if it IS found, move along to the sound\n                    {\n                        msgs = oldmsgs; //Resetting for pass two, assuming PartySoundPack\n                            msgs=\"PartySoundPack.\" $ msgs;\n                            pgSound = Sound(DynamicLoadObject(msgs, class'Sound', true));\n                            if (pgSound == None) //Nothing found, erroring\n                            {\n                            DeusExPlayer(PP).ClientMessage(\"|P2ERROR: DynamicLoadObject failed or no package specified. (DynamicLoadObject could not find \"$oldmsgs$\")\");\n                            return;\n                            }\n                    }\n            }\n            \n            if(!bAutoPackage)\n                pgSound = Sound(DynamicLoadObject(msgs, class'Sound', true));\n            \n                \n            if (pgSound != None)\n            {\n                foreach AllActors(class'DeusExPlayer',DXP)\n                {\n                DXP.PlaySound(pgSound, SLOT_Talk,2,,1024,pitch);\n                }\n            }\n            else\n            {\n                DeusExPlayer(PP).ClientMessage(\"|P2ERROR: Audio file not found.\");\n            }\n\n        }\n        else if(S ~= \"DroneRiding\" || S ~= \"DR\")\n        {\n            if(PP.bAdmin)\n            {\n                if(bSpydroneMod)\n                {//Turning off spydrone riding\n                    bSpydroneMod = False;\n                    BroadcastMessage(\"|P3Spydrone riding has been enabled by \"$PP.PlayerReplicationInfo.Playername);\n                }\n                else\n                {//Turning on spydrone riding\n                    bSpydroneMod = True;\n                    BroadcastMessage(\"|P3Spydrone riding has been disabled by \"$PP.PlayerReplicationInfo.Playername);\n                }\n            }\n        }\n        else if(S ~= \"BoxCleanup\" || S ~= \"BC\")\n        {\n            if(PP.bAdmin)\n            {\n                BroadcastMessage(\"|P3Boxes cleared by \"$PP.PlayerReplicationInfo.Playername);\t\n                foreach allactors(class'Box',PC)\n                {\n                    if(PC != None)\n                    {\n                    PC.Lifespan = 1;\n                    }\n                    else \n                    {\n                    BroadcastMessage(\"Command Failed : No actors to Destroy\");\n                    }\n                }\n            }\n        }\n        else if(S ~= \"Resign\")\n        {\n            foreach AllActors(class'JobScanner', JS)\n            {\n                if(JS.Assist1 == DeusExPlayer(PP))\n                {\n                    JS.Assist1 = None;\n                    PP.ClientMessage(\"Job resigned.\");\n                }\n                if(JS.Assist2 == DeusExPlayer(PP))\n                {\n                    JS.Assist2 = None;\n                    PP.ClientMessage(\"Job resigned.\");\n                }\n                if(JS.Assist3 == DeusExPlayer(PP))\n                {\n                    JS.Assist3 = None;\n                    PP.ClientMessage(\"Job resigned.\");\n                }\n            }\n        }\n        else if(S ~= \"SuperGore\" || S ~= \"SG\")\n        {\n            if(PP.bAdmin)\n            {\n                bSuperGore = !bSuperGore;\n                BroadcastMessage(\"|P3Super Gore is \"$bSuperGore);\t\n            }\n        }\n        else if(S ~= \"link\")\n        {\n            loc = PP.Location;\n            loc.Z += PP.BaseEyeHeight;\n            line = Vector(PP.ViewRotation) * 10000;\n            \n            if(getLink(pp) != None)\n            {\n                PP.ClientMessage(\"Already linked to something.\");\n                return;\n            }\n            HitActor = Trace(hitLocation, hitNormal, loc+line, loc, true);\n            if(DXScriptedPawn(HitActor) != None && DXScriptedPawn(HitActor).bCanLink)\n            {\n                PP.ClientMessage(\"Link created.\");\n                DXScriptedPawn(HitActor).LinkedPlayer = PP;\n                DXScriptedPawn(HitActor).bLinked=True;\n            }\n        }\n        else if(S ~= \"link.clear\")\n        {\n            if(GetLink(pp) != None)\n            {\n                GetLink(pp).bLinked=False;\n                GetLink(pp).LinkedPlayer = None;\n                PP.ClientMessage(\"Link cleared.\");\n            }\n            else\n            PP.ClientMessage(\"No link found.\");\n        }\n        else if(S ~= \"link.kill\")\n        {\n            if (GetLink(pp) != None)\n            {\n                PP.ClientMessage(string(GetLink(pp).class)@\"destroyed.\");\n                GetLink(pp).bInvincible    = false;\n                GetLink(pp).HealthHead     = 0;\n                GetLink(pp).HealthTorso    = 0;\n                GetLink(pp).HealthLegLeft  = 0;\n                GetLink(pp).HealthLegRight = 0;\n                GetLink(pp).HealthArmLeft  = 0;\n                GetLink(pp).HealthArmRight = 0;\n                GetLink(pp).Health         = 0;\n                GetLink(pp).TakeDamage(10000, PP, vect(0,0,0),vect(0,0,1),'Exploded');\n            }\n            else\n            PP.ClientMessage(\"No link found.\");\n        }\n        else if(S ~= \"link.go\")\n        {\n            if (GetLink(pp) != None)\n            {\n            PP.SetLocation(GetLink(PP).Location);\n            }\n            else\n            PP.ClientMessage(\"No link found.\");\n        }\n        else if(S ~= \"link.bring\")\n        {\n            if (GetLink(pp) != None)\n            {\n                GetLink(PP).SetCollision(false, false, false);\n                GetLink(PP).bCollideWorld = true;\n                GetLink(PP).GotoState('PlayerWalking');\n                GetLink(PP).SetLocation(PP.Location);\n                GetLink(PP).SetCollision(true, true , true);\n                GetLink(PP).SetPhysics(PHYS_Walking);\n                GetLink(PP).bCollideWorld = true;\n                GetLink(PP).GotoState('PlayerWalking');\n                GetLink(PP).ClientReStart();\n            }\n            else\n            PP.ClientMessage(\"No link found.\");\n        }\n        else if(S ~= \"link.swap\")\n        {\n            if (GetLink(pp) != None)\n            {\n            SwapLoc(PP, GetLink(PP));\n            }\n            else\n            PP.ClientMessage(\"No link found.\");\n        }\n        else if(S ~= \"link.view\")\n        {}\t\t\n        else if(Left(S,2) ~= \"s \")\n        {\n            Message = Right(S,Len(S)-2);\n            Message = \"|p1\"$Message;\n            ForEach AllActors(class 'DeusExPlayer', SP)\n            {\n            if(SP != None)\n            {\n                SetOwner(SP);\n                ShowMessage(SP,Message);\n            }\n            }\n        }\n}\n\nfunction SwapLoc(pawn Sender, Pawn Sender2)\n{\n    local vector Temp1, Temp2;\n    \n    Temp1 = Sender.Location;\n    Temp2 = Sender2.Location;\n    \n    Sender2.SetCollision(false, false, false);\n    Sender2.bCollideWorld = true;\n    Sender2.GotoState('PlayerWalking');\n    Sender2.SetLocation(Temp1);\n    Sender2.SetCollision(true, true , true);\n    Sender2.SetPhysics(PHYS_Walking);\n    Sender2.bCollideWorld = true;\n    Sender2.GotoState('PlayerWalking');\n    Sender2.ClientReStart();\n        \n    Sender.SetCollision(false, false, false);\n    Sender.bCollideWorld = true;\n    Sender.GotoState('PlayerWalking');\n    Sender.SetLocation(Temp2);\n    Sender.SetCollision(true, true , true);\n    Sender.SetPhysics(PHYS_Walking);\n    Sender.bCollideWorld = true;\n    Sender.GotoState('PlayerWalking');\n    Sender.ClientReStart();\t\n}\n\nfunction DXScriptedPawn GetLink(playerpawn check)\n{\n    local DXScriptedPawn DXS;\n    \n    foreach AllActors(class'DXScriptedPawn', DXS)\n        if(DXS.LinkedPlayer == check)\n            return DXS;\n}\n\ndefaultproperties\n{\n     bSuperGore=True\n     bSpydroneMod=True\n     bAllowPlay=True\n     bAllowPlayAll=True\n     bGiveAutoMed=True\n     bGivePSCC=True\n}\n",
            "name": "PGMutator.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bSuperGore=True",
                    "bSpydroneMod=True",
                    "bAllowPlay=True",
                    "bAllowPlayAll=True",
                    "bGiveAutoMed=True",
                    "bGivePSCC=True"
                ],
                "exec": [],
                "extends": "Mutator",
                "functions": {
                    "DrawAdminShield": {
                        "body": "{\n\n    shield = Spawn(class'AdminArmourEffect', Victim,, Victim.Location, Victim.Rotation);\n    if (shield != None)\n    {\n        Shield.DrawScale = Victim.Drawscale;\n        shield.SetBase(Victim);\n    }\n}",
                        "locals": [
                            "local AdminArmourEffect shield;"
                        ],
                        "modifiers": [],
                        "name": "DrawAdminShield",
                        "native": false,
                        "param": [
                            [
                                "pawn",
                                "Victim"
                            ]
                        ],
                        "return": ""
                    },
                    "DrawProtShield": {
                        "body": "{\n\n    shield = Spawn(class'ProtEffect', Victim,, Victim.Location, Victim.Rotation);\n    if (shield != None)\n    {\n        Shield.DrawScale = Victim.Drawscale;\n        shield.SetBase(Victim);\n    }\n}",
                        "locals": [
                            "local ProtEffect shield;"
                        ],
                        "modifiers": [],
                        "name": "DrawProtShield",
                        "native": false,
                        "param": [
                            [
                                "pawn",
                                "Victim"
                            ]
                        ],
                        "return": ""
                    },
                    "DrawReturnShield": {
                        "body": "{\n\n    shield = Spawn(class'ReturnArmourEffect', Victim,, Victim.Location, Victim.Rotation);\n    if (shield != None)\n    {\n        Shield.DrawScale = Victim.Drawscale;\n        shield.SetBase(Victim);\n    }\n}",
                        "locals": [
                            "local ReturnArmourEffect shield;"
                        ],
                        "modifiers": [],
                        "name": "DrawReturnShield",
                        "native": false,
                        "param": [
                            [
                                "pawn",
                                "Victim"
                            ]
                        ],
                        "return": ""
                    },
                    "GetLink": {
                        "body": "{\n    \n    foreach AllActors(class'DXScriptedPawn', DXS)\n        if(DXS.LinkedPlayer == check)\n            return DXS;\n}",
                        "locals": [
                            "local DXScriptedPawn DXS;"
                        ],
                        "modifiers": [],
                        "name": "GetLink",
                        "native": false,
                        "param": [
                            [
                                "playerpawn",
                                "check"
                            ]
                        ],
                        "return": "DXScriptedPawn"
                    },
                    "GetPADef": {
                        "body": "{\n\n    foreach AllActors(class'PGArmour', AA)\n        if(AA.Owner == PP)\n            return AA.Def;\n}",
                        "locals": [
                            "local PGArmour AA;"
                        ],
                        "modifiers": [],
                        "name": "GetPADef",
                        "native": false,
                        "param": [
                            [
                                "PlayerPawn",
                                "PP"
                            ]
                        ],
                        "return": "int"
                    },
                    "GetPADur": {
                        "body": "{\n\n    foreach AllActors(class'PGArmour', AA)\n        if(AA.Owner == PP)\n            return AA.Dur;\n}",
                        "locals": [
                            "local PGArmour AA;"
                        ],
                        "modifiers": [],
                        "name": "GetPADur",
                        "native": false,
                        "param": [
                            [
                                "PlayerPawn",
                                "PP"
                            ]
                        ],
                        "return": "int"
                    },
                    "HasAA": {
                        "body": "{\n\n    foreach AllActors(class'AdminArmour', AA)\n        if(AA.Owner == PP)\n            return AA;\n}",
                        "locals": [
                            "local AdminArmour AA;"
                        ],
                        "modifiers": [],
                        "name": "HasAA",
                        "native": false,
                        "param": [
                            [
                                "PlayerPawn",
                                "PP"
                            ]
                        ],
                        "return": "AdminArmour"
                    },
                    "HasPA": {
                        "body": "{\n\n    foreach AllActors(class'PGArmour', AA)\n        if(AA.Owner == PP)\n            return AA;\n}",
                        "locals": [
                            "local PGArmour AA;"
                        ],
                        "modifiers": [],
                        "name": "HasPA",
                        "native": false,
                        "param": [
                            [
                                "PlayerPawn",
                                "PP"
                            ]
                        ],
                        "return": "PGArmour"
                    },
                    "HasRA": {
                        "body": "{\n\n    foreach AllActors(class'ReturnArmour', AA)\n        if(AA.Owner == PP)\n            return AA;\n}",
                        "locals": [
                            "local ReturnArmour AA;"
                        ],
                        "modifiers": [],
                        "name": "HasRA",
                        "native": false,
                        "param": [
                            [
                                "PlayerPawn",
                                "PP"
                            ]
                        ],
                        "return": "ReturnArmour"
                    },
                    "HasVG": {
                        "body": "{\n\n    foreach AllActors(class'Vialgrow', AA)\n        if(AA.Owner == PP && AA.bOn)\n            return AA;\n}",
                        "locals": [
                            "local Vialgrow AA;"
                        ],
                        "modifiers": [],
                        "name": "HasVG",
                        "native": false,
                        "param": [
                            [
                                "PlayerPawn",
                                "PP"
                            ]
                        ],
                        "return": "Vialgrow"
                    },
                    "HitPA": {
                        "body": "{\n\n    foreach AllActors(class'PGArmour', AA)\n        if(AA.Owner == PP)\n        {\n            AA.Dur -= i;\n            AA.rDur = AA.Dur;\n        }\n}",
                        "locals": [
                            "local PGArmour AA;"
                        ],
                        "modifiers": [],
                        "name": "HitPA",
                        "native": false,
                        "param": [
                            [
                                "PlayerPawn",
                                "PP"
                            ],
                            [
                                "int",
                                "i"
                            ]
                        ],
                        "return": ""
                    },
                    "ModifyPlayer": {
                        "body": "{\n        P = DeusExPlayer(Other);\n\n    if(P != None)\n        P.MaxRegenPoint = 0;\n    \n    if(bClearSpawnInventory)\n    {\n        foreach AllActors(class'Inventory',inv)\n        {\n            if(Inv.Owner == Other)\n            {\n                if(Inv.IsA('Medkit'))\n                    Inv.Destroy();\n                if(Inv.IsA('Lockpick'))\n                    Inv.Destroy();\n                if(Inv.IsA('Multitool'))\n                    Inv.Destroy();\n            }\n        }\n    }\n\n        //p.Credits = 200;\n\n    p.Credits = 50;\n    \n    if(P!=None && bGiveAutomed)\n    {\n        inv=Spawn(class'Automed');\n        Inv.Frob(P,None);\t  \n        Inventory.bInObjectBelt = True;\n        inv.Destroy();\n    }\n    \n    if(P!=None && bGivePSCC)\n    {\n        ccc = Spawn(class'PSCreditCard');\n        ccc.Frob(p,None);\n        ccc.Destroy();\n    }\n    Super.ModifyPlayer(Other);\n}",
                        "locals": [
                            "local int x;",
                            "local int k;",
                            "local int i;",
                            "local int m;",
                            "local DeusExPlayer P;",
                            "local PSCreditCard ccc;",
                            "local inventory inv;"
                        ],
                        "modifiers": [],
                        "name": "ModifyPlayer",
                        "native": false,
                        "param": [
                            [
                                "Pawn",
                                "Other"
                            ]
                        ],
                        "return": ""
                    },
                    "Mutate": {
                        "body": "{\n    \n    Super.Mutate (S, PP);\n    \n        if(left(S,5) ~= \"MSGR \")\n        {\n            msgs = Right(S, Len(S) - 5);\n            msobj = Spawn(Class'MSGR',,,PP.Location + (PP.CollisionRadius+Default.CollisionRadius+30) * Vector(PP.ViewRotation) + vect(0,0,1) * 30 );\n            msobj.MSGSender = PP.PlayerReplicationInfo.PlayerName;\n                if(level.minute <= 9)\n                {\n                    formattedmin = \"0\"$level.minute;\n                }\n                else\n                {\n                    formattedmin = string(level.minute);\n                }\n            msobj.MSGTimestamp = level.hour$\":\"$formattedmin;\n            msobj.myMSG = msgs;\n            msobj.bSentByPlayer=True;\n            PP.ClientMessage(\"Message created.\");\n        }\n        \n        if(left(S,7) ~= \"setplay\" && PP.bAdmin)\n        {\n            msgs = Right(S, Len(S) - 7);\n            if(msgs ~= \"allon\")\n            {\n                bAllowPlayAll=True;\n            }\n            if(msgs ~= \"alloff\")\n            {\n                bAllowPlayAll=False;\n            }\n            if(msgs ~= \"on\")\n            {\n                bAllowPlay=True;\n            }\n            if(msgs ~= \"off\")\n            {\n                bAllowPlay=false;\n            }\n            SaveConfig();\n            BroadcastMessage(\"PLAY SETTINGS: bAllowPlay\"@bAllowPlay@\": bAllowPlayAll\"@bAllowPlayAll);\n        }\n        \n        if(left(S,5) ~= \"play \" && bAllowPlay)\n        {\n            msgs = Right(S, Len(S) - 5);\n            pitch = 1;\n                if(instr(caps(msgs), caps(\" \")) != -1) //Assuming theres other words after\n                {\n                    msgs2 = Right(msgs, Len(msgs)-instr(msgs,\" \")-Len(\" \"));\n                    msgs = Left(msgs, InStr(msgs,\" \"));\n\n                    if(msgs2 != \"\")\n                    {\n                        j = int(msgs2);\n                        pitch = (j*0.15)+0.5;\n                    }\n                    pitch = FClamp(pitch, 0.5, 2.0);\n                    //Log(\"OUT:\"$msgs@msgs2@pitch);\n                }\n\n            \n\n            oldmsgs = msgs;\n            if ( InStr(msgs,\".\") == -1 )//No package specified, passing through to the auto-namer to see if anything matches.\n            {\n                bAutoPackage=True;\n                msgs=\"DeusExSounds.\" $ msgs;\n                pgSound = Sound(DynamicLoadObject(msgs, class'Sound', true));\n                    if (pgSound == None) //Nothing found in Deus Ex, now checking PartySoundPack, but if it IS found, move along to the sound\n                    {\n                        msgs = oldmsgs; //Resetting for pass two, assuming PartySoundPack\n                            msgs=\"PartySoundPack.\" $ msgs;\n                            pgSound = Sound(DynamicLoadObject(msgs, class'Sound', true));\n                            if (pgSound == None) //Nothing found, erroring\n                            {\n                            DeusExPlayer(PP).ClientMessage(\"|P2ERROR: DynamicLoadObject failed or no package specified. (DynamicLoadObject could not find \" $ oldmsgs $ \")\");\n                            return;\n                            }\n                    }\n            }\n            \n            if(!bAutoPackage)\n                pgSound = Sound(DynamicLoadObject(msgs, class'Sound', true));\n            //if(j == 0)\n            //\tj = DefaultPitch;\n                \n            if (pgSound != None)\n                PP.PlaySound(pgSound, SLOT_Talk,2,,1024,pitch);\n            else\n                DeusExPlayer(PP).ClientMessage(\"|P2ERROR: Audio file not found.\");\n\n        }\n        \n        if(left(S,8) ~= \"playall \" && bAllowPlayAll)\n        {\n            msgs = Right(S, Len(S) - 8);\n            pitch=1;\n                if(instr(caps(msgs), caps(\" \")) != -1) //Assuming theres other words after\n                {\n                    msgs2 = Right(msgs, Len(msgs)-instr(msgs,\" \")-Len(\" \"));\n                    msgs = Left(msgs, InStr(msgs,\" \"));\n\n                    if(msgs2 != \"\")\n                    {\n                        j = int(msgs2);\n                        pitch = (j*0.15)+0.5;\n                    }\n                    pitch = FClamp(pitch, 0.5, 2.0);\n                    //Log(\"OUT:\"$msgs@msgs2@pitch);\n                }\n\n                        oldmsgs = msgs;\n            if ( InStr(msgs,\".\") == -1 )//No package specified, passing through to the auto-namer to see if anything matches.\n            {\n                bAutoPackage=True;\n                msgs=\"DeusExSounds.\" $ msgs;\n                pgSound = Sound(DynamicLoadObject(msgs, class'Sound', true));\n                    if (pgSound == None) //Nothing found in Deus Ex, now checking PartySoundPack, but if it IS found, move along to the sound\n                    {\n                        msgs = oldmsgs; //Resetting for pass two, assuming PartySoundPack\n                            msgs=\"PartySoundPack.\" $ msgs;\n                            pgSound = Sound(DynamicLoadObject(msgs, class'Sound', true));\n                            if (pgSound == None) //Nothing found, erroring\n                            {\n                            DeusExPlayer(PP).ClientMessage(\"|P2ERROR: DynamicLoadObject failed or no package specified. (DynamicLoadObject could not find \"$oldmsgs$\")\");\n                            return;\n                            }\n                    }\n            }\n            \n            if(!bAutoPackage)\n                pgSound = Sound(DynamicLoadObject(msgs, class'Sound', true));\n            \n                \n            if (pgSound != None)\n            {\n                foreach AllActors(class'DeusExPlayer',DXP)\n                {\n                DXP.PlaySound(pgSound, SLOT_Talk,2,,1024,pitch);\n                }\n            }\n            else\n            {\n                DeusExPlayer(PP).ClientMessage(\"|P2ERROR: Audio file not found.\");\n            }\n\n        }\n        else if(S ~= \"DroneRiding\" || S ~= \"DR\")\n        {\n            if(PP.bAdmin)\n            {\n                if(bSpydroneMod)\n                {//Turning off spydrone riding\n                    bSpydroneMod = False;\n                    BroadcastMessage(\"|P3Spydrone riding has been enabled by \"$PP.PlayerReplicationInfo.Playername);\n                }\n                else\n                {//Turning on spydrone riding\n                    bSpydroneMod = True;\n                    BroadcastMessage(\"|P3Spydrone riding has been disabled by \"$PP.PlayerReplicationInfo.Playername);\n                }\n            }",
                        "locals": [
                            "local int a, i, j, ID, amount;",
                            "local string IP, AName, Part, noobCommand, bm, Others, _tmpString, Message;",
                            "local DeusExPlayer SP;",
                            "local Box PC;",
                            "local int JSlot;",
                            "local Pawn APawn;",
                            "local string msgs;",
                            "local MSGR msobj;",
                            "local string formattedmin;",
                            "local sound pgSound;",
                            "local DeusExPlayer DXP;",
                            "local string oldmsgs, msgs2;",
                            "local bool bAutoPackage;",
                            "local float Pitch;",
                            "local Actor hitActor;",
                            "local vector loc, line, HitLocation, hitNormal;",
                            "local Decal Dec;",
                            "local JobScanner JS;"
                        ],
                        "modifiers": [],
                        "name": "Mutate",
                        "native": false,
                        "param": [
                            [
                                "String",
                                "S"
                            ],
                            [
                                "PlayerPawn",
                                "PP"
                            ]
                        ],
                        "return": ""
                    },
                    "PostBeginPlay": {
                        "body": "{\n    //Super.PostBeginPlay ();\n    Level.Game.BaseMutator.AddMutator (Self);\n    Level.Game.RegisterDamageMutator (Self);\n    \n    if(bPersistZones)\n    {\n        if(InStr(string(Level), PersistMap) != -1)\n        {\n            log(\"Enabling Actor Persist\");\n            p = spawn(class'Persist');\n            if(bLoadPersistance)\n                p.Load();\n            p.SetTimer(SaveTimer,True);\n        }\n    }\n    foreach AllActors(class'SecurityCamera', SC)\n    {\n        SC.bActive=False; //NO CAM GIRLS\n    }\n    foreach AllActors(class'Actor', A)\n    {\t\t  \n        if(string(a.class) ~= \"DXMTL152b1.CBPAmmocrate\") \n        {\n            Spawn(class'acrate',,,A.Location);\n            a.Destroy();\n        }\n    }\n    \n    if(Left(string(Level), InStr(string(Level), \".\")) ~= \"DXMP_RPGCity\")\n    {\n        foreach AllActors(class'ScriptedPawn',SP)\n        {\n            SP.Destroy();\n        }\n        foreach AllActors(class'BreakableGlass',BG)\n        {\n            BG.bBreakable = False;\n        }\n    }\n}",
                        "locals": [
                            "local PGMutator R;",
                            "local bool bMutatorFound;",
                            "local ProjectileGenerator PG;",
                            "local ScriptedPawn SP;",
                            "local BreakableGlass BG;",
                            "local Actor A;",
                            "local SecurityCamera SC;",
                            "local PSZoneInfo psz;",
                            "local Persist p;"
                        ],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ShowMessage": {
                        "body": "{\nif ((Player.RootWindow != None) && (DeusExRootWindow(Player.RootWindow).HUD != None))\n{\n    HUD = DeusExRootWindow(Player.RootWindow).HUD.startDisplay;\n}\nif(HUD != None)\n{\n    HUD.shadowDist = 0;\n    //HUD.setFont(Font'FontMenuTitle');\n    HUD.fontText = Font'FontMenuExtraLarge';\n    HUD.Message = \"\";\n    HUD.charIndex = 0;\n    HUD.winText.SetText(\"\");\n    HUD.winTextShadow.SetText(\"\");\n    HUD.displayTime = 5.50;\n    HUD.perCharDelay = 0.01;\n    HUD.AddMessage(Message);\n    HUD.StartMessage();\n}\n}",
                        "locals": [
                            "local HUDMissionStartTextDisplay    HUD;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "ShowMessage",
                        "native": false,
                        "param": [
                            [
                                "DeusExPlayer",
                                "Player"
                            ],
                            [
                                "string",
                                "Message"
                            ]
                        ],
                        "return": ""
                    },
                    "SpawnExplosion": {
                        "body": "{\n    s1 = spawn(class'ShockRing',,,Victim.Location,rot(16384,0,0));\n    s1.Lifespan = 2.5;\n    s2 = spawn(class'ShockRing',,,Victim.Location,rot(0,16384,0));\n    s2.Lifespan = 2.5;\n    s3 = spawn(class'ShockRing',,,Victim.Location,rot(0,0,16384));\n    S3.Lifespan = 2.5;\n    \n    r = Rand(100);\n    if(r < 10)\n    {\n        foreach VisibleActors(class'DeusExPlayer', player, 250)\n        {\n            if (player != None)\n            {\n                player.TakeDamage(100, Instigator, player.Location, vect(0,0,0), 'Flamed');\n                DeusExPlayer(Instigator).HealPlayer(50, True);\n                DeusExPlayer(Instigator).StopPoison();\n                DeusExPlayer(Instigator).ExtinguishFire();\n                DeusExPlayer(Instigator).drugEffectTimer = 0;\n                DeusExPlayer(Instigator).Energy += 25;\n                if (DeusExPlayer(Instigator).Energy > DeusExPlayer(Instigator).EnergyMax)\n                    DeusExPlayer(Instigator).Energy = DeusExPlayer(Instigator).EnergyMax;\n            }\n        }\n    }\n}",
                        "locals": [
                            "local ShockRing s1, s2, s3;",
                            "local int r;",
                            "local DeusExPlayer player;"
                        ],
                        "modifiers": [],
                        "name": "SpawnExplosion",
                        "native": false,
                        "param": [
                            [
                                "Pawn",
                                "victim"
                            ],
                            [
                                "Pawn",
                                "Instigator"
                            ]
                        ],
                        "return": ""
                    },
                    "SwapLoc": {
                        "body": "{\n    \n    Temp1 = Sender.Location;\n    Temp2 = Sender2.Location;\n    \n    Sender2.SetCollision(false, false, false);\n    Sender2.bCollideWorld = true;\n    Sender2.GotoState('PlayerWalking');\n    Sender2.SetLocation(Temp1);\n    Sender2.SetCollision(true, true , true);\n    Sender2.SetPhysics(PHYS_Walking);\n    Sender2.bCollideWorld = true;\n    Sender2.GotoState('PlayerWalking');\n    Sender2.ClientReStart();\n        \n    Sender.SetCollision(false, false, false);\n    Sender.bCollideWorld = true;\n    Sender.GotoState('PlayerWalking');\n    Sender.SetLocation(Temp2);\n    Sender.SetCollision(true, true , true);\n    Sender.SetPhysics(PHYS_Walking);\n    Sender.bCollideWorld = true;\n    Sender.GotoState('PlayerWalking');\n    Sender.ClientReStart();\t\n}",
                        "locals": [
                            "local vector Temp1, Temp2;"
                        ],
                        "modifiers": [],
                        "name": "SwapLoc",
                        "native": false,
                        "param": [
                            [
                                "pawn",
                                "Sender"
                            ],
                            [
                                "Pawn",
                                "Sender2"
                            ]
                        ],
                        "return": ""
                    },
                    "Tick": {
                        "body": "{\n\nif(bSuperGore)\n{\n    Random = Rand(100);\n\n    ForEach AllActors(class'FleshFragment', F)\n    {\n            F.Velocity   = vect(10, 10, 1000);\n            F.Fatness    = F.Default.Fatness + Random;\n            F.elasticity = 1.0;\n        }\n    }\n    \n    if(bSpydroneMod)\n    {\n        foreach AllActors(class'SpyDrone',SD)\n        {\n            if(SD != None)\n            {\n                SD.bBlockPlayers = True;\n                SD.DamageType = 'None';\n                SD.Damage = 0;\n                SD.MaxSpeed = 700;\n                ConsoleCommand(\"Set Augdrone ReconstructTime 1\");\n            }\n        }\n    }\n}",
                        "locals": [
                            "local Spydrone SD;",
                            "local FleshFragment F;",
                            "local int Random;"
                        ],
                        "modifiers": [],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltatime"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 829,
                "replication": "",
                "states": [],
                "variables": [
                    "var config bool bSuperGore;",
                    "var config bool bSpydroneMod;",
                    "var config bool bAllowPlay;",
                    "var config bool bAllowPlayAll;",
                    "var config bool bGiveAutoMed;",
                    "var config bool bAntiCheatKill;",
                    "var config bool bCrits;",
                    "var config bool bPersistZones;",
                    "var config int SaveTimer;",
                    "var config string PersistMap;",
                    "var config bool bLoadPersistance;",
                    "var config bool bGivePSCC;",
                    "var config bool bClearSpawnInventory;"
                ]
            }
        },
        "PGSItem.uc": {
            "body": "class PGSItem extends DeusExDecoration;\n\nvar bool bActive;\n\nfunction Frob(Actor Frobber, Inventory frobWith)\n{\nlocal PGSItem PGSI;\nlocal int myCount;\n\tif(bActive)\n\t{\n\tbActive=False;\n\tDeusExPlayer(Frobber).PlayerReplicationInfo.Score += 3;\n\tBroadcastMessage(DeusExPlayer(Frobber).PlayerReplicationInfo.PlayerName$\" has found an item.\");\n\tmyCount = 0;\n\t\tforeach AllActors(class'PGSItem',PGSI)\n\t\t{\n\t\t\tmyCount++;\n\t\t}\n\t\tmyCount -= 1; //Count out THIS one\n\tBroadcastMessage(myCount$\" remaining.\");\n\tdestroy();\n\treturn;\t\n\t}\n}\n\ndefaultproperties\n{\n     bInvincible=True\n     bCanBeBase=True\n     ItemName=\"Scavenger Item\"\n     bPushable=False\n     bBlockSight=True\n     Mesh=LodMesh'DeusExItems.VialAmbrosia'\n     MultiSkins(1)=FireTexture'Effects.liquid.Virus_SFX'\n     CollisionRadius=2.200000\n     CollisionHeight=4.890000\n     Mass=200.000000\n     Buoyancy=40.000000\n}\n",
            "name": "PGSItem.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bInvincible=True",
                    "bCanBeBase=True",
                    "ItemName=\"Scavenger Item\"",
                    "bPushable=False",
                    "bBlockSight=True",
                    "Mesh=LodMesh'DeusExItems.VialAmbrosia'",
                    "MultiSkins(1)=FireTexture'Effects.liquid.Virus_SFX'",
                    "CollisionRadius=2.200000",
                    "CollisionHeight=4.890000",
                    "Mass=200.000000",
                    "Buoyancy=40.000000"
                ],
                "exec": [],
                "extends": "DeusExDecoration",
                "functions": {
                    "Frob": {
                        "body": "{\n\tif(bActive)\n\t{\n\tbActive=False;\n\tDeusExPlayer(Frobber).PlayerReplicationInfo.Score += 3;\n\tBroadcastMessage(DeusExPlayer(Frobber).PlayerReplicationInfo.PlayerName$\" has found an item.\");\n\tmyCount = 0;\n\t\tforeach AllActors(class'PGSItem',PGSI)\n\t\t{\n\t\t\tmyCount++;\n\t\t}\n\t\tmyCount -= 1; //Count out THIS one\n\tBroadcastMessage(myCount$\" remaining.\");\n\tdestroy();\n\treturn;\t\n\t}\n}",
                        "locals": [
                            "local PGSItem PGSI;",
                            "local int myCount;"
                        ],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 40,
                "replication": "",
                "states": [],
                "variables": [
                    "var bool bActive;"
                ]
            }
        },
        "PGSeeker.uc": {
            "body": "//=============================================================================\n// WeaponStealthPistol.\n//=============================================================================\nclass PGSeeker extends DeusExWeapon;\n\nvar bool bFailure;\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t\tReloadCount = mpReloadCount;\n\t}\n}\n\nfunction string GetName(DeusExPlayer P)\n{\n\t\treturn p.PlayerReplicationInfo.PlayerName;\n}\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\nFunction LaserToggle()\n{\n\tlocal PGHiderActors PG;\n\t\n\tbroadcastmessage(\"FOUND PLAYERS\");\n\tforeach allactors(class'PGHiderActors',PG)\n\t{\n\t\tBroadcastMessage(PG.SavedName);\n\t}\n}\n\nfunction ProcessTraceHit(Actor Other, Vector HitLocation, Vector HitNormal, Vector X, Vector Y, Vector Z)\n{\n\tlocal float        mult;\n\tlocal name         damageType;\n\tlocal DeusExPlayer dxPlayer, DXP;\n\tlocal Pawn P;\n\tlocal int myCount;\n\tlocal PGHiderActors PGH;\n\tlocal PGGames PGG;\n\tlocal Inventory inv;\n\tlocal bool bHurtMe;\n\tlocal HideFailActor HFA;\n\t\n\tbHurtMe=False;\n\tif(Other.isa('DeusExPlayer'))\n\t{\n\t\tforeach AllActors(class'PGHiderActors',PGH)\n\t\t{\n\t\t\tif(PGH.Hider == DeusExPlayer(Other))\n\t\t\t{\n\t\t\t\tDeusExPlayer(Owner).ClientMessage(\"|P2Player already found.\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t\n\t\tforeach AllActors(class'PGGames',PGG)\n\t\t{\n\t\t\tif(DeusExPlayer(Other) == PGG.Seeker)\n\t\t\t{\n\t\t\t\tDeusExPlayer(Owner).ClientMessage(\"|P2Can not tag the primary seeker.\");\n\t\t\t\treturn;\t\t\t\n\t\t\t}\n\t\t}\n\t\t\n\t\tPGH = Spawn(class'PGHiderActors');\n\t\tPGH.Hider = DeusExPlayer(Other);\n\t\tPGH.SavedName = GetName(DeusExPlayer(Other));\n\t\tDeusExPlayer(Owner).PlayerReplicationInfo.Score += 3;\n\t\tBroadcastMessage(GetName(DeusExPlayer(Other))$\" has been found!\");\n\t\t\n\t\tinv=Spawn(class'PGSeeker');\n\t\tInv.Frob(DeusExPlayer(Other),None);\t  \n\t\tInventory.bInObjectBelt = True;\n\t\tinv.Destroy();\n\t\t\t\t\t\n\t\tmyCount=0;\n\t\tforeach allactors(class'DeusExPlayer',DXP)\n\t\t{\n\t\t\t\tif(!DXP.isinState('Spectating'))\n\t\t\t\t{\n\t\t\t\tmyCount++;\n\t\t\t\t}\n\t\t}\n\t\tforeach AllActors(class'PGHiderActors',PGH)\n\t\t{\n\t\t\tmyCount--;\n\t\t}\n\t\tmyCount--; //Negative one for the Seeker\n\t\tBroadcastMessage(myCount$\" hiders remaining.\");\n\t\treturn;\n\t}\n\t\tDeusExPlayer(Owner).TakeDamage(20, DeusExPlayer(Owner), Owner.Location, vect(0,0,1),'Shot');\n\t\tif(DeusExPlayer(Owner).Health <= 0)\n\t\t{\n\t\t\tHFA = Spawn(class'HideFailActor');\n\t\t\tHFA.BadPlayer = DeusExPlayer(Owner);\n\t\t}\n}\n\nsimulated function float CalculateAccuracy()\n{\n\treturn 0.000000; //Dirty hack to always return dead on accuracy.\n}\n\nstate NormalFire //(Thanks to JimBowen for this Infinite ammo code) \n{ \n   Begin: \n      if ((ClipCount >= ReloadCount) && (ReloadCount != 0)) \n      { \n         if (!bAutomatic) \n         { \n            bFiring = False; \n            FinishAnim(); \n         } \n    \n         if (Owner != None) \n         { \n            if (Owner.IsA('DeusExPlayer')) \n            { \n               bFiring = False; \n            } \n            else if (Owner.IsA('ScriptedPawn')) \n            { \n               bFiring = False; \n               ReloadAmmo(); \n            } \n         } \n         else \n         { \n            if (bHasMuzzleFlash) \n               EraseMuzzleFlashTexture(); \n            GotoState('Idle'); \n         } \n      } \n      if ( bAutomatic && (( Level.NetMode == NM_DedicatedServer ) || ((Level.NetMode == NM_ListenServer) && Owner.IsA('DeusExPlayer') && !DeusExPlayer(Owner).PlayerIsListenClient()))) \n         GotoState('Idle'); \n    \n      Sleep(GetShotTime()); \n      if (bAutomatic) \n      { \n         GenerateBullet();       // In multiplayer bullets are generated by the client which will let the server know when \n         Goto('Begin'); \n      } \n      bFiring = False; \n      FinishAnim(); \n    \n   /*      // if ReloadCount is 0 and we're not hand to hand, then this is a \n      // single-use weapon so destroy it after firing once \n      if ((ReloadCount == 0) && !bHandToHand) \n      { \n         if (DeusExPlayer(Owner) != None) \n            DeusExPlayer(Owner).RemoveItemFromSlot(Self);   // remove it from the inventory grid \n         Destroy(); \n      } \n      */              // Do I REALLY need all that crap JUST for infinite ammo? \n      ReadyToFire(); \n   Done: \n      bFiring = False; \n      Finish(); \n}\n\nfunction ScopeToggle()\n{\n\tDeusExPlayer(Owner).ConsoleCommand(\"Mutate rcon.tp\");\n}\n\ndefaultproperties\n{\n     GoverningSkill=Class'DeusEx.SkillWeaponPistol'\n     NoiseLevel=0.010000\n     ShotTime=0.150000\n     reloadTime=1.500000\n     HitDamage=0\n     maxRange=4800\n     AccurateRange=2400\n     BaseAccuracy=0.800000\n     bCanHaveScope=True\n     ScopeFOV=25\n     bCanHaveLaser=True\n     recoilStrength=0.100000\n     mpBaseAccuracy=0.200000\n     mpAccurateRange=1200\n     mpMaxRange=1200\n     bCanHaveModBaseAccuracy=True\n     bCanHaveModReloadCount=True\n     bCanHaveModAccurateRange=True\n     bCanHaveModReloadTime=True\n     bInstantHit=True\n     FireOffset=(X=-24.000000,Y=10.000000,Z=14.000000)\n     shakemag=50.000000\n     FireSound=Sound'DeusExSounds.Weapons.StealthPistolFire'\n     AltFireSound=Sound'DeusExSounds.Weapons.StealthPistolReloadEnd'\n     CockingSound=Sound'DeusExSounds.Weapons.StealthPistolReload'\n     SelectSound=Sound'DeusExSounds.Weapons.StealthPistolSelect'\n     InventoryGroup=128\n     ItemName=\"Seeker Gun\"\n     PlayerViewOffset=(X=24.000000,Y=-10.000000,Z=-14.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.StealthPistol'\n     PickupViewMesh=LodMesh'DeusExItems.StealthPistolPickup'\n     ThirdPersonMesh=LodMesh'DeusExItems.StealthPistol3rd'\n     Icon=Texture'DeusExUI.Icons.BeltIconStealthPistol'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconStealthPistol'\n     largeIconWidth=47\n     largeIconHeight=37\n     Description=\"The stealth pistol is a variant of the standard 10mm pistol with a larger clip and integrated silencer designed for wet work at very close ranges.\"\n     beltDescription=\"SEEKER\"\n     Mesh=LodMesh'DeusExItems.StealthPistolPickup'\n     CollisionRadius=8.000000\n     CollisionHeight=0.800000\n}\n",
            "name": "PGSeeker.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "GoverningSkill=Class'DeusEx.SkillWeaponPistol'",
                    "NoiseLevel=0.010000",
                    "ShotTime=0.150000",
                    "reloadTime=1.500000",
                    "HitDamage=0",
                    "maxRange=4800",
                    "AccurateRange=2400",
                    "BaseAccuracy=0.800000",
                    "bCanHaveScope=True",
                    "ScopeFOV=25",
                    "bCanHaveLaser=True",
                    "recoilStrength=0.100000",
                    "mpBaseAccuracy=0.200000",
                    "mpAccurateRange=1200",
                    "mpMaxRange=1200",
                    "bCanHaveModBaseAccuracy=True",
                    "bCanHaveModReloadCount=True",
                    "bCanHaveModAccurateRange=True",
                    "bCanHaveModReloadTime=True",
                    "bInstantHit=True",
                    "FireOffset=(X=-24.000000,Y=10.000000,Z=14.000000)",
                    "shakemag=50.000000",
                    "FireSound=Sound'DeusExSounds.Weapons.StealthPistolFire'",
                    "AltFireSound=Sound'DeusExSounds.Weapons.StealthPistolReloadEnd'",
                    "CockingSound=Sound'DeusExSounds.Weapons.StealthPistolReload'",
                    "SelectSound=Sound'DeusExSounds.Weapons.StealthPistolSelect'",
                    "InventoryGroup=128",
                    "ItemName=\"Seeker Gun\"",
                    "PlayerViewOffset=(X=24.000000,Y=-10.000000,Z=-14.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.StealthPistol'",
                    "PickupViewMesh=LodMesh'DeusExItems.StealthPistolPickup'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.StealthPistol3rd'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconStealthPistol'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconStealthPistol'",
                    "largeIconWidth=47",
                    "largeIconHeight=37",
                    "Description=\"The stealth pistol is a variant of the standard 10mm pistol with a larger clip and integrated silencer designed for wet work at very close ranges.\"",
                    "beltDescription=\"SEEKER\"",
                    "Mesh=LodMesh'DeusExItems.StealthPistolPickup'",
                    "CollisionRadius=8.000000",
                    "CollisionHeight=0.800000"
                ],
                "exec": [],
                "extends": "DeusExWeapon",
                "functions": {
                    "CalculateAccuracy": {
                        "body": "{\n\treturn 0.000000; //Dirty hack to always return dead on accuracy.\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "CalculateAccuracy",
                        "native": false,
                        "param": [],
                        "return": "float"
                    },
                    "GetName": {
                        "body": "{\n\t\treturn p.PlayerReplicationInfo.PlayerName;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetName",
                        "native": false,
                        "param": [
                            [
                                "DeusExPlayer",
                                "P"
                            ]
                        ],
                        "return": "string"
                    },
                    "LaserToggle": {
                        "body": "{\n\t\n\tbroadcastmessage(\"FOUND PLAYERS\");\n\tforeach allactors(class'PGHiderActors',PG)\n\t{\n\t\tBroadcastMessage(PG.SavedName);\n\t}\n}",
                        "locals": [
                            "local PGHiderActors PG;"
                        ],
                        "modifiers": [],
                        "name": "LaserToggle",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t\tReloadCount = mpReloadCount;\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ProcessTraceHit": {
                        "body": "{\n\t\n\tbHurtMe=False;\n\tif(Other.isa('DeusExPlayer'))\n\t{\n\t\tforeach AllActors(class'PGHiderActors',PGH)\n\t\t{\n\t\t\tif(PGH.Hider == DeusExPlayer(Other))\n\t\t\t{\n\t\t\t\tDeusExPlayer(Owner).ClientMessage(\"|P2Player already found.\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t\n\t\tforeach AllActors(class'PGGames',PGG)\n\t\t{\n\t\t\tif(DeusExPlayer(Other) == PGG.Seeker)\n\t\t\t{\n\t\t\t\tDeusExPlayer(Owner).ClientMessage(\"|P2Can not tag the primary seeker.\");\n\t\t\t\treturn;\t\t\t\n\t\t\t}\n\t\t}\n\t\t\n\t\tPGH = Spawn(class'PGHiderActors');\n\t\tPGH.Hider = DeusExPlayer(Other);\n\t\tPGH.SavedName = GetName(DeusExPlayer(Other));\n\t\tDeusExPlayer(Owner).PlayerReplicationInfo.Score += 3;\n\t\tBroadcastMessage(GetName(DeusExPlayer(Other))$\" has been found!\");\n\t\t\n\t\tinv=Spawn(class'PGSeeker');\n\t\tInv.Frob(DeusExPlayer(Other),None);\t  \n\t\tInventory.bInObjectBelt = True;\n\t\tinv.Destroy();\n\t\t\t\t\t\n\t\tmyCount=0;\n\t\tforeach allactors(class'DeusExPlayer',DXP)\n\t\t{\n\t\t\t\tif(!DXP.isinState('Spectating'))\n\t\t\t\t{\n\t\t\t\tmyCount++;\n\t\t\t\t}\n\t\t}\n\t\tforeach AllActors(class'PGHiderActors',PGH)\n\t\t{\n\t\t\tmyCount--;\n\t\t}\n\t\tmyCount--; //Negative one for the Seeker\n\t\tBroadcastMessage(myCount$\" hiders remaining.\");\n\t\treturn;\n\t}\n\t\tDeusExPlayer(Owner).TakeDamage(20, DeusExPlayer(Owner), Owner.Location, vect(0,0,1),'Shot');\n\t\tif(DeusExPlayer(Owner).Health <= 0)\n\t\t{\n\t\t\tHFA = Spawn(class'HideFailActor');\n\t\t\tHFA.BadPlayer = DeusExPlayer(Owner);\n\t\t}\n}",
                        "locals": [
                            "local float        mult;",
                            "local name         damageType;",
                            "local DeusExPlayer dxPlayer, DXP;",
                            "local Pawn P;",
                            "local int myCount;",
                            "local PGHiderActors PGH;",
                            "local PGGames PGG;",
                            "local Inventory inv;",
                            "local bool bHurtMe;",
                            "local HideFailActor HFA;"
                        ],
                        "modifiers": [],
                        "name": "ProcessTraceHit",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Other"
                            ],
                            [
                                "Vector",
                                "HitLocation"
                            ],
                            [
                                "Vector",
                                "HitNormal"
                            ],
                            [
                                "Vector",
                                "X"
                            ],
                            [
                                "Vector",
                                "Y"
                            ],
                            [
                                "Vector",
                                "Z"
                            ]
                        ],
                        "return": ""
                    },
                    "ScopeToggle": {
                        "body": "{\n\tDeusExPlayer(Owner).ConsoleCommand(\"Mutate rcon.tp\");\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "ScopeToggle",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 225,
                "replication": "",
                "states": [],
                "variables": [
                    "var bool bFailure;"
                ]
            }
        },
        "PRING.uc": {
            "body": "//=============================================================================\n// PRing.   Copyright (C) 2002 Hejhujka & Luminous Path.\n//=============================================================================\nclass PRing extends SphereEffect;\n\nvar float blastRadius;\nvar float size;\n\nsimulated function Tick(float deltaTime)\n{\n\n Super.Tick(DeltaTime);\n\n DrawScale = 3.0 * size * (Default.LifeSpan - LifeSpan) / Default.LifeSpan;\n ScaleGlow = 0.75 * (LifeSpan / Default.Lifespan);\n\n    }\n\ndefaultproperties\n{\n     size=5.000000\n     LifeSpan=4.750000\n     Skin=FireTexture'Effects.liquid.Virus_SFX'\n}\n",
            "name": "PRING.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "size=5.000000",
                    "LifeSpan=4.750000",
                    "Skin=FireTexture'Effects.liquid.Virus_SFX'"
                ],
                "exec": [],
                "extends": "SphereEffect",
                "functions": {
                    "Tick": {
                        "body": "{\n\n Super.Tick(DeltaTime);\n\n DrawScale = 3.0 * size * (Default.LifeSpan - LifeSpan) / Default.LifeSpan;\n ScaleGlow = 0.75 * (LifeSpan / Default.Lifespan);\n\n    }",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltaTime"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 25,
                "replication": "",
                "states": [],
                "variables": [
                    "var float blastRadius;",
                    "var float size;"
                ]
            }
        },
        "PSAfterEffect.uc": {
            "body": "class PSAfterEffect extends Actor;\n\nvar bool bStartFade;\n\nfunction AttachToPlayer(DeusExPlayer target)\n{\n\tlocal int i;\n\t\n\tif(Target != None)\n\t{\n\t\tStyle=STY_Translucent;\n\t\tDrawtype = target.DrawType;\n\t\tSetLocation(target.Location);\n\t\tDrawscale = target.Drawscale;\n\t\tMesh = target.Mesh;\n\t\tSetRotation(target.Rotation);\n\t\tfor(i=0;i<8;i++)\n\t\t\tMultiskins[i] = target.Multiskins[i];\n\t\t\n\t\tbStartFade=True;\n\t}\n}\n\nfunction Tick(float v)\n{\n\tScaleglow-=0.02;\n\tif(Scaleglow<0.01)\n\t\tDestroy();\n\t\n}\n\ndefaultproperties\n{\n}\n",
            "name": "PSAfterEffect.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "Actor",
                "functions": {
                    "AttachToPlayer": {
                        "body": "{\n\t\n\tif(Target != None)\n\t{\n\t\tStyle=STY_Translucent;\n\t\tDrawtype = target.DrawType;\n\t\tSetLocation(target.Location);\n\t\tDrawscale = target.Drawscale;\n\t\tMesh = target.Mesh;\n\t\tSetRotation(target.Rotation);\n\t\tfor(i=0;i<8;i++)\n\t\t\tMultiskins[i] = target.Multiskins[i];\n\t\t\n\t\tbStartFade=True;\n\t}\n}",
                        "locals": [
                            "local int i;"
                        ],
                        "modifiers": [],
                        "name": "AttachToPlayer",
                        "native": false,
                        "param": [
                            [
                                "DeusExPlayer",
                                "target"
                            ]
                        ],
                        "return": ""
                    },
                    "Tick": {
                        "body": "{\n\tScaleglow-=0.02;\n\tif(Scaleglow<0.01)\n\t\tDestroy();\n\t\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "v"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 35,
                "replication": "",
                "states": [],
                "variables": [
                    "var bool bStartFade;"
                ]
            }
        },
        "PSArenaEntrySwitch.uc": {
            "body": "//=============================================================================\n//.\n//=============================================================================\nclass PSArenaEntrySwitch extends Switch2;\n\nvar() name SpawnTag;\nvar bool bPSActive;\n\nfunction Frob(Actor Frobber, Inventory frobWith)\n{\n\tlocal PSArenaSpawner PSA;\n\tlocal deusexplayer dxp;\n\tdxp = DeusExPlayer(Frobber);\n\t\n\tif(!bPSActive)\n\t{\n\t\tdxp.ClientMessage(\"Not allowed to enter.\");\n\t\treturn;\n\t}\n\tforeach AllActors(class'PSArenaSpawner', PSA)\n\t{\n\t\tif(PSA.Tag == SpawnTag)\n\t\t{\n\t\t\t\tDXP.SetCollision(false, false, false);\n\t\t\t\tDXP.bCollideWorld = true;\n\t\t\t\tDXP.GotoState('PlayerWalking');\n\t\t\t\tDXP.SetLocation(PSA.location);\n\t\t\t\tDXP.SetCollision(true, true , true);\n\t\t\t\tDXP.SetPhysics(PHYS_Walking);\n\t\t\t\tDXP.bCollideWorld = true;\n\t\t\t\tDXP.GotoState('PlayerWalking');\n\t\t\t\tDXP.ClientReStart();\t\n\t\t}\n\t}\n}\n\ndefaultproperties\n{\n     bPSActive=True\n     ItemName=\"Enter the arena!\"\n}\n",
            "name": "PSArenaEntrySwitch.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bPSActive=True",
                    "ItemName=\"Enter the arena!\""
                ],
                "exec": [],
                "extends": "Switch2",
                "functions": {
                    "Frob": {
                        "body": "{\n\tdxp = DeusExPlayer(Frobber);\n\t\n\tif(!bPSActive)\n\t{\n\t\tdxp.ClientMessage(\"Not allowed to enter.\");\n\t\treturn;\n\t}\n\tforeach AllActors(class'PSArenaSpawner', PSA)\n\t{\n\t\tif(PSA.Tag == SpawnTag)\n\t\t{\n\t\t\t\tDXP.SetCollision(false, false, false);\n\t\t\t\tDXP.bCollideWorld = true;\n\t\t\t\tDXP.GotoState('PlayerWalking');\n\t\t\t\tDXP.SetLocation(PSA.location);\n\t\t\t\tDXP.SetCollision(true, true , true);\n\t\t\t\tDXP.SetPhysics(PHYS_Walking);\n\t\t\t\tDXP.bCollideWorld = true;\n\t\t\t\tDXP.GotoState('PlayerWalking');\n\t\t\t\tDXP.ClientReStart();\t\n\t\t}\n\t}\n}",
                        "locals": [
                            "local PSArenaSpawner PSA;",
                            "local deusexplayer dxp;"
                        ],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 42,
                "replication": "",
                "states": [],
                "variables": [
                    "var() name SpawnTag;",
                    "var bool bPSActive;"
                ]
            }
        },
        "PSArenaExit.uc": {
            "body": "//=============================================================================\n// Spawnz.\n//=============================================================================\nclass PSArenaExit extends Actor;\n\ndefaultproperties\n{\n     bHidden=True\n}\n",
            "name": "PSArenaExit.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bHidden=True"
                ],
                "exec": [],
                "extends": "Actor",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 10,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "PSArenaExitSwitch.uc": {
            "body": "//=============================================================================\n//.\n//=============================================================================\nclass PSArenaExitSwitch extends Switch2;\n\nvar() name SpawnTag;\nvar bool bPSActive;\n\nfunction Frob(Actor Frobber, Inventory frobWith)\n{\n\tlocal PSArenaExit PSA;\n\tlocal deusexplayer dxp;\n\tdxp = DeusExPlayer(Frobber);\n\t\n\tif(!bPSActive)\n\t{\n\t\tdxp.ClientMessage(\"Not allowed to leave.\");\n\t\treturn;\n\t}\n\t\n\tforeach AllActors(class'PSArenaExit', PSA)\n\t{\n\t\tif(PSA.Tag == SpawnTag)\n\t\t{\n\t\t\t\tDXP.SetCollision(false, false, false);\n\t\t\t\tDXP.bCollideWorld = true;\n\t\t\t\tDXP.GotoState('PlayerWalking');\n\t\t\t\tDXP.SetLocation(PSA.location);\n\t\t\t\tDXP.SetCollision(true, true , true);\n\t\t\t\tDXP.SetPhysics(PHYS_Walking);\n\t\t\t\tDXP.bCollideWorld = true;\n\t\t\t\tDXP.GotoState('PlayerWalking');\n\t\t\t\tDXP.ClientReStart();\t\n\t\t}\n\t}\n}\n\ndefaultproperties\n{\n     bPSActive=True\n     ItemName=\"Exit the arena!\"\n}\n",
            "name": "PSArenaExitSwitch.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bPSActive=True",
                    "ItemName=\"Exit the arena!\""
                ],
                "exec": [],
                "extends": "Switch2",
                "functions": {
                    "Frob": {
                        "body": "{\n\tdxp = DeusExPlayer(Frobber);\n\t\n\tif(!bPSActive)\n\t{\n\t\tdxp.ClientMessage(\"Not allowed to leave.\");\n\t\treturn;\n\t}\n\t\n\tforeach AllActors(class'PSArenaExit', PSA)\n\t{\n\t\tif(PSA.Tag == SpawnTag)\n\t\t{\n\t\t\t\tDXP.SetCollision(false, false, false);\n\t\t\t\tDXP.bCollideWorld = true;\n\t\t\t\tDXP.GotoState('PlayerWalking');\n\t\t\t\tDXP.SetLocation(PSA.location);\n\t\t\t\tDXP.SetCollision(true, true , true);\n\t\t\t\tDXP.SetPhysics(PHYS_Walking);\n\t\t\t\tDXP.bCollideWorld = true;\n\t\t\t\tDXP.GotoState('PlayerWalking');\n\t\t\t\tDXP.ClientReStart();\t\n\t\t}\n\t}\n}",
                        "locals": [
                            "local PSArenaExit PSA;",
                            "local deusexplayer dxp;"
                        ],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 43,
                "replication": "",
                "states": [],
                "variables": [
                    "var() name SpawnTag;",
                    "var bool bPSActive;"
                ]
            }
        },
        "PSArenaSpawner.uc": {
            "body": "//=============================================================================\n// Spawnz.\n//=============================================================================\nclass PSArenaSpawner extends PGSpawnPoints;\n\ndefaultproperties\n{\n     bHidden=True\n}\n",
            "name": "PSArenaSpawner.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bHidden=True"
                ],
                "exec": [],
                "extends": "PGSpawnPoints",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 10,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "PSArenaStartSwitch.uc": {
            "body": "//=============================================================================\n//.\n//=============================================================================\nclass PSArenaStartSwitch extends Switch2;\n\nvar() name SpawnTag, ArenaZoneTag;\nvar bool bPSActive;\n\nfunction Frob(Actor Frobber, Inventory frobWith)\n{\n\tlocal PSArenaZone PZ;\n\tlocal deusexplayer dxp;\n\tdxp = DeusExPlayer(Frobber);\n\t\n\tif(!bPSActive)\n\t{\n\t\tdxp.ClientMessage(\"Button disabled..\");\n\t\treturn;\n\t}\n\t\n\tforeach AllActors(class'PSArenaZone', PZ)\n\t{\n\t\tif(PZ.Tag == ArenaZoneTag)\n\t\t{\n\t\t\tPZ.BeginMatch();\n\t\t\tbPSActive=False;\n\t\t}\n\t}\n}\n\ndefaultproperties\n{\n     bPSActive=True\n     ItemName=\"Begin the battle!\"\n}\n",
            "name": "PSArenaStartSwitch.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bPSActive=True",
                    "ItemName=\"Begin the battle!\""
                ],
                "exec": [],
                "extends": "Switch2",
                "functions": {
                    "Frob": {
                        "body": "{\n\tdxp = DeusExPlayer(Frobber);\n\t\n\tif(!bPSActive)\n\t{\n\t\tdxp.ClientMessage(\"Button disabled..\");\n\t\treturn;\n\t}\n\t\n\tforeach AllActors(class'PSArenaZone', PZ)\n\t{\n\t\tif(PZ.Tag == ArenaZoneTag)\n\t\t{\n\t\t\tPZ.BeginMatch();\n\t\t\tbPSActive=False;\n\t\t}\n\t}\n}",
                        "locals": [
                            "local PSArenaZone PZ;",
                            "local deusexplayer dxp;"
                        ],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 36,
                "replication": "",
                "states": [],
                "variables": [
                    "var() name SpawnTag, ArenaZoneTag;",
                    "var bool bPSActive;"
                ]
            }
        },
        "PSArenaTimer.uc": {
            "body": "class PSArenaTimer extends PGActors;\n\nvar PSArenaZone Zoney;\n\nfunction Timer()\n{\n\tZoney.Kombat();\n}\n\nfunction Tick(float deltatime)\n{\n\tlocal DeusExPlayer DXP;\n\tlocal DXEnemy Enemies;\n\t\n\tif(Zoney == None)\n\t\tDestroy();\n\t\t\n\tif(Zoney.bRunning && Zoney.CountPlayers() == 0)\n\t\tZoney.EndMatch(false);\n\tif(Zoney.bRunning && Zoney.CountEnemy() == 0)\n\t\tZoney.EndMatch(True);\n}\n\ndefaultproperties\n{\n}\n",
            "name": "PSArenaTimer.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "PGActors",
                "functions": {
                    "Tick": {
                        "body": "{\n\t\n\tif(Zoney == None)\n\t\tDestroy();\n\t\t\n\tif(Zoney.bRunning && Zoney.CountPlayers() == 0)\n\t\tZoney.EndMatch(false);\n\tif(Zoney.bRunning && Zoney.CountEnemy() == 0)\n\t\tZoney.EndMatch(True);\n}",
                        "locals": [
                            "local DeusExPlayer DXP;",
                            "local DXEnemy Enemies;"
                        ],
                        "modifiers": [],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltatime"
                            ]
                        ],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\tZoney.Kombat();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 27,
                "replication": "",
                "states": [],
                "variables": [
                    "var PSArenaZone Zoney;"
                ]
            }
        },
        "PSArenaZone.uc": {
            "body": "//=============================================================================\n// PSZoneInfo\n//=============================================================================\nclass PSArenaZone extends ZoneInfo;\n\nvar() int Payout;\nvar() bool bRunning;\nvar() music myTrack;\nvar() EMusicTransition Transition;\nvar() byte             SongSection;\nvar() byte             CdTrack;\nvar() name PSATags[10];\nvar() class<DXEnemy> EnemiesGroupOne[10];\nvar() class<DXEnemy> EnemiesGroupTwo[10];\nvar() class<DXEnemy> EnemiesGroupThree[10];\nvar() class<DXEnemy> EnemiesGroupFour[10];\nvar() class<DXEnemy> EnemiesGroupFive[10];\nvar() name EntryButtonTag, ExitButtonTag, StartButtonTag;\nvar PSArenaTimer PST;\n\nfunction BeginMatch()\n{\n\tlocal PSArenaExitSwitch PSAEx;\n\tlocal PSArenaEntrySwitch PSAEn;\n\n\tBroadcastMessage(\"Beginning match with \"$CountPlayers()$\" players!\");\n\tPST = Spawn(class'PSArenaTimer');\n\tPST.SetTimer(5,False);\n\tPST.Zoney = Self;\n\t\t\n\tforeach AllActors(class'PSArenaExitswitch', PSAEx)\n\t\tif(PSAEx.Tag == ExitButtonTag)\n\t\t\tPSAEx.bPSActive=False;\n\tforeach AllActors(class'PSArenaEntryswitch', PSAEn)\n\t\tif(PSAEn.Tag == EntryButtonTag)\n\t\t\tPSAEn.bPSActive=False;\t\n\n}\n\nfunction Kombat()\n{\n\tlocal int i;\n\tlocal PSArenaSpawner PSA;\n\tlocal DeusExPlayer DXP;\n\tlocal int p;\n\tp = Rand(5);\n\t\n\tforeach ZoneActors(class'DeusExPlayer', DXP)\n\t\tDXP.ClientSetMusic( myTrack, SongSection, CdTrack, Transition );\n\tif(p == 0)\n\t\tfor(i=0;i<10;i++)\n\t\t\tforeach AllActors(class'PSArenaSpawner', PSA)\n\t\t\t\tif(PSA.Tag == PSATags[i])\n\t\t\t\t\tSpawn(EnemiesGroupOne[i],,,PSA.Location);\n\tif(p == 1)\n\t\tfor(i=0;i<10;i++)\n\t\t\tforeach AllActors(class'PSArenaSpawner', PSA)\n\t\t\t\tif(PSA.Tag == PSATags[i])\n\t\t\t\t\tSpawn(EnemiesGroupTwo[i],,,PSA.Location);\n\n\tif(p == 2)\n\t\tfor(i=0;i<10;i++)\n\t\t\tforeach AllActors(class'PSArenaSpawner', PSA)\n\t\t\t\tif(PSA.Tag == PSATags[i])\n\t\t\t\t\tSpawn(EnemiesGroupThree[i],,,PSA.Location);\n\t\t\t\t\t\n\tif(p == 3)\n\t\tfor(i=0;i<10;i++)\n\t\t\tforeach AllActors(class'PSArenaSpawner', PSA)\n\t\t\t\tif(PSA.Tag == PSATags[i])\n\t\t\t\t\tSpawn(EnemiesGroupFour[i],,,PSA.Location);\n\t\t\t\t\t\n\tif(p == 4)\n\t\tfor(i=0;i<10;i++)\n\t\t\tforeach AllActors(class'PSArenaSpawner', PSA)\n\t\t\t\tif(PSA.Tag == PSATags[i])\n\t\t\t\t\tSpawn(EnemiesGroupFive[i],,,PSA.Location);\n\t\n\t\tbRunning=True;\n}\n\nfunction int CountPlayers()\n{\n\tlocal int i;\n\tlocal DeusExPlayer DXP;\n\tforeach ZoneActors(class'DeusExPlayer', DXP)\n\t\tif(!DXP.IsInState('Spectating'))\n\t\t\ti++;\n\t\t\n\treturn i;\n}\n\nfunction int CountEnemy()\n{\n\tlocal int i;\n\tlocal DXEnemy DXP;\n\tforeach ZoneActors(class'DXEnemy', DXP)\n\t\ti++;\n\t\t\n\treturn i;\n}\n\nfunction EndMatch(bool bWon)\n{\n\tlocal PSArenaExit AE;\n\tlocal DeusExPlayer DXP;\n\tlocal DXEnemy DXE;\n\tlocal PSArenaExitSwitch PSAEx;\n\tlocal PSArenaEntrySwitch PSAEn;\n\tlocal PSArenaStartSwitch PSAEs;\n\tlocal int realpay;\n\t\n\trealpay = payout / countplayers();\n\tif(bWon)\n\t{\n\t\tBroadcastMessage(\"Match over! Players win! \"$payout$\" credits split among the players. (\"$realpay$\" each)\");\n\t\tforeach ZoneActors(class'DeusExPlayer', DXP)\n\t\t{\n\t\t\tif(!DXP.IsInState('Spectating'))\n\t\t\t{\n\t\t\t\tDXP.Credits += realpay;\n\t\t\t\tforeach AllActors(class'PSArenaExit', AE)\n\t\t\t\t{\n\t\t\t\t\tDXP.SetCollision(false, false, false);\n\t\t\t\t\tDXP.bCollideWorld = true;\n\t\t\t\t\tDXP.GotoState('PlayerWalking');\n\t\t\t\t\tDXP.SetLocation(AE.location);\n\t\t\t\t\tDXP.SetCollision(true, true , true);\n\t\t\t\t\tDXP.SetPhysics(PHYS_Walking);\n\t\t\t\t\tDXP.bCollideWorld = true;\n\t\t\t\t\tDXP.GotoState('PlayerWalking');\n\t\t\t\t\tDXP.ClientReStart();\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tBroadcastMessage(\"Match over! Players defeated.\");\n\t\tforeach ZoneActors(class'DXEnemy', DXE)\n\t\t\tDXE.Destroy();\n\t\t\n\t}\n\t\n\tPST.Destroy();\n\tbRunning=False;\n\tforeach AllActors(class'PSArenaExitswitch', PSAEx)\n\t\tif(PSAEx.Tag == ExitButtonTag)\n\t\t\tPSAEx.bPSActive=True;\n\tforeach AllActors(class'PSArenaEntryswitch', PSAEn)\n\t\tif(PSAEn.Tag == EntryButtonTag)\n\t\t\tPSAEn.bPSActive=True;\t\n\tforeach AllActors(class'PSArenaStartswitch', PSAEs)\n\t\tif(PSAEs.Tag == StartButtonTag)\n\t\t\tPSAEs.bPSActive=True;\n}\n\ndefaultproperties\n{\n}\n",
            "name": "PSArenaZone.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "ZoneInfo",
                "functions": {
                    "BeginMatch": {
                        "body": "{\n\n\tBroadcastMessage(\"Beginning match with \"$CountPlayers()$\" players!\");\n\tPST = Spawn(class'PSArenaTimer');\n\tPST.SetTimer(5,False);\n\tPST.Zoney = Self;\n\t\t\n\tforeach AllActors(class'PSArenaExitswitch', PSAEx)\n\t\tif(PSAEx.Tag == ExitButtonTag)\n\t\t\tPSAEx.bPSActive=False;\n\tforeach AllActors(class'PSArenaEntryswitch', PSAEn)\n\t\tif(PSAEn.Tag == EntryButtonTag)\n\t\t\tPSAEn.bPSActive=False;\t\n\n}",
                        "locals": [
                            "local PSArenaExitSwitch PSAEx;",
                            "local PSArenaEntrySwitch PSAEn;"
                        ],
                        "modifiers": [],
                        "name": "BeginMatch",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "CountEnemy": {
                        "body": "{\n\tforeach ZoneActors(class'DXEnemy', DXP)\n\t\ti++;\n\t\t\n\treturn i;\n}",
                        "locals": [
                            "local int i;",
                            "local DXEnemy DXP;"
                        ],
                        "modifiers": [],
                        "name": "CountEnemy",
                        "native": false,
                        "param": [],
                        "return": "int"
                    },
                    "CountPlayers": {
                        "body": "{\n\tforeach ZoneActors(class'DeusExPlayer', DXP)\n\t\tif(!DXP.IsInState('Spectating'))\n\t\t\ti++;\n\t\t\n\treturn i;\n}",
                        "locals": [
                            "local int i;",
                            "local DeusExPlayer DXP;"
                        ],
                        "modifiers": [],
                        "name": "CountPlayers",
                        "native": false,
                        "param": [],
                        "return": "int"
                    },
                    "EndMatch": {
                        "body": "{\n\t\n\trealpay = payout / countplayers();\n\tif(bWon)\n\t{\n\t\tBroadcastMessage(\"Match over! Players win! \"$payout$\" credits split among the players. (\"$realpay$\" each)\");\n\t\tforeach ZoneActors(class'DeusExPlayer', DXP)\n\t\t{\n\t\t\tif(!DXP.IsInState('Spectating'))\n\t\t\t{\n\t\t\t\tDXP.Credits += realpay;\n\t\t\t\tforeach AllActors(class'PSArenaExit', AE)\n\t\t\t\t{\n\t\t\t\t\tDXP.SetCollision(false, false, false);\n\t\t\t\t\tDXP.bCollideWorld = true;\n\t\t\t\t\tDXP.GotoState('PlayerWalking');\n\t\t\t\t\tDXP.SetLocation(AE.location);\n\t\t\t\t\tDXP.SetCollision(true, true , true);\n\t\t\t\t\tDXP.SetPhysics(PHYS_Walking);\n\t\t\t\t\tDXP.bCollideWorld = true;\n\t\t\t\t\tDXP.GotoState('PlayerWalking');\n\t\t\t\t\tDXP.ClientReStart();\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tBroadcastMessage(\"Match over! Players defeated.\");\n\t\tforeach ZoneActors(class'DXEnemy', DXE)\n\t\t\tDXE.Destroy();\n\t\t\n\t}\n\t\n\tPST.Destroy();\n\tbRunning=False;\n\tforeach AllActors(class'PSArenaExitswitch', PSAEx)\n\t\tif(PSAEx.Tag == ExitButtonTag)\n\t\t\tPSAEx.bPSActive=True;\n\tforeach AllActors(class'PSArenaEntryswitch', PSAEn)\n\t\tif(PSAEn.Tag == EntryButtonTag)\n\t\t\tPSAEn.bPSActive=True;\t\n\tforeach AllActors(class'PSArenaStartswitch', PSAEs)\n\t\tif(PSAEs.Tag == StartButtonTag)\n\t\t\tPSAEs.bPSActive=True;\n}",
                        "locals": [
                            "local PSArenaExit AE;",
                            "local DeusExPlayer DXP;",
                            "local DXEnemy DXE;",
                            "local PSArenaExitSwitch PSAEx;",
                            "local PSArenaEntrySwitch PSAEn;",
                            "local PSArenaStartSwitch PSAEs;",
                            "local int realpay;"
                        ],
                        "modifiers": [],
                        "name": "EndMatch",
                        "native": false,
                        "param": [
                            [
                                "bool",
                                "bWon"
                            ]
                        ],
                        "return": ""
                    },
                    "Kombat": {
                        "body": "{\n\tp = Rand(5);\n\t\n\tforeach ZoneActors(class'DeusExPlayer', DXP)\n\t\tDXP.ClientSetMusic( myTrack, SongSection, CdTrack, Transition );\n\tif(p == 0)\n\t\tfor(i=0;i<10;i++)\n\t\t\tforeach AllActors(class'PSArenaSpawner', PSA)\n\t\t\t\tif(PSA.Tag == PSATags[i])\n\t\t\t\t\tSpawn(EnemiesGroupOne[i],,,PSA.Location);\n\tif(p == 1)\n\t\tfor(i=0;i<10;i++)\n\t\t\tforeach AllActors(class'PSArenaSpawner', PSA)\n\t\t\t\tif(PSA.Tag == PSATags[i])\n\t\t\t\t\tSpawn(EnemiesGroupTwo[i],,,PSA.Location);\n\n\tif(p == 2)\n\t\tfor(i=0;i<10;i++)\n\t\t\tforeach AllActors(class'PSArenaSpawner', PSA)\n\t\t\t\tif(PSA.Tag == PSATags[i])\n\t\t\t\t\tSpawn(EnemiesGroupThree[i],,,PSA.Location);\n\t\t\t\t\t\n\tif(p == 3)\n\t\tfor(i=0;i<10;i++)\n\t\t\tforeach AllActors(class'PSArenaSpawner', PSA)\n\t\t\t\tif(PSA.Tag == PSATags[i])\n\t\t\t\t\tSpawn(EnemiesGroupFour[i],,,PSA.Location);\n\t\t\t\t\t\n\tif(p == 4)\n\t\tfor(i=0;i<10;i++)\n\t\t\tforeach AllActors(class'PSArenaSpawner', PSA)\n\t\t\t\tif(PSA.Tag == PSATags[i])\n\t\t\t\t\tSpawn(EnemiesGroupFive[i],,,PSA.Location);\n\t\n\t\tbRunning=True;\n}",
                        "locals": [
                            "local int i;",
                            "local PSArenaSpawner PSA;",
                            "local DeusExPlayer DXP;",
                            "local int p;"
                        ],
                        "modifiers": [],
                        "name": "Kombat",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 161,
                "replication": "",
                "states": [],
                "variables": [
                    "var() int Payout;",
                    "var() bool bRunning;",
                    "var() music myTrack;",
                    "var() EMusicTransition Transition;",
                    "var() byte             SongSection;",
                    "var() byte             CdTrack;",
                    "var() name PSATags[10];",
                    "var() class<DXEnemy> EnemiesGroupOne[10];",
                    "var() class<DXEnemy> EnemiesGroupTwo[10];",
                    "var() class<DXEnemy> EnemiesGroupThree[10];",
                    "var() class<DXEnemy> EnemiesGroupFour[10];",
                    "var() class<DXEnemy> EnemiesGroupFive[10];",
                    "var() name EntryButtonTag, ExitButtonTag, StartButtonTag;",
                    "var PSArenaTimer PST;"
                ]
            }
        },
        "PSComputer.uc": {
            "body": "//=============================================================================\n// ComputerPersonal.\n//=============================================================================\nclass PSComputer extends DeusExDecoration;\n\n//Username is the identifier of this machine, Password is used to execute commands\nvar() string Username, Password;\n//Emails stored on this computer\nvar() string Messages[250];\n//New idea for a like temporary mail used for system stuff\nvar() string Notifications[250];\n//Tag of the PSZoneInfo class used for controlling that zones security\nvar() name ZoneTag;\n//Enable debugging messages\nvar() bool bDebug;\nvar() string Group;\nvar() string InfoProp[16];\n//Stuff thrown at the computer for storage\nvar class<inventory> StoredInv[10]; \n\n//Used for exec command, alias is the command, name is the tag of the event.\nstruct EvStr\n{\nvar() config string EventAlias;\nvar() config name EventName;\n};\nvar(Accounts) config EvStr pEvents[25];\n\nvar vector StoredLocation[10]; //Used for mark/recall\nvar int StoredCredits; //Used for the banking feature.\nvar DeusExPlayer pgUser; //Used to define the owner.\nvar PSComputerHandheld PSC; //Allow remote access, its a usable item that calls the functions from this, it executes frob for the player?\nvar string PrevCommand;\n\nvar float prevdist;\nvar Actor PrevpingA;\n\nvar() bool bCodebreakerEnabled;\nvar string Hax0rs[25];\nvar Actor Hax0rObj;\nvar int Hax0rStep;\nvar string generatedCode;\n\nvar() bool bOverdriver;\nvar string LastWord;\nvar int Stage;\nvar actor ODActor;\n\nvar() bool bFileManager;\nvar string CurFilePath;\nvar Actor FileActor;\n\nfunction bool ParseHack(string Command)\n{\n\tlocal Actor hitActor;\n\tlocal vector loc, line, HitLocation, hitNormal;\n\tlocal DeusExMover      hitMover;\n\tlocal DeusExDecoration hitDecoration;\n\tlocal ScriptedPawn\t\thitPawn;\n\tlocal DeusExPlayer\thitPlayer;\n\n\t\tif(Hax0rObj != None)\n\t\t{\n\t\t\thitMover = DeusExMover(Hax0rObj);\n\t\t\thitPawn = ScriptedPawn(Hax0rObj);\n\t\t\thitDecoration = DeusExDecoration(Hax0rObj);\n\t\t\thitPlayer = DeusExPlayer(Hax0rObj);\n\t\t\tif (hitMover != None)\n\t\t\t{\n\t\t\t\tif(Hax0rStep == 0)\n\t\t\t\t{\n\t\t\t\t\tif(Command ~= \"debug()\")\n\t\t\t\t\t{\n\t\t\t\t\t\tHax0rStep=1;\n\t\t\t\t\t\txAlert(\"Door\", \"event<<rundebug()|ncout>>'Debug mode enabled.'|n|nAny incorrect commands will end the session.|nhelp() for assistance.|nexit() to end session. (Menu will not close, must be closed manually.)\");\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\telse if(Command ~= \"exit()\")\n\t\t\t\t\t{\n\t\t\t\t\t\tEndHack();\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\tFailHack();\n\t\t\t\t}\n\t\t\t\tif(Hax0rStep == 1)\n\t\t\t\t{\n\t\t\t\t\tif(Command ~= \"help()\")\n\t\t\t\t\t{\n\t\t\t\t\t\txAlert(\"Door\", \">>> ELECTRONIC_DOOR (DEBUG)|ndebug() override() dumpcodes() exit()\");\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\telse if(Command ~= \"debug()\")\n\t\t\t\t\t{\n\t\t\t\t\t\txAlert(\"Door\", \">>> ELECTRONIC_DOOR (DEBUG)|nDebug mode already active.|n<<ERROR\");\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\telse if(Command ~= \"Override()\")\n\t\t\t\t\t{\n\t\t\t\t\t\txAlert(\"Door\", \">>> ELECTRONIC_DOOR (DEBUG)|nActivating override mode.|n>>cancel() to return to debug menu|n>>ELSE Input override code.\");\n\t\t\t\t\t\tHax0rStep = 2;\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\telse if(Command ~= \"exit()\")\n\t\t\t\t\t{\n\t\t\t\t\t\tEndHack();\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\tFailHack();\n\t\t\t\t}\n\t\t\t\tif(Hax0rStep == 2)\n\t\t\t\t{\n\t\t\t\t\tif(Command ~= \"cancel()\")\n\t\t\t\t\t{\n\t\t\t\t\t\txAlert(\"Door\", \">>>Returning to debugging.\");\n\t\t\t\t\t\tHax0rStep = 1;\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\telse if(Command ~= generatedCode)\n\t\t\t\t\t{\n\t\t\t\t\t\txAlert(\"Door\", \">>> ELECTRONIC_DOOR (DEBUG)|nCode accepted.|nOverride mode enabled.|nEnter properties to modify.|nexit() to quit.\");\n\t\t\t\t\t\tHax0rStep = 3;\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\telse FailHack();\n\t\t\t\t}\n\t\t\t\tif(Hax0rStep == 3)\n\t\t\t\t{\n\t\t\t\t\tif(Command ~= \"exit()\")\n\t\t\t\t\t\tEndHack();\n\t\t\t\t\telse if(Command ~= \"open()\")\n\t\t\t\t\t\thitMover.Trigger(pgUser, pgUser);\n\t\t\t\t\t/*else if( hitMover.GetPropertyText(caps(Command)) != \"\")\n\t\t\t\t\t{\n\t\t\t\t\t\tHax0rStep=4;\n\t\t\t\t\t}*/\n\t\t\t\t\telse\n\t\t\t\t\txAlert(\"Door\", \"Error in property...\");\n\t\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (hitPawn != None)\n\t\t\t{\n\t\t\t\tif(Hax0rStep == 0)\n\t\t\t\t{\n\t\t\t\t\tif(Command ~= \"debug()\")\n\t\t\t\t\t{\n\t\t\t\t\t\tHax0rStep++;\n\t\t\t\t\t\tpgUser.ClientMessage(\"event>>rundebug()\");\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\tFailHack();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (hitDecoration != None)\n\t\t\t{\n\t\t\t\tif(Hax0rStep == 0)\n\t\t\t\t{\n\t\t\t\t\tif(Command ~= \"debug()\")\n\t\t\t\t\t{\n\t\t\t\t\t\tHax0rStep++;\n\t\t\t\t\t\tpgUser.ClientMessage(\"event>>rundebug()\");\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\tFailHack();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (hitPlayer != None)\n\t\t\t{\n\t\t\t\tif(Hax0rStep == 0)\n\t\t\t\t{\n\t\t\t\t\tif(Command ~= \"debug()\")\n\t\t\t\t\t{\n\t\t\t\t\t\tHax0rStep++;\n\t\t\t\t\t\tpgUser.ClientMessage(\"event>>rundebug()\");\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\tFailHack();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\txAlert(\"ERROR\", \"Script failed... No object\");\n}\n\nfunction FailHack()\n{\n\tlocal int i;\n\t\n\tpgUser.TakeDamage(100, Pawn(Owner), Owner.Location, Vect(0,0,0), 'EMP');\n\tHax0rObj = None;\n\tHax0rStep = 0;\n\tfor(i=0;i<25;i++)\n\t\tHax0rs[i] = \"\";\n}\n\nfunction EndHack()\n{\n\tlocal int i;\n\t\n\tHax0rObj = None;\n\tHax0rStep = 0;\n\tfor(i=0;i<25;i++)\n\t\tHax0rs[i] = \"\";\n\t\n}\n\nfunction bool ParseCommand(deusexplayer p, string inputPassword, string Command)\n{\n\tlocal string mailstring, sendstring, target, msg;\n\tlocal int mailint,i, b;\n\tlocal bool bPassedCommand, bPassedMail, bFound;\n\tlocal actor a;\n\tlocal bool bSkipPass;\n\tlocal PSComputerReplicationActor f;\n\tlocal MenuUIMessageBoxWindow mes;\n\tlocal PSComputerHandheld toolz;\n\tlocal PSComputer PSComp;\n\tlocal Actor hitActor;\n\tlocal vector loc, line, HitLocation, hitNormal;\n\tlocal string redcode;\n\t\n\tif(bDebug)\n\t{\n\t\tLog(p.playerreplicationinfo.playername@username@inputpassword@command);\n\t\tP.ClientMessage(p.playerreplicationinfo.playername@username@inputpassword@command);\n\t}\n\t\n\tif(pgUser == P)\n\t{\n\t\tbSkipPass=True;\n\t}\n\t\t\n\tif(!bSkipPass && inputPassword != Password)\n\t{\n\t\txAlert(\"Alert\",\"ERROR: Incorrect password.\", p);\n\t\treturn false;\n\t}\n\t\n\tif(pgUser != P)\n\t{\n\t\tP.PlaySound(sound'Auth',,,, 256);\n\t\tpgUser = P;\n\t\tP.ClientMessage(\"Synced to computer.\");\n\t}\n\t\n\tif(Command == \"\" && PrevCommand != \"\")\n\t{\n\t\tParseCommand(pgUser, Password, PrevCommand);\n\t\treturn true;\n\t}\n\t\t\n\tPrevCommand = Command;\n\t\n\tif(Left(command,7) ~= \"redeem \")\n\t{\n\t\tmailstring = Right(command, Len(command)-instr(command,\"redeem \")-Len(\"redeem \"));\n\t\tif(mailstring == \"wtfhax0rftw\" && !bCodebreakerEnabled)\n\t\t{\n\t\t\tbCodebreakerEnabled = True;\n\t\t\tredcode = \"_codebreaker (script.dat)|n [WARNING: This package is in testing and may not function properly.|nFunctionality may also change over time.] \";\n\t\t\t\n\t\t}\n\n\t\tif(mailstring == \"overdose\" && !bOverdriver)\n\t\t{\n\t\t\tbOverdriver = True;\n\t\t\tredcode = \"_overdriver (overdriver.dat)|n [WARNING: This package is in testing and may not function properly.|nFunctionality may also change over time.] \";\n\t\t\t\n\t\t}\n\n\t\tif(mailstring == \"boxx\" && !bFileManager)\n\t\t{\n\t\t\tbFileManager = True;\n\t\t\tredcode = \"_fileman (files.dat)|n [WARNING: This package is in testing and may not function properly.|nFunctionality may also change over time.] \";\n\t\t\t\n\t\t}\n\t\t\t\t\t\t\n\t\tif(redcode != \"\")\n\t\t\txAlert(\"Redeemer\", \"Code redeemed successfully.|nThis code has activated the following system: \"$redcode$\"|nUse Help to access the info for the newly activated packages.\");\n\t\telse\n\t\txAlert(\"Error\", \"Code invalid or already redeemed.\");\n\t\tbPassedCommand=True;\n\t\treturn true;\n\t}\n\t\n\tif(command ~= \"script\")\n\t{\n\t\tif(bCodebreakerEnabled)\n\t\t{\n\t\t\tpgUser.PlaySound(sound'PhoneVoice3');\n\t\t\t\tloc = pgUser.Location;\n\t\t\t\tloc.Z += pgUser.BaseEyeHeight;\n\t\t\t\tline = Vector(pgUser.ViewRotation) * 4000;\n\t\t\t\thitActor = Trace(hitLocation, hitNormal, loc+line, loc, true);\n\t\t\t\tif(Hax0rObj == hitActor && !hitActor.isA('LevelInfo')) //Resuming?\n\t\t\t\t{\n\t\t\t\t\txHack();\n\t\t\t\t}\n\t\t\t\telse if(hitActor != None && !hitActor.isA('LevelInfo')) //NewHack\n\t\t\t\t{\n\t\t\t\t\tHax0rStep=0;\n\t\t\t\t\tfor(i=0;i<25;i++)\n\t\t\t\t\t\tHax0rs[i] = \"\";\n\t\t\t\t\txHack();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\txAlert(\"ERROR\", \"Script failed, no object found.\");\n\t\t}\n\t\telse xAlert(\"Error\", \"Your computer does not have the relevant access or software to perform this task.|nContact an administrator for assistance.\");\n\t\t\n\t\tbPassedCommand=True;\n\t\treturn true;\n\t}\n\n\tif(command ~= \"overdriver\")\n\t{\n\t\tif(bOverdriver)\n\t\t{\n\t\t\tpgUser.PlaySound(sound'PhoneVoice3');\n\t\t\t\tloc = pgUser.Location;\n\t\t\t\tloc.Z += pgUser.BaseEyeHeight;\n\t\t\t\tline = Vector(pgUser.ViewRotation) * 4000;\n\t\t\t\thitActor = Trace(hitLocation, hitNormal, loc+line, loc, true);\n\n\t\t\t\tif(hitActor != None && !hitActor.isA('LevelInfo')) //NewHack\n\t\t\t\t{\n\t\t\t\t\tLastWord = \"\";\n\t\t\t\t\tODActor = hitActor;\n\t\t\t\t\txOD();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\txAlert(\"ERROR\", \"Script failed, no object found.\");\n\t\t}\n\t\telse xAlert(\"Error\", \"Your computer does not have the relevant access or software to perform this task.|nContact an administrator for assistance.\");\n\t}\n\n\tif(command ~= \"files\")\n\t{\n\t\tif(bFileManager)\n\t\t{\n\t\t\tpgUser.PlaySound(sound'PhoneVoice3');\n\t\t\t\tloc = pgUser.Location;\n\t\t\t\tloc.Z += pgUser.BaseEyeHeight;\n\t\t\t\tline = Vector(pgUser.ViewRotation) * 4000;\n\t\t\t\thitActor = Trace(hitLocation, hitNormal, loc+line, loc, true);\n\t\t\t\tif(FileActor == hitActor && !hitActor.isA('LevelInfo')) //Resuming?\n\t\t\t\t{\n\t\t\t\t\txFileMan();\n\t\t\t\t}\n\t\t\t\telse if(hitActor != None && !hitActor.isA('LevelInfo')) //NewHack\n\t\t\t\t{\n\t\t\t\t\tFileActor=hitActor;\n\t\t\t\t\tCurFilePath=\"/\";\n\t\t\t\t\txFileMan();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\txAlert(\"ERROR\", \"Script failed, no object found.\");\n\t\t}\n\t\telse xAlert(\"Error\", \"Your computer does not have the relevant access or software to perform this task.|nContact an administrator for assistance.\");\n\t}\n\t\t\n\tif(command ~= \"me\")\n\t{\n\t\txAlert(Username,myData());\n\t\tbPassedCommand=True;\n\t\treturn true;\n\t}\n\tif(Left(command,6) ~= \"group \")\n\t{\n\t\tmailstring = Right(command, Len(command)-instr(command,\"group \")-Len(\"group \"));\n\t\tSetGroup(mailstring);\n\t\tbPassedCommand=True;\n\t\treturn true;\n\t}\n\t\n\tif(Left(command,5) ~= \"group\")\n\t{\n\t\tListComps(True);\n\t\tbPassedCommand=True;\n\t\treturn true;\n\t}\n\t\t\n\tif(Left(command,4) ~= \"info\")\n\t{\n\t\txAlert(pgUser.PlayerReplicationInfo.PlayerName$\" info\", InfoChk());\n\t\tbPassedCommand=True;\n\t\treturn true;\n\t}\n\t\n\tif(Left(command,5) ~= \"ping \")\n\t{\n\t\tmailstring = Right(command, Len(command)-instr(command,\"ping \")-Len(\"ping \"));\n\t\tPingLoc(mailstring);\n\t\tbPassedCommand=True;\n\t\treturn true;\n\t}\n\t\t\n\tif(Left(command,3) ~= \"chk\")\n\t{\n\t\tListNotif();\n\t\tbPassedCommand=True;\n\t\treturn true;\n\t}\n\t\n\tif(Left(command,5) ~= \"help \")\n\t{\n\t\tbPassedCommand=True;\n\t\tmailstring = Right(command, Len(command)-instr(command,\"help \")-Len(\"help \"));\n\t\tif(mailstring ~= \"handheld\")\n\t\t\txAlert(\"Help\", \"Gives the Handheld Computer item which allows you to remotely access this computer.\");\n\t\telse if(mailstring ~= \"recall\")\n\t\t\txAlert(\"Help\", \"|P1Format: recall <number referring to the slot number>|n|P2Teleports you to that location.\");\n\t\telse if(mailstring ~= \"mark\")\n\t\t\txAlert(\"Help\", \"|P1Format: mark <number referring to the slot number>|n|P2Saves your current location in the slot number which is called by the recall command.|n|P7Best used from the handheld computer.\");\n\t\telse if(mailstring ~= \"dbg\")\n\t\t\txAlert(\"Help\", \"Toggles debugging messages.\");\n\t\telse if(mailstring ~= \"togglesec\")\n\t\t\txAlert(\"Help\", \"Toggles the Drone Security system.|n|P7Requires the Zone to be configured.\");\n\t\telse if(mailstring ~= \"togglealert\")\n\t\t\txAlert(\"Help\", \"Toggles the Drone Security system notifications, which alerts you if someone enters..|n|P7Requires the Zone to be configured.\");\n\t\telse if(mailstring ~= \"cred+\")\n\t\t\txAlert(\"Help\", \"|P1Format: cred+<number referring to the amount of credits>|n|P2Deposits credits in to the computer.\");\n\t\telse if(mailstring ~= \"cred-\")\n\t\t\txAlert(\"Help\", \"|P1Format: cred-<number referring to the amount of credits>|n|P2Withdraws credits from the computer.\");\n\t\telse if(mailstring ~= \"give\")\n\t\t\txAlert(\"Help\", \"|P1Format: give <number referring to the slot the object is in>|n|P2Withdraws the item from the computer.|n|P7Items are stored by throwing them at the computer.|nThe alert tells you which slot it saves to.|nThe item is not deleted. Refer to Clearitem.\");\n\t\telse if(mailstring ~= \"clearitem\")\n\t\t\txAlert(\"Help\", \"|P1Format: clearitem <number referring to the slot the object is in>|n|P2Removes the item from the computer.|n|P7Items are stored by throwing them at the computer.|nThe alert tells you which slot it saves to.\");\n\t\telse if(mailstring ~= \"setusername\")\n\t\t\txAlert(\"Help\", \"|P1Format: setusername <new username>|n|P2Sets this computers username.\");\n\t\telse if(mailstring ~= \"setpass\")\n\t\t\txAlert(\"Help\", \"|P1Format: setpass <new password>|n|P2Sets this computers password.\");\n\t\telse if(mailstring ~= \"alert\")\n\t\t\txAlert(\"Help\", \"|P1Format: alert <string>|n|P2Prints a message on screen.\");\n\t\telse if(mailstring ~= \"exec\")\n\t\t\txAlert(\"Help\", \"|P1Format: exec <string related to the alias stored>|n|P2Executes the command stored in the memory. |nUse getexec cmmand to show the list of current commands.\");\n\t\telse if(mailstring ~= \"mail\")\n\t\t\txAlert(\"Help\", \"|P1Format: mailsend <username> <message>: |P2Sends email to the computer labeled that username.|nmailread <number>: Reads mail in that slot.|nmaildel <number>: Deletes mail in that slot.|nmailclear, maillist, mailcount.|nmailgroup sends to your group.\");\n\t\telse if(mailstring ~= \"me\")\n\t\t\txAlert(\"Help\", \"|P1Format: me: |P2Shows basic computer information.\");\n\t\telse if(mailstring ~= \"ping\")\n\t\t\txAlert(\"Help\", \"|P1Format: ping <tag>: |P2Gives location to X object.\");\n\t\telse if(mailstring ~= \"script\" && bCodebreakerEnabled)\n\t\t\txAlert(\"Help\", \"|P1Format: script: |P2Enables script input for targetted object. [WIP]\");\n\t\telse if(mailstring ~= \"overdriver\" && bOverdriver)\n\t\t\txAlert(\"Help\", \"|P1Format: overdriver: |P2Dictionary override input for targetted object. [WIP]|nOverloads the target objects by brute forcing passwords.|nGives one word, enter another word that's first letter is the last words last letter.|ne.g. worm -> master -> rekked\");\n\t\telse if(mailstring ~= \"files\" && bFileManager)\n\t\t\txAlert(\"Help\", \"|P1Format: files: |P2Enables file manager for targetted object. [WIP]|nBrowser is command-line based.|nBrowser starts at ROOT:/|nCommands: list, cd, open\");\n\t\telse xAlert(\"Help\", \"Could not find searched command.\");\n\t\treturn true;\n\t\t\n\t}\t\n\t\n\tif(Left(command,4) ~= \"help\")\n\t{\n\t\tif(bCodebreakerEnabled)\n\t\t\tredcode = redcode$\" script\";\n\t\tif(bFileManager)\n\t\t\tredcode = redcode$\" files\";\n\t\tif(bOverdriver)\n\t\t\tredcode = redcode$\" overdriver\";\n\t\t\n\t\tif(redcode == \"\")\n\t\t\tredcode = \"NONE\";\n\t\t\t\n\t\txAlert(\"Help Topics\",\"handheld, recall, mark, dbg, togglesec, togglealert, cred+, cred-|n give, clearitem, setusername, setpass, alert, exec, mail, invs, locs, comps, group|nme, ping|n|P4EXTRA PACKAGES: \"$redcode);\n\t\tbPassedCommand=True;\n\t\treturn true;\n\t}\n\t\t\n\tif(Left(command,8) ~= \"handheld\")\n\t{\n\t\tGiveTool();\n\t\txAlert(\"Alert\",\"Given the Handheld tool.\");\n\t\tbPassedCommand=True;\n\t\treturn true;\n\t}\n\n\tif(Left(command,7) ~= \"recall \")\n\t{\n\t\tmailint = int(Right(command, Len(command)-instr(command,\"recall \")-Len(\"recall \")));\n\t\tif(StoredLocation[mailint] != vect(0,0,0))\n\t\t{\n\t\t\t\tpgUser.SetCollision(false, false, false);\n\t\t\t\tpgUser.bCollideWorld = true;\n\t\t\t\tpgUser.GotoState('PlayerWalking');\n\t\t\t\tpgUser.SetLocation(StoredLocation[mailint]);\n\t\t\t\tpgUser.SetCollision(true, true , true);\n\t\t\t\tpgUser.SetPhysics(PHYS_Walking);\n\t\t\t\tpgUser.bCollideWorld = true;\n\t\t\t\tpgUser.GotoState('PlayerWalking');\n\t\t\t\tpgUser.ClientReStart();\n\t\t\t\txAlert(\"Alert\",\"Sent to location.\");\n\t\t}\n\t\t\n\t\tbPassedCommand=True;\n\t\treturn true;\n\t}\n\t\n\tif(Left(command,5) ~= \"mark \")\n\t{\t\n\t\tmailint = int(Right(command, Len(command)-instr(command,\"mark \")-Len(\"mark \")));\n\t\t\n\t\tStoredLocation[mailint] = pgUser.Location;\n\t\txAlert(\"Alert\",\"Marked location.\");\n\t\tbPassedCommand=True;\n\t\treturn true;\n\t}\n\t\n\tif(Left(command,3) ~= \"dbg\")\n\t{\n\t\tbDebug = !bDebug;\n\t\txAlert(\"Alert\",\"Debug is now \"$bDebug$\".\");\n\t\tbPassedCommand=True;\n\t\treturn true;\n\t}\n\t\n\tif(Left(command,4) ~= \"test\")\n\t{\n\t\txAlert(\"Alert\",\"Tested.\");\n\t\tbPassedCommand=True;\n\t\treturn true;\n\t}\n\t\n\tif(Left(command,5) ~= \"comps\")\n\t{\n\t\tListComps();\n\t\tbPassedCommand=True;\n\t\treturn true;\n\t}\n\t\n\tif(Left(command,4) ~= \"locs\")\n\t{\n\t\tListLocs();\n\t\tbPassedCommand=True;\n\t\treturn true;\n\t}\n\t\n\tif(Left(command,4) ~= \"invs\")\n\t{\n\t\tListInv();\n\t\tbPassedCommand=True;\n\t\treturn true;\n\t}\t\n\t\n\tif(Left(command,9) ~= \"togglesec\")\n\t{\n\t\tToggleSecurity(P);\n\t\tbPassedCommand=True;\n\t\treturn true;\n\t}\n\t\n\tif(Left(command,11) ~= \"togglealert\")\n\t{\n\t\tToggleAlert(P);\n\t\tbPassedCommand=True;\n\t\treturn true;\n\t}\n\t\n\tif(Left(command,5) ~= \"cred+\")\n\t{\n\t\tmailint = int(Right(command, Len(command)-instr(command,\"cred+\")-Len(\"cred+\")));\n\t\tbPassedCommand=True;\n\t\t\n\t\tif(mailint == -1)\n\t\t{\n\t\t\tStoredCredits += pgUser.Credits;\n\t\t\tpgUser.Credits = 0;\n\t\t\txalert(\"Alert\", \"All credits deposited.|n\"$StoredCredits$\" currently stored.\");\n\t\t}\n\t\tif(pgUser.Credits >= mailint)\n\t\t{\n\t\t\tpgUser.Credits -= mailint;\n\t\t\tStoredCredits += mailint;\n\t\t\txalert(\"Alert\", mailint$\" credits deposited.|n\"$StoredCredits$\" currently stored.\");\n\t\t}\n\t\telse\n\t\t\txalert(\"Alert\", \"You don't have enough.\");\n\t\treturn true;\n\t}\n\t\n\tif(Left(command,5) ~= \"cred-\")\n\t{\n\t\tmailint = int(Right(command, Len(command)-instr(command,\"cred-\")-Len(\"cred-\")));\n\t\tbPassedCommand=True;\n\t\t\n\t\tif(mailint == -1)\n\t\t{\n\t\t\tpgUser.Credits += StoredCredits;\n\t\t\tStoredCredits = 0;\n\t\t\txalert(\"Alert\", \"All credits withdrawn.|n\"$pgUser.Credits$\" currently held.\");\n\t\t}\n\t\tif(StoredCredits >= mailint)\n\t\t{\n\t\t\tStoredCredits -= mailint;\n\t\t\tpgUser.Credits += mailint;\n\t\t\txalert(\"Alert\", mailint$\" credits withdrawn.|n\"$pgUser.Credits$\" currently held.\");\n\t\t}\n\t\telse\n\t\t\txalert(\"Alert\", \"You don't have enough.\");\n\t\treturn true;\n\t}\t\n\t\n\tif(Left(command,5) ~= \"give \")\n\t{\n\t\tmailint = int(Right(command, Len(command)-instr(command,\"give \")-Len(\"give \")));\n\t\tbPassedCommand=True;\n\t\tif(StoredInv[mailint] != None)\n\t\t{\n\t\t\tSilentAdd(StoredInv[mailint],pgUser);\n\t\t\tbFound=True;\n\t\t}\n\n\t\tif(bFound)\n\t\t\txalert(\"Alert\", mailint@StoredInv[mailint]$\" withdrawn.\");\n\t\telse\n\t\t\txalert(\"Alert\", \"Slot is empty.\");\n\t\treturn true;\n\t}\n\t\n\tif(Left(command,10) ~= \"clearitem \")\n\t{\n\t\tmailint = int(Right(command, Len(command)-instr(command,\"clearitem \")-Len(\"clearitem \")));\n\t\tbPassedCommand=True;\n\t\tif(StoredInv[mailint] != None)\n\t\t{\n\t\t\tSilentAdd(StoredInv[mailint],pgUser);\n\t\t\tbFound=True;\n\t\t}\n\n\t\tif(bFound)\n\t\t\txalert(\"Alert\", mailint$\" cleared.\");\n\t\telse\n\t\t\txalert(\"Alert\", \"Slot is already empty.\");\n\t\treturn true;\n\t}\t\n\t\n\tif(Left(command,6) ~= \"alarm \")\n\t{\n\t\tbPassedCommand=True;\n\t\tmailstring = Right(command, Len(command)-instr(command,\"alarm \")-Len(\"alarm \"));\n\t\tif(bDebug)\n\t\t\tlog(\"alarm:\"@mailstring);\n\t\t\t\n\t\tif(instr(caps(mailstring), caps(\":\")) != -1)\n\t\t{\n\t\t\txAlert(\"Alarm\",\"[Unfinished command, doesnt yet function]|nSetting alarm for\"@mailstring);\n\t\t\t//SetAlarm(mailstring);\n\t\t}\n\t\telse\n\t\t{\n\t\t\txAlert(\"Alarm\",\"Alarm string is badly formatted. Accepted format is HOUR:MINUTE.\");\n\t\t}\n\t\t\t\n\t}\n\t\n\tif(Left(command,12) ~= \"setusername \")\n\t{\n\t\tbPassedCommand=True;\n\t\tmailstring = Right(command, Len(command)-instr(command,\"setusername \")-Len(\"setusername \"));\n\t\tif(bDebug)\n\t\t\tlog(\"setuser:\"@mailstring);\n\t\t\t\n\t\t\tforeach AllActors(class'PSComputer',PSComp)\n\t\t\t\tPSComp.Notif(username$\" changed their username to \"$mailstring);\n\t\t\txAlert(\"Info\", \"Setting username...|nPrevious: \"$Username$\"|nNew: \"$mailstring);\n\t\t\tUsername = mailstring;\n\t\t\t\n\t}\n\t\n\tif(Left(command,8) ~= \"setpass \")\n\t{\n\t\tbPassedCommand=True;\n\t\tmailstring = Right(command, Len(command)-instr(command,\"setpass \")-Len(\"setpass \"));\n\t\tif(bDebug)\n\t\t\tlog(\"setpass:\"@mailstring);\n\t\t\t\n\t\t\txAlert(\"Info\", \"Setting Password...|nPrevious: \"$Password$\"|nNew: \"$mailstring);\n\t\t\tPassword = mailstring;\n\t\t\t\n\t}\n\t\t\n\tif(Left(command,6) ~= \"alert \")\n\t{\n\t\tbPassedCommand=True;\n\t\tmailstring = Right(command, Len(command)-instr(command,\"alert \")-Len(\"alert \"));\n\t\tif(bDebug)\n\t\t\tlog(\"alert:\"@mailstring);\n\n\t\t\txAlert(\"Test\", mailstring);\n\t\t\t\n\t}\n\t\n\tif(Left(command,5) ~= \"exec \")\n\t{\n\t\tbPassedCommand=True;\n\t\tmailstring = Right(command, Len(command)-instr(command,\"exec \")-Len(\"exec \"));\n\t\tif(bDebug)\n\t\t\tlog(\"exec:\"@mailstring);\n\t\t\n\t\tfor(i=0;i<25;i++)\n\t\t{\n\t\t\tif(mailstring ~= pEvents[i].EventAlias)\n\t\t\t{\n\t\t\t\tforeach AllActors(class'Actor', A)\n\t\t\t\t{\n\t\t\t\t\tif(A.Tag == pEvents[i].EventName)\n\t\t\t\t\t{\n\t\t\t\t\t\tb++;\n\t\t\t\t\t\tA.Trigger(self,pgUser);\n\t\t\t\t\t\t//pgUser.ClientMessage(pEvents[i].EventAlias$\" triggered.\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\txAlert(\"Alert\",b$\" events triggered for \"$mailstring);\n\t}\n\t\n\tif(Left(command,4) ~= \"mail\") //Add list to show all, and count to show how many\n\t{\n\t\tbPassedCommand=True;\n\t\t//mailstring is everything after mail, format mailsend x, mailread x\n\t\tmailstring = Right(command, Len(command)-instr(command,\"mail\")-Len(\"mail\"));\n\t\tif(bDebug)\n\t\t\tlog(\"mailer\"@mailstring);\n\t\tif(Left(mailstring,6) ~= \"group \")\n\t\t{\n\t\t\t//sendstring is everything after send, mailsend xxxxx\n\t\t\tmsg = Right(mailstring, Len(mailstring)-instr(mailstring,\"group \")-Len(\"group \"));\n\t\t\tbPassedMail=True;\n\t\t\tGroupMail(msg);\n\t\t\treturn true;\n\t\t}\n\t\tif(Left(mailstring,5) ~= \"send \")\n\t\t{\n\t\t\t//sendstring is everything after send, mailsend xxxxx\n\t\t\tmsg = Right(mailstring, Len(mailstring)-instr(mailstring,\"send \")-Len(\"send \"));\n\t\t\tbPassedMail=True;\n\t\t\tSendMail(msg);\n\t\t\treturn true;\n\t\t}\n\t\tif(Left(mailstring,5) ~= \"read \")\n\t\t{\n\t\t\tmailint = int(Right(mailstring, Len(mailstring)-instr(mailstring,\"read \")-Len(\"read \")));\n\t\t\tbPassedMail=True;\n\t\t\t//p.clientmessage(ReadMail(mailint));\n\t\t\txalert(\"Mail\", readmail(mailint));\n\t\t\treturn true;\n\t\t}\n\t\tif(Left(mailstring,4) ~= \"del \")\n\t\t{\n\t\t\tmailint = int(Right(mailstring, Len(mailstring)-instr(mailstring,\"del \")-Len(\"del \")));\n\t\t\tbPassedMail=True;\n\t\t\tDelMail(mailint);\n\t\t\treturn true;\n\t\t}\n\t\tif(Left(mailstring,5) ~= \"clear\")\n\t\t{\n\t\t\tClearMail();\n\t\t\tbPassedMail=True;\n\t\t\treturn true;\n\t\t}\n\t\tif(Left(mailstring,4) ~= \"list\")\n\t\t{\n\t\t\tListMail();\n\t\t\tbPassedMail=True;\n\t\t\treturn true;\n\t\t}\t\n\t\n\t\tif(!bPassedMail)\n\t\t\txalert(\"Mail\", \"Mailer function not recognized.\");\n\t}\n\tif(!bPassedCommand)\n\txalert(\"Error\", \"Command not recognized.\");\n}\n\nfunction Bump(actor Other)\n{\n\tlocal int i;\n\t\n\tif(Inventory(Other) != None)\n\t{\n\t\tfor(i=0;i<10;i++)\n\t\t{\n\t\t\tif(StoredInv[i] == None)\n\t\t\t{\n\t\t\t\txAlert(\"Alert\",Inventory(Other).itemName$\" stored in slot \"$i);\n\t\t\t\tStoredInv[i] = Inventory(Other).class;\n\t\t\t\tOther.Destroy();\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n}\n\nfunction string myData()\n{\n\treturn \"Notifications: \"$CountNotif()$\"|nMail: \"$CountMail(True)$\"/\"$CountMail()$\"|nCredits \"$StoredCredits;\n}\n\nfunction string InfoChk()\n{\n\tlocal string str;\n\tlocal int k;\n\tstr = \"INFO\";\n\tfor(k=0;k<16;k++)\n\t{\n\t\tif(InfoProp[k] != \"\")\n\t\t{\n\t\t\tif(k==4 || k==8)\n\t\t\t\tstr = str$\", \"$InfoProp[k]$\"=\"$pgUser.GetPropertyText(InfoProp[k])$\"|n\";\n\t\t\telse\n\t\t\t\tstr = str$\", \"$InfoProp[k]$\"=\"$pgUser.GetPropertyText(InfoProp[k]);\n\t\t}\n\t}\n\treturn str;\n}\n\nfunction string GRNFT(string in) //Get Readable Name From Tag\n{\n\tlocal Actor A;\n\tforeach AllActors(class'Actor', A)\n\t\tif(string(A.Tag) == in)\n\t\t{\n\t\t\tif(DeusExDecoration(A) != None)\n\t\t\t\treturn DeusExDecoration(A).itemName;\n\t\t\telse if(Inventory(A) != None)\n\t\t\t\treturn Inventory(A).itemName;\n\t\t\telse if(ScriptedPawn(A) != None)\n\t\t\t\treturn ScriptedPawn(A).FamiliarName;\n\t\t\telse if(DeusExPlayer(A) != None)\n\t\t\t\treturn DeusExPlayer(A).PlayerReplicationInfo.PlayerName;\n\t\t\telse return in;\n\t\t}\n}\nfunction PingLoc(string ident)\n{\n\tlocal PSComputer PST;\n\tlocal int k;\n\tlocal string str;\n\tlocal float dist;\n\tlocal string disttype;\n\tlocal Actor A;\n\t\n\t\tforeach AllActors(class'Actor',A)\n\t\t{\n\t\t\tif(string(a.Tag) ~= ident)\n\t\t\t{\n\t\t\t\tif(PrevPingA == A) //Repinging same actor\n\t\t\t\t{\n\t\t\t\t\tdist = VSize(a.Location - pgUser.Location);\n\t\t\t\t\tif(PrevDist != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(PrevDist > dist)\n\t\t\t\t\t\t\tdisttype=\"(\"$dist$\" - Closer than before)\";\n\t\t\t\t\t\telse if(PrevDist < dist)\n\t\t\t\t\t\t\tdisttype=\"(\"$dist$\" - Further than before)\";\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tdisttype=\"(\"$dist$\" - Same as before)\";\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tdisttype=\"(\"$dist$\")\";\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tPrevDist = dist;\n\t\t\t\t\txAlert(\"Ping\",GRNFT(ident)@disttype);\n\t\t\t\t\tPrevDist = dist;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tPrevPingA = A;\n\t\t\t\t\tPrevDist = VSize(a.Location - pgUser.Location);\n\t\t\t\t\txAlert(\"Ping\", GRNFT(ident)@PrevDist);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t\n\t\t\t}\n\t\t}\t\n}\n\nfunction GiveTool()\n{ \n\tlocal PSComputerHandheld anItem;\n\t\n\tanItem = Spawn(class'PSComputerHandheld',,,pgUser.Location);\n\tanItem.SpawnCopy(pgUser);\n\tanItem.Destroy();\n}\n\nfunction SilentAdd(class<inventory> addClass, optional DeusExPlayer addTarget)\n{ \n\tlocal Inventory anItem;\n\t\n\tanItem = Spawn(addClass,,,addTarget.Location); \n\tanItem.SpawnCopy(addTarget);\n\tanItem.Destroy();\n}\n\nfunction xAlert(string title, string msg, optional DeusExPlayer Target)\n{\n\tlocal PSComputerReplicationactor f;\n\n\tforeach AllActors(class'PSComputerReplicationactor', f)\n\t{\n\t\tif(Target == None)\n\t\t{\n\t\t\tif(f.Flagger == pgUser)\n\t\t\t\tf.cAlert(title, msg);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(f.Flagger == Target)\n\t\t\t\tf.cAlert(title, msg);\n\t\t}\n\t}\n}\n\nfunction xHack()\n{\n\tlocal PSComputerReplicationactor f;\n\n\tforeach AllActors(class'PSComputerReplicationactor', f)\n\t{\n\t\t\tif(f.Flagger == pgUser)\n\t\t\t\tf.cMenuHack();\n\t}\n}\n\nfunction xOD()\n{\n\tlocal PSComputerReplicationactor f;\n\n\t//foreach AllActors(class'PSComputerReplicationactor', f)\n\t\t\t//if(f.Flagger == pgUser)\n\t\t\t\t//f.cMenuOD();\n}\n\nfunction xFileMan()\n{\n\tlocal PSComputerReplicationactor f;\n\n\t//foreach AllActors(class'PSComputerReplicationactor', f)\n\t\t\t//if(f.Flagger == pgUser)\n\t\t\t//\tf.cMenuFiles();\n}\n\nfunction SendMail(string mailstring)\n{\n\tlocal string sendstring, msg, target;\n\tlocal PSComputer PSC;\n\tlocal bool bFound;\n\tpgUser.PlaySound(sound'Send',,,, 256);\n\t//msg is everything after the first space in sendstring, or everything to the right of it\n\tmsg = Right(mailstring, Len(mailstring)-instr(mailstring,\" \")-Len(\" \"));\n\t//Target is everything to the left of the first space, to be the username\n\ttarget = Left(Right(mailstring, Len(mailstring)),InStr(mailstring,\" \"));\n\t//target = Left(sendstring, Len(sendstring)-instr(sendstring,\" \"));\n\tif(bDebug)\n\t{\n\t\tlog(\"mailstring:\"@mailstring);\n\t\tlog(\"Target:\"@target);\n\t\tlog(\"MSG:\"@msg);\n\t}\n\tforeach AllActors(class'PSComputer', PSC)\n\t{\n\t\tif(PSC.Username ~= Target)\n\t\t{\n\t\t\t//pgUser.ClientMessage(\"|P3Message sent!\");\n\t\t\t//pgUser.ClientMessage(Username$\": \"$Msg);\n\t\t\txAlert(\"Mail\",\"|P4Mail sent to \"$Target$\".|P1|n\"$msg);\n\t\t\tLog(Username$\" sent mail to \"$Target$\". (\"$MSG$\")\");\n\t\t\tPSC.AddMail(Username, MSG);\n\t\t\tbFound=True;\n\t\t}\n\t}\n\tif(!bFound)\n\t{\n\t\txAlert(\"Error\", \"|P3Message error: No computer found for that username. [\"$Target$\"]\");\n\t}\n}\n\nfunction SetGroup(string newgroup)\n{\n\tlocal string sendstring, msg, target, str;\n\tlocal PSComputer PSComp;\n\tlocal bool bFound;\n\tlocal int k;\n\t\n\tforeach AllActors(class'PSComputer', PSComp)\n\t\tif(PSComp.Group ~= Group && Group != \"\" && PSComp != Self)\n\t\t\tPSComp.Notif(username$\" left your group! (\"$group$\")\");\n\n\tGroup = newgroup;\n\t\n\tforeach AllActors(class'PSComputer', PSComp)\n\t{\n\t\tif(PSComp.Group ~= Group && PSComp.Group != \"\" && PSComp != Self)\n\t\t{\n\t\t\tk++;\n\t\t\t\n\t\t\tif(k==6 || k==9)\n\t\t\t\tstr = str$\", \"$PSComp.Username$\"|n\";\n\t\t\telse\n\t\t\t\tstr = str$\", \"$PSComp.Username;\n\t\t\t\n\t\t\tPSComp.Notif(username$\" joined your group! (\"$group$\")\");\n\t\t}\n\t}\n\txAlert(\"Group\",\"Joined \"$Group$\".|n\"$str);\n}\n\nfunction GroupMail(string mailstring)\n{\n\tlocal string sendstring, msg, target;\n\tlocal PSComputer PSComp;\n\tlocal bool bFound;\n\tlocal int k;\n\t\n\tpgUser.PlaySound(sound'Send',,,, 256);\n\n\t\n\tforeach AllActors(class'PSComputer', PSComp)\n\t{\n\t\tif(PSComp.Group ~= Group)\n\t\t{\n\t\t\t//pgUser.ClientMessage(\"|P3Message sent!\");\n\t\t\t//pgUser.ClientMessage(Username$\": \"$Msg);\n\t\t\tk++;\n\t\t\tLog(Username$\" sent mail to \"$PSComp.Username$\" via group \"$group$\". (\"$mailstring$\")\");\n\t\t\tPSComp.AddMail(Username$\" (\"$Group$\")\", mailstring);\n\t\t}\n\t}\n\tif(!bFound)\n\t{\n\t\txAlert(\"Error\", \"|P3Message error: Group is empty.\");\n\t}\n\telse\n\t{\n\t\txAlert(\"Mail\",\"|P4Mail sent to group \"$k$\" users in \"$Group$\" group.|P1|n\"$mailstring);\n\t}\n}\n\nfunction AddMail(string User, string Msg)\n{\n\tlocal int i;\n\t\n\tif(pgUser != None)\n\t\txAlert(\"Mail\",\"|P3You have mail!\");\n\tfor(i=0;i<250;i++)\n\t{\n\t\tif(Messages[i] == \"\")\n\t\t{\n\t\t\tMessages[i] = User$\": \"$Msg;\n\t\t\treturn;\n\t\t}\n\t}\n}\n\nfunction Notif(string Msg)\n{\n\tlocal int i;\n\t\n\tif(pgUser != None)\n\t\txAlert(\"Alert\",\"|P3You have new notifications!\");\n\tfor(i=0;i<250;i++)\n\t{\n\t\tif(Notifications[i] == \"\")\n\t\t{\n\t\t\tNotifications[i] = Msg;\n\t\t\treturn;\n\t\t}\n\t}\n}\n\nfunction ListNotif()\n{\n\tlocal int i, k;\n\tlocal string str;\n\t\n\tfor(i=0;i<250;i++)\n\t{\n\t\tif(Notifications[i] != \"\")\n\t\t{\n\t\t\twhile(k < 6)\n\t\t\t{\n\t\t\t\tk++;\n\t\t\t\tstr = str$Notifications[i]$\"|n\";\n\t\t\t\tNotifications[i] = \"\";\n\t\t\t}\n\t\t}\n\t}\n\n\t\n\txAlert(k$\" notifications\",str$\" [END]\");\n}\n\nfunction int CountNotif()\n{\n\tlocal int i, k;\n\n\t\tfor(i=0;i<250;i++)\n\t\t{\n\t\t\tif(Notifications[i] != \"\")\n\t\t\t{\n\t\t\t\tk++;\n\t\t\t}\n\t\t}\n\treturn k;\n}\n\nfunction ClearMail()\n{\n\tlocal int i, k;\n\n\tfor(i=0;i<250;i++)\n\t{\n\t\tif(Messages[i] != \"\")\n\t\t{\n\t\t\tk++;\n\t\t\tMessages[i] = \"\";\n\t\t}\n\t}\n\t\n\txAlert(\"Mail\",k$\" messages deleted.\");\n}\n\nfunction ListLocs()\n{\n\tlocal int i, k;\n\tlocal string str;\n\tfor(i=0;i<10;i++)\n\t{\n\t\tif(StoredLocation[i] != vect(0,0,0))\n\t\t{\n\t\t\tstr = str$\"[\"$i$\"] Yes, \";\n\t\t}\n\t//\telse\n\t\t//{\n\t\t//\tstr = str$\"[\"$i$\"] No, \";\n\t//\t}\n\t}\n\t\n\txAlert(\"Locations\",str$\" [END]\");\n}\n\nfunction ListInv()\n{\n\tlocal int i, k;\n\tlocal string str;\n\tfor(i=0;i<10;i++)\n\t{\n\t\tif(StoredInv[i] != None)\n\t\t{\n\t\t\tk++;\n\t\t\tif(k==3)\n\t\t\t\tstr = str$\"[\"$i$\"] \"$StoredInv[i]$\"|n\";\n\t\t\telse\n\t\t\t\tstr = str$\"[\"$i$\"] \"$StoredInv[i]$\", \";\n\t\t}\n\t}\n\t\n\txAlert(k$\" items\",str$\" [END]\");\n}\n\nfunction ListComps(optional bool bMyGroup)\n{\n\tlocal int k;\n\tlocal string str, inf;\n\tlocal PSComputer PSComp;\n\t\n\tif(!bMyGroup)\n\t{\n\t\tinf = \"[GLOBAL]\";\n\t\tforeach AllActors(class'PSComputer',PSComp)\n\t\t{\n\t\t\tk++;\n\t\t\tif(k==6 || k==9)\n\t\t\t\tstr = str$\", \"$PSComp.Username$\"|n\";\n\t\t\telse\n\t\t\t\tstr = str$\", \"$PSComp.Username;\n\t\t}\n\t}\n\telse\n\t{\n\t\tif(Group != \"\")\n\t\t{\n\t\t\tinf = \"[\"$Group$\"]\";\n\t\t\tforeach AllActors(class'PSComputer',PSComp)\n\t\t\t{\n\t\t\t\tif(PSComp.Group ~= Group)\n\t\t\t\t{\n\t\t\t\t\tk++;\n\t\t\t\t\tif(k==6 || k==9)\n\t\t\t\t\t\tstr = str$\", \"$PSComp.Username$\"|n\";\n\t\t\t\t\telse\n\t\t\t\t\t\tstr = str$\", \"$PSComp.Username;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tinf = \"[NO GROUP]\";\n\t\t}\n\t}\n\txAlert(k$\" computers\",inf@str$\" [END]\");\n}\n\nfunction ListMail()\n{\n\tlocal int i, k;\n\tlocal string str;\n\tfor(i=0;i<250;i++)\n\t{\n\t\tif(Messages[i] != \"\")\n\t\t{\n\t\t\tk++;\n\t\t\tstr = str$Messages[i]$\"|n\";\n\t\t\tif(instr(caps(Messages[i]), caps(\"[X]\")) == -1)\n\t\t\t\tMessages[i] = \"[X]\"$Messages[i];\n\t\t}\n\t}\n\t\n\txAlert(k$\" messages\",str$\" [END]\");\n}\n\nfunction int CountMail(optional bool bUnreadOnly)\n{\n\tlocal int i, k;\n\n\tif(!bUnreadOnly)\n\t{\n\t\tfor(i=0;i<250;i++)\n\t\t{\n\t\t\tif(Messages[i] != \"\")\n\t\t\t{\n\t\t\t\tif(instr(caps(Messages[i]), caps(\"[X]\")) == -1)\n\t\t\t\t{\n\t\t\t\t\tk++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tfor(i=0;i<250;i++)\n\t\t{\n\t\t\tif(Messages[i] != \"\")\n\t\t\t{\n\t\t\t\tk++;\n\t\t\t}\n\t\t}\n\t}\n\treturn k;\n}\n\nfunction string ReadMail(int i)\n{\n\tlocal string str;\n\tif(bDebug)\n\t\tLog(i);\n\tif(Messages[i] != \"\")\n\t{\n\t\tstr = Messages[i];\n\t\tif(instr(caps(Messages[i]), caps(\"[X]\")) == -1)\n\t\t\t\tMessages[i] = \"[X]\"$Messages[i];\n\t\treturn str;\n\t}\n\telse\n\t\treturn \"Error: Message is empty.\";\n}\n\nfunction DelMail(int i)\n{\n\tif(bDebug)\n\t\tLog(i);\n\tif(Messages[i] != \"\")\n\t{\n\t\txAlert(\"Mail\",\"Deleted message [\"$Messages[i]$\"]\");\n\t\tMessages[i] = \"\";\n\t}\n\telse\n\t\txAlert(\"Mail\",\"Error: Message is already empty.\");\n}\n\nfunction ToggleAlert(deusexplayer p)\n{\n\tlocal PSZoneInfo PSZ;\n\t\n\tP.PlaySound(sound'Send',,,, 256);\n\t\n\tif(ZoneTag == 'None')\n\t{\n\t\txAlert(\"Error\",\"Security system not configured...\");\n\t\treturn;\n\t}\n\tforeach AllActors(class'PSZoneInfo',PSZ)\n\t{\n\t\tif(PSZ.Tag == ZoneTag)\n\t\t{\n\t\t\tif(PSZ.NotifPlayer != None)\n\t\t\t{\n\t\t\t\tPSZ.NotifPlayer = None;\n\t\t\t\txAlert(\"Alert\",\"Cancelled zone alerts.\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tPSZ.NotifPlayer = P;\n\t\t\t\txAlert(\"Alert\",\"Registered for zone alerts.\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction ToggleSecurity(deusexplayer p)\n{\n\tlocal PSZoneInfo PSZ;\n\t\n\tP.PlaySound(sound'Send',,,, 256);\n\t\n\tif(ZoneTag == 'None')\n\t{\n\t\txAlert(\"Error\",\"Security system not configured...\");\n\t\treturn;\n\t}\n\tforeach AllActors(class'PSZoneInfo',PSZ)\n\t{\n\t\tif(PSZ.Tag == ZoneTag)\n\t\t{\n\t\t\tPSZ.bRestrictedZone = !PSZ.bRestrictedZone;\n\t\t\tif(PSZ.bRestrictedZone)\n\t\t\t\txAlert(\"Alert\",\"Security system enabled\");\n\t\t\telse\n\t\t\t\txAlert(\"Alert\",\"Security system disabled\");\n\t\t}\n\t}\n}\n\nfunction Frob(actor frobber, inventory frobwith)\n{\n\tlocal DeusExPlayer P;\n\tlocal PSComputerReplicationactor newlogin, f;\n\tlocal bool bFound, bRemembered;\n\tlocal string str;\n\t\n\tP = DeusExPlayer(frobber);\n\tP.PlaySound(sound'Find',,,, 256);\n\tif(pgUser == P)\n\t{\n\t\tbRemembered=True;\n\t\tpgUser.ClientMessage(\"|P4Recognized user; Password not required. You may just enter commands.\");\n\t\tif(CountMail(True) > 0)\n\t\t\tstr = \"You have \"$CountMail(True)$\" unread messages.|n\";\n\t\tif(CountNotif() > 0)\n\t\t\tstr = str$\"You have \"$CountNotif()$\" notifications! (Command <chk> reads)\";\n\t\t\n\t\tif(str != \"\")\n\t\t\txAlert(\"Alert\",str);\n\t}\n\tif(bdebug)\n\t\tlog(\"Computer: \"$bRemembered@password);\n\tforeach AllActors(class'PSComputerReplicationactor', f)\n\t\tif(f.Flagger == P)\n\t\t{\n\t\t\tf.Flagger = P;\n\t\t\tf.ac = self;\n\t\t\tf.SetTimer(0.5,false);\n\t\t\tf.Username = Username;\n\t\t\tf.bRem=bRemembered;\n\t\t\tf.Password = Password;\n\t\t\tbFound=True;\n\t\t}\n\t\t\t\n\tif(!bFound)\n\t{\n\t\tnewlogin = Spawn(class'PSComputerReplicationactor');\n\t\tnewlogin.Flagger = P;\n\t\tnewlogin.ac = self;\n\t\tnewlogin.Username = Username;\n\t\tnewlogin.SetTimer(0.5,false);\n\t}\n}\n\ndefaultproperties\n{\n     userName=\"DEFAULT\"\n     Password=\"DEFAULT\"\n     InfoProp(0)=\"Health\"\n     InfoProp(1)=\"Energy\"\n     InfoProp(2)=\"ReducedDamageType\"\n     InfoProp(3)=\"bAdmin\"\n     bInvincible=True\n     ItemName=\"Personal Computer Terminal\"\n     bPushable=False\n     Mesh=LodMesh'DeusExDeco.ComputerPersonal'\n     CollisionRadius=36.000000\n     CollisionHeight=7.400000\n}\n",
            "name": "PSComputer.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "userName=\"DEFAULT\"",
                    "Password=\"DEFAULT\"",
                    "InfoProp(0)=\"Health\"",
                    "InfoProp(1)=\"Energy\"",
                    "InfoProp(2)=\"ReducedDamageType\"",
                    "InfoProp(3)=\"bAdmin\"",
                    "bInvincible=True",
                    "ItemName=\"Personal Computer Terminal\"",
                    "bPushable=False",
                    "Mesh=LodMesh'DeusExDeco.ComputerPersonal'",
                    "CollisionRadius=36.000000",
                    "CollisionHeight=7.400000"
                ],
                "exec": [],
                "extends": "DeusExDecoration",
                "functions": {
                    "AddMail": {
                        "body": "{\n\t\n\tif(pgUser != None)\n\t\txAlert(\"Mail\",\"|P3You have mail!\");\n\tfor(i=0;i<250;i++)\n\t{\n\t\tif(Messages[i] == \"\")\n\t\t{\n\t\t\tMessages[i] = User$\": \"$Msg;\n\t\t\treturn;\n\t\t}\n\t}\n}",
                        "locals": [
                            "local int i;"
                        ],
                        "modifiers": [],
                        "name": "AddMail",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "User"
                            ],
                            [
                                "string",
                                "Msg"
                            ]
                        ],
                        "return": ""
                    },
                    "Bump": {
                        "body": "{\n\t\n\tif(Inventory(Other) != None)\n\t{\n\t\tfor(i=0;i<10;i++)\n\t\t{\n\t\t\tif(StoredInv[i] == None)\n\t\t\t{\n\t\t\t\txAlert(\"Alert\",Inventory(Other).itemName$\" stored in slot \"$i);\n\t\t\t\tStoredInv[i] = Inventory(Other).class;\n\t\t\t\tOther.Destroy();\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n}",
                        "locals": [
                            "local int i;"
                        ],
                        "modifiers": [],
                        "name": "Bump",
                        "native": false,
                        "param": [
                            [
                                "actor",
                                "Other"
                            ]
                        ],
                        "return": ""
                    },
                    "ClearMail": {
                        "body": "{\n\n\tfor(i=0;i<250;i++)\n\t{\n\t\tif(Messages[i] != \"\")\n\t\t{\n\t\t\tk++;\n\t\t\tMessages[i] = \"\";\n\t\t}\n\t}\n\t\n\txAlert(\"Mail\",k$\" messages deleted.\");\n}",
                        "locals": [
                            "local int i, k;"
                        ],
                        "modifiers": [],
                        "name": "ClearMail",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "CountMail": {
                        "body": "{\n\n\tif(!bUnreadOnly)\n\t{\n\t\tfor(i=0;i<250;i++)\n\t\t{\n\t\t\tif(Messages[i] != \"\")\n\t\t\t{\n\t\t\t\tif(instr(caps(Messages[i]), caps(\"[X]\")) == -1)\n\t\t\t\t{\n\t\t\t\t\tk++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tfor(i=0;i<250;i++)\n\t\t{\n\t\t\tif(Messages[i] != \"\")\n\t\t\t{\n\t\t\t\tk++;\n\t\t\t}\n\t\t}\n\t}\n\treturn k;\n}",
                        "locals": [
                            "local int i, k;"
                        ],
                        "modifiers": [],
                        "name": "CountMail",
                        "native": false,
                        "param": [
                            [
                                "optional",
                                "bool",
                                "bUnreadOnly"
                            ]
                        ],
                        "return": "int"
                    },
                    "CountNotif": {
                        "body": "{\n\n\t\tfor(i=0;i<250;i++)\n\t\t{\n\t\t\tif(Notifications[i] != \"\")\n\t\t\t{\n\t\t\t\tk++;\n\t\t\t}\n\t\t}\n\treturn k;\n}",
                        "locals": [
                            "local int i, k;"
                        ],
                        "modifiers": [],
                        "name": "CountNotif",
                        "native": false,
                        "param": [],
                        "return": "int"
                    },
                    "DelMail": {
                        "body": "{\n\tif(bDebug)\n\t\tLog(i);\n\tif(Messages[i] != \"\")\n\t{\n\t\txAlert(\"Mail\",\"Deleted message [\"$Messages[i]$\"]\");\n\t\tMessages[i] = \"\";\n\t}\n\telse\n\t\txAlert(\"Mail\",\"Error: Message is already empty.\");\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "DelMail",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "i"
                            ]
                        ],
                        "return": ""
                    },
                    "EndHack": {
                        "body": "{\n\t\n\tHax0rObj = None;\n\tHax0rStep = 0;\n\tfor(i=0;i<25;i++)\n\t\tHax0rs[i] = \"\";\n\t\n}",
                        "locals": [
                            "local int i;"
                        ],
                        "modifiers": [],
                        "name": "EndHack",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "FailHack": {
                        "body": "{\n\t\n\tpgUser.TakeDamage(100, Pawn(Owner), Owner.Location, Vect(0,0,0), 'EMP');\n\tHax0rObj = None;\n\tHax0rStep = 0;\n\tfor(i=0;i<25;i++)\n\t\tHax0rs[i] = \"\";\n}",
                        "locals": [
                            "local int i;"
                        ],
                        "modifiers": [],
                        "name": "FailHack",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Frob": {
                        "body": "{\n\t\n\tP = DeusExPlayer(frobber);\n\tP.PlaySound(sound'Find',,,, 256);\n\tif(pgUser == P)\n\t{\n\t\tbRemembered=True;\n\t\tpgUser.ClientMessage(\"|P4Recognized user; Password not required. You may just enter commands.\");\n\t\tif(CountMail(True) > 0)\n\t\t\tstr = \"You have \"$CountMail(True)$\" unread messages.|n\";\n\t\tif(CountNotif() > 0)\n\t\t\tstr = str$\"You have \"$CountNotif()$\" notifications! (Command <chk> reads)\";\n\t\t\n\t\tif(str != \"\")\n\t\t\txAlert(\"Alert\",str);\n\t}\n\tif(bdebug)\n\t\tlog(\"Computer: \"$bRemembered@password);\n\tforeach AllActors(class'PSComputerReplicationactor', f)\n\t\tif(f.Flagger == P)\n\t\t{\n\t\t\tf.Flagger = P;\n\t\t\tf.ac = self;\n\t\t\tf.SetTimer(0.5,false);\n\t\t\tf.Username = Username;\n\t\t\tf.bRem=bRemembered;\n\t\t\tf.Password = Password;\n\t\t\tbFound=True;\n\t\t}\n\t\t\t\n\tif(!bFound)\n\t{\n\t\tnewlogin = Spawn(class'PSComputerReplicationactor');\n\t\tnewlogin.Flagger = P;\n\t\tnewlogin.ac = self;\n\t\tnewlogin.Username = Username;\n\t\tnewlogin.SetTimer(0.5,false);\n\t}\n}",
                        "locals": [
                            "local DeusExPlayer P;",
                            "local PSComputerReplicationactor newlogin, f;",
                            "local bool bFound, bRemembered;",
                            "local string str;"
                        ],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "actor",
                                "frobber"
                            ],
                            [
                                "inventory",
                                "frobwith"
                            ]
                        ],
                        "return": ""
                    },
                    "GiveTool": {
                        "body": "{ \n\t\n\tanItem = Spawn(class'PSComputerHandheld',,,pgUser.Location);\n\tanItem.SpawnCopy(pgUser);\n\tanItem.Destroy();\n}",
                        "locals": [
                            "local PSComputerHandheld anItem;"
                        ],
                        "modifiers": [],
                        "name": "GiveTool",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "GroupMail": {
                        "body": "{\n\t\n\tpgUser.PlaySound(sound'Send',,,, 256);\n\n\t\n\tforeach AllActors(class'PSComputer', PSComp)\n\t{\n\t\tif(PSComp.Group ~= Group)\n\t\t{\n\t\t\t//pgUser.ClientMessage(\"|P3Message sent!\");\n\t\t\t//pgUser.ClientMessage(Username$\": \"$Msg);\n\t\t\tk++;\n\t\t\tLog(Username$\" sent mail to \"$PSComp.Username$\" via group \"$group$\". (\"$mailstring$\")\");\n\t\t\tPSComp.AddMail(Username$\" (\"$Group$\")\", mailstring);\n\t\t}\n\t}\n\tif(!bFound)\n\t{\n\t\txAlert(\"Error\", \"|P3Message error: Group is empty.\");\n\t}\n\telse\n\t{\n\t\txAlert(\"Mail\",\"|P4Mail sent to group \"$k$\" users in \"$Group$\" group.|P1|n\"$mailstring);\n\t}\n}",
                        "locals": [
                            "local string sendstring, msg, target;",
                            "local PSComputer PSComp;",
                            "local bool bFound;",
                            "local int k;"
                        ],
                        "modifiers": [],
                        "name": "GroupMail",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "mailstring"
                            ]
                        ],
                        "return": ""
                    },
                    "InfoChk": {
                        "body": "{\n\tstr = \"INFO\";\n\tfor(k=0;k<16;k++)\n\t{\n\t\tif(InfoProp[k] != \"\")\n\t\t{\n\t\t\tif(k==4 || k==8)\n\t\t\t\tstr = str$\", \"$InfoProp[k]$\"=\"$pgUser.GetPropertyText(InfoProp[k])$\"|n\";\n\t\t\telse\n\t\t\t\tstr = str$\", \"$InfoProp[k]$\"=\"$pgUser.GetPropertyText(InfoProp[k]);\n\t\t}\n\t}\n\treturn str;\n}",
                        "locals": [
                            "local string str;",
                            "local int k;"
                        ],
                        "modifiers": [],
                        "name": "InfoChk",
                        "native": false,
                        "param": [],
                        "return": "string"
                    },
                    "ListComps": {
                        "body": "{\n\t\n\tif(!bMyGroup)\n\t{\n\t\tinf = \"[GLOBAL]\";\n\t\tforeach AllActors(class'PSComputer',PSComp)\n\t\t{\n\t\t\tk++;\n\t\t\tif(k==6 || k==9)\n\t\t\t\tstr = str$\", \"$PSComp.Username$\"|n\";\n\t\t\telse\n\t\t\t\tstr = str$\", \"$PSComp.Username;\n\t\t}\n\t}\n\telse\n\t{\n\t\tif(Group != \"\")\n\t\t{\n\t\t\tinf = \"[\"$Group$\"]\";\n\t\t\tforeach AllActors(class'PSComputer',PSComp)\n\t\t\t{\n\t\t\t\tif(PSComp.Group ~= Group)\n\t\t\t\t{\n\t\t\t\t\tk++;\n\t\t\t\t\tif(k==6 || k==9)\n\t\t\t\t\t\tstr = str$\", \"$PSComp.Username$\"|n\";\n\t\t\t\t\telse\n\t\t\t\t\t\tstr = str$\", \"$PSComp.Username;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tinf = \"[NO GROUP]\";\n\t\t}\n\t}\n\txAlert(k$\" computers\",inf@str$\" [END]\");\n}",
                        "locals": [
                            "local int k;",
                            "local string str, inf;",
                            "local PSComputer PSComp;"
                        ],
                        "modifiers": [],
                        "name": "ListComps",
                        "native": false,
                        "param": [
                            [
                                "optional",
                                "bool",
                                "bMyGroup"
                            ]
                        ],
                        "return": ""
                    },
                    "ListInv": {
                        "body": "{\n\tfor(i=0;i<10;i++)\n\t{\n\t\tif(StoredInv[i] != None)\n\t\t{\n\t\t\tk++;\n\t\t\tif(k==3)\n\t\t\t\tstr = str$\"[\"$i$\"] \"$StoredInv[i]$\"|n\";\n\t\t\telse\n\t\t\t\tstr = str$\"[\"$i$\"] \"$StoredInv[i]$\", \";\n\t\t}\n\t}\n\t\n\txAlert(k$\" items\",str$\" [END]\");\n}",
                        "locals": [
                            "local int i, k;",
                            "local string str;"
                        ],
                        "modifiers": [],
                        "name": "ListInv",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ListLocs": {
                        "body": "{\n\tfor(i=0;i<10;i++)\n\t{\n\t\tif(StoredLocation[i] != vect(0,0,0))\n\t\t{\n\t\t\tstr = str$\"[\"$i$\"] Yes, \";\n\t\t}\n\t//\telse\n\t\t//{\n\t\t//\tstr = str$\"[\"$i$\"] No, \";\n\t//\t}\n\t}",
                        "locals": [
                            "local int i, k;",
                            "local string str;"
                        ],
                        "modifiers": [],
                        "name": "ListLocs",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ListMail": {
                        "body": "{\n\tfor(i=0;i<250;i++)\n\t{\n\t\tif(Messages[i] != \"\")\n\t\t{\n\t\t\tk++;\n\t\t\tstr = str$Messages[i]$\"|n\";\n\t\t\tif(instr(caps(Messages[i]), caps(\"[X]\")) == -1)\n\t\t\t\tMessages[i] = \"[X]\"$Messages[i];\n\t\t}\n\t}\n\t\n\txAlert(k$\" messages\",str$\" [END]\");\n}",
                        "locals": [
                            "local int i, k;",
                            "local string str;"
                        ],
                        "modifiers": [],
                        "name": "ListMail",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ListNotif": {
                        "body": "{\n\t\n\tfor(i=0;i<250;i++)\n\t{\n\t\tif(Notifications[i] != \"\")\n\t\t{\n\t\t\twhile(k < 6)\n\t\t\t{\n\t\t\t\tk++;\n\t\t\t\tstr = str$Notifications[i]$\"|n\";\n\t\t\t\tNotifications[i] = \"\";\n\t\t\t}\n\t\t}\n\t}\n\n\t\n\txAlert(k$\" notifications\",str$\" [END]\");\n}",
                        "locals": [
                            "local int i, k;",
                            "local string str;"
                        ],
                        "modifiers": [],
                        "name": "ListNotif",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Notif": {
                        "body": "{\n\t\n\tif(pgUser != None)\n\t\txAlert(\"Alert\",\"|P3You have new notifications!\");\n\tfor(i=0;i<250;i++)\n\t{\n\t\tif(Notifications[i] == \"\")\n\t\t{\n\t\t\tNotifications[i] = Msg;\n\t\t\treturn;\n\t\t}\n\t}\n}",
                        "locals": [
                            "local int i;"
                        ],
                        "modifiers": [],
                        "name": "Notif",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "Msg"
                            ]
                        ],
                        "return": ""
                    },
                    "ParseCommand": {
                        "body": "{\n\t\n\tif(bDebug)\n\t{\n\t\tLog(p.playerreplicationinfo.playername@username@inputpassword@command);\n\t\tP.ClientMessage(p.playerreplicationinfo.playername@username@inputpassword@command);\n\t}\n\t\n\tif(pgUser == P)\n\t{\n\t\tbSkipPass=True;\n\t}\n\t\t\n\tif(!bSkipPass && inputPassword != Password)\n\t{\n\t\txAlert(\"Alert\",\"ERROR: Incorrect password.\", p);\n\t\treturn false;\n\t}\n\t\n\tif(pgUser != P)\n\t{\n\t\tP.PlaySound(sound'Auth',,,, 256);\n\t\tpgUser = P;\n\t\tP.ClientMessage(\"Synced to computer.\");\n\t}\n\t\n\tif(Command == \"\" && PrevCommand != \"\")\n\t{\n\t\tParseCommand(pgUser, Password, PrevCommand);\n\t\treturn true;\n\t}\n\t\t\n\tPrevCommand = Command;\n\t\n\tif(Left(command,7) ~= \"redeem \")\n\t{\n\t\tmailstring = Right(command, Len(command)-instr(command,\"redeem \")-Len(\"redeem \"));\n\t\tif(mailstring == \"wtfhax0rftw\" && !bCodebreakerEnabled)\n\t\t{\n\t\t\tbCodebreakerEnabled = True;\n\t\t\tredcode = \"_codebreaker (script.dat)|n [WARNING: This package is in testing and may not function properly.|nFunctionality may also change over time.] \";\n\t\t\t\n\t\t}\n\n\t\tif(mailstring == \"overdose\" && !bOverdriver)\n\t\t{\n\t\t\tbOverdriver = True;\n\t\t\tredcode = \"_overdriver (overdriver.dat)|n [WARNING: This package is in testing and may not function properly.|nFunctionality may also change over time.] \";\n\t\t\t\n\t\t}\n\n\t\tif(mailstring == \"boxx\" && !bFileManager)\n\t\t{\n\t\t\tbFileManager = True;\n\t\t\tredcode = \"_fileman (files.dat)|n [WARNING: This package is in testing and may not function properly.|nFunctionality may also change over time.] \";\n\t\t\t\n\t\t}\n\t\t\t\t\t\t\n\t\tif(redcode != \"\")\n\t\t\txAlert(\"Redeemer\", \"Code redeemed successfully.|nThis code has activated the following system: \"$redcode$\"|nUse Help to access the info for the newly activated packages.\");\n\t\telse\n\t\txAlert(\"Error\", \"Code invalid or already redeemed.\");\n\t\tbPassedCommand=True;\n\t\treturn true;\n\t}\n\t\n\tif(command ~= \"script\")\n\t{\n\t\tif(bCodebreakerEnabled)\n\t\t{\n\t\t\tpgUser.PlaySound(sound'PhoneVoice3');\n\t\t\t\tloc = pgUser.Location;\n\t\t\t\tloc.Z += pgUser.BaseEyeHeight;\n\t\t\t\tline = Vector(pgUser.ViewRotation) * 4000;\n\t\t\t\thitActor = Trace(hitLocation, hitNormal, loc+line, loc, true);\n\t\t\t\tif(Hax0rObj == hitActor && !hitActor.isA('LevelInfo')) //Resuming?\n\t\t\t\t{\n\t\t\t\t\txHack();\n\t\t\t\t}\n\t\t\t\telse if(hitActor != None && !hitActor.isA('LevelInfo')) //NewHack\n\t\t\t\t{\n\t\t\t\t\tHax0rStep=0;\n\t\t\t\t\tfor(i=0;i<25;i++)\n\t\t\t\t\t\tHax0rs[i] = \"\";\n\t\t\t\t\txHack();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\txAlert(\"ERROR\", \"Script failed, no object found.\");\n\t\t}\n\t\telse xAlert(\"Error\", \"Your computer does not have the relevant access or software to perform this task.|nContact an administrator for assistance.\");\n\t\t\n\t\tbPassedCommand=True;\n\t\treturn true;\n\t}\n\n\tif(command ~= \"overdriver\")\n\t{\n\t\tif(bOverdriver)\n\t\t{\n\t\t\tpgUser.PlaySound(sound'PhoneVoice3');\n\t\t\t\tloc = pgUser.Location;\n\t\t\t\tloc.Z += pgUser.BaseEyeHeight;\n\t\t\t\tline = Vector(pgUser.ViewRotation) * 4000;\n\t\t\t\thitActor = Trace(hitLocation, hitNormal, loc+line, loc, true);\n\n\t\t\t\tif(hitActor != None && !hitActor.isA('LevelInfo')) //NewHack\n\t\t\t\t{\n\t\t\t\t\tLastWord = \"\";\n\t\t\t\t\tODActor = hitActor;\n\t\t\t\t\txOD();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\txAlert(\"ERROR\", \"Script failed, no object found.\");\n\t\t}\n\t\telse xAlert(\"Error\", \"Your computer does not have the relevant access or software to perform this task.|nContact an administrator for assistance.\");\n\t}\n\n\tif(command ~= \"files\")\n\t{\n\t\tif(bFileManager)\n\t\t{\n\t\t\tpgUser.PlaySound(sound'PhoneVoice3');\n\t\t\t\tloc = pgUser.Location;\n\t\t\t\tloc.Z += pgUser.BaseEyeHeight;\n\t\t\t\tline = Vector(pgUser.ViewRotation) * 4000;\n\t\t\t\thitActor = Trace(hitLocation, hitNormal, loc+line, loc, true);\n\t\t\t\tif(FileActor == hitActor && !hitActor.isA('LevelInfo')) //Resuming?\n\t\t\t\t{\n\t\t\t\t\txFileMan();\n\t\t\t\t}\n\t\t\t\telse if(hitActor != None && !hitActor.isA('LevelInfo')) //NewHack\n\t\t\t\t{\n\t\t\t\t\tFileActor=hitActor;\n\t\t\t\t\tCurFilePath=\"/\";\n\t\t\t\t\txFileMan();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\txAlert(\"ERROR\", \"Script failed, no object found.\");\n\t\t}\n\t\telse xAlert(\"Error\", \"Your computer does not have the relevant access or software to perform this task.|nContact an administrator for assistance.\");\n\t}\n\t\t\n\tif(command ~= \"me\")\n\t{\n\t\txAlert(Username,myData());\n\t\tbPassedCommand=True;\n\t\treturn true;\n\t}\n\tif(Left(command,6) ~= \"group \")\n\t{\n\t\tmailstring = Right(command, Len(command)-instr(command,\"group \")-Len(\"group \"));\n\t\tSetGroup(mailstring);\n\t\tbPassedCommand=True;\n\t\treturn true;\n\t}\n\t\n\tif(Left(command,5) ~= \"group\")\n\t{\n\t\tListComps(True);\n\t\tbPassedCommand=True;\n\t\treturn true;\n\t}\n\t\t\n\tif(Left(command,4) ~= \"info\")\n\t{\n\t\txAlert(pgUser.PlayerReplicationInfo.PlayerName$\" info\", InfoChk());\n\t\tbPassedCommand=True;\n\t\treturn true;\n\t}\n\t\n\tif(Left(command,5) ~= \"ping \")\n\t{\n\t\tmailstring = Right(command, Len(command)-instr(command,\"ping \")-Len(\"ping \"));\n\t\tPingLoc(mailstring);\n\t\tbPassedCommand=True;\n\t\treturn true;\n\t}\n\t\t\n\tif(Left(command,3) ~= \"chk\")\n\t{\n\t\tListNotif();\n\t\tbPassedCommand=True;\n\t\treturn true;\n\t}\n\t\n\tif(Left(command,5) ~= \"help \")\n\t{\n\t\tbPassedCommand=True;\n\t\tmailstring = Right(command, Len(command)-instr(command,\"help \")-Len(\"help \"));\n\t\tif(mailstring ~= \"handheld\")\n\t\t\txAlert(\"Help\", \"Gives the Handheld Computer item which allows you to remotely access this computer.\");\n\t\telse if(mailstring ~= \"recall\")\n\t\t\txAlert(\"Help\", \"|P1Format: recall <number referring to the slot number>|n|P2Teleports you to that location.\");\n\t\telse if(mailstring ~= \"mark\")\n\t\t\txAlert(\"Help\", \"|P1Format: mark <number referring to the slot number>|n|P2Saves your current location in the slot number which is called by the recall command.|n|P7Best used from the handheld computer.\");\n\t\telse if(mailstring ~= \"dbg\")\n\t\t\txAlert(\"Help\", \"Toggles debugging messages.\");\n\t\telse if(mailstring ~= \"togglesec\")\n\t\t\txAlert(\"Help\", \"Toggles the Drone Security system.|n|P7Requires the Zone to be configured.\");\n\t\telse if(mailstring ~= \"togglealert\")\n\t\t\txAlert(\"Help\", \"Toggles the Drone Security system notifications, which alerts you if someone enters..|n|P7Requires the Zone to be configured.\");\n\t\telse if(mailstring ~= \"cred+\")\n\t\t\txAlert(\"Help\", \"|P1Format: cred+<number referring to the amount of credits>|n|P2Deposits credits in to the computer.\");\n\t\telse if(mailstring ~= \"cred-\")\n\t\t\txAlert(\"Help\", \"|P1Format: cred-<number referring to the amount of credits>|n|P2Withdraws credits from the computer.\");\n\t\telse if(mailstring ~= \"give\")\n\t\t\txAlert(\"Help\", \"|P1Format: give <number referring to the slot the object is in>|n|P2Withdraws the item from the computer.|n|P7Items are stored by throwing them at the computer.|nThe alert tells you which slot it saves to.|nThe item is not deleted. Refer to Clearitem.\");\n\t\telse if(mailstring ~= \"clearitem\")\n\t\t\txAlert(\"Help\", \"|P1Format: clearitem <number referring to the slot the object is in>|n|P2Removes the item from the computer.|n|P7Items are stored by throwing them at the computer.|nThe alert tells you which slot it saves to.\");\n\t\telse if(mailstring ~= \"setusername\")\n\t\t\txAlert(\"Help\", \"|P1Format: setusername <new username>|n|P2Sets this computers username.\");\n\t\telse if(mailstring ~= \"setpass\")\n\t\t\txAlert(\"Help\", \"|P1Format: setpass <new password>|n|P2Sets this computers password.\");\n\t\telse if(mailstring ~= \"alert\")\n\t\t\txAlert(\"Help\", \"|P1Format: alert <string>|n|P2Prints a message on screen.\");\n\t\telse if(mailstring ~= \"exec\")\n\t\t\txAlert(\"Help\", \"|P1Format: exec <string related to the alias stored>|n|P2Executes the command stored in the memory. |nUse getexec cmmand to show the list of current commands.\");\n\t\telse if(mailstring ~= \"mail\")\n\t\t\txAlert(\"Help\", \"|P1Format: mailsend <username> <message>: |P2Sends email to the computer labeled that username.|nmailread <number>: Reads mail in that slot.|nmaildel <number>: Deletes mail in that slot.|nmailclear, maillist, mailcount.|nmailgroup sends to your group.\");\n\t\telse if(mailstring ~= \"me\")\n\t\t\txAlert(\"Help\", \"|P1Format: me: |P2Shows basic computer information.\");\n\t\telse if(mailstring ~= \"ping\")\n\t\t\txAlert(\"Help\", \"|P1Format: ping <tag>: |P2Gives location to X object.\");\n\t\telse if(mailstring ~= \"script\" && bCodebreakerEnabled)\n\t\t\txAlert(\"Help\", \"|P1Format: script: |P2Enables script input for targetted object. [WIP]\");\n\t\telse if(mailstring ~= \"overdriver\" && bOverdriver)\n\t\t\txAlert(\"Help\", \"|P1Format: overdriver: |P2Dictionary override input for targetted object. [WIP]|nOverloads the target objects by brute forcing passwords.|nGives one word, enter another word that's first letter is the last words last letter.|ne.g. worm -> master -> rekked\");\n\t\telse if(mailstring ~= \"files\" && bFileManager)\n\t\t\txAlert(\"Help\", \"|P1Format: files: |P2Enables file manager for targetted object. [WIP]|nBrowser is command-line based.|nBrowser starts at ROOT:/|nCommands: list, cd, open\");\n\t\telse xAlert(\"Help\", \"Could not find searched command.\");\n\t\treturn true;\n\t\t\n\t}\t\n\t\n\tif(Left(command,4) ~= \"help\")\n\t{\n\t\tif(bCodebreakerEnabled)\n\t\t\tredcode = redcode$\" script\";\n\t\tif(bFileManager)\n\t\t\tredcode = redcode$\" files\";\n\t\tif(bOverdriver)\n\t\t\tredcode = redcode$\" overdriver\";\n\t\t\n\t\tif(redcode == \"\")\n\t\t\tredcode = \"NONE\";\n\t\t\t\n\t\txAlert(\"Help Topics\",\"handheld, recall, mark, dbg, togglesec, togglealert, cred+, cred-|n give, clearitem, setusername, setpass, alert, exec, mail, invs, locs, comps, group|nme, ping|n|P4EXTRA PACKAGES: \"$redcode);\n\t\tbPassedCommand=True;\n\t\treturn true;\n\t}\n\t\t\n\tif(Left(command,8) ~= \"handheld\")\n\t{\n\t\tGiveTool();\n\t\txAlert(\"Alert\",\"Given the Handheld tool.\");\n\t\tbPassedCommand=True;\n\t\treturn true;\n\t}\n\n\tif(Left(command,7) ~= \"recall \")\n\t{\n\t\tmailint = int(Right(command, Len(command)-instr(command,\"recall \")-Len(\"recall \")));\n\t\tif(StoredLocation[mailint] != vect(0,0,0))\n\t\t{\n\t\t\t\tpgUser.SetCollision(false, false, false);\n\t\t\t\tpgUser.bCollideWorld = true;\n\t\t\t\tpgUser.GotoState('PlayerWalking');\n\t\t\t\tpgUser.SetLocation(StoredLocation[mailint]);\n\t\t\t\tpgUser.SetCollision(true, true , true);\n\t\t\t\tpgUser.SetPhysics(PHYS_Walking);\n\t\t\t\tpgUser.bCollideWorld = true;\n\t\t\t\tpgUser.GotoState('PlayerWalking');\n\t\t\t\tpgUser.ClientReStart();\n\t\t\t\txAlert(\"Alert\",\"Sent to location.\");\n\t\t}\n\t\t\n\t\tbPassedCommand=True;\n\t\treturn true;\n\t}\n\t\n\tif(Left(command,5) ~= \"mark \")\n\t{\t\n\t\tmailint = int(Right(command, Len(command)-instr(command,\"mark \")-Len(\"mark \")));\n\t\t\n\t\tStoredLocation[mailint] = pgUser.Location;\n\t\txAlert(\"Alert\",\"Marked location.\");\n\t\tbPassedCommand=True;\n\t\treturn true;\n\t}\n\t\n\tif(Left(command,3) ~= \"dbg\")\n\t{\n\t\tbDebug = !bDebug;\n\t\txAlert(\"Alert\",\"Debug is now \"$bDebug$\".\");\n\t\tbPassedCommand=True;\n\t\treturn true;\n\t}\n\t\n\tif(Left(command,4) ~= \"test\")\n\t{\n\t\txAlert(\"Alert\",\"Tested.\");\n\t\tbPassedCommand=True;\n\t\treturn true;\n\t}\n\t\n\tif(Left(command,5) ~= \"comps\")\n\t{\n\t\tListComps();\n\t\tbPassedCommand=True;\n\t\treturn true;\n\t}\n\t\n\tif(Left(command,4) ~= \"locs\")\n\t{\n\t\tListLocs();\n\t\tbPassedCommand=True;\n\t\treturn true;\n\t}\n\t\n\tif(Left(command,4) ~= \"invs\")\n\t{\n\t\tListInv();\n\t\tbPassedCommand=True;\n\t\treturn true;\n\t}\t\n\t\n\tif(Left(command,9) ~= \"togglesec\")\n\t{\n\t\tToggleSecurity(P);\n\t\tbPassedCommand=True;\n\t\treturn true;\n\t}\n\t\n\tif(Left(command,11) ~= \"togglealert\")\n\t{\n\t\tToggleAlert(P);\n\t\tbPassedCommand=True;\n\t\treturn true;\n\t}\n\t\n\tif(Left(command,5) ~= \"cred+\")\n\t{\n\t\tmailint = int(Right(command, Len(command)-instr(command,\"cred+\")-Len(\"cred+\")));\n\t\tbPassedCommand=True;\n\t\t\n\t\tif(mailint == -1)\n\t\t{\n\t\t\tStoredCredits += pgUser.Credits;\n\t\t\tpgUser.Credits = 0;\n\t\t\txalert(\"Alert\", \"All credits deposited.|n\"$StoredCredits$\" currently stored.\");\n\t\t}\n\t\tif(pgUser.Credits >= mailint)\n\t\t{\n\t\t\tpgUser.Credits -= mailint;\n\t\t\tStoredCredits += mailint;\n\t\t\txalert(\"Alert\", mailint$\" credits deposited.|n\"$StoredCredits$\" currently stored.\");\n\t\t}\n\t\telse\n\t\t\txalert(\"Alert\", \"You don't have enough.\");\n\t\treturn true;\n\t}\n\t\n\tif(Left(command,5) ~= \"cred-\")\n\t{\n\t\tmailint = int(Right(command, Len(command)-instr(command,\"cred-\")-Len(\"cred-\")));\n\t\tbPassedCommand=True;\n\t\t\n\t\tif(mailint == -1)\n\t\t{\n\t\t\tpgUser.Credits += StoredCredits;\n\t\t\tStoredCredits = 0;\n\t\t\txalert(\"Alert\", \"All credits withdrawn.|n\"$pgUser.Credits$\" currently held.\");\n\t\t}\n\t\tif(StoredCredits >= mailint)\n\t\t{\n\t\t\tStoredCredits -= mailint;\n\t\t\tpgUser.Credits += mailint;\n\t\t\txalert(\"Alert\", mailint$\" credits withdrawn.|n\"$pgUser.Credits$\" currently held.\");\n\t\t}\n\t\telse\n\t\t\txalert(\"Alert\", \"You don't have enough.\");\n\t\treturn true;\n\t}\t\n\t\n\tif(Left(command,5) ~= \"give \")\n\t{\n\t\tmailint = int(Right(command, Len(command)-instr(command,\"give \")-Len(\"give \")));\n\t\tbPassedCommand=True;\n\t\tif(StoredInv[mailint] != None)\n\t\t{\n\t\t\tSilentAdd(StoredInv[mailint],pgUser);\n\t\t\tbFound=True;\n\t\t}\n\n\t\tif(bFound)\n\t\t\txalert(\"Alert\", mailint@StoredInv[mailint]$\" withdrawn.\");\n\t\telse\n\t\t\txalert(\"Alert\", \"Slot is empty.\");\n\t\treturn true;\n\t}\n\t\n\tif(Left(command,10) ~= \"clearitem \")\n\t{\n\t\tmailint = int(Right(command, Len(command)-instr(command,\"clearitem \")-Len(\"clearitem \")));\n\t\tbPassedCommand=True;\n\t\tif(StoredInv[mailint] != None)\n\t\t{\n\t\t\tSilentAdd(StoredInv[mailint],pgUser);\n\t\t\tbFound=True;\n\t\t}\n\n\t\tif(bFound)\n\t\t\txalert(\"Alert\", mailint$\" cleared.\");\n\t\telse\n\t\t\txalert(\"Alert\", \"Slot is already empty.\");\n\t\treturn true;\n\t}\t\n\t\n\tif(Left(command,6) ~= \"alarm \")\n\t{\n\t\tbPassedCommand=True;\n\t\tmailstring = Right(command, Len(command)-instr(command,\"alarm \")-Len(\"alarm \"));\n\t\tif(bDebug)\n\t\t\tlog(\"alarm:\"@mailstring);\n\t\t\t\n\t\tif(instr(caps(mailstring), caps(\":\")) != -1)\n\t\t{\n\t\t\txAlert(\"Alarm\",\"[Unfinished command, doesnt yet function]|nSetting alarm for\"@mailstring);\n\t\t\t//SetAlarm(mailstring);\n\t\t}\n\t\telse\n\t\t{\n\t\t\txAlert(\"Alarm\",\"Alarm string is badly formatted. Accepted format is HOUR:MINUTE.\");\n\t\t}\n\t\t\t\n\t}\n\t\n\tif(Left(command,12) ~= \"setusername \")\n\t{\n\t\tbPassedCommand=True;\n\t\tmailstring = Right(command, Len(command)-instr(command,\"setusername \")-Len(\"setusername \"));\n\t\tif(bDebug)\n\t\t\tlog(\"setuser:\"@mailstring);\n\t\t\t\n\t\t\tforeach AllActors(class'PSComputer',PSComp)\n\t\t\t\tPSComp.Notif(username$\" changed their username to \"$mailstring);\n\t\t\txAlert(\"Info\", \"Setting username...|nPrevious: \"$Username$\"|nNew: \"$mailstring);\n\t\t\tUsername = mailstring;\n\t\t\t\n\t}\n\t\n\tif(Left(command,8) ~= \"setpass \")\n\t{\n\t\tbPassedCommand=True;\n\t\tmailstring = Right(command, Len(command)-instr(command,\"setpass \")-Len(\"setpass \"));\n\t\tif(bDebug)\n\t\t\tlog(\"setpass:\"@mailstring);\n\t\t\t\n\t\t\txAlert(\"Info\", \"Setting Password...|nPrevious: \"$Password$\"|nNew: \"$mailstring);\n\t\t\tPassword = mailstring;\n\t\t\t\n\t}\n\t\t\n\tif(Left(command,6) ~= \"alert \")\n\t{\n\t\tbPassedCommand=True;\n\t\tmailstring = Right(command, Len(command)-instr(command,\"alert \")-Len(\"alert \"));\n\t\tif(bDebug)\n\t\t\tlog(\"alert:\"@mailstring);\n\n\t\t\txAlert(\"Test\", mailstring);\n\t\t\t\n\t}\n\t\n\tif(Left(command,5) ~= \"exec \")\n\t{\n\t\tbPassedCommand=True;\n\t\tmailstring = Right(command, Len(command)-instr(command,\"exec \")-Len(\"exec \"));\n\t\tif(bDebug)\n\t\t\tlog(\"exec:\"@mailstring);\n\t\t\n\t\tfor(i=0;i<25;i++)\n\t\t{\n\t\t\tif(mailstring ~= pEvents[i].EventAlias)\n\t\t\t{\n\t\t\t\tforeach AllActors(class'Actor', A)\n\t\t\t\t{\n\t\t\t\t\tif(A.Tag == pEvents[i].EventName)\n\t\t\t\t\t{\n\t\t\t\t\t\tb++;\n\t\t\t\t\t\tA.Trigger(self,pgUser);\n\t\t\t\t\t\t//pgUser.ClientMessage(pEvents[i].EventAlias$\" triggered.\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\txAlert(\"Alert\",b$\" events triggered for \"$mailstring);\n\t}\n\t\n\tif(Left(command,4) ~= \"mail\") //Add list to show all, and count to show how many\n\t{\n\t\tbPassedCommand=True;\n\t\t//mailstring is everything after mail, format mailsend x, mailread x\n\t\tmailstring = Right(command, Len(command)-instr(command,\"mail\")-Len(\"mail\"));\n\t\tif(bDebug)\n\t\t\tlog(\"mailer\"@mailstring);\n\t\tif(Left(mailstring,6) ~= \"group \")\n\t\t{\n\t\t\t//sendstring is everything after send, mailsend xxxxx\n\t\t\tmsg = Right(mailstring, Len(mailstring)-instr(mailstring,\"group \")-Len(\"group \"));\n\t\t\tbPassedMail=True;\n\t\t\tGroupMail(msg);\n\t\t\treturn true;\n\t\t}\n\t\tif(Left(mailstring,5) ~= \"send \")\n\t\t{\n\t\t\t//sendstring is everything after send, mailsend xxxxx\n\t\t\tmsg = Right(mailstring, Len(mailstring)-instr(mailstring,\"send \")-Len(\"send \"));\n\t\t\tbPassedMail=True;\n\t\t\tSendMail(msg);\n\t\t\treturn true;\n\t\t}\n\t\tif(Left(mailstring,5) ~= \"read \")\n\t\t{\n\t\t\tmailint = int(Right(mailstring, Len(mailstring)-instr(mailstring,\"read \")-Len(\"read \")));\n\t\t\tbPassedMail=True;\n\t\t\t//p.clientmessage(ReadMail(mailint));\n\t\t\txalert(\"Mail\", readmail(mailint));\n\t\t\treturn true;\n\t\t}\n\t\tif(Left(mailstring,4) ~= \"del \")\n\t\t{\n\t\t\tmailint = int(Right(mailstring, Len(mailstring)-instr(mailstring,\"del \")-Len(\"del \")));\n\t\t\tbPassedMail=True;\n\t\t\tDelMail(mailint);\n\t\t\treturn true;\n\t\t}\n\t\tif(Left(mailstring,5) ~= \"clear\")\n\t\t{\n\t\t\tClearMail();\n\t\t\tbPassedMail=True;\n\t\t\treturn true;\n\t\t}\n\t\tif(Left(mailstring,4) ~= \"list\")\n\t\t{\n\t\t\tListMail();\n\t\t\tbPassedMail=True;\n\t\t\treturn true;\n\t\t}\t\n\t\n\t\tif(!bPassedMail)\n\t\t\txalert(\"Mail\", \"Mailer function not recognized.\");\n\t}\n\tif(!bPassedCommand)\n\txalert(\"Error\", \"Command not recognized.\");\n}",
                        "locals": [
                            "local string mailstring, sendstring, target, msg;",
                            "local int mailint,i, b;",
                            "local bool bPassedCommand, bPassedMail, bFound;",
                            "local actor a;",
                            "local bool bSkipPass;",
                            "local PSComputerReplicationActor f;",
                            "local MenuUIMessageBoxWindow mes;",
                            "local PSComputerHandheld toolz;",
                            "local PSComputer PSComp;",
                            "local Actor hitActor;",
                            "local vector loc, line, HitLocation, hitNormal;",
                            "local string redcode;"
                        ],
                        "modifiers": [],
                        "name": "ParseCommand",
                        "native": false,
                        "param": [
                            [
                                "deusexplayer",
                                "p"
                            ],
                            [
                                "string",
                                "inputPassword"
                            ],
                            [
                                "string",
                                "Command"
                            ]
                        ],
                        "return": "bool"
                    },
                    "ParseHack": {
                        "body": "{\n\n\t\tif(Hax0rObj != None)\n\t\t{\n\t\t\thitMover = DeusExMover(Hax0rObj);\n\t\t\thitPawn = ScriptedPawn(Hax0rObj);\n\t\t\thitDecoration = DeusExDecoration(Hax0rObj);\n\t\t\thitPlayer = DeusExPlayer(Hax0rObj);\n\t\t\tif (hitMover != None)\n\t\t\t{\n\t\t\t\tif(Hax0rStep == 0)\n\t\t\t\t{\n\t\t\t\t\tif(Command ~= \"debug()\")\n\t\t\t\t\t{\n\t\t\t\t\t\tHax0rStep=1;\n\t\t\t\t\t\txAlert(\"Door\", \"event<<rundebug()|ncout>>'Debug mode enabled.'|n|nAny incorrect commands will end the session.|nhelp() for assistance.|nexit() to end session. (Menu will not close, must be closed manually.)\");\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\telse if(Command ~= \"exit()\")\n\t\t\t\t\t{\n\t\t\t\t\t\tEndHack();\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\tFailHack();\n\t\t\t\t}\n\t\t\t\tif(Hax0rStep == 1)\n\t\t\t\t{\n\t\t\t\t\tif(Command ~= \"help()\")\n\t\t\t\t\t{\n\t\t\t\t\t\txAlert(\"Door\", \">>> ELECTRONIC_DOOR (DEBUG)|ndebug() override() dumpcodes() exit()\");\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\telse if(Command ~= \"debug()\")\n\t\t\t\t\t{\n\t\t\t\t\t\txAlert(\"Door\", \">>> ELECTRONIC_DOOR (DEBUG)|nDebug mode already active.|n<<ERROR\");\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\telse if(Command ~= \"Override()\")\n\t\t\t\t\t{\n\t\t\t\t\t\txAlert(\"Door\", \">>> ELECTRONIC_DOOR (DEBUG)|nActivating override mode.|n>>cancel() to return to debug menu|n>>ELSE Input override code.\");\n\t\t\t\t\t\tHax0rStep = 2;\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\telse if(Command ~= \"exit()\")\n\t\t\t\t\t{\n\t\t\t\t\t\tEndHack();\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\tFailHack();\n\t\t\t\t}\n\t\t\t\tif(Hax0rStep == 2)\n\t\t\t\t{\n\t\t\t\t\tif(Command ~= \"cancel()\")\n\t\t\t\t\t{\n\t\t\t\t\t\txAlert(\"Door\", \">>>Returning to debugging.\");\n\t\t\t\t\t\tHax0rStep = 1;\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\telse if(Command ~= generatedCode)\n\t\t\t\t\t{\n\t\t\t\t\t\txAlert(\"Door\", \">>> ELECTRONIC_DOOR (DEBUG)|nCode accepted.|nOverride mode enabled.|nEnter properties to modify.|nexit() to quit.\");\n\t\t\t\t\t\tHax0rStep = 3;\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\telse FailHack();\n\t\t\t\t}\n\t\t\t\tif(Hax0rStep == 3)\n\t\t\t\t{\n\t\t\t\t\tif(Command ~= \"exit()\")\n\t\t\t\t\t\tEndHack();\n\t\t\t\t\telse if(Command ~= \"open()\")\n\t\t\t\t\t\thitMover.Trigger(pgUser, pgUser);\n\t\t\t\t\t/*else if( hitMover.GetPropertyText(caps(Command)) != \"\")\n\t\t\t\t\t{\n\t\t\t\t\t\tHax0rStep=4;\n\t\t\t\t\t}*/\n\t\t\t\t\telse\n\t\t\t\t\txAlert(\"Door\", \"Error in property...\");\n\t\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (hitPawn != None)\n\t\t\t{\n\t\t\t\tif(Hax0rStep == 0)\n\t\t\t\t{\n\t\t\t\t\tif(Command ~= \"debug()\")\n\t\t\t\t\t{\n\t\t\t\t\t\tHax0rStep++;\n\t\t\t\t\t\tpgUser.ClientMessage(\"event>>rundebug()\");\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\tFailHack();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (hitDecoration != None)\n\t\t\t{\n\t\t\t\tif(Hax0rStep == 0)\n\t\t\t\t{\n\t\t\t\t\tif(Command ~= \"debug()\")\n\t\t\t\t\t{\n\t\t\t\t\t\tHax0rStep++;\n\t\t\t\t\t\tpgUser.ClientMessage(\"event>>rundebug()\");\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\tFailHack();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (hitPlayer != None)\n\t\t\t{\n\t\t\t\tif(Hax0rStep == 0)\n\t\t\t\t{\n\t\t\t\t\tif(Command ~= \"debug()\")\n\t\t\t\t\t{\n\t\t\t\t\t\tHax0rStep++;\n\t\t\t\t\t\tpgUser.ClientMessage(\"event>>rundebug()\");\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\tFailHack();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\txAlert(\"ERROR\", \"Script failed... No object\");\n}",
                        "locals": [
                            "local Actor hitActor;",
                            "local vector loc, line, HitLocation, hitNormal;",
                            "local DeusExMover      hitMover;",
                            "local DeusExDecoration hitDecoration;",
                            "local ScriptedPawn\t\thitPawn;",
                            "local DeusExPlayer\thitPlayer;"
                        ],
                        "modifiers": [],
                        "name": "ParseHack",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "Command"
                            ]
                        ],
                        "return": "bool"
                    },
                    "PingLoc": {
                        "body": "{\n\t\n\t\tforeach AllActors(class'Actor',A)\n\t\t{\n\t\t\tif(string(a.Tag) ~= ident)\n\t\t\t{\n\t\t\t\tif(PrevPingA == A) //Repinging same actor\n\t\t\t\t{\n\t\t\t\t\tdist = VSize(a.Location - pgUser.Location);\n\t\t\t\t\tif(PrevDist != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(PrevDist > dist)\n\t\t\t\t\t\t\tdisttype=\"(\"$dist$\" - Closer than before)\";\n\t\t\t\t\t\telse if(PrevDist < dist)\n\t\t\t\t\t\t\tdisttype=\"(\"$dist$\" - Further than before)\";\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tdisttype=\"(\"$dist$\" - Same as before)\";\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tdisttype=\"(\"$dist$\")\";\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tPrevDist = dist;\n\t\t\t\t\txAlert(\"Ping\",GRNFT(ident)@disttype);\n\t\t\t\t\tPrevDist = dist;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tPrevPingA = A;\n\t\t\t\t\tPrevDist = VSize(a.Location - pgUser.Location);\n\t\t\t\t\txAlert(\"Ping\", GRNFT(ident)@PrevDist);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t\n\t\t\t}\n\t\t}\t\n}",
                        "locals": [
                            "local PSComputer PST;",
                            "local int k;",
                            "local string str;",
                            "local float dist;",
                            "local string disttype;",
                            "local Actor A;"
                        ],
                        "modifiers": [],
                        "name": "PingLoc",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "ident"
                            ]
                        ],
                        "return": ""
                    },
                    "ReadMail": {
                        "body": "{\n\tif(bDebug)\n\t\tLog(i);\n\tif(Messages[i] != \"\")\n\t{\n\t\tstr = Messages[i];\n\t\tif(instr(caps(Messages[i]), caps(\"[X]\")) == -1)\n\t\t\t\tMessages[i] = \"[X]\"$Messages[i];\n\t\treturn str;\n\t}\n\telse\n\t\treturn \"Error: Message is empty.\";\n}",
                        "locals": [
                            "local string str;"
                        ],
                        "modifiers": [],
                        "name": "ReadMail",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "i"
                            ]
                        ],
                        "return": "string"
                    },
                    "SendMail": {
                        "body": "{\n\tpgUser.PlaySound(sound'Send',,,, 256);\n\t//msg is everything after the first space in sendstring, or everything to the right of it\n\tmsg = Right(mailstring, Len(mailstring)-instr(mailstring,\" \")-Len(\" \"));\n\t//Target is everything to the left of the first space, to be the username\n\ttarget = Left(Right(mailstring, Len(mailstring)),InStr(mailstring,\" \"));\n\t//target = Left(sendstring, Len(sendstring)-instr(sendstring,\" \"));\n\tif(bDebug)\n\t{\n\t\tlog(\"mailstring:\"@mailstring);\n\t\tlog(\"Target:\"@target);\n\t\tlog(\"MSG:\"@msg);\n\t}\n\tforeach AllActors(class'PSComputer', PSC)\n\t{\n\t\tif(PSC.Username ~= Target)\n\t\t{\n\t\t\t//pgUser.ClientMessage(\"|P3Message sent!\");\n\t\t\t//pgUser.ClientMessage(Username$\": \"$Msg);\n\t\t\txAlert(\"Mail\",\"|P4Mail sent to \"$Target$\".|P1|n\"$msg);\n\t\t\tLog(Username$\" sent mail to \"$Target$\". (\"$MSG$\")\");\n\t\t\tPSC.AddMail(Username, MSG);\n\t\t\tbFound=True;\n\t\t}\n\t}\n\tif(!bFound)\n\t{\n\t\txAlert(\"Error\", \"|P3Message error: No computer found for that username. [\"$Target$\"]\");\n\t}\n}",
                        "locals": [
                            "local string sendstring, msg, target;",
                            "local PSComputer PSC;",
                            "local bool bFound;"
                        ],
                        "modifiers": [],
                        "name": "SendMail",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "mailstring"
                            ]
                        ],
                        "return": ""
                    },
                    "SetGroup": {
                        "body": "{\n\t\n\tforeach AllActors(class'PSComputer', PSComp)\n\t\tif(PSComp.Group ~= Group && Group != \"\" && PSComp != Self)\n\t\t\tPSComp.Notif(username$\" left your group! (\"$group$\")\");\n\n\tGroup = newgroup;\n\t\n\tforeach AllActors(class'PSComputer', PSComp)\n\t{\n\t\tif(PSComp.Group ~= Group && PSComp.Group != \"\" && PSComp != Self)\n\t\t{\n\t\t\tk++;\n\t\t\t\n\t\t\tif(k==6 || k==9)\n\t\t\t\tstr = str$\", \"$PSComp.Username$\"|n\";\n\t\t\telse\n\t\t\t\tstr = str$\", \"$PSComp.Username;\n\t\t\t\n\t\t\tPSComp.Notif(username$\" joined your group! (\"$group$\")\");\n\t\t}\n\t}\n\txAlert(\"Group\",\"Joined \"$Group$\".|n\"$str);\n}",
                        "locals": [
                            "local string sendstring, msg, target, str;",
                            "local PSComputer PSComp;",
                            "local bool bFound;",
                            "local int k;"
                        ],
                        "modifiers": [],
                        "name": "SetGroup",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "newgroup"
                            ]
                        ],
                        "return": ""
                    },
                    "SilentAdd": {
                        "body": "{ \n\t\n\tanItem = Spawn(addClass,,,addTarget.Location); \n\tanItem.SpawnCopy(addTarget);\n\tanItem.Destroy();\n}",
                        "locals": [
                            "local Inventory anItem;"
                        ],
                        "modifiers": [],
                        "name": "SilentAdd",
                        "native": false,
                        "param": [
                            [
                                "class<inventory>",
                                "addClass"
                            ],
                            [
                                "optional",
                                "DeusExPlayer",
                                "addTarget"
                            ]
                        ],
                        "return": ""
                    },
                    "ToggleAlert": {
                        "body": "{\n\t\n\tP.PlaySound(sound'Send',,,, 256);\n\t\n\tif(ZoneTag == 'None')\n\t{\n\t\txAlert(\"Error\",\"Security system not configured...\");\n\t\treturn;\n\t}\n\tforeach AllActors(class'PSZoneInfo',PSZ)\n\t{\n\t\tif(PSZ.Tag == ZoneTag)\n\t\t{\n\t\t\tif(PSZ.NotifPlayer != None)\n\t\t\t{\n\t\t\t\tPSZ.NotifPlayer = None;\n\t\t\t\txAlert(\"Alert\",\"Cancelled zone alerts.\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tPSZ.NotifPlayer = P;\n\t\t\t\txAlert(\"Alert\",\"Registered for zone alerts.\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n}",
                        "locals": [
                            "local PSZoneInfo PSZ;"
                        ],
                        "modifiers": [],
                        "name": "ToggleAlert",
                        "native": false,
                        "param": [
                            [
                                "deusexplayer",
                                "p"
                            ]
                        ],
                        "return": ""
                    },
                    "ToggleSecurity": {
                        "body": "{\n\t\n\tP.PlaySound(sound'Send',,,, 256);\n\t\n\tif(ZoneTag == 'None')\n\t{\n\t\txAlert(\"Error\",\"Security system not configured...\");\n\t\treturn;\n\t}\n\tforeach AllActors(class'PSZoneInfo',PSZ)\n\t{\n\t\tif(PSZ.Tag == ZoneTag)\n\t\t{\n\t\t\tPSZ.bRestrictedZone = !PSZ.bRestrictedZone;\n\t\t\tif(PSZ.bRestrictedZone)\n\t\t\t\txAlert(\"Alert\",\"Security system enabled\");\n\t\t\telse\n\t\t\t\txAlert(\"Alert\",\"Security system disabled\");\n\t\t}\n\t}\n}",
                        "locals": [
                            "local PSZoneInfo PSZ;"
                        ],
                        "modifiers": [],
                        "name": "ToggleSecurity",
                        "native": false,
                        "param": [
                            [
                                "deusexplayer",
                                "p"
                            ]
                        ],
                        "return": ""
                    },
                    "myData": {
                        "body": "{\n\treturn \"Notifications: \"$CountNotif()$\"|nMail: \"$CountMail(True)$\"/\"$CountMail()$\"|nCredits \"$StoredCredits;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "myData",
                        "native": false,
                        "param": [],
                        "return": "string"
                    },
                    "xAlert": {
                        "body": "{\n\n\tforeach AllActors(class'PSComputerReplicationactor', f)\n\t{\n\t\tif(Target == None)\n\t\t{\n\t\t\tif(f.Flagger == pgUser)\n\t\t\t\tf.cAlert(title, msg);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(f.Flagger == Target)\n\t\t\t\tf.cAlert(title, msg);\n\t\t}\n\t}\n}",
                        "locals": [
                            "local PSComputerReplicationactor f;"
                        ],
                        "modifiers": [],
                        "name": "xAlert",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "title"
                            ],
                            [
                                "string",
                                "msg"
                            ],
                            [
                                "optional",
                                "DeusExPlayer",
                                "Target"
                            ]
                        ],
                        "return": ""
                    },
                    "xFileMan": {
                        "body": "{\n\n\t//foreach AllActors(class'PSComputerReplicationactor', f)\n\t\t\t//if(f.Flagger == pgUser)\n\t\t\t//\tf.cMenuFiles();\n}",
                        "locals": [
                            "local PSComputerReplicationactor f;"
                        ],
                        "modifiers": [],
                        "name": "xFileMan",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "xHack": {
                        "body": "{\n\n\tforeach AllActors(class'PSComputerReplicationactor', f)\n\t{\n\t\t\tif(f.Flagger == pgUser)\n\t\t\t\tf.cMenuHack();\n\t}\n}",
                        "locals": [
                            "local PSComputerReplicationactor f;"
                        ],
                        "modifiers": [],
                        "name": "xHack",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "xOD": {
                        "body": "{\n\n\t//foreach AllActors(class'PSComputerReplicationactor', f)\n\t\t\t//if(f.Flagger == pgUser)\n\t\t\t\t//f.cMenuOD();\n}",
                        "locals": [
                            "local PSComputerReplicationactor f;"
                        ],
                        "modifiers": [],
                        "name": "xOD",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 1410,
                "replication": "",
                "states": [],
                "variables": [
                    "var() string Username, Password;",
                    "var() string Messages[250];",
                    "var() string Notifications[250];",
                    "var() name ZoneTag;",
                    "var() bool bDebug;",
                    "var() string Group;",
                    "var() string InfoProp[16];",
                    "var class<inventory> StoredInv[10];",
                    "var() config string EventAlias;",
                    "var() config name EventName;",
                    "var(Accounts) config EvStr pEvents[25];",
                    "var vector StoredLocation[10]; //Used for mark/recall",
                    "var int StoredCredits; //Used for the banking feature.",
                    "var DeusExPlayer pgUser; //Used to define the owner.",
                    "var PSComputerHandheld PSC; //Allow remote access, its a usable item that calls the functions from this, it executes frob for the player?",
                    "var string PrevCommand;",
                    "var float prevdist;",
                    "var Actor PrevpingA;",
                    "var() bool bCodebreakerEnabled;",
                    "var string Hax0rs[25];",
                    "var Actor Hax0rObj;",
                    "var int Hax0rStep;",
                    "var string generatedCode;",
                    "var() bool bOverdriver;",
                    "var string LastWord;",
                    "var int Stage;",
                    "var actor ODActor;",
                    "var() bool bFileManager;",
                    "var string CurFilePath;",
                    "var Actor FileActor;"
                ]
            }
        },
        "PSComputerHandheld.uc": {
            "body": "//=============================================================================\n// Multitool.\n//=============================================================================\nclass PSComputerHandheld extends DeusExPickup;\n\nstate Activated\n{\n\tfunction Activate()\n\t{\n\t\t// can't turn it off\n\t}\n\n\tfunction BeginState()\n\t{\n\t\tlocal DeusExPlayer player, hitplayer;\n\t\tlocal scriptedpawn hitpawn;\n\t\tlocal dxScriptedPawn hitpawn2;\n\t\tlocal Actor       hitActor;\n\t\tlocal Vector      hitLocation, hitNormal;\n\t\tlocal Vector      position, line;\n\t\tlocal float Dist;\n\t\tlocal PSComputer psc;\n\t\tlocal bool bFound;\n\t\t\n\t\tSuper.BeginState();\n\t\tplayer = DeusExPlayer(Owner);\n\t\t\n\t\tforeach AllActors(class'PSComputer',psc)\n\t\t\tif(PSC.pgUser == player)\n\t\t\t{\n\t\t\t\tbFound=True;\n\t\t\t\tPSC.Frob(player, Self);\n\t\t\t}\n\t\t\n\t\tif(!bFound)\t\n\t\t\tplayer.clientmessage(\"No computer found... Be sure to successfully login to one to register it.\");\n\t\tGotoState('DeActivated');\n\t}\nBegin:\n}\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t\tMaxCopies = 1;\n}\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\ndefaultproperties\n{\n     maxCopies=1\n     bActivatable=True\n     ItemName=\"Handheld Computer\"\n     PlayerViewOffset=(X=20.000000,Y=10.000000,Z=-16.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.MultitoolPOV'\n     PickupViewMesh=LodMesh'DeusExItems.Multitool'\n     ThirdPersonMesh=LodMesh'DeusExItems.Multitool3rd'\n     LandSound=Sound'DeusExSounds.Generic.PlasticHit2'\n     Icon=Texture'DeusExUI.Icons.BeltIconMultitool'\n     M_Activated=\" connecting to network...\"\n     largeIcon=Texture'DeusExUI.Icons.LargeIconMultitool'\n     largeIconWidth=28\n     largeIconHeight=46\n     Description=\"\"\n     beltDescription=\"COMPUTER\"\n     Mesh=LodMesh'DeusExItems.Multitool'\n     CollisionRadius=4.800000\n     CollisionHeight=0.860000\n     Mass=20.000000\n     Buoyancy=10.000000\n}\n",
            "name": "PSComputerHandheld.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "maxCopies=1",
                    "bActivatable=True",
                    "ItemName=\"Handheld Computer\"",
                    "PlayerViewOffset=(X=20.000000,Y=10.000000,Z=-16.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.MultitoolPOV'",
                    "PickupViewMesh=LodMesh'DeusExItems.Multitool'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.Multitool3rd'",
                    "LandSound=Sound'DeusExSounds.Generic.PlasticHit2'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconMultitool'",
                    "M_Activated=\" connecting to network...\"",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconMultitool'",
                    "largeIconWidth=28",
                    "largeIconHeight=46",
                    "Description=\"\"",
                    "beltDescription=\"COMPUTER\"",
                    "Mesh=LodMesh'DeusExItems.Multitool'",
                    "CollisionRadius=4.800000",
                    "CollisionHeight=0.860000",
                    "Mass=20.000000",
                    "Buoyancy=10.000000"
                ],
                "exec": [],
                "extends": "DeusExPickup",
                "functions": {
                    "Activate": {
                        "body": "{\n\t\t// can't turn it off\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Activate",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "BeginState": {
                        "body": "{\n\t\t\n\t\tSuper.BeginState();\n\t\tplayer = DeusExPlayer(Owner);\n\t\t\n\t\tforeach AllActors(class'PSComputer',psc)\n\t\t\tif(PSC.pgUser == player)\n\t\t\t{\n\t\t\t\tbFound=True;\n\t\t\t\tPSC.Frob(player, Self);\n\t\t\t}\n\t\t\n\t\tif(!bFound)\t\n\t\t\tplayer.clientmessage(\"No computer found... Be sure to successfully login to one to register it.\");\n\t\tGotoState('DeActivated');\n\t}",
                        "locals": [
                            "local DeusExPlayer player, hitplayer;",
                            "local scriptedpawn hitpawn;",
                            "local dxScriptedPawn hitpawn2;",
                            "local Actor       hitActor;",
                            "local Vector      hitLocation, hitNormal;",
                            "local Vector      position, line;",
                            "local float Dist;",
                            "local PSComputer psc;",
                            "local bool bFound;"
                        ],
                        "modifiers": [],
                        "name": "BeginState",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t\tMaxCopies = 1;\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 79,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "PSComputerMenu.uc": {
            "body": "//=============================================================================\n// BoxSizeWindow.\n//=============================================================================\nclass PSComputerMenu expands MenuUIScreenWindow;\n\nvar MenuUIActionButtonWindow SendButton, exitButton;\nvar MenuUIEditWindow editCommand, editPassword;\nvar MenuUIHeaderWindow winText;\nvar localized string exitbuttontext, passwordlabel, sendbuttontext, commandlabel;\nvar DeusExPlayer _windowOwner;\nvar PSComputer Ac;\nvar PSComputerReplicationActor Mastah;\nvar localized string Username;\nvar string Password;\nvar bool bRem;\nvar MenuUIMessageBoxWindow AlertWin;\n\nevent InitWindow()\n{\n   local Window W;\n\n   Super.InitWindow();\n   CreateTextWindow();\n   SendButton = winButtonBar.AddButton(sendButtonText, HALIGN_Right);\n   exitButton = winButtonBar.AddButton(exitButtonText, HALIGN_Right);\n  \n\tCreateMenuLabel(10, 22, CommandLabel, winClient);\n\tCreateMenuLabel(10, 55, PasswordLabel, winClient);\n\teditPassword = CreateMenuEditWindow(105, 54, 143, 20, winClient);\n\tEditCommand = CreateMenuEditWindow(105, 20, 143, 20, winClient);\n\tEditCommand.SetMaxSize(70); //cap said to fit the window as best as possible until the word wrap can be figured out..\n\t\n   winClient.SetBackground(Texture'DeusExUI.MaskTexture');\n   winClient.SetBackgroundStyle(DSTY_Modulated);\n\n   W = winClient.NewChild(Class'Window');\n   W.SetSize(ClientWidth, ClientHeight);\n   W.SetBackground(Texture'DeusExUI.MaskTexture');\n   W.SetBackgroundStyle(DSTY_Modulated);\n   W.Lower();\n\t\n   SetTitle(\"playgroundOS v0.8\");\n}\n\nfunction AddUserTitle(string str)\n{\n\tSetTitle(\"[\"$str$\"] playgroundOS v0.8\");\n}\n\nfunction bool ButtonActivated( Window buttonPressed )\n{\n\tlocal bool bHandled;\n\tlocal string GetCom, GetPass;\n\tbHandled = True;\n\n\tSuper.ButtonActivated(buttonPressed);\n\n\tswitch( buttonPressed )\n\t{\n\t\tcase SendButton:\n\t\t\tGetCom = editCommand.GetText();\n\t\t\tGetPass = editPassword.GetText();\n\t\t\t\tif(Mastah.ParseCommand(_windowOwner, getPass, getCom))\n\t\t\t\t{\n\t\t\t\t\t//_windowOwner.ClientMessage(\"Sending login\"@_windowowner.playerreplicationinfo.playername@getuser@getpass);\n\t\t\t\t\troot.PopWindow();\n\t\t\t\t\tbHandled = True;\n\t\t\t\t}\n\t\t//\t}\n\t\t\tbreak;\n\t\t\t\n\t\tcase exitButton:\n\t\t\troot.PopWindow();\n\t\t\tbHandled = True;\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tbHandled = False;\n\t\t\tbreak;\n\t}\n\n\treturn bHandled;\n}\n\nfunction CreateTextWindow()\n{\n\twinText = CreateMenuHeader(21, 13, \"\", winClient);\n\twinText.SetTextAlignments(HALIGN_Center, VALIGN_Center);\n\twinText.SetFont(Font'FontMenuHeaders_DS');\n\twinText.SetWindowAlignments(HALIGN_Full, VALIGN_Full, 20, 14);\n}\n\nfunction SetMessageText( String msgText )\n{\n\twinText.SetText(msgText);\n\n\tAskParentForReconfigure();\n}\n\nevent bool VirtualKeyPressed(EInputKey key, bool bRepeat)\n{\n\tlocal bool bHandled;\n\n\tswitch( key )\n\t{\n\t\tcase IK_Enter:\n\t\t\t\tif(Mastah.ParseCommand(_windowOwner, editPassword.GetText(), editCommand.GetText()))\n\t\t\t\t{\n\t\t\t\t\troot.PopWindow();\n\t\t\t\t}\n\t\t\t\tbHandled = True;\n\t\t\tbreak;\n\t}\n\n\treturn bHandled;\n}\n\nevent bool RawKeyPressed(EInputKey key, EInputState iState, bool bRepeat)\n{\n\tif (key == IK_Enter)// &&//(iState == IST_Release))\n\t{\n\t\t\t\tif(Mastah.ParseCommand(_windowOwner, editPassword.GetText(), editCommand.GetText()))\n\t\t\t\t{\n\t\t\t\t\troot.PopWindow();\n\t\t\t\t}\n\t\treturn True;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\n\ndefaultproperties\n{\n     exitbuttontext=\"Exit\"\n     PasswordLabel=\"Password\"\n     sendbuttontext=\"Send <Enter>\"\n     commandlabel=\"Command\"\n     ClientWidth=300\n     ClientHeight=75\n     textureRows=3\n     textureCols=2\n     bUsesHelpWindow=False\n}\n",
            "name": "PSComputerMenu.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "exitbuttontext=\"Exit\"",
                    "PasswordLabel=\"Password\"",
                    "sendbuttontext=\"Send <Enter>\"",
                    "commandlabel=\"Command\"",
                    "ClientWidth=300",
                    "ClientHeight=75",
                    "textureRows=3",
                    "textureCols=2",
                    "bUsesHelpWindow=False"
                ],
                "exec": [],
                "extends": "MenuUIScreenWindow",
                "functions": {
                    "AddUserTitle": {
                        "body": "{\n\tSetTitle(\"[\"$str$\"] playgroundOS v0.8\");\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "AddUserTitle",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "str"
                            ]
                        ],
                        "return": ""
                    },
                    "ButtonActivated": {
                        "body": "{\n\tbHandled = True;\n\n\tSuper.ButtonActivated(buttonPressed);\n\n\tswitch( buttonPressed )\n\t{\n\t\tcase SendButton:\n\t\t\tGetCom = editCommand.GetText();\n\t\t\tGetPass = editPassword.GetText();\n\t\t\t\tif(Mastah.ParseCommand(_windowOwner, getPass, getCom))\n\t\t\t\t{\n\t\t\t\t\t//_windowOwner.ClientMessage(\"Sending login\"@_windowowner.playerreplicationinfo.playername@getuser@getpass);\n\t\t\t\t\troot.PopWindow();\n\t\t\t\t\tbHandled = True;\n\t\t\t\t}\n\t\t//\t}\n\t\t\tbreak;\n\t\t\t\n\t\tcase exitButton:\n\t\t\troot.PopWindow();\n\t\t\tbHandled = True;\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tbHandled = False;\n\t\t\tbreak;\n\t}",
                        "locals": [
                            "local bool bHandled;",
                            "local string GetCom, GetPass;"
                        ],
                        "modifiers": [],
                        "name": "ButtonActivated",
                        "native": false,
                        "param": [
                            [
                                "Window",
                                "buttonPressed"
                            ]
                        ],
                        "return": "bool"
                    },
                    "CreateTextWindow": {
                        "body": "{\n\twinText = CreateMenuHeader(21, 13, \"\", winClient);\n\twinText.SetTextAlignments(HALIGN_Center, VALIGN_Center);\n\twinText.SetFont(Font'FontMenuHeaders_DS');\n\twinText.SetWindowAlignments(HALIGN_Full, VALIGN_Full, 20, 14);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "CreateTextWindow",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "InitWindow": {
                        "body": "{\n\n   Super.InitWindow();\n   CreateTextWindow();\n   SendButton = winButtonBar.AddButton(sendButtonText, HALIGN_Right);\n   exitButton = winButtonBar.AddButton(exitButtonText, HALIGN_Right);\n  \n\tCreateMenuLabel(10, 22, CommandLabel, winClient);\n\tCreateMenuLabel(10, 55, PasswordLabel, winClient);\n\teditPassword = CreateMenuEditWindow(105, 54, 143, 20, winClient);\n\tEditCommand = CreateMenuEditWindow(105, 20, 143, 20, winClient);\n\tEditCommand.SetMaxSize(70); //cap said to fit the window as best as possible until the word wrap can be figured out..\n\t\n   winClient.SetBackground(Texture'DeusExUI.MaskTexture');\n   winClient.SetBackgroundStyle(DSTY_Modulated);\n\n   W = winClient.NewChild(Class'Window');\n   W.SetSize(ClientWidth, ClientHeight);\n   W.SetBackground(Texture'DeusExUI.MaskTexture');\n   W.SetBackgroundStyle(DSTY_Modulated);\n   W.Lower();\n\t\n   SetTitle(\"playgroundOS v0.8\");\n}",
                        "locals": [
                            "local Window W;"
                        ],
                        "modifiers": [],
                        "name": "InitWindow",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "RawKeyPressed": {
                        "body": "{\n\tif (key == IK_Enter)// &&//(iState == IST_Release))\n\t{\n\t\t\t\tif(Mastah.ParseCommand(_windowOwner, editPassword.GetText(), editCommand.GetText()))\n\t\t\t\t{\n\t\t\t\t\troot.PopWindow();\n\t\t\t\t}\n\t\treturn True;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "RawKeyPressed",
                        "native": false,
                        "param": [
                            [
                                "EInputKey",
                                "key"
                            ],
                            [
                                "EInputState",
                                "iState"
                            ],
                            [
                                "bool",
                                "bRepeat"
                            ]
                        ],
                        "return": "bool"
                    },
                    "SetMessageText": {
                        "body": "{\n\twinText.SetText(msgText);\n\n\tAskParentForReconfigure();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetMessageText",
                        "native": false,
                        "param": [
                            [
                                "String",
                                "msgText"
                            ]
                        ],
                        "return": ""
                    },
                    "VirtualKeyPressed": {
                        "body": "{\n\n\tswitch( key )\n\t{\n\t\tcase IK_Enter:\n\t\t\t\tif(Mastah.ParseCommand(_windowOwner, editPassword.GetText(), editCommand.GetText()))\n\t\t\t\t{\n\t\t\t\t\troot.PopWindow();\n\t\t\t\t}\n\t\t\t\tbHandled = True;\n\t\t\tbreak;\n\t}\n\n\treturn bHandled;\n}",
                        "locals": [
                            "local bool bHandled;"
                        ],
                        "modifiers": [],
                        "name": "VirtualKeyPressed",
                        "native": false,
                        "param": [
                            [
                                "EInputKey",
                                "key"
                            ],
                            [
                                "bool",
                                "bRepeat"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 146,
                "replication": "",
                "states": [],
                "variables": [
                    "var MenuUIActionButtonWindow SendButton, exitButton;",
                    "var MenuUIEditWindow editCommand, editPassword;",
                    "var MenuUIHeaderWindow winText;",
                    "var localized string exitbuttontext, passwordlabel, sendbuttontext, commandlabel;",
                    "var DeusExPlayer _windowOwner;",
                    "var PSComputer Ac;",
                    "var PSComputerReplicationActor Mastah;",
                    "var localized string Username;",
                    "var string Password;",
                    "var bool bRem;",
                    "var MenuUIMessageBoxWindow AlertWin;"
                ]
            }
        },
        "PSComputerMenuHack.uc": {
            "body": "//=============================================================================\n// BoxSizeWindow.\n//=============================================================================\nclass PSComputerMenuHack expands MenuUIScreenWindow;\n\nvar MenuUIActionButtonWindow SendButton, exitButton;\nvar MenuUIEditWindow editCommand, editPassword;\nvar MenuUIHeaderWindow winText;\nvar localized string exitbuttontext, passwordlabel, sendbuttontext, commandlabel;\nvar DeusExPlayer _windowOwner;\nvar PSComputer Ac;\nvar PSComputerReplicationActor Mastah;\n\nevent InitWindow()\n{\n   local Window W;\n\n   Super.InitWindow();\n   CreateTextWindow();\n   SendButton = winButtonBar.AddButton(sendButtonText, HALIGN_Right);\n   exitButton = winButtonBar.AddButton(exitButtonText, HALIGN_Right);\n  \n\tCreateMenuLabel(10, 22, CommandLabel, winClient);\n\tEditCommand = CreateMenuEditWindow(105, 20, 143, 20, winClient);\n\tEditCommand.SetMaxSize(255); //cap said to fit the window as best as possible until the word wrap can be figured out..\n\t\n   winClient.SetBackground(Texture'DeusExUI.MaskTexture');\n   winClient.SetBackgroundStyle(DSTY_Modulated);\n\n   W = winClient.NewChild(Class'Window');\n   W.SetSize(ClientWidth, ClientHeight);\n   W.SetBackground(Texture'DeusExUI.MaskTexture');\n   W.SetBackgroundStyle(DSTY_Modulated);\n   W.Lower();\n\t\n   SetTitle(\"playgroundScripter v0.8\");\n}\n\nfunction bool ButtonActivated( Window buttonPressed )\n{\n\tlocal bool bHandled;\n\tlocal string GetCom, GetPass;\n\tbHandled = True;\n\n\tSuper.ButtonActivated(buttonPressed);\n\n\tswitch( buttonPressed )\n\t{\n\t\tcase SendButton:\n\t\t\tGetCom = editCommand.GetText();\n\t\t\t\tif(Mastah.ParseHack(getCom))\n\t\t\t\t{\n\t\t\t\t\t//_windowOwner.ClientMessage(\"Sending login\"@_windowowner.playerreplicationinfo.playername@getuser@getpass);\n\t\t\t\t\troot.PopWindow();\n\t\t\t\t\tbHandled = True;\n\t\t\t\t}\n\t\t//\t}\n\t\t\tbreak;\n\t\t\t\n\t\tcase exitButton:\n\t\t\troot.PopWindow();\n\t\t\tbHandled = True;\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tbHandled = False;\n\t\t\tbreak;\n\t}\n\n\treturn bHandled;\n}\n\nfunction CreateTextWindow()\n{\n\twinText = CreateMenuHeader(21, 13, \"\", winClient);\n\twinText.SetTextAlignments(HALIGN_Center, VALIGN_Center);\n\twinText.SetFont(Font'FontMenuHeaders_DS');\n\twinText.SetWindowAlignments(HALIGN_Full, VALIGN_Full, 20, 14);\n}\n\nfunction SetMessageText( String msgText )\n{\n\twinText.SetText(msgText);\n\n\tAskParentForReconfigure();\n}\n\nevent bool VirtualKeyPressed(EInputKey key, bool bRepeat)\n{\n\tlocal bool bHandled;\n\n\tswitch( key )\n\t{\n\t\tcase IK_Enter:\n\t\t\t\tif(Mastah.ParseHack(editCommand.GetText()))\n\t\t\t\t{\n\t\t\t\t\troot.PopWindow();\n\t\t\t\t}\n\t\t\t\tbHandled = True;\n\t\t\tbreak;\n\t}\n\n\treturn bHandled;\n}\n\nevent bool RawKeyPressed(EInputKey key, EInputState iState, bool bRepeat)\n{\n\tif (key == IK_Enter)// &&//(iState == IST_Release))\n\t{\n\t\t\t\tif(Mastah.ParseHack(editCommand.GetText()))\n\t\t\t\t{\n\t\t\t\t\troot.PopWindow();\n\t\t\t\t}\n\t\treturn True;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\n\ndefaultproperties\n{\n     exitbuttontext=\"Exit\"\n     PasswordLabel=\"Password\"\n     sendbuttontext=\"Send <Enter>\"\n     commandlabel=\"Command\"\n     ClientWidth=300\n     ClientHeight=75\n     textureRows=3\n     textureCols=2\n     bUsesHelpWindow=False\n}\n",
            "name": "PSComputerMenuHack.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "exitbuttontext=\"Exit\"",
                    "PasswordLabel=\"Password\"",
                    "sendbuttontext=\"Send <Enter>\"",
                    "commandlabel=\"Command\"",
                    "ClientWidth=300",
                    "ClientHeight=75",
                    "textureRows=3",
                    "textureCols=2",
                    "bUsesHelpWindow=False"
                ],
                "exec": [],
                "extends": "MenuUIScreenWindow",
                "functions": {
                    "ButtonActivated": {
                        "body": "{\n\tbHandled = True;\n\n\tSuper.ButtonActivated(buttonPressed);\n\n\tswitch( buttonPressed )\n\t{\n\t\tcase SendButton:\n\t\t\tGetCom = editCommand.GetText();\n\t\t\t\tif(Mastah.ParseHack(getCom))\n\t\t\t\t{\n\t\t\t\t\t//_windowOwner.ClientMessage(\"Sending login\"@_windowowner.playerreplicationinfo.playername@getuser@getpass);\n\t\t\t\t\troot.PopWindow();\n\t\t\t\t\tbHandled = True;\n\t\t\t\t}\n\t\t//\t}\n\t\t\tbreak;\n\t\t\t\n\t\tcase exitButton:\n\t\t\troot.PopWindow();\n\t\t\tbHandled = True;\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tbHandled = False;\n\t\t\tbreak;\n\t}",
                        "locals": [
                            "local bool bHandled;",
                            "local string GetCom, GetPass;"
                        ],
                        "modifiers": [],
                        "name": "ButtonActivated",
                        "native": false,
                        "param": [
                            [
                                "Window",
                                "buttonPressed"
                            ]
                        ],
                        "return": "bool"
                    },
                    "CreateTextWindow": {
                        "body": "{\n\twinText = CreateMenuHeader(21, 13, \"\", winClient);\n\twinText.SetTextAlignments(HALIGN_Center, VALIGN_Center);\n\twinText.SetFont(Font'FontMenuHeaders_DS');\n\twinText.SetWindowAlignments(HALIGN_Full, VALIGN_Full, 20, 14);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "CreateTextWindow",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "InitWindow": {
                        "body": "{\n\n   Super.InitWindow();\n   CreateTextWindow();\n   SendButton = winButtonBar.AddButton(sendButtonText, HALIGN_Right);\n   exitButton = winButtonBar.AddButton(exitButtonText, HALIGN_Right);\n  \n\tCreateMenuLabel(10, 22, CommandLabel, winClient);\n\tEditCommand = CreateMenuEditWindow(105, 20, 143, 20, winClient);\n\tEditCommand.SetMaxSize(255); //cap said to fit the window as best as possible until the word wrap can be figured out..\n\t\n   winClient.SetBackground(Texture'DeusExUI.MaskTexture');\n   winClient.SetBackgroundStyle(DSTY_Modulated);\n\n   W = winClient.NewChild(Class'Window');\n   W.SetSize(ClientWidth, ClientHeight);\n   W.SetBackground(Texture'DeusExUI.MaskTexture');\n   W.SetBackgroundStyle(DSTY_Modulated);\n   W.Lower();\n\t\n   SetTitle(\"playgroundScripter v0.8\");\n}",
                        "locals": [
                            "local Window W;"
                        ],
                        "modifiers": [],
                        "name": "InitWindow",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "RawKeyPressed": {
                        "body": "{\n\tif (key == IK_Enter)// &&//(iState == IST_Release))\n\t{\n\t\t\t\tif(Mastah.ParseHack(editCommand.GetText()))\n\t\t\t\t{\n\t\t\t\t\troot.PopWindow();\n\t\t\t\t}\n\t\treturn True;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "RawKeyPressed",
                        "native": false,
                        "param": [
                            [
                                "EInputKey",
                                "key"
                            ],
                            [
                                "EInputState",
                                "iState"
                            ],
                            [
                                "bool",
                                "bRepeat"
                            ]
                        ],
                        "return": "bool"
                    },
                    "SetMessageText": {
                        "body": "{\n\twinText.SetText(msgText);\n\n\tAskParentForReconfigure();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetMessageText",
                        "native": false,
                        "param": [
                            [
                                "String",
                                "msgText"
                            ]
                        ],
                        "return": ""
                    },
                    "VirtualKeyPressed": {
                        "body": "{\n\n\tswitch( key )\n\t{\n\t\tcase IK_Enter:\n\t\t\t\tif(Mastah.ParseHack(editCommand.GetText()))\n\t\t\t\t{\n\t\t\t\t\troot.PopWindow();\n\t\t\t\t}\n\t\t\t\tbHandled = True;\n\t\t\tbreak;\n\t}\n\n\treturn bHandled;\n}",
                        "locals": [
                            "local bool bHandled;"
                        ],
                        "modifiers": [],
                        "name": "VirtualKeyPressed",
                        "native": false,
                        "param": [
                            [
                                "EInputKey",
                                "key"
                            ],
                            [
                                "bool",
                                "bRepeat"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 134,
                "replication": "",
                "states": [],
                "variables": [
                    "var MenuUIActionButtonWindow SendButton, exitButton;",
                    "var MenuUIEditWindow editCommand, editPassword;",
                    "var MenuUIHeaderWindow winText;",
                    "var localized string exitbuttontext, passwordlabel, sendbuttontext, commandlabel;",
                    "var DeusExPlayer _windowOwner;",
                    "var PSComputer Ac;",
                    "var PSComputerReplicationActor Mastah;"
                ]
            }
        },
        "PSComputerReplicationActor.uc": {
            "body": "// Stores Login data\n//============================\nclass PSComputerReplicationactor extends PGActors;\n\nvar PlayerPawn Flagger;\nvar PSComputer Ac;\nvar string Username, Password;\nvar bool bRem;\n\nreplication\n{\n     reliable if (Role == ROLE_Authority)\n        cMenuLogin, cAlert, cMenuHack;//, cMenuRegister;//, currentMode;\n\n     reliable if (Role < ROLE_Authority)\n        ParseCommand;//setSize, createBox;\n}\n\nsimulated final function cMenuHack()\n{\n\tlocal DeusExPlayer _Player;\n\tlocal DeusExRootWindow _root;\n\tlocal PSComputerMenu _boxWindow;\n\t_Player = DeusExPlayer(Owner);\n\t//log(\"Called cMenuLogin for\"@_Player.playerreplicationinfo.playername );\n\tif(_Player != None)\n\t{\n\t\t//_Player.InitRootWindow();\n\t\t_root = DeusExRootWindow(_Player.rootWindow);\n\t\tif(_root != None)\n\t\t{\n\t\t\t_boxWindow = PSComputerMenu(_root.InvokeUIScreen(Class'PSComputerMenuHack', True));\n\t\t\tif(_boxWindow != None)\n\t\t\t{\n\t\t\t\t_boxWindow._windowOwner = _Player;\n\t\t\t\t_boxWindow.Ac = Ac;\n\t\t\t\t_boxWindow.Mastah = Self;\n\t\t\t\t//_boxWindow.AddUserTitle(Username);\n\t\t\t}\n\t\t}\n\t}\n}\n\nsimulated final function cMenuLogin()\n{\n\tlocal DeusExPlayer _Player;\n\tlocal DeusExRootWindow _root;\n\tlocal PSComputerMenu _boxWindow;\n\t_Player = DeusExPlayer(Owner);\n\t//log(\"Called cMenuLogin for\"@_Player.playerreplicationinfo.playername );\n\tif(_Player != None)\n\t{\n\t\t//_Player.InitRootWindow();\n\t\t_root = DeusExRootWindow(_Player.rootWindow);\n\t\tif(_root != None)\n\t\t{\n\t\t\t_boxWindow = PSComputerMenu(_root.InvokeUIScreen(Class'PSComputerMenu', True));\n\t\t\tif(_boxWindow != None)\n\t\t\t{\n\t\t\t\t_boxWindow._windowOwner = _Player;\n\t\t\t\t_boxWindow.Ac = Ac;\n\t\t\t\t_boxWindow.Mastah = Self;\n\t\t\t\t_boxWindow.Username = Username;\n\t\t\t\t_boxWindow.Password = Password;\n\t\t\t\t_boxWindow.bRem = bRem;\n\t\t\t\t//_boxWindow.AddUserTitle(Username);\n\t\t\t}\n\t\t}\n\t}\n}\n\nsimulated final function cAlert(string title, string msg)\n{\n\tlocal DeusExPlayer _Player;\n\tlocal DeusExRootWindow _root;\n\tlocal MenuAlert _boxWindow;\n\t_Player = DeusExPlayer(Owner);\n\t//log(\"Called cMenuLogin for\"@_Player.playerreplicationinfo.playername );\n\tif(_Player != None)\n\t{\n\t\t//_Player.InitRootWindow();\n\t\t_root = DeusExRootWindow(_Player.rootWindow);\n\t\tif(_root != None)\n\t\t{\n\t\t\t_boxWindow = MenuAlert(_root.InvokeUIScreen(Class'MenuAlert', True));\n\t\t\tif(_boxWindow != None)\n\t\t\t{\n\t\t\t\t_boxWindow._windowOwner = _Player;\n\t\t\t\t_boxWindow.Ac = Ac;\n\t\t\t\t_boxWindow.Mastah = Self;\n\t\t\t\t_boxWindow.crt(title, msg);\n\t\t\t//\t_boxWindow.ClientWidth = len(msg);\n\t\t\t}\n\t\t}\n\t}\n}\n\nsimulated function bool ParseCommand(deusexplayer p, string Password, string Command)\n{\n\treturn ac.ParseCommand(p, Password,Command);\n}\n\nsimulated function bool ParseHack(string Command)\n{\n\treturn ac.ParseHack(Command);\n}\n\nfunction timer()\n{\n\t\tSetOwner(flagger);\n\t\tcMenuLogin();\n}\n\ndefaultproperties\n{\n     NetPriority=1.500000\n}\n",
            "name": "PSComputerReplicationActor.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "NetPriority=1.500000"
                ],
                "exec": [],
                "extends": "PGActors",
                "functions": {
                    "ParseCommand": {
                        "body": "{\n\treturn ac.ParseCommand(p, Password,Command);\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "ParseCommand",
                        "native": false,
                        "param": [
                            [
                                "deusexplayer",
                                "p"
                            ],
                            [
                                "string",
                                "Password"
                            ],
                            [
                                "string",
                                "Command"
                            ]
                        ],
                        "return": "bool"
                    },
                    "ParseHack": {
                        "body": "{\n\treturn ac.ParseHack(Command);\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "ParseHack",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "Command"
                            ]
                        ],
                        "return": "bool"
                    },
                    "cAlert": {
                        "body": "{\n\t_Player = DeusExPlayer(Owner);\n\t//log(\"Called cMenuLogin for\"@_Player.playerreplicationinfo.playername );\n\tif(_Player != None)\n\t{\n\t\t//_Player.InitRootWindow();\n\t\t_root = DeusExRootWindow(_Player.rootWindow);\n\t\tif(_root != None)\n\t\t{\n\t\t\t_boxWindow = MenuAlert(_root.InvokeUIScreen(Class'MenuAlert', True));\n\t\t\tif(_boxWindow != None)\n\t\t\t{\n\t\t\t\t_boxWindow._windowOwner = _Player;\n\t\t\t\t_boxWindow.Ac = Ac;\n\t\t\t\t_boxWindow.Mastah = Self;\n\t\t\t\t_boxWindow.crt(title, msg);\n\t\t\t//\t_boxWindow.ClientWidth = len(msg);\n\t\t\t}\n\t\t}\n\t}\n}",
                        "locals": [
                            "local DeusExPlayer _Player;",
                            "local DeusExRootWindow _root;",
                            "local MenuAlert _boxWindow;"
                        ],
                        "modifiers": [
                            "final",
                            "simulated"
                        ],
                        "name": "cAlert",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "title"
                            ],
                            [
                                "string",
                                "msg"
                            ]
                        ],
                        "return": ""
                    },
                    "cMenuHack": {
                        "body": "{\n\t_Player = DeusExPlayer(Owner);\n\t//log(\"Called cMenuLogin for\"@_Player.playerreplicationinfo.playername );\n\tif(_Player != None)\n\t{\n\t\t//_Player.InitRootWindow();\n\t\t_root = DeusExRootWindow(_Player.rootWindow);\n\t\tif(_root != None)\n\t\t{\n\t\t\t_boxWindow = PSComputerMenu(_root.InvokeUIScreen(Class'PSComputerMenuHack', True));\n\t\t\tif(_boxWindow != None)\n\t\t\t{\n\t\t\t\t_boxWindow._windowOwner = _Player;\n\t\t\t\t_boxWindow.Ac = Ac;\n\t\t\t\t_boxWindow.Mastah = Self;\n\t\t\t\t//_boxWindow.AddUserTitle(Username);\n\t\t\t}\n\t\t}\n\t}\n}",
                        "locals": [
                            "local DeusExPlayer _Player;",
                            "local DeusExRootWindow _root;",
                            "local PSComputerMenu _boxWindow;"
                        ],
                        "modifiers": [
                            "final",
                            "simulated"
                        ],
                        "name": "cMenuHack",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "cMenuLogin": {
                        "body": "{\n\t_Player = DeusExPlayer(Owner);\n\t//log(\"Called cMenuLogin for\"@_Player.playerreplicationinfo.playername );\n\tif(_Player != None)\n\t{\n\t\t//_Player.InitRootWindow();\n\t\t_root = DeusExRootWindow(_Player.rootWindow);\n\t\tif(_root != None)\n\t\t{\n\t\t\t_boxWindow = PSComputerMenu(_root.InvokeUIScreen(Class'PSComputerMenu', True));\n\t\t\tif(_boxWindow != None)\n\t\t\t{\n\t\t\t\t_boxWindow._windowOwner = _Player;\n\t\t\t\t_boxWindow.Ac = Ac;\n\t\t\t\t_boxWindow.Mastah = Self;\n\t\t\t\t_boxWindow.Username = Username;\n\t\t\t\t_boxWindow.Password = Password;\n\t\t\t\t_boxWindow.bRem = bRem;\n\t\t\t\t//_boxWindow.AddUserTitle(Username);\n\t\t\t}\n\t\t}\n\t}\n}",
                        "locals": [
                            "local DeusExPlayer _Player;",
                            "local DeusExRootWindow _root;",
                            "local PSComputerMenu _boxWindow;"
                        ],
                        "modifiers": [
                            "final",
                            "simulated"
                        ],
                        "name": "cMenuLogin",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "timer": {
                        "body": "{\n\t\tSetOwner(flagger);\n\t\tcMenuLogin();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 118,
                "replication": "",
                "states": [],
                "variables": [
                    "var PlayerPawn Flagger;",
                    "var PSComputer Ac;",
                    "var string Username, Password;",
                    "var bool bRem;"
                ]
            }
        },
        "PSCreditCard.uc": {
            "body": "//================================================\n// PSCreditCard\n//================================================\nClass PSCreditCard extends DeusExWeapon;\n\nvar int mode;\nvar string Job;\nvar int Fitness, Strength, Intellect, CrimLevel;\n\nvar bool bDeposit;\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) || (BeltSpot == 0) );\n}\n/*)\nfunction DropFrom(vector StartLocation)\n{\n}\n*/\n\nfunction BecomePickup()\n{\n   Super(Inventory).BecomePickup();\n   lifespan=0;\n   SetDisplayProperties(Default.Style, Default.Texture, Default.bUnlit, Default.bMeshEnviromap );\n}\n\nfunction Fire(float Value) \n{\n\tlocal DeusExPlayer P;\n\tlocal vector loc;\n\tlocal rotator rot;\n\t\n\tP=DeusExPlayer(Owner);\n\n\tloc = Owner.Location;\n\trot = Owner.Rotation;\n\tloc += 2.0 * Owner.CollisionRadius * vector(P.ViewRotation);\n\tloc.Z += Owner.CollisionHeight * 0.9;\n\n\tif(mode==10)\n\t{\n\t\tif(P.Credits>=10)\n\t\t{\n\t\t\tP.Credits-=10;\n\t\t\n\t\t\tSpawn(class'Cred10', Owner,, loc, rot);\n\t\t\treturn;\n\t\t}\n\t}\n\n\tif(mode==100)\n\t{\n\t\tif(P.Credits>=100)\n\t\t{\n\t\t\tP.Credits-=100;\n\t\t\tSpawn(class'Cred100', Owner,, loc, rot);\n\t\t\treturn;\n\t\t}\n\t}\n\n\tif(mode==500)\n\t{\n\t\tif(P.Credits>=500)\n\t\t{\n\t\t\tP.Credits-=500;\n\t\t\tSpawn(class'Cred500', Owner,, loc, rot);\n\t\t\treturn;\n\t\t}\n\t}\n}\n\nsimulated function ScopeToggle() \n{ \n\tif(mode == 500)\n\t{\n\t\tmode = 10;\n\t\tDeusExPlayer(Owner).ClientMessage(\"10 Credit mode selected.\");\n\t\treturn;\n\t}\n\n\tif(mode == 100)\n\t{\n\t\tmode = 500;\n\t\tDeusExPlayer(Owner).ClientMessage(\"500 Credit mode selected.\");\n\t\treturn;\n\t}\n\n\tif(mode == 10)\n\t{\n\t\tmode = 100;\n\t\tDeusExPlayer(Owner).ClientMessage(\"100 Credit mode selected.\");\n\t\treturn;\n\t}\n}\n\nfunction CycleAmmo()\n{\n\tif(bDeposit == False)\n\t{\n\t\tbDeposit = True;\n\t\tDeusExPlayer(Owner).ClientMessage(\"|p7ATM deposit mode selected.\");\n\t}\n\telse\n\t{\n\t\tbDeposit = False;\n\t\tDeusExPlayer(Owner).ClientMessage(\"|p7ATM withdrawl mode selected.\");\n\t}\n}\n\nfunction Tick(float deltatime)\n{\n\tif(Owner!=None)\n\t{\n\t\tif(Owner.IsA('Human'))\n\t\t{\n\t\t\tif(Human(Owner).Health > 0)\n\t\t\t{\n\t\t\t\tAmmoType.AmmoAmount = DeusExPlayer(Owner).Credits;\n\t\n\t\t\t\tif(AmmoType.AmmoAmount > 10)\n\t\t\t\t{\n\t\t\t\t\t//AmmoType.beltDescription = \"|p7C\"$DeusExPlayer(Owner).Credits;\n\t\t\t\t\tDeusExRootWindow(DeusExPlayer(Owner).rootWindow).hud.belt.Objects[0].ItemText = \"|p3C \"$DeusExPlayer(Owner).Credits;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t//AmmoType.beltDescription = \"|p2C\"$DeusEXPlayer(Owner).Credits;\n\t\t\t\t\tDeusExRootWindow(DeusExPlayer(Owner).rootWindow).hud.belt.Objects[0].ItemText = \"|p2C \"$DeusExPlayer(Owner).Credits;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\ndefaultproperties\n{\n     Mode=10\n     AmmoName=Class'PartyStuff.AmmoCredits'\n     ReloadCount=1\n     PickupAmmoCount=120\n     InventoryGroup=80\n     ItemName=\"Citizen card\"\n     PlayerViewOffset=(Z=-12.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.Credits'\n     PickupViewMesh=LodMesh'DeusExItems.Credits'\n     ThirdPersonMesh=LodMesh'DeusExItems.Credits'\n     LandSound=Sound'DeusExSounds.Generic.PlasticHit1'\n     Icon=Texture'DeusExUI.Icons.BeltIconCredits'\n     beltDescription=\"CITIZEN\"\n     Mesh=LodMesh'DeusExItems.Credits'\n     CollisionRadius=7.000000\n     CollisionHeight=0.550000\n     Mass=2.000000\n     Buoyancy=3.000000\n}\n",
            "name": "PSCreditCard.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "Mode=10",
                    "AmmoName=Class'PartyStuff.AmmoCredits'",
                    "ReloadCount=1",
                    "PickupAmmoCount=120",
                    "InventoryGroup=80",
                    "ItemName=\"Citizen card\"",
                    "PlayerViewOffset=(Z=-12.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.Credits'",
                    "PickupViewMesh=LodMesh'DeusExItems.Credits'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.Credits'",
                    "LandSound=Sound'DeusExSounds.Generic.PlasticHit1'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconCredits'",
                    "beltDescription=\"CITIZEN\"",
                    "Mesh=LodMesh'DeusExItems.Credits'",
                    "CollisionRadius=7.000000",
                    "CollisionHeight=0.550000",
                    "Mass=2.000000",
                    "Buoyancy=3.000000"
                ],
                "exec": [],
                "extends": "DeusExWeapon",
                "functions": {
                    "BecomePickup": {
                        "body": "{\n   Super(Inventory).BecomePickup();\n   lifespan=0;\n   SetDisplayProperties(Default.Style, Default.Texture, Default.bUnlit, Default.bMeshEnviromap );\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "BecomePickup",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "CycleAmmo": {
                        "body": "{\n\tif(bDeposit == False)\n\t{\n\t\tbDeposit = True;\n\t\tDeusExPlayer(Owner).ClientMessage(\"|p7ATM deposit mode selected.\");\n\t}\n\telse\n\t{\n\t\tbDeposit = False;\n\t\tDeusExPlayer(Owner).ClientMessage(\"|p7ATM withdrawl mode selected.\");\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "CycleAmmo",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "DropFrom": {
                        "body": "{\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "DropFrom",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "StartLocation"
                            ]
                        ],
                        "return": ""
                    },
                    "Fire": {
                        "body": "{\n\t\n\tP=DeusExPlayer(Owner);\n\n\tloc = Owner.Location;\n\trot = Owner.Rotation;\n\tloc += 2.0 * Owner.CollisionRadius * vector(P.ViewRotation);\n\tloc.Z += Owner.CollisionHeight * 0.9;\n\n\tif(mode==10)\n\t{\n\t\tif(P.Credits>=10)\n\t\t{\n\t\t\tP.Credits-=10;\n\t\t\n\t\t\tSpawn(class'Cred10', Owner,, loc, rot);\n\t\t\treturn;\n\t\t}\n\t}\n\n\tif(mode==100)\n\t{\n\t\tif(P.Credits>=100)\n\t\t{\n\t\t\tP.Credits-=100;\n\t\t\tSpawn(class'Cred100', Owner,, loc, rot);\n\t\t\treturn;\n\t\t}\n\t}\n\n\tif(mode==500)\n\t{\n\t\tif(P.Credits>=500)\n\t\t{\n\t\t\tP.Credits-=500;\n\t\t\tSpawn(class'Cred500', Owner,, loc, rot);\n\t\t\treturn;\n\t\t}\n\t}\n}",
                        "locals": [
                            "local DeusExPlayer P;",
                            "local vector loc;",
                            "local rotator rot;"
                        ],
                        "modifiers": [],
                        "name": "Fire",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "Value"
                            ]
                        ],
                        "return": ""
                    },
                    "ScopeToggle": {
                        "body": "{ \n\tif(mode == 500)\n\t{\n\t\tmode = 10;\n\t\tDeusExPlayer(Owner).ClientMessage(\"10 Credit mode selected.\");\n\t\treturn;\n\t}\n\n\tif(mode == 100)\n\t{\n\t\tmode = 500;\n\t\tDeusExPlayer(Owner).ClientMessage(\"500 Credit mode selected.\");\n\t\treturn;\n\t}\n\n\tif(mode == 10)\n\t{\n\t\tmode = 100;\n\t\tDeusExPlayer(Owner).ClientMessage(\"100 Credit mode selected.\");\n\t\treturn;\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "ScopeToggle",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) || (BeltSpot == 0) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    },
                    "Tick": {
                        "body": "{\n\tif(Owner!=None)\n\t{\n\t\tif(Owner.IsA('Human'))\n\t\t{\n\t\t\tif(Human(Owner).Health > 0)\n\t\t\t{\n\t\t\t\tAmmoType.AmmoAmount = DeusExPlayer(Owner).Credits;\n\t\n\t\t\t\tif(AmmoType.AmmoAmount > 10)\n\t\t\t\t{\n\t\t\t\t\t//AmmoType.beltDescription = \"|p7C\"$DeusExPlayer(Owner).Credits;\n\t\t\t\t\tDeusExRootWindow(DeusExPlayer(Owner).rootWindow).hud.belt.Objects[0].ItemText = \"|p3C \"$DeusExPlayer(Owner).Credits;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t//AmmoType.beltDescription = \"|p2C\"$DeusEXPlayer(Owner).Credits;\n\t\t\t\t\tDeusExRootWindow(DeusExPlayer(Owner).rootWindow).hud.belt.Objects[0].ItemText = \"|p2C \"$DeusExPlayer(Owner).Credits;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltatime"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 158,
                "replication": "",
                "states": [],
                "variables": [
                    "var int mode;",
                    "var string Job;",
                    "var int Fitness, Strength, Intellect, CrimLevel;",
                    "var bool bDeposit;"
                ]
            }
        },
        "PSFattener.uc": {
            "body": "//=============================================================================\n// Box.\n//=============================================================================\nclass PSFattener extends PGActors;\n\nvar Actor Fattener;\n\nfunction string GetDisplayString(Actor P)\n{\n\tif(P.isA('DeusExPlayer'))\n\t\treturn DeusExPlayer(p).PlayerReplicationInfo.PlayerName;\n\telse if(P.isA('ScriptedPawn'))\n\t\treturn ScriptedPawn(P).FamiliarName;\n\telse if(P.isA('DeusExDecoration'))\n\t\treturn DeusExDecoration(P).ItemName;\n}\n\n\nfunction Tick(float deltatime)\n{\n\tif(Fattener == None)\n\t{\n\t\tDestroy();\n\t\tLog(\"NO PLAYER ATTACHED, DESTROYING\",'Fattener');\n\t}\n\telse\n\t{\n\t\tSetLocation(Fattener.Location);\n\t\tFattener.Fatness += 1;\n\t\tif(Fattener.Fatness >= 255)\n\t\t{\n\t\t\t\t\tBroadcastMessage(GetDisplayString(Fattener)$\" grew too fat and exploded.\");\n\t\t\tDeusExPlayer(Fattener).ReducedDamageType = '';\n\t\t\tScriptedPawn(Fattener).bInvincible=False;\n\t\t\tDeusExDecoration(Fattener).bInvincible=False;\n\t\t\tFattener.TakeDamage(200,None,vect(0,0,0),vect(0,0,1),'Exploded');\n\t\t\tExplode();\n\t\t\tFattener.Fatness = Fattener.Default.Fatness;\n\t\t\tDestroy();\n\t\t}\n\t}\n}\n\nfunction Explode()\n{\n\tlocal SphereEffect sphere;\n\tlocal ScorchMark s;\n\tlocal ExplosionLight light;\n\tlocal int i;\n\tlocal float explosionDamage;\n\tlocal float explosionRadius;\n\n\texplosionDamage = 600;\n\texplosionRadius = 100;\n\n\t// alert NPCs that I'm exploding\n\tAISendEvent('LoudNoise', EAITYPE_Audio, , explosionRadius*16);\n\tPlaySound(Sound'LargeExplosion1', SLOT_None,,, explosionRadius*16);\n\n\t// draw a pretty explosion\n\tlight = Spawn(class'ExplosionLight',,, Location);\n\tif (light != None)\n\t\tlight.size = 4;\n\n\tSpawn(class'ExplosionSmall',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionLarge',,, Location + 2*VRand()*CollisionRadius);\n\n\tsphere = Spawn(class'SphereEffect',,, Location);\n\tif (sphere != None)\n\t\tsphere.size = explosionRadius / 32.0;\n\n\t// spawn a mark\n\ts = spawn(class'ScorchMark', Base,, Location-vect(0,0,1)*CollisionHeight, Rotation+rot(16384,0,0));\n\tif (s != None)\n\t{\n\t\ts.DrawScale = FClamp(explosionDamage/30, 0.1, 3.0);\n\t\ts.ReattachDecal();\n\t}\n\n\t// spawn some rocks and flesh fragments\n\tfor (i=0; i<explosionDamage/6; i++)\n\t{\n\t\tif (FRand() < 0.3)\n\t\t\tspawn(class'Rockchip',,,Location);\n\t}\n\n\tHurtRadius(explosionDamage, explosionRadius, 'Exploded', explosionDamage*100, Location);\n}\n\ndefaultproperties\n{\n}\n",
            "name": "PSFattener.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "PGActors",
                "functions": {
                    "Explode": {
                        "body": "{\n\n\texplosionDamage = 600;\n\texplosionRadius = 100;\n\n\t// alert NPCs that I'm exploding\n\tAISendEvent('LoudNoise', EAITYPE_Audio, , explosionRadius*16);\n\tPlaySound(Sound'LargeExplosion1', SLOT_None,,, explosionRadius*16);\n\n\t// draw a pretty explosion\n\tlight = Spawn(class'ExplosionLight',,, Location);\n\tif (light != None)\n\t\tlight.size = 4;\n\n\tSpawn(class'ExplosionSmall',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionLarge',,, Location + 2*VRand()*CollisionRadius);\n\n\tsphere = Spawn(class'SphereEffect',,, Location);\n\tif (sphere != None)\n\t\tsphere.size = explosionRadius / 32.0;\n\n\t// spawn a mark\n\ts = spawn(class'ScorchMark', Base,, Location-vect(0,0,1)*CollisionHeight, Rotation+rot(16384,0,0));\n\tif (s != None)\n\t{\n\t\ts.DrawScale = FClamp(explosionDamage/30, 0.1, 3.0);\n\t\ts.ReattachDecal();\n\t}\n\n\t// spawn some rocks and flesh fragments\n\tfor (i=0; i<explosionDamage/6; i++)\n\t{\n\t\tif (FRand() < 0.3)\n\t\t\tspawn(class'Rockchip',,,Location);\n\t}\n\n\tHurtRadius(explosionDamage, explosionRadius, 'Exploded', explosionDamage*100, Location);\n}",
                        "locals": [
                            "local SphereEffect sphere;",
                            "local ScorchMark s;",
                            "local ExplosionLight light;",
                            "local int i;",
                            "local float explosionDamage;",
                            "local float explosionRadius;"
                        ],
                        "modifiers": [],
                        "name": "Explode",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "GetDisplayString": {
                        "body": "{\n\tif(P.isA('DeusExPlayer'))\n\t\treturn DeusExPlayer(p).PlayerReplicationInfo.PlayerName;\n\telse if(P.isA('ScriptedPawn'))\n\t\treturn ScriptedPawn(P).FamiliarName;\n\telse if(P.isA('DeusExDecoration'))\n\t\treturn DeusExDecoration(P).ItemName;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetDisplayString",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "P"
                            ]
                        ],
                        "return": "string"
                    },
                    "Tick": {
                        "body": "{\n\tif(Fattener == None)\n\t{\n\t\tDestroy();\n\t\tLog(\"NO PLAYER ATTACHED, DESTROYING\",'Fattener');\n\t}\n\telse\n\t{\n\t\tSetLocation(Fattener.Location);\n\t\tFattener.Fatness += 1;\n\t\tif(Fattener.Fatness >= 255)\n\t\t{\n\t\t\t\t\tBroadcastMessage(GetDisplayString(Fattener)$\" grew too fat and exploded.\");\n\t\t\tDeusExPlayer(Fattener).ReducedDamageType = '';\n\t\t\tScriptedPawn(Fattener).bInvincible=False;\n\t\t\tDeusExDecoration(Fattener).bInvincible=False;\n\t\t\tFattener.TakeDamage(200,None,vect(0,0,0),vect(0,0,1),'Exploded');\n\t\t\tExplode();\n\t\t\tFattener.Fatness = Fattener.Default.Fatness;\n\t\t\tDestroy();\n\t\t}\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltatime"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 95,
                "replication": "",
                "states": [],
                "variables": [
                    "var Actor Fattener;"
                ]
            }
        },
        "PSFireworkRocket.uc": {
            "body": "//=============================================================================\n// PlasmaBolt.\n//=============================================================================\nclass PSFireworkRocket extends DeusExProjectile;\n\nvar ParticleGenerator pGen1;\nvar ParticleGenerator pGen2;\n\nvar float mpDamage;\nvar float mpBlastRadius;\n\n#exec OBJ LOAD FILE=Effects\n\nsimulated function DrawExplosionEffects(vector HitLocation, vector HitNormal)\n{\n\tlocal ParticleGenerator gen;\nlocal pring sphere;\nlocal ProjectileGenerator Projy;\n\t\n\tprojy = Spawn(class'ProjectileGenerator',,,HitLocation);\n\tprojy.Lifespan=5;\n\tprojy.EjectSpeed=250;\n\tprojy.Checktime=0.01;\n\tprojy.bRandomEject = True;\n\tprojy.ProjectileClass=class'PSFireworkfx';\n\tprojy.NumPerSpawn=3;\n\t// create a particle generator shooting out plasma spheres\n\tgen = Spawn(class'ParticleGenerator',,, HitLocation, Rotator(HitNormal));\n\tif (gen != None)\n\t{\n      //gen.RemoteRole = ROLE_None;\n\t\tgen.particleDrawScale = 1.0;\n\t\tgen.checkTime = 0.10;\n\t\tgen.frequency = 1.0;\n\t\tgen.ejectSpeed = 200.0;\n\t\tgen.bGravity = True;\n\t\tgen.bRandomEject = True;\n\t\tgen.particleLifeSpan = 0.75;\n\t\tgen.particleTexture = Texture'sparkfx1';\n\t\tgen.LifeSpan = 1.3;\n\t}\n\tsphere = Spawn(class'pring',,, HitLocation);\n\tif (sphere != None)\n\t{\n\tsphere.size = blastradius / 32;\n\tSphere.MultiSkins[0]=Texture'radattack';\n\t}\n}\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\tDamage = mpDamage;\n\tblastRadius = mpBlastRadius;\n}\n\nsimulated function Destroyed()\n{\n\tif (pGen1 != None)\n\t\tpGen1.DelayedDestroy();\n\tif (pGen2 != None)\n\t\tpGen2.DelayedDestroy();\n\n\tSuper.Destroyed();\n}\n\ndefaultproperties\n{\n     mpBlastRadius=300.000000\n     bExplodes=True\n     blastRadius=128.000000\n     DamageType=Burned\n     AccurateRange=14400\n     maxRange=24000\n     bIgnoresNanoDefense=True\n     ItemName=\"Firework\"\n     ItemArticle=\"a\"\n     speed=1000.000000\n     MaxSpeed=1100.000000\n     MomentumTransfer=3000\n     ImpactSound=Sound'DeusExSounds.Generic.MediumExplosion1'\n     ExplosionDecal=Class'DeusEx.ScorchMark'\n     Style=STY_Modulated\n     Skin=FireTexture'Effects.Fire.flmethrwr_fire'\n     Mesh=LodMesh'DeusExItems.PlasmaBolt'\n     DrawScale=2.000000\n     Fatness=88\n     bUnlit=True\n     LightType=LT_Steady\n     LightEffect=LE_NonIncidence\n     LightBrightness=200\n     LightHue=1\n     LightSaturation=128\n     LightRadius=3\n     bFixedRotationDir=True\n}\n",
            "name": "PSFireworkRocket.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "mpBlastRadius=300.000000",
                    "bExplodes=True",
                    "blastRadius=128.000000",
                    "DamageType=Burned",
                    "AccurateRange=14400",
                    "maxRange=24000",
                    "bIgnoresNanoDefense=True",
                    "ItemName=\"Firework\"",
                    "ItemArticle=\"a\"",
                    "speed=1000.000000",
                    "MaxSpeed=1100.000000",
                    "MomentumTransfer=3000",
                    "ImpactSound=Sound'DeusExSounds.Generic.MediumExplosion1'",
                    "ExplosionDecal=Class'DeusEx.ScorchMark'",
                    "Style=STY_Modulated",
                    "Skin=FireTexture'Effects.Fire.flmethrwr_fire'",
                    "Mesh=LodMesh'DeusExItems.PlasmaBolt'",
                    "DrawScale=2.000000",
                    "Fatness=88",
                    "bUnlit=True",
                    "LightType=LT_Steady",
                    "LightEffect=LE_NonIncidence",
                    "LightBrightness=200",
                    "LightHue=1",
                    "LightSaturation=128",
                    "LightRadius=3",
                    "bFixedRotationDir=True"
                ],
                "exec": [
                    "#exec OBJ LOAD FILE=Effects"
                ],
                "extends": "DeusExProjectile",
                "functions": {
                    "Destroyed": {
                        "body": "{\n\tif (pGen1 != None)\n\t\tpGen1.DelayedDestroy();\n\tif (pGen2 != None)\n\t\tpGen2.DelayedDestroy();\n\n\tSuper.Destroyed();\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Destroyed",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "DrawExplosionEffects": {
                        "body": "{\n\t\n\tprojy = Spawn(class'ProjectileGenerator',,,HitLocation);\n\tprojy.Lifespan=5;\n\tprojy.EjectSpeed=250;\n\tprojy.Checktime=0.01;\n\tprojy.bRandomEject = True;\n\tprojy.ProjectileClass=class'PSFireworkfx';\n\tprojy.NumPerSpawn=3;\n\t// create a particle generator shooting out plasma spheres\n\tgen = Spawn(class'ParticleGenerator',,, HitLocation, Rotator(HitNormal));\n\tif (gen != None)\n\t{\n      //gen.RemoteRole = ROLE_None;\n\t\tgen.particleDrawScale = 1.0;\n\t\tgen.checkTime = 0.10;\n\t\tgen.frequency = 1.0;\n\t\tgen.ejectSpeed = 200.0;\n\t\tgen.bGravity = True;\n\t\tgen.bRandomEject = True;\n\t\tgen.particleLifeSpan = 0.75;\n\t\tgen.particleTexture = Texture'sparkfx1';\n\t\tgen.LifeSpan = 1.3;\n\t}\n\tsphere = Spawn(class'pring',,, HitLocation);\n\tif (sphere != None)\n\t{\n\tsphere.size = blastradius / 32;\n\tSphere.MultiSkins[0]=Texture'radattack';\n\t}\n}",
                        "locals": [
                            "local ParticleGenerator gen;",
                            "local pring sphere;",
                            "local ProjectileGenerator Projy;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "DrawExplosionEffects",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "HitLocation"
                            ],
                            [
                                "vector",
                                "HitNormal"
                            ]
                        ],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\tDamage = mpDamage;\n\tblastRadius = mpBlastRadius;\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 98,
                "replication": "",
                "states": [],
                "variables": [
                    "var ParticleGenerator pGen1;",
                    "var ParticleGenerator pGen2;",
                    "var float mpDamage;",
                    "var float mpBlastRadius;"
                ]
            }
        },
        "PSFireworkRocket2.uc": {
            "body": "//=============================================================================\n// PlasmaBolt.\n//=============================================================================\nclass PSFireworkRocket2 extends DeusExProjectile;\n\nvar ParticleGenerator pGen1;\nvar ParticleGenerator pGen2;\n\nvar float mpDamage;\nvar float mpBlastRadius;\n\n#exec OBJ LOAD FILE=Effects\n\nsimulated function DrawExplosionEffects(vector HitLocation, vector HitNormal)\n{\n\tlocal ParticleGenerator gen;\nlocal pring sphere;\nlocal ProjectileGenerator Projy;\n\t\n\tprojy = Spawn(class'ProjectileGenerator',,,HitLocation);\n\tprojy.Lifespan=5;\n\tprojy.EjectSpeed=250;\n\tprojy.Checktime=0.01;\n\tprojy.bRandomEject = True;\n\tprojy.ProjectileClass=class'PSFireworkfx2';\n\tprojy.NumPerSpawn=3;\n\t// create a particle generator shooting out plasma spheres\n\tgen = Spawn(class'ParticleGenerator',,, HitLocation, Rotator(HitNormal));\n\tif (gen != None)\n\t{\n      //gen.RemoteRole = ROLE_None;\n\t\tgen.particleDrawScale = 1.0;\n\t\tgen.checkTime = 0.10;\n\t\tgen.frequency = 1.0;\n\t\tgen.ejectSpeed = 200.0;\n\t\tgen.bGravity = True;\n\t\tgen.bRandomEject = True;\n\t\tgen.particleLifeSpan = 0.75;\n\t\tgen.particleTexture = Texture'sparkfx1';\n\t\tgen.LifeSpan = 1.3;\n\t}\n\tsphere = Spawn(class'pring',,, HitLocation);\n\tif (sphere != None)\n\t{\n\tsphere.size = blastradius / 32;\n\tSphere.MultiSkins[0]=Texture'radattack';\n\t}\n}\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\tDamage = mpDamage;\n\tblastRadius = mpBlastRadius;\n}\n\nsimulated function Destroyed()\n{\n\tif (pGen1 != None)\n\t\tpGen1.DelayedDestroy();\n\tif (pGen2 != None)\n\t\tpGen2.DelayedDestroy();\n\n\tSuper.Destroyed();\n}\n\ndefaultproperties\n{\n     mpBlastRadius=300.000000\n     bExplodes=True\n     blastRadius=128.000000\n     DamageType=Burned\n     AccurateRange=14400\n     maxRange=24000\n     bIgnoresNanoDefense=True\n     ItemName=\"Firework\"\n     ItemArticle=\"a\"\n     speed=1000.000000\n     MaxSpeed=1100.000000\n     MomentumTransfer=3000\n     ImpactSound=Sound'DeusExSounds.Generic.MediumExplosion1'\n     ExplosionDecal=Class'DeusEx.ScorchMark'\n     Style=STY_Modulated\n     Skin=FireTexture'Effects.Fire.flmethrwr_fire'\n     Mesh=LodMesh'DeusExItems.PlasmaBolt'\n     DrawScale=2.000000\n     Fatness=88\n     bUnlit=True\n     LightType=LT_Steady\n     LightEffect=LE_NonIncidence\n     LightBrightness=200\n     LightHue=1\n     LightSaturation=128\n     LightRadius=3\n     bFixedRotationDir=True\n}\n",
            "name": "PSFireworkRocket2.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "mpBlastRadius=300.000000",
                    "bExplodes=True",
                    "blastRadius=128.000000",
                    "DamageType=Burned",
                    "AccurateRange=14400",
                    "maxRange=24000",
                    "bIgnoresNanoDefense=True",
                    "ItemName=\"Firework\"",
                    "ItemArticle=\"a\"",
                    "speed=1000.000000",
                    "MaxSpeed=1100.000000",
                    "MomentumTransfer=3000",
                    "ImpactSound=Sound'DeusExSounds.Generic.MediumExplosion1'",
                    "ExplosionDecal=Class'DeusEx.ScorchMark'",
                    "Style=STY_Modulated",
                    "Skin=FireTexture'Effects.Fire.flmethrwr_fire'",
                    "Mesh=LodMesh'DeusExItems.PlasmaBolt'",
                    "DrawScale=2.000000",
                    "Fatness=88",
                    "bUnlit=True",
                    "LightType=LT_Steady",
                    "LightEffect=LE_NonIncidence",
                    "LightBrightness=200",
                    "LightHue=1",
                    "LightSaturation=128",
                    "LightRadius=3",
                    "bFixedRotationDir=True"
                ],
                "exec": [
                    "#exec OBJ LOAD FILE=Effects"
                ],
                "extends": "DeusExProjectile",
                "functions": {
                    "Destroyed": {
                        "body": "{\n\tif (pGen1 != None)\n\t\tpGen1.DelayedDestroy();\n\tif (pGen2 != None)\n\t\tpGen2.DelayedDestroy();\n\n\tSuper.Destroyed();\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Destroyed",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "DrawExplosionEffects": {
                        "body": "{\n\t\n\tprojy = Spawn(class'ProjectileGenerator',,,HitLocation);\n\tprojy.Lifespan=5;\n\tprojy.EjectSpeed=250;\n\tprojy.Checktime=0.01;\n\tprojy.bRandomEject = True;\n\tprojy.ProjectileClass=class'PSFireworkfx2';\n\tprojy.NumPerSpawn=3;\n\t// create a particle generator shooting out plasma spheres\n\tgen = Spawn(class'ParticleGenerator',,, HitLocation, Rotator(HitNormal));\n\tif (gen != None)\n\t{\n      //gen.RemoteRole = ROLE_None;\n\t\tgen.particleDrawScale = 1.0;\n\t\tgen.checkTime = 0.10;\n\t\tgen.frequency = 1.0;\n\t\tgen.ejectSpeed = 200.0;\n\t\tgen.bGravity = True;\n\t\tgen.bRandomEject = True;\n\t\tgen.particleLifeSpan = 0.75;\n\t\tgen.particleTexture = Texture'sparkfx1';\n\t\tgen.LifeSpan = 1.3;\n\t}\n\tsphere = Spawn(class'pring',,, HitLocation);\n\tif (sphere != None)\n\t{\n\tsphere.size = blastradius / 32;\n\tSphere.MultiSkins[0]=Texture'radattack';\n\t}\n}",
                        "locals": [
                            "local ParticleGenerator gen;",
                            "local pring sphere;",
                            "local ProjectileGenerator Projy;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "DrawExplosionEffects",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "HitLocation"
                            ],
                            [
                                "vector",
                                "HitNormal"
                            ]
                        ],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\tDamage = mpDamage;\n\tblastRadius = mpBlastRadius;\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 98,
                "replication": "",
                "states": [],
                "variables": [
                    "var ParticleGenerator pGen1;",
                    "var ParticleGenerator pGen2;",
                    "var float mpDamage;",
                    "var float mpBlastRadius;"
                ]
            }
        },
        "PSFireworkfx.uc": {
            "body": "//=============================================================================\n// GreaselSpit.\n//=============================================================================\nclass PSFireworkfx extends DeusExProjectile;\n\n#exec OBJ LOAD FILE=Effects\n\nfunction PreBeginPlay()\n{\n\tsuper.PreBeginPlay();\n\t\n\tif(FRand() < 0.2)\n\tMultiskins[1] = Texture'DeusExDeco.Skins.AlarmLightTex3';\n\telse if(FRand() >= 0.2 && FRand() < 0.4)\n\tMultiskins[1] = Texture'DeusExDeco.Skins.AlarmLightTex5';\n\telse if(FRand() >= 0.4 && FRand() < 0.7)\n\tMultiskins[1] = Texture'DeusExDeco.Skins.AlarmLightTex7';\n\telse if(FRand() >= 0.7)\n\tMultiskins[1] = Texture'DeusExDeco.Skins.AlarmLightTex9';\n}\n\ndefaultproperties\n{\n     AccurateRange=300\n     maxRange=450\n     bIgnoresNanoDefense=True\n     speed=600.000000\n     MaxSpeed=800.000000\n     MomentumTransfer=400\n     Style=STY_Translucent\n     Mesh=LodMesh'DeusExItems.GreaselSpit'\n}\n",
            "name": "PSFireworkfx.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "AccurateRange=300",
                    "maxRange=450",
                    "bIgnoresNanoDefense=True",
                    "speed=600.000000",
                    "MaxSpeed=800.000000",
                    "MomentumTransfer=400",
                    "Style=STY_Translucent",
                    "Mesh=LodMesh'DeusExItems.GreaselSpit'"
                ],
                "exec": [
                    "#exec OBJ LOAD FILE=Effects"
                ],
                "extends": "DeusExProjectile",
                "functions": {
                    "PreBeginPlay": {
                        "body": "{\n\tsuper.PreBeginPlay();\n\t\n\tif(FRand() < 0.2)\n\tMultiskins[1] = Texture'DeusExDeco.Skins.AlarmLightTex3';\n\telse if(FRand() >= 0.2 && FRand() < 0.4)\n\tMultiskins[1] = Texture'DeusExDeco.Skins.AlarmLightTex5';\n\telse if(FRand() >= 0.4 && FRand() < 0.7)\n\tMultiskins[1] = Texture'DeusExDeco.Skins.AlarmLightTex7';\n\telse if(FRand() >= 0.7)\n\tMultiskins[1] = Texture'DeusExDeco.Skins.AlarmLightTex9';\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 33,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "PSFireworkfx2.uc": {
            "body": "//=============================================================================\n// GreaselSpit.\n//=============================================================================\nclass PSFireworkfx2 extends DeusExProjectile;\n\n#exec OBJ LOAD FILE=Effects\n\nfunction PreBeginPlay()\n{\n\tsuper.PreBeginPlay();\n\t\n\tif(FRand() < 0.2)\n\tMultiskins[1] = Texture'DeusExDeco.Skins.AlarmLightTex3';\n\telse if(FRand() >= 0.2 && FRand() < 0.4)\n\tMultiskins[1] = Texture'DeusExDeco.Skins.AlarmLightTex5';\n\telse if(FRand() >= 0.4 && FRand() < 0.7)\n\tMultiskins[1] = Texture'DeusExDeco.Skins.AlarmLightTex7';\n\telse if(FRand() >= 0.7)\n\tMultiskins[1] = Texture'DeusExDeco.Skins.AlarmLightTex9';\n}\n\ndefaultproperties\n{\n     bExplodes=True\n     blastRadius=40.000000\n     AccurateRange=300\n     maxRange=450\n     bIgnoresNanoDefense=True\n     speed=600.000000\n     MaxSpeed=800.000000\n     Damage=50.000000\n     MomentumTransfer=400\n     Style=STY_Translucent\n     Mesh=LodMesh'DeusExItems.GreaselSpit'\n}\n",
            "name": "PSFireworkfx2.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bExplodes=True",
                    "blastRadius=40.000000",
                    "AccurateRange=300",
                    "maxRange=450",
                    "bIgnoresNanoDefense=True",
                    "speed=600.000000",
                    "MaxSpeed=800.000000",
                    "Damage=50.000000",
                    "MomentumTransfer=400",
                    "Style=STY_Translucent",
                    "Mesh=LodMesh'DeusExItems.GreaselSpit'"
                ],
                "exec": [
                    "#exec OBJ LOAD FILE=Effects"
                ],
                "extends": "DeusExProjectile",
                "functions": {
                    "PreBeginPlay": {
                        "body": "{\n\tsuper.PreBeginPlay();\n\t\n\tif(FRand() < 0.2)\n\tMultiskins[1] = Texture'DeusExDeco.Skins.AlarmLightTex3';\n\telse if(FRand() >= 0.2 && FRand() < 0.4)\n\tMultiskins[1] = Texture'DeusExDeco.Skins.AlarmLightTex5';\n\telse if(FRand() >= 0.4 && FRand() < 0.7)\n\tMultiskins[1] = Texture'DeusExDeco.Skins.AlarmLightTex7';\n\telse if(FRand() >= 0.7)\n\tMultiskins[1] = Texture'DeusExDeco.Skins.AlarmLightTex9';\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 36,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "PSFlagCA.uc": {
            "body": "//=============================================================================\n// FlagPole.\n//=============================================================================\nclass PSFlagCA extends DeusExDecoration;\n\ndefaultproperties\n{\n     bInvincible=True\n     FragType=Class'DeusEx.WoodFragment'\n     ItemName=\"Flag Pole\"\n     bPushable=False\n     Skin=Texture'PGAssets.Skins.flagpoletex9'\n     Mesh=LodMesh'DeusExDeco.FlagPole'\n     CollisionRadius=17.000000\n     CollisionHeight=56.389999\n     Mass=40.000000\n     Buoyancy=30.000000\n}\n",
            "name": "PSFlagCA.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bInvincible=True",
                    "FragType=Class'DeusEx.WoodFragment'",
                    "ItemName=\"Flag Pole\"",
                    "bPushable=False",
                    "Skin=Texture'PGAssets.Skins.flagpoletex9'",
                    "Mesh=LodMesh'DeusExDeco.FlagPole'",
                    "CollisionRadius=17.000000",
                    "CollisionHeight=56.389999",
                    "Mass=40.000000",
                    "Buoyancy=30.000000"
                ],
                "exec": [],
                "extends": "DeusExDecoration",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 19,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "PSFlagPole.uc": {
            "body": "//=============================================================================\n// FlagPole.\n//=============================================================================\nclass PSFlagPole extends DeusExDecoration;\n\nvar() bool bLocked;\n\nenum ESkinColor\n{\n\tSC_China,\n\tSC_France,\n\tSC_President,\n\tSC_UNATCO,\n\tSC_USA,\n\tSC_Serb,\n\tSC_serbi,\n\tSC_England,\n\tSC_Canada\n};\n\nvar() travel ESkinColor SkinColor;\n\nfunction Frob(Actor Frobber, Inventory frobWith)\n{\n\tSuper.Frob(Frobber, frobWith);\n\tSetOwner(Frobber);\n\t\n\tif(bLocked)\n\treturn;\n\tif(Skincolor == SC_China)\n\t{\n\t\tSkinColor = SC_France;\n\t\tSkin = Texture'FlagPoleTex2'; return;\n\t}\n\t\tif(Skincolor == SC_France)\n\t{\n\t\tSkinColor = SC_President;\n\t\tSkin = Texture'FlagPoleTex3'; return;\n\t}\n\tif(Skincolor == SC_President)\n\t{\n\t\tSkinColor = SC_UNATCO;\n\t\tSkin = Texture'FlagPoleTex4'; return;\n\t}\n\tif(Skincolor == SC_UNATCO)\n\t{\n\t\tSkinColor = SC_USA;\n\t\tSkin = Texture'FlagPoleTex5'; return;\n\t}\n\tif(Skincolor == SC_USA)\n\t{\n\t\tSkinColor = SC_Serb;\n\t\tSkin = Texture'FlagPoleTex6'; return;\n\t}\n\tif(Skincolor == SC_Serb)\n\t{\n\t\tSkinColor = SC_Serbi;\n\t\tSkin = Texture'FlagPoleTex7'; return;\n\t}\t\n\tif(Skincolor == SC_Serbi)\n\t{\n\t\tSkinColor = SC_England;\n\t\tSkin = Texture'FlagPoleTex8'; return;\n\t}\n\tif(Skincolor == SC_England)\n\t{\n\t\tSkinColor = SC_Canada;\n\t\tSkin = Texture'FlagPoleTex9'; return;\n\t}\n\tif(Skincolor == SC_Canada)\n\t{\n\t\tSkinColor = SC_China;\n\t\tSkin = Texture'FlagPoleTex1'; return;\n\t}\n}\n\nfunction BeginPlay()\n{\n\tSuper.BeginPlay();\n\n\tSetSkin();\n}\n\nfunction TravelPostAccept()\n{\n\tSuper.TravelPostAccept();\n\n\tSetSkin();\n}\n\nfunction SetSkin()\n{\n\tswitch (SkinColor)\n\t{\n\t\tcase SC_China:\t\tSkin = Texture'FlagPoleTex1'; break;\n\t\tcase SC_France:\t\tSkin = Texture'FlagPoleTex2'; break;\n\t\tcase SC_President:\tSkin = Texture'FlagPoleTex3'; break;\n\t\tcase SC_UNATCO:\t\tSkin = Texture'FlagPoleTex4'; break;\n\t\tcase SC_USA:\t\tSkin = Texture'FlagPoleTex5'; break;\n\t\tcase SC_Serb:\t\tSkin = Texture'FlagPoleTex6'; break;\n\t\tcase SC_Serbi:\t\tSkin = Texture'FlagPoleTex7'; break;\n\t\tcase SC_England:\t\tSkin = Texture'FlagPoleTex8'; break;\n\t\tcase SC_Canada:\t\tSkin = Texture'FlagPoleTex9'; break;\n\t}\n}\n\ndefaultproperties\n{\n     bInvincible=True\n     FragType=Class'DeusEx.WoodFragment'\n     ItemName=\"Flag Pole\"\n     bPushable=False\n     Mesh=LodMesh'DeusExDeco.FlagPole'\n     CollisionRadius=17.000000\n     CollisionHeight=56.389999\n     Mass=40.000000\n     Buoyancy=30.000000\n}\n",
            "name": "PSFlagPole.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bInvincible=True",
                    "FragType=Class'DeusEx.WoodFragment'",
                    "ItemName=\"Flag Pole\"",
                    "bPushable=False",
                    "Mesh=LodMesh'DeusExDeco.FlagPole'",
                    "CollisionRadius=17.000000",
                    "CollisionHeight=56.389999",
                    "Mass=40.000000",
                    "Buoyancy=30.000000"
                ],
                "exec": [],
                "extends": "DeusExDecoration",
                "functions": {
                    "BeginPlay": {
                        "body": "{\n\tSuper.BeginPlay();\n\n\tSetSkin();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "BeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Frob": {
                        "body": "{\n\tSuper.Frob(Frobber, frobWith);\n\tSetOwner(Frobber);\n\t\n\tif(bLocked)\n\treturn;\n\tif(Skincolor == SC_China)\n\t{\n\t\tSkinColor = SC_France;\n\t\tSkin = Texture'FlagPoleTex2'; return;\n\t}\n\t\tif(Skincolor == SC_France)\n\t{\n\t\tSkinColor = SC_President;\n\t\tSkin = Texture'FlagPoleTex3'; return;\n\t}\n\tif(Skincolor == SC_President)\n\t{\n\t\tSkinColor = SC_UNATCO;\n\t\tSkin = Texture'FlagPoleTex4'; return;\n\t}\n\tif(Skincolor == SC_UNATCO)\n\t{\n\t\tSkinColor = SC_USA;\n\t\tSkin = Texture'FlagPoleTex5'; return;\n\t}\n\tif(Skincolor == SC_USA)\n\t{\n\t\tSkinColor = SC_Serb;\n\t\tSkin = Texture'FlagPoleTex6'; return;\n\t}\n\tif(Skincolor == SC_Serb)\n\t{\n\t\tSkinColor = SC_Serbi;\n\t\tSkin = Texture'FlagPoleTex7'; return;\n\t}\t\n\tif(Skincolor == SC_Serbi)\n\t{\n\t\tSkinColor = SC_England;\n\t\tSkin = Texture'FlagPoleTex8'; return;\n\t}\n\tif(Skincolor == SC_England)\n\t{\n\t\tSkinColor = SC_Canada;\n\t\tSkin = Texture'FlagPoleTex9'; return;\n\t}\n\tif(Skincolor == SC_Canada)\n\t{\n\t\tSkinColor = SC_China;\n\t\tSkin = Texture'FlagPoleTex1'; return;\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    },
                    "SetSkin": {
                        "body": "{\n\tswitch (SkinColor)\n\t{\n\t\tcase SC_China:\t\tSkin = Texture'FlagPoleTex1'; break;\n\t\tcase SC_France:\t\tSkin = Texture'FlagPoleTex2'; break;\n\t\tcase SC_President:\tSkin = Texture'FlagPoleTex3'; break;\n\t\tcase SC_UNATCO:\t\tSkin = Texture'FlagPoleTex4'; break;\n\t\tcase SC_USA:\t\tSkin = Texture'FlagPoleTex5'; break;\n\t\tcase SC_Serb:\t\tSkin = Texture'FlagPoleTex6'; break;\n\t\tcase SC_Serbi:\t\tSkin = Texture'FlagPoleTex7'; break;\n\t\tcase SC_England:\t\tSkin = Texture'FlagPoleTex8'; break;\n\t\tcase SC_Canada:\t\tSkin = Texture'FlagPoleTex9'; break;\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetSkin",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "TravelPostAccept": {
                        "body": "{\n\tSuper.TravelPostAccept();\n\n\tSetSkin();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "TravelPostAccept",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 119,
                "replication": "",
                "states": [],
                "variables": [
                    "var() bool bLocked;",
                    "var() travel ESkinColor SkinColor;"
                ]
            }
        },
        "PSFlagUK.uc": {
            "body": "//=============================================================================\n// FlagPole.\n//=============================================================================\nclass PSFlagUK extends DeusExDecoration;\n\ndefaultproperties\n{\n     bInvincible=True\n     FragType=Class'DeusEx.WoodFragment'\n     ItemName=\"Flag Pole\"\n     bPushable=False\n     Skin=Texture'PGAssets.Skins.flagpoletex8'\n     Mesh=LodMesh'DeusExDeco.FlagPole'\n     CollisionRadius=17.000000\n     CollisionHeight=56.389999\n     Mass=40.000000\n     Buoyancy=30.000000\n}\n",
            "name": "PSFlagUK.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bInvincible=True",
                    "FragType=Class'DeusEx.WoodFragment'",
                    "ItemName=\"Flag Pole\"",
                    "bPushable=False",
                    "Skin=Texture'PGAssets.Skins.flagpoletex8'",
                    "Mesh=LodMesh'DeusExDeco.FlagPole'",
                    "CollisionRadius=17.000000",
                    "CollisionHeight=56.389999",
                    "Mass=40.000000",
                    "Buoyancy=30.000000"
                ],
                "exec": [],
                "extends": "DeusExDecoration",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 19,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "PSKM.uc": {
            "body": "//=============================================================================\n// BoxSizeWindow.\n//=============================================================================\nclass PSKM expands MenuUIScreenWindow;\n\nvar MenuUIActionButtonWindow SendButton, exitButton;\nvar MenuUIEditWindow editCommand, editPassword;\nvar MenuUIHeaderWindow winText;\nvar localized string exitbuttontext, passwordlabel, sendbuttontext, commandlabel;\nvar DeusExPlayer _windowOwner;\nvar PSKeypad Ac;\nvar PSKR Mastah;\nvar MenuUIMessageBoxWindow AlertWin;\n\nevent InitWindow()\n{\n   local Window W;\n\n   Super.InitWindow();\n   CreateTextWindow();\n   SendButton = winButtonBar.AddButton(sendButtonText, HALIGN_Right);\n   exitButton = winButtonBar.AddButton(exitButtonText, HALIGN_Right);\n  \n//\tCreateMenuLabel(10, 55, CommandLabel, winClient);\n\tCreateMenuLabel(10, 22, PasswordLabel, winClient);\n\teditPassword = CreateMenuEditWindow(105, 20, 143, 20, winClient);\n\t//EditCommand = CreateMenuEditWindow(105, 54, 143, 20, winClient);\n\t//EditCommand.SetMaxSize(70); //cap said to fit the window as best as possible until the word wrap can be figured out..\n\t\n   winClient.SetBackground(Texture'DeusExUI.MaskTexture');\n   winClient.SetBackgroundStyle(DSTY_Modulated);\n\n   W = winClient.NewChild(Class'Window');\n   W.SetSize(ClientWidth, ClientHeight);\n   W.SetBackground(Texture'DeusExUI.MaskTexture');\n   W.SetBackgroundStyle(DSTY_Modulated);\n   W.Lower();\n\t\n   SetTitle(\"Password Entry\");\n}\n\nfunction bool ButtonActivated( Window buttonPressed )\n{\n\tlocal bool bHandled;\n\tlocal string GetCom, GetPass;\n\tbHandled = True;\n\n\tSuper.ButtonActivated(buttonPressed);\n\n\tswitch( buttonPressed )\n\t{\n\t\tcase SendButton:\n\t\t\t//GetCom = editCommand.GetText();\n\t\t\tGetPass = editPassword.GetText();\n\t\t\t\tif(Mastah.ChkPass(_windowOwner, getPass))\n\t\t\t\t{\n\t\t\t\t\t//_windowOwner.ClientMessage(\"Sending login\"@_windowowner.playerreplicationinfo.playername@getuser@getpass);\n\t\t\t\t\troot.PopWindow();\n\t\t\t\t\tbHandled = True;\n\t\t\t\t}\n\t\t//\t}\n\t\t\tbreak;\n\t\t\t\n\t\tcase exitButton:\n\t\t\troot.PopWindow();\n\t\t\tbHandled = True;\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tbHandled = False;\n\t\t\tbreak;\n\t}\n\n\treturn bHandled;\n}\n\nfunction CreateTextWindow()\n{\n\twinText = CreateMenuHeader(21, 13, \"\", winClient);\n\twinText.SetTextAlignments(HALIGN_Center, VALIGN_Center);\n\twinText.SetFont(Font'FontMenuHeaders_DS');\n\twinText.SetWindowAlignments(HALIGN_Full, VALIGN_Full, 20, 14);\n}\n\nfunction SetMessageText( String msgText )\n{\n\twinText.SetText(msgText);\n\n\tAskParentForReconfigure();\n}\n\nevent bool VirtualKeyPressed(EInputKey key, bool bRepeat)\n{\n\tlocal bool bHandled;\n\n\tswitch( key )\n\t{\n\t\tcase IK_Enter:\n\t\t\t\tif(Mastah.ChkPass(_windowOwner, editPassword.GetText()))\n\t\t\t\t{\n\t\t\t\t\troot.PopWindow();\n\t\t\t\t}\n\t\t\t\tbHandled = True;\n\t\t\tbreak;\n\t}\n\n\treturn bHandled;\n}\n\nevent bool RawKeyPressed(EInputKey key, EInputState iState, bool bRepeat)\n{\n\tif (key == IK_Enter)// &&//(iState == IST_Release))\n\t{\n\t\t\t\tif(Mastah.ChkPass(_windowOwner, editPassword.GetText()))\n\t\t\t\t{\n\t\t\t\t\troot.PopWindow();\n\t\t\t\t}\n\t\treturn True;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\n\ndefaultproperties\n{\n     exitbuttontext=\"Exit\"\n     PasswordLabel=\"Password\"\n     sendbuttontext=\"Send <Enter>\"\n     commandlabel=\"Command\"\n     ClientWidth=300\n     ClientHeight=75\n     textureRows=3\n     textureCols=2\n     bUsesHelpWindow=False\n}\n",
            "name": "PSKM.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "exitbuttontext=\"Exit\"",
                    "PasswordLabel=\"Password\"",
                    "sendbuttontext=\"Send <Enter>\"",
                    "commandlabel=\"Command\"",
                    "ClientWidth=300",
                    "ClientHeight=75",
                    "textureRows=3",
                    "textureCols=2",
                    "bUsesHelpWindow=False"
                ],
                "exec": [],
                "extends": "MenuUIScreenWindow",
                "functions": {
                    "ButtonActivated": {
                        "body": "{\n\tbHandled = True;\n\n\tSuper.ButtonActivated(buttonPressed);\n\n\tswitch( buttonPressed )\n\t{\n\t\tcase SendButton:\n\t\t\t//GetCom = editCommand.GetText();\n\t\t\tGetPass = editPassword.GetText();\n\t\t\t\tif(Mastah.ChkPass(_windowOwner, getPass))\n\t\t\t\t{\n\t\t\t\t\t//_windowOwner.ClientMessage(\"Sending login\"@_windowowner.playerreplicationinfo.playername@getuser@getpass);\n\t\t\t\t\troot.PopWindow();\n\t\t\t\t\tbHandled = True;\n\t\t\t\t}\n\t\t//\t}\n\t\t\tbreak;\n\t\t\t\n\t\tcase exitButton:\n\t\t\troot.PopWindow();\n\t\t\tbHandled = True;\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tbHandled = False;\n\t\t\tbreak;\n\t}",
                        "locals": [
                            "local bool bHandled;",
                            "local string GetCom, GetPass;"
                        ],
                        "modifiers": [],
                        "name": "ButtonActivated",
                        "native": false,
                        "param": [
                            [
                                "Window",
                                "buttonPressed"
                            ]
                        ],
                        "return": "bool"
                    },
                    "CreateTextWindow": {
                        "body": "{\n\twinText = CreateMenuHeader(21, 13, \"\", winClient);\n\twinText.SetTextAlignments(HALIGN_Center, VALIGN_Center);\n\twinText.SetFont(Font'FontMenuHeaders_DS');\n\twinText.SetWindowAlignments(HALIGN_Full, VALIGN_Full, 20, 14);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "CreateTextWindow",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "InitWindow": {
                        "body": "{\n\n   Super.InitWindow();\n   CreateTextWindow();\n   SendButton = winButtonBar.AddButton(sendButtonText, HALIGN_Right);\n   exitButton = winButtonBar.AddButton(exitButtonText, HALIGN_Right);\n  \n//\tCreateMenuLabel(10, 55, CommandLabel, winClient);\n\tCreateMenuLabel(10, 22, PasswordLabel, winClient);\n\teditPassword = CreateMenuEditWindow(105, 20, 143, 20, winClient);\n\t//EditCommand = CreateMenuEditWindow(105, 54, 143, 20, winClient);\n\t//EditCommand.SetMaxSize(70); //cap said to fit the window as best as possible until the word wrap can be figured out..\n\t\n   winClient.SetBackground(Texture'DeusExUI.MaskTexture');\n   winClient.SetBackgroundStyle(DSTY_Modulated);\n\n   W = winClient.NewChild(Class'Window');\n   W.SetSize(ClientWidth, ClientHeight);\n   W.SetBackground(Texture'DeusExUI.MaskTexture');\n   W.SetBackgroundStyle(DSTY_Modulated);\n   W.Lower();\n\t\n   SetTitle(\"Password Entry\");\n}",
                        "locals": [
                            "local Window W;"
                        ],
                        "modifiers": [],
                        "name": "InitWindow",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "RawKeyPressed": {
                        "body": "{\n\tif (key == IK_Enter)// &&//(iState == IST_Release))\n\t{\n\t\t\t\tif(Mastah.ChkPass(_windowOwner, editPassword.GetText()))\n\t\t\t\t{\n\t\t\t\t\troot.PopWindow();\n\t\t\t\t}\n\t\treturn True;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "RawKeyPressed",
                        "native": false,
                        "param": [
                            [
                                "EInputKey",
                                "key"
                            ],
                            [
                                "EInputState",
                                "iState"
                            ],
                            [
                                "bool",
                                "bRepeat"
                            ]
                        ],
                        "return": "bool"
                    },
                    "SetMessageText": {
                        "body": "{\n\twinText.SetText(msgText);\n\n\tAskParentForReconfigure();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetMessageText",
                        "native": false,
                        "param": [
                            [
                                "String",
                                "msgText"
                            ]
                        ],
                        "return": ""
                    },
                    "VirtualKeyPressed": {
                        "body": "{\n\n\tswitch( key )\n\t{\n\t\tcase IK_Enter:\n\t\t\t\tif(Mastah.ChkPass(_windowOwner, editPassword.GetText()))\n\t\t\t\t{\n\t\t\t\t\troot.PopWindow();\n\t\t\t\t}\n\t\t\t\tbHandled = True;\n\t\t\tbreak;\n\t}\n\n\treturn bHandled;\n}",
                        "locals": [
                            "local bool bHandled;"
                        ],
                        "modifiers": [],
                        "name": "VirtualKeyPressed",
                        "native": false,
                        "param": [
                            [
                                "EInputKey",
                                "key"
                            ],
                            [
                                "bool",
                                "bRepeat"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 138,
                "replication": "",
                "states": [],
                "variables": [
                    "var MenuUIActionButtonWindow SendButton, exitButton;",
                    "var MenuUIEditWindow editCommand, editPassword;",
                    "var MenuUIHeaderWindow winText;",
                    "var localized string exitbuttontext, passwordlabel, sendbuttontext, commandlabel;",
                    "var DeusExPlayer _windowOwner;",
                    "var PSKeypad Ac;",
                    "var PSKR Mastah;",
                    "var MenuUIMessageBoxWindow AlertWin;"
                ]
            }
        },
        "PSKR.uc": {
            "body": "// For replicating PSK menu\n//============================\nclass PSKR extends PGActors;\n\nvar PlayerPawn Flagger;\nvar PSKeypad Ac;\n\nreplication\n{\n     reliable if (Role == ROLE_Authority)\n        cMenuLogin, cAlert;//, cMenuRegister;//, currentMode;\n\n     reliable if (Role < ROLE_Authority)\n        ChkPass;//setSize, createBox;\n}\n\nsimulated final function cMenuLogin()\n{\n\tlocal DeusExPlayer _Player;\n\tlocal DeusExRootWindow _root;\n\tlocal PSKM _boxWindow;\n\t_Player = DeusExPlayer(Owner);\n\t//log(\"Called cMenuLogin for\"@_Player.playerreplicationinfo.playername );\n\tif(_Player != None)\n\t{\n\t\t//_Player.InitRootWindow();\n\t\t_root = DeusExRootWindow(_Player.rootWindow);\n\t\tif(_root != None)\n\t\t{\n\t\t\t_boxWindow = PSKM(_root.InvokeUIScreen(Class'PSKM', True));\n\t\t\tif(_boxWindow != None)\n\t\t\t{\n\t\t\t\t_boxWindow._windowOwner = _Player;\n\t\t\t\t_boxWindow.Ac = Ac;\n\t\t\t\t_boxWindow.Mastah = Self;\n\t\t\t}\n\t\t}\n\t}\n}\n\nsimulated final function cAlert(string title, string msg)\n{\n\tlocal DeusExPlayer _Player;\n\tlocal DeusExRootWindow _root;\n\tlocal MenuAlert _boxWindow;\n\t_Player = DeusExPlayer(Owner);\n\t//log(\"Called cMenuLogin for\"@_Player.playerreplicationinfo.playername );\n\tif(_Player != None)\n\t{\n\t\t//_Player.InitRootWindow();\n\t\t_root = DeusExRootWindow(_Player.rootWindow);\n\t\tif(_root != None)\n\t\t{\n\t\t\t_boxWindow = MenuAlert(_root.InvokeUIScreen(Class'MenuAlert', True));\n\t\t\tif(_boxWindow != None)\n\t\t\t{\n\t\t\t\t_boxWindow._windowOwner = _Player;\n\t\t\t\t_boxWindow.crt(title, msg);\n\t\t\t//\t_boxWindow.ClientWidth = len(msg);\n\t\t\t}\n\t\t}\n\t}\n}\n\nsimulated function bool ChkPass(deusexplayer p, string Password)\n{\n\treturn ac.ChkPass(p, Password);\n}\n\nfunction timer()\n{\n\t\tSetOwner(flagger);\n\t\tcMenuLogin();\n}\n\ndefaultproperties\n{\n     NetPriority=1.500000\n}\n",
            "name": "PSKR.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "NetPriority=1.500000"
                ],
                "exec": [],
                "extends": "PGActors",
                "functions": {
                    "ChkPass": {
                        "body": "{\n\treturn ac.ChkPass(p, Password);\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "ChkPass",
                        "native": false,
                        "param": [
                            [
                                "deusexplayer",
                                "p"
                            ],
                            [
                                "string",
                                "Password"
                            ]
                        ],
                        "return": "bool"
                    },
                    "cAlert": {
                        "body": "{\n\t_Player = DeusExPlayer(Owner);\n\t//log(\"Called cMenuLogin for\"@_Player.playerreplicationinfo.playername );\n\tif(_Player != None)\n\t{\n\t\t//_Player.InitRootWindow();\n\t\t_root = DeusExRootWindow(_Player.rootWindow);\n\t\tif(_root != None)\n\t\t{\n\t\t\t_boxWindow = MenuAlert(_root.InvokeUIScreen(Class'MenuAlert', True));\n\t\t\tif(_boxWindow != None)\n\t\t\t{\n\t\t\t\t_boxWindow._windowOwner = _Player;\n\t\t\t\t_boxWindow.crt(title, msg);\n\t\t\t//\t_boxWindow.ClientWidth = len(msg);\n\t\t\t}\n\t\t}\n\t}\n}",
                        "locals": [
                            "local DeusExPlayer _Player;",
                            "local DeusExRootWindow _root;",
                            "local MenuAlert _boxWindow;"
                        ],
                        "modifiers": [
                            "final",
                            "simulated"
                        ],
                        "name": "cAlert",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "title"
                            ],
                            [
                                "string",
                                "msg"
                            ]
                        ],
                        "return": ""
                    },
                    "cMenuLogin": {
                        "body": "{\n\t_Player = DeusExPlayer(Owner);\n\t//log(\"Called cMenuLogin for\"@_Player.playerreplicationinfo.playername );\n\tif(_Player != None)\n\t{\n\t\t//_Player.InitRootWindow();\n\t\t_root = DeusExRootWindow(_Player.rootWindow);\n\t\tif(_root != None)\n\t\t{\n\t\t\t_boxWindow = PSKM(_root.InvokeUIScreen(Class'PSKM', True));\n\t\t\tif(_boxWindow != None)\n\t\t\t{\n\t\t\t\t_boxWindow._windowOwner = _Player;\n\t\t\t\t_boxWindow.Ac = Ac;\n\t\t\t\t_boxWindow.Mastah = Self;\n\t\t\t}\n\t\t}\n\t}\n}",
                        "locals": [
                            "local DeusExPlayer _Player;",
                            "local DeusExRootWindow _root;",
                            "local PSKM _boxWindow;"
                        ],
                        "modifiers": [
                            "final",
                            "simulated"
                        ],
                        "name": "cMenuLogin",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "timer": {
                        "body": "{\n\t\tSetOwner(flagger);\n\t\tcMenuLogin();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 80,
                "replication": "",
                "states": [],
                "variables": [
                    "var PlayerPawn Flagger;",
                    "var PSKeypad Ac;"
                ]
            }
        },
        "PSKeypad.uc": {
            "body": "//=============================================================================\n// ComputerPersonal.\n//=============================================================================\nclass PSKeypad extends DeusExDecoration;\n\nvar() string Password;\n\nfunction bool ChkPass(deusexplayer p, string inputPassword)\n{\n\tlocal string mailstring, sendstring, target, msg;\n\tlocal int mailint,i, b;\n\tlocal actor a;\n\tlocal bool bSkipPass;\n\tlocal PSKR f;\n\t\t\n\tif(inputPassword != Password)\n\t{\n\t\txAlert(p, \"Alert\",\"Access denied.\");\n\t\treturn false;\n\t}\n\t\n\tif (Event != '')\n\t\t\tforeach AllActors(class 'Actor', A, Event)\n\t\t\t\tA.Trigger(Self, P);\n\t\n\txAlert(p, \"Alert\",\"|P3Access granted.\");\n\t\n}\n\nfunction xAlert(deusexplayer p, string title, string msg)\n{\n\tlocal PSKR f;\n\tforeach AllActors(class'PSKR', f)\n\t\t\t\tif(f.Flagger == p)\n\t\t\t\t\tf.cAlert(title, msg);\n}\n\nfunction Frob(actor frobber, inventory frobwith)\n{\n\tlocal DeusExPlayer P;\n\tlocal PSKR newlogin, f;\n\tlocal bool bFound;\n\t\n\tP = DeusExPlayer(frobber);\n\tP.PlaySound(sound'Auth',,,, 256);\n\t\n\tforeach AllActors(class'PSKR', f)\n\t\tif(f.Flagger == P)\n\t\t{\n\t\t\tf.Flagger = P;\n\t\t\tf.ac = self;\n\t\t\tf.SetTimer(0.5,false);\n\t\t\tbFound=True;\n\t\t}\n\t\t\t\n\tif(!bFound)\n\t{\n\t\tnewlogin = Spawn(class'PSKR');\n\t\tnewlogin.Flagger = P;\n\t\tnewlogin.ac = self;\n\t\tnewlogin.SetTimer(0.5,false);\n\t}\n}\n\ndefaultproperties\n{\n     bInvincible=True\n     ItemName=\"Password Entry Device\"\n     bPushable=False\n     Physics=PHYS_None\n     Mesh=LodMesh'DeusExDeco.TAD'\n     CollisionRadius=7.400000\n     CollisionHeight=2.130000\n}\n",
            "name": "PSKeypad.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bInvincible=True",
                    "ItemName=\"Password Entry Device\"",
                    "bPushable=False",
                    "Physics=PHYS_None",
                    "Mesh=LodMesh'DeusExDeco.TAD'",
                    "CollisionRadius=7.400000",
                    "CollisionHeight=2.130000"
                ],
                "exec": [],
                "extends": "DeusExDecoration",
                "functions": {
                    "ChkPass": {
                        "body": "{\n\t\t\n\tif(inputPassword != Password)\n\t{\n\t\txAlert(p, \"Alert\",\"Access denied.\");\n\t\treturn false;\n\t}\n\t\n\tif (Event != '')\n\t\t\tforeach AllActors(class 'Actor', A, Event)\n\t\t\t\tA.Trigger(Self, P);\n\t\n\txAlert(p, \"Alert\",\"|P3Access granted.\");\n\t\n}",
                        "locals": [
                            "local string mailstring, sendstring, target, msg;",
                            "local int mailint,i, b;",
                            "local actor a;",
                            "local bool bSkipPass;",
                            "local PSKR f;"
                        ],
                        "modifiers": [],
                        "name": "ChkPass",
                        "native": false,
                        "param": [
                            [
                                "deusexplayer",
                                "p"
                            ],
                            [
                                "string",
                                "inputPassword"
                            ]
                        ],
                        "return": "bool"
                    },
                    "Frob": {
                        "body": "{\n\t\n\tP = DeusExPlayer(frobber);\n\tP.PlaySound(sound'Auth',,,, 256);\n\t\n\tforeach AllActors(class'PSKR', f)\n\t\tif(f.Flagger == P)\n\t\t{\n\t\t\tf.Flagger = P;\n\t\t\tf.ac = self;\n\t\t\tf.SetTimer(0.5,false);\n\t\t\tbFound=True;\n\t\t}\n\t\t\t\n\tif(!bFound)\n\t{\n\t\tnewlogin = Spawn(class'PSKR');\n\t\tnewlogin.Flagger = P;\n\t\tnewlogin.ac = self;\n\t\tnewlogin.SetTimer(0.5,false);\n\t}\n}",
                        "locals": [
                            "local DeusExPlayer P;",
                            "local PSKR newlogin, f;",
                            "local bool bFound;"
                        ],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "actor",
                                "frobber"
                            ],
                            [
                                "inventory",
                                "frobwith"
                            ]
                        ],
                        "return": ""
                    },
                    "xAlert": {
                        "body": "{\n\tforeach AllActors(class'PSKR', f)\n\t\t\t\tif(f.Flagger == p)\n\t\t\t\t\tf.cAlert(title, msg);\n}",
                        "locals": [
                            "local PSKR f;"
                        ],
                        "modifiers": [],
                        "name": "xAlert",
                        "native": false,
                        "param": [
                            [
                                "deusexplayer",
                                "p"
                            ],
                            [
                                "string",
                                "title"
                            ],
                            [
                                "string",
                                "msg"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 75,
                "replication": "",
                "states": [],
                "variables": [
                    "var() string Password;"
                ]
            }
        },
        "PSRespawner.uc": {
            "body": "class PSRespawner extends Actor;\n\nvar() class<ScriptedPawn> Respawn;\nvar() name respawnOrders, respawnState;\nvar() float respawnDelay;\nvar() bool bForceState, bForceOrders;\nvar() bool bForceCrim, bForceSteal;\nvar() sound sScanning[5], sTargetAcquired[3], sTargetLost[3], sCriticalDamage[3], sAreaSecure[3], sBossArmourDown, sBossArmourBack, sMedkitUsed, sCallingBackup[3], sRespondBackup[3], sHunting[3];\nvar bool bLimitSpawning;\nvar int MinPlayers, PercentageChanceOfSpawn;\n\nvar bool bRespawning;\nvar scriptedpawn CurrentPawn;\nvar bool bInit;\n\nfunction PostBeginPlay()\n{\n\tlocal int f;\n\t\n\tCurrentPawn = Spawn(Respawn,,,location);\n\t/*if(bForceState)\n\t\tCurrentPawn.SetNextState(respawnState);*/\n\t\n\tif(bForceOrders)\n\t\tCurrentPawn.setOrders(respawnOrders,,False);\n\t\n\tif(bForceCrim && DXScriptedPawn(CurrentPawn) != None)\n\t\tDXScriptedPawn(CurrentPawn).bEnableCrim=True;\n\t\t\n\tif(bForceSteal && DXScriptedPawn(CurrentPawn) != None)\n\t\tDXScriptedPawn(CurrentPawn).bSteal=True;\n\t\n\tif(DXScriptedPawn(CurrentPawn) != None)\n\t{\n\t\tbLimitSpawning = DXScriptedPawn(CurrentPawn).bLimitSpawning;\n\t\tMinPlayers = DXScriptedPawn(CurrentPawn).MinPlayers;\n\t\tPercentageChanceOfSpawn = DXScriptedPawn(CurrentPawn).PercentageChanceOfSpawn;\n\t\tif(DXScriptedPawn(CurrentPawn).bLimitSpawning)\n\t\t{\n\t\t\t\n\t\t\tif(Rand(100) > DXScriptedPawn(CurrentPawn).PercentageChanceOfSpawn)\n\t\t\t{\n\t\t\t\tLog(\"Respawner will not trigger. (Disabled due to pawns Chance of Appearance) [\"$DXScriptedPawn(CurrentPawn)$\"]\");\n\t\t\t\tDestroy();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t}\n\t\t\t\n\t\tfor(f=0;f<5;f++)\n\t\t\tDXScriptedPawn(CurrentPawn).sScanning[f] = sScanning[f];\n\t\t\n\t\tfor(f=0;f<3;f++)\n\t\t{\n\t\t\tDXScriptedPawn(CurrentPawn).sTargetAcquired[f] = sTargetAcquired[f];\n\t\t\tDXScriptedPawn(CurrentPawn).sTargetLost[f] = sTargetLost[f];\n\t\t\tDXScriptedPawn(CurrentPawn).sCriticalDamage[f] = sCriticalDamage[f];\n\t\t\tDXScriptedPawn(CurrentPawn).sAreaSecure[f] = sAreaSecure[f];\n\t\t\tDXScriptedPawn(CurrentPawn).sCallingBackup[f] = sCallingBackup[f];\n\t\t\tDXScriptedPawn(CurrentPawn).sRespondBackup[f] = sRespondBackup[f];\n\t\t\tDXScriptedPawn(CurrentPawn).sHunting[f] = sHunting[f];\n\t\t}\n\t\t\n\t\tDXScriptedPawn(CurrentPawn).sBossArmourDown = sBossArmourDown;\n\t\tDXScriptedPawn(CurrentPawn).sBossArmourBack = sBossArmourBack;\n\t\tDXScriptedPawn(CurrentPawn).sMedkitUsed = sMedkitUsed;\n\t}\n\t//CurrentPawn.InitializePawn();\n\tLog(CurrentPawn$\" spawned. (\"$bForceOrders$respawnOrders$\") (\"$bForceState$respawnState$\")\");\n\tbRespawning=False;\n}\n\nfunction Tick(float deltatime)\n{\n\tif(!bInit)\n\t{\n\t\tif(CurrentPawn == None && !bRespawning)\n\t\t{\n\t\t\tSetTimer(3,False);\n\t\t\tbRespawning=True;\n\t\t}\n\t\tif(CurrentPawn != None)\n\t\t{\n\t\t\tif(CurrentPawn.IsInState('Dying') && !bRespawning)\n\t\t\t{\n\t\t\t\tSetTimer(3,False);\n\t\t\t\tbRespawning=True;\n\t\t\t}\n\t\t}\n\t\tbInit=True;\n\t}\n\telse\n\t{\n\t\tif(CurrentPawn == None && !bRespawning)\n\t\t{\n\t\t\tSetTimer(respawnDelay,False);\n\t\t\tbRespawning=True;\n\t\t}\n\t\tif(CurrentPawn != None)\n\t\t{\n\t\t\tif(CurrentPawn.IsInState('Dying') && !bRespawning)\n\t\t\t{\n\t\t\t\tSetTimer(respawnDelay,False);\n\t\t\t\tbRespawning=True;\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction Timer()\n{\n\tlocal int f;\n\t\n\tCurrentPawn = Spawn(Respawn,,,location);\n\t/*if(bForceState)\n\t\tCurrentPawn.SetNextState(respawnState);*/\n\t\t\n\tif(bForceOrders)\n\t\tCurrentPawn.setOrders(respawnOrders,,False);\n\t\n\tif(bForceCrim && DXScriptedPawn(CurrentPawn) != None)\n\t\tDXScriptedPawn(CurrentPawn).bEnableCrim=True;\n\t\t\n\tif(bForceSteal && DXScriptedPawn(CurrentPawn) != None)\n\t\tDXScriptedPawn(CurrentPawn).bSteal=True;\n\t\n\tif(DXScriptedPawn(CurrentPawn) != None)\n\t{\n\t\t\n\t\t\tDXScriptedPawn(CurrentPawn).bLimitSpawning = bLimitSpawning;\n\t\t\tDXScriptedPawn(CurrentPawn).MinPlayers = MinPlayers;\n\t\t\tDXScriptedPawn(CurrentPawn).PercentageChanceOfSpawn = PercentageChanceOfSpawn;\n\t\t\t\n\t\t\tfor(f=0;f<5;f++)\n\t\t\t\tDXScriptedPawn(CurrentPawn).sScanning[f] = sScanning[f];\n\t\t\t\n\t\t\tfor(f=0;f<3;f++)\n\t\t\t{\n\t\t\t\tDXScriptedPawn(CurrentPawn).sTargetAcquired[f] = sTargetAcquired[f];\n\t\t\t\tDXScriptedPawn(CurrentPawn).sTargetLost[f] = sTargetLost[f];\n\t\t\t\tDXScriptedPawn(CurrentPawn).sCriticalDamage[f] = sCriticalDamage[f];\n\t\t\t\tDXScriptedPawn(CurrentPawn).sAreaSecure[f] = sAreaSecure[f];\n\t\t\t\tDXScriptedPawn(CurrentPawn).sCallingBackup[f] = sCallingBackup[f];\n\t\t\t\tDXScriptedPawn(CurrentPawn).sRespondBackup[f] = sRespondBackup[f];\n\t\t\t\tDXScriptedPawn(CurrentPawn).sHunting[f] = sHunting[f];\n\t\t\t}\n\t\t\t\n\t\t\tDXScriptedPawn(CurrentPawn).sBossArmourDown = sBossArmourDown;\n\t\t\tDXScriptedPawn(CurrentPawn).sBossArmourBack = sBossArmourBack;\n\t\t\tDXScriptedPawn(CurrentPawn).sMedkitUsed = sMedkitUsed;\n\t}\n\t//CurrentPawn.InitializePawn();\n\tLog(CurrentPawn$\" spawned. (\"$bForceOrders$respawnOrders$\") (\"$bForceState$respawnState$\")\");\n\tbRespawning=False;\n}\n\ndefaultproperties\n{\n     respawnDelay=250.000000\n     bHidden=True\n}\n",
            "name": "PSRespawner.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "respawnDelay=250.000000",
                    "bHidden=True"
                ],
                "exec": [],
                "extends": "Actor",
                "functions": {
                    "PostBeginPlay": {
                        "body": "{\n\t\n\tCurrentPawn = Spawn(Respawn,,,location);\n\t/*if(bForceState)\n\t\tCurrentPawn.SetNextState(respawnState);*/\n\t\n\tif(bForceOrders)\n\t\tCurrentPawn.setOrders(respawnOrders,,False);\n\t\n\tif(bForceCrim && DXScriptedPawn(CurrentPawn) != None)\n\t\tDXScriptedPawn(CurrentPawn).bEnableCrim=True;\n\t\t\n\tif(bForceSteal && DXScriptedPawn(CurrentPawn) != None)\n\t\tDXScriptedPawn(CurrentPawn).bSteal=True;\n\t\n\tif(DXScriptedPawn(CurrentPawn) != None)\n\t{\n\t\tbLimitSpawning = DXScriptedPawn(CurrentPawn).bLimitSpawning;\n\t\tMinPlayers = DXScriptedPawn(CurrentPawn).MinPlayers;\n\t\tPercentageChanceOfSpawn = DXScriptedPawn(CurrentPawn).PercentageChanceOfSpawn;\n\t\tif(DXScriptedPawn(CurrentPawn).bLimitSpawning)\n\t\t{\n\t\t\t\n\t\t\tif(Rand(100) > DXScriptedPawn(CurrentPawn).PercentageChanceOfSpawn)\n\t\t\t{\n\t\t\t\tLog(\"Respawner will not trigger. (Disabled due to pawns Chance of Appearance) [\"$DXScriptedPawn(CurrentPawn)$\"]\");\n\t\t\t\tDestroy();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t}\n\t\t\t\n\t\tfor(f=0;f<5;f++)\n\t\t\tDXScriptedPawn(CurrentPawn).sScanning[f] = sScanning[f];\n\t\t\n\t\tfor(f=0;f<3;f++)\n\t\t{\n\t\t\tDXScriptedPawn(CurrentPawn).sTargetAcquired[f] = sTargetAcquired[f];\n\t\t\tDXScriptedPawn(CurrentPawn).sTargetLost[f] = sTargetLost[f];\n\t\t\tDXScriptedPawn(CurrentPawn).sCriticalDamage[f] = sCriticalDamage[f];\n\t\t\tDXScriptedPawn(CurrentPawn).sAreaSecure[f] = sAreaSecure[f];\n\t\t\tDXScriptedPawn(CurrentPawn).sCallingBackup[f] = sCallingBackup[f];\n\t\t\tDXScriptedPawn(CurrentPawn).sRespondBackup[f] = sRespondBackup[f];\n\t\t\tDXScriptedPawn(CurrentPawn).sHunting[f] = sHunting[f];\n\t\t}\n\t\t\n\t\tDXScriptedPawn(CurrentPawn).sBossArmourDown = sBossArmourDown;\n\t\tDXScriptedPawn(CurrentPawn).sBossArmourBack = sBossArmourBack;\n\t\tDXScriptedPawn(CurrentPawn).sMedkitUsed = sMedkitUsed;\n\t}\n\t//CurrentPawn.InitializePawn();\n\tLog(CurrentPawn$\" spawned. (\"$bForceOrders$respawnOrders$\") (\"$bForceState$respawnState$\")\");\n\tbRespawning=False;\n}",
                        "locals": [
                            "local int f;"
                        ],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Tick": {
                        "body": "{\n\tif(!bInit)\n\t{\n\t\tif(CurrentPawn == None && !bRespawning)\n\t\t{\n\t\t\tSetTimer(3,False);\n\t\t\tbRespawning=True;\n\t\t}\n\t\tif(CurrentPawn != None)\n\t\t{\n\t\t\tif(CurrentPawn.IsInState('Dying') && !bRespawning)\n\t\t\t{\n\t\t\t\tSetTimer(3,False);\n\t\t\t\tbRespawning=True;\n\t\t\t}\n\t\t}\n\t\tbInit=True;\n\t}\n\telse\n\t{\n\t\tif(CurrentPawn == None && !bRespawning)\n\t\t{\n\t\t\tSetTimer(respawnDelay,False);\n\t\t\tbRespawning=True;\n\t\t}\n\t\tif(CurrentPawn != None)\n\t\t{\n\t\t\tif(CurrentPawn.IsInState('Dying') && !bRespawning)\n\t\t\t{\n\t\t\t\tSetTimer(respawnDelay,False);\n\t\t\t\tbRespawning=True;\n\t\t\t}\n\t\t}\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltatime"
                            ]
                        ],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\t\n\tCurrentPawn = Spawn(Respawn,,,location);\n\t/*if(bForceState)\n\t\tCurrentPawn.SetNextState(respawnState);*/\n\t\t\n\tif(bForceOrders)\n\t\tCurrentPawn.setOrders(respawnOrders,,False);\n\t\n\tif(bForceCrim && DXScriptedPawn(CurrentPawn) != None)\n\t\tDXScriptedPawn(CurrentPawn).bEnableCrim=True;\n\t\t\n\tif(bForceSteal && DXScriptedPawn(CurrentPawn) != None)\n\t\tDXScriptedPawn(CurrentPawn).bSteal=True;\n\t\n\tif(DXScriptedPawn(CurrentPawn) != None)\n\t{\n\t\t\n\t\t\tDXScriptedPawn(CurrentPawn).bLimitSpawning = bLimitSpawning;\n\t\t\tDXScriptedPawn(CurrentPawn).MinPlayers = MinPlayers;\n\t\t\tDXScriptedPawn(CurrentPawn).PercentageChanceOfSpawn = PercentageChanceOfSpawn;\n\t\t\t\n\t\t\tfor(f=0;f<5;f++)\n\t\t\t\tDXScriptedPawn(CurrentPawn).sScanning[f] = sScanning[f];\n\t\t\t\n\t\t\tfor(f=0;f<3;f++)\n\t\t\t{\n\t\t\t\tDXScriptedPawn(CurrentPawn).sTargetAcquired[f] = sTargetAcquired[f];\n\t\t\t\tDXScriptedPawn(CurrentPawn).sTargetLost[f] = sTargetLost[f];\n\t\t\t\tDXScriptedPawn(CurrentPawn).sCriticalDamage[f] = sCriticalDamage[f];\n\t\t\t\tDXScriptedPawn(CurrentPawn).sAreaSecure[f] = sAreaSecure[f];\n\t\t\t\tDXScriptedPawn(CurrentPawn).sCallingBackup[f] = sCallingBackup[f];\n\t\t\t\tDXScriptedPawn(CurrentPawn).sRespondBackup[f] = sRespondBackup[f];\n\t\t\t\tDXScriptedPawn(CurrentPawn).sHunting[f] = sHunting[f];\n\t\t\t}\n\t\t\t\n\t\t\tDXScriptedPawn(CurrentPawn).sBossArmourDown = sBossArmourDown;\n\t\t\tDXScriptedPawn(CurrentPawn).sBossArmourBack = sBossArmourBack;\n\t\t\tDXScriptedPawn(CurrentPawn).sMedkitUsed = sMedkitUsed;\n\t}\n\t//CurrentPawn.InitializePawn();\n\tLog(CurrentPawn$\" spawned. (\"$bForceOrders$respawnOrders$\") (\"$bForceState$respawnState$\")\");\n\tbRespawning=False;\n}",
                        "locals": [
                            "local int f;"
                        ],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 162,
                "replication": "",
                "states": [],
                "variables": [
                    "var() class<ScriptedPawn> Respawn;",
                    "var() name respawnOrders, respawnState;",
                    "var() float respawnDelay;",
                    "var() bool bForceState, bForceOrders;",
                    "var() bool bForceCrim, bForceSteal;",
                    "var() sound sScanning[5], sTargetAcquired[3], sTargetLost[3], sCriticalDamage[3], sAreaSecure[3], sBossArmourDown, sBossArmourBack, sMedkitUsed, sCallingBackup[3], sRespondBackup[3], sHunting[3];",
                    "var bool bLimitSpawning;",
                    "var int MinPlayers, PercentageChanceOfSpawn;",
                    "var bool bRespawning;",
                    "var scriptedpawn CurrentPawn;",
                    "var bool bInit;"
                ]
            }
        },
        "PSRespawner2.uc": {
            "body": "class PSRespawner2 extends Actor;\n\nvar() name RespawnTag;\nvar() float respawnDelay;\n\nvar rotator OrigRotation;\nvar vector OrigLocation;\nvar bool bRespawning;\nvar scriptedpawn CurrentPawn;\nvar name OrigOrders, OrigState;\nvar class<scriptedpawn> respawn;\nvar bool bOrigCrim, bOrigSteal;\nvar bool bOrigUseChatList;\nvar string OrigSaymsg;\nvar bool bOrigRandomList;\nvar string OrigListMSGs[5];\nvar sound sScanning[5], sTargetAcquired[3], sTargetLost[3], sCriticalDamage[3], sAreaSecure[3], sBossArmourDown, sBossArmourBack, sMedkitUsed, sCallingBackup[3], sRespondBackup[3], sHunting[3];\nvar bool bLimitSpawning;\nvar int MinPlayers, PercentageChanceOfSpawn;\n\nfunction PostBeginPlay()\n{\n\tlocal ScriptedPawn SP;\n\tlocal DXScriptedPawn DSP;\n\tlocal int i, f;\n\t\n\tforeach Allactors(class'ScriptedPawn', SP)\n\t\tif(SP.tag == respawntag)\n\t\t\tCurrentPawn = SP;\n\n\tif(CurrentPawn == None)\n\t{\n\t\tLog(\"ERROR: No pawn found. \"$RespawnTag);\n\t\tDestroy();\n\t}\n\telse\n\t{\n\t\trespawn = CurrentPawn.class;\n\t\tOrigLocation = CurrentPawn.Location;\n\t\tOrigRotation = CurrentPawn.Rotation;\n\t\tOrigOrders = CurrentPawn.Orders;\n\t\tOrigState = CurrentPawn.InitialState;\n\t\tif(DXScriptedPawn(CurrentPawn) != None)\n\t\t{\n\t\t\tbLimitSpawning = DXScriptedPawn(CurrentPawn).bLimitSpawning;\n\t\t\tMinPlayers = DXScriptedPawn(CurrentPawn).MinPlayers;\n\t\t\tPercentageChanceOfSpawn = DXScriptedPawn(CurrentPawn).PercentageChanceOfSpawn;\n\t\t\tif(DXScriptedPawn(CurrentPawn).bLimitSpawning)\n\t\t\t{\n\t\t\t\tif(Rand(100) > DXScriptedPawn(CurrentPawn).PercentageChanceOfSpawn)\n\t\t\t\t{\n\t\t\t\t\tLog(\"Respawner2 will not trigger. (Disabled due to pawns Chance of Appearance) [\"$DXScriptedPawn(CurrentPawn)$\"]\");\n\t\t\t\t\tCurrentPawn.Destroy();\n\t\t\t\t\tDestroy();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tbOrigUseChatList=DXScriptedPawn(CurrentPawn).bUseChatList;\n\t\t\tbOrigRandomList=DXScriptedPawn(CurrentPawn).bRandomList;\n\t\t\tOrigSaymsg=DXScriptedPawn(CurrentPawn).Saymsg;\n\t\t\tbOrigCrim=DXScriptedPawn(CurrentPawn).bEnableCrim;\n\t\t\tbOrigSteal=DXScriptedPawn(CurrentPawn).bSteal;\n\t\t\t\n\t\t\tfor(f=0;f<5;f++)\n\t\t\t\tsScanning[f] = DXScriptedPawn(CurrentPawn).sScanning[f];\n\t\t\t\t\n\t\t\tfor(f=0;f<3;f++)\n\t\t\t{\n\t\t\t\tsTargetAcquired[f] = DXScriptedPawn(CurrentPawn).sTargetAcquired[f];\n\t\t\t\tsTargetLost[f] = DXScriptedPawn(CurrentPawn).sTargetLost[f];\n\t\t\t\tsCriticalDamage[f] = DXScriptedPawn(CurrentPawn).sCriticalDamage[f];\n\t\t\t\tsAreaSecure[f] = DXScriptedPawn(CurrentPawn).sAreaSecure[f];\n\t\t\t\tsCallingBackup[f] = DXScriptedPawn(CurrentPawn).sCallingBackup[f];\n\t\t\t\tsRespondBackup[f] = DXScriptedPawn(CurrentPawn).sRespondBackup[f];\n\t\t\t\tsHunting[f] = DXScriptedPawn(CurrentPawn).sHunting[f];\n\t\t\t}\n\t\t\t\n\t\t\tsBossArmourDown = DXScriptedPawn(CurrentPawn).sBossArmourDown;\n\t\t\tsBossArmourBack = DXScriptedPawn(CurrentPawn).sBossArmourBack;\n\t\t\tsMedkitUsed = DXScriptedPawn(CurrentPawn).sMedkitUsed;\n\t\t\t\n\t\t\t\n\t\t\tfor (i=0;i<5;i++)\n\t\t\t{\n\t\t\t\tOrigListMSGs[i] = DXScriptedPawn(CurrentPawn).ListMSGs[i];\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction Tick(float deltatime)\n{\n\tif(CurrentPawn == None && !bRespawning)\n\t{\n\t\tSetTimer(respawnDelay,False);\n\t\tbRespawning=True;\n\t}\n\tif(CurrentPawn != None)\n\t{\n\t\tif(CurrentPawn.IsInState('Dying') && !bRespawning)\n\t\t{\n\t\t\tSetTimer(respawnDelay,False);\n\t\t\tbRespawning=True;\n\t\t}\n\t}\n}\n\nfunction Timer()\n{\n\tlocal int i, f;\n\n\tCurrentPawn = Spawn(Respawn,,,Origlocation, OrigRotation);\n\tif(OrigOrders != 'None')\n\t\tCurrentPawn.SetOrders(OrigOrders,,False);\n\t//if(OrigState != 'None')\n\t//\tCurrentPawn.SetNextState(Origstate);\n\t\tif(DXScriptedPawn(CurrentPawn) != None)\n\t\t{\n\t\t\tDXScriptedPawn(CurrentPawn).bLimitSpawning = bLimitSpawning;\n\t\t\tDXScriptedPawn(CurrentPawn).MinPlayers = MinPlayers;\n\t\t\tDXScriptedPawn(CurrentPawn).PercentageChanceOfSpawn = PercentageChanceOfSpawn;\n\t\t\t\n\t\t\tDXScriptedPawn(CurrentPawn).bEnableCrim    = bOrigCrim;\n\t\t\tDXScriptedPawn(CurrentPawn).bSteal         = bOrigSteal;\n\t\t\tDXScriptedPawn(CurrentPawn).bUseChatList   = bOrigUseChatList;\n\t\t\tDXScriptedPawn(CurrentPawn).bRandomList    = bOrigRandomList;\n\t\t\tDXScriptedPawn(CurrentPawn).Saymsg         = OrigSaymsg;\n\t\t\t\n\t\t\tfor(f=0;f<5;f++)\n\t\t\t\tDXScriptedPawn(CurrentPawn).sScanning[f] = sScanning[f];\n\t\t\t\n\t\t\tfor(f=0;f<3;f++)\n\t\t\t{\n\t\t\t\tDXScriptedPawn(CurrentPawn).sTargetAcquired[f] = sTargetAcquired[f];\n\t\t\t\tDXScriptedPawn(CurrentPawn).sTargetLost[f] = sTargetLost[f];\n\t\t\t\tDXScriptedPawn(CurrentPawn).sCriticalDamage[f] = sCriticalDamage[f];\n\t\t\t\tDXScriptedPawn(CurrentPawn).sAreaSecure[f] = sAreaSecure[f];\n\t\t\t\tDXScriptedPawn(CurrentPawn).sCallingBackup[f] = sCallingBackup[f];\n\t\t\t\tDXScriptedPawn(CurrentPawn).sRespondBackup[f] = sRespondBackup[f];\n\t\t\t\tDXScriptedPawn(CurrentPawn).sHunting[f] = sHunting[f];\n\t\t\t}\n\t\t\t\n\t\t\tDXScriptedPawn(CurrentPawn).sBossArmourDown = sBossArmourDown;\n\t\t\tDXScriptedPawn(CurrentPawn).sBossArmourBack = sBossArmourBack;\n\t\t\tDXScriptedPawn(CurrentPawn).sMedkitUsed = sMedkitUsed;\n\t\t\t\n\t\t\tfor (i=0;i<5;i++)\n\t\t\t{\n\t\t\t\tDXScriptedPawn(CurrentPawn).ListMSGs[i]= OrigListMSGs[i];\n\t\t\t}\n\t\t}\n\tCurrentPawn.InitializePawn();\n\tLog(CurrentPawn$\" spawned.\");\n\tbRespawning=False;\n}\n\ndefaultproperties\n{\n     respawnDelay=250.000000\n     bHidden=True\n}\n",
            "name": "PSRespawner2.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "respawnDelay=250.000000",
                    "bHidden=True"
                ],
                "exec": [],
                "extends": "Actor",
                "functions": {
                    "PostBeginPlay": {
                        "body": "{\n\t\n\tforeach Allactors(class'ScriptedPawn', SP)\n\t\tif(SP.tag == respawntag)\n\t\t\tCurrentPawn = SP;\n\n\tif(CurrentPawn == None)\n\t{\n\t\tLog(\"ERROR: No pawn found. \"$RespawnTag);\n\t\tDestroy();\n\t}\n\telse\n\t{\n\t\trespawn = CurrentPawn.class;\n\t\tOrigLocation = CurrentPawn.Location;\n\t\tOrigRotation = CurrentPawn.Rotation;\n\t\tOrigOrders = CurrentPawn.Orders;\n\t\tOrigState = CurrentPawn.InitialState;\n\t\tif(DXScriptedPawn(CurrentPawn) != None)\n\t\t{\n\t\t\tbLimitSpawning = DXScriptedPawn(CurrentPawn).bLimitSpawning;\n\t\t\tMinPlayers = DXScriptedPawn(CurrentPawn).MinPlayers;\n\t\t\tPercentageChanceOfSpawn = DXScriptedPawn(CurrentPawn).PercentageChanceOfSpawn;\n\t\t\tif(DXScriptedPawn(CurrentPawn).bLimitSpawning)\n\t\t\t{\n\t\t\t\tif(Rand(100) > DXScriptedPawn(CurrentPawn).PercentageChanceOfSpawn)\n\t\t\t\t{\n\t\t\t\t\tLog(\"Respawner2 will not trigger. (Disabled due to pawns Chance of Appearance) [\"$DXScriptedPawn(CurrentPawn)$\"]\");\n\t\t\t\t\tCurrentPawn.Destroy();\n\t\t\t\t\tDestroy();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tbOrigUseChatList=DXScriptedPawn(CurrentPawn).bUseChatList;\n\t\t\tbOrigRandomList=DXScriptedPawn(CurrentPawn).bRandomList;\n\t\t\tOrigSaymsg=DXScriptedPawn(CurrentPawn).Saymsg;\n\t\t\tbOrigCrim=DXScriptedPawn(CurrentPawn).bEnableCrim;\n\t\t\tbOrigSteal=DXScriptedPawn(CurrentPawn).bSteal;\n\t\t\t\n\t\t\tfor(f=0;f<5;f++)\n\t\t\t\tsScanning[f] = DXScriptedPawn(CurrentPawn).sScanning[f];\n\t\t\t\t\n\t\t\tfor(f=0;f<3;f++)\n\t\t\t{\n\t\t\t\tsTargetAcquired[f] = DXScriptedPawn(CurrentPawn).sTargetAcquired[f];\n\t\t\t\tsTargetLost[f] = DXScriptedPawn(CurrentPawn).sTargetLost[f];\n\t\t\t\tsCriticalDamage[f] = DXScriptedPawn(CurrentPawn).sCriticalDamage[f];\n\t\t\t\tsAreaSecure[f] = DXScriptedPawn(CurrentPawn).sAreaSecure[f];\n\t\t\t\tsCallingBackup[f] = DXScriptedPawn(CurrentPawn).sCallingBackup[f];\n\t\t\t\tsRespondBackup[f] = DXScriptedPawn(CurrentPawn).sRespondBackup[f];\n\t\t\t\tsHunting[f] = DXScriptedPawn(CurrentPawn).sHunting[f];\n\t\t\t}\n\t\t\t\n\t\t\tsBossArmourDown = DXScriptedPawn(CurrentPawn).sBossArmourDown;\n\t\t\tsBossArmourBack = DXScriptedPawn(CurrentPawn).sBossArmourBack;\n\t\t\tsMedkitUsed = DXScriptedPawn(CurrentPawn).sMedkitUsed;\n\t\t\t\n\t\t\t\n\t\t\tfor (i=0;i<5;i++)\n\t\t\t{\n\t\t\t\tOrigListMSGs[i] = DXScriptedPawn(CurrentPawn).ListMSGs[i];\n\t\t\t}\n\t\t}\n\t}\n}",
                        "locals": [
                            "local ScriptedPawn SP;",
                            "local DXScriptedPawn DSP;",
                            "local int i, f;"
                        ],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Tick": {
                        "body": "{\n\tif(CurrentPawn == None && !bRespawning)\n\t{\n\t\tSetTimer(respawnDelay,False);\n\t\tbRespawning=True;\n\t}\n\tif(CurrentPawn != None)\n\t{\n\t\tif(CurrentPawn.IsInState('Dying') && !bRespawning)\n\t\t{\n\t\t\tSetTimer(respawnDelay,False);\n\t\t\tbRespawning=True;\n\t\t}\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltatime"
                            ]
                        ],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\n\tCurrentPawn = Spawn(Respawn,,,Origlocation, OrigRotation);\n\tif(OrigOrders != 'None')\n\t\tCurrentPawn.SetOrders(OrigOrders,,False);\n\t//if(OrigState != 'None')\n\t//\tCurrentPawn.SetNextState(Origstate);\n\t\tif(DXScriptedPawn(CurrentPawn) != None)\n\t\t{\n\t\t\tDXScriptedPawn(CurrentPawn).bLimitSpawning = bLimitSpawning;\n\t\t\tDXScriptedPawn(CurrentPawn).MinPlayers = MinPlayers;\n\t\t\tDXScriptedPawn(CurrentPawn).PercentageChanceOfSpawn = PercentageChanceOfSpawn;\n\t\t\t\n\t\t\tDXScriptedPawn(CurrentPawn).bEnableCrim    = bOrigCrim;\n\t\t\tDXScriptedPawn(CurrentPawn).bSteal         = bOrigSteal;\n\t\t\tDXScriptedPawn(CurrentPawn).bUseChatList   = bOrigUseChatList;\n\t\t\tDXScriptedPawn(CurrentPawn).bRandomList    = bOrigRandomList;\n\t\t\tDXScriptedPawn(CurrentPawn).Saymsg         = OrigSaymsg;\n\t\t\t\n\t\t\tfor(f=0;f<5;f++)\n\t\t\t\tDXScriptedPawn(CurrentPawn).sScanning[f] = sScanning[f];\n\t\t\t\n\t\t\tfor(f=0;f<3;f++)\n\t\t\t{\n\t\t\t\tDXScriptedPawn(CurrentPawn).sTargetAcquired[f] = sTargetAcquired[f];\n\t\t\t\tDXScriptedPawn(CurrentPawn).sTargetLost[f] = sTargetLost[f];\n\t\t\t\tDXScriptedPawn(CurrentPawn).sCriticalDamage[f] = sCriticalDamage[f];\n\t\t\t\tDXScriptedPawn(CurrentPawn).sAreaSecure[f] = sAreaSecure[f];\n\t\t\t\tDXScriptedPawn(CurrentPawn).sCallingBackup[f] = sCallingBackup[f];\n\t\t\t\tDXScriptedPawn(CurrentPawn).sRespondBackup[f] = sRespondBackup[f];\n\t\t\t\tDXScriptedPawn(CurrentPawn).sHunting[f] = sHunting[f];\n\t\t\t}\n\t\t\t\n\t\t\tDXScriptedPawn(CurrentPawn).sBossArmourDown = sBossArmourDown;\n\t\t\tDXScriptedPawn(CurrentPawn).sBossArmourBack = sBossArmourBack;\n\t\t\tDXScriptedPawn(CurrentPawn).sMedkitUsed = sMedkitUsed;\n\t\t\t\n\t\t\tfor (i=0;i<5;i++)\n\t\t\t{\n\t\t\t\tDXScriptedPawn(CurrentPawn).ListMSGs[i]= OrigListMSGs[i];\n\t\t\t}\n\t\t}\n\tCurrentPawn.InitializePawn();\n\tLog(CurrentPawn$\" spawned.\");\n\tbRespawning=False;\n}",
                        "locals": [
                            "local int i, f;"
                        ],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 162,
                "replication": "",
                "states": [],
                "variables": [
                    "var() name RespawnTag;",
                    "var() float respawnDelay;",
                    "var rotator OrigRotation;",
                    "var vector OrigLocation;",
                    "var bool bRespawning;",
                    "var scriptedpawn CurrentPawn;",
                    "var name OrigOrders, OrigState;",
                    "var class<scriptedpawn> respawn;",
                    "var bool bOrigCrim, bOrigSteal;",
                    "var bool bOrigUseChatList;",
                    "var string OrigSaymsg;",
                    "var bool bOrigRandomList;",
                    "var string OrigListMSGs[5];",
                    "var sound sScanning[5], sTargetAcquired[3], sTargetLost[3], sCriticalDamage[3], sAreaSecure[3], sBossArmourDown, sBossArmourBack, sMedkitUsed, sCallingBackup[3], sRespondBackup[3], sHunting[3];",
                    "var bool bLimitSpawning;",
                    "var int MinPlayers, PercentageChanceOfSpawn;"
                ]
            }
        },
        "PSSing.uc": {
            "body": "//=============================================================================\n// Box.\n//=============================================================================\nclass PSSing extends PGActors;\n\nvar Actor Fattener;\nvar bool bReturning;\n\nfunction string GetDisplayString(Actor P)\n{\n\tif(P.isA('DeusExPlayer'))\n\t\treturn DeusExPlayer(p).PlayerReplicationInfo.PlayerName;\n\telse if(P.isA('ScriptedPawn'))\n\t\treturn ScriptedPawn(P).FamiliarName;\n\telse if(P.isA('DeusExDecoration'))\n\t\treturn DeusExDecoration(P).ItemName;\n}\n\nfunction Tick(float deltatime)\n{\n\tif(Fattener == None)\n\t{\n\t\tDestroy();\n\t\tLog(\"NO PLAYER ATTACHED, DESTROYING\",'Singularity');\n\t}\n\telse\n\t{\n\t\t\tSetLocation(Fattener.Location);\n\t\tif(!bReturning)\n\t\t{\n\t\t\tFattener.DrawScale -= 0.1;\n\t\t\tif(Fattener.Drawscale <= -1)\n\t\t\t{\n\t\t\t\tbReturning=True;\n\t\t\t}\t\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\tFattener.DrawScale += 0.1;\n\t\t\tif(Fattener.Drawscale >= 0)\n\t\t\t{\n\t\t\tBroadcastMessage(GetDisplayString(Fattener)$\" imploded.\");\n\t\t\tDeusExPlayer(Fattener).ReducedDamageType = '';\n\t\t\tScriptedPawn(Fattener).bInvincible=False;\n\t\t\tDeusExDecoration(Fattener).bInvincible=False;\n\t\t\tDeusExDecoration(Fattener).HitPoints = 1;\n\t\t\t\tFattener.TakeDamage(200,None,vect(0,0,0),vect(0,0,1),'Exploded');\n\t\t\t\tExplode();\n\n\t\t\t\tFattener.DrawScale=Fattener.Default.DrawScale;\n\t\t\t\tDestroy();\n\t\t\t}\t\t\t\t\t\n\t\t}\n\n\t}\n}\n\nfunction Explode()\n{\n\tlocal SphereEffect sphere;\n\tlocal ScorchMark s;\n\tlocal ExplosionLight light;\n\tlocal int i;\n\tlocal float explosionDamage;\n\tlocal float explosionRadius;\n\n\texplosionDamage = 600;\n\texplosionRadius = 100;\n\n\t// alert NPCs that I'm exploding\n\tAISendEvent('LoudNoise', EAITYPE_Audio, , explosionRadius*16);\n\tPlaySound(Sound'LargeExplosion1', SLOT_None,,, explosionRadius*16);\n\n\t// draw a pretty explosion\n\tlight = Spawn(class'ExplosionLight',,, Location);\n\tif (light != None)\n\t\tlight.size = 4;\n\n\tSpawn(class'ExplosionSmall',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionLarge',,, Location + 2*VRand()*CollisionRadius);\n\n\tsphere = Spawn(class'SphereEffect',,, Location);\n\tif (sphere != None)\n\t\tsphere.size = explosionRadius / 32.0;\n\n\t// spawn a mark\n\ts = spawn(class'ScorchMark', Base,, Location-vect(0,0,1)*CollisionHeight, Rotation+rot(16384,0,0));\n\tif (s != None)\n\t{\n\t\ts.DrawScale = FClamp(explosionDamage/30, 0.1, 3.0);\n\t\ts.ReattachDecal();\n\t}\n\n\t// spawn some rocks and flesh fragments\n\tfor (i=0; i<explosionDamage/6; i++)\n\t{\n\t\tif (FRand() < 0.3)\n\t\t\tspawn(class'Rockchip',,,Location);\n\t}\n\n\tHurtRadius(explosionDamage, explosionRadius, 'Exploded', explosionDamage*100, Location);\n}\n\ndefaultproperties\n{\n}\n",
            "name": "PSSing.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "PGActors",
                "functions": {
                    "Explode": {
                        "body": "{\n\n\texplosionDamage = 600;\n\texplosionRadius = 100;\n\n\t// alert NPCs that I'm exploding\n\tAISendEvent('LoudNoise', EAITYPE_Audio, , explosionRadius*16);\n\tPlaySound(Sound'LargeExplosion1', SLOT_None,,, explosionRadius*16);\n\n\t// draw a pretty explosion\n\tlight = Spawn(class'ExplosionLight',,, Location);\n\tif (light != None)\n\t\tlight.size = 4;\n\n\tSpawn(class'ExplosionSmall',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionLarge',,, Location + 2*VRand()*CollisionRadius);\n\n\tsphere = Spawn(class'SphereEffect',,, Location);\n\tif (sphere != None)\n\t\tsphere.size = explosionRadius / 32.0;\n\n\t// spawn a mark\n\ts = spawn(class'ScorchMark', Base,, Location-vect(0,0,1)*CollisionHeight, Rotation+rot(16384,0,0));\n\tif (s != None)\n\t{\n\t\ts.DrawScale = FClamp(explosionDamage/30, 0.1, 3.0);\n\t\ts.ReattachDecal();\n\t}\n\n\t// spawn some rocks and flesh fragments\n\tfor (i=0; i<explosionDamage/6; i++)\n\t{\n\t\tif (FRand() < 0.3)\n\t\t\tspawn(class'Rockchip',,,Location);\n\t}\n\n\tHurtRadius(explosionDamage, explosionRadius, 'Exploded', explosionDamage*100, Location);\n}",
                        "locals": [
                            "local SphereEffect sphere;",
                            "local ScorchMark s;",
                            "local ExplosionLight light;",
                            "local int i;",
                            "local float explosionDamage;",
                            "local float explosionRadius;"
                        ],
                        "modifiers": [],
                        "name": "Explode",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "GetDisplayString": {
                        "body": "{\n\tif(P.isA('DeusExPlayer'))\n\t\treturn DeusExPlayer(p).PlayerReplicationInfo.PlayerName;\n\telse if(P.isA('ScriptedPawn'))\n\t\treturn ScriptedPawn(P).FamiliarName;\n\telse if(P.isA('DeusExDecoration'))\n\t\treturn DeusExDecoration(P).ItemName;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetDisplayString",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "P"
                            ]
                        ],
                        "return": "string"
                    },
                    "Tick": {
                        "body": "{\n\tif(Fattener == None)\n\t{\n\t\tDestroy();\n\t\tLog(\"NO PLAYER ATTACHED, DESTROYING\",'Singularity');\n\t}\n\telse\n\t{\n\t\t\tSetLocation(Fattener.Location);\n\t\tif(!bReturning)\n\t\t{\n\t\t\tFattener.DrawScale -= 0.1;\n\t\t\tif(Fattener.Drawscale <= -1)\n\t\t\t{\n\t\t\t\tbReturning=True;\n\t\t\t}\t\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\tFattener.DrawScale += 0.1;\n\t\t\tif(Fattener.Drawscale >= 0)\n\t\t\t{\n\t\t\tBroadcastMessage(GetDisplayString(Fattener)$\" imploded.\");\n\t\t\tDeusExPlayer(Fattener).ReducedDamageType = '';\n\t\t\tScriptedPawn(Fattener).bInvincible=False;\n\t\t\tDeusExDecoration(Fattener).bInvincible=False;\n\t\t\tDeusExDecoration(Fattener).HitPoints = 1;\n\t\t\t\tFattener.TakeDamage(200,None,vect(0,0,0),vect(0,0,1),'Exploded');\n\t\t\t\tExplode();\n\n\t\t\t\tFattener.DrawScale=Fattener.Default.DrawScale;\n\t\t\t\tDestroy();\n\t\t\t}\t\t\t\t\t\n\t\t}\n\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltatime"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 109,
                "replication": "",
                "states": [],
                "variables": [
                    "var Actor Fattener;",
                    "var bool bReturning;"
                ]
            }
        },
        "PSTeleSwitch.uc": {
            "body": "//=============================================================================\n//.\n//=============================================================================\nclass PSTeleSwitch extends Switch2;\n\nvar() name TeleporterTag;\nvar() string DisableString;\nvar() bool bAdmins;\nvar() bool bUseFX;\n\nvar() enum eChk\n{\n\tCH_Admin,\n\tCH_Staff,\n\tCH_VIP,\n\tCH_None\n} CheckClass;\n\nfunction TeleportFX(DeusExPlayer TPGuy, vector Loc)\n{\n\tlocal psTeleRing1 TR, TROther;\n\t\n\tTPGuy.bMovable=False;\n\tTR = Spawn(class'psTeleRing1',,,TPGuy.Location);\n\tTR.Target = TPGuy;\n\tTR.TPLoc = Loc;\n\t\n\tTROther = Spawn(class'psTeleRing1',,,Loc);\n\tTROther.OriginLoc = Loc;\n}\n\nfunction Frob(Actor Frobber, Inventory frobWith)\n{\n\tlocal deusexplayer dxp;\n\tlocal inventory inv;\n\tlocal bool bFound;\n\t\n\tdxp = DeusExPlayer(Frobber);\n\t\n\tif(DisableString != \"\")\n\t{\n\t\tdxp.ClientMessage(disableString);\n\t\treturn;\n\t}\n\t\n\tif(bAdmins && dxp.bAdmin)\n\t{\n\t\tPlaySound(sound'LogNoteAdded');\n\t\tdxp.ClientMessage(\"|P3Admin confirmed!\");\n\t\tbFound=True;\n\t\tDoTP(DXP);\n\t}\n\tif(!bFound && CheckClass == CH_Admin)\n\t{\n\t\tforeach AllActors(class'Inventory', Inv)\n\t\t{\n\t\t\tif (Inv.Owner == dxp)\n\t\t\t{\n\t\t\t\tif (Inv.IsA('AdminCard')) \n\t\t\t\t{\n\t\t\t\t\t  PlaySound(sound'LogNoteAdded');\n\t\t\t\t\t  dxp.ClientMessage(\"|P3Admin confirmed!\");\n\t\t\t\t\t  bFound=True;\n\t\t\t\t\t  DoTP(DXP);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(!bFound && CheckClass == CH_Staff)\n\t{\n\t\tforeach AllActors(class'Inventory', Inv)\n\t\t{\n\t\t\tif (Inv.Owner == dxp)\n\t\t\t{\n\t\t\t\tif (Inv.IsA('AdminCard')) \n\t\t\t\t{\n\t\t\t\t\t  PlaySound(sound'LogNoteAdded');\n\t\t\t\t\t  dxp.ClientMessage(\"|P3Admin confirmed!\");\n\t\t\t\t\t  bFound=True;\n\t\t\t\t\t  DoTP(DXP);\n\t\t\t\t}\n\t\t\t\tif (Inv.IsA('StaffCard')) \n\t\t\t\t{\n\t\t\t\t\t  PlaySound(sound'LogNoteAdded');\n\t\t\t\t\t  dxp.ClientMessage(\"|P3Staff confirmed!\");\n\t\t\t\t\t  bFound=True;\n\t\t\t\t\t  DoTP(DXP);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(!bFound && CheckClass == CH_VIP)\n\t{\n\t\tforeach AllActors(class'Inventory', Inv)\n\t\t{\n\t\t\tif (Inv.Owner == dxp)\n\t\t\t{\n\t\t\t\tif (Inv.IsA('AdminCard')) \n\t\t\t\t{\n\t\t\t\t\t  PlaySound(sound'LogNoteAdded');\n\t\t\t\t\t  dxp.ClientMessage(\"|P3Admin confirmed!\");\n\t\t\t\t\t  bFound=True;\n\t\t\t\t\t  DoTP(DXP);\n\t\t\t\t}\n\t\t\t\tif (Inv.IsA('StaffCard')) \n\t\t\t\t{\n\t\t\t\t\t  PlaySound(sound'LogNoteAdded');\n\t\t\t\t\t  dxp.ClientMessage(\"|P3Staff confirmed!\");\n\t\t\t\t\t  bFound=True;\n\t\t\t\t\t  DoTP(DXP);\n\t\t\t\t}\n\t\t\t\tif (Inv.IsA('VIPCard')) \n\t\t\t\t{\n\t\t\t\t\t  PlaySound(sound'LogNoteAdded');\n\t\t\t\t\t  dxp.ClientMessage(\"|P3VIP confirmed!\");\n\t\t\t\t\t  bFound=True;\n\t\t\t\t\t  DoTP(DXP);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(!bFound && CheckClass != CH_None)\n\t{\n\t\tDXP.ClientMessage(\"Access denied.\");\n\t}\n\t\n\tif(CheckClass == CH_None)\n\t{\n\t\tDoTP(DXP);\n\t}\n}\n\nfunction DoTP(DeusExPlayer DXP)\n{\n\tlocal Teleporter TP;\n\tlocal inventory inv;\n\tlocal bool bFound;\n\tlocal PSAfterEffect PSAE;\n\t\n\tif(!bUseFX)\n\t{\n\t\tforeach AllActors(class'Teleporter', TP)\n\t\t{\n\t\t\tif(TP.Tag == TeleporterTag)\n\t\t\t{\n\t\t\t\tPSAE = Spawn(class'PSAfterEffect');\n\t\t\t\tPSAE.AttachToPlayer(dxp);\n\t\t\t\tDXP.SetCollision(false, false, false);\n\t\t\t\tDXP.bCollideWorld = true;\n\t\t\t\tDXP.GotoState('PlayerWalking');\n\t\t\t\tDXP.SetLocation(TP.Location);\n\t\t\t\tDXP.SetCollision(true, true , true);\n\t\t\t\tDXP.SetPhysics(PHYS_Walking);\n\t\t\t\tDXP.bCollideWorld = true;\n\t\t\t\tDXP.GotoState('PlayerWalking');\n\t\t\t\tDXP.ClientReStart();\t\n\t\t\t\t//TeleportFX(DXP, TP.Location);\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tforeach AllActors(class'Teleporter', TP)\n\t\t{\n\t\t\tif(TP.Tag == TeleporterTag)\n\t\t\t{\n\t\t\t\tTeleportFX(DXP, TP.Location);\n\t\t\t}\n\t\t}\n\t\t\n\t}\n}\n\ndefaultproperties\n{\n     ItemName=\"Teleporter\"\n}\n",
            "name": "PSTeleSwitch.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "ItemName=\"Teleporter\""
                ],
                "exec": [],
                "extends": "Switch2",
                "functions": {
                    "DoTP": {
                        "body": "{\n\t\n\tif(!bUseFX)\n\t{\n\t\tforeach AllActors(class'Teleporter', TP)\n\t\t{\n\t\t\tif(TP.Tag == TeleporterTag)\n\t\t\t{\n\t\t\t\tPSAE = Spawn(class'PSAfterEffect');\n\t\t\t\tPSAE.AttachToPlayer(dxp);\n\t\t\t\tDXP.SetCollision(false, false, false);\n\t\t\t\tDXP.bCollideWorld = true;\n\t\t\t\tDXP.GotoState('PlayerWalking');\n\t\t\t\tDXP.SetLocation(TP.Location);\n\t\t\t\tDXP.SetCollision(true, true , true);\n\t\t\t\tDXP.SetPhysics(PHYS_Walking);\n\t\t\t\tDXP.bCollideWorld = true;\n\t\t\t\tDXP.GotoState('PlayerWalking');\n\t\t\t\tDXP.ClientReStart();\t\n\t\t\t\t//TeleportFX(DXP, TP.Location);\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tforeach AllActors(class'Teleporter', TP)\n\t\t{\n\t\t\tif(TP.Tag == TeleporterTag)\n\t\t\t{\n\t\t\t\tTeleportFX(DXP, TP.Location);\n\t\t\t}\n\t\t}\n\t\t\n\t}\n}",
                        "locals": [
                            "local Teleporter TP;",
                            "local inventory inv;",
                            "local bool bFound;",
                            "local PSAfterEffect PSAE;"
                        ],
                        "modifiers": [],
                        "name": "DoTP",
                        "native": false,
                        "param": [
                            [
                                "DeusExPlayer",
                                "DXP"
                            ]
                        ],
                        "return": ""
                    },
                    "Frob": {
                        "body": "{\n\t\n\tdxp = DeusExPlayer(Frobber);\n\t\n\tif(DisableString != \"\")\n\t{\n\t\tdxp.ClientMessage(disableString);\n\t\treturn;\n\t}\n\t\n\tif(bAdmins && dxp.bAdmin)\n\t{\n\t\tPlaySound(sound'LogNoteAdded');\n\t\tdxp.ClientMessage(\"|P3Admin confirmed!\");\n\t\tbFound=True;\n\t\tDoTP(DXP);\n\t}\n\tif(!bFound && CheckClass == CH_Admin)\n\t{\n\t\tforeach AllActors(class'Inventory', Inv)\n\t\t{\n\t\t\tif (Inv.Owner == dxp)\n\t\t\t{\n\t\t\t\tif (Inv.IsA('AdminCard')) \n\t\t\t\t{\n\t\t\t\t\t  PlaySound(sound'LogNoteAdded');\n\t\t\t\t\t  dxp.ClientMessage(\"|P3Admin confirmed!\");\n\t\t\t\t\t  bFound=True;\n\t\t\t\t\t  DoTP(DXP);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(!bFound && CheckClass == CH_Staff)\n\t{\n\t\tforeach AllActors(class'Inventory', Inv)\n\t\t{\n\t\t\tif (Inv.Owner == dxp)\n\t\t\t{\n\t\t\t\tif (Inv.IsA('AdminCard')) \n\t\t\t\t{\n\t\t\t\t\t  PlaySound(sound'LogNoteAdded');\n\t\t\t\t\t  dxp.ClientMessage(\"|P3Admin confirmed!\");\n\t\t\t\t\t  bFound=True;\n\t\t\t\t\t  DoTP(DXP);\n\t\t\t\t}\n\t\t\t\tif (Inv.IsA('StaffCard')) \n\t\t\t\t{\n\t\t\t\t\t  PlaySound(sound'LogNoteAdded');\n\t\t\t\t\t  dxp.ClientMessage(\"|P3Staff confirmed!\");\n\t\t\t\t\t  bFound=True;\n\t\t\t\t\t  DoTP(DXP);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(!bFound && CheckClass == CH_VIP)\n\t{\n\t\tforeach AllActors(class'Inventory', Inv)\n\t\t{\n\t\t\tif (Inv.Owner == dxp)\n\t\t\t{\n\t\t\t\tif (Inv.IsA('AdminCard')) \n\t\t\t\t{\n\t\t\t\t\t  PlaySound(sound'LogNoteAdded');\n\t\t\t\t\t  dxp.ClientMessage(\"|P3Admin confirmed!\");\n\t\t\t\t\t  bFound=True;\n\t\t\t\t\t  DoTP(DXP);\n\t\t\t\t}\n\t\t\t\tif (Inv.IsA('StaffCard')) \n\t\t\t\t{\n\t\t\t\t\t  PlaySound(sound'LogNoteAdded');\n\t\t\t\t\t  dxp.ClientMessage(\"|P3Staff confirmed!\");\n\t\t\t\t\t  bFound=True;\n\t\t\t\t\t  DoTP(DXP);\n\t\t\t\t}\n\t\t\t\tif (Inv.IsA('VIPCard')) \n\t\t\t\t{\n\t\t\t\t\t  PlaySound(sound'LogNoteAdded');\n\t\t\t\t\t  dxp.ClientMessage(\"|P3VIP confirmed!\");\n\t\t\t\t\t  bFound=True;\n\t\t\t\t\t  DoTP(DXP);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(!bFound && CheckClass != CH_None)\n\t{\n\t\tDXP.ClientMessage(\"Access denied.\");\n\t}\n\t\n\tif(CheckClass == CH_None)\n\t{\n\t\tDoTP(DXP);\n\t}\n}",
                        "locals": [
                            "local deusexplayer dxp;",
                            "local inventory inv;",
                            "local bool bFound;"
                        ],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    },
                    "TeleportFX": {
                        "body": "{\n\t\n\tTPGuy.bMovable=False;\n\tTR = Spawn(class'psTeleRing1',,,TPGuy.Location);\n\tTR.Target = TPGuy;\n\tTR.TPLoc = Loc;\n\t\n\tTROther = Spawn(class'psTeleRing1',,,Loc);\n\tTROther.OriginLoc = Loc;\n}",
                        "locals": [
                            "local psTeleRing1 TR, TROther;"
                        ],
                        "modifiers": [],
                        "name": "TeleportFX",
                        "native": false,
                        "param": [
                            [
                                "DeusExPlayer",
                                "TPGuy"
                            ],
                            [
                                "vector",
                                "Loc"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 180,
                "replication": "",
                "states": [],
                "variables": [
                    "var() name TeleporterTag;",
                    "var() string DisableString;",
                    "var() bool bAdmins;",
                    "var() bool bUseFX;",
                    "var() enum eChk"
                ]
            }
        },
        "PSTrashbag.uc": {
            "body": "//=============================================================================\n// Trashbag.\n//=============================================================================\nclass PSTrashbag extends Containers;\n\nfunction Bump(actor Other)\n{\n\tif(Inventory(Other) != None)\n\t\tOther.Destroy();\n\tif(DeusExDecoration(Other) != None)\n\t\tOther.Destroy();\n}\n\ndefaultproperties\n{\n     bGenerateTrash=True\n     HitPoints=10\n     bInvincible=True\n     FragType=Class'DeusEx.PaperFragment'\n     bGenerateFlies=True\n     ItemName=\"Trashbag that can eat anything\"\n     Mesh=LodMesh'DeusExDeco.Trashbag'\n     CollisionRadius=26.360001\n     CollisionHeight=26.760000\n     Mass=30.000000\n     Buoyancy=40.000000\n}\n",
            "name": "PSTrashbag.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bGenerateTrash=True",
                    "HitPoints=10",
                    "bInvincible=True",
                    "FragType=Class'DeusEx.PaperFragment'",
                    "bGenerateFlies=True",
                    "ItemName=\"Trashbag that can eat anything\"",
                    "Mesh=LodMesh'DeusExDeco.Trashbag'",
                    "CollisionRadius=26.360001",
                    "CollisionHeight=26.760000",
                    "Mass=30.000000",
                    "Buoyancy=40.000000"
                ],
                "exec": [],
                "extends": "Containers",
                "functions": {
                    "Bump": {
                        "body": "{\n\tif(Inventory(Other) != None)\n\t\tOther.Destroy();\n\tif(DeusExDecoration(Other) != None)\n\t\tOther.Destroy();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Bump",
                        "native": false,
                        "param": [
                            [
                                "actor",
                                "Other"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 28,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "PSTurret.uc": {
            "body": "//=============================================================================\n// AutoTurret.\n//=============================================================================\nclass PSTurret extends DeusExDecoration;\n\nvar bool bDisb;\nvar() int TurretHealth;\nvar() string PTurretTeam;\nvar() bool bIgnoreAdmins;\nvar() bool bIgnoreScriptedPawns;\nvar() bool bIgnorePlayers;\n\nvar AutoTurretGun gun;\n\nvar() localized String titleString;\t\t// So we can name specific turrets in multiplayer\nvar() bool bTrackPawnsOnly;\nvar() bool bTrackPlayersOnly;\nvar() bool bActive;\nvar() int maxRange;\nvar() float fireRate;\nvar() float gunAccuracy;\nvar() int gunDamage;\nvar() int ammoAmount;\nvar Actor curTarget;\nvar Actor prevTarget;         // target we had last tick.\nvar Pawn safeTarget;          // in multiplayer, this actor is strictly off-limits\n                               // Usually for the player who activated the turret.\nvar float fireTimer;\nvar bool bConfused;\t\t\t\t// used when hit by EMP\nvar float confusionTimer;\t\t// how long until turret resumes normal operation\nvar float confusionDuration;\t// how long does an EMP hit last?\nvar Actor LastTarget;\t\t\t// what was our last target?\nvar float pitchLimit;\t\t\t// what's the maximum pitch?\nvar Rotator origRot;\t\t\t// original rotation\nvar bool bPreAlarmActiveState;\t// was I previously awake or not?\nvar bool bDisabled;\t\t\t\t// have I been hacked or shut down by computers?\nvar float TargetRefreshTime;      // used for multiplayer to reduce rate of checking for targets.\nvar() float Thick;\nvar() float PawnThick;\nvar() int team;\t\t\t\t\t\t// Keep track of team the turrets on\n\nvar int mpTurretDamage;\t\t\t// Settings for multiplayer\nvar int mpTurretRange;\n\nvar bool bComputerReset;\t\t\t// Keep track of if computer has been reset so we avoid all actors checks\n\nvar bool bSwitching;\nvar float SwitchTime, beepTime;\nvar Pawn savedTarget;\n\n\n// networking replication\nreplication\n{\n   //server to client\n   reliable if (Role == ROLE_Authority)\n      safeTarget, bDisabled, bActive, team, titleString;\n}\n\nfunction Destroyed()\n{\t\t\n}\n\nfunction UpdateSwitch()\n{\n\tif ( Level.Timeseconds > SwitchTime )\n\t{\n\t\tbSwitching = False;\n\t\t//safeTarget = savedTarget;\n\t\tSwitchTime = 0;\n\t\tbeepTime = 0;\n\t}\n\telse\n\t{\n\t\tif ( Level.Timeseconds > beepTime )\n\t\t{\n\t\t\tPlaySound(Sound'TurretSwitch', SLOT_Interact, 1.0,, maxRange );\n\t\t\tbeepTime = Level.Timeseconds + 0.75;\n\t\t}\n\t}\n}\n\nfunction Actor AcquireMultiplayerTarget()\n{\n\tlocal Pawn apawn;\n\tlocal DeusExPlayer aplayer;\n\tlocal Vector dist;\n\tlocal Actor noActor;\n\n\tif ( bSwitching )\n\t{\n\t\tnoActor = None;\n\t\treturn noActor;\n\t}\n\n\tapawn = gun.Level.PawnList;\n\n\twhile ( apawn != None )\n\t{\n\t\t//if (apawn.bDetectable && !apawn.bIgnore && apawn.IsA('DeusExPlayer'))\n\t\tif (apawn.bDetectable && !apawn.bIgnore)\n\t\t{\n\t\t\taplayer = DeusExPlayer(apawn);\n\n\t\t\tdist = apawn.Location - gun.Location; //apawn was aplayer\n\n\t\t\tif ( VSize(dist) < maxRange )\n\t\t\t{\n\t\t\t\t// Only players we can see\n\t\t\t\tif ( apawn.FastTrace( apawn.Location, gun.Location ))//apawn was aplayer\n\t\t\t\t{\n\t\t\t\t\tif(!PSOwners(apawn))\n\t\t\t\t\t{\n\t\t\t\t\t\tif(curTarget == None)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(scriptedpawn(apawn) != None)\n\t\t\t\t\t\t\t\tscriptedpawn(apawn).bInvincible=False;\n\t\t\t\t\t\t\tif(deusexplayer(apawn) != None)\n\t\t\t\t\t\t\t\tdeusexplayer(apawn).ReducedDamageType = '';\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tcurTarget = apawn;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tapawn = apawn.nextPawn;\n\t}\n\treturn curtarget;\n}\n\nfunction Tick(float deltaTime)\n{\n\tlocal Pawn pawn;\n\tlocal ScriptedPawn sp;\n\tlocal DeusExDecoration deco;\n\tlocal float near;\n\tlocal Rotator destRot;\n\tlocal bool bSwitched;\n\n\tSuper.Tick(deltaTime);\n\n\tbSwitched = False;\n\n\tif ( bSwitching )\n\t{\n\t\tUpdateSwitch();\n\t\treturn;\n\t}\n\n\tif (bActive && !bDisabled)\n\t{\n\t\tcurTarget = None;\n\n\t\tif ( !bConfused )\n\t\t{\n\t\t\tif (TargetRefreshTime < 0)\n\t\t\tTargetRefreshTime = 0;\n         \n\t\t\tTargetRefreshTime = TargetRefreshTime + deltaTime;\n\n\t\t\tif (TargetRefreshTime >= 0.3)\n\t\t\t{\n\t\t\t\tTargetRefreshTime = 0;\n\t\t\t\tcurTarget = AcquireMultiplayerTarget();\n\n//\t\t\t\tif ( curTarget == None )\n//\t\t\t\tPlaySound(Sound'TurretUnlocked', SLOT_Interact, 1.0,, maxRange );\n//\t\t\t\tprevtarget = curtarget;\t\t\n\t\t\t}\n\n\t\t\t\t\tforeach gun.VisibleActors(class'Pawn', pawn, maxRange, gun.Location)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (pawn.bDetectable && !pawn.bIgnore)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif(curTarget == None)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif(!PSOwners(Pawn))\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tcurTarget = Pawn;\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t}\n\n\t\t\t// if we have a target, rotate to face it\n\t\t\tif (curTarget != None)\n\t\t\t{\n\t\t\t\tdestRot = Rotator(curTarget.Location - gun.Location);\n\t\t\t\tgun.DesiredRotation = destRot;\n\t\t\t\tnear = pitchLimit / 2;\n\t\t\t\tgun.DesiredRotation.Pitch = FClamp(gun.DesiredRotation.Pitch, origRot.Pitch - near, origRot.Pitch + near);\n\t\t\t}\n\t\t\telse\n\t\t\t\tgun.DesiredRotation = origRot;\n\t}\n\telse\n\t{\n\t\tif ( !bConfused )\n\t\t\tgun.DesiredRotation = origRot;\n\t}\n\n\tnear = (Abs(gun.Rotation.Pitch - gun.DesiredRotation.Pitch)) % 65536;\n\tnear += (Abs(gun.Rotation.Yaw - gun.DesiredRotation.Yaw)) % 65536;\n\n\tif (bActive && !bDisabled)\n\t{\n\t\t// play an alert sound and light up\n\t\tif ((curTarget != None) && (curTarget != LastTarget))\n\t\t\tPlaySound(Sound'Beep6',,,, 1280);\n\n\t\t// if we're aiming close enough to our target\n\t\tif (curTarget != None)\n\t\t{\n\t\t\tgun.MultiSkins[1] = Texture'RedLightTex';\n\t\t\tif ((near < 4096) && (((Abs(gun.Rotation.Pitch - destRot.Pitch)) % 65536) < 8192))\n\t\t\t{\n\t\t\t\tif (fireTimer > fireRate)\n\t\t\t\t{\n\t\t\t\t\tFire();\n\t\t\t\t\tfireTimer = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (gun.IsAnimating())\n\t\t\t\tgun.PlayAnim('Still', 10.0, 0.001);\n\n\t\t\tif (bConfused)\n\t\t\t\tgun.MultiSkins[1] = Texture'YellowLightTex';\n\t\t\telse\n\t\t\t\tgun.MultiSkins[1] = Texture'GreenLightTex';\n\t\t}\n\n\t\tfireTimer += deltaTime;\n\t\tLastTarget = curTarget;\n\t}\n\telse\n\t{\n\t\tif (gun.IsAnimating())\n\t\t\tgun.PlayAnim('Still', 10.0, 0.001);\n\t\tgun.MultiSkins[1] = None;\n\t}\n\n\t// make noise if we're still moving\n\tif (near > 64)\n\t{\n\t\tgun.AmbientSound = Sound'AutoTurretMove';\n\t\tif (bConfused)\n\t\t\tgun.SoundPitch = 128;\n\t\telse\n\t\t\tgun.SoundPitch = 64;\n\t}\n\telse\n\t\tgun.AmbientSound = None;\n}\n\nfunction bool PSOwners(Pawn P)\n{\nlocal PSTurretController PSTC;\n\n\tif(DeusExPlayer(P) != None)\n\t{\n\t\tif(DeusExPlayer(P).bAdmin && bIgnoreAdmins)\n\t\t\treturn True;\n\t\t\n\t\tif(bIgnorePlayers)\n\t\t\treturn True;\n\t}\n\t\t\n\tif(ScriptedPawn(P) != None)\n\t{\n\t\tif(bIgnoreScriptedPawns)\n\t\t\treturn true;\n\t\t\n\t\tif(ScriptedPawn(P).IsA('Pets') || ScriptedPawn(P).IsA('RadarDrone'))\n\t\t\treturn true;\n\t}\n\t\t\t\n\tforeach AllActors(class'PSTurretController', PSTC)\n\t{\n\t\tif(PSTC.PTurretTeam ~= PTurretTeam)\n\t\t{\n\t\t\tif(PSTC.myOwner == P)\n\t\t\t\treturn True;\n\t\t}\n\t}\n\treturn False;\n}\n\nauto state Active\n{\n\tfunction TakeDamage(int Damage, Pawn EventInstigator, vector HitLocation, vector Momentum, name DamageType)\n\t{\n\t\tlocal Human dxp;\n\t\tlocal float mindmg;\n\n\t\tif (DamageType == 'EMP')\n\t\t{\n\t\t\treturn; //Nulled function, IMMUNE TO EMP.\n\t\t}\n\n\t\tTurretHealth -= Damage; //Edited this in to avoid some things.\n\n\t\tif(bDisb == False)\n\t\t{\n\t\t\tif(TurretHealth <= 0)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction Fire()\n{\n\tlocal Vector HitLocation, HitNormal, StartTrace, EndTrace, X, Y, Z;\n\tlocal Rotator rot;\n\tlocal Actor hit;\n\tlocal ShellCasing shell;\n\tlocal Spark spark;\n\tlocal Pawn attacker;\n\n\tif (!gun.IsAnimating())\n\t\tgun.LoopAnim('Fire');\n\n\t// CNN - give turrets infinite ammo\n//\tif (ammoAmount > 0)\n//\t{\n//\t\tammoAmount--;\n\t\tGetAxes(gun.Rotation, X, Y, Z);\n\t\tStartTrace = gun.Location;\n\t\tEndTrace = StartTrace + gunAccuracy * (FRand()-0.5)*Y*1000 + gunAccuracy * (FRand()-0.5)*Z*1000 ;\n\t\tEndTrace += 10000 * X;\n\t\thit = Trace(HitLocation, HitNormal, EndTrace, StartTrace, True);\n\n\t\t// spawn some effects\n      if ((DeusExMPGame(Level.Game) != None) && (!DeusExMPGame(Level.Game).bSpawnEffects))\n      {\n         shell = None;\n      }\n      else\n      {\n         shell = Spawn(class'ShellCasing',,, gun.Location);\n      }\n\t\tif (shell != None)\n\t\t\tshell.Velocity = Vector(gun.Rotation - rot(0,16384,0)) * 100 + VRand() * 30;\n\n\t\tMakeNoise(1.0);\n\t\tPlaySound(sound'PistolFire', SLOT_None);\n\t\tAISendEvent('LoudNoise', EAITYPE_Audio);\n\n\t\t// muzzle flash\n\t\tgun.LightType = LT_Steady;\n\t\tgun.MultiSkins[2] = Texture'FlatFXTex34';\n\t\tSetTimer(0.1, False);\n\n\t\t// randomly draw a tracer\n\t\tif (FRand() < 0.5)\n\t\t{\n\t\t\tif (VSize(HitLocation - StartTrace) > 250)\n\t\t\t{\n\t\t\t\trot = Rotator(EndTrace - StartTrace);\n\t\t\t\tSpawn(class'Tracer',,, StartTrace + 96 * Vector(rot), rot);\n\t\t\t}\n\t\t}\n\n\t\tif (hit != None)\n\t\t{\n         if ((DeusExMPGame(Level.Game) != None) && (!DeusExMPGame(Level.Game).bSpawnEffects))\n         {\n            spark = None;\n         }\n         else\n         {\n            // spawn a little spark and make a ricochet sound if we hit something\n            spark = spawn(class'Spark',,,HitLocation+HitNormal, Rotator(HitNormal));\n         }\n\n\t\t\tif (spark != None)\n\t\t\t{\n\t\t\t\tspark.DrawScale = 0.05;\n\t\t\t\tPlayHitSound(spark, hit);\n\t\t\t}\n\n\t\t\tattacker = None;\n\t\t\tif ((curTarget == hit) && !curTarget.IsA('PlayerPawn'))\n\t\t\t\tattacker = GetPlayerPawn();\n         if (Level.NetMode != NM_Standalone)\n            attacker = safetarget;\n\t\t\tif ( hit.IsA('DeusExPlayer') && ( Level.NetMode != NM_Standalone ))\n\t\t\t\tDeusExPlayer(hit).myTurretKiller = Self;\n\t\t\thit.TakeDamage(gunDamage, attacker, HitLocation, 1000.0*X, 'AutoShot');\n\n\t\t\tif (hit.IsA('Pawn') && !hit.IsA('Robot'))\n\t\t\t\tSpawnBlood(HitLocation, HitNormal);\n\t\t\telse if ((hit == Level) || hit.IsA('Mover'))\n\t\t\t\tSpawnEffects(HitLocation, HitNormal, hit);\n\t\t}\n//\t}\n//\telse\n//\t{\n//\t\tPlaySound(sound'DryFire', SLOT_None);\n//\t}\n}\n\nfunction SpawnBlood(Vector HitLocation, Vector HitNormal)\n{\n\tlocal rotator rot;\n\n\trot = Rotator(Location - HitLocation);\n\trot.Pitch = 0;\n\trot.Roll = 0;\n\n   if ((DeusExMPGame(Level.Game) != None) && (!DeusExMPGame(Level.Game).bSpawnEffects))\n      return;\n\n\tspawn(class'BloodSpurt',,,HitLocation+HitNormal, rot);\n\tspawn(class'BloodDrop',,,HitLocation+HitNormal);\n\tif (FRand() < 0.5)\n\t\tspawn(class'BloodDrop',,,HitLocation+HitNormal);\n}\n\nsimulated function SpawnEffects(Vector HitLocation, Vector HitNormal, Actor Other)\n{\n\tlocal SmokeTrail puff;\n\tlocal int i;\n\tlocal BulletHole hole;\n\tlocal Rotator rot;\n\n   if ((DeusExMPGame(Level.Game) != None) && (!DeusExMPGame(Level.Game).bSpawnEffects))\n      return;\n\n   if (FRand() < 0.5)\n\t{\n\t\tpuff = spawn(class'SmokeTrail',,,HitLocation+HitNormal, Rotator(HitNormal));\n\t\tif (puff != None)\n\t\t{\n\t\t\tpuff.DrawScale *= 0.3;\n\t\t\tpuff.OrigScale = puff.DrawScale;\n\t\t\tpuff.LifeSpan = 0.25;\n\t\t\tpuff.OrigLifeSpan = puff.LifeSpan;\n\t\t}\n\t}\n\n\tif (!Other.IsA('BreakableGlass'))\n\t\tfor (i=0; i<2; i++)\n\t\t\tif (FRand() < 0.8)\n\t\t\t\tspawn(class'Rockchip',,,HitLocation+HitNormal);\n\n\thole = spawn(class'BulletHole', Other,, HitLocation, Rotator(HitNormal));\n\n\t// should we crack glass?\n\tif (GetWallMaterial(HitLocation, HitNormal) == 'Glass')\n\t{\n\t\tif (FRand() < 0.5)\n\t\t\thole.Texture = Texture'FlatFXTex29';\n\t\telse\n\t\t\thole.Texture = Texture'FlatFXTex30';\n\n\t\thole.DrawScale = 0.1;\n\t\thole.ReattachDecal();\n\t}\n}\n\nfunction name GetWallMaterial(vector HitLocation, vector HitNormal)\n{\n\tlocal vector EndTrace, StartTrace;\n\tlocal actor newtarget;\n\tlocal int texFlags;\n\tlocal name texName, texGroup;\n\n\tStartTrace = HitLocation + HitNormal*16;\t\t// make sure we start far enough out\n\tEndTrace = HitLocation - HitNormal;\n\n\tforeach TraceTexture(class'Actor', newtarget, texName, texGroup, texFlags, StartTrace, HitNormal, EndTrace)\n\t\tif ((newtarget == Level) || newtarget.IsA('Mover'))\n\t\t\tbreak;\n\n\treturn texGroup;\n}\n\nfunction PlayHitSound(actor destActor, Actor hitActor)\n{\n\tlocal float rnd;\n\tlocal sound snd;\n\n\trnd = FRand();\n\n\tif (rnd < 0.25)\n\t\tsnd = sound'Ricochet1';\n\telse if (rnd < 0.5)\n\t\tsnd = sound'Ricochet2';\n\telse if (rnd < 0.75)\n\t\tsnd = sound'Ricochet3';\n\telse\n\t\tsnd = sound'Ricochet4';\n\n\t// play a different ricochet sound if the object isn't damaged by normal bullets\n\tif (hitActor != None) \n\t{\n\t\tif (hitActor.IsA('DeusExDecoration') && (DeusExDecoration(hitActor).minDamageThreshold > 10))\n\t\t\tsnd = sound'ArmorRicochet';\n\t\telse if (hitActor.IsA('Robot'))\n\t\t\tsnd = sound'ArmorRicochet';\n\t}\n\n\tif (destActor != None)\n\t\tdestActor.PlaySound(snd, SLOT_None,,, 1024, 1.1 - 0.2*FRand());\n}\n\n// turn off the muzzle flash\nsimulated function Timer()\n{\n\tgun.LightType = LT_None;\n\tgun.MultiSkins[2] = None;\n}\n\n/*function AlarmHeard(Name event, EAIEventState state, XAIParams params)\n{\n\tif (state == EAISTATE_Begin)\n\t{\n\t\tif (!bActive)\n\t\t{\n\t\t\tbPreAlarmActiveState = bActive;\n\t\t\tbActive = True;\n\t\t}\n\t}\n\telse if (state == EAISTATE_End)\n\t{\n\t\tif (bActive)\n\t\t\tbActive = bPreAlarmActiveState;\n\t}\n}*/\n\nfunction PreBeginPlay()\n{\n\tlocal Vector v1, v2;\n\tlocal class<AutoTurretGun> gunClass;\n\tlocal Rotator rot;\n\n\tSuper.PreBeginPlay();\n\n\tif (IsA('AutoTurretSmall'))\n\t\tgunClass = class'AutoTurretGunSmall';\n\telse\n\t\tgunClass = class'AutoTurretGun';\n\n\trot = Rotation;\n\trot.Pitch = 0;\n\trot.Roll = 0;\n\torigRot = rot;\n\tgun = Spawn(gunClass, Self,, Location, rot);\n\tif (gun != None)\n\t{\n\t\tv1.X = 0;\n\t\tv1.Y = 0;\n\t\tv1.Z = CollisionHeight + gun.Default.CollisionHeight;\n\t\tv2 = v1 >> Rotation;\n\t\tv2 += Location;\n\t\tgun.bHackable=False;\n\t\tgun.SetLocation(v2);\n\t\tgun.SetBase(Self);\n\t}\n\n\t// set up the alarm listeners\n\t//AISetEventCallback('Alarm', 'AlarmHeard');\n\n\tmaxRange = mpTurretRange;\n\tgunDamage = mpTurretDamage;\n\tbDisabled = !bActive;\n}\n\nfunction PostBeginPlay()\n{\n   safeTarget = None;\n   prevTarget = None;\n   TargetRefreshTime = 0;\n   Super.PostBeginPlay();\n}\n\ndefaultproperties\n{\n     TurretHealth=100\n     PTurretTeam=\"DEFAULT\"\n     bIgnoreAdmins=True\n     titleString=\"AutoTurret\"\n     bTrackPlayersOnly=True\n     bActive=True\n     maxRange=512\n     fireRate=0.250000\n     gunAccuracy=0.500000\n     gunDamage=5\n     AmmoAmount=1000\n     confusionDuration=120.000000\n     pitchLimit=11000.000000\n     Team=500\n     mpTurretDamage=20\n     mpTurretRange=1024\n     HitPoints=100\n     minDamageThreshold=100\n     bHighlight=False\n     ItemName=\"Turret Base\"\n     bPushable=False\n     Mesh=LodMesh'DeusExDeco.AutoTurretBase'\n     SoundRadius=48\n     SoundVolume=192\n     AmbientSound=Sound'DeusExSounds.Generic.AutoTurretHum'\n     CollisionRadius=14.000000\n     CollisionHeight=20.200001\n     Mass=50.000000\n     Buoyancy=10.000000\n     bVisionImportant=True\n}\n",
            "name": "PSTurret.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "TurretHealth=100",
                    "PTurretTeam=\"DEFAULT\"",
                    "bIgnoreAdmins=True",
                    "titleString=\"AutoTurret\"",
                    "bTrackPlayersOnly=True",
                    "bActive=True",
                    "maxRange=512",
                    "fireRate=0.250000",
                    "gunAccuracy=0.500000",
                    "gunDamage=5",
                    "AmmoAmount=1000",
                    "confusionDuration=120.000000",
                    "pitchLimit=11000.000000",
                    "Team=500",
                    "mpTurretDamage=20",
                    "mpTurretRange=1024",
                    "HitPoints=100",
                    "minDamageThreshold=100",
                    "bHighlight=False",
                    "ItemName=\"Turret Base\"",
                    "bPushable=False",
                    "Mesh=LodMesh'DeusExDeco.AutoTurretBase'",
                    "SoundRadius=48",
                    "SoundVolume=192",
                    "AmbientSound=Sound'DeusExSounds.Generic.AutoTurretHum'",
                    "CollisionRadius=14.000000",
                    "CollisionHeight=20.200001",
                    "Mass=50.000000",
                    "Buoyancy=10.000000",
                    "bVisionImportant=True"
                ],
                "exec": [],
                "extends": "DeusExDecoration",
                "functions": {
                    "AcquireMultiplayerTarget": {
                        "body": "{\n\n\tif ( bSwitching )\n\t{\n\t\tnoActor = None;\n\t\treturn noActor;\n\t}\n\n\tapawn = gun.Level.PawnList;\n\n\twhile ( apawn != None )\n\t{\n\t\t//if (apawn.bDetectable && !apawn.bIgnore && apawn.IsA('DeusExPlayer'))\n\t\tif (apawn.bDetectable && !apawn.bIgnore)\n\t\t{\n\t\t\taplayer = DeusExPlayer(apawn);\n\n\t\t\tdist = apawn.Location - gun.Location; //apawn was aplayer\n\n\t\t\tif ( VSize(dist) < maxRange )\n\t\t\t{\n\t\t\t\t// Only players we can see\n\t\t\t\tif ( apawn.FastTrace( apawn.Location, gun.Location ))//apawn was aplayer\n\t\t\t\t{\n\t\t\t\t\tif(!PSOwners(apawn))\n\t\t\t\t\t{\n\t\t\t\t\t\tif(curTarget == None)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(scriptedpawn(apawn) != None)\n\t\t\t\t\t\t\t\tscriptedpawn(apawn).bInvincible=False;\n\t\t\t\t\t\t\tif(deusexplayer(apawn) != None)\n\t\t\t\t\t\t\t\tdeusexplayer(apawn).ReducedDamageType = '';\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tcurTarget = apawn;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tapawn = apawn.nextPawn;\n\t}\n\treturn curtarget;\n}",
                        "locals": [
                            "local Pawn apawn;",
                            "local DeusExPlayer aplayer;",
                            "local Vector dist;",
                            "local Actor noActor;"
                        ],
                        "modifiers": [],
                        "name": "AcquireMultiplayerTarget",
                        "native": false,
                        "param": [],
                        "return": "Actor"
                    },
                    "Destroyed": {
                        "body": "{\t\t\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Destroyed",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Fire": {
                        "body": "{\n\n\tif (!gun.IsAnimating())\n\t\tgun.LoopAnim('Fire');\n\n\t// CNN - give turrets infinite ammo\n//\tif (ammoAmount > 0)\n//\t{\n//\t\tammoAmount--;\n\t\tGetAxes(gun.Rotation, X, Y, Z);\n\t\tStartTrace = gun.Location;\n\t\tEndTrace = StartTrace + gunAccuracy * (FRand()-0.5)*Y*1000 + gunAccuracy * (FRand()-0.5)*Z*1000 ;\n\t\tEndTrace += 10000 * X;\n\t\thit = Trace(HitLocation, HitNormal, EndTrace, StartTrace, True);\n\n\t\t// spawn some effects\n      if ((DeusExMPGame(Level.Game) != None) && (!DeusExMPGame(Level.Game).bSpawnEffects))\n      {\n         shell = None;\n      }\n      else\n      {\n         shell = Spawn(class'ShellCasing',,, gun.Location);\n      }\n\t\tif (shell != None)\n\t\t\tshell.Velocity = Vector(gun.Rotation - rot(0,16384,0)) * 100 + VRand() * 30;\n\n\t\tMakeNoise(1.0);\n\t\tPlaySound(sound'PistolFire', SLOT_None);\n\t\tAISendEvent('LoudNoise', EAITYPE_Audio);\n\n\t\t// muzzle flash\n\t\tgun.LightType = LT_Steady;\n\t\tgun.MultiSkins[2] = Texture'FlatFXTex34';\n\t\tSetTimer(0.1, False);\n\n\t\t// randomly draw a tracer\n\t\tif (FRand() < 0.5)\n\t\t{\n\t\t\tif (VSize(HitLocation - StartTrace) > 250)\n\t\t\t{\n\t\t\t\trot = Rotator(EndTrace - StartTrace);\n\t\t\t\tSpawn(class'Tracer',,, StartTrace + 96 * Vector(rot), rot);\n\t\t\t}\n\t\t}\n\n\t\tif (hit != None)\n\t\t{\n         if ((DeusExMPGame(Level.Game) != None) && (!DeusExMPGame(Level.Game).bSpawnEffects))\n         {\n            spark = None;\n         }\n         else\n         {\n            // spawn a little spark and make a ricochet sound if we hit something\n            spark = spawn(class'Spark',,,HitLocation+HitNormal, Rotator(HitNormal));\n         }\n\n\t\t\tif (spark != None)\n\t\t\t{\n\t\t\t\tspark.DrawScale = 0.05;\n\t\t\t\tPlayHitSound(spark, hit);\n\t\t\t}\n\n\t\t\tattacker = None;\n\t\t\tif ((curTarget == hit) && !curTarget.IsA('PlayerPawn'))\n\t\t\t\tattacker = GetPlayerPawn();\n         if (Level.NetMode != NM_Standalone)\n            attacker = safetarget;\n\t\t\tif ( hit.IsA('DeusExPlayer') && ( Level.NetMode != NM_Standalone ))\n\t\t\t\tDeusExPlayer(hit).myTurretKiller = Self;\n\t\t\thit.TakeDamage(gunDamage, attacker, HitLocation, 1000.0*X, 'AutoShot');\n\n\t\t\tif (hit.IsA('Pawn') && !hit.IsA('Robot'))\n\t\t\t\tSpawnBlood(HitLocation, HitNormal);\n\t\t\telse if ((hit == Level) || hit.IsA('Mover'))\n\t\t\t\tSpawnEffects(HitLocation, HitNormal, hit);\n\t\t}\n//\t}",
                        "locals": [
                            "local Vector HitLocation, HitNormal, StartTrace, EndTrace, X, Y, Z;",
                            "local Rotator rot;",
                            "local Actor hit;",
                            "local ShellCasing shell;",
                            "local Spark spark;",
                            "local Pawn attacker;"
                        ],
                        "modifiers": [],
                        "name": "Fire",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "GetWallMaterial": {
                        "body": "{\n\n\tStartTrace = HitLocation + HitNormal*16;\t\t// make sure we start far enough out\n\tEndTrace = HitLocation - HitNormal;\n\n\tforeach TraceTexture(class'Actor', newtarget, texName, texGroup, texFlags, StartTrace, HitNormal, EndTrace)\n\t\tif ((newtarget == Level) || newtarget.IsA('Mover'))\n\t\t\tbreak;\n\n\treturn texGroup;\n}",
                        "locals": [
                            "local vector EndTrace, StartTrace;",
                            "local actor newtarget;",
                            "local int texFlags;",
                            "local name texName, texGroup;"
                        ],
                        "modifiers": [],
                        "name": "GetWallMaterial",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "HitLocation"
                            ],
                            [
                                "vector",
                                "HitNormal"
                            ]
                        ],
                        "return": "name"
                    },
                    "PSOwners": {
                        "body": "{\n\n\tif(DeusExPlayer(P) != None)\n\t{\n\t\tif(DeusExPlayer(P).bAdmin && bIgnoreAdmins)\n\t\t\treturn True;\n\t\t\n\t\tif(bIgnorePlayers)\n\t\t\treturn True;\n\t}\n\t\t\n\tif(ScriptedPawn(P) != None)\n\t{\n\t\tif(bIgnoreScriptedPawns)\n\t\t\treturn true;\n\t\t\n\t\tif(ScriptedPawn(P).IsA('Pets') || ScriptedPawn(P).IsA('RadarDrone'))\n\t\t\treturn true;\n\t}\n\t\t\t\n\tforeach AllActors(class'PSTurretController', PSTC)\n\t{\n\t\tif(PSTC.PTurretTeam ~= PTurretTeam)\n\t\t{\n\t\t\tif(PSTC.myOwner == P)\n\t\t\t\treturn True;\n\t\t}\n\t}\n\treturn False;\n}",
                        "locals": [
                            "local PSTurretController PSTC;"
                        ],
                        "modifiers": [],
                        "name": "PSOwners",
                        "native": false,
                        "param": [
                            [
                                "Pawn",
                                "P"
                            ]
                        ],
                        "return": "bool"
                    },
                    "PlayHitSound": {
                        "body": "{\n\n\trnd = FRand();\n\n\tif (rnd < 0.25)\n\t\tsnd = sound'Ricochet1';\n\telse if (rnd < 0.5)\n\t\tsnd = sound'Ricochet2';\n\telse if (rnd < 0.75)\n\t\tsnd = sound'Ricochet3';\n\telse\n\t\tsnd = sound'Ricochet4';\n\n\t// play a different ricochet sound if the object isn't damaged by normal bullets\n\tif (hitActor != None) \n\t{\n\t\tif (hitActor.IsA('DeusExDecoration') && (DeusExDecoration(hitActor).minDamageThreshold > 10))\n\t\t\tsnd = sound'ArmorRicochet';\n\t\telse if (hitActor.IsA('Robot'))\n\t\t\tsnd = sound'ArmorRicochet';\n\t}\n\n\tif (destActor != None)\n\t\tdestActor.PlaySound(snd, SLOT_None,,, 1024, 1.1 - 0.2*FRand());\n}",
                        "locals": [
                            "local float rnd;",
                            "local sound snd;"
                        ],
                        "modifiers": [],
                        "name": "PlayHitSound",
                        "native": false,
                        "param": [
                            [
                                "actor",
                                "destActor"
                            ],
                            [
                                "Actor",
                                "hitActor"
                            ]
                        ],
                        "return": ""
                    },
                    "PostBeginPlay": {
                        "body": "{\n   safeTarget = None;\n   prevTarget = None;\n   TargetRefreshTime = 0;\n   Super.PostBeginPlay();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n\n\tSuper.PreBeginPlay();\n\n\tif (IsA('AutoTurretSmall'))\n\t\tgunClass = class'AutoTurretGunSmall';\n\telse\n\t\tgunClass = class'AutoTurretGun';\n\n\trot = Rotation;\n\trot.Pitch = 0;\n\trot.Roll = 0;\n\torigRot = rot;\n\tgun = Spawn(gunClass, Self,, Location, rot);\n\tif (gun != None)\n\t{\n\t\tv1.X = 0;\n\t\tv1.Y = 0;\n\t\tv1.Z = CollisionHeight + gun.Default.CollisionHeight;\n\t\tv2 = v1 >> Rotation;\n\t\tv2 += Location;\n\t\tgun.bHackable=False;\n\t\tgun.SetLocation(v2);\n\t\tgun.SetBase(Self);\n\t}\n\n\t// set up the alarm listeners\n\t//AISetEventCallback('Alarm', 'AlarmHeard');\n\n\tmaxRange = mpTurretRange;\n\tgunDamage = mpTurretDamage;\n\tbDisabled = !bActive;\n}",
                        "locals": [
                            "local Vector v1, v2;",
                            "local class<AutoTurretGun> gunClass;",
                            "local Rotator rot;"
                        ],
                        "modifiers": [],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "SpawnBlood": {
                        "body": "{\n\n\trot = Rotator(Location - HitLocation);\n\trot.Pitch = 0;\n\trot.Roll = 0;\n\n   if ((DeusExMPGame(Level.Game) != None) && (!DeusExMPGame(Level.Game).bSpawnEffects))\n      return;\n\n\tspawn(class'BloodSpurt',,,HitLocation+HitNormal, rot);\n\tspawn(class'BloodDrop',,,HitLocation+HitNormal);\n\tif (FRand() < 0.5)\n\t\tspawn(class'BloodDrop',,,HitLocation+HitNormal);\n}",
                        "locals": [
                            "local rotator rot;"
                        ],
                        "modifiers": [],
                        "name": "SpawnBlood",
                        "native": false,
                        "param": [
                            [
                                "Vector",
                                "HitLocation"
                            ],
                            [
                                "Vector",
                                "HitNormal"
                            ]
                        ],
                        "return": ""
                    },
                    "SpawnEffects": {
                        "body": "{\n\n   if ((DeusExMPGame(Level.Game) != None) && (!DeusExMPGame(Level.Game).bSpawnEffects))\n      return;\n\n   if (FRand() < 0.5)\n\t{\n\t\tpuff = spawn(class'SmokeTrail',,,HitLocation+HitNormal, Rotator(HitNormal));\n\t\tif (puff != None)\n\t\t{\n\t\t\tpuff.DrawScale *= 0.3;\n\t\t\tpuff.OrigScale = puff.DrawScale;\n\t\t\tpuff.LifeSpan = 0.25;\n\t\t\tpuff.OrigLifeSpan = puff.LifeSpan;\n\t\t}\n\t}\n\n\tif (!Other.IsA('BreakableGlass'))\n\t\tfor (i=0; i<2; i++)\n\t\t\tif (FRand() < 0.8)\n\t\t\t\tspawn(class'Rockchip',,,HitLocation+HitNormal);\n\n\thole = spawn(class'BulletHole', Other,, HitLocation, Rotator(HitNormal));\n\n\t// should we crack glass?\n\tif (GetWallMaterial(HitLocation, HitNormal) == 'Glass')\n\t{\n\t\tif (FRand() < 0.5)\n\t\t\thole.Texture = Texture'FlatFXTex29';\n\t\telse\n\t\t\thole.Texture = Texture'FlatFXTex30';\n\n\t\thole.DrawScale = 0.1;\n\t\thole.ReattachDecal();\n\t}\n}",
                        "locals": [
                            "local SmokeTrail puff;",
                            "local int i;",
                            "local BulletHole hole;",
                            "local Rotator rot;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "SpawnEffects",
                        "native": false,
                        "param": [
                            [
                                "Vector",
                                "HitLocation"
                            ],
                            [
                                "Vector",
                                "HitNormal"
                            ],
                            [
                                "Actor",
                                "Other"
                            ]
                        ],
                        "return": ""
                    },
                    "TakeDamage": {
                        "body": "{\n\n\t\tif (DamageType == 'EMP')\n\t\t{\n\t\t\treturn; //Nulled function, IMMUNE TO EMP.\n\t\t}\n\n\t\tTurretHealth -= Damage; //Edited this in to avoid some things.\n\n\t\tif(bDisb == False)\n\t\t{\n\t\t\tif(TurretHealth <= 0)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}",
                        "locals": [
                            "local Human dxp;",
                            "local float mindmg;"
                        ],
                        "modifiers": [],
                        "name": "TakeDamage",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "Damage"
                            ],
                            [
                                "Pawn",
                                "EventInstigator"
                            ],
                            [
                                "vector",
                                "HitLocation"
                            ],
                            [
                                "vector",
                                "Momentum"
                            ],
                            [
                                "name",
                                "DamageType"
                            ]
                        ],
                        "return": ""
                    },
                    "Tick": {
                        "body": "{\n\n\tSuper.Tick(deltaTime);\n\n\tbSwitched = False;\n\n\tif ( bSwitching )\n\t{\n\t\tUpdateSwitch();\n\t\treturn;\n\t}\n\n\tif (bActive && !bDisabled)\n\t{\n\t\tcurTarget = None;\n\n\t\tif ( !bConfused )\n\t\t{\n\t\t\tif (TargetRefreshTime < 0)\n\t\t\tTargetRefreshTime = 0;\n         \n\t\t\tTargetRefreshTime = TargetRefreshTime + deltaTime;\n\n\t\t\tif (TargetRefreshTime >= 0.3)\n\t\t\t{\n\t\t\t\tTargetRefreshTime = 0;\n\t\t\t\tcurTarget = AcquireMultiplayerTarget();\n\n//\t\t\t\tif ( curTarget == None )\n//\t\t\t\tPlaySound(Sound'TurretUnlocked', SLOT_Interact, 1.0,, maxRange );\n//\t\t\t\tprevtarget = curtarget;\t\t\n\t\t\t}\n\n\t\t\t\t\tforeach gun.VisibleActors(class'Pawn', pawn, maxRange, gun.Location)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (pawn.bDetectable && !pawn.bIgnore)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif(curTarget == None)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif(!PSOwners(Pawn))\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tcurTarget = Pawn;\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t}\n\n\t\t\t// if we have a target, rotate to face it\n\t\t\tif (curTarget != None)\n\t\t\t{\n\t\t\t\tdestRot = Rotator(curTarget.Location - gun.Location);\n\t\t\t\tgun.DesiredRotation = destRot;\n\t\t\t\tnear = pitchLimit / 2;\n\t\t\t\tgun.DesiredRotation.Pitch = FClamp(gun.DesiredRotation.Pitch, origRot.Pitch - near, origRot.Pitch + near);\n\t\t\t}\n\t\t\telse\n\t\t\t\tgun.DesiredRotation = origRot;\n\t}\n\telse\n\t{\n\t\tif ( !bConfused )\n\t\t\tgun.DesiredRotation = origRot;\n\t}\n\n\tnear = (Abs(gun.Rotation.Pitch - gun.DesiredRotation.Pitch)) % 65536;\n\tnear += (Abs(gun.Rotation.Yaw - gun.DesiredRotation.Yaw)) % 65536;\n\n\tif (bActive && !bDisabled)\n\t{\n\t\t// play an alert sound and light up\n\t\tif ((curTarget != None) && (curTarget != LastTarget))\n\t\t\tPlaySound(Sound'Beep6',,,, 1280);\n\n\t\t// if we're aiming close enough to our target\n\t\tif (curTarget != None)\n\t\t{\n\t\t\tgun.MultiSkins[1] = Texture'RedLightTex';\n\t\t\tif ((near < 4096) && (((Abs(gun.Rotation.Pitch - destRot.Pitch)) % 65536) < 8192))\n\t\t\t{\n\t\t\t\tif (fireTimer > fireRate)\n\t\t\t\t{\n\t\t\t\t\tFire();\n\t\t\t\t\tfireTimer = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (gun.IsAnimating())\n\t\t\t\tgun.PlayAnim('Still', 10.0, 0.001);\n\n\t\t\tif (bConfused)\n\t\t\t\tgun.MultiSkins[1] = Texture'YellowLightTex';\n\t\t\telse\n\t\t\t\tgun.MultiSkins[1] = Texture'GreenLightTex';\n\t\t}\n\n\t\tfireTimer += deltaTime;\n\t\tLastTarget = curTarget;\n\t}\n\telse\n\t{\n\t\tif (gun.IsAnimating())\n\t\t\tgun.PlayAnim('Still', 10.0, 0.001);\n\t\tgun.MultiSkins[1] = None;\n\t}\n\n\t// make noise if we're still moving\n\tif (near > 64)\n\t{\n\t\tgun.AmbientSound = Sound'AutoTurretMove';\n\t\tif (bConfused)\n\t\t\tgun.SoundPitch = 128;\n\t\telse\n\t\t\tgun.SoundPitch = 64;\n\t}\n\telse\n\t\tgun.AmbientSound = None;\n}",
                        "locals": [
                            "local Pawn pawn;",
                            "local ScriptedPawn sp;",
                            "local DeusExDecoration deco;",
                            "local float near;",
                            "local Rotator destRot;",
                            "local bool bSwitched;"
                        ],
                        "modifiers": [],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltaTime"
                            ]
                        ],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\tgun.LightType = LT_None;\n\tgun.MultiSkins[2] = None;\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "UpdateSwitch": {
                        "body": "{\n\tif ( Level.Timeseconds > SwitchTime )\n\t{\n\t\tbSwitching = False;\n\t\t//safeTarget = savedTarget;\n\t\tSwitchTime = 0;\n\t\tbeepTime = 0;\n\t}\n\telse\n\t{\n\t\tif ( Level.Timeseconds > beepTime )\n\t\t{\n\t\t\tPlaySound(Sound'TurretSwitch', SLOT_Interact, 1.0,, maxRange );\n\t\t\tbeepTime = Level.Timeseconds + 0.75;\n\t\t}\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "UpdateSwitch",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 619,
                "replication": "",
                "states": [],
                "variables": [
                    "var bool bDisb;",
                    "var() int TurretHealth;",
                    "var() string PTurretTeam;",
                    "var() bool bIgnoreAdmins;",
                    "var() bool bIgnoreScriptedPawns;",
                    "var() bool bIgnorePlayers;",
                    "var AutoTurretGun gun;",
                    "var() localized String titleString;\t\t// So we can name specific turrets in multiplayer",
                    "var() bool bTrackPawnsOnly;",
                    "var() bool bTrackPlayersOnly;",
                    "var() bool bActive;",
                    "var() int maxRange;",
                    "var() float fireRate;",
                    "var() float gunAccuracy;",
                    "var() int gunDamage;",
                    "var() int ammoAmount;",
                    "var Actor curTarget;",
                    "var Actor prevTarget;         // target we had last tick.",
                    "var Pawn safeTarget;          // in multiplayer, this actor is strictly off-limits",
                    "var float fireTimer;",
                    "var bool bConfused;\t\t\t\t// used when hit by EMP",
                    "var float confusionTimer;\t\t// how long until turret resumes normal operation",
                    "var float confusionDuration;\t// how long does an EMP hit last?",
                    "var Actor LastTarget;\t\t\t// what was our last target?",
                    "var float pitchLimit;\t\t\t// what's the maximum pitch?",
                    "var Rotator origRot;\t\t\t// original rotation",
                    "var bool bPreAlarmActiveState;\t// was I previously awake or not?",
                    "var bool bDisabled;\t\t\t\t// have I been hacked or shut down by computers?",
                    "var float TargetRefreshTime;      // used for multiplayer to reduce rate of checking for targets.",
                    "var() float Thick;",
                    "var() float PawnThick;",
                    "var() int team;\t\t\t\t\t\t// Keep track of team the turrets on",
                    "var int mpTurretDamage;\t\t\t// Settings for multiplayer",
                    "var int mpTurretRange;",
                    "var bool bComputerReset;\t\t\t// Keep track of if computer has been reset so we avoid all actors checks",
                    "var bool bSwitching;",
                    "var float SwitchTime, beepTime;",
                    "var Pawn savedTarget;"
                ]
            }
        },
        "PSTurretController.uc": {
            "body": "Class PSTurretController extends DeusExDecoration;\n\nvar Pawn myOwner;\nvar() string PTurretTeam;\n\nfunction Frob(Actor Frobber, Inventory frobWith) \n{\n\tDeusExPlayer(Frobber).ClientMessage(myOwner.PlayerReplicationInfo.PlayerName@PTurretTeam);\n\tif(Pawn(Frobber) == myOwner)\n\t{\n\t\tmyOwner = None;\n\t\t\tDeusExPlayer(Frobber).ClientMessage(\"Removed from Turret Safe List for group\"@PTurretTeam);\n\t\t\treturn;\n\t}\n\t\n\tif(myOwner == None)\n\t{\n\t\tmyOwner = Pawn(Frobber);\n\t\tDeusExPlayer(Frobber).ClientMessage(\"Added to Turret Safe List for group\"@PTurretTeam);\n\t}\n}\n\ndefaultproperties\n{\n     PTurretTeam=\"DEFAULT\"\n     bCanBeBase=True\n     ItemName=\"Turret Dominator\"\n     bPushable=False\n     Texture=Texture'DeusExItems.Skins.DataCubeTex2'\n     Mesh=LodMesh'DeusExItems.DataCube'\n     CollisionRadius=7.000000\n     CollisionHeight=1.270000\n     Mass=10.000000\n}\n",
            "name": "PSTurretController.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "PTurretTeam=\"DEFAULT\"",
                    "bCanBeBase=True",
                    "ItemName=\"Turret Dominator\"",
                    "bPushable=False",
                    "Texture=Texture'DeusExItems.Skins.DataCubeTex2'",
                    "Mesh=LodMesh'DeusExItems.DataCube'",
                    "CollisionRadius=7.000000",
                    "CollisionHeight=1.270000",
                    "Mass=10.000000"
                ],
                "exec": [],
                "extends": "DeusExDecoration",
                "functions": {
                    "Frob": {
                        "body": "{\n\tDeusExPlayer(Frobber).ClientMessage(myOwner.PlayerReplicationInfo.PlayerName@PTurretTeam);\n\tif(Pawn(Frobber) == myOwner)\n\t{\n\t\tmyOwner = None;\n\t\t\tDeusExPlayer(Frobber).ClientMessage(\"Removed from Turret Safe List for group\"@PTurretTeam);\n\t\t\treturn;\n\t}\n\t\n\tif(myOwner == None)\n\t{\n\t\tmyOwner = Pawn(Frobber);\n\t\tDeusExPlayer(Frobber).ClientMessage(\"Added to Turret Safe List for group\"@PTurretTeam);\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 35,
                "replication": "",
                "states": [],
                "variables": [
                    "var Pawn myOwner;",
                    "var() string PTurretTeam;"
                ]
            }
        },
        "PSVoteZone.uc": {
            "body": "//=============================================================================\n// PSZoneInfo\n//=============================================================================\nclass PSVoteZone extends ZoneInfo;\n\nvar() string MapURL;\nvar() float MinPercentage;\nvar float VoteTimer;\nvar DeusExPlayer Voters[16];\nvar() bool bDebug;\n\n\nevent ActorLeaving( actor Other )\n{\n\tlocal int i, VoteCount, Players;\n\tlocal DeusExPlayer P, DXP;\n\tlocal bool bVoted;\n\t\n\tP = DeusExPlayer(other);\n\tif(P == None)\n\t\treturn;\n\tfor(i=0;i<16;i++)\n\t\tif(Voters[i] == P)\n\t\t\tbVoted=True;\n\t\t\t\n\tfor(i=0;i<16;i++)\n\t\tif(Voters[i] != None)\n\t\t\tVoteCount++;\n\t\n\tforeach AllActors(class'DeusExPlayer', DXP)\n\t\tPlayers++;\t\t\n\tif(bVoted)\n\t{\n\t\tfor(i=0;i<16;i++)\n\t\t{\n\t\t\tif(Voters[i] == P)\n\t\t\t{\n\t\t\t\tVoters[i] = None;\n\t\t\t\tBroadcastMessage(\"[Voter leave] Vote Statistics: \"$VoteCount-1$\" out of \"$Players$\" players voted for \"$MapURL$\". \"$(VoteCount-1 / Players) * 100$\"% - Requires \"$MinPercentage$\"%\");\n\t\t\t\t//Voters[i] = P;\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\t\n\tsuper.ActorLeaving(Other);\n}\n\nevent ActorEntered(actor Other)\n{\t\n\tlocal int i, f, Players, VoteCount;\n\tlocal DeusExPlayer DXP, P;\n\tlocal bool bVoted;\n\n\tP = DeusExPlayer(other);\n\t\n\tif(P == None)\n\t\treturn;\n\t\t\n\tforeach AllActors(class'DeusExPlayer', DXP)\n\t\tPlayers++;\n\t\n\tfor(i=0;i<16;i++)\n\t\tif(Voters[i] != None)\n\t\t\tVoteCount++;\n\t\n\tfor(i=0;i<16;i++)\n\t\tif(Voters[i] == P)\n\t\t\tbVoted=True;\n\t\t\t\t\n\tif(!bVoted)\n\t{\n\t\tfor(i=0;i<16;i++)\n\t\t{\n\t\t\tif(Voters[i] == None)\n\t\t\t{\n\t\t\t\tBroadcastMessage(\"Vote Statistics: \"$VoteCount+1$\" out of \"$Players$\" players voted for \"$MapURL$\". \"$(VoteCount+1 / Players) * 100$\"% - Requires \"$MinPercentage$\"%\");\n\t\t\t\tVoters[i] = P;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif( ( (VoteCount+1 / Players) * 100 ) >= MinPercentage )\n\t\t\t\t{\n\t\t\t\t\tif(bDebug)\n\t\t\t\t\t{\n\t\t\t\t\t\tBroadcastMessage(\"Vote passed.\");\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tLevel.Servertravel( MapURL ,false);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tP.ClientMessage(\"Vote Statistics: \"$VoteCount$\" out of \"$Players$\" players voted for \"$MapURL$\". \"$(VoteCount / Players) * 100$\"% - Requires \"$MinPercentage$\"%\");\n\t\n\n\tSuper.ActorEntered(Other);\n}\n\ndefaultproperties\n{\n}\n",
            "name": "PSVoteZone.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "ZoneInfo",
                "functions": {
                    "ActorEntered": {
                        "body": "{\t\n\n\tP = DeusExPlayer(other);\n\t\n\tif(P == None)\n\t\treturn;\n\t\t\n\tforeach AllActors(class'DeusExPlayer', DXP)\n\t\tPlayers++;\n\t\n\tfor(i=0;i<16;i++)\n\t\tif(Voters[i] != None)\n\t\t\tVoteCount++;\n\t\n\tfor(i=0;i<16;i++)\n\t\tif(Voters[i] == P)\n\t\t\tbVoted=True;\n\t\t\t\t\n\tif(!bVoted)\n\t{\n\t\tfor(i=0;i<16;i++)\n\t\t{\n\t\t\tif(Voters[i] == None)\n\t\t\t{\n\t\t\t\tBroadcastMessage(\"Vote Statistics: \"$VoteCount+1$\" out of \"$Players$\" players voted for \"$MapURL$\". \"$(VoteCount+1 / Players) * 100$\"% - Requires \"$MinPercentage$\"%\");\n\t\t\t\tVoters[i] = P;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif( ( (VoteCount+1 / Players) * 100 ) >= MinPercentage )\n\t\t\t\t{\n\t\t\t\t\tif(bDebug)\n\t\t\t\t\t{\n\t\t\t\t\t\tBroadcastMessage(\"Vote passed.\");\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tLevel.Servertravel( MapURL ,false);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tP.ClientMessage(\"Vote Statistics: \"$VoteCount$\" out of \"$Players$\" players voted for \"$MapURL$\". \"$(VoteCount / Players) * 100$\"% - Requires \"$MinPercentage$\"%\");\n\t\n\n\tSuper.ActorEntered(Other);\n}",
                        "locals": [
                            "local int i, f, Players, VoteCount;",
                            "local DeusExPlayer DXP, P;",
                            "local bool bVoted;"
                        ],
                        "modifiers": [],
                        "name": "ActorEntered",
                        "native": false,
                        "param": [
                            [
                                "actor",
                                "Other"
                            ]
                        ],
                        "return": ""
                    },
                    "ActorLeaving": {
                        "body": "{\n\t\n\tP = DeusExPlayer(other);\n\tif(P == None)\n\t\treturn;\n\tfor(i=0;i<16;i++)\n\t\tif(Voters[i] == P)\n\t\t\tbVoted=True;\n\t\t\t\n\tfor(i=0;i<16;i++)\n\t\tif(Voters[i] != None)\n\t\t\tVoteCount++;\n\t\n\tforeach AllActors(class'DeusExPlayer', DXP)\n\t\tPlayers++;\t\t\n\tif(bVoted)\n\t{\n\t\tfor(i=0;i<16;i++)\n\t\t{\n\t\t\tif(Voters[i] == P)\n\t\t\t{\n\t\t\t\tVoters[i] = None;\n\t\t\t\tBroadcastMessage(\"[Voter leave] Vote Statistics: \"$VoteCount-1$\" out of \"$Players$\" players voted for \"$MapURL$\". \"$(VoteCount-1 / Players) * 100$\"% - Requires \"$MinPercentage$\"%\");\n\t\t\t\t//Voters[i] = P;\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\t\n\tsuper.ActorLeaving(Other);\n}",
                        "locals": [
                            "local int i, VoteCount, Players;",
                            "local DeusExPlayer P, DXP;",
                            "local bool bVoted;"
                        ],
                        "modifiers": [],
                        "name": "ActorLeaving",
                        "native": false,
                        "param": [
                            [
                                "actor",
                                "Other"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 104,
                "replication": "",
                "states": [],
                "variables": [
                    "var() string MapURL;",
                    "var() float MinPercentage;",
                    "var float VoteTimer;",
                    "var DeusExPlayer Voters[16];",
                    "var() bool bDebug;"
                ]
            }
        },
        "PSZoneInfo.uc": {
            "body": "//=============================================================================\n// PSZoneInfo\n//=============================================================================\nclass PSZoneInfo extends ZoneInfo;\n\nvar() string EnterString, LeaveString, ProjDestroyedString;\nvar() music myTrack;\nvar() EMusicTransition Transition;\nvar() byte             SongSection;\nvar() byte             CdTrack;\nvar() bool bSafeZone;\nvar() bool bMusicZone;\nvar() bool bHealZone;\nvar() bool bInventoryKillZone;\nvar() bool bNoBoxZone;\nvar() sound EntrySound, ExitSound;\nvar(Restrictions) bool bRestrictedZone;\nvar(Restrictions) bool bAllowAdmins;\nvar(Restrictions) string EntryMsg, ExitMsg;\nvar(Restrictions) int rTimer;\nvar() bool bDisableDynMusic;\nvar() bool bEnableSaving;\nvar deusexplayer NotifPlayer;\nvar(Events) name mySkyboxTag;\n\nfunction bool MMLocked(DeusExPlayer Them)\n{\nlocal MusicMemory MM;\n\tforeach AllActors(class'MusicMemory', MM)\n\t{\n\t\tif(MM.Watcher == Them)\n\t\t{\n\t\t\treturn MM.bMMLocked;\n\t\t}\n\t}\n}\n\nevent ActorLeaving( actor Other )\n{\n\tlocal SecDrone PD;\n\t\n\tsuper.ActorLeaving(Other);\n\t\t\n\tif(DynMusicActor(Other) != None)\n\t\tDynMusicActor(Other).bPSZDisabled = False;\n\t\t\n\t\tif(bRestrictedZone)\n\t\t{\n\t\t\tforeach AllActors(class'SecDrone', PD)\n\t\t\t{\n\t\t\t\tif(PD.AttachPlayer == DeusExPlayer(Other))\n\t\t\t\t{\n\t\t\t\t\tDeusExPlayer(Other).ClientMessage(\"Security Drone: \"$ExitMsg, 'TeamSay');\n\t\t\t\t\tSpawn(class'sphereEffect',,,pD.Location);\n\t\t\t\t\tPD.Destroy();\n\t\t\t\t\tif(NotifPlayer != None)\n\t\t\t\t\t{\n\t\t\t\t\t\tNotifPlayer.ClientMessage(DeusExPlayer(Other).PlayerReplicationInfo.PlayerName$\" left your restricted zone.\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(LeaveString != \"\" && DeusExPlayer(Other) != None)\n\t\t\tDeusExPlayer(Other).ClientMessage(LeaveString);\n\t\t\t\n\t\tif(ExitSound != None && DeusExPlayer(Other) != None)\n\t\t\tDeusExPlayer(Other).PlaySound(ExitSound,,,, 256);\n\t\t\t\n\t\tif(bSafeZone)\n\t\t{\n\t\t\tif(DeusExPlayer(Other) != None)\n\t\t\t\tDeusExPlayer(Other).ReducedDamageType = '';\n\t\t\tif(DeusExDecoration(Other) != None)\n\t\t\t\tDeusExDecoration(Other).bInvincible = DeusExDecoration(Other).default.bInvincible;\n\t\t\tif (Other.IsA('ScriptedPawn'))\n\t\t\t\tScriptedPawn(Other).bInvincible=ScriptedPawn(Other).default.bInvincible;\n\t\t\t\t\n\t\t\tif(Other.IsA('BasketballMP'))\n\t\t\t{\n\t\t\t\tBasketballMP(Other).Style = STY_Translucent;\n\t\t\t\tBasketballMP(Other).bDoomedToDestroy = True;\n\t\t\t\tBasketballMP(Other).SetTimer(15, False);\n\t\t\t\tOther.PlaySound(sound'ProdFire', SLOT_None,,,, 2.0);\n\t\t\t\tOther.Spawn(class'SmokeTrail',,, Other.Location);\n\t\t\t\tOther.Spawn(class'SphereEffect',,, Other.Location);\n\t\t\t}\n\t\t\tif(Other.IsA('BasketballMP4Player'))\n\t\t\t{\n\t\t\t\tOther.PlaySound(sound'ProdFire', SLOT_None,,,, 2.0);\n\t\t\t\tOther.Spawn(class'SmokeTrail',,, Other.Location);\n\t\t\t\tOther.Spawn(class'SphereEffect',,, Other.Location);\n\t\t\t\tOther.Destroy();\n\t\t\t}\n\t\t}\n}\n\nfunction bool ShouldRestrict(deusexplayer Check)\n{\n\tlocal SecDrone PD;\n\t\n\tforeach AllActors(class'SecDrone', PD)\n\t\tif(PD.AttachPlayer == Check)\n\t\t\treturn false;\n\t\t\t\n\tif(bAllowAdmins)\n\t\tif(Check.bAdmin)\n\t\t\treturn False;\n\t\t\n\treturn True;\n}\n\nfunction MemorizeMusic(music This, DeusExPlayer Them)\n{\nlocal MusicMemory MM;\n\tforeach AllActors(class'MusicMemory', MM)\n\t{\n\t\tif(MM.Watcher == Them)\n\t\t{\n\t\t\tMM.CurrentSong = This;\n\t\t\t//Log(\"Track memorized.\"@This@them.playerreplicationinfo.playername);\n\t\t\tThem.ClientSetMusic( This, SongSection, CdTrack, Transition );\n\t\t}\n\t}\n}\n\nfunction bool mmIsPlaying(music This, DeusExPlayer Them)\n{\nlocal MusicMemory MM;\nlocal bool bFound;\n\n\tforeach AllActors(class'MusicMemory', MM)\n\t{\n\t\tif(MM.Watcher == Them)\n\t\t{\n\t\t\tbFound=True;\n\t\t\tif(MM.CurrentSong == This)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\t\n\tif(!bFound)\n\t{\n\t\tMM = Spawn(class'MusicMemory');\n\t\tMM.Watcher=Them;\n\t\tLog(\"New music memory.\"@This@them.playerreplicationinfo.playername);\n\t}\n}\n\nevent ActorEntered(actor Other)\n{\n\tlocal float avg;\n\tlocal SecDrone PD;\n\t\n\tSuper.ActorEntered(Other);\n\tif(DynMusicActor(Other) != None && bDisableDynMusic)\n\t\tDynMusicActor(Other).bPSZDisabled = True;\n\t\t\n\tif(DeusExPlayer(Other) != None)\n\t{\n\t\tif(bRestrictedZone)\n\t\t{\n\t\t\tif(ShouldRestrict(DeusExPlayer(Other)))\n\t\t\t{\n\t\t\t\tPD = Spawn(class'SecDrone',,,Other.Location);\n\t\t\t\tPD.SetTimer(rTimer,false);\n\t\t\t\tPD.AttachPlayer = DeusExPlayer(Other);\n\t\t\t\tPD.gotostate('following');\n\t\t\t\tSpawn(class'SphereEffect',,,PD.Location);\n\t\t\t\tDeusExPlayer(Other).ClientMessage(\"Security Drone: \"$EntryMsg, 'TeamSay');\n\t\t\t\tif(NotifPlayer != None)\n\t\t\t\t{\n\t\t\t\t\tNotifPlayer.ClientMessage(DeusExPlayer(Other).PlayerReplicationInfo.PlayerName$\" entered your restricted zone.\");\n\t\t\t\t\tPD.NotifPlayer = NotifPlayer;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(EntrySound != None)\n\t\t\tDeusExPlayer(Other).PlaySound(EntrySound,,,, 256);\n\t\t\t\n\t\tif(bMusicZone)\n\t\t{\t\n\t\t\tif(!mmIsPlaying(myTrack, deusExPlayer(Other)) && !MMLocked(DeusExPlayer(Other)))\n\t\t\t\tMemorizeMusic(myTrack,DeusExPlayer(Other));\n\t\t}\t\n\t\tif(EnterString != \"\")\n\t\t\tDeusExPlayer(Other).ClientMessage(EnterString);\n\t\t\t\n\t\tif(bHealZone)\n\t\t{\n\t\t\tif(DeusExPlayer(Other).Health < 100)\n\t\t\t{\n\t\t\t\tDeusExPlayer(Other).HealPlayer(100, True);\n\t\t\t}\n\t\t\t\n\t\t\tif(DeusExPlayer(Other).Energy < 100)\n\t\t\t{\n\t\t\t\tDeusExPlayer(Other).Energy = 100;\n\t\t\t}\n\t\t\tDeusExPlayer(Other).StopPoison();\n\t\t\tDeusExPlayer(Other).ExtinguishFire();\n\t\t\tDeusExPlayer(Other).drugEffectTimer = 0;\n\t\t}\n\t\t\n\t\tif(bSafeZone)\n\t\t{\n\t\t\tDeusExPlayer(Other).ReducedDamageType = 'All';\n\t\t}\n\t}\n\tif(bNoBoxZone)\n\t{\n\t\tif (Other.IsA('Box'))\n\t\t{\n\t\t\tavg = (DeusExDecoration(Other).CollisionRadius + DeusExDecoration(Other).CollisionHeight) / 2;\n\t\t\tDeusExDecoration(Other).Frag(DeusExDecoration(Other).fragType, vect(20,20,20), avg/20.0, avg/5 + 1);\n\t\t\tOther.Destroy();\n\t\t}\n\t}\n\tif(bSafeZone)\n\t{\n\t\tif (Other.IsA('ScriptedPawn'))\n\t\t{\n\t\t\tScriptedPawn(Other).bInvincible=true;\n\t\t}\n\t\telse if (Other.IsA('DeusExDecoration'))\n\t\t{\n\t\t\tDeusExDecoration(Other).bInvincible=True;\n\t\t}\n\t\telse if (Other.IsA('SpyDrone') && !SpyDrone(Other).bDisabled)\n\t\t{\n\t\t\tDeusExPlayer(SpyDrone(Other).Owner).ForceDroneOff();\n\t\t\tDeusExPlayer(SpyDrone(Other).Owner).ClientMessage(ProjDestroyedString);\n\t\t\tSpyDrone(Other).bDisabled = True;\n\t\t\tSpyDrone(Other).SetPhysics(PHYS_Falling);\n\t\t\tSpyDrone(Other).bBounce = True;\n\t\t\tSpyDrone(Other).LifeSpan = 10.0;\n\t\t\tSpyDrone(Other).Spawn(class'SmokeTrail',,, Other.Location);\n\t\t\tOther.Spawn(class'SphereEffect',,, Other.Location);\n\t\t}\n\t\telse if (Other.IsA('ThrownProjectile') && !Other.IsA('BasketballMP'))\n\t\t{\n\t\t\t\tDeusExPlayer(ThrownProjectile(Other).Owner).ClientMessage(ProjDestroyedString);\n\t\t\tOther.TakeDamage(15, None, Other.Location, vect(0,0,0), 'EMP');\n\t\t\t\t\tOther.PlaySound(sound'ProdFire', SLOT_None,,,, 2.0);\n\t\t\tOther.Spawn(class'SphereEffect',,, Other.Location);\n\t\t\t\t\tOther.Spawn(class'SmokeTrail',,, Other.Location);\n\t\t\tOther.LifeSpan = 10.0;\n\t\t}\n\t\telse if (Other.IsA('RocketLAW') || Other.IsA('HECannister20mm') || Other.isA('Rocket') || Other.isA('RocketWP')) \n\t\t{\n\t\t\tDeusExPlayer(Other.Owner).ClientMessage(ProjDestroyedString);\n\t\t\tOther.PlaySound(sound'ProdFire', SLOT_None,,,, 2.0);\n\t\t\tOther.Spawn(class'SmokeTrail',,, Other.Location);\n\t\t\tOther.Spawn(class'SphereEffect',,, Other.Location);\n\t\t\tDeusExProjectile(Other).Destroy();\n\t\t}\n\t\telse if (Other.IsA('DeusExProjectile') && !Other.IsA('BasketballMP'))\n\t\t{\n\t\t\tDeusExPlayer(Other.Owner).ClientMessage(ProjDestroyedString);\n\t\t\tOther.PlaySound(sound'ProdFire', SLOT_None,,,, 2.0);\n\t\t\tOther.Spawn(class'SphereEffect',,, Other.Location);\n\t\t\tDeusExProjectile(Other).Destroy();\n\t\t}\n\t\telse if (Other.IsA('ProjectileGenerator'))\n\t\t{\n\t\t\tProjectileGenerator(Other).Destroy();\n\t\t}\n\t\telse if(Other.IsA('BasketballMP'))\n\t\t{\n\t\t\tif (BasketballMP(Other).bDoomedToDestroy)\n\t\t\t{\n\t\t\t\tBasketballMP(Other).bDoomedToDestroy = False;\n\t\t\t\tBasketballMP(Other).Style = STY_Normal;\n\t\t\t\tBasketballMP(Other).SetTimer(0,False);\n\t\t\t}\n\t\t}\n\t}\n\tif(bInventoryKillZone)\n\t{\n\t\tif(Other.IsA('Inventory'))\n\t\t\tOther.Destroy(); \n\t}\n}\n\nsimulated function LinkToSkybox()\n{\n\tlocal skyzoneinfo TempSkyZone;\n\n\tif(mySkyboxTag == 'None')\n\t{\n\t\tsuper.LinkToSkybox();\n\t\treturn;\n\t}\n\t// SkyZone.\n\tforeach AllActors( class 'SkyZoneInfo', TempSkyZone, '' )\n\t{\n\t\tif(TempSkyZone.Tag == mySkyboxTag)\n\t\t{\n\t\t\tSkyZone = TempSkyZone;\n\t\t}\n\t}\n\t\n\tforeach AllActors( class 'SkyZoneInfo', TempSkyZone, '' )\n\t{\n\t\tif( TempSkyZone.bHighDetail == Level.bHighDetailMode )\n\t\t{\n\t\t\tif(TempSkyZone.Tag == mySkyboxTag)\n\t\t\t{\n\t\t\t\tSkyZone = TempSkyZone;\n\t\t\t}\n\t\t}\n\t}\n}\n\ndefaultproperties\n{\n     EntryMsg=\"You are entering restricted area. Please leave, or you will be terminated in 15 seconds.\"\n     ExitMsg=\"Have a nice day\"\n     rTimer=15\n}\n",
            "name": "PSZoneInfo.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "EntryMsg=\"You are entering restricted area. Please leave, or you will be terminated in 15 seconds.\"",
                    "ExitMsg=\"Have a nice day\"",
                    "rTimer=15"
                ],
                "exec": [],
                "extends": "ZoneInfo",
                "functions": {
                    "ActorEntered": {
                        "body": "{\n\t\n\tSuper.ActorEntered(Other);\n\tif(DynMusicActor(Other) != None && bDisableDynMusic)\n\t\tDynMusicActor(Other).bPSZDisabled = True;\n\t\t\n\tif(DeusExPlayer(Other) != None)\n\t{\n\t\tif(bRestrictedZone)\n\t\t{\n\t\t\tif(ShouldRestrict(DeusExPlayer(Other)))\n\t\t\t{\n\t\t\t\tPD = Spawn(class'SecDrone',,,Other.Location);\n\t\t\t\tPD.SetTimer(rTimer,false);\n\t\t\t\tPD.AttachPlayer = DeusExPlayer(Other);\n\t\t\t\tPD.gotostate('following');\n\t\t\t\tSpawn(class'SphereEffect',,,PD.Location);\n\t\t\t\tDeusExPlayer(Other).ClientMessage(\"Security Drone: \"$EntryMsg, 'TeamSay');\n\t\t\t\tif(NotifPlayer != None)\n\t\t\t\t{\n\t\t\t\t\tNotifPlayer.ClientMessage(DeusExPlayer(Other).PlayerReplicationInfo.PlayerName$\" entered your restricted zone.\");\n\t\t\t\t\tPD.NotifPlayer = NotifPlayer;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(EntrySound != None)\n\t\t\tDeusExPlayer(Other).PlaySound(EntrySound,,,, 256);\n\t\t\t\n\t\tif(bMusicZone)\n\t\t{\t\n\t\t\tif(!mmIsPlaying(myTrack, deusExPlayer(Other)) && !MMLocked(DeusExPlayer(Other)))\n\t\t\t\tMemorizeMusic(myTrack,DeusExPlayer(Other));\n\t\t}\t\n\t\tif(EnterString != \"\")\n\t\t\tDeusExPlayer(Other).ClientMessage(EnterString);\n\t\t\t\n\t\tif(bHealZone)\n\t\t{\n\t\t\tif(DeusExPlayer(Other).Health < 100)\n\t\t\t{\n\t\t\t\tDeusExPlayer(Other).HealPlayer(100, True);\n\t\t\t}\n\t\t\t\n\t\t\tif(DeusExPlayer(Other).Energy < 100)\n\t\t\t{\n\t\t\t\tDeusExPlayer(Other).Energy = 100;\n\t\t\t}\n\t\t\tDeusExPlayer(Other).StopPoison();\n\t\t\tDeusExPlayer(Other).ExtinguishFire();\n\t\t\tDeusExPlayer(Other).drugEffectTimer = 0;\n\t\t}\n\t\t\n\t\tif(bSafeZone)\n\t\t{\n\t\t\tDeusExPlayer(Other).ReducedDamageType = 'All';\n\t\t}\n\t}\n\tif(bNoBoxZone)\n\t{\n\t\tif (Other.IsA('Box'))\n\t\t{\n\t\t\tavg = (DeusExDecoration(Other).CollisionRadius + DeusExDecoration(Other).CollisionHeight) / 2;\n\t\t\tDeusExDecoration(Other).Frag(DeusExDecoration(Other).fragType, vect(20,20,20), avg/20.0, avg/5 + 1);\n\t\t\tOther.Destroy();\n\t\t}\n\t}\n\tif(bSafeZone)\n\t{\n\t\tif (Other.IsA('ScriptedPawn'))\n\t\t{\n\t\t\tScriptedPawn(Other).bInvincible=true;\n\t\t}\n\t\telse if (Other.IsA('DeusExDecoration'))\n\t\t{\n\t\t\tDeusExDecoration(Other).bInvincible=True;\n\t\t}\n\t\telse if (Other.IsA('SpyDrone') && !SpyDrone(Other).bDisabled)\n\t\t{\n\t\t\tDeusExPlayer(SpyDrone(Other).Owner).ForceDroneOff();\n\t\t\tDeusExPlayer(SpyDrone(Other).Owner).ClientMessage(ProjDestroyedString);\n\t\t\tSpyDrone(Other).bDisabled = True;\n\t\t\tSpyDrone(Other).SetPhysics(PHYS_Falling);\n\t\t\tSpyDrone(Other).bBounce = True;\n\t\t\tSpyDrone(Other).LifeSpan = 10.0;\n\t\t\tSpyDrone(Other).Spawn(class'SmokeTrail',,, Other.Location);\n\t\t\tOther.Spawn(class'SphereEffect',,, Other.Location);\n\t\t}\n\t\telse if (Other.IsA('ThrownProjectile') && !Other.IsA('BasketballMP'))\n\t\t{\n\t\t\t\tDeusExPlayer(ThrownProjectile(Other).Owner).ClientMessage(ProjDestroyedString);\n\t\t\tOther.TakeDamage(15, None, Other.Location, vect(0,0,0), 'EMP');\n\t\t\t\t\tOther.PlaySound(sound'ProdFire', SLOT_None,,,, 2.0);\n\t\t\tOther.Spawn(class'SphereEffect',,, Other.Location);\n\t\t\t\t\tOther.Spawn(class'SmokeTrail',,, Other.Location);\n\t\t\tOther.LifeSpan = 10.0;\n\t\t}\n\t\telse if (Other.IsA('RocketLAW') || Other.IsA('HECannister20mm') || Other.isA('Rocket') || Other.isA('RocketWP')) \n\t\t{\n\t\t\tDeusExPlayer(Other.Owner).ClientMessage(ProjDestroyedString);\n\t\t\tOther.PlaySound(sound'ProdFire', SLOT_None,,,, 2.0);\n\t\t\tOther.Spawn(class'SmokeTrail',,, Other.Location);\n\t\t\tOther.Spawn(class'SphereEffect',,, Other.Location);\n\t\t\tDeusExProjectile(Other).Destroy();\n\t\t}\n\t\telse if (Other.IsA('DeusExProjectile') && !Other.IsA('BasketballMP'))\n\t\t{\n\t\t\tDeusExPlayer(Other.Owner).ClientMessage(ProjDestroyedString);\n\t\t\tOther.PlaySound(sound'ProdFire', SLOT_None,,,, 2.0);\n\t\t\tOther.Spawn(class'SphereEffect',,, Other.Location);\n\t\t\tDeusExProjectile(Other).Destroy();\n\t\t}\n\t\telse if (Other.IsA('ProjectileGenerator'))\n\t\t{\n\t\t\tProjectileGenerator(Other).Destroy();\n\t\t}\n\t\telse if(Other.IsA('BasketballMP'))\n\t\t{\n\t\t\tif (BasketballMP(Other).bDoomedToDestroy)\n\t\t\t{\n\t\t\t\tBasketballMP(Other).bDoomedToDestroy = False;\n\t\t\t\tBasketballMP(Other).Style = STY_Normal;\n\t\t\t\tBasketballMP(Other).SetTimer(0,False);\n\t\t\t}\n\t\t}\n\t}\n\tif(bInventoryKillZone)\n\t{\n\t\tif(Other.IsA('Inventory'))\n\t\t\tOther.Destroy(); \n\t}\n}",
                        "locals": [
                            "local float avg;",
                            "local SecDrone PD;"
                        ],
                        "modifiers": [],
                        "name": "ActorEntered",
                        "native": false,
                        "param": [
                            [
                                "actor",
                                "Other"
                            ]
                        ],
                        "return": ""
                    },
                    "ActorLeaving": {
                        "body": "{\n\t\n\tsuper.ActorLeaving(Other);\n\t\t\n\tif(DynMusicActor(Other) != None)\n\t\tDynMusicActor(Other).bPSZDisabled = False;\n\t\t\n\t\tif(bRestrictedZone)\n\t\t{\n\t\t\tforeach AllActors(class'SecDrone', PD)\n\t\t\t{\n\t\t\t\tif(PD.AttachPlayer == DeusExPlayer(Other))\n\t\t\t\t{\n\t\t\t\t\tDeusExPlayer(Other).ClientMessage(\"Security Drone: \"$ExitMsg, 'TeamSay');\n\t\t\t\t\tSpawn(class'sphereEffect',,,pD.Location);\n\t\t\t\t\tPD.Destroy();\n\t\t\t\t\tif(NotifPlayer != None)\n\t\t\t\t\t{\n\t\t\t\t\t\tNotifPlayer.ClientMessage(DeusExPlayer(Other).PlayerReplicationInfo.PlayerName$\" left your restricted zone.\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(LeaveString != \"\" && DeusExPlayer(Other) != None)\n\t\t\tDeusExPlayer(Other).ClientMessage(LeaveString);\n\t\t\t\n\t\tif(ExitSound != None && DeusExPlayer(Other) != None)\n\t\t\tDeusExPlayer(Other).PlaySound(ExitSound,,,, 256);\n\t\t\t\n\t\tif(bSafeZone)\n\t\t{\n\t\t\tif(DeusExPlayer(Other) != None)\n\t\t\t\tDeusExPlayer(Other).ReducedDamageType = '';\n\t\t\tif(DeusExDecoration(Other) != None)\n\t\t\t\tDeusExDecoration(Other).bInvincible = DeusExDecoration(Other).default.bInvincible;\n\t\t\tif (Other.IsA('ScriptedPawn'))\n\t\t\t\tScriptedPawn(Other).bInvincible=ScriptedPawn(Other).default.bInvincible;\n\t\t\t\t\n\t\t\tif(Other.IsA('BasketballMP'))\n\t\t\t{\n\t\t\t\tBasketballMP(Other).Style = STY_Translucent;\n\t\t\t\tBasketballMP(Other).bDoomedToDestroy = True;\n\t\t\t\tBasketballMP(Other).SetTimer(15, False);\n\t\t\t\tOther.PlaySound(sound'ProdFire', SLOT_None,,,, 2.0);\n\t\t\t\tOther.Spawn(class'SmokeTrail',,, Other.Location);\n\t\t\t\tOther.Spawn(class'SphereEffect',,, Other.Location);\n\t\t\t}\n\t\t\tif(Other.IsA('BasketballMP4Player'))\n\t\t\t{\n\t\t\t\tOther.PlaySound(sound'ProdFire', SLOT_None,,,, 2.0);\n\t\t\t\tOther.Spawn(class'SmokeTrail',,, Other.Location);\n\t\t\t\tOther.Spawn(class'SphereEffect',,, Other.Location);\n\t\t\t\tOther.Destroy();\n\t\t\t}\n\t\t}\n}",
                        "locals": [
                            "local SecDrone PD;"
                        ],
                        "modifiers": [],
                        "name": "ActorLeaving",
                        "native": false,
                        "param": [
                            [
                                "actor",
                                "Other"
                            ]
                        ],
                        "return": ""
                    },
                    "LinkToSkybox": {
                        "body": "{\n\n\tif(mySkyboxTag == 'None')\n\t{\n\t\tsuper.LinkToSkybox();\n\t\treturn;\n\t}\n\t// SkyZone.\n\tforeach AllActors( class 'SkyZoneInfo', TempSkyZone, '' )\n\t{\n\t\tif(TempSkyZone.Tag == mySkyboxTag)\n\t\t{\n\t\t\tSkyZone = TempSkyZone;\n\t\t}\n\t}\n\t\n\tforeach AllActors( class 'SkyZoneInfo', TempSkyZone, '' )\n\t{\n\t\tif( TempSkyZone.bHighDetail == Level.bHighDetailMode )\n\t\t{\n\t\t\tif(TempSkyZone.Tag == mySkyboxTag)\n\t\t\t{\n\t\t\t\tSkyZone = TempSkyZone;\n\t\t\t}\n\t\t}\n\t}\n}",
                        "locals": [
                            "local skyzoneinfo TempSkyZone;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "LinkToSkybox",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "MMLocked": {
                        "body": "{\n\tforeach AllActors(class'MusicMemory', MM)\n\t{\n\t\tif(MM.Watcher == Them)\n\t\t{\n\t\t\treturn MM.bMMLocked;\n\t\t}\n\t}\n}",
                        "locals": [
                            "local MusicMemory MM;"
                        ],
                        "modifiers": [],
                        "name": "MMLocked",
                        "native": false,
                        "param": [
                            [
                                "DeusExPlayer",
                                "Them"
                            ]
                        ],
                        "return": "bool"
                    },
                    "MemorizeMusic": {
                        "body": "{\n\tforeach AllActors(class'MusicMemory', MM)\n\t{\n\t\tif(MM.Watcher == Them)\n\t\t{\n\t\t\tMM.CurrentSong = This;\n\t\t\t//Log(\"Track memorized.\"@This@them.playerreplicationinfo.playername);\n\t\t\tThem.ClientSetMusic( This, SongSection, CdTrack, Transition );\n\t\t}\n\t}\n}",
                        "locals": [
                            "local MusicMemory MM;"
                        ],
                        "modifiers": [],
                        "name": "MemorizeMusic",
                        "native": false,
                        "param": [
                            [
                                "music",
                                "This"
                            ],
                            [
                                "DeusExPlayer",
                                "Them"
                            ]
                        ],
                        "return": ""
                    },
                    "ShouldRestrict": {
                        "body": "{\n\t\n\tforeach AllActors(class'SecDrone', PD)\n\t\tif(PD.AttachPlayer == Check)\n\t\t\treturn false;\n\t\t\t\n\tif(bAllowAdmins)\n\t\tif(Check.bAdmin)\n\t\t\treturn False;\n\t\t\n\treturn True;\n}",
                        "locals": [
                            "local SecDrone PD;"
                        ],
                        "modifiers": [],
                        "name": "ShouldRestrict",
                        "native": false,
                        "param": [
                            [
                                "deusexplayer",
                                "Check"
                            ]
                        ],
                        "return": "bool"
                    },
                    "mmIsPlaying": {
                        "body": "{\n\n\tforeach AllActors(class'MusicMemory', MM)\n\t{\n\t\tif(MM.Watcher == Them)\n\t\t{\n\t\t\tbFound=True;\n\t\t\tif(MM.CurrentSong == This)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\t\n\tif(!bFound)\n\t{\n\t\tMM = Spawn(class'MusicMemory');\n\t\tMM.Watcher=Them;\n\t\tLog(\"New music memory.\"@This@them.playerreplicationinfo.playername);\n\t}\n}",
                        "locals": [
                            "local MusicMemory MM;",
                            "local bool bFound;"
                        ],
                        "modifiers": [],
                        "name": "mmIsPlaying",
                        "native": false,
                        "param": [
                            [
                                "music",
                                "This"
                            ],
                            [
                                "DeusExPlayer",
                                "Them"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 320,
                "replication": "",
                "states": [],
                "variables": [
                    "var() string EnterString, LeaveString, ProjDestroyedString;",
                    "var() music myTrack;",
                    "var() EMusicTransition Transition;",
                    "var() byte             SongSection;",
                    "var() byte             CdTrack;",
                    "var() bool bSafeZone;",
                    "var() bool bMusicZone;",
                    "var() bool bHealZone;",
                    "var() bool bInventoryKillZone;",
                    "var() bool bNoBoxZone;",
                    "var() sound EntrySound, ExitSound;",
                    "var(Restrictions) bool bRestrictedZone;",
                    "var(Restrictions) bool bAllowAdmins;",
                    "var(Restrictions) string EntryMsg, ExitMsg;",
                    "var(Restrictions) int rTimer;",
                    "var() bool bDisableDynMusic;",
                    "var() bool bEnableSaving;",
                    "var deusexplayer NotifPlayer;",
                    "var(Events) name mySkyboxTag;"
                ]
            }
        },
        "PartyBox.uc": {
            "body": "//=============================================================================\n// It drops weapons, good for any party.\n//=============================================================================\nclass PartyBox extends Containers;\n\nfunction Destroyed()\n{\n\tlocal actor dropped;\n\tlocal class<actor> tempClass;\n\tlocal int i;\n\tlocal Rotator rot;\n\tlocal Vector loc;\n\tlocal TrashPaper trash;\n\tlocal Rat vermin;\n\tlocal int randy, randy2, randy3;\n\t// trace down to see if we are sitting on the ground\n\tloc = vect(0,0,0);\n\tloc.Z -= CollisionHeight + 8.0;\n\tloc += Location;\n\n\tif( (Pawn(Base) != None) && (Pawn(Base).CarriedDecoration == self) )\n\t\tPawn(Base).DropDecoration();\n\t\tRandy = Rand(35);\n\t\tif(Randy == 1)\n\t\t{\n\t\t\tContents=class'WeaponBioRifle';\n\t\t}\n\t\tif(Randy == 2)\n\t\t{\n\t\t\tContents=class'WeaponEnergyAssault';\n\t\t}\t\n\t\tif(Randy == 3)\n\t\t{\n\t\t\tContents=class'WeaponLaserAssault';\n\t\t}\t\t\n\t\tif(Randy == 4)\n\t\t{\n\t\t\tContents=class'WeaponNeedler';\n\t\t}\n\t\tif(Randy == 5)\n\t\t{\n\t\t\tContents=class'WeaponNeedler2';\n\t\t}\n\t\tif(Randy == 6)\n\t\t{\n\t\t\tContents=class'WeaponPlasmaAssault';\n\t\t}\t\n\t\tif(Randy == 7)\n\t\t{\n\t\t\tContents=class'WeaponSpitRifle';\n\t\t}\t\n\t\n\t\tif(Randy == 8)\n\t\t{\n\t\t\tContents=class'WeaponDildo';\n\t\t}\n\t\tif(Randy == 9)\n\t\t{\n\t\t\tContents=class'WeaponDragonsClaw';\n\t\t}\t\n\t\tif(Randy == 10)\n\t\t{\n\t\t\tContents=class'WeaponHeavyBeamSword';\n\t\t}\t\t\n\t\tif(Randy == 11)\n\t\t{\n\t\t\tContents=class'WeaponInflatableSword';\n\t\t}\n\t\tif(Randy == 12)\n\t\t{\n\t\t\tContents=class'WeaponPlasmaSword';\n\t\t}\n\t\tif(Randy == 13)\n\t\t{\n\t\t\tContents=class'WeaponThinSword';\n\t\t}\n\t\tif(Randy == 14)\n\t\t{\n\t\t\tContents=class'WeaponBurnRifle';\n\t\t}\t\t\n\t\tif(Randy == 15)\n\t\t{\n\t\t\tContents=class'WeaponMomsKnife';\n\t\t}\n\t\tif(Randy == 16)\n\t\t{\n\t\t\tContents=class'WeaponWPGrenade';\n\t\t}\n\t\tif(Randy == 17)\n\t\t{\n\t\t\tContents=class'WeaponStealthShotgun';\n\t\t}\n\t\tif(Randy == 18)\n\t\t{\n\t\t\tContents=class'MM';\n\t\t}\n\t\tif(Randy == 19)\n\t\t{\n\t\t\tContents=class'WeaponSkullGun';\n\t\t}\n\t\tif(Randy == 20)\n\t\t{\n\t\t\tContents=class'WeaponPhatRifle';\n\t\t}\n\t\tif(Randy == 21)\n\t\t{\n\t\t\tContents=class'WeaponMagnum';\n\t\t}\n\t\tif(Randy == 22)\n\t\t{\n\t\t\tContents=class'WeaponRailgun';\n\t\t}\n\t\tif(Randy == 23)\n\t\t{\n\t\t\tContents=class'WeaponClaymore';\n\t\t}\n\t\tif(Randy == 24)\n\t\t{\n\t\t\tContents=class'WeaponLightshow';\n\t\t}\n\t\tif(Randy == 25)\n\t\t{\n\t\t\tContents=class'WeaponKnifeBomb';\n\t\t}\n\t\tif(Randy == 26)\n\t\t{\n\t\t\tContents=class'WeaponNailgun';\n\t\t}\n\t\tif(Randy == 27)\n\t\t{\n\t\t\tContents=class'WeaponBoxGun';\n\t\t}\n\t\tif(Randy == 28)\n\t\t{\n\t\t\tContents=class'WeaponDePressurizer';\n\t\t}\n\t\tif(Randy >= 29)\n\t\t{\n\t\t\tTrollExplode();\n\t\t}\n\t\ttempClass = Contents;\t\n\n\t\t\tloc = Location+VRand()*CollisionRadius;\n\t\t\tloc.Z = Location.Z;\n\t\t\trot = rot(0,0,0);\n\t\t\trot.Yaw = FRand() * 65535;\n\t\t\tdropped = Spawn(tempClass,,, loc, rot);\n\t\t\tif (dropped != None)\n\t\t\t{\n\t\t\t\tdropped.RemoteRole = ROLE_DumbProxy;\n\t\t\t\tdropped.SetPhysics(PHYS_Falling);\n\t\t\t\tdropped.bCollideWorld = true;\n\t\t\t\tdropped.Velocity = VRand() * 50;\n\t\t\t\tif ( inventory(dropped) != None )\n\t\t\t\t\tinventory(dropped).GotoState('Pickup', 'Dropped');\n\t\t\t}\n}\n\nfunction TrollExplode()\n{\n\tlocal SphereEffect sphere;\n\tlocal ScorchMark s;\n\tlocal ExplosionLight light;\n\tlocal int i;\n\tlocal float explosionDamage;\n\tlocal float explosionRadius;\n\n\texplosionDamage = 600;\n\texplosionRadius = 100;\n\n\t// alert NPCs that I'm exploding\n\tAISendEvent('LoudNoise', EAITYPE_Audio, , explosionRadius*16);\n\tPlaySound(Sound'LargeExplosion1', SLOT_None,,, explosionRadius*16);\n\n\t// draw a pretty explosion\n\tlight = Spawn(class'ExplosionLight',,, Location);\n\tif (light != None)\n\t\tlight.size = 4;\n\n\tSpawn(class'ExplosionSmall',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionLarge',,, Location + 2*VRand()*CollisionRadius);\n\n\tsphere = Spawn(class'SphereEffect',,, Location);\n\tif (sphere != None)\n\t\tsphere.size = explosionRadius / 32.0;\n\n\t// spawn a mark\n\ts = spawn(class'ScorchMark', Base,, Location-vect(0,0,1)*CollisionHeight, Rotation+rot(16384,0,0));\n\tif (s != None)\n\t{\n\t\ts.DrawScale = FClamp(explosionDamage/30, 0.1, 3.0);\n\t\ts.ReattachDecal();\n\t}\n\n\t// spawn some rocks and flesh fragments\n\tfor (i=0; i<explosionDamage/6; i++)\n\t{\n\t\tif (FRand() < 0.3)\n\t\t\tspawn(class'Rockchip',,,Location);\n\t}\n\n\tHurtRadius(explosionDamage, explosionRadius, 'Exploded', explosionDamage*100, Location);\n}\n\ndefaultproperties\n{\n     HitPoints=10\n     FragType=Class'DeusEx.WoodFragment'\n     ItemName=\"Party Battle Weapon Box!\"\n     bBlockSight=True\n     Skin=Texture'PGAssets.Skins.PartyBox'\n     Mesh=LodMesh'DeusExDeco.CrateBreakableMed'\n     CollisionRadius=34.000000\n     CollisionHeight=24.000000\n     Mass=50.000000\n     Buoyancy=60.000000\n}\n",
            "name": "PartyBox.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "HitPoints=10",
                    "FragType=Class'DeusEx.WoodFragment'",
                    "ItemName=\"Party Battle Weapon Box!\"",
                    "bBlockSight=True",
                    "Skin=Texture'PGAssets.Skins.PartyBox'",
                    "Mesh=LodMesh'DeusExDeco.CrateBreakableMed'",
                    "CollisionRadius=34.000000",
                    "CollisionHeight=24.000000",
                    "Mass=50.000000",
                    "Buoyancy=60.000000"
                ],
                "exec": [],
                "extends": "Containers",
                "functions": {
                    "Destroyed": {
                        "body": "{\n\t// trace down to see if we are sitting on the ground\n\tloc = vect(0,0,0);\n\tloc.Z -= CollisionHeight + 8.0;\n\tloc += Location;\n\n\tif( (Pawn(Base) != None) && (Pawn(Base).CarriedDecoration == self) )\n\t\tPawn(Base).DropDecoration();\n\t\tRandy = Rand(35);\n\t\tif(Randy == 1)\n\t\t{\n\t\t\tContents=class'WeaponBioRifle';\n\t\t}\n\t\tif(Randy == 2)\n\t\t{\n\t\t\tContents=class'WeaponEnergyAssault';\n\t\t}\t\n\t\tif(Randy == 3)\n\t\t{\n\t\t\tContents=class'WeaponLaserAssault';\n\t\t}\t\t\n\t\tif(Randy == 4)\n\t\t{\n\t\t\tContents=class'WeaponNeedler';\n\t\t}\n\t\tif(Randy == 5)\n\t\t{\n\t\t\tContents=class'WeaponNeedler2';\n\t\t}\n\t\tif(Randy == 6)\n\t\t{\n\t\t\tContents=class'WeaponPlasmaAssault';\n\t\t}\t\n\t\tif(Randy == 7)\n\t\t{\n\t\t\tContents=class'WeaponSpitRifle';\n\t\t}\t\n\t\n\t\tif(Randy == 8)\n\t\t{\n\t\t\tContents=class'WeaponDildo';\n\t\t}\n\t\tif(Randy == 9)\n\t\t{\n\t\t\tContents=class'WeaponDragonsClaw';\n\t\t}\t\n\t\tif(Randy == 10)\n\t\t{\n\t\t\tContents=class'WeaponHeavyBeamSword';\n\t\t}\t\t\n\t\tif(Randy == 11)\n\t\t{\n\t\t\tContents=class'WeaponInflatableSword';\n\t\t}\n\t\tif(Randy == 12)\n\t\t{\n\t\t\tContents=class'WeaponPlasmaSword';\n\t\t}\n\t\tif(Randy == 13)\n\t\t{\n\t\t\tContents=class'WeaponThinSword';\n\t\t}\n\t\tif(Randy == 14)\n\t\t{\n\t\t\tContents=class'WeaponBurnRifle';\n\t\t}\t\t\n\t\tif(Randy == 15)\n\t\t{\n\t\t\tContents=class'WeaponMomsKnife';\n\t\t}\n\t\tif(Randy == 16)\n\t\t{\n\t\t\tContents=class'WeaponWPGrenade';\n\t\t}\n\t\tif(Randy == 17)\n\t\t{\n\t\t\tContents=class'WeaponStealthShotgun';\n\t\t}\n\t\tif(Randy == 18)\n\t\t{\n\t\t\tContents=class'MM';\n\t\t}\n\t\tif(Randy == 19)\n\t\t{\n\t\t\tContents=class'WeaponSkullGun';\n\t\t}\n\t\tif(Randy == 20)\n\t\t{\n\t\t\tContents=class'WeaponPhatRifle';\n\t\t}\n\t\tif(Randy == 21)\n\t\t{\n\t\t\tContents=class'WeaponMagnum';\n\t\t}\n\t\tif(Randy == 22)\n\t\t{\n\t\t\tContents=class'WeaponRailgun';\n\t\t}\n\t\tif(Randy == 23)\n\t\t{\n\t\t\tContents=class'WeaponClaymore';\n\t\t}\n\t\tif(Randy == 24)\n\t\t{\n\t\t\tContents=class'WeaponLightshow';\n\t\t}\n\t\tif(Randy == 25)\n\t\t{\n\t\t\tContents=class'WeaponKnifeBomb';\n\t\t}\n\t\tif(Randy == 26)\n\t\t{\n\t\t\tContents=class'WeaponNailgun';\n\t\t}\n\t\tif(Randy == 27)\n\t\t{\n\t\t\tContents=class'WeaponBoxGun';\n\t\t}\n\t\tif(Randy == 28)\n\t\t{\n\t\t\tContents=class'WeaponDePressurizer';\n\t\t}\n\t\tif(Randy >= 29)\n\t\t{\n\t\t\tTrollExplode();\n\t\t}\n\t\ttempClass = Contents;\t\n\n\t\t\tloc = Location+VRand()*CollisionRadius;\n\t\t\tloc.Z = Location.Z;\n\t\t\trot = rot(0,0,0);\n\t\t\trot.Yaw = FRand() * 65535;\n\t\t\tdropped = Spawn(tempClass,,, loc, rot);\n\t\t\tif (dropped != None)\n\t\t\t{\n\t\t\t\tdropped.RemoteRole = ROLE_DumbProxy;\n\t\t\t\tdropped.SetPhysics(PHYS_Falling);\n\t\t\t\tdropped.bCollideWorld = true;\n\t\t\t\tdropped.Velocity = VRand() * 50;\n\t\t\t\tif ( inventory(dropped) != None )\n\t\t\t\t\tinventory(dropped).GotoState('Pickup', 'Dropped');\n\t\t\t}\n}",
                        "locals": [
                            "local actor dropped;",
                            "local class<actor> tempClass;",
                            "local int i;",
                            "local Rotator rot;",
                            "local Vector loc;",
                            "local TrashPaper trash;",
                            "local Rat vermin;",
                            "local int randy, randy2, randy3;"
                        ],
                        "modifiers": [],
                        "name": "Destroyed",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "TrollExplode": {
                        "body": "{\n\n\texplosionDamage = 600;\n\texplosionRadius = 100;\n\n\t// alert NPCs that I'm exploding\n\tAISendEvent('LoudNoise', EAITYPE_Audio, , explosionRadius*16);\n\tPlaySound(Sound'LargeExplosion1', SLOT_None,,, explosionRadius*16);\n\n\t// draw a pretty explosion\n\tlight = Spawn(class'ExplosionLight',,, Location);\n\tif (light != None)\n\t\tlight.size = 4;\n\n\tSpawn(class'ExplosionSmall',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionLarge',,, Location + 2*VRand()*CollisionRadius);\n\n\tsphere = Spawn(class'SphereEffect',,, Location);\n\tif (sphere != None)\n\t\tsphere.size = explosionRadius / 32.0;\n\n\t// spawn a mark\n\ts = spawn(class'ScorchMark', Base,, Location-vect(0,0,1)*CollisionHeight, Rotation+rot(16384,0,0));\n\tif (s != None)\n\t{\n\t\ts.DrawScale = FClamp(explosionDamage/30, 0.1, 3.0);\n\t\ts.ReattachDecal();\n\t}\n\n\t// spawn some rocks and flesh fragments\n\tfor (i=0; i<explosionDamage/6; i++)\n\t{\n\t\tif (FRand() < 0.3)\n\t\t\tspawn(class'Rockchip',,,Location);\n\t}\n\n\tHurtRadius(explosionDamage, explosionRadius, 'Exploded', explosionDamage*100, Location);\n}",
                        "locals": [
                            "local SphereEffect sphere;",
                            "local ScorchMark s;",
                            "local ExplosionLight light;",
                            "local int i;",
                            "local float explosionDamage;",
                            "local float explosionRadius;"
                        ],
                        "modifiers": [],
                        "name": "TrollExplode",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 220,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "Persist.uc": {
            "body": "class Persist extends PGActors;\n\nstruct SavedX\n{\nvar() config class<DeusExDecoration> ClassName;\nvar() config rotator ClassRotation;\nvar() config vector ClassLocation;\n//var() config string ClassPhysics;\n};\nvar() config SavedX ClassesX[250];\n\nfunction Save()\n{\nlocal PSZoneInfo PSZ;\nlocal DeusExDecoration deco;\nlocal int j, c;\n\n\tfor(j=0;j<250;j++)\n\t{\n\t\tClassesX[j].ClassName = None;\n\t}\n\tLog(\"Config cleared of all entries.\",'Persist');\n\t\n\tforeach AllActors(class'PSZoneInfo',PSZ)\n\t{\n\t\tif(PSZ.bEnableSaving)\n\t\t{\n\t\t\tforeach PSZ.ZoneActors(class'DeusExDecoration',deco)\n\t\t\t{\n\t\t\t\tif(!deco.isa('Lightswitch') || !deco.isa('Switch2'))\n\t\t\t\t{\n\t\t\t\t\tfor(j=0;j<250;j++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(ClassesX[j].ClassName == None)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tClassesX[j].ClassName = deco.class;\n\t\t\t\t\t\t\tClassesX[j].ClassRotation = deco.Rotation;\n\t\t\t\t\t\t\tClassesX[j].ClassLocation = deco.Location;\n\t\t\t\t\t\t\t//ClassesX[j].ClassPhysics = deco.Physics;\n\t\t\t\t\t\t\tc++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tSaveConfig();\n\tLog(\"Config entries added, total: \"$c$\".\",'Persist');\n\tBroadcastMessage(\"Config entries added, total: \"$c$\".\");\n}\n\nfunction Load()\n{\nlocal int j, c;\nlocal DeusExDecoration sp;\n\n\t\tfor(j=0;j<250;j++)\n\t\t{\n\t\t\tif(ClassesX[j].ClassName != None)\n\t\t\t{\n\t\t\t\tsp = Spawn(ClassesX[j].ClassName,,,ClassesX[j].ClassLocation);\n\t\t\t\tsp.SetRotation(ClassesX[j].ClassRotation);\n\t\t\t\t//sp.SetPhysics(name(ClassesX[j].ClassPhysics));\n\t\t\t\tc++;\n\t\t\t}\n\t\t}\n\tLog(\"Persisted actors spawned, total: \"$c$\".\",'Persist');\n\tBroadcastMessage(\"Persisted actors spawned, total: \"$c$\".\");\n}\n\nfunction Timer()\n{\nlocal PSZoneInfo PSZ;\nlocal DeusExDecoration deco;\nlocal int j, c;\n\n\tfor(j=0;j<250;j++)\n\t{\n\t\tClassesX[j].ClassName = None;\n\t}\n\tLog(\"Config cleared of all entries.\",'Persist');\n\t\n\tforeach AllActors(class'PSZoneInfo',PSZ)\n\t{\n\t\tif(PSZ.bEnableSaving)\n\t\t{\n\t\t\tforeach PSZ.ZoneActors(class'DeusExDecoration',deco)\n\t\t\t{\n\t\t\t\tif(!deco.isa('Lightswitch') && !deco.isa('Switch2') && !deco.isa('Gem'))\n\t\t\t\t{\n\t\t\t\t\tfor(j=0;j<250;j++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(ClassesX[j].ClassName == None)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tClassesX[j].ClassName = deco.class;\n\t\t\t\t\t\t\tClassesX[j].ClassRotation = deco.Rotation;\n\t\t\t\t\t\t\tClassesX[j].ClassLocation = deco.Location;\n\t\t\t\t\t\t\t//ClassesX[j].ClassPhysics = string(deco.Physics);\n\t\t\t\t\t\t\tc++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tSaveConfig();\n\tLog(\"Config entries added, total: \"$c$\".\",'Persist');\n\tBroadcastMessage(\"Map saved to server. (\"$c$\")\");\n}\n\ndefaultproperties\n{\n}\n",
            "name": "Persist.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "PGActors",
                "functions": {
                    "Load": {
                        "body": "{\n\n\t\tfor(j=0;j<250;j++)\n\t\t{\n\t\t\tif(ClassesX[j].ClassName != None)\n\t\t\t{\n\t\t\t\tsp = Spawn(ClassesX[j].ClassName,,,ClassesX[j].ClassLocation);\n\t\t\t\tsp.SetRotation(ClassesX[j].ClassRotation);\n\t\t\t\t//sp.SetPhysics(name(ClassesX[j].ClassPhysics));\n\t\t\t\tc++;\n\t\t\t}\n\t\t}\n\tLog(\"Persisted actors spawned, total: \"$c$\".\",'Persist');\n\tBroadcastMessage(\"Persisted actors spawned, total: \"$c$\".\");\n}",
                        "locals": [
                            "local int j, c;",
                            "local DeusExDecoration sp;"
                        ],
                        "modifiers": [],
                        "name": "Load",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Save": {
                        "body": "{\n\n\tfor(j=0;j<250;j++)\n\t{\n\t\tClassesX[j].ClassName = None;\n\t}\n\tLog(\"Config cleared of all entries.\",'Persist');\n\t\n\tforeach AllActors(class'PSZoneInfo',PSZ)\n\t{\n\t\tif(PSZ.bEnableSaving)\n\t\t{\n\t\t\tforeach PSZ.ZoneActors(class'DeusExDecoration',deco)\n\t\t\t{\n\t\t\t\tif(!deco.isa('Lightswitch') || !deco.isa('Switch2'))\n\t\t\t\t{\n\t\t\t\t\tfor(j=0;j<250;j++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(ClassesX[j].ClassName == None)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tClassesX[j].ClassName = deco.class;\n\t\t\t\t\t\t\tClassesX[j].ClassRotation = deco.Rotation;\n\t\t\t\t\t\t\tClassesX[j].ClassLocation = deco.Location;\n\t\t\t\t\t\t\t//ClassesX[j].ClassPhysics = deco.Physics;\n\t\t\t\t\t\t\tc++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tSaveConfig();\n\tLog(\"Config entries added, total: \"$c$\".\",'Persist');\n\tBroadcastMessage(\"Config entries added, total: \"$c$\".\");\n}",
                        "locals": [
                            "local PSZoneInfo PSZ;",
                            "local DeusExDecoration deco;",
                            "local int j, c;"
                        ],
                        "modifiers": [],
                        "name": "Save",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\n\tfor(j=0;j<250;j++)\n\t{\n\t\tClassesX[j].ClassName = None;\n\t}\n\tLog(\"Config cleared of all entries.\",'Persist');\n\t\n\tforeach AllActors(class'PSZoneInfo',PSZ)\n\t{\n\t\tif(PSZ.bEnableSaving)\n\t\t{\n\t\t\tforeach PSZ.ZoneActors(class'DeusExDecoration',deco)\n\t\t\t{\n\t\t\t\tif(!deco.isa('Lightswitch') && !deco.isa('Switch2') && !deco.isa('Gem'))\n\t\t\t\t{\n\t\t\t\t\tfor(j=0;j<250;j++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(ClassesX[j].ClassName == None)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tClassesX[j].ClassName = deco.class;\n\t\t\t\t\t\t\tClassesX[j].ClassRotation = deco.Rotation;\n\t\t\t\t\t\t\tClassesX[j].ClassLocation = deco.Location;\n\t\t\t\t\t\t\t//ClassesX[j].ClassPhysics = string(deco.Physics);\n\t\t\t\t\t\t\tc++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tSaveConfig();\n\tLog(\"Config entries added, total: \"$c$\".\",'Persist');\n\tBroadcastMessage(\"Map saved to server. (\"$c$\")\");\n}",
                        "locals": [
                            "local PSZoneInfo PSZ;",
                            "local DeusExDecoration deco;",
                            "local int j, c;"
                        ],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 114,
                "replication": "",
                "states": [],
                "variables": [
                    "var() config class<DeusExDecoration> ClassName;",
                    "var() config rotator ClassRotation;",
                    "var() config vector ClassLocation;",
                    "var() config SavedX ClassesX[250];"
                ]
            }
        },
        "PlasmaSword.uc": {
            "body": "//=============================================\n// PlasmaSword\n//=============================================\nClass PlasmaSword extends WeaponNanoSword;\n\n#exec OBJ LOAD FILE=\"..\\Textures\\Effects.utx\"\n\nvar Name WeaponDamageType;\n\nsimulated function ProcessTraceHit(Actor Other, Vector HitLocation, Vector HitNormal, Vector X, Vector Y, Vector Z)\n{\n\tlocal float        mult;\n\tlocal name         damageType;\n\tlocal DeusExPlayer dxPlayer;\n\n\tif (Other != None)\n\t{\n\t\t// AugCombat increases our damage if hand to hand\n\t\tmult = 1.0;\n\t\tif (bHandToHand && (DeusExPlayer(Owner) != None))\n\t\t{\n\t\t\tmult = DeusExPlayer(Owner).AugmentationSystem.GetAugLevelValue(class'AugCombat');\n\t\t\tif (mult == -1.0)\n\t\t\t\tmult = 1.0;\n\t\t}\n\n\t\t// skill also affects our damage\n\t\t// GetWeaponSkill returns 0.0 to -0.7 (max skill/aug)\n\t\tmult += -2.0 * GetWeaponSkill();\n\n\t\t// Determine damage type\n\t\tdamageType = WeaponDamageType;\n\n\t\tif (Other != None)\n\t\t{\n\t\t\tif (Other.bOwned)\n\t\t\t{\n\t\t\t\tdxPlayer = DeusExPlayer(Owner);\n\t\t\t\tif (dxPlayer != None)\n\t\t\t\t\tdxPlayer.AISendEvent('Futz', EAITYPE_Visual);\n\t\t\t}\n\t\t}\n\t\tif ((Other == Level) || (Other.IsA('Mover')))\n\t\t{\n\t\t\tif ( Role == ROLE_Authority )\n\t\t\t\tOther.TakeDamage(HitDamage * mult, Pawn(Owner), HitLocation, 1000.0*X, damageType);\n\n\t\t\tSelectiveSpawnEffects( HitLocation, HitNormal, Other, HitDamage * mult);\n\t\t}\n\t\telse if ((Other != self) && (Other != Owner))\n\t\t{\n\t\t\tif ( Role == ROLE_Authority )\n\t\t\t\tOther.TakeDamage(HitDamage * mult, Pawn(Owner), HitLocation, 1000.0*X, damageType);\n\t\t\tif (bHandToHand)\n\t\t\t\tSelectiveSpawnEffects( HitLocation, HitNormal, Other, HitDamage * mult);\n\n\t\t\tif (bPenetrating && Other.IsA('Pawn') && !Other.IsA('Robot'))\n\t\t\t\tSpawnBlood(HitLocation, HitNormal);\n\t\t}\n\t}\n   if (DeusExMPGame(Level.Game) != None)\n   {\n      if (DeusExPlayer(Other) != None)\n         DeusExMPGame(Level.Game).TrackWeapon(self,HitDamage * mult);\n      else\n         DeusExMPGame(Level.Game).TrackWeapon(self,0);\n   }\n}\n\nstate DownWeapon\n{\n\tfunction BeginState()\n\t{\n\t\tSuper.BeginState();\n\t\tLightType = LT_None;\n\t\tMultiSkins[1]=FireTexture'Effects.Fire.OneFlame_G';\n\t\tMultiSkins[2]=FireTexture'Effects.Fire.OneFlame_G';\n\t\tMultiSkins[3]=FireTexture'Effects.Fire.OneFlame_G';\n\t\tMultiSkins[4]=FireTexture'Effects.Smoke.SmokePuff1';\n\t\tMultiSkins[5]=FireTexture'Effects.Fire.OneFlame_G';\n\t\tMultiSkins[6]=None;\n\t\tMultiSkins[7]=None;\n\t}\n}\n\nstate Idle\n{\n\tfunction BeginState()\n\t{\n\t\tSuper.BeginState();\n\t\tLightType = LT_Steady;\n\t\tMultiSkins[1]=None;\n\t\tMultiSkins[2]=FireTexture'Effects.Fire.OneFlame_G';\n\t\tMultiSkins[3]=None;\n\t\tMultiSkins[4]=FireTexture'Effects.Fire.OneFlame_G';\n\t\tMultiSkins[5]=FireTexture'Effects.Smoke.SmokePuff1';\n\t\tMultiSkins[6]=FireTexture'Effects.Fire.OneFlame_G';\n\t\tMultiSkins[7]=FireTexture'Effects.Fire.OneFlame_G';\n\t}\n}\n\nauto state Pickup\n{\n\tfunction EndState()\n\t{\n\t\tSuper.EndState();\n\t\tLightType = LT_None;\n\t\tMultiSkins[1]=FireTexture'Effects.Fire.OneFlame_G';\n\t\tMultiSkins[2]=FireTexture'Effects.Fire.OneFlame_G';\n\t\tMultiSkins[3]=FireTexture'Effects.Fire.OneFlame_G';\n\t\tMultiSkins[4]=FireTexture'Effects.Smoke.SmokePuff1';\n\t\tMultiSkins[5]=FireTexture'Effects.Fire.OneFlame_G';\n\t\tMultiSkins[6]=None;\n\t\tMultiSkins[7]=None;\n\t}\n}\n\ndefaultproperties\n{\n     WeaponDamageType=exploded\n     InventoryGroup=111\n     ItemName=\"Plasma Sword\"\n     Description=\"A strange, ancient triad weapon. You would be hard pressed finding out anything else about it.\"\n     beltDescription=\"PLASMA\"\n     MultiSkins(1)=FireTexture'Effects.Fire.OneFlame_G'\n     MultiSkins(2)=FireTexture'Effects.Fire.OneFlame_G'\n     MultiSkins(3)=FireTexture'Effects.Fire.OneFlame_G'\n     MultiSkins(4)=FireTexture'Effects.Smoke.SmokePuff1'\n     MultiSkins(5)=FireTexture'Effects.Fire.OneFlame_G'\n     LightHue=128\n}\n",
            "name": "PlasmaSword.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "WeaponDamageType=exploded",
                    "InventoryGroup=111",
                    "ItemName=\"Plasma Sword\"",
                    "Description=\"A strange, ancient triad weapon. You would be hard pressed finding out anything else about it.\"",
                    "beltDescription=\"PLASMA\"",
                    "MultiSkins(1)=FireTexture'Effects.Fire.OneFlame_G'",
                    "MultiSkins(2)=FireTexture'Effects.Fire.OneFlame_G'",
                    "MultiSkins(3)=FireTexture'Effects.Fire.OneFlame_G'",
                    "MultiSkins(4)=FireTexture'Effects.Smoke.SmokePuff1'",
                    "MultiSkins(5)=FireTexture'Effects.Fire.OneFlame_G'",
                    "LightHue=128"
                ],
                "exec": [
                    "#exec OBJ LOAD FILE=\"..\\Textures\\Effects.utx\""
                ],
                "extends": "WeaponNanoSword",
                "functions": {
                    "BeginState": {
                        "body": "{\n\t\tSuper.BeginState();\n\t\tLightType = LT_Steady;\n\t\tMultiSkins[1]=None;\n\t\tMultiSkins[2]=FireTexture'Effects.Fire.OneFlame_G';\n\t\tMultiSkins[3]=None;\n\t\tMultiSkins[4]=FireTexture'Effects.Fire.OneFlame_G';\n\t\tMultiSkins[5]=FireTexture'Effects.Smoke.SmokePuff1';\n\t\tMultiSkins[6]=FireTexture'Effects.Fire.OneFlame_G';\n\t\tMultiSkins[7]=FireTexture'Effects.Fire.OneFlame_G';\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "BeginState",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "EndState": {
                        "body": "{\n\t\tSuper.EndState();\n\t\tLightType = LT_None;\n\t\tMultiSkins[1]=FireTexture'Effects.Fire.OneFlame_G';\n\t\tMultiSkins[2]=FireTexture'Effects.Fire.OneFlame_G';\n\t\tMultiSkins[3]=FireTexture'Effects.Fire.OneFlame_G';\n\t\tMultiSkins[4]=FireTexture'Effects.Smoke.SmokePuff1';\n\t\tMultiSkins[5]=FireTexture'Effects.Fire.OneFlame_G';\n\t\tMultiSkins[6]=None;\n\t\tMultiSkins[7]=None;\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "EndState",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ProcessTraceHit": {
                        "body": "{\n\n\tif (Other != None)\n\t{\n\t\t// AugCombat increases our damage if hand to hand\n\t\tmult = 1.0;\n\t\tif (bHandToHand && (DeusExPlayer(Owner) != None))\n\t\t{\n\t\t\tmult = DeusExPlayer(Owner).AugmentationSystem.GetAugLevelValue(class'AugCombat');\n\t\t\tif (mult == -1.0)\n\t\t\t\tmult = 1.0;\n\t\t}\n\n\t\t// skill also affects our damage\n\t\t// GetWeaponSkill returns 0.0 to -0.7 (max skill/aug)\n\t\tmult += -2.0 * GetWeaponSkill();\n\n\t\t// Determine damage type\n\t\tdamageType = WeaponDamageType;\n\n\t\tif (Other != None)\n\t\t{\n\t\t\tif (Other.bOwned)\n\t\t\t{\n\t\t\t\tdxPlayer = DeusExPlayer(Owner);\n\t\t\t\tif (dxPlayer != None)\n\t\t\t\t\tdxPlayer.AISendEvent('Futz', EAITYPE_Visual);\n\t\t\t}\n\t\t}\n\t\tif ((Other == Level) || (Other.IsA('Mover')))\n\t\t{\n\t\t\tif ( Role == ROLE_Authority )\n\t\t\t\tOther.TakeDamage(HitDamage * mult, Pawn(Owner), HitLocation, 1000.0*X, damageType);\n\n\t\t\tSelectiveSpawnEffects( HitLocation, HitNormal, Other, HitDamage * mult);\n\t\t}\n\t\telse if ((Other != self) && (Other != Owner))\n\t\t{\n\t\t\tif ( Role == ROLE_Authority )\n\t\t\t\tOther.TakeDamage(HitDamage * mult, Pawn(Owner), HitLocation, 1000.0*X, damageType);\n\t\t\tif (bHandToHand)\n\t\t\t\tSelectiveSpawnEffects( HitLocation, HitNormal, Other, HitDamage * mult);\n\n\t\t\tif (bPenetrating && Other.IsA('Pawn') && !Other.IsA('Robot'))\n\t\t\t\tSpawnBlood(HitLocation, HitNormal);\n\t\t}\n\t}\n   if (DeusExMPGame(Level.Game) != None)\n   {\n      if (DeusExPlayer(Other) != None)\n         DeusExMPGame(Level.Game).TrackWeapon(self,HitDamage * mult);\n      else\n         DeusExMPGame(Level.Game).TrackWeapon(self,0);\n   }\n}",
                        "locals": [
                            "local float        mult;",
                            "local name         damageType;",
                            "local DeusExPlayer dxPlayer;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "ProcessTraceHit",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Other"
                            ],
                            [
                                "Vector",
                                "HitLocation"
                            ],
                            [
                                "Vector",
                                "HitNormal"
                            ],
                            [
                                "Vector",
                                "X"
                            ],
                            [
                                "Vector",
                                "Y"
                            ],
                            [
                                "Vector",
                                "Z"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 132,
                "replication": "",
                "states": [],
                "variables": [
                    "var Name WeaponDamageType;"
                ]
            }
        },
        "PlaySoundSwitch.uc": {
            "body": "//=============================================================================\n// PlaySound\n//=============================================================================\nclass PlaySoundswitch extends Switch2;\n\nvar bool bOn;\nvar() bool bPlayToAll;\nvar() sound sSound;\nvar() float sPitch;\n\nfunction Frob(Actor Frobber, Inventory frobWith)\n{\n\tlocal DeusExPlayer DXP;\n\tSuper.Frob(Frobber, frobWith);\n\t\n\tif (bOn)\n\t{\n\t\tif(bPlayToAll)\n\t\t{\n\t\t\tforeach Allactors(class'DeusexPlayer',DXP)\n\t\t\t\tDXP.PlaySound(sSound,SLOT_None);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tPlaySound(sSound,SLOT_None);\n\t\t}\n\t\tPlayAnim('Off');\n\t}\n\telse\n\t{\n\t\tif(bPlayToAll)\n\t\t{\n\t\t\tforeach Allactors(class'DeusexPlayer',DXP)\n\t\t\t\tDXP.PlaySound(sSound,SLOT_None);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tPlaySound(sSound,SLOT_None);\n\t\t}\n\t\tPlayAnim('On');\n\t}\n\n\tbOn = !bOn;\n}\n\ndefaultproperties\n{\n     ItemName=\"Sound Switch\"\n}\n",
            "name": "PlaySoundSwitch.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "ItemName=\"Sound Switch\""
                ],
                "exec": [],
                "extends": "Switch2",
                "functions": {
                    "Frob": {
                        "body": "{\n\tSuper.Frob(Frobber, frobWith);\n\t\n\tif (bOn)\n\t{\n\t\tif(bPlayToAll)\n\t\t{\n\t\t\tforeach Allactors(class'DeusexPlayer',DXP)\n\t\t\t\tDXP.PlaySound(sSound,SLOT_None);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tPlaySound(sSound,SLOT_None);\n\t\t}\n\t\tPlayAnim('Off');\n\t}\n\telse\n\t{\n\t\tif(bPlayToAll)\n\t\t{\n\t\t\tforeach Allactors(class'DeusexPlayer',DXP)\n\t\t\t\tDXP.PlaySound(sSound,SLOT_None);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tPlaySound(sSound,SLOT_None);\n\t\t}\n\t\tPlayAnim('On');\n\t}\n\n\tbOn = !bOn;\n}",
                        "locals": [
                            "local DeusExPlayer DXP;"
                        ],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 50,
                "replication": "",
                "states": [],
                "variables": [
                    "var bool bOn;",
                    "var() bool bPlayToAll;",
                    "var() sound sSound;",
                    "var() float sPitch;"
                ]
            }
        },
        "PlayerResetter.uc": {
            "body": "class PlayerResetter extends PGActors;\n\nvar DeusExPlayer Target;\nvar string myToDo;\n\nfunction Timer()\n{\n\tif(myToDo == \"unfreeze\")\n\t{\n\t\tTarget.bMovable=True;\n\t\tTarget.bmeshEnviroMap=False;\n\t\tTarget.Texture = Target.Default.Texture;\n\t\tTarget.bBehindView=False;\n\t}\n\tif(myToDo == \"unspeed\")\n\t{\n\t\tHuman(Target).mpgroundspeed = Human(target).default.mpgroundspeed;\n\t}\n}\n\ndefaultproperties\n{\n}\n",
            "name": "PlayerResetter.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "PGActors",
                "functions": {
                    "Timer": {
                        "body": "{\n\tif(myToDo == \"unfreeze\")\n\t{\n\t\tTarget.bMovable=True;\n\t\tTarget.bmeshEnviroMap=False;\n\t\tTarget.Texture = Target.Default.Texture;\n\t\tTarget.bBehindView=False;\n\t}\n\tif(myToDo == \"unspeed\")\n\t{\n\t\tHuman(Target).mpgroundspeed = Human(target).default.mpgroundspeed;\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 24,
                "replication": "",
                "states": [],
                "variables": [
                    "var DeusExPlayer Target;",
                    "var string myToDo;"
                ]
            }
        },
        "PlaygroundContainers.uc": {
            "body": "//=============================================================================\n// SmallBox.\n//=============================================================================\nclass PlaygroundContainers extends Containers;\n\nvar string CreatedBy;\n/*\nfunction Tick(float CleanupTimer)\n{\nlocal Playground P;\nlocal DeusExPlayer DXP;\nlocal PlaygroundContainers PC;\nlocal bool bQueDelete;\n\n\tSuper.Tick (CleanupTimer);\n\tif(p == None)\n\tspawn(class'Playground');\n}\n*/\nfunction Destroy2(string Destroyer)\n{\n\tif(Destroyer ~= CreatedBy)\n\tDestroy();\n}\n\ndefaultproperties\n{\n}\n",
            "name": "PlaygroundContainers.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "Containers",
                "functions": {
                    "Destroy2": {
                        "body": "{\n\tif(Destroyer ~= CreatedBy)\n\tDestroy();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Destroy2",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "Destroyer"
                            ]
                        ],
                        "return": ""
                    },
                    "Tick": {
                        "body": "{\n\n\tSuper.Tick (CleanupTimer);\n\tif(p == None)\n\tspawn(class'Playground');\n}",
                        "locals": [
                            "local Playground P;",
                            "local DeusExPlayer DXP;",
                            "local PlaygroundContainers PC;",
                            "local bool bQueDelete;"
                        ],
                        "modifiers": [],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "CleanupTimer"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 29,
                "replication": "",
                "states": [],
                "variables": [
                    "var string CreatedBy;"
                ]
            }
        },
        "PoisonEstus.uc": {
            "body": "//=============================================================================\n// SuperTool.\n//=============================================================================\nclass PoisonEstus extends DeusExPickup;\n\nvar bool bEstusArmed;\n\nvar float explosionDamage;\nvar float explosionRadius;\n\nfunction DropFrom(vector StartLocation)\n{\n\tbEstusArmed=True;\n\tsuper.DropFrom(StartLocation);\n}\n\nfunction BecomePickup()\n{\n\tif(Owner != None)\n\t\tbEstusArmed=True;\n\tsuper.BecomePickup();\n}\n\nfunction BecomeItem()\n{\n\tbEstusArmed=False;\n\tsuper.BecomeItem();\n}\n\nfunction estusExplode()\n{\n\tlocal SphereEffect sphere;\n\tlocal ScorchMark s;\n\tlocal ExplosionLight light;\n\tlocal int i;\n\n\t// alert NPCs that I'm exploding\n\tAISendEvent('LoudNoise', EAITYPE_Audio, , explosionRadius*16);\n\tPlaySound(Sound'LargeExplosion1', SLOT_None,,, explosionRadius*16);\n\n\t// draw a pretty explosion\n\tlight = Spawn(class'ExplosionLight',,, Location);\n\tif (light != None)\n\t\tlight.size = 4;\n\n\tSpawn(class'ExplosionSmall',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionLarge',,, Location + 2*VRand()*CollisionRadius);\n\n\tsphere = Spawn(class'SphereEffect',,, Location);\n\tif (sphere != None)\n\t\tsphere.size = explosionRadius / 32.0;\n\n\t// spawn a mark\n\ts = spawn(class'ScorchMark', Base,, Location-vect(0,0,1)*CollisionHeight, Rotation+rot(16384,0,0));\n\tif (s != None)\n\t{\n\t\ts.DrawScale = FClamp(explosionDamage/30, 0.1, 3.0);\n\t\ts.ReattachDecal();\n\t}\n\n\t// spawn some rocks and flesh fragments\n\tfor (i=0; i<explosionDamage/6; i++)\n\t{\n\t\tif (FRand() < 0.3)\n\t\t\tspawn(class'Rockchip',,,Location);\n\t}\n\n\tHurtRadius(explosionDamage, explosionRadius, 'Exploded', explosionDamage*100, Location);\n\tSpawnTearGas(Location);\n}\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t\tMaxCopies = 1;\n}\n\nstate Activated\n{\n\tfunction Activate()\n\t{\n\t\t// can't turn it off\n\t}\n\n\tfunction BeginState()\n\t{\n\t\t\n\t\tGotoState('DeActivated');\n\t}\nBegin:\n}\n\nfunction EstusUse(actor p)\n{\n\tp.TakeDamage(30, Pawn(Owner), vect(0,0,0),vect(0,0,1),'Poison');\n\tSpawnTearGas(p.location);\n}\n\nfunction Destroyed() \n{\n\tlocal ProjectileGenerator gen;\n\t\n\t\n\tif ( !bEstusArmed )\n\t\treturn;\n\t\t\n\tEstusExplode();\n\tgen = Spawn(class'ProjectileGenerator',,, Location);\n\tif (gen != None)\n\t{\n     //gen.RemoteRole = ROLE_None;\n\t\t//gen.particleDrawScale = 1.0;\n\t\tgen.checkTime = 0.05;\n\t\tgen.frequency = 1.0;\n\t\tgen.ejectSpeed = 200.0;\n\t\t//gen.bGravity = True;\n\t\tgen.bRandomEject = True;\n\t\tgen.ProjectileClass=class'Fireball';\n\t\tgen.LifeSpan = 2.0;\n\t}\n\tsuper.Destroyed();\n}\n\n\nfunction SpawnTearGas(vector target)\n{\n\tlocal Vector loc;\n\tlocal TearGas gas;\n\tlocal int i;\n\n\tif ( Role < ROLE_Authority )\n\t\treturn;\n\n\tfor (i=0; i<512/36; i++)\n\t{\n\t\tif (FRand() < 0.9)\n\t\t{\n\t\t\tloc = target;\n\t\t\tloc.X += FRand() * 512 - 512 * 0.5;\n\t\t\tloc.Y += FRand() * 512 - 512 * 0.5;\n\t\t\tloc.Z += 32;\n\t\t\tgas = spawn(class'TearGas', None,, loc);\n\t\t\tif (gas != None)\n\t\t\t{\n\t\t\t\tgas.Velocity = vect(0,0,0);\n\t\t\t\tgas.Acceleration = vect(0,0,0);\n\t\t\t\tgas.DrawScale = FRand() * 0.5 + 2.0;\n\t\t\t\tgas.LifeSpan = FRand() * 10 + 30;\n\t\t\t\tif ( Level.NetMode != NM_Standalone )\n\t\t\t\t\tgas.bFloating = False;\n\t\t\t\telse\n\t\t\t\t\tgas.bFloating = True;\n\t\t\t\tgas.Instigator = Pawn(Owner);\n\t\t\t}\n\t\t}\n\t}\n}\n\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return (BeltSpot == 9);\n}\n\ndefaultproperties\n{\n     explosionDamage=100.000000\n     explosionRadius=100.000000\n     bBreakable=True\n     maxCopies=1\n     bActivatable=True\n     ItemName=\"Poisoned Estus flask\"\n     PlayerViewOffset=(X=16.000000,Y=8.000000,Z=-16.000000)\n     PlayerViewMesh=LodMesh'DeusExDeco.Flask'\n     PickupViewMesh=LodMesh'DeusExDeco.Flask'\n     ThirdPersonMesh=LodMesh'DeusExDeco.Flask'\n     LandSound=Sound'DeusExSounds.Generic.GlassHit1'\n     Icon=Texture'PGAssets.Icons.BeltIconEstus'\n     M_Activated=\"\"\n     largeIconWidth=18\n     largeIconHeight=44\n     Description=\"Estus magic potion of healing\"\n     beltDescription=\"POISONESTUS\"\n     Texture=Texture'DeusExDeco.Skins.AlarmLightTex9'\n     Mesh=LodMesh'DeusExDeco.Flask'\n     AmbientGlow=20\n     MultiSkins(0)=Texture'DeusExDeco.Skins.AlarmLightTex9'\n     MultiSkins(1)=Texture'DeusExDeco.Skins.AlarmLightTex9'\n     MultiSkins(2)=Texture'DeusExDeco.Skins.AlarmLightTex9'\n     MultiSkins(3)=Texture'DeusExDeco.Skins.AlarmLightTex9'\n     MultiSkins(4)=Texture'DeusExDeco.Skins.AlarmLightTex9'\n     MultiSkins(5)=Texture'DeusExDeco.Skins.AlarmLightTex9'\n     MultiSkins(6)=Texture'DeusExDeco.Skins.AlarmLightTex9'\n     MultiSkins(7)=Texture'DeusExDeco.Skins.AlarmLightTex9'\n     SoundVolume=64\n     CollisionRadius=4.200000\n     CollisionHeight=7.450000\n     LightBrightness=50\n     LightSaturation=20\n     LightRadius=5\n     Mass=10.000000\n     Buoyancy=8.000000\n}\n",
            "name": "PoisonEstus.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "explosionDamage=100.000000",
                    "explosionRadius=100.000000",
                    "bBreakable=True",
                    "maxCopies=1",
                    "bActivatable=True",
                    "ItemName=\"Poisoned Estus flask\"",
                    "PlayerViewOffset=(X=16.000000,Y=8.000000,Z=-16.000000)",
                    "PlayerViewMesh=LodMesh'DeusExDeco.Flask'",
                    "PickupViewMesh=LodMesh'DeusExDeco.Flask'",
                    "ThirdPersonMesh=LodMesh'DeusExDeco.Flask'",
                    "LandSound=Sound'DeusExSounds.Generic.GlassHit1'",
                    "Icon=Texture'PGAssets.Icons.BeltIconEstus'",
                    "M_Activated=\"\"",
                    "largeIconWidth=18",
                    "largeIconHeight=44",
                    "Description=\"Estus magic potion of healing\"",
                    "beltDescription=\"POISONESTUS\"",
                    "Texture=Texture'DeusExDeco.Skins.AlarmLightTex9'",
                    "Mesh=LodMesh'DeusExDeco.Flask'",
                    "AmbientGlow=20",
                    "MultiSkins(0)=Texture'DeusExDeco.Skins.AlarmLightTex9'",
                    "MultiSkins(1)=Texture'DeusExDeco.Skins.AlarmLightTex9'",
                    "MultiSkins(2)=Texture'DeusExDeco.Skins.AlarmLightTex9'",
                    "MultiSkins(3)=Texture'DeusExDeco.Skins.AlarmLightTex9'",
                    "MultiSkins(4)=Texture'DeusExDeco.Skins.AlarmLightTex9'",
                    "MultiSkins(5)=Texture'DeusExDeco.Skins.AlarmLightTex9'",
                    "MultiSkins(6)=Texture'DeusExDeco.Skins.AlarmLightTex9'",
                    "MultiSkins(7)=Texture'DeusExDeco.Skins.AlarmLightTex9'",
                    "SoundVolume=64",
                    "CollisionRadius=4.200000",
                    "CollisionHeight=7.450000",
                    "LightBrightness=50",
                    "LightSaturation=20",
                    "LightRadius=5",
                    "Mass=10.000000",
                    "Buoyancy=8.000000"
                ],
                "exec": [],
                "extends": "DeusExPickup",
                "functions": {
                    "Activate": {
                        "body": "{\n\t\t// can't turn it off\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Activate",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "BecomeItem": {
                        "body": "{\n\tbEstusArmed=False;\n\tsuper.BecomeItem();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "BecomeItem",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "BecomePickup": {
                        "body": "{\n\tif(Owner != None)\n\t\tbEstusArmed=True;\n\tsuper.BecomePickup();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "BecomePickup",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "BeginState": {
                        "body": "{\n\t\t\n\t\tGotoState('DeActivated');\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "BeginState",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Destroyed": {
                        "body": "{\n\t\n\t\n\tif ( !bEstusArmed )\n\t\treturn;\n\t\t\n\tEstusExplode();\n\tgen = Spawn(class'ProjectileGenerator',,, Location);\n\tif (gen != None)\n\t{\n     //gen.RemoteRole = ROLE_None;\n\t\t//gen.particleDrawScale = 1.0;\n\t\tgen.checkTime = 0.05;\n\t\tgen.frequency = 1.0;\n\t\tgen.ejectSpeed = 200.0;\n\t\t//gen.bGravity = True;\n\t\tgen.bRandomEject = True;\n\t\tgen.ProjectileClass=class'Fireball';\n\t\tgen.LifeSpan = 2.0;\n\t}\n\tsuper.Destroyed();\n}",
                        "locals": [
                            "local ProjectileGenerator gen;"
                        ],
                        "modifiers": [],
                        "name": "Destroyed",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "DropFrom": {
                        "body": "{\n\tbEstusArmed=True;\n\tsuper.DropFrom(StartLocation);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "DropFrom",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "StartLocation"
                            ]
                        ],
                        "return": ""
                    },
                    "EstusUse": {
                        "body": "{\n\tp.TakeDamage(30, Pawn(Owner), vect(0,0,0),vect(0,0,1),'Poison');\n\tSpawnTearGas(p.location);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "EstusUse",
                        "native": false,
                        "param": [
                            [
                                "actor",
                                "p"
                            ]
                        ],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t\tMaxCopies = 1;\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "SpawnTearGas": {
                        "body": "{\n\n\tif ( Role < ROLE_Authority )\n\t\treturn;\n\n\tfor (i=0; i<512/36; i++)\n\t{\n\t\tif (FRand() < 0.9)\n\t\t{\n\t\t\tloc = target;\n\t\t\tloc.X += FRand() * 512 - 512 * 0.5;\n\t\t\tloc.Y += FRand() * 512 - 512 * 0.5;\n\t\t\tloc.Z += 32;\n\t\t\tgas = spawn(class'TearGas', None,, loc);\n\t\t\tif (gas != None)\n\t\t\t{\n\t\t\t\tgas.Velocity = vect(0,0,0);\n\t\t\t\tgas.Acceleration = vect(0,0,0);\n\t\t\t\tgas.DrawScale = FRand() * 0.5 + 2.0;\n\t\t\t\tgas.LifeSpan = FRand() * 10 + 30;\n\t\t\t\tif ( Level.NetMode != NM_Standalone )\n\t\t\t\t\tgas.bFloating = False;\n\t\t\t\telse\n\t\t\t\t\tgas.bFloating = True;\n\t\t\t\tgas.Instigator = Pawn(Owner);\n\t\t\t}\n\t\t}\n\t}\n}",
                        "locals": [
                            "local Vector loc;",
                            "local TearGas gas;",
                            "local int i;"
                        ],
                        "modifiers": [],
                        "name": "SpawnTearGas",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "target"
                            ]
                        ],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return (BeltSpot == 9);\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    },
                    "estusExplode": {
                        "body": "{\n\n\t// alert NPCs that I'm exploding\n\tAISendEvent('LoudNoise', EAITYPE_Audio, , explosionRadius*16);\n\tPlaySound(Sound'LargeExplosion1', SLOT_None,,, explosionRadius*16);\n\n\t// draw a pretty explosion\n\tlight = Spawn(class'ExplosionLight',,, Location);\n\tif (light != None)\n\t\tlight.size = 4;\n\n\tSpawn(class'ExplosionSmall',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionLarge',,, Location + 2*VRand()*CollisionRadius);\n\n\tsphere = Spawn(class'SphereEffect',,, Location);\n\tif (sphere != None)\n\t\tsphere.size = explosionRadius / 32.0;\n\n\t// spawn a mark\n\ts = spawn(class'ScorchMark', Base,, Location-vect(0,0,1)*CollisionHeight, Rotation+rot(16384,0,0));\n\tif (s != None)\n\t{\n\t\ts.DrawScale = FClamp(explosionDamage/30, 0.1, 3.0);\n\t\ts.ReattachDecal();\n\t}\n\n\t// spawn some rocks and flesh fragments\n\tfor (i=0; i<explosionDamage/6; i++)\n\t{\n\t\tif (FRand() < 0.3)\n\t\t\tspawn(class'Rockchip',,,Location);\n\t}\n\n\tHurtRadius(explosionDamage, explosionRadius, 'Exploded', explosionDamage*100, Location);\n\tSpawnTearGas(Location);\n}",
                        "locals": [
                            "local SphereEffect sphere;",
                            "local ScorchMark s;",
                            "local ExplosionLight light;",
                            "local int i;"
                        ],
                        "modifiers": [],
                        "name": "estusExplode",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 209,
                "replication": "",
                "states": [],
                "variables": [
                    "var bool bEstusArmed;",
                    "var float explosionDamage;",
                    "var float explosionRadius;"
                ]
            }
        },
        "PoisonKnife.uc": {
            "body": "class PoisonKnife extends Shuriken;\n\ndefaultproperties\n{\n     DamageType=Poison\n     spawnWeaponClass=Class'PartyStuff.WeaponPoisonKnives'\n     ItemName=\"Poisoned Throwing Knife\"\n     Damage=10.000000\n}\n",
            "name": "PoisonKnife.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "DamageType=Poison",
                    "spawnWeaponClass=Class'PartyStuff.WeaponPoisonKnives'",
                    "ItemName=\"Poisoned Throwing Knife\"",
                    "Damage=10.000000"
                ],
                "exec": [],
                "extends": "Shuriken",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 10,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "PortableCarpet.uc": {
            "body": "//=============================================================================\n// It's a tarp.\n//=============================================================================\nclass PortableCarpet extends ChargedPickup;\n\n#exec obj load file=..\\Textures\\HK_Interior.utx package=HK_Interior\n\n// ----------------------------------------------------------------------\n// ChargedPickupBegin()\n// ----------------------------------------------------------------------\n\nfunction ChargedPickupBegin(DeusExPlayer Player)\n{\n //  local FlyingTarp CD;\n   local Vector loc,X,Y,Z;\n      \n  Spawn(Class'FlyingCarpet',,,Player.Location + (Player.CollisionRadius+Default.CollisionRadius+30) * Vector(Player.ViewRotation) + vect(0,0,1) * 30 );\n \n          \n\n\tSuper.ChargedPickupBegin(Player);\n\t\n}\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) || (BeltSpot == 0) );\n}\n\nfunction UsedUp()\n{\n\tlocal DeusExPlayer Player;\n\n\tif ( Pawn(Owner) != None )\n\t{\n\t\tbActivatable = false;\n\t\t\n\t}\n\tPlayer = DeusExPlayer(Owner);\n\n\tif (Player != None)\n\t{\n\t\tif (Player.inHand == Self)\n\t\t\tChargedPickupEnd(Player);\n\t}\n\n\tDestroy();\n}\n\ndefaultproperties\n{\n     ActivateSound=Sound'DeusExSounds.Augmentation.CloakUp'\n     DeActivateSound=None\n     ChargeRemainingLabel=\"Carpet readiness:\"\n     ItemName=\"Portable Carpet\"\n     PlayerViewOffset=(X=20.000000,Z=-12.000000)\n     PlayerViewMesh=LodMesh'DeusExDeco.HKMarketTarp'\n     PlayerViewScale=0.200000\n     PickupViewMesh=LodMesh'DeusExDeco.HKMarketTarp'\n     ThirdPersonMesh=LodMesh'DeusExDeco.HKMarketTarp'\n     ThirdPersonScale=0.250000\n     Charge=8\n     LandSound=Sound'DeusExSounds.Generic.DropLargeWeapon'\n     Icon=Texture'DeusExUI.Icons.BeltIconArmorAdaptive'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconArmorAdaptive'\n     largeIconWidth=35\n     largeIconHeight=49\n     Description=\"Its a tarp\"\n     beltDescription=\"CARP\"\n     Texture=Texture'HK_Interior.Textile.HKM_Rug_04'\n     Skin=Texture'HK_Interior.Textile.HKM_Rug_04'\n     Mesh=LodMesh'DeusExDeco.HKMarketTarp'\n     CollisionRadius=72.000000\n     CollisionHeight=15.000000\n     Mass=10.000000\n     Buoyancy=100.000000\n}\n",
            "name": "PortableCarpet.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "ActivateSound=Sound'DeusExSounds.Augmentation.CloakUp'",
                    "DeActivateSound=None",
                    "ChargeRemainingLabel=\"Carpet readiness:\"",
                    "ItemName=\"Portable Carpet\"",
                    "PlayerViewOffset=(X=20.000000,Z=-12.000000)",
                    "PlayerViewMesh=LodMesh'DeusExDeco.HKMarketTarp'",
                    "PlayerViewScale=0.200000",
                    "PickupViewMesh=LodMesh'DeusExDeco.HKMarketTarp'",
                    "ThirdPersonMesh=LodMesh'DeusExDeco.HKMarketTarp'",
                    "ThirdPersonScale=0.250000",
                    "Charge=8",
                    "LandSound=Sound'DeusExSounds.Generic.DropLargeWeapon'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconArmorAdaptive'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconArmorAdaptive'",
                    "largeIconWidth=35",
                    "largeIconHeight=49",
                    "Description=\"Its a tarp\"",
                    "beltDescription=\"CARP\"",
                    "Texture=Texture'HK_Interior.Textile.HKM_Rug_04'",
                    "Skin=Texture'HK_Interior.Textile.HKM_Rug_04'",
                    "Mesh=LodMesh'DeusExDeco.HKMarketTarp'",
                    "CollisionRadius=72.000000",
                    "CollisionHeight=15.000000",
                    "Mass=10.000000",
                    "Buoyancy=100.000000"
                ],
                "exec": [
                    "#exec obj load file=..\\Textures\\HK_Interior.utx package=HK_Interior"
                ],
                "extends": "ChargedPickup",
                "functions": {
                    "ChargedPickupBegin": {
                        "body": "{\n //  local FlyingTarp CD;\n      \n  Spawn(Class'FlyingCarpet',,,Player.Location + (Player.CollisionRadius+Default.CollisionRadius+30) * Vector(Player.ViewRotation) + vect(0,0,1) * 30 );\n \n          \n\n\tSuper.ChargedPickupBegin(Player);\n\t\n}",
                        "locals": [
                            "local Vector loc,X,Y,Z;"
                        ],
                        "modifiers": [],
                        "name": "ChargedPickupBegin",
                        "native": false,
                        "param": [
                            [
                                "DeusExPlayer",
                                "Player"
                            ]
                        ],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) || (BeltSpot == 0) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    },
                    "UsedUp": {
                        "body": "{\n\n\tif ( Pawn(Owner) != None )\n\t{\n\t\tbActivatable = false;\n\t\t\n\t}\n\tPlayer = DeusExPlayer(Owner);\n\n\tif (Player != None)\n\t{\n\t\tif (Player.inHand == Self)\n\t\t\tChargedPickupEnd(Player);\n\t}\n\n\tDestroy();\n}",
                        "locals": [
                            "local DeusExPlayer Player;"
                        ],
                        "modifiers": [],
                        "name": "UsedUp",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 78,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "PowerArmour.uc": {
            "body": "//=============================================================================\n// AdaptiveArmor.\n//=============================================================================\nclass PowerArmour extends PGArmour;\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\ndefaultproperties\n{\n     Dur=25\n     Def=10\n     ItemName=\"Power Armour\"\n     beltDescription=\"POWER\"\n}\n",
            "name": "PowerArmour.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "Dur=25",
                    "Def=10",
                    "ItemName=\"Power Armour\"",
                    "beltDescription=\"POWER\""
                ],
                "exec": [],
                "extends": "PGArmour",
                "functions": {
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 18,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "PropGun.uc": {
            "body": "//=============================================================================\n// WeaponStealthPistol.\n//=============================================================================\nclass PropGun extends DeusExWeapon;\n\nvar int Mode;\n//0 inv\n//1 move\n//2 push\n\nfunction string GetDisplayString(Actor P)\n{\n\tif(P.isA('DeusExDecoration'))\n\t\treturn DeusExDecoration(P).ItemName;\n}\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t\tReloadCount = mpReloadCount;\n\t}\n}\n\nfunction GiveTo( pawn Other )\n{\n\tif(DeusExPlayer(Other).bAdmin)\n\t{\n\t\t   super.Giveto(Other);\n\t}\n}\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\nfunction ProcessTraceHit(Actor Other, Vector HitLocation, Vector HitNormal, Vector X, Vector Y, Vector Z)\n{\n\tlocal float        mult;\n\tlocal name         damageType;\n\tlocal DeusExPlayer dxPlayer, DXP;\n\tlocal Pawn P;\n\t\n\t\tif(Other.isa('DeusExDecoration'))\n\t\t{\n\t\t\tif(Mode == 0)\n\t\t\t{\n\t\t\t\tDeusExDecoration(Other).bInvincible = !DeusExDecoration(Other).bInvincible;\n\t\t\t\tDeusExPlayer(Owner).ClientMessage(\"Invincible \"$DeusExDecoration(Other).bInvincible);\n\t\t\t}\n\t\t\tif(Mode == 1)\n\t\t\t{\n\t\t\t\tDeusExDecoration(Other).bPushable = !DeusExDecoration(Other).bPushable;\n\t\t\t\tDeusExPlayer(Owner).ClientMessage(\"bPushable \"$DeusExDecoration(Other).bPushable);\n\t\t\t}\n\t\t\t\tif(Mode == 2)\n\t\t\t{\n\t\t\t\tDeusExDecoration(Other).bMovable = !DeusExDecoration(Other).bMovable;\n\t\t\t\tDeusExPlayer(Owner).ClientMessage(\"bMovable \"$DeusExDecoration(Other).bMovable);\n\t\t\t}\n\t\t\treturn;\n\t\t}\t\t\n}\n\nsimulated function float CalculateAccuracy()\n{\n\treturn 0.000000; //Dirty hack to always return dead on accuracy.\n}\n\nstate NormalFire //(Thanks to JimBowen for this Infinite ammo code) \n{ \n   Begin: \n      if ((ClipCount >= ReloadCount) && (ReloadCount != 0)) \n      { \n         if (!bAutomatic) \n         { \n            bFiring = False; \n            FinishAnim(); \n         } \n    \n         if (Owner != None) \n         { \n            if (Owner.IsA('DeusExPlayer')) \n            { \n               bFiring = False; \n            } \n            else if (Owner.IsA('ScriptedPawn')) \n            { \n               bFiring = False; \n               ReloadAmmo(); \n            } \n         } \n         else \n         { \n            if (bHasMuzzleFlash) \n               EraseMuzzleFlashTexture(); \n            GotoState('Idle'); \n         } \n      } \n      if ( bAutomatic && (( Level.NetMode == NM_DedicatedServer ) || ((Level.NetMode == NM_ListenServer) && Owner.IsA('DeusExPlayer') && !DeusExPlayer(Owner).PlayerIsListenClient()))) \n         GotoState('Idle'); \n    \n      Sleep(GetShotTime()); \n      if (bAutomatic) \n      { \n         GenerateBullet();       // In multiplayer bullets are generated by the client which will let the server know when \n         Goto('Begin'); \n      } \n      bFiring = False; \n      FinishAnim(); \n    \n   /*      // if ReloadCount is 0 and we're not hand to hand, then this is a \n      // single-use weapon so destroy it after firing once \n      if ((ReloadCount == 0) && !bHandToHand) \n      { \n         if (DeusExPlayer(Owner) != None) \n            DeusExPlayer(Owner).RemoveItemFromSlot(Self);   // remove it from the inventory grid \n         Destroy(); \n      } \n      */              // Do I REALLY need all that crap JUST for infinite ammo? \n      ReadyToFire(); \n   Done: \n      bFiring = False; \n      Finish(); \n}\n\nfunction ScopeToggle()\n{\n\n}\n\nfunction LaserToggle()\n{\n\tMode++;\n\tif(Mode == 3)\n\t\tMode = 0;\n\t\n\tif(Mode == 0)\n\t\tDeusExPlayer(Owner).ClientMessage(\"Mode is now Toggle Invincible\");\n\telse if(Mode == 1)\n\t\tDeusExPlayer(Owner).ClientMessage(\"Mode is now Toggle Pushable\");\n\telse if(Mode == 2)\n\t\tDeusExPlayer(Owner).ClientMessage(\"Mode is now Toggle Movable\");\n}\n\ndefaultproperties\n{\n     GoverningSkill=Class'DeusEx.SkillWeaponPistol'\n     NoiseLevel=0.010000\n     ShotTime=0.150000\n     reloadTime=1.500000\n     HitDamage=0\n     maxRange=4800\n     AccurateRange=2400\n     BaseAccuracy=0.800000\n     bCanHaveScope=True\n     ScopeFOV=25\n     bCanHaveLaser=True\n     recoilStrength=0.100000\n     mpBaseAccuracy=0.200000\n     mpAccurateRange=1200\n     mpMaxRange=1200\n     bCanHaveModBaseAccuracy=True\n     bCanHaveModReloadCount=True\n     bCanHaveModAccurateRange=True\n     bCanHaveModReloadTime=True\n     bInstantHit=True\n     FireOffset=(X=-24.000000,Y=10.000000,Z=14.000000)\n     shakemag=50.000000\n     FireSound=Sound'DeusExSounds.Weapons.StealthPistolFire'\n     AltFireSound=Sound'DeusExSounds.Weapons.StealthPistolReloadEnd'\n     CockingSound=Sound'DeusExSounds.Weapons.StealthPistolReload'\n     SelectSound=Sound'DeusExSounds.Weapons.StealthPistolSelect'\n     InventoryGroup=89\n     ItemName=\"Prop Gun\"\n     PlayerViewOffset=(X=24.000000,Y=-10.000000,Z=-14.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.StealthPistol'\n     PickupViewMesh=LodMesh'DeusExItems.StealthPistolPickup'\n     ThirdPersonMesh=LodMesh'DeusExItems.StealthPistol3rd'\n     Icon=Texture'DeusExUI.Icons.BeltIconStealthPistol'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconStealthPistol'\n     largeIconWidth=47\n     largeIconHeight=37\n     Description=\"The stealth pistol is a variant of the standard 10mm pistol with a larger clip and integrated silencer designed for wet work at very close ranges.\"\n     beltDescription=\"PROP\"\n     Mesh=LodMesh'DeusExItems.StealthPistolPickup'\n     CollisionRadius=8.000000\n     CollisionHeight=0.800000\n}\n",
            "name": "PropGun.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "GoverningSkill=Class'DeusEx.SkillWeaponPistol'",
                    "NoiseLevel=0.010000",
                    "ShotTime=0.150000",
                    "reloadTime=1.500000",
                    "HitDamage=0",
                    "maxRange=4800",
                    "AccurateRange=2400",
                    "BaseAccuracy=0.800000",
                    "bCanHaveScope=True",
                    "ScopeFOV=25",
                    "bCanHaveLaser=True",
                    "recoilStrength=0.100000",
                    "mpBaseAccuracy=0.200000",
                    "mpAccurateRange=1200",
                    "mpMaxRange=1200",
                    "bCanHaveModBaseAccuracy=True",
                    "bCanHaveModReloadCount=True",
                    "bCanHaveModAccurateRange=True",
                    "bCanHaveModReloadTime=True",
                    "bInstantHit=True",
                    "FireOffset=(X=-24.000000,Y=10.000000,Z=14.000000)",
                    "shakemag=50.000000",
                    "FireSound=Sound'DeusExSounds.Weapons.StealthPistolFire'",
                    "AltFireSound=Sound'DeusExSounds.Weapons.StealthPistolReloadEnd'",
                    "CockingSound=Sound'DeusExSounds.Weapons.StealthPistolReload'",
                    "SelectSound=Sound'DeusExSounds.Weapons.StealthPistolSelect'",
                    "InventoryGroup=89",
                    "ItemName=\"Prop Gun\"",
                    "PlayerViewOffset=(X=24.000000,Y=-10.000000,Z=-14.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.StealthPistol'",
                    "PickupViewMesh=LodMesh'DeusExItems.StealthPistolPickup'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.StealthPistol3rd'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconStealthPistol'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconStealthPistol'",
                    "largeIconWidth=47",
                    "largeIconHeight=37",
                    "Description=\"The stealth pistol is a variant of the standard 10mm pistol with a larger clip and integrated silencer designed for wet work at very close ranges.\"",
                    "beltDescription=\"PROP\"",
                    "Mesh=LodMesh'DeusExItems.StealthPistolPickup'",
                    "CollisionRadius=8.000000",
                    "CollisionHeight=0.800000"
                ],
                "exec": [],
                "extends": "DeusExWeapon",
                "functions": {
                    "CalculateAccuracy": {
                        "body": "{\n\treturn 0.000000; //Dirty hack to always return dead on accuracy.\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "CalculateAccuracy",
                        "native": false,
                        "param": [],
                        "return": "float"
                    },
                    "GetDisplayString": {
                        "body": "{\n\tif(P.isA('DeusExDecoration'))\n\t\treturn DeusExDecoration(P).ItemName;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetDisplayString",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "P"
                            ]
                        ],
                        "return": "string"
                    },
                    "GiveTo": {
                        "body": "{\n\tif(DeusExPlayer(Other).bAdmin)\n\t{\n\t\t   super.Giveto(Other);\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "GiveTo",
                        "native": false,
                        "param": [
                            [
                                "pawn",
                                "Other"
                            ]
                        ],
                        "return": ""
                    },
                    "LaserToggle": {
                        "body": "{\n\tMode++;\n\tif(Mode == 3)\n\t\tMode = 0;\n\t\n\tif(Mode == 0)\n\t\tDeusExPlayer(Owner).ClientMessage(\"Mode is now Toggle Invincible\");\n\telse if(Mode == 1)\n\t\tDeusExPlayer(Owner).ClientMessage(\"Mode is now Toggle Pushable\");\n\telse if(Mode == 2)\n\t\tDeusExPlayer(Owner).ClientMessage(\"Mode is now Toggle Movable\");\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "LaserToggle",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t\tReloadCount = mpReloadCount;\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ProcessTraceHit": {
                        "body": "{\n\t\n\t\tif(Other.isa('DeusExDecoration'))\n\t\t{\n\t\t\tif(Mode == 0)\n\t\t\t{\n\t\t\t\tDeusExDecoration(Other).bInvincible = !DeusExDecoration(Other).bInvincible;\n\t\t\t\tDeusExPlayer(Owner).ClientMessage(\"Invincible \"$DeusExDecoration(Other).bInvincible);\n\t\t\t}\n\t\t\tif(Mode == 1)\n\t\t\t{\n\t\t\t\tDeusExDecoration(Other).bPushable = !DeusExDecoration(Other).bPushable;\n\t\t\t\tDeusExPlayer(Owner).ClientMessage(\"bPushable \"$DeusExDecoration(Other).bPushable);\n\t\t\t}\n\t\t\t\tif(Mode == 2)\n\t\t\t{\n\t\t\t\tDeusExDecoration(Other).bMovable = !DeusExDecoration(Other).bMovable;\n\t\t\t\tDeusExPlayer(Owner).ClientMessage(\"bMovable \"$DeusExDecoration(Other).bMovable);\n\t\t\t}\n\t\t\treturn;\n\t\t}\t\t\n}",
                        "locals": [
                            "local float        mult;",
                            "local name         damageType;",
                            "local DeusExPlayer dxPlayer, DXP;",
                            "local Pawn P;"
                        ],
                        "modifiers": [],
                        "name": "ProcessTraceHit",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Other"
                            ],
                            [
                                "Vector",
                                "HitLocation"
                            ],
                            [
                                "Vector",
                                "HitNormal"
                            ],
                            [
                                "Vector",
                                "X"
                            ],
                            [
                                "Vector",
                                "Y"
                            ],
                            [
                                "Vector",
                                "Z"
                            ]
                        ],
                        "return": ""
                    },
                    "ScopeToggle": {
                        "body": "{\n\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "ScopeToggle",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 199,
                "replication": "",
                "states": [],
                "variables": [
                    "var int Mode;"
                ]
            }
        },
        "ProxLamp.uc": {
            "body": "//=============================================================================\n// RandomColourLamp.\n//=============================================================================\nclass ProxLamp expands Lamp;\n\nvar int Mode;\nvar DeusExPlayer tempPwn;\nvar bool bFoundPlayer;\n\nfunction Tick(float deltaTime)\n{\n\tlocal DeusExPlayer player;\n\n\t\tbFoundPlayer=False;\n\t\tforeach VisibleActors(class'DeusExPlayer', player, 256)\n\t\t{\n\t\t\tbFoundPlayer=True;\n\t\t}\n\t\t\n\t\tif(bFoundPlayer && LightType==LT_None)\n\t\t{\n\t\t\t\t\tbOn = True;\n\t\t\t\t\tLightType = LT_Steady;\n\t\t\t\t\tPlaySound(sound'Switch4ClickOn');\n\t\t\t\t\tbUnlit = True;\n\t\t\t\t\tScaleGlow = 2.0;\t\t\t\t\t\n\t\t}\n\t\telse if(!bFoundPlayer && LightType==LT_Steady)\n\t\t{\n\t\t\t\tbOn = False;\n\t\t\t\tLightType = LT_None;\n\t\t\t\tPlaySound(sound'Switch4ClickOff');\n\t\t\t\tbUnlit = False;\n\t\t\t\tResetScaleGlow();\n\t\t}\n\tSuper.Tick(deltaTime);\n}\n\ndefaultproperties\n{\n     bInvincible=True\n     ItemName=\"Proximity Lamp\"\n     Mesh=LodMesh'DeusExDeco.Lamp2'\n     CollisionRadius=15.000000\n     CollisionHeight=47.000000\n     LightSaturation=0\n     LightRadius=18\n}\n",
            "name": "ProxLamp.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bInvincible=True",
                    "ItemName=\"Proximity Lamp\"",
                    "Mesh=LodMesh'DeusExDeco.Lamp2'",
                    "CollisionRadius=15.000000",
                    "CollisionHeight=47.000000",
                    "LightSaturation=0",
                    "LightRadius=18"
                ],
                "exec": [],
                "extends": "Lamp",
                "functions": {
                    "Tick": {
                        "body": "{\n\n\t\tbFoundPlayer=False;\n\t\tforeach VisibleActors(class'DeusExPlayer', player, 256)\n\t\t{\n\t\t\tbFoundPlayer=True;\n\t\t}\n\t\t\n\t\tif(bFoundPlayer && LightType==LT_None)\n\t\t{\n\t\t\t\t\tbOn = True;\n\t\t\t\t\tLightType = LT_Steady;\n\t\t\t\t\tPlaySound(sound'Switch4ClickOn');\n\t\t\t\t\tbUnlit = True;\n\t\t\t\t\tScaleGlow = 2.0;\t\t\t\t\t\n\t\t}\n\t\telse if(!bFoundPlayer && LightType==LT_Steady)\n\t\t{\n\t\t\t\tbOn = False;\n\t\t\t\tLightType = LT_None;\n\t\t\t\tPlaySound(sound'Switch4ClickOff');\n\t\t\t\tbUnlit = False;\n\t\t\t\tResetScaleGlow();\n\t\t}\n\tSuper.Tick(deltaTime);\n}",
                        "locals": [
                            "local DeusExPlayer player;"
                        ],
                        "modifiers": [],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltaTime"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 49,
                "replication": "",
                "states": [],
                "variables": [
                    "var int Mode;",
                    "var DeusExPlayer tempPwn;",
                    "var bool bFoundPlayer;"
                ]
            }
        },
        "RaceMarker.uc": {
            "body": "//=============================================\n// Speedrun Race Marker etc..\n//=============================================\nClass RaceMarker extends DeusExDecoration;\n\nvar int Secs, Mins;\nvar bool bDisabled;\n\nvar RaceMarker EndPoint, StartPoint;\n\nfunction PostBeginPlay()\n{\n\tlocal RaceMarker RM;\n\t\n\tforeach AllActors(class'RaceMarker', RM)\n\t{\n\t\t\n\t}\n}\n\nfunction Tick(float deltatime)\n{\n\tsuper.Tick(deltatime);\n\n\tRadialCollect();\n}\n\nfunction RadialCollect()\n{\n\tlocal PlayerPawn P, winP;\n\tlocal vector dist;\n\tlocal float lowestDist;\n\n\tlowestDist = 1024;\n\n\tforeach VisibleActors(class'PlayerPawn', P, 50)\n\t{\n\t\tif(P != None && !P.IsInState('Dying') && P.Health > 0)\n\t\t{\n\t\t\tif(vSize(P.Location - Location) < lowestDist)\n\t\t\t{\n\t\t\t\twinP = P;\n\t\t\t\tlowestDist = vSize(P.Location - Location);\n\t\t\t}\n\t\t}\n\t}\n\n\tif(winP != None)\n\t{\n\t\twinP.ClientMessage(\"weehee\");\n\t}\n}\n\nfunction Timer()\n{\n\n}\n\ndefaultproperties\n{\n     HitPoints=100\n     bInvincible=True\n     bHighlight=False\n     ItemName=\"Race Marker\"\n     bPushable=False\n     Physics=PHYS_Rotating\n     Style=STY_Translucent\n     Texture=Texture'DeusExUI.UserInterface.AugIconCombat_Small'\n     Mesh=LodMesh'DeusExDeco.Lightbulb'\n     AmbientGlow=255\n     Fatness=140\n     CollisionRadius=5.000000\n     CollisionHeight=8.000000\n     bBlockPlayers=False\n     LightType=LT_Steady\n     LightBrightness=100\n     LightSaturation=255\n     LightRadius=10\n     bFixedRotationDir=True\n     RotationRate=(Yaw=8192)\n}\n",
            "name": "RaceMarker.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "HitPoints=100",
                    "bInvincible=True",
                    "bHighlight=False",
                    "ItemName=\"Race Marker\"",
                    "bPushable=False",
                    "Physics=PHYS_Rotating",
                    "Style=STY_Translucent",
                    "Texture=Texture'DeusExUI.UserInterface.AugIconCombat_Small'",
                    "Mesh=LodMesh'DeusExDeco.Lightbulb'",
                    "AmbientGlow=255",
                    "Fatness=140",
                    "CollisionRadius=5.000000",
                    "CollisionHeight=8.000000",
                    "bBlockPlayers=False",
                    "LightType=LT_Steady",
                    "LightBrightness=100",
                    "LightSaturation=255",
                    "LightRadius=10",
                    "bFixedRotationDir=True",
                    "RotationRate=(Yaw=8192)"
                ],
                "exec": [],
                "extends": "DeusExDecoration",
                "functions": {
                    "PostBeginPlay": {
                        "body": "{\n\t\n\tforeach AllActors(class'RaceMarker', RM)\n\t{\n\t\t\n\t}\n}",
                        "locals": [
                            "local RaceMarker RM;"
                        ],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "RadialCollect": {
                        "body": "{\n\n\tlowestDist = 1024;\n\n\tforeach VisibleActors(class'PlayerPawn', P, 50)\n\t{\n\t\tif(P != None && !P.IsInState('Dying') && P.Health > 0)\n\t\t{\n\t\t\tif(vSize(P.Location - Location) < lowestDist)\n\t\t\t{\n\t\t\t\twinP = P;\n\t\t\t\tlowestDist = vSize(P.Location - Location);\n\t\t\t}\n\t\t}\n\t}\n\n\tif(winP != None)\n\t{\n\t\twinP.ClientMessage(\"weehee\");\n\t}\n}",
                        "locals": [
                            "local PlayerPawn P, winP;",
                            "local vector dist;",
                            "local float lowestDist;"
                        ],
                        "modifiers": [],
                        "name": "RadialCollect",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Tick": {
                        "body": "{\n\tsuper.Tick(deltatime);\n\n\tRadialCollect();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltatime"
                            ]
                        ],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 82,
                "replication": "",
                "states": [],
                "variables": [
                    "var int Secs, Mins;",
                    "var bool bDisabled;",
                    "var RaceMarker EndPoint, StartPoint;"
                ]
            }
        },
        "RadarDrone.uc": {
            "body": "class RadarDrone extends DXRobot;\n\nvar float explosionradius;\nvar() float hoverdistance; //how close to get to the player.\nvar DeusExPlayer myOwner;\nvar(Sounds) sound BeepActive, BeepPassive;\nvar bool bDoneDanger, bDoneWorry;\nvar string DangerString, WorryString;\nvar bool bSilence;\nvar ToolRadarD LinkedTool;\nvar int pOrders;\nvar int RocketsRemain, rrocketsremain;\nvar float DroneRange;\nvar class<inventory> storedinv, rstoredinv;\nvar string iv;\n\nreplication\n{\nreliable if (Role==ROLE_Authority)\nrRocketsRemain, rstoredinv, iv;\n}\n\nfunction SilentAdd(class<inventory> addClass, DeusExPlayer addTarget)\n{ \n\tlocal Inventory anItem;\n\t\n\tanItem = Spawn(addClass,,,addTarget.Location); \n\tanItem.SpawnCopy(addTarget);\n\tanItem.Destroy();\n\t/*anItem.Instigator = addTarget; \n\tanItem.GotoState('Idle2'); \n\tanItem.bHeldItem = true; \n\tanItem.bTossedOut = false; \n\t\n\tif(Weapon(anItem) != None) \n\t\tWeapon(anItem).GiveAmmo(addTarget); \n\tanItem.GiveTo(addTarget);*/\n}\n\nfunction Frob(Actor Frobber, Inventory frobWith) \n{\nlocal ToolRadarD TRD;\nlocal inventory ga,inv;\n\tif(myOwner != None && myOwner == DeusExPlayer(Frobber))\n\t{\n\t\tif(storedinv != None)\n\t\t{\n\t\t\t\tSilentAdd(storedInv, DeusExPlayer(Frobber));\n\t\t\t\tStoredinv = None;\t\t\n\t\t\t\trstoredinv = Storedinv;\n\t\t\t\tiv = \"NONE\";\n\t\t\treturn;\n\t\t\t\t\n\t\t}\n\t\tif(myOwner.Inhand != None && storedinv == None)\n\t\t{\n\t\t\tstoredinv = myOwner.inhand.Class;\n\t\t\trstoredinv = myOwner.inhand.Class;\n\t\t\tIV = myOwner.inhand.itemname;\n\t\t\tmyOwner.inhand.Destroy();\n\t\t\treturn;\n\t\t}\n\t\tmyOwner = None;\n\t\tGotoState('Waiting');\n\t\tExtSay(\"Drone released.\");\n\t\tDeusExPlayer(Frobber).ClientMessage(\"Radar off.\");\n\t\tforeach Allactors(class'toolradard',trd)\n\t\t\tif(trd.LinkedDrone == Self)\n\t\t\t\ttrd.LinkedDrone = None;\n\t\treturn;\n\t}\n\t\n\tif(myOwner == None)\n\t{\n\t\tmyOwner = DeusExPlayer(Frobber);\n\t\tGotoState('following');\n\t\tExtSay(\"Now following \"$myOwner.PlayerReplicationinfo.PlayerName$\".\");\n\t\tforeach Allactors(class'toolradard',trd)\n\t\t\tif(trd.Owner == Frobber)\n\t\t\t{\n\t\t\t\ttrd.LinkedDrone = Self;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tif(storedinv == none)\n\t\t\t\tiv=\"none\";\t\t\n\t\tSilentAdd(class'toolRadarD', myOwner);\n\t\tSetTimer(1,False);\n\t\treturn;\n\t}\n}\n\nfunction Timer()\n{\n\tlocal int range;\n\tlocal DeusExPlayer player;\n\tlocal ShockRing SE;\n\t\n\t\trange=0;\n\t\tforeach RadiusActors(class'DeusExPlayer', player, 350, Location)\n\t\t{\n\t\t\tif (player != None && player != myOwner)\n\t\t\t\trange=2;\t\t\n\t\t}\n\t\t\n\t\tforeach RadiusActors(class'DeusExPlayer', player, 1000, Location)\n\t\t{\n\t\t\tif (player != None && player != myOwner && range != 2)\n\t\t\t\trange=1;\t\t\n\t\t}\n\t\t\n\t\t\n\tif(myOwner != None && Range==0)\n\t{\n\t\tSetTimer(1,False);\n\t\t\tif(bDoneDanger || bDoneWorry)\n\t\t\t{\n\t\t\tmyOwner.PlaySound(Sound'DeusExSounds.Robot.SecurityBot3TargetLost', SLOT_Talk,2,,1024,);\n\t\t\t\tbDoneDanger=False;\n\t\t\t\tbDoneWorry=False;\n\t\t\t\tmyOwner.ClientMessage(\"RADAR Drone: Sorry, \"$myOwner.PlayerReplicationinfo.PlayerName$\", I guess it was nothing.\", 'TeamSay');\t\t\t\t\n\t\t\t}\n\t}\n\tif(myOwner != None && Range==2)\n\t{\n\t\tif(!bDoneDanger)\n\t\t{\n\t\tmyOwner.PlaySound(Sound'DeusExSounds.Robot.SecurityBot3TargetAcquired', SLOT_Talk,2,,1024,);\n\t\t\tmyOwner.ClientMessage(\"RADAR Drone: Hey, \"$myOwner.PlayerReplicationinfo.PlayerName$\", there's someone very close by!\", 'TeamSay');\n\t\t}\n\t\tbDoneDanger=True;\n\t\t\tif(!bSilence)\n\t\t\t{\n\t\t\t\tPlaySound(BeepActive, SLOT_None,200,, 255);\n\t\t\t\tSE = Spawn(class'ShockRing',,, Location);\n\t\t\t\tSE.Lifespan = 0.5;\t\t\n\t\t\t}\n\t\tSetTimer(0.5,False);\n\t}\n\tif(myOwner != None && Range==1)\n\t{\n\t\tif(!bDoneworry)\n\t\t{\n\t\tmyOwner.PlaySound(Sound'DeusExSounds.Robot.SecurityBot3TargetAcquired', SLOT_Talk,2,,1024,);\n\t\t\tmyOwner.ClientMessage(\"RADAR Drone: Wait, \"$myOwner.PlayerReplicationinfo.PlayerName$\", did you hear something?\", 'TeamSay');\n\t\t}\n\t\tbDoneWorry=True;\n\t\t\tif(!bSilence)\n\t\t\t{\n\t\t\t\tPlaySound(BeepActive, SLOT_None,200,, 255);\n\t\t\t\tSE = Spawn(class'ShockRing',,, Location);\n\t\t\t\tSE.Lifespan = 1;\t\t\n\t\t\t}\n\t\tSetTimer(1.3,False);\n\t}\n}\n\nfunction bool ShouldFlee()\n{\n\treturn false;\n}\n\nauto state StartUp\n{\n\tfunction BeginState()\n\t{\n\t\tbInterruptState = true;\n\t\tbCanConverse = false;\n\n\t\tbStasis = False;\n\t\tSetDistress(false);\n\t\tBlockReactions();\n\t\tResetDestLoc();\n\t\tInitializePawn();\n\n\t\tgotostate('following');\n\t}\n\n\tfunction EndState()\n\t{\n\t\tbCanConverse = true;\n\t\tbStasis = True;\n\t\tResetReactions();\n\t}\n}\n\nstate Following\n{\n\tfunction SetFall()\n\t{\n\t\tStartFalling('Following', 'ContinueFollow');\n\t}\n\n\tfunction HitWall(vector HitNormal, actor Wall)\n\t{\n\t\tif (Physics == PHYS_Falling)\n\t\t\treturn;\n\t\tGlobal.HitWall(HitNormal, Wall);\n\t\tCheckOpenDoor(HitNormal, Wall);\n\t}\n\n\tfunction Tick(float deltaSeconds)\n\t{\n\tlocal float AreWeTooFar;\n\t      local Inventory Inv;\n\t\tGlobal.Tick(deltaSeconds);\n\t\tif(myOwner != None)\n\t\t{\n\t\t\tAreWeTooFar = Abs(VSize(myOwner.Location - Location));\n\t\t\tif(AreWeTooFar > 650)\n\t\t\t{\n\t\t\t\t\tforeach AllActors(class'Inventory', Inv)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (Inv.Owner == myOwner)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (Inv.IsA('ToolRadarD')) \n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tToolRadarD(Inv).Recreation();\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (BackpedalTimer >= 0)\n\t\t\tBackpedalTimer += deltaSeconds;\n\n\t\tanimTimer[1] += deltaSeconds;\n\t\tif ((Physics == PHYS_Walking) && (myOwner != None))\n\t\t{\n\t\t\tif (Acceleration == vect(0,0,0))\n\t\t\t\tLookAtActor(myOwner, true, true, true, 0, 0.25);\n\t\t\telse\n\t\t\t\tPlayTurnHead(LOOK_Forward, 1.0, 0.25);\n\t\t}\n\t}\n\n\tfunction bool PickDestination()\n\t{\n\t\tlocal float   dist;\n\t\tlocal float   extra;\n\t\tlocal float   distMax;\n\t\tlocal int     dir;\n\t\tlocal rotator rot;\n\t\tlocal bool    bSuccess;\n\n\t\tif(myOwner == None)\n\t\t\treturn False;\n\t\tbSuccess = false;\n\t\tdestPoint = None;\n\t\tdestLoc   = vect(0, 0, 0);\n\t\textra = myOwner.CollisionRadius + CollisionRadius;\n\t\tdist = VSize(myOwner.Location - Location);\n\t\tdist -= extra;\n\t\tif (dist < 0)\n\t\t\tdist = 0;\n\n\t\tif ((dist > 180) || (AICanSee(myOwner, , false, false, false, true) <= 0))\n\t\t{\n\t\t\tif (ActorReachable(myOwner))\n\t\t\t{\n\t\t\t\trot = Rotator(myOwner.Location - Location);\n\t\t\t\tdistMax = (dist-180)+45;\n\t\t\t\tif (distMax > 80)\n\t\t\t\t\tdistMax = 80;\n\t\t\t\tbSuccess = AIDirectionReachable(Location, rot.Yaw, rot.Pitch, 0, distMax, destLoc);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tMoveTarget = FindPathToward(myOwner);\n\t\t\t\tif (MoveTarget != None)\n\t\t\t\t{\n\t\t\t\t\tdestPoint = MoveTarget;\n\t\t\t\t\tbSuccess = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tBackpedalTimer = -1;\n\t\t}\n\t\telse if (dist < 60)\n\t\t{\n\t\t\tif (BackpedalTimer < 0)\n\t\t\t\tBackpedalTimer = 0;\n\t\t\tif (BackpedalTimer > 1.0)  // give the player enough time to converse, if he wants to\n\t\t\t{\n\t\t\t\trot = Rotator(Location - myOwner.Location);\n\t\t\t\tbSuccess = AIDirectionReachable(myOwner.Location, rot.Yaw, rot.Pitch, 60+extra, 120+extra, destLoc);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\tBackpedalTimer = -1;\n\n\t\treturn (bSuccess);\n\t}\n\n\tfunction BeginState()\n\t{\n\t\tsetphysics(PHYS_flying); //added\n\t\tStandUp();\n\t\t//Disable('AnimEnd');\n\t\tbStasis = False;\n\t\tSetupWeapon(false);\n\t\tSetDistress(false);\n\t\tBackpedalTimer = -1;\n\t\tSeekPawn = None;\n\t\tEnableCheckDestLoc(true);\n\t}\n\n\tfunction EndState()\n\t{\n\t\tEnableCheckDestLoc(false);\n\t\tbAcceptBump = False;\n\t\t//Enable('AnimEnd');\n\t\tbStasis = True;\n\t\tStopBlendAnims();\n\t}\n\nBegin:\n\tAcceleration = vect(0, 0, 0);\n\tdestPoint = None;\n\tif (myOwner == None)\n\t\tGotoState('Standing');\n\n\tif (!PickDestination())\n\t\tGoto('Wait');\n\nFollow:\n\tif (destPoint != None)\n\t{\n\t\tif (MoveTarget != None)\n\t\t{\n\t\t\tif (ShouldPlayWalk(MoveTarget.Location))\n\t\t\t\tPlayRunning();\n\t\t\tMoveToward(MoveTarget, MaxDesiredSpeed);\n\t\t\tCheckDestLoc(MoveTarget.Location, true);\n\t\t}\n\t\telse\n\t\t\tSleep(0.0);  // this shouldn't happen\n\t}\n\telse\n\t{\n\t\tif (ShouldPlayWalk(destLoc))\n\t\t\tPlayRunning();\n\t\tMoveTo(destLoc, MaxDesiredSpeed);\n\t\tCheckDestLoc(destLoc);\n\t}\n\tif (PickDestination())\n\t\tGoto('Follow');\n\nWait:\n\t//PlayTurning();\n\t//TurnToward(myOwner);\n\tPlayWaiting();\n\nWaitLoop:\n\tAcceleration=vect(0,0,0);\n\tSleep(0.0);\n\tif (!PickDestination())\n\t\tGoto('WaitLoop');\n\telse\n\t\tGoto('Follow');\n\nContinueFollow:\nContinueFromDoor:\n\tAcceleration=vect(0,0,0);\n\tif (PickDestination())\n\t\tGoto('Follow');\n\telse\n\t\tGoto('Wait');\n\n}\n\nfunction ExplodeNuke()\n{\n\tlocal ScorchMark s;\n\tlocal ExplosionLight light;\n\tlocal int i;\n\tlocal float explosionDamage;\n\tlocal float explosionRadius;\n\n\texplosionDamage = 1000;\n\texplosionRadius = 1500;\n\n\tPlaySound(Sound'LargeExplosion1', SLOT_None,,, explosionRadius*16);\n\n\tlight = Spawn(class'ExplosionLight',,, Location);\n\tif (light != None)\n\t\tlight.size = 4;\n\n\tSpawn(class'ExplosionSmall',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionLarge',,, Location + 2*VRand()*CollisionRadius);\n\n\tDestroy();\n\tPlayDyingSound();\n\tHurtRadius(explosionDamage, explosionRadius, 'Exploded', explosionDamage*100, Location);\n}\n\nsimulated function DFX()\n{\n\tlocal SphereEffect sphere;\n\tsphere = Spawn(class'SphereEffect',,, Location);\n\tif (sphere != None)\n\t{\n\tsphere.RemoteRole = ROLE_None;\n\tsphere.size = explosionradius / 32.0;\n\tSphere.MultiSkins[0]=Texture'DeusExDeco.Skins.AlarmLightTex3';\n\t}\n}\n\nfunction PlayRunningAndFiring() {}\nfunction TweenToShoot(float tweentime) {}\nfunction PlayShoot() {}\nfunction TweenToAttack(float tweentime) {}\nfunction PlayAttack() {}\nfunction PlaySittingDown() {}\nfunction PlaySitting() {}\nfunction PlayStandingUp() {}\nfunction PlayRubbingEyesStart() {}\nfunction PlayRubbingEyes() {}\nfunction PlayRubbingEyesEnd() {}\nfunction PlayStunned() {}\nfunction PlayFalling() {}\nfunction PlayLanded(float impactVel) {}\nfunction PlayDuck() {}\nfunction PlayRising() {}\nfunction PlayCrawling() {}\nfunction PlayPushing() {}\nfunction PlayFiring() {}\nfunction PlayTakingHit(EHitLocation hitPos) {}\nfunction PlayCowerBegin() {}\nfunction PlayCowering() {}\nfunction PlayCowerEnd() {}\nfunction PlayPanicRunning() {}\nfunction PlayTurning() {}\nfunction TweenToWalking(float tweentime) {}\nfunction PlayWalking() {}\nfunction TweenToRunning(float tweentime) {}\nfunction PlayRunning() {}\nfunction TweenToWaiting(float tweentime) {}\nfunction PlayWaiting() {}\nfunction TweenToSwimming(float tweentime){}\nfunction PlaySwimming() {}\nfunction PlayDying(name damageType, vector hitLoc) {}\n\ndefaultproperties\n{\n     explosionRadius=100.000000\n     hoverdistance=200.000000\n     BeepActive=Sound'DeusExSounds.Generic.TurretSwitch'\n     RocketsRemain=30\n     rrocketsremain=30\n     EMPHitPoints=40\n     Saymsg=\"I have no owner right now, grab a radar controller and let's hunt some n00bs!\"\n     MinHealth=20.000000\n     bMustFaceTarget=True\n     bCanStrafe=True\n     AirSpeed=1000.000000\n     AccelRate=350.000000\n     Health=600\n     DrawType=DT_Mesh\n     Mesh=LodMesh'DeusExCharacters.SpyDrone'\n     SoundRadius=24\n     SoundVolume=92\n     AmbientSound=Sound'DeusExSounds.Augmentation.AugDroneLoop'\n     CollisionRadius=13.000000\n     CollisionHeight=2.760000\n     bBlockPlayers=False\n     Mass=20.000000\n     BindName=\"Drone\"\n     FamiliarName=\"RADAR Drone\"\n     UnfamiliarName=\"RADAR Drone\"\n}\n",
            "name": "RadarDrone.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "explosionRadius=100.000000",
                    "hoverdistance=200.000000",
                    "BeepActive=Sound'DeusExSounds.Generic.TurretSwitch'",
                    "RocketsRemain=30",
                    "rrocketsremain=30",
                    "EMPHitPoints=40",
                    "Saymsg=\"I have no owner right now, grab a radar controller and let's hunt some n00bs!\"",
                    "MinHealth=20.000000",
                    "bMustFaceTarget=True",
                    "bCanStrafe=True",
                    "AirSpeed=1000.000000",
                    "AccelRate=350.000000",
                    "Health=600",
                    "DrawType=DT_Mesh",
                    "Mesh=LodMesh'DeusExCharacters.SpyDrone'",
                    "SoundRadius=24",
                    "SoundVolume=92",
                    "AmbientSound=Sound'DeusExSounds.Augmentation.AugDroneLoop'",
                    "CollisionRadius=13.000000",
                    "CollisionHeight=2.760000",
                    "bBlockPlayers=False",
                    "Mass=20.000000",
                    "BindName=\"Drone\"",
                    "FamiliarName=\"RADAR Drone\"",
                    "UnfamiliarName=\"RADAR Drone\""
                ],
                "exec": [],
                "extends": "DXRobot",
                "functions": {
                    "BeginState": {
                        "body": "{\n\t\tsetphysics(PHYS_flying); //added\n\t\tStandUp();\n\t\t//Disable('AnimEnd');\n\t\tbStasis = False;\n\t\tSetupWeapon(false);\n\t\tSetDistress(false);\n\t\tBackpedalTimer = -1;\n\t\tSeekPawn = None;\n\t\tEnableCheckDestLoc(true);\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "BeginState",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "DFX": {
                        "body": "{\n\tsphere = Spawn(class'SphereEffect',,, Location);\n\tif (sphere != None)\n\t{\n\tsphere.RemoteRole = ROLE_None;\n\tsphere.size = explosionradius / 32.0;\n\tSphere.MultiSkins[0]=Texture'DeusExDeco.Skins.AlarmLightTex3';\n\t}\n}",
                        "locals": [
                            "local SphereEffect sphere;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "DFX",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "EndState": {
                        "body": "{\n\t\tEnableCheckDestLoc(false);\n\t\tbAcceptBump = False;\n\t\t//Enable('AnimEnd');\n\t\tbStasis = True;\n\t\tStopBlendAnims();\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "EndState",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ExplodeNuke": {
                        "body": "{\n\n\texplosionDamage = 1000;\n\texplosionRadius = 1500;\n\n\tPlaySound(Sound'LargeExplosion1', SLOT_None,,, explosionRadius*16);\n\n\tlight = Spawn(class'ExplosionLight',,, Location);\n\tif (light != None)\n\t\tlight.size = 4;\n\n\tSpawn(class'ExplosionSmall',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionLarge',,, Location + 2*VRand()*CollisionRadius);\n\n\tDestroy();\n\tPlayDyingSound();\n\tHurtRadius(explosionDamage, explosionRadius, 'Exploded', explosionDamage*100, Location);\n}",
                        "locals": [
                            "local ScorchMark s;",
                            "local ExplosionLight light;",
                            "local int i;",
                            "local float explosionDamage;",
                            "local float explosionRadius;"
                        ],
                        "modifiers": [],
                        "name": "ExplodeNuke",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Frob": {
                        "body": "{\n\tif(myOwner != None && myOwner == DeusExPlayer(Frobber))\n\t{\n\t\tif(storedinv != None)\n\t\t{\n\t\t\t\tSilentAdd(storedInv, DeusExPlayer(Frobber));\n\t\t\t\tStoredinv = None;\t\t\n\t\t\t\trstoredinv = Storedinv;\n\t\t\t\tiv = \"NONE\";\n\t\t\treturn;\n\t\t\t\t\n\t\t}\n\t\tif(myOwner.Inhand != None && storedinv == None)\n\t\t{\n\t\t\tstoredinv = myOwner.inhand.Class;\n\t\t\trstoredinv = myOwner.inhand.Class;\n\t\t\tIV = myOwner.inhand.itemname;\n\t\t\tmyOwner.inhand.Destroy();\n\t\t\treturn;\n\t\t}\n\t\tmyOwner = None;\n\t\tGotoState('Waiting');\n\t\tExtSay(\"Drone released.\");\n\t\tDeusExPlayer(Frobber).ClientMessage(\"Radar off.\");\n\t\tforeach Allactors(class'toolradard',trd)\n\t\t\tif(trd.LinkedDrone == Self)\n\t\t\t\ttrd.LinkedDrone = None;\n\t\treturn;\n\t}\n\t\n\tif(myOwner == None)\n\t{\n\t\tmyOwner = DeusExPlayer(Frobber);\n\t\tGotoState('following');\n\t\tExtSay(\"Now following \"$myOwner.PlayerReplicationinfo.PlayerName$\".\");\n\t\tforeach Allactors(class'toolradard',trd)\n\t\t\tif(trd.Owner == Frobber)\n\t\t\t{\n\t\t\t\ttrd.LinkedDrone = Self;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tif(storedinv == none)\n\t\t\t\tiv=\"none\";\t\t\n\t\tSilentAdd(class'toolRadarD', myOwner);\n\t\tSetTimer(1,False);\n\t\treturn;\n\t}\n}",
                        "locals": [
                            "local ToolRadarD TRD;",
                            "local inventory ga,inv;"
                        ],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    },
                    "HitWall": {
                        "body": "{\n\t\tif (Physics == PHYS_Falling)\n\t\t\treturn;\n\t\tGlobal.HitWall(HitNormal, Wall);\n\t\tCheckOpenDoor(HitNormal, Wall);\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "HitWall",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "HitNormal"
                            ],
                            [
                                "actor",
                                "Wall"
                            ]
                        ],
                        "return": ""
                    },
                    "PickDestination": {
                        "body": "{\n\n\t\tif(myOwner == None)\n\t\t\treturn False;\n\t\tbSuccess = false;\n\t\tdestPoint = None;\n\t\tdestLoc   = vect(0, 0, 0);\n\t\textra = myOwner.CollisionRadius + CollisionRadius;\n\t\tdist = VSize(myOwner.Location - Location);\n\t\tdist -= extra;\n\t\tif (dist < 0)\n\t\t\tdist = 0;\n\n\t\tif ((dist > 180) || (AICanSee(myOwner, , false, false, false, true) <= 0))\n\t\t{\n\t\t\tif (ActorReachable(myOwner))\n\t\t\t{\n\t\t\t\trot = Rotator(myOwner.Location - Location);\n\t\t\t\tdistMax = (dist-180)+45;\n\t\t\t\tif (distMax > 80)\n\t\t\t\t\tdistMax = 80;\n\t\t\t\tbSuccess = AIDirectionReachable(Location, rot.Yaw, rot.Pitch, 0, distMax, destLoc);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tMoveTarget = FindPathToward(myOwner);\n\t\t\t\tif (MoveTarget != None)\n\t\t\t\t{\n\t\t\t\t\tdestPoint = MoveTarget;\n\t\t\t\t\tbSuccess = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tBackpedalTimer = -1;\n\t\t}\n\t\telse if (dist < 60)\n\t\t{\n\t\t\tif (BackpedalTimer < 0)\n\t\t\t\tBackpedalTimer = 0;\n\t\t\tif (BackpedalTimer > 1.0)  // give the player enough time to converse, if he wants to\n\t\t\t{\n\t\t\t\trot = Rotator(Location - myOwner.Location);\n\t\t\t\tbSuccess = AIDirectionReachable(myOwner.Location, rot.Yaw, rot.Pitch, 60+extra, 120+extra, destLoc);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\tBackpedalTimer = -1;\n\n\t\treturn (bSuccess);\n\t}",
                        "locals": [
                            "local float   dist;",
                            "local float   extra;",
                            "local float   distMax;",
                            "local int     dir;",
                            "local rotator rot;",
                            "local bool    bSuccess;"
                        ],
                        "modifiers": [],
                        "name": "PickDestination",
                        "native": false,
                        "param": [],
                        "return": "bool"
                    },
                    "SetFall": {
                        "body": "{\n\t\tStartFalling('Following', 'ContinueFollow');\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetFall",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ShouldFlee": {
                        "body": "{\n\treturn false;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "ShouldFlee",
                        "native": false,
                        "param": [],
                        "return": "bool"
                    },
                    "SilentAdd": {
                        "body": "{ \n\t\n\tanItem = Spawn(addClass,,,addTarget.Location); \n\tanItem.SpawnCopy(addTarget);\n\tanItem.Destroy();\n\t/*anItem.Instigator = addTarget; \n\tanItem.GotoState('Idle2'); \n\tanItem.bHeldItem = true; \n\tanItem.bTossedOut = false; \n\t\n\tif(Weapon(anItem) != None) \n\t\tWeapon(anItem).GiveAmmo(addTarget); \n\tanItem.GiveTo(addTarget);*/\n}",
                        "locals": [
                            "local Inventory anItem;"
                        ],
                        "modifiers": [],
                        "name": "SilentAdd",
                        "native": false,
                        "param": [
                            [
                                "class<inventory>",
                                "addClass"
                            ],
                            [
                                "DeusExPlayer",
                                "addTarget"
                            ]
                        ],
                        "return": ""
                    },
                    "Tick": {
                        "body": "{\n\t\tGlobal.Tick(deltaSeconds);\n\t\tif(myOwner != None)\n\t\t{\n\t\t\tAreWeTooFar = Abs(VSize(myOwner.Location - Location));\n\t\t\tif(AreWeTooFar > 650)\n\t\t\t{\n\t\t\t\t\tforeach AllActors(class'Inventory', Inv)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (Inv.Owner == myOwner)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (Inv.IsA('ToolRadarD')) \n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tToolRadarD(Inv).Recreation();\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (BackpedalTimer >= 0)\n\t\t\tBackpedalTimer += deltaSeconds;\n\n\t\tanimTimer[1] += deltaSeconds;\n\t\tif ((Physics == PHYS_Walking) && (myOwner != None))\n\t\t{\n\t\t\tif (Acceleration == vect(0,0,0))\n\t\t\t\tLookAtActor(myOwner, true, true, true, 0, 0.25);\n\t\t\telse\n\t\t\t\tPlayTurnHead(LOOK_Forward, 1.0, 0.25);\n\t\t}\n\t}",
                        "locals": [
                            "local float AreWeTooFar;",
                            "local Inventory Inv;"
                        ],
                        "modifiers": [],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltaSeconds"
                            ]
                        ],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\t\n\t\trange=0;\n\t\tforeach RadiusActors(class'DeusExPlayer', player, 350, Location)\n\t\t{\n\t\t\tif (player != None && player != myOwner)\n\t\t\t\trange=2;\t\t\n\t\t}\n\t\t\n\t\tforeach RadiusActors(class'DeusExPlayer', player, 1000, Location)\n\t\t{\n\t\t\tif (player != None && player != myOwner && range != 2)\n\t\t\t\trange=1;\t\t\n\t\t}\n\t\t\n\t\t\n\tif(myOwner != None && Range==0)\n\t{\n\t\tSetTimer(1,False);\n\t\t\tif(bDoneDanger || bDoneWorry)\n\t\t\t{\n\t\t\tmyOwner.PlaySound(Sound'DeusExSounds.Robot.SecurityBot3TargetLost', SLOT_Talk,2,,1024,);\n\t\t\t\tbDoneDanger=False;\n\t\t\t\tbDoneWorry=False;\n\t\t\t\tmyOwner.ClientMessage(\"RADAR Drone: Sorry, \"$myOwner.PlayerReplicationinfo.PlayerName$\", I guess it was nothing.\", 'TeamSay');\t\t\t\t\n\t\t\t}\n\t}\n\tif(myOwner != None && Range==2)\n\t{\n\t\tif(!bDoneDanger)\n\t\t{\n\t\tmyOwner.PlaySound(Sound'DeusExSounds.Robot.SecurityBot3TargetAcquired', SLOT_Talk,2,,1024,);\n\t\t\tmyOwner.ClientMessage(\"RADAR Drone: Hey, \"$myOwner.PlayerReplicationinfo.PlayerName$\", there's someone very close by!\", 'TeamSay');\n\t\t}\n\t\tbDoneDanger=True;\n\t\t\tif(!bSilence)\n\t\t\t{\n\t\t\t\tPlaySound(BeepActive, SLOT_None,200,, 255);\n\t\t\t\tSE = Spawn(class'ShockRing',,, Location);\n\t\t\t\tSE.Lifespan = 0.5;\t\t\n\t\t\t}\n\t\tSetTimer(0.5,False);\n\t}\n\tif(myOwner != None && Range==1)\n\t{\n\t\tif(!bDoneworry)\n\t\t{\n\t\tmyOwner.PlaySound(Sound'DeusExSounds.Robot.SecurityBot3TargetAcquired', SLOT_Talk,2,,1024,);\n\t\t\tmyOwner.ClientMessage(\"RADAR Drone: Wait, \"$myOwner.PlayerReplicationinfo.PlayerName$\", did you hear something?\", 'TeamSay');\n\t\t}\n\t\tbDoneWorry=True;\n\t\t\tif(!bSilence)\n\t\t\t{\n\t\t\t\tPlaySound(BeepActive, SLOT_None,200,, 255);\n\t\t\t\tSE = Spawn(class'ShockRing',,, Location);\n\t\t\t\tSE.Lifespan = 1;\t\t\n\t\t\t}\n\t\tSetTimer(1.3,False);\n\t}\n}",
                        "locals": [
                            "local int range;",
                            "local DeusExPlayer player;",
                            "local ShockRing SE;"
                        ],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 475,
                "replication": "",
                "states": [],
                "variables": [
                    "var float explosionradius;",
                    "var() float hoverdistance; //how close to get to the player.",
                    "var DeusExPlayer myOwner;",
                    "var(Sounds) sound BeepActive, BeepPassive;",
                    "var bool bDoneDanger, bDoneWorry;",
                    "var string DangerString, WorryString;",
                    "var bool bSilence;",
                    "var ToolRadarD LinkedTool;",
                    "var int pOrders;",
                    "var int RocketsRemain, rrocketsremain;",
                    "var float DroneRange;",
                    "var class<inventory> storedinv, rstoredinv;",
                    "var string iv;"
                ]
            }
        },
        "RaidActor.uc": {
            "body": "class RaidActor extends PGActors;\n\ndefaultproperties\n{\n}\n",
            "name": "RaidActor.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "PGActors",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 6,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "Replicator.uc": {
            "body": "//=============================================================================\n// WeaponStealthPistol.\n//=============================================================================\nclass Replicator extends DeusExWeapon;\nvar() class<Actor> StoredActor;\nvar string rStoredActor;\n\nvar() rotator storedRotation;\nvar bool bRotLock;\nvar bool bAdminUnlocked, bRepAdminUnlocked;\nvar int Uses, rUses;\nvar string iv;\n\nreplication\n{\nreliable if (bNetOwner && Role==ROLE_Authority)\nrStoredActor,iv, bRepAdminUnlocked, ruses;\n}\n\nsimulated event RenderOverlays(canvas Canvas)\n{\n\tlocal DeusExPlayer P;\n\tlocal Actor CrosshairTarget;\n\tlocal float Scale, Accuracy, Dist;\n\tlocal vector HitLocation, HitNormal, StartTrace, EndTrace, X,Y,Z;\n\t\tlocal vector loc, line;\n\t\t\tlocal String KeyName, Alias, curKeyName;\n\tlocal int i;\n\tSuper.RenderOverlays(Canvas);\n\tP = DeusExPlayer(Owner);\n\tif ( P != None ) \n\t{\t\n\t\t\t\tbOwnsCrossHair = True; \n\t\t\t\tScale = Canvas.ClipX/640;\n\t\t\t\tCanvas.SetPos(0.5 * Canvas.ClipX - 16 * Scale, 0.5 * Canvas.ClipY - 16 * Scale );\n\t\t\t\t//Canvas.Style = ERenderStyle.STY_Translucent;\n\t\t\t\tCanvas.DrawColor.R = 255;\n\t\t\t\tCanvas.DrawColor.G = 250;\n\t\t\t\tCanvas.DrawColor.B = 255;\n\t\t\t\tCanvas.Font = Canvas.SmallFont;\n\t\t\t\tcurKeyName = \"\";\n\t\t\t\tfor ( i=0; i<255; i++ )\n\t\t\t\t{\n\t\t\t\t\tKeyName = Owner.ConsoleCommand ( \"KEYNAME \"$i );\n\t\t\t\t\tif ( KeyName != \"\" )\n\t\t\t\t\t{\n\t\t\t\t\t\tAlias = Owner.ConsoleCommand( \"KEYBINDING \"$KeyName );\n\t\t\t\t\t\tif ( Alias ~= \"ToggleScope\" )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurKeyName = KeyName;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ( curKeyName ~= \"\" )\n\t\t\t\t\tcurKeyName = \"NONE\";\n\t\t\t\tif(bRepAdminUnlocked)\n\t\t\t\t\tCanvas.DrawText(\"       Stored Class: \"$iv$\" [\"$curKeyName$\" to clear]\");\n\t\t\t\telse\n\t\t\t\t\tCanvas.DrawText(\"       [\"$rUses$\"/10] Stored Class: \"$iv$\" [\"$curKeyName$\" to clear]\");\n\t\t\t}\n\t\t\telse\n\t\t\t\tbOwnsCrossHair = False; // Only for compatibility with HDX50\t\t\n\t\t//}\t\n//}\t\t\n}\n\nfunction string GetDisplayString(Actor P)\n{\n\tif(P.isA('ScriptedPawn'))\n\t\treturn ScriptedPawn(P).FamiliarName;\n\telse if(P.isA('DeusExDecoration'))\n\t\treturn DeusExDecoration(P).ItemName;\n}\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t\tReloadCount = mpReloadCount;\n\t}\n}\n\nfunction GiveTo( pawn Other )\n{\n    super.Giveto(Other);\n\tDeusExPlayer(Other).ClientMessage(\"Fire at an object to begin.\");\n\tif(DeusExPlayer(Other).bAdmin)\n\t{\n\t\tbAdminUnlocked=True;\n\t\tbRepAdminUnlocked=True;\n\t\tUses=10;\n\t\trUses=10;\n\t\tDeusExPlayer(Other).ClientMessage(\"ADMIN UNLOCKED! Unlimited uses.\");\n\t}\n\telse\n\t{\n\t\tDeusExPlayer(Other).ClientMessage(\"Limited uses.\");\n\t\tUses=10;\n\t\trUses=10;\n\t\tbAdminUnlocked=False;\n\t\tbRepAdminUnlocked=false;\n\t}\n\tStoredActor = None;\n\trstoredactor = \"NONE\";\n\tiv = \"NONE\";\n\tSetTimer(10,True);\n}\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\nfunction ProcessTraceHit(Actor Other, Vector HitLocation, Vector HitNormal, Vector X, Vector Y, Vector Z)\n{\n\tlocal float        mult;\n\tlocal name         damageType;\n\tlocal DeusExPlayer dxPlayer, DXP;\n\tlocal Pawn P;\n\t\n\tif(StoredActor == None)\n\t{\n\t\tif(Other.isa('ScriptedPawn'))\n\t\t{\n\t\t\tStoredActor = Other.Class;\n\t\t\trstoredactor = GetDisplayString(Other);\n\t\t\tStoredRotation = Other.Rotation;\n\t\t\tiv = GetDisplayString(Other);\n\t\t\tDeusExPlayer(Owner).ClientMessage(\"Stored: \"$GetDisplayString(Other));\n\t\t\tDeusExPlayer(Owner).ClientMessage(\"Fire now spawns. Laser to toggle rotation. Scope to clear\");\n\t\t\treturn;\n\t\t}\n\t\telse if(Other.isa('Decoration'))\n\t\t{\n\t\t\tStoredActor = Other.Class;\n\t\t\trstoredactor = GetDisplayString(Other);;\n\t\t\tStoredRotation = Other.Rotation;\n\t\t\tiv = GetDisplayString(Other);\n\t\t\tDeusExPlayer(Owner).ClientMessage(\"Stored: \"$GetDisplayString(Other));\n\t\t\tDeusExPlayer(Owner).ClientMessage(\"Fire now spawns. Laser to toggle rotation. Scope to clear\");\n\t\t\treturn;\n\t\t}\t\t\n\t}\n\telse\n\t{\n\t\tif(bAdminUnlocked)\n\t\t{\n\t\t\tif(bRotLock)\n\t\t\tSpawn(StoredActor,,,HitLocation, StoredRotation);\n\t\t\telse\n\t\t\tSpawn(StoredActor,,,HitLocation, Owner.Rotation);\t\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(Uses > 0)\n\t\t\t{\n\t\t\t\tUses--;\n\t\t\t\trUses=Uses;\n\t\t\t\tDeusExPlayer(Owner).ClientMessage(Uses$\" uses remaining...\");\n\t\t\t\t\n\t\t\t\tif(bRotLock)\n\t\t\t\tSpawn(StoredActor,,,HitLocation, StoredRotation);\n\t\t\t\telse\n\t\t\t\tSpawn(StoredActor,,,HitLocation, Owner.Rotation);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tDeusExPlayer(Owner).ClientMessage(\"Replicator is used up and needs to recharge...\");\n\t\t\t}\t\t\n\t\t}\n\t}\n}\n\nfunction Timer()\n{\n\tif(Uses < 10)\n\t{\n\tUses++;\n\trUses=Uses;\n\tDeusExPlayer(Owner).ClientMessage(\"Replicator is charging... Now at \"$Uses$\"/10\");\t\n\t}\n\n}\n\nsimulated function float CalculateAccuracy()\n{\n\treturn 0.000000; //Dirty hack to always return dead on accuracy.\n}\n\nstate NormalFire //(Thanks to JimBowen for this Infinite ammo code) \n{ \n   Begin: \n      if ((ClipCount >= ReloadCount) && (ReloadCount != 0)) \n      { \n         if (!bAutomatic) \n         { \n            bFiring = False; \n            FinishAnim(); \n         } \n    \n         if (Owner != None) \n         { \n            if (Owner.IsA('DeusExPlayer')) \n            { \n               bFiring = False; \n            } \n            else if (Owner.IsA('ScriptedPawn')) \n            { \n               bFiring = False; \n               ReloadAmmo(); \n            } \n         } \n         else \n         { \n            if (bHasMuzzleFlash) \n               EraseMuzzleFlashTexture(); \n            GotoState('Idle'); \n         } \n      } \n      if ( bAutomatic && (( Level.NetMode == NM_DedicatedServer ) || ((Level.NetMode == NM_ListenServer) && Owner.IsA('DeusExPlayer') && !DeusExPlayer(Owner).PlayerIsListenClient()))) \n         GotoState('Idle'); \n    \n      Sleep(GetShotTime()); \n      if (bAutomatic) \n      { \n         GenerateBullet();       // In multiplayer bullets are generated by the client which will let the server know when \n         Goto('Begin'); \n      } \n      bFiring = False; \n      FinishAnim(); \n    \n   /*      // if ReloadCount is 0 and we're not hand to hand, then this is a \n      // single-use weapon so destroy it after firing once \n      if ((ReloadCount == 0) && !bHandToHand) \n      { \n         if (DeusExPlayer(Owner) != None) \n            DeusExPlayer(Owner).RemoveItemFromSlot(Self);   // remove it from the inventory grid \n         Destroy(); \n      } \n      */              // Do I REALLY need all that crap JUST for infinite ammo? \n      ReadyToFire(); \n   Done: \n      bFiring = False; \n      Finish(); \n}\n\nfunction ScopeToggle()\n{\n\tif(StoredActor != None)\n\t{\n\tStoredActor = None;\n\trstoredactor = \"NONE\";\n\tiv = \"NONE\";\n\tDeusExPlayer(Owner).ClientMessage(\"Object cleared.\");\n\t}\n}\n\nfunction LaserToggle()\n{\n\tif(StoredActor != None)\n\t{\n\tbRotLock = !bRotLock;\n\tDeusExPlayer(Owner).ClientMessage(\"rotation Lock: \"$bRotLock);\n\t}\n}\n\ndefaultproperties\n{\n     rstoredactor=\"NONE\"\n     GoverningSkill=Class'DeusEx.SkillWeaponPistol'\n     NoiseLevel=0.010000\n     ShotTime=0.150000\n     reloadTime=1.500000\n     HitDamage=0\n     maxRange=4800\n     AccurateRange=2400\n     BaseAccuracy=0.800000\n     bCanHaveScope=True\n     ScopeFOV=25\n     bCanHaveLaser=True\n     recoilStrength=0.100000\n     mpBaseAccuracy=0.200000\n     mpAccurateRange=1200\n     mpMaxRange=1200\n     bCanHaveModBaseAccuracy=True\n     bCanHaveModReloadCount=True\n     bCanHaveModAccurateRange=True\n     bCanHaveModReloadTime=True\n     bInstantHit=True\n     FireOffset=(X=-24.000000,Y=10.000000,Z=14.000000)\n     shakemag=50.000000\n     FireSound=Sound'DeusExSounds.Weapons.StealthPistolFire'\n     AltFireSound=Sound'DeusExSounds.Weapons.StealthPistolReloadEnd'\n     CockingSound=Sound'DeusExSounds.Weapons.StealthPistolReload'\n     SelectSound=Sound'DeusExSounds.Weapons.StealthPistolSelect'\n     InventoryGroup=147\n     ItemName=\"Replicator Gun\"\n     PlayerViewOffset=(X=24.000000,Y=-10.000000,Z=-14.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.StealthPistol'\n     PickupViewMesh=LodMesh'DeusExItems.StealthPistolPickup'\n     ThirdPersonMesh=LodMesh'DeusExItems.StealthPistol3rd'\n     Icon=Texture'DeusExUI.Icons.BeltIconStealthPistol'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconStealthPistol'\n     largeIconWidth=47\n     largeIconHeight=37\n     Description=\"The stealth pistol is a variant of the standard 10mm pistol with a larger clip and integrated silencer designed for wet work at very close ranges.\"\n     beltDescription=\"REPLICATE\"\n     Mesh=LodMesh'DeusExItems.StealthPistolPickup'\n     CollisionRadius=8.000000\n     CollisionHeight=0.800000\n}\n",
            "name": "Replicator.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "rstoredactor=\"NONE\"",
                    "GoverningSkill=Class'DeusEx.SkillWeaponPistol'",
                    "NoiseLevel=0.010000",
                    "ShotTime=0.150000",
                    "reloadTime=1.500000",
                    "HitDamage=0",
                    "maxRange=4800",
                    "AccurateRange=2400",
                    "BaseAccuracy=0.800000",
                    "bCanHaveScope=True",
                    "ScopeFOV=25",
                    "bCanHaveLaser=True",
                    "recoilStrength=0.100000",
                    "mpBaseAccuracy=0.200000",
                    "mpAccurateRange=1200",
                    "mpMaxRange=1200",
                    "bCanHaveModBaseAccuracy=True",
                    "bCanHaveModReloadCount=True",
                    "bCanHaveModAccurateRange=True",
                    "bCanHaveModReloadTime=True",
                    "bInstantHit=True",
                    "FireOffset=(X=-24.000000,Y=10.000000,Z=14.000000)",
                    "shakemag=50.000000",
                    "FireSound=Sound'DeusExSounds.Weapons.StealthPistolFire'",
                    "AltFireSound=Sound'DeusExSounds.Weapons.StealthPistolReloadEnd'",
                    "CockingSound=Sound'DeusExSounds.Weapons.StealthPistolReload'",
                    "SelectSound=Sound'DeusExSounds.Weapons.StealthPistolSelect'",
                    "InventoryGroup=147",
                    "ItemName=\"Replicator Gun\"",
                    "PlayerViewOffset=(X=24.000000,Y=-10.000000,Z=-14.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.StealthPistol'",
                    "PickupViewMesh=LodMesh'DeusExItems.StealthPistolPickup'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.StealthPistol3rd'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconStealthPistol'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconStealthPistol'",
                    "largeIconWidth=47",
                    "largeIconHeight=37",
                    "Description=\"The stealth pistol is a variant of the standard 10mm pistol with a larger clip and integrated silencer designed for wet work at very close ranges.\"",
                    "beltDescription=\"REPLICATE\"",
                    "Mesh=LodMesh'DeusExItems.StealthPistolPickup'",
                    "CollisionRadius=8.000000",
                    "CollisionHeight=0.800000"
                ],
                "exec": [],
                "extends": "DeusExWeapon",
                "functions": {
                    "CalculateAccuracy": {
                        "body": "{\n\treturn 0.000000; //Dirty hack to always return dead on accuracy.\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "CalculateAccuracy",
                        "native": false,
                        "param": [],
                        "return": "float"
                    },
                    "GetDisplayString": {
                        "body": "{\n\tif(P.isA('ScriptedPawn'))\n\t\treturn ScriptedPawn(P).FamiliarName;\n\telse if(P.isA('DeusExDecoration'))\n\t\treturn DeusExDecoration(P).ItemName;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetDisplayString",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "P"
                            ]
                        ],
                        "return": "string"
                    },
                    "GiveTo": {
                        "body": "{\n    super.Giveto(Other);\n\tDeusExPlayer(Other).ClientMessage(\"Fire at an object to begin.\");\n\tif(DeusExPlayer(Other).bAdmin)\n\t{\n\t\tbAdminUnlocked=True;\n\t\tbRepAdminUnlocked=True;\n\t\tUses=10;\n\t\trUses=10;\n\t\tDeusExPlayer(Other).ClientMessage(\"ADMIN UNLOCKED! Unlimited uses.\");\n\t}\n\telse\n\t{\n\t\tDeusExPlayer(Other).ClientMessage(\"Limited uses.\");\n\t\tUses=10;\n\t\trUses=10;\n\t\tbAdminUnlocked=False;\n\t\tbRepAdminUnlocked=false;\n\t}\n\tStoredActor = None;\n\trstoredactor = \"NONE\";\n\tiv = \"NONE\";\n\tSetTimer(10,True);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "GiveTo",
                        "native": false,
                        "param": [
                            [
                                "pawn",
                                "Other"
                            ]
                        ],
                        "return": ""
                    },
                    "LaserToggle": {
                        "body": "{\n\tif(StoredActor != None)\n\t{\n\tbRotLock = !bRotLock;\n\tDeusExPlayer(Owner).ClientMessage(\"rotation Lock: \"$bRotLock);\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "LaserToggle",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t\tReloadCount = mpReloadCount;\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ProcessTraceHit": {
                        "body": "{\n\t\n\tif(StoredActor == None)\n\t{\n\t\tif(Other.isa('ScriptedPawn'))\n\t\t{\n\t\t\tStoredActor = Other.Class;\n\t\t\trstoredactor = GetDisplayString(Other);\n\t\t\tStoredRotation = Other.Rotation;\n\t\t\tiv = GetDisplayString(Other);\n\t\t\tDeusExPlayer(Owner).ClientMessage(\"Stored: \"$GetDisplayString(Other));\n\t\t\tDeusExPlayer(Owner).ClientMessage(\"Fire now spawns. Laser to toggle rotation. Scope to clear\");\n\t\t\treturn;\n\t\t}\n\t\telse if(Other.isa('Decoration'))\n\t\t{\n\t\t\tStoredActor = Other.Class;\n\t\t\trstoredactor = GetDisplayString(Other);;\n\t\t\tStoredRotation = Other.Rotation;\n\t\t\tiv = GetDisplayString(Other);\n\t\t\tDeusExPlayer(Owner).ClientMessage(\"Stored: \"$GetDisplayString(Other));\n\t\t\tDeusExPlayer(Owner).ClientMessage(\"Fire now spawns. Laser to toggle rotation. Scope to clear\");\n\t\t\treturn;\n\t\t}\t\t\n\t}\n\telse\n\t{\n\t\tif(bAdminUnlocked)\n\t\t{\n\t\t\tif(bRotLock)\n\t\t\tSpawn(StoredActor,,,HitLocation, StoredRotation);\n\t\t\telse\n\t\t\tSpawn(StoredActor,,,HitLocation, Owner.Rotation);\t\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(Uses > 0)\n\t\t\t{\n\t\t\t\tUses--;\n\t\t\t\trUses=Uses;\n\t\t\t\tDeusExPlayer(Owner).ClientMessage(Uses$\" uses remaining...\");\n\t\t\t\t\n\t\t\t\tif(bRotLock)\n\t\t\t\tSpawn(StoredActor,,,HitLocation, StoredRotation);\n\t\t\t\telse\n\t\t\t\tSpawn(StoredActor,,,HitLocation, Owner.Rotation);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tDeusExPlayer(Owner).ClientMessage(\"Replicator is used up and needs to recharge...\");\n\t\t\t}\t\t\n\t\t}\n\t}\n}",
                        "locals": [
                            "local float        mult;",
                            "local name         damageType;",
                            "local DeusExPlayer dxPlayer, DXP;",
                            "local Pawn P;"
                        ],
                        "modifiers": [],
                        "name": "ProcessTraceHit",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Other"
                            ],
                            [
                                "Vector",
                                "HitLocation"
                            ],
                            [
                                "Vector",
                                "HitNormal"
                            ],
                            [
                                "Vector",
                                "X"
                            ],
                            [
                                "Vector",
                                "Y"
                            ],
                            [
                                "Vector",
                                "Z"
                            ]
                        ],
                        "return": ""
                    },
                    "RenderOverlays": {
                        "body": "{\n\tSuper.RenderOverlays(Canvas);\n\tP = DeusExPlayer(Owner);\n\tif ( P != None ) \n\t{\t\n\t\t\t\tbOwnsCrossHair = True; \n\t\t\t\tScale = Canvas.ClipX/640;\n\t\t\t\tCanvas.SetPos(0.5 * Canvas.ClipX - 16 * Scale, 0.5 * Canvas.ClipY - 16 * Scale );\n\t\t\t\t//Canvas.Style = ERenderStyle.STY_Translucent;\n\t\t\t\tCanvas.DrawColor.R = 255;\n\t\t\t\tCanvas.DrawColor.G = 250;\n\t\t\t\tCanvas.DrawColor.B = 255;\n\t\t\t\tCanvas.Font = Canvas.SmallFont;\n\t\t\t\tcurKeyName = \"\";\n\t\t\t\tfor ( i=0; i<255; i++ )\n\t\t\t\t{\n\t\t\t\t\tKeyName = Owner.ConsoleCommand ( \"KEYNAME \"$i );\n\t\t\t\t\tif ( KeyName != \"\" )\n\t\t\t\t\t{\n\t\t\t\t\t\tAlias = Owner.ConsoleCommand( \"KEYBINDING \"$KeyName );\n\t\t\t\t\t\tif ( Alias ~= \"ToggleScope\" )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurKeyName = KeyName;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ( curKeyName ~= \"\" )\n\t\t\t\t\tcurKeyName = \"NONE\";\n\t\t\t\tif(bRepAdminUnlocked)\n\t\t\t\t\tCanvas.DrawText(\"       Stored Class: \"$iv$\" [\"$curKeyName$\" to clear]\");\n\t\t\t\telse\n\t\t\t\t\tCanvas.DrawText(\"       [\"$rUses$\"/10] Stored Class: \"$iv$\" [\"$curKeyName$\" to clear]\");\n\t\t\t}\n\t\t\telse\n\t\t\t\tbOwnsCrossHair = False; // Only for compatibility with HDX50\t\t\n\t\t//}",
                        "locals": [
                            "local DeusExPlayer P;",
                            "local Actor CrosshairTarget;",
                            "local float Scale, Accuracy, Dist;",
                            "local vector HitLocation, HitNormal, StartTrace, EndTrace, X,Y,Z;",
                            "local vector loc, line;",
                            "local String KeyName, Alias, curKeyName;",
                            "local int i;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "RenderOverlays",
                        "native": false,
                        "param": [
                            [
                                "canvas",
                                "Canvas"
                            ]
                        ],
                        "return": ""
                    },
                    "ScopeToggle": {
                        "body": "{\n\tif(StoredActor != None)\n\t{\n\tStoredActor = None;\n\trstoredactor = \"NONE\";\n\tiv = \"NONE\";\n\tDeusExPlayer(Owner).ClientMessage(\"Object cleared.\");\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "ScopeToggle",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    },
                    "Timer": {
                        "body": "{\n\tif(Uses < 10)\n\t{\n\tUses++;\n\trUses=Uses;\n\tDeusExPlayer(Owner).ClientMessage(\"Replicator is charging... Now at \"$Uses$\"/10\");\t\n\t}\n\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 321,
                "replication": "",
                "states": [],
                "variables": [
                    "var() class<Actor> StoredActor;",
                    "var string rStoredActor;",
                    "var() rotator storedRotation;",
                    "var bool bRotLock;",
                    "var bool bAdminUnlocked, bRepAdminUnlocked;",
                    "var int Uses, rUses;",
                    "var string iv;"
                ]
            }
        },
        "RestPoint.uc": {
            "body": "//=============================================\n// RestPoint\n//=============================================\nClass RestPoint extends DeusExDecoration;\n\nvar DeusExPlayer ConfirmRest;\nvar DeusExPlayer Rester;\nvar() string RestPointMessage;\n\nfunction Frob(Actor Frobber, Inventory frobWith) \n{\n\tlocal DeusExPlayer P;\n\n\tSuper.Frob(frobber, frobwith);\n\n\tP=DeusExPlayer(Frobber);\n\t\n\tif(Rester != None)\n\t\treturn;\n\t\t\n\tif(P == ConfirmRest)\n\t{\n\t\tPlayerRest(P);\n\t\treturn;\n\t}\n\n\tP.ClientMessage(RestPointMessage);\n\tConfirmRest = P;\n}\n\nfunction PlayerRest(DeusExPlayer P)\n{\n\tP.HealPlayer(200, false);\n\tP.ClientFlash(6, vect(1000,1000,1000));\n\tbBlockPlayers = true;\n\tRester = P;\n\tSetTimer(4.5, false);\n}\n\nfunction Tick(float deltaTime)\n{\n\tif(Rester!=None)\n\t{\n\t\tRester.SetLocation(Location);\n\t}\n}\n\nfunction Timer()\n{\n\tRester.ClientMessage(\"You're rested...\");\n\tRester = none; //Free to go.\n\tbBlockPlayers = false;\n}\n\ndefaultproperties\n{\n     RestPointMessage=\"It seems okay to rest here for a while. Press again to confirm.\"\n     bInvincible=True\n     ItemName=\"Rest Point\"\n     bPushable=False\n     DrawType=DT_Sprite\n     Style=STY_Translucent\n     Texture=Texture'DeusExDeco.Skins.AlarmLightTex6'\n     Skin=Texture'DeusExDeco.Skins.AlarmLightTex6'\n     DrawScale=1.500000\n     CollisionRadius=45.200001\n     CollisionHeight=32.000000\n     bBlockPlayers=False\n}\n",
            "name": "RestPoint.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "RestPointMessage=\"It seems okay to rest here for a while. Press again to confirm.\"",
                    "bInvincible=True",
                    "ItemName=\"Rest Point\"",
                    "bPushable=False",
                    "DrawType=DT_Sprite",
                    "Style=STY_Translucent",
                    "Texture=Texture'DeusExDeco.Skins.AlarmLightTex6'",
                    "Skin=Texture'DeusExDeco.Skins.AlarmLightTex6'",
                    "DrawScale=1.500000",
                    "CollisionRadius=45.200001",
                    "CollisionHeight=32.000000",
                    "bBlockPlayers=False"
                ],
                "exec": [],
                "extends": "DeusExDecoration",
                "functions": {
                    "Frob": {
                        "body": "{\n\n\tSuper.Frob(frobber, frobwith);\n\n\tP=DeusExPlayer(Frobber);\n\t\n\tif(Rester != None)\n\t\treturn;\n\t\t\n\tif(P == ConfirmRest)\n\t{\n\t\tPlayerRest(P);\n\t\treturn;\n\t}\n\n\tP.ClientMessage(RestPointMessage);\n\tConfirmRest = P;\n}",
                        "locals": [
                            "local DeusExPlayer P;"
                        ],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    },
                    "PlayerRest": {
                        "body": "{\n\tP.HealPlayer(200, false);\n\tP.ClientFlash(6, vect(1000,1000,1000));\n\tbBlockPlayers = true;\n\tRester = P;\n\tSetTimer(4.5, false);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PlayerRest",
                        "native": false,
                        "param": [
                            [
                                "DeusExPlayer",
                                "P"
                            ]
                        ],
                        "return": ""
                    },
                    "Tick": {
                        "body": "{\n\tif(Rester!=None)\n\t{\n\t\tRester.SetLocation(Location);\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltaTime"
                            ]
                        ],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\tRester.ClientMessage(\"You're rested...\");\n\tRester = none; //Free to go.\n\tbBlockPlayers = false;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 70,
                "replication": "",
                "states": [],
                "variables": [
                    "var DeusExPlayer ConfirmRest;",
                    "var DeusExPlayer Rester;",
                    "var() string RestPointMessage;"
                ]
            }
        },
        "ReturnArmour.uc": {
            "body": "//=============================================================================\n// AdaptiveArmor.\n//=============================================================================\nclass ReturnArmour extends DeusExPickup;\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\ndefaultproperties\n{\n     ItemName=\"Return Armour\"\n     ItemArticle=\"some\"\n     PlayerViewOffset=(X=30.000000,Z=-12.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.AdaptiveArmor'\n     PickupViewMesh=LodMesh'DeusExItems.AdaptiveArmor'\n     ThirdPersonMesh=LodMesh'DeusExItems.AdaptiveArmor'\n     Charge=500\n     LandSound=Sound'DeusExSounds.Generic.PaperHit2'\n     Icon=Texture'DeusExUI.Icons.BeltIconArmorAdaptive'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconArmorAdaptive'\n     largeIconWidth=35\n     largeIconHeight=49\n     Description=\"Integrating woven fiber-optics and an advanced computing system, thermoptic camo can render an agent invisible to both humans and bots by dynamically refracting light and radar waves; however, the high power drain makes it impractial for more than short-term use, after which the circuitry is fused and it becomes useless.\"\n     beltDescription=\"RETURN\"\n     Mesh=LodMesh'DeusExItems.AdaptiveArmor'\n     MultiSkins(1)=FireTexture'Effects.UserInterface.WhiteStatic'\n     CollisionRadius=11.500000\n     CollisionHeight=13.810000\n     Mass=30.000000\n     Buoyancy=20.000000\n}\n",
            "name": "ReturnArmour.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "ItemName=\"Return Armour\"",
                    "ItemArticle=\"some\"",
                    "PlayerViewOffset=(X=30.000000,Z=-12.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.AdaptiveArmor'",
                    "PickupViewMesh=LodMesh'DeusExItems.AdaptiveArmor'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.AdaptiveArmor'",
                    "Charge=500",
                    "LandSound=Sound'DeusExSounds.Generic.PaperHit2'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconArmorAdaptive'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconArmorAdaptive'",
                    "largeIconWidth=35",
                    "largeIconHeight=49",
                    "Description=\"Integrating woven fiber-optics and an advanced computing system, thermoptic camo can render an agent invisible to both humans and bots by dynamically refracting light and radar waves; however, the high power drain makes it impractial for more than short-term use, after which the circuitry is fused and it becomes useless.\"",
                    "beltDescription=\"RETURN\"",
                    "Mesh=LodMesh'DeusExItems.AdaptiveArmor'",
                    "MultiSkins(1)=FireTexture'Effects.UserInterface.WhiteStatic'",
                    "CollisionRadius=11.500000",
                    "CollisionHeight=13.810000",
                    "Mass=30.000000",
                    "Buoyancy=20.000000"
                ],
                "exec": [],
                "extends": "DeusExPickup",
                "functions": {
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 33,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "RocketDrone.uc": {
            "body": "class RocketDrone extends DeusExProjectile;\n\nvar float time;\nvar float dist;\nvar Rotator dir;\nvar vector TargetLocation;\nvar rotator TargetDir;\nvar rotator RandomAdd;\nvar rotator HeightAdjAdd;\nvar rotator Rand;\nvar() float proxRadius; \nvar() bool bfalloff; \nvar() float certainity;\nvar float certainity2;\nvar() float drunkness; \nvar() float sharpness; \nvar() float heightAdj; \nvar() float tickTime; \nvar() float minMass; \nvar rotator RotationOld;\nvar Pawn P;\nvar Pawn Itarget; \nvar pawn Ignorer;\n\nfunction PostBeginPlay()\n{\n\tTargetLocation = Location; \n\tbRotateToDesired = True;\n\tDesiredRotation = Rotation;\n}\n\nsimulated function Tick(float deltaTime)\n{\n\tif (time >= tickTime)\n\t{\n\t\ttime = 0;\n\t\tif ((dist > proxRadius) || (Itarget == None)) //then try find a new target\n\t\t{\n\t\t\tItarget = None;\n\t\t\tforeach RadiusActors(class'Pawn', P, proxRadius)\n\t\t\t{\n\t\t\t\tif ((P != None) && (P.Mass >=40) && (P != Ignorer))\n\t\t\t\t{\n\t\t\t\t\tif (P != Owner)\n\t\t\t\t\t\tItarget = P;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\tItarget = None;\n\t\tDoGuidance();\n\t}\n\telse\n\t\ttime += deltaTime;\n}\n\nfunction DoGuidance()\n{\n\tif (Itarget != None)\n\t{\n\t\tTargetLocation = Itarget.Location;\n\t\tdist = Vsize(TargetLocation - Location);\n\t\tif ((bfalloff) && (proxRadius != 0))\n\t\t\tcertainity2 = ((proxRadius-dist) * certainity ) / proxRadius;\n\t\telse\n\t\t\tcertainity2 = certainity;\n\t}\n\telse\n\t\tcertainity2 = 0;\n\tRand = Rotator(Vrand());\n\tTargetDir = Rotator(TargetLocation - Location);\n\tRandomAdd = (TargetDir-Rotation)*certainity2+Rand*(1-certainity2)*drunkness;\n\tHeightAdjAdd = Rotation*heightAdj + RandomAdd * sharpness * (1-heightAdj);\n\tRotationOld = Rotation; \n\tDesiredRotation = RotationOld + RandomAdd*sharpness;\n\n\tvelocity = Vector(Rotation) * Speed;\n}\n\ndefaultproperties\n{\n     proxRadius=800.000000\n     certainity=1.000000\n     drunkness=0.100000\n     sharpness=1.000000\n     tickTime=0.100000\n     minMass=40.000000\n     bExplodes=True\n     bBlood=True\n     bDebris=True\n     blastRadius=64.000000\n     DamageType=exploded\n     AccurateRange=14400\n     maxRange=24000\n     ItemName=\"Drone Rocket\"\n     ItemArticle=\"a\"\n     speed=700.000000\n     MaxSpeed=1500.000000\n     Damage=50.000000\n     MomentumTransfer=10000\n     SpawnSound=Sound'DeusExSounds.Weapons.GEPGunFire'\n     ImpactSound=Sound'DeusExSounds.Generic.SmallExplosion1'\n     Mesh=LodMesh'DeusExItems.Rocket'\n     DrawScale=0.100000\n     SoundRadius=16\n     SoundVolume=196\n     AmbientSound=Sound'DeusExSounds.Special.RocketLoop'\n     RotationRate=(Pitch=99999)\n}\n",
            "name": "RocketDrone.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "proxRadius=800.000000",
                    "certainity=1.000000",
                    "drunkness=0.100000",
                    "sharpness=1.000000",
                    "tickTime=0.100000",
                    "minMass=40.000000",
                    "bExplodes=True",
                    "bBlood=True",
                    "bDebris=True",
                    "blastRadius=64.000000",
                    "DamageType=exploded",
                    "AccurateRange=14400",
                    "maxRange=24000",
                    "ItemName=\"Drone Rocket\"",
                    "ItemArticle=\"a\"",
                    "speed=700.000000",
                    "MaxSpeed=1500.000000",
                    "Damage=50.000000",
                    "MomentumTransfer=10000",
                    "SpawnSound=Sound'DeusExSounds.Weapons.GEPGunFire'",
                    "ImpactSound=Sound'DeusExSounds.Generic.SmallExplosion1'",
                    "Mesh=LodMesh'DeusExItems.Rocket'",
                    "DrawScale=0.100000",
                    "SoundRadius=16",
                    "SoundVolume=196",
                    "AmbientSound=Sound'DeusExSounds.Special.RocketLoop'",
                    "RotationRate=(Pitch=99999)"
                ],
                "exec": [],
                "extends": "DeusExProjectile",
                "functions": {
                    "DoGuidance": {
                        "body": "{\n\tif (Itarget != None)\n\t{\n\t\tTargetLocation = Itarget.Location;\n\t\tdist = Vsize(TargetLocation - Location);\n\t\tif ((bfalloff) && (proxRadius != 0))\n\t\t\tcertainity2 = ((proxRadius-dist) * certainity ) / proxRadius;\n\t\telse\n\t\t\tcertainity2 = certainity;\n\t}\n\telse\n\t\tcertainity2 = 0;\n\tRand = Rotator(Vrand());\n\tTargetDir = Rotator(TargetLocation - Location);\n\tRandomAdd = (TargetDir-Rotation)*certainity2+Rand*(1-certainity2)*drunkness;\n\tHeightAdjAdd = Rotation*heightAdj + RandomAdd * sharpness * (1-heightAdj);\n\tRotationOld = Rotation; \n\tDesiredRotation = RotationOld + RandomAdd*sharpness;\n\n\tvelocity = Vector(Rotation) * Speed;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "DoGuidance",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PostBeginPlay": {
                        "body": "{\n\tTargetLocation = Location; \n\tbRotateToDesired = True;\n\tDesiredRotation = Rotation;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Tick": {
                        "body": "{\n\tif (time >= tickTime)\n\t{\n\t\ttime = 0;\n\t\tif ((dist > proxRadius) || (Itarget == None)) //then try find a new target\n\t\t{\n\t\t\tItarget = None;\n\t\t\tforeach RadiusActors(class'Pawn', P, proxRadius)\n\t\t\t{\n\t\t\t\tif ((P != None) && (P.Mass >=40) && (P != Ignorer))\n\t\t\t\t{\n\t\t\t\t\tif (P != Owner)\n\t\t\t\t\t\tItarget = P;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\tItarget = None;\n\t\tDoGuidance();\n\t}\n\telse\n\t\ttime += deltaTime;\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltaTime"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 110,
                "replication": "",
                "states": [],
                "variables": [
                    "var float time;",
                    "var float dist;",
                    "var Rotator dir;",
                    "var vector TargetLocation;",
                    "var rotator TargetDir;",
                    "var rotator RandomAdd;",
                    "var rotator HeightAdjAdd;",
                    "var rotator Rand;",
                    "var() float proxRadius;",
                    "var() bool bfalloff;",
                    "var() float certainity;",
                    "var float certainity2;",
                    "var() float drunkness;",
                    "var() float sharpness;",
                    "var() float heightAdj;",
                    "var() float tickTime;",
                    "var() float minMass;",
                    "var rotator RotationOld;",
                    "var Pawn P;",
                    "var Pawn Itarget;",
                    "var pawn Ignorer;"
                ]
            }
        },
        "RocketHostage.uc": {
            "body": "//=============================================================================\n// RocketHostage.\n//=============================================================================\nclass RocketHostage extends RocketMini;\n\nauto state Flying\n{\n  simulated function ProcessTouch(actor Other, vector HitLocation)\n  {\n    local Hostager Hostaged;\n    local Hostager Selector;\n    local int FoundSelect;\n\n    FoundSelect = 0;\n\n    if(Other.IsA('Pawn') && Other != Instigator)\n    {\n      foreach AllActors(Class'Hostager', Selector)\n      {\n        if(Selector != None)\n        {\n          if(Selector.Instigator == Instigator || Selector.Player == Pawn(Other))\n          {\n            FoundSelect = 1;\n          }\n        }\n      }\n      if(FoundSelect == 0)\n      {\n        Hostaged = Spawn(class'Hostager');\n        if(Hostaged != none)\n        {\n          Hostaged.Player = DeusExPlayer(Other);\n          Hostaged.SetOwner(DeusExPlayer(Other));\n          Hostaged.Instigator = Instigator;\n        }\n      }\n    }\n    Super.ProcessTouch(Other, HitLocation);\n  }\n}\n\nsimulated function ProcessTouch(actor Other, vector HitLocation)\n{\n  local Hostager Hostaged;\n  local Hostager Selector;\n  local int FoundSelect;\n\n  FoundSelect = 0;\n\n  if(Other.IsA('DeusExPlayer') && Other != Instigator)\n  {\n    foreach AllActors(Class'Hostager', Selector)\n    {\n      if(Selector != None)\n      {\n        if(Selector.Instigator == Instigator || Selector.Player == Pawn(Other))\n        {\n          FoundSelect = 1;\n        }\n      }\n    }\n    if(FoundSelect == 0)\n    {\n      Hostaged = Spawn(class'Hostager');\n      if(Hostaged != none)\n      {\n        Hostaged.Player = DeusExPlayer(Other);\n        Hostaged.SetOwner(DeusExPlayer(Other));\n        Hostaged.Instigator = Instigator;\n      }\n    }\n  }\n  Super.ProcessTouch(Other, HitLocation);\n}\n\ndefaultproperties\n{\n     bExplodes=False\n     Damage=0.000000\n}\n",
            "name": "RocketHostage.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bExplodes=False",
                    "Damage=0.000000"
                ],
                "exec": [],
                "extends": "RocketMini",
                "functions": {
                    "ProcessTouch": {
                        "body": "{\n\n  FoundSelect = 0;\n\n  if(Other.IsA('DeusExPlayer') && Other != Instigator)\n  {\n    foreach AllActors(Class'Hostager', Selector)\n    {\n      if(Selector != None)\n      {\n        if(Selector.Instigator == Instigator || Selector.Player == Pawn(Other))\n        {\n          FoundSelect = 1;\n        }\n      }\n    }\n    if(FoundSelect == 0)\n    {\n      Hostaged = Spawn(class'Hostager');\n      if(Hostaged != none)\n      {\n        Hostaged.Player = DeusExPlayer(Other);\n        Hostaged.SetOwner(DeusExPlayer(Other));\n        Hostaged.Instigator = Instigator;\n      }\n    }\n  }\n  Super.ProcessTouch(Other, HitLocation);\n}",
                        "locals": [
                            "local Hostager Hostaged;",
                            "local Hostager Selector;",
                            "local int FoundSelect;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "ProcessTouch",
                        "native": false,
                        "param": [
                            [
                                "actor",
                                "Other"
                            ],
                            [
                                "vector",
                                "HitLocation"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 82,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "SSRING.uc": {
            "body": "//=============================================================================\n// ssRing.  Copyright (C) 2002 Hejhujka & Luminous Path.\n//=============================================================================\nclass SSRing extends SphereEffect;\n\nvar float blastRadius;\n\nsimulated function Tick(float deltaTime)\n{\n \n Super.Tick(DeltaTime);\n\n DrawScale = 3.0 * size * (Default.LifeSpan - LifeSpan) / Default.LifeSpan;\n ScaleGlow = 1.1 * (LifeSpan / Default.Lifespan);\n    }\n\ndefaultproperties\n{\n     LifeSpan=2.500000\n     Skin=FireTexture'Effects.liquid.Virus_SFX'\n}\n",
            "name": "SSRING.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "LifeSpan=2.500000",
                    "Skin=FireTexture'Effects.liquid.Virus_SFX'"
                ],
                "exec": [],
                "extends": "SphereEffect",
                "functions": {
                    "Tick": {
                        "body": "{\n \n Super.Tick(DeltaTime);\n\n DrawScale = 3.0 * size * (Default.LifeSpan - LifeSpan) / Default.LifeSpan;\n ScaleGlow = 1.1 * (LifeSpan / Default.Lifespan);\n    }",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltaTime"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 22,
                "replication": "",
                "states": [],
                "variables": [
                    "var float blastRadius;"
                ]
            }
        },
        "Salad.uc": {
            "body": "//=============================================================================\n// SoyFood.\n//=============================================================================\nclass Salad extends FoodMMRPG;\n\ndefaultproperties\n{\n     ItemName=\"Fresh Salad\"\n     ItemArticle=\"a packet of\"\n     PlayerViewMesh=LodMesh'DeusExItems.SoyFood'\n     PlayerViewScale=2.000000\n     PickupViewMesh=LodMesh'DeusExItems.SoyFood'\n     PickupViewScale=2.000000\n     ThirdPersonMesh=LodMesh'DeusExItems.SoyFood'\n     ThirdPersonScale=2.000000\n     Icon=Texture'PGAssets.Skins.SaladBelt'\n     largeIcon=Texture'PGAssets.Skins.SaladBelt'\n     largeIconWidth=42\n     largeIconHeight=46\n     beltDescription=\"SALAD\"\n     Skin=Texture'PGAssets.Skins.SaladTex1'\n     Mesh=LodMesh'DeusExItems.SoyFood'\n     DrawScale=2.000000\n     MultiSkins(0)=Texture'PGAssets.Skins.SaladTex1'\n     CollisionRadius=14.000000\n     CollisionHeight=2.980000\n     Mass=3.000000\n}\n",
            "name": "Salad.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "ItemName=\"Fresh Salad\"",
                    "ItemArticle=\"a packet of\"",
                    "PlayerViewMesh=LodMesh'DeusExItems.SoyFood'",
                    "PlayerViewScale=2.000000",
                    "PickupViewMesh=LodMesh'DeusExItems.SoyFood'",
                    "PickupViewScale=2.000000",
                    "ThirdPersonMesh=LodMesh'DeusExItems.SoyFood'",
                    "ThirdPersonScale=2.000000",
                    "Icon=Texture'PGAssets.Skins.SaladBelt'",
                    "largeIcon=Texture'PGAssets.Skins.SaladBelt'",
                    "largeIconWidth=42",
                    "largeIconHeight=46",
                    "beltDescription=\"SALAD\"",
                    "Skin=Texture'PGAssets.Skins.SaladTex1'",
                    "Mesh=LodMesh'DeusExItems.SoyFood'",
                    "DrawScale=2.000000",
                    "MultiSkins(0)=Texture'PGAssets.Skins.SaladTex1'",
                    "CollisionRadius=14.000000",
                    "CollisionHeight=2.980000",
                    "Mass=3.000000"
                ],
                "exec": [],
                "extends": "FoodMMRPG",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 29,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "ScoundrelManager.uc": {
            "body": "class ScoundrelManager extends Actor;\n\nvar DXScriptedPawn LS;\nvar ScoundrelMarker SM, LM;\nvar bool bSelectionProcess;\nvar PGGames myRef;\nvar class<DXScriptedPawn> ScoundrelClass;\n\nfunction UnoSelecta()\n{\nlocal int RRR;\n\n\tforeach AllActors(class'ScoundrelMarker', LM)\n\t{\n\t\tRRR = Rand(10);\n\t\t\n\t\tif(RRR >= 7)\n\t\t{\n\t\t\tSM = LM;\n\t\t\tBroadcastMessage(\"Spawn point chosen. Target will spawn shortly.\");\n\t\t\tSetTimer(20,False);\n\t\t\treturn;\n\t\t}\n\t\tif(SM != None)\n\t\t{\n\t\treturn;\n\t\t}\n\t}\n\t\n\tif(SM == None)\n\t{\n\tDosSelecta();\n\t}\n}\n\nfunction DosSelecta()\n{\nlocal int RRR;\n\n\tforeach AllActors(class'ScoundrelMarker', LM)\n\t{\n\t\tRRR = Rand(10);\n\t\t\n\t\tif(RRR >= 7)\n\t\t{\n\t\t\tSM = LM;\n\t\t\tBroadcastMessage(\"Spawn point chosen. Target will spawn shortly.\");\n\t\t\tSetTimer(20,False);\n\t\t\treturn;\n\t\t}\n\t\tif(SM != None)\n\t\t{\n\t\treturn;\n\t\t}\n\t}\n\t\n\tif(SM == None)\n\t{\n\tUnoSelecta();\n\t}\n}\n\nfunction CloseGame()\n{\n\tLS.Destroy();\n\tDestroy();\n\tBroadcastMessage(\"Scoundrel game forced end.\");\n}\n\nfunction Timer()\n{\n\tif(bSelectionProcess)\n\t{\n\t\tLS = spawn(ScoundrelClass,,,SM.Location,);\n\t\tBroadcastMessage(\"Scoundrel is in play! The Hunt Begins!\");\n\t\tbSelectionProcess=False;\n\t\tSetTimer(3,True);\n\t}\n\telse\n\t{\n\t\tif(LS == None)\n\t\t{\n\t\t\tBroadcastMessage(\"No target in play, ending Scoundrel game.\");\n\t\t\tmyRef.bscOn=False;\n\t\t\tDestroy();\n\t\t}\n\t}\n}\n\nfunction BeginPlay()\n{\nlocal int C;\n//Initiate\nbSelectionProcess=True;\n\tforeach AllActors(class'ScoundrelMarker', LM)\n\t{\n\t\tC++;\t\n\t}\n\t\t\n\tif(C == 0)\n\t{\n\t\tBroadcastMessage(\"No ScoundrelMarkers found. Cancelling startup.\");\n\t\tDestroy();\n\t}\n\tif(C < 2)\n\t{\n\t\tBroadcastMessage(\"Only \"$C$\" ScoundrelMarkers found, MINIMUM of 3 are required. Cancelling startup.\");\n\t\tDestroy();\n\t}\n\telse\n\t{\n\t\tBroadcastMessage(C$\" ScoundrelMarkers found! Randomizing selection....\");\n\t\t\tUnoSelecta();\n\t}\n}\n\ndefaultproperties\n{\n}\n",
            "name": "ScoundrelManager.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "Actor",
                "functions": {
                    "BeginPlay": {
                        "body": "{\n//Initiate\nbSelectionProcess=True;\n\tforeach AllActors(class'ScoundrelMarker', LM)\n\t{\n\t\tC++;\t\n\t}\n\t\t\n\tif(C == 0)\n\t{\n\t\tBroadcastMessage(\"No ScoundrelMarkers found. Cancelling startup.\");\n\t\tDestroy();\n\t}\n\tif(C < 2)\n\t{\n\t\tBroadcastMessage(\"Only \"$C$\" ScoundrelMarkers found, MINIMUM of 3 are required. Cancelling startup.\");\n\t\tDestroy();\n\t}\n\telse\n\t{\n\t\tBroadcastMessage(C$\" ScoundrelMarkers found! Randomizing selection....\");\n\t\t\tUnoSelecta();\n\t}\n}",
                        "locals": [
                            "local int C;"
                        ],
                        "modifiers": [],
                        "name": "BeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "CloseGame": {
                        "body": "{\n\tLS.Destroy();\n\tDestroy();\n\tBroadcastMessage(\"Scoundrel game forced end.\");\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "CloseGame",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "DosSelecta": {
                        "body": "{\n\n\tforeach AllActors(class'ScoundrelMarker', LM)\n\t{\n\t\tRRR = Rand(10);\n\t\t\n\t\tif(RRR >= 7)\n\t\t{\n\t\t\tSM = LM;\n\t\t\tBroadcastMessage(\"Spawn point chosen. Target will spawn shortly.\");\n\t\t\tSetTimer(20,False);\n\t\t\treturn;\n\t\t}\n\t\tif(SM != None)\n\t\t{\n\t\treturn;\n\t\t}\n\t}\n\t\n\tif(SM == None)\n\t{\n\tUnoSelecta();\n\t}\n}",
                        "locals": [
                            "local int RRR;"
                        ],
                        "modifiers": [],
                        "name": "DosSelecta",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\tif(bSelectionProcess)\n\t{\n\t\tLS = spawn(ScoundrelClass,,,SM.Location,);\n\t\tBroadcastMessage(\"Scoundrel is in play! The Hunt Begins!\");\n\t\tbSelectionProcess=False;\n\t\tSetTimer(3,True);\n\t}\n\telse\n\t{\n\t\tif(LS == None)\n\t\t{\n\t\t\tBroadcastMessage(\"No target in play, ending Scoundrel game.\");\n\t\t\tmyRef.bscOn=False;\n\t\t\tDestroy();\n\t\t}\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "UnoSelecta": {
                        "body": "{\n\n\tforeach AllActors(class'ScoundrelMarker', LM)\n\t{\n\t\tRRR = Rand(10);\n\t\t\n\t\tif(RRR >= 7)\n\t\t{\n\t\t\tSM = LM;\n\t\t\tBroadcastMessage(\"Spawn point chosen. Target will spawn shortly.\");\n\t\t\tSetTimer(20,False);\n\t\t\treturn;\n\t\t}\n\t\tif(SM != None)\n\t\t{\n\t\treturn;\n\t\t}\n\t}\n\t\n\tif(SM == None)\n\t{\n\tDosSelecta();\n\t}\n}",
                        "locals": [
                            "local int RRR;"
                        ],
                        "modifiers": [],
                        "name": "UnoSelecta",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 120,
                "replication": "",
                "states": [],
                "variables": [
                    "var DXScriptedPawn LS;",
                    "var ScoundrelMarker SM, LM;",
                    "var bool bSelectionProcess;",
                    "var PGGames myRef;",
                    "var class<DXScriptedPawn> ScoundrelClass;"
                ]
            }
        },
        "ScoundrelMarker.uc": {
            "body": "class ScoundrelMarker extends PGActors;\n\ndefaultproperties\n{\n     bHidden=False\n}\n",
            "name": "ScoundrelMarker.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bHidden=False"
                ],
                "exec": [],
                "extends": "PGActors",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 7,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "SecDrone.uc": {
            "body": "class SecDrone extends DXRobot;\n\nvar float explosionradius;\nvar() float hoverdistance; //how close to get to the player.\nvar DeusExPlayer AttachPlayer;\nvar float DroneRange;\nvar DeusExPlayer NotifPlayer;\n\nfunction Frob(Actor Frobber, Inventory frobWith) \n{\n}\n\nfunction Timer()\n{\n\tif(NotifPlayer != None)\n\t{\n\t\tNotifPlayer.ClientMessage(AttachPlayer.PlayerReplicationInfo.PlayerName$\" was killed by your security.\");\n\t}\n\tPlaySound(Sound'DeusExSounds.Weapons.RifleFire',,,, 256);\n\tAttachPlayer.ReducedDamageType='';\n\tAttachPlayer.TakeDamage(10000,Self,vect(0,0,0),vect(0,0,1),'Exploded');\n\tDestroy();\n}\n\nfunction bool ShouldFlee()\n{\n\treturn false;\n}\n\nauto state StartUp\n{\n\tfunction BeginState()\n\t{\n\t\tbInterruptState = true;\n\t\tbCanConverse = false;\n\n\t\tbStasis = False;\n\t\tSetDistress(false);\n\t\tBlockReactions();\n\t\tResetDestLoc();\n\t\tInitializePawn();\n\n\t\tgotostate('following');\n\t}\n\n\tfunction EndState()\n\t{\n\t\tbCanConverse = true;\n\t\tbStasis = True;\n\t\tResetReactions();\n\t}\n}\n\nstate Following\n{\n\tfunction SetFall()\n\t{\n\t\tStartFalling('Following', 'ContinueFollow');\n\t}\n\n\tfunction HitWall(vector HitNormal, actor Wall)\n\t{\n\t\tif (Physics == PHYS_Falling)\n\t\t\treturn;\n\t\tGlobal.HitWall(HitNormal, Wall);\n\t\tCheckOpenDoor(HitNormal, Wall);\n\t}\n\n\tfunction Tick(float deltaSeconds)\n\t{\n\tlocal float AreWeTooFar;\n\t      local Inventory Inv;\n\t\tGlobal.Tick(deltaSeconds);\n\t\t\n\t\tif(AttachPlayer != None)\n\t\t{\n\t\t\tif(AttachPlayer.bAdmin)\n\t\t\t{\n\t\t\t\tAttachPlayer.ClientMessage(\"Security Drone: Sorry, my mistake.\", 'TeamSay');\n\t\t\t\tDestroy();\n\t\t\t}\n\t\t\tAreWeTooFar = Abs(VSize(AttachPlayer.Location - Location));\n\t\t\tif(AreWeTooFar > 650)\n\t\t\t{\n\t\t\t\tSetCollision(false, false, false);\n\t\t\t\tbCollideWorld = true;\n\t\t\t\tSetLocation(AttachPlayer.location);\n\t\t\t\tSetCollision(true, true , true);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (BackpedalTimer >= 0)\n\t\t\tBackpedalTimer += deltaSeconds;\n\n\t\tanimTimer[1] += deltaSeconds;\n\t\tif ((Physics == PHYS_Walking) && (AttachPlayer != None))\n\t\t{\n\t\t\tif (Acceleration == vect(0,0,0))\n\t\t\t\tLookAtActor(AttachPlayer, true, true, true, 0, 0.25);\n\t\t\telse\n\t\t\t\tPlayTurnHead(LOOK_Forward, 1.0, 0.25);\n\t\t}\n\t}\n\n\tfunction bool PickDestination()\n\t{\n\t\tlocal float   dist;\n\t\tlocal float   extra;\n\t\tlocal float   distMax;\n\t\tlocal int     dir;\n\t\tlocal rotator rot;\n\t\tlocal bool    bSuccess;\n\n\t\tif(AttachPlayer == None)\n\t\t\treturn False;\n\t\tbSuccess = false;\n\t\tdestPoint = None;\n\t\tdestLoc   = vect(0, 0, 0);\n\t\textra = AttachPlayer.CollisionRadius + CollisionRadius;\n\t\tdist = VSize(AttachPlayer.Location - Location);\n\t\tdist -= extra;\n\t\tif (dist < 0)\n\t\t\tdist = 0;\n\n\t\tif ((dist > 180) || (AICanSee(AttachPlayer, , false, false, false, true) <= 0))\n\t\t{\n\t\t\tif (ActorReachable(AttachPlayer))\n\t\t\t{\n\t\t\t\trot = Rotator(AttachPlayer.Location - Location);\n\t\t\t\tdistMax = (dist-180)+45;\n\t\t\t\tif (distMax > 80)\n\t\t\t\t\tdistMax = 80;\n\t\t\t\tbSuccess = AIDirectionReachable(Location, rot.Yaw, rot.Pitch, 0, distMax, destLoc);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tMoveTarget = FindPathToward(AttachPlayer);\n\t\t\t\tif (MoveTarget != None)\n\t\t\t\t{\n\t\t\t\t\tdestPoint = MoveTarget;\n\t\t\t\t\tbSuccess = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tBackpedalTimer = -1;\n\t\t}\n\t\telse if (dist < 60)\n\t\t{\n\t\t\tif (BackpedalTimer < 0)\n\t\t\t\tBackpedalTimer = 0;\n\t\t\tif (BackpedalTimer > 1.0)  // give the player enough time to converse, if he wants to\n\t\t\t{\n\t\t\t\trot = Rotator(Location - AttachPlayer.Location);\n\t\t\t\tbSuccess = AIDirectionReachable(AttachPlayer.Location, rot.Yaw, rot.Pitch, 60+extra, 120+extra, destLoc);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\tBackpedalTimer = -1;\n\n\t\treturn (bSuccess);\n\t}\n\n\tfunction BeginState()\n\t{\n\t\tsetphysics(PHYS_flying); //added\n\t\tStandUp();\n\t\t//Disable('AnimEnd');\n\t\tbStasis = False;\n\t\tSetupWeapon(false);\n\t\tSetDistress(false);\n\t\tBackpedalTimer = -1;\n\t\tSeekPawn = None;\n\t\tEnableCheckDestLoc(true);\n\t}\n\n\tfunction EndState()\n\t{\n\t\tEnableCheckDestLoc(false);\n\t\tbAcceptBump = False;\n\t\t//Enable('AnimEnd');\n\t\tbStasis = True;\n\t\tStopBlendAnims();\n\t}\n\nBegin:\n\tAcceleration = vect(0, 0, 0);\n\tdestPoint = None;\n\tif (AttachPlayer == None)\n\t\tGotoState('Standing');\n\n\tif (!PickDestination())\n\t\tGoto('Wait');\n\nFollow:\n\tif (destPoint != None)\n\t{\n\t\tif (MoveTarget != None)\n\t\t{\n\t\t\tif (ShouldPlayWalk(MoveTarget.Location))\n\t\t\t\tPlayRunning();\n\t\t\tMoveToward(MoveTarget, MaxDesiredSpeed);\n\t\t\tCheckDestLoc(MoveTarget.Location, true);\n\t\t}\n\t\telse\n\t\t\tSleep(0.0);  // this shouldn't happen\n\t}\n\telse\n\t{\n\t\tif (ShouldPlayWalk(destLoc))\n\t\t\tPlayRunning();\n\t\tMoveTo(destLoc, MaxDesiredSpeed);\n\t\tCheckDestLoc(destLoc);\n\t}\n\tif (PickDestination())\n\t\tGoto('Follow');\n\nWait:\n\t//PlayTurning();\n\t//TurnToward(AttachPlayer);\n\tPlayWaiting();\n\nWaitLoop:\n\tAcceleration=vect(0,0,0);\n\tSleep(0.0);\n\tif (!PickDestination())\n\t\tGoto('WaitLoop');\n\telse\n\t\tGoto('Follow');\n\nContinueFollow:\nContinueFromDoor:\n\tAcceleration=vect(0,0,0);\n\tif (PickDestination())\n\t\tGoto('Follow');\n\telse\n\t\tGoto('Wait');\n\n}\n\nfunction PlayRunningAndFiring() {}\nfunction TweenToShoot(float tweentime) {}\nfunction PlayShoot() {}\nfunction TweenToAttack(float tweentime) {}\nfunction PlayAttack() {}\nfunction PlaySittingDown() {}\nfunction PlaySitting() {}\nfunction PlayStandingUp() {}\nfunction PlayRubbingEyesStart() {}\nfunction PlayRubbingEyes() {}\nfunction PlayRubbingEyesEnd() {}\nfunction PlayStunned() {}\nfunction PlayFalling() {}\nfunction PlayLanded(float impactVel) {}\nfunction PlayDuck() {}\nfunction PlayRising() {}\nfunction PlayCrawling() {}\nfunction PlayPushing() {}\nfunction PlayFiring() {}\nfunction PlayTakingHit(EHitLocation hitPos) {}\nfunction PlayCowerBegin() {}\nfunction PlayCowering() {}\nfunction PlayCowerEnd() {}\nfunction PlayPanicRunning() {}\nfunction PlayTurning() {}\nfunction TweenToWalking(float tweentime) {}\nfunction PlayWalking() {}\nfunction TweenToRunning(float tweentime) {}\nfunction PlayRunning() {}\nfunction TweenToWaiting(float tweentime) {}\nfunction PlayWaiting() {}\nfunction TweenToSwimming(float tweentime){}\nfunction PlaySwimming() {}\nfunction PlayDying(name damageType, vector hitLoc) {}\n\ndefaultproperties\n{\n     explosionRadius=100.000000\n     hoverdistance=200.000000\n     EMPHitPoints=40\n     MinHealth=20.000000\n     bInvincible=True\n     bMustFaceTarget=True\n     bCanStrafe=True\n     AirSpeed=1000.000000\n     AccelRate=350.000000\n     Health=600\n     DrawType=DT_Mesh\n     Mesh=LodMesh'DeusExCharacters.SpyDrone'\n     SoundRadius=24\n     SoundVolume=92\n     AmbientSound=Sound'DeusExSounds.Augmentation.AugDroneLoop'\n     CollisionRadius=13.000000\n     CollisionHeight=2.760000\n     bBlockPlayers=False\n     Mass=20.000000\n     BindName=\"Drone\"\n     FamiliarName=\"Security Drone\"\n     UnfamiliarName=\"Security Drone\"\n}\n",
            "name": "SecDrone.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "explosionRadius=100.000000",
                    "hoverdistance=200.000000",
                    "EMPHitPoints=40",
                    "MinHealth=20.000000",
                    "bInvincible=True",
                    "bMustFaceTarget=True",
                    "bCanStrafe=True",
                    "AirSpeed=1000.000000",
                    "AccelRate=350.000000",
                    "Health=600",
                    "DrawType=DT_Mesh",
                    "Mesh=LodMesh'DeusExCharacters.SpyDrone'",
                    "SoundRadius=24",
                    "SoundVolume=92",
                    "AmbientSound=Sound'DeusExSounds.Augmentation.AugDroneLoop'",
                    "CollisionRadius=13.000000",
                    "CollisionHeight=2.760000",
                    "bBlockPlayers=False",
                    "Mass=20.000000",
                    "BindName=\"Drone\"",
                    "FamiliarName=\"Security Drone\"",
                    "UnfamiliarName=\"Security Drone\""
                ],
                "exec": [],
                "extends": "DXRobot",
                "functions": {
                    "BeginState": {
                        "body": "{\n\t\tsetphysics(PHYS_flying); //added\n\t\tStandUp();\n\t\t//Disable('AnimEnd');\n\t\tbStasis = False;\n\t\tSetupWeapon(false);\n\t\tSetDistress(false);\n\t\tBackpedalTimer = -1;\n\t\tSeekPawn = None;\n\t\tEnableCheckDestLoc(true);\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "BeginState",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "EndState": {
                        "body": "{\n\t\tEnableCheckDestLoc(false);\n\t\tbAcceptBump = False;\n\t\t//Enable('AnimEnd');\n\t\tbStasis = True;\n\t\tStopBlendAnims();\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "EndState",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Frob": {
                        "body": "{\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    },
                    "HitWall": {
                        "body": "{\n\t\tif (Physics == PHYS_Falling)\n\t\t\treturn;\n\t\tGlobal.HitWall(HitNormal, Wall);\n\t\tCheckOpenDoor(HitNormal, Wall);\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "HitWall",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "HitNormal"
                            ],
                            [
                                "actor",
                                "Wall"
                            ]
                        ],
                        "return": ""
                    },
                    "PickDestination": {
                        "body": "{\n\n\t\tif(AttachPlayer == None)\n\t\t\treturn False;\n\t\tbSuccess = false;\n\t\tdestPoint = None;\n\t\tdestLoc   = vect(0, 0, 0);\n\t\textra = AttachPlayer.CollisionRadius + CollisionRadius;\n\t\tdist = VSize(AttachPlayer.Location - Location);\n\t\tdist -= extra;\n\t\tif (dist < 0)\n\t\t\tdist = 0;\n\n\t\tif ((dist > 180) || (AICanSee(AttachPlayer, , false, false, false, true) <= 0))\n\t\t{\n\t\t\tif (ActorReachable(AttachPlayer))\n\t\t\t{\n\t\t\t\trot = Rotator(AttachPlayer.Location - Location);\n\t\t\t\tdistMax = (dist-180)+45;\n\t\t\t\tif (distMax > 80)\n\t\t\t\t\tdistMax = 80;\n\t\t\t\tbSuccess = AIDirectionReachable(Location, rot.Yaw, rot.Pitch, 0, distMax, destLoc);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tMoveTarget = FindPathToward(AttachPlayer);\n\t\t\t\tif (MoveTarget != None)\n\t\t\t\t{\n\t\t\t\t\tdestPoint = MoveTarget;\n\t\t\t\t\tbSuccess = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tBackpedalTimer = -1;\n\t\t}\n\t\telse if (dist < 60)\n\t\t{\n\t\t\tif (BackpedalTimer < 0)\n\t\t\t\tBackpedalTimer = 0;\n\t\t\tif (BackpedalTimer > 1.0)  // give the player enough time to converse, if he wants to\n\t\t\t{\n\t\t\t\trot = Rotator(Location - AttachPlayer.Location);\n\t\t\t\tbSuccess = AIDirectionReachable(AttachPlayer.Location, rot.Yaw, rot.Pitch, 60+extra, 120+extra, destLoc);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\tBackpedalTimer = -1;\n\n\t\treturn (bSuccess);\n\t}",
                        "locals": [
                            "local float   dist;",
                            "local float   extra;",
                            "local float   distMax;",
                            "local int     dir;",
                            "local rotator rot;",
                            "local bool    bSuccess;"
                        ],
                        "modifiers": [],
                        "name": "PickDestination",
                        "native": false,
                        "param": [],
                        "return": "bool"
                    },
                    "SetFall": {
                        "body": "{\n\t\tStartFalling('Following', 'ContinueFollow');\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetFall",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ShouldFlee": {
                        "body": "{\n\treturn false;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "ShouldFlee",
                        "native": false,
                        "param": [],
                        "return": "bool"
                    },
                    "Tick": {
                        "body": "{\n\t\tGlobal.Tick(deltaSeconds);\n\t\t\n\t\tif(AttachPlayer != None)\n\t\t{\n\t\t\tif(AttachPlayer.bAdmin)\n\t\t\t{\n\t\t\t\tAttachPlayer.ClientMessage(\"Security Drone: Sorry, my mistake.\", 'TeamSay');\n\t\t\t\tDestroy();\n\t\t\t}\n\t\t\tAreWeTooFar = Abs(VSize(AttachPlayer.Location - Location));\n\t\t\tif(AreWeTooFar > 650)\n\t\t\t{\n\t\t\t\tSetCollision(false, false, false);\n\t\t\t\tbCollideWorld = true;\n\t\t\t\tSetLocation(AttachPlayer.location);\n\t\t\t\tSetCollision(true, true , true);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (BackpedalTimer >= 0)\n\t\t\tBackpedalTimer += deltaSeconds;\n\n\t\tanimTimer[1] += deltaSeconds;\n\t\tif ((Physics == PHYS_Walking) && (AttachPlayer != None))\n\t\t{\n\t\t\tif (Acceleration == vect(0,0,0))\n\t\t\t\tLookAtActor(AttachPlayer, true, true, true, 0, 0.25);\n\t\t\telse\n\t\t\t\tPlayTurnHead(LOOK_Forward, 1.0, 0.25);\n\t\t}\n\t}",
                        "locals": [
                            "local float AreWeTooFar;",
                            "local Inventory Inv;"
                        ],
                        "modifiers": [],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltaSeconds"
                            ]
                        ],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\tif(NotifPlayer != None)\n\t{\n\t\tNotifPlayer.ClientMessage(AttachPlayer.PlayerReplicationInfo.PlayerName$\" was killed by your security.\");\n\t}\n\tPlaySound(Sound'DeusExSounds.Weapons.RifleFire',,,, 256);\n\tAttachPlayer.ReducedDamageType='';\n\tAttachPlayer.TakeDamage(10000,Self,vect(0,0,0),vect(0,0,1),'Exploded');\n\tDestroy();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 299,
                "replication": "",
                "states": [],
                "variables": [
                    "var float explosionradius;",
                    "var() float hoverdistance; //how close to get to the player.",
                    "var DeusExPlayer AttachPlayer;",
                    "var float DroneRange;",
                    "var DeusExPlayer NotifPlayer;"
                ]
            }
        },
        "SequenceLock.uc": {
            "body": "//=============================================================================\n// Switch1.\n//=============================================================================\nclass SequenceLock extends DeusExDecoration;\n\nvar() int SequenceNum;\nvar bool bActivated;\nvar() string mySequenceGroup;\nvar() bool bResetter;\n\nfunction Frob(Actor Frobber, Inventory frobWith)\n{\nlocal SequenceLockHandler SQH;\n\n\tif(bResetter)\n\t{\n\t\tforeach AllActors(class'SequenceLockHandler', SQH)\n\t\t{\n\t\t\tif(SQH.SequenceGroup ~= mySequenceGroup)\n\t\t\t{\n\t\t\t\tSQH.CurrentInput=0;\n\t\t\t\tDeusExPlayer(Frobber).ClientMessage(\"Sequence\"@mySequenceGroup$\": |P2\"$SQH.CurrentInput);\n\t\t\t}\n\t\t}\n\treturn;\n\t}\n\t\n\t\t/*if(bActivated)\n\t{\n\t\tDeusExPlayer(Frobber).ClientMessage(\"Button already activated.\");\n\treturn;\n\t}*/\n\t\tforeach AllActors(class'SequenceLockHandler', SQH)\n\t\t{\n\t\t\tif(SQH.SequenceGroup ~= mySequenceGroup)\n\t\t\t{\n\t\t\t\tSQH.AddSequence(DeusExPlayer(Frobber), SequenceNum);\n\t\t\t\t//bActivated=True;\n\t\t\t}\n\t\t}\n}\n\ndefaultproperties\n{\n     bInvincible=True\n     ItemName=\"Sequence Lock\"\n     bPushable=False\n     Physics=PHYS_None\n     Texture=Texture'DeusExItems.Skins.DataCubeTex2'\n     Mesh=LodMesh'DeusExItems.DataCube'\n     CollisionRadius=7.000000\n     CollisionHeight=1.270000\n     Buoyancy=12.000000\n}\n",
            "name": "SequenceLock.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bInvincible=True",
                    "ItemName=\"Sequence Lock\"",
                    "bPushable=False",
                    "Physics=PHYS_None",
                    "Texture=Texture'DeusExItems.Skins.DataCubeTex2'",
                    "Mesh=LodMesh'DeusExItems.DataCube'",
                    "CollisionRadius=7.000000",
                    "CollisionHeight=1.270000",
                    "Buoyancy=12.000000"
                ],
                "exec": [],
                "extends": "DeusExDecoration",
                "functions": {
                    "Frob": {
                        "body": "{\n\n\tif(bResetter)\n\t{\n\t\tforeach AllActors(class'SequenceLockHandler', SQH)\n\t\t{\n\t\t\tif(SQH.SequenceGroup ~= mySequenceGroup)\n\t\t\t{\n\t\t\t\tSQH.CurrentInput=0;\n\t\t\t\tDeusExPlayer(Frobber).ClientMessage(\"Sequence\"@mySequenceGroup$\": |P2\"$SQH.CurrentInput);\n\t\t\t}\n\t\t}\n\treturn;\n\t}\n\t\n\t\t/*if(bActivated)\n\t{\n\t\tDeusExPlayer(Frobber).ClientMessage(\"Button already activated.\");\n\treturn;\n\t}*/\n\t\tforeach AllActors(class'SequenceLockHandler', SQH)\n\t\t{\n\t\t\tif(SQH.SequenceGroup ~= mySequenceGroup)\n\t\t\t{\n\t\t\t\tSQH.AddSequence(DeusExPlayer(Frobber), SequenceNum);\n\t\t\t\t//bActivated=True;\n\t\t\t}\n\t\t}\n}",
                        "locals": [
                            "local SequenceLockHandler SQH;"
                        ],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 55,
                "replication": "",
                "states": [],
                "variables": [
                    "var() int SequenceNum;",
                    "var bool bActivated;",
                    "var() string mySequenceGroup;",
                    "var() bool bResetter;"
                ]
            }
        },
        "SequenceLockHandler.uc": {
            "body": "class SequenceLockHandler extends Actor;\n\nvar() int AcceptedSequence;\nvar int CurrentInput;\nvar() string SequenceGroup;\n\nvar() name PassEvent, FailEvent;\n\n/*function ResetSequence()\n{\nlocal SequenceLock SQ;\n\n\tforeach AllActors(class'SequenceLock', SQ)\n\t{\n\t\tSQ.bActivated=False;\n\t}\n}*/\n\nfunction AddSequence(DeusExPlayer DXP, int Seq)\n{\nlocal int j;\nlocal string Pre, Aft, ifin;\nlocal actor a;\n\t\tPre = string(currentInput);\n\t\tAft = string(Seq);\n\t\tifin = currentInput$seq;\n\t\tCurrentInput = int(ifin);\n\t\tDXP.ClientMessage(\"Sequence\"@SequenceGroup$\": |P7\"$CurrentInput);\n\t\t\n\t\t\tif(CurrentInput == AcceptedSequence)\n\t\t\t{\n\t\t\t\t\tif(PassEvent != '')\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors( class 'actor', A)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif(A.Tag == PassEvent)\n\t\t\t\t\t\t\t\t\tA.Trigger( Self, None );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tCurrentInput=0;\n\t\t\t\t\tDXP.ClientMessage(\"Sequence accepted.\");\n\t\t\t}\n}\n\ndefaultproperties\n{\n}\n",
            "name": "SequenceLockHandler.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "Actor",
                "functions": {
                    "AddSequence": {
                        "body": "{\n\t\tPre = string(currentInput);\n\t\tAft = string(Seq);\n\t\tifin = currentInput$seq;\n\t\tCurrentInput = int(ifin);\n\t\tDXP.ClientMessage(\"Sequence\"@SequenceGroup$\": |P7\"$CurrentInput);\n\t\t\n\t\t\tif(CurrentInput == AcceptedSequence)\n\t\t\t{\n\t\t\t\t\tif(PassEvent != '')\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach AllActors( class 'actor', A)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif(A.Tag == PassEvent)\n\t\t\t\t\t\t\t\t\tA.Trigger( Self, None );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tCurrentInput=0;\n\t\t\t\t\tDXP.ClientMessage(\"Sequence accepted.\");\n\t\t\t}\n}",
                        "locals": [
                            "local int j;",
                            "local string Pre, Aft, ifin;",
                            "local actor a;"
                        ],
                        "modifiers": [],
                        "name": "AddSequence",
                        "native": false,
                        "param": [
                            [
                                "DeusExPlayer",
                                "DXP"
                            ],
                            [
                                "int",
                                "Seq"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 48,
                "replication": "",
                "states": [],
                "variables": [
                    "var() int AcceptedSequence;",
                    "var int CurrentInput;",
                    "var() string SequenceGroup;",
                    "var() name PassEvent, FailEvent;"
                ]
            }
        },
        "ShopButton.uc": {
            "body": "//=============================================================================\n// Switch1.\n//=============================================================================\nclass ShopButton extends DeusExDecoration;\n\nvar(RPG) int Price;\nvar(RPG) class<inventory> ShopItem;\nvar(RPG) bool bTriggerInstead; \nvar(RPG) string purchasealias;\nvar DeusExPlayer LastBuyer;\nvar bool bConfirm;\n\nfunction SilentAdd(class<inventory> addClass, DeusExPlayer addTarget)\n{ \n\tlocal Inventory anItem;\n\t\n\tanItem = Spawn(addClass,,,addTarget.Location); \n\tanItem.SpawnCopy(addTarget);\n\tanItem.Destroy();\n\t/*anItem.Instigator = addTarget; \n\tanItem.GotoState('Idle2'); \n\tanItem.bHeldItem = true; \n\tanItem.bTossedOut = false; \n\t\n\tif(Weapon(anItem) != None) \n\t\tWeapon(anItem).GiveAmmo(addTarget); \n\tanItem.GiveTo(addTarget);*/\n}\n\nfunction Timer()\n{\nbConfirm=False;\n}\n\nfunction Frob(Actor Frobber, Inventory frobWith)\n{\n      local Inventory Inv;\n      local DeusExPlayer Player;\n      local bool bPositionFound;\n      local int beltpos;\n      \n      Player = DeusExPlayer(Frobber);\n\n\tif(bTriggerInstead)\n\t{\n\t\tif(bConfirm)\n\t\t{\n\t\t\tif(Player.Credits >= Price)\n\t\t\t{\n\t\t\tsuper.Frob(frobber,frobWith);\n\t\t\tPlayer.Credits -= Price;\n\t\t\tPlayer.ClientMessage(\"|P3Purchased |P2\"$purchasealias$\" |P3for |P2\"$Price$\"|P3. |P1(New credits: \"$Player.Credits$\")\");\n\t\t\t\t\t\tbConfirm=False;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\tPlayer.ClientMessage(\"|P3You can't afford this purchase.\");\n\t\t\t\t\t\tbConfirm=False;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\tPlayer.ClientMessage(\"|P3Purchase trigger |p2\"$purchasealias$\" |P3for |P2\"$Price$\"|P3? Press again to confirm. |P1(Current credits: \"$Player.Credits$\")\");\n\t\tbConfirm=True;\n\t\tSetTimer(3,False);\n\t\t}\n\t}\n\telse\n\t{\n\t\tif(bConfirm)\n\t\t{\n\t\t\tif(Player.Credits >= Price)\n\t\t\t{\t \n\t\t\t\t \n\t\t\t/*\tif(!player.FindInventorySlot(inventory(shopitem.class), True))\n\t\t\t\t\n\t\t\t\tif(!bPositionFound)\n\t\t\t\t{\n\t\t\t\t\tPlayer.ClientMessage(\"Not enough room for this item...\");\n\t\t\t\t\treturn;\n\t\t\t\t}*/\n\t\t\t/*inv.InitialState='Idle2';\n\t\t\tinv.GiveTo(Player);\n\t\t\tinv.SetBase(Player);*/\n\t\t\tSilentAdd(shopItem, Player);\n\t\t\tLastBuyer = Player;\n\t\t\tPlayer.Credits -= Price;\n\t\t\tPlayer.ClientMessage(\"|P3Purchased|P2 \"$purchasealias$\"|P3 for |P2\"$Price$\"|P3. |P1(New credits: \"$Player.Credits$\")\");\n\t\t\tbConfirm=False;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\tPlayer.ClientMessage(\"|P3You can't afford this purchase.\");\n\t\t\tbConfirm=False;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\tPlayer.ClientMessage(\"|P3Purchase |P2\"$purchasealias$\" |P3for |P2\"$Price$\"|P3? Press again to confirm. |P1(Current credits: \"$Player.Credits$\")\");\n\t\tbConfirm=True;\n\t\tSetTimer(3,False);\n\t\t}\n\n\t}\n\n}\n\ndefaultproperties\n{\n     bInvincible=True\n     ItemName=\"Shop\"\n     bPushable=False\n     Physics=PHYS_None\n     Mesh=LodMesh'DeusExDeco.Switch1'\n     CollisionRadius=2.630000\n     CollisionHeight=2.970000\n     Mass=10.000000\n     Buoyancy=12.000000\n}\n",
            "name": "ShopButton.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bInvincible=True",
                    "ItemName=\"Shop\"",
                    "bPushable=False",
                    "Physics=PHYS_None",
                    "Mesh=LodMesh'DeusExDeco.Switch1'",
                    "CollisionRadius=2.630000",
                    "CollisionHeight=2.970000",
                    "Mass=10.000000",
                    "Buoyancy=12.000000"
                ],
                "exec": [],
                "extends": "DeusExDecoration",
                "functions": {
                    "Frob": {
                        "body": "{\n      \n      Player = DeusExPlayer(Frobber);\n\n\tif(bTriggerInstead)\n\t{\n\t\tif(bConfirm)\n\t\t{\n\t\t\tif(Player.Credits >= Price)\n\t\t\t{\n\t\t\tsuper.Frob(frobber,frobWith);\n\t\t\tPlayer.Credits -= Price;\n\t\t\tPlayer.ClientMessage(\"|P3Purchased |P2\"$purchasealias$\" |P3for |P2\"$Price$\"|P3. |P1(New credits: \"$Player.Credits$\")\");\n\t\t\t\t\t\tbConfirm=False;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\tPlayer.ClientMessage(\"|P3You can't afford this purchase.\");\n\t\t\t\t\t\tbConfirm=False;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\tPlayer.ClientMessage(\"|P3Purchase trigger |p2\"$purchasealias$\" |P3for |P2\"$Price$\"|P3? Press again to confirm. |P1(Current credits: \"$Player.Credits$\")\");\n\t\tbConfirm=True;\n\t\tSetTimer(3,False);\n\t\t}\n\t}\n\telse\n\t{\n\t\tif(bConfirm)\n\t\t{\n\t\t\tif(Player.Credits >= Price)\n\t\t\t{\t \n\t\t\t\t \n\t\t\t/*\tif(!player.FindInventorySlot(inventory(shopitem.class), True))\n\t\t\t\t\n\t\t\t\tif(!bPositionFound)\n\t\t\t\t{\n\t\t\t\t\tPlayer.ClientMessage(\"Not enough room for this item...\");\n\t\t\t\t\treturn;\n\t\t\t\t}*/\n\t\t\t/*inv.InitialState='Idle2';\n\t\t\tinv.GiveTo(Player);\n\t\t\tinv.SetBase(Player);*/\n\t\t\tSilentAdd(shopItem, Player);\n\t\t\tLastBuyer = Player;\n\t\t\tPlayer.Credits -= Price;\n\t\t\tPlayer.ClientMessage(\"|P3Purchased|P2 \"$purchasealias$\"|P3 for |P2\"$Price$\"|P3. |P1(New credits: \"$Player.Credits$\")\");\n\t\t\tbConfirm=False;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\tPlayer.ClientMessage(\"|P3You can't afford this purchase.\");\n\t\t\tbConfirm=False;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\tPlayer.ClientMessage(\"|P3Purchase |P2\"$purchasealias$\" |P3for |P2\"$Price$\"|P3? Press again to confirm. |P1(Current credits: \"$Player.Credits$\")\");\n\t\tbConfirm=True;\n\t\tSetTimer(3,False);\n\t\t}\n\n\t}\n\n}",
                        "locals": [
                            "local Inventory Inv;",
                            "local DeusExPlayer Player;",
                            "local bool bPositionFound;",
                            "local int beltpos;"
                        ],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    },
                    "SilentAdd": {
                        "body": "{ \n\t\n\tanItem = Spawn(addClass,,,addTarget.Location); \n\tanItem.SpawnCopy(addTarget);\n\tanItem.Destroy();\n\t/*anItem.Instigator = addTarget; \n\tanItem.GotoState('Idle2'); \n\tanItem.bHeldItem = true; \n\tanItem.bTossedOut = false; \n\t\n\tif(Weapon(anItem) != None) \n\t\tWeapon(anItem).GiveAmmo(addTarget); \n\tanItem.GiveTo(addTarget);*/\n}",
                        "locals": [
                            "local Inventory anItem;"
                        ],
                        "modifiers": [],
                        "name": "SilentAdd",
                        "native": false,
                        "param": [
                            [
                                "class<inventory>",
                                "addClass"
                            ],
                            [
                                "DeusExPlayer",
                                "addTarget"
                            ]
                        ],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\nbConfirm=False;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 120,
                "replication": "",
                "states": [],
                "variables": [
                    "var(RPG) int Price;",
                    "var(RPG) class<inventory> ShopItem;",
                    "var(RPG) bool bTriggerInstead;",
                    "var(RPG) string purchasealias;",
                    "var DeusExPlayer LastBuyer;",
                    "var bool bConfirm;"
                ]
            }
        },
        "ShopButton2.uc": {
            "body": "//=============================================================================\n// Switch1.\n//=============================================================================\nclass ShopButton2 extends DeusExDecoration;\n\nvar(RPG) int Price;\nvar(RPG) class<Decoration> ShopItem;\nvar(RPG) string purchasealias;\nvar(RPG) name CTag;\n\nvar bool bConfirm;\n\nfunction Timer()\n{\nbConfirm=False;\n}\n\nfunction Frob(Actor Frobber, Inventory frobWith)\n{\n      local DeusExPlayer Player;\n\t  local ShopConstructor SC;\n\t  \n      Player = DeusExPlayer(Frobber);\n\n\t\tif(bConfirm)\n\t\t{\n\t\t\tif(Player.Credits >= Price)\n\t\t\t{\n\t\t\t\tforeach AllActors(class'ShopConstructor', SC)\n\t\t\t\t{\n\t\t\t\t\tif(SC.Tag == CTag)\n\t\t\t\t\t{\n\t\t\t\t\t\tSpawn(ShopItem,,,SC.Location);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tPlayer.Credits -= Price;\n\t\t\tPlayer.ClientMessage(\"|P3Purchased |P2\"$purchasealias$\" |P3for |P2\"$Price$\"|P3. |P1(New credits: \"$Player.Credits$\")\");\n\t\t\t\t\t\tbConfirm=False;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\tPlayer.ClientMessage(\"|P3You can't afford this purchase.\");\n\t\t\tbConfirm=False;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\tPlayer.ClientMessage(\"|P3Purchase trigger |p2\"$purchasealias$\" |P3for |P2\"$Price$\"|P3? Press again to confirm. |P1(Current credits: \"$Player.Credits$\")\");\n\t\tbConfirm=True;\n\t\tSetTimer(3,False);\n\t\t}\n}\n\ndefaultproperties\n{\n     bInvincible=True\n     ItemName=\"Furniture Shop\"\n     bPushable=False\n     Physics=PHYS_None\n     Mesh=LodMesh'DeusExDeco.Switch1'\n     CollisionRadius=2.630000\n     CollisionHeight=2.970000\n     Mass=10.000000\n     Buoyancy=12.000000\n}\n",
            "name": "ShopButton2.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bInvincible=True",
                    "ItemName=\"Furniture Shop\"",
                    "bPushable=False",
                    "Physics=PHYS_None",
                    "Mesh=LodMesh'DeusExDeco.Switch1'",
                    "CollisionRadius=2.630000",
                    "CollisionHeight=2.970000",
                    "Mass=10.000000",
                    "Buoyancy=12.000000"
                ],
                "exec": [],
                "extends": "DeusExDecoration",
                "functions": {
                    "Frob": {
                        "body": "{\n\t  \n      Player = DeusExPlayer(Frobber);\n\n\t\tif(bConfirm)\n\t\t{\n\t\t\tif(Player.Credits >= Price)\n\t\t\t{\n\t\t\t\tforeach AllActors(class'ShopConstructor', SC)\n\t\t\t\t{\n\t\t\t\t\tif(SC.Tag == CTag)\n\t\t\t\t\t{\n\t\t\t\t\t\tSpawn(ShopItem,,,SC.Location);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tPlayer.Credits -= Price;\n\t\t\tPlayer.ClientMessage(\"|P3Purchased |P2\"$purchasealias$\" |P3for |P2\"$Price$\"|P3. |P1(New credits: \"$Player.Credits$\")\");\n\t\t\t\t\t\tbConfirm=False;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\tPlayer.ClientMessage(\"|P3You can't afford this purchase.\");\n\t\t\tbConfirm=False;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\tPlayer.ClientMessage(\"|P3Purchase trigger |p2\"$purchasealias$\" |P3for |P2\"$Price$\"|P3? Press again to confirm. |P1(Current credits: \"$Player.Credits$\")\");\n\t\tbConfirm=True;\n\t\tSetTimer(3,False);\n\t\t}\n}",
                        "locals": [
                            "local DeusExPlayer Player;",
                            "local ShopConstructor SC;"
                        ],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\nbConfirm=False;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 66,
                "replication": "",
                "states": [],
                "variables": [
                    "var(RPG) int Price;",
                    "var(RPG) class<Decoration> ShopItem;",
                    "var(RPG) string purchasealias;",
                    "var(RPG) name CTag;",
                    "var bool bConfirm;"
                ]
            }
        },
        "ShopConstructor.uc": {
            "body": "class ShopConstructor extends Actor;\n\ndefaultproperties\n{\n     bHidden=True\n}\n",
            "name": "ShopConstructor.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bHidden=True"
                ],
                "exec": [],
                "extends": "Actor",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 7,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "ShopPoint.uc": {
            "body": "//=============================================\n// RestPoint\n//=============================================\nClass ShopPoint extends ShopButton;\n\ndefaultproperties\n{\n     ItemName=\"Shop Point\"\n     DrawType=DT_Sprite\n     Style=STY_Translucent\n     Texture=Texture'DeusExDeco.Skins.AlarmLightTex6'\n     Skin=Texture'DeusExDeco.Skins.AlarmLightTex6'\n     DrawScale=1.500000\n     CollisionRadius=25.200001\n     CollisionHeight=20.000000\n     bBlockPlayers=False\n}\n",
            "name": "ShopPoint.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "ItemName=\"Shop Point\"",
                    "DrawType=DT_Sprite",
                    "Style=STY_Translucent",
                    "Texture=Texture'DeusExDeco.Skins.AlarmLightTex6'",
                    "Skin=Texture'DeusExDeco.Skins.AlarmLightTex6'",
                    "DrawScale=1.500000",
                    "CollisionRadius=25.200001",
                    "CollisionHeight=20.000000",
                    "bBlockPlayers=False"
                ],
                "exec": [],
                "extends": "ShopButton",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 18,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "SizableEffectSpawner.uc": {
            "body": "//=============================================================================\n// SizableEffectSpawner.\n//=============================================================================\nclass SizableEffectSpawner expands Effects;\n\nvar() class<SizableEffects> EffectClass;\t//type of effect\nvar() float Interval;\t\t//time between spaws\nvar() float TimeLimit;\t\t\t//until when should I spawn? If 0, not limited\nvar() float SizeofEffect;\t\t//drawscale of effect\nvar() Texture EffectSkin;\t\t//what is the skin of this effect?\nvar() float EffectLSpan;\t\t//how much will this effect live?\nvar() int NumberSpawns;\t\t\t//if 0, not limited by a number\n\nvar float TotalTime, IntervalTime;\t\nvar int spawnedItems;\n\n\nfunction Tick(float deltaTime)\n{\n\tlocal SizableEffects newEffect;\n\n\tTotalTime+=deltaTime;\n\tIntervalTime+=deltaTime;\n\n\tif (IntervalTime > Interval)\n\t{\t\t\n\t\tif ((TimeLimit!=0 && TotalTime > TimeLimit) || (NumberSpawns!=0 && spawnedItems >= NumberSpawns))\n\t\t{\n\t\t\tSelf.Destroy();\n\t\t}\n\n\t\tnewEffect=Spawn(EffectClass,Owner);\n\t\tif (newEffect!=None)\n\t\t{\n\t\t\tnewEffect.Size=SizeofEffect;\n\t\t\tnewEffect.Skin=EffectSkin;\n\t\t\tnewEffect.LifeSpan=EffectLSpan;\n\t\t\tspawnedItems++;\n\t\t}\n\t\tIntervalTime=0;\n\t}\n}\n\ndefaultproperties\n{\n     EffectLSpan=3.000000\n     bDirectional=True\n}\n",
            "name": "SizableEffectSpawner.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "EffectLSpan=3.000000",
                    "bDirectional=True"
                ],
                "exec": [],
                "extends": "Effects",
                "functions": {
                    "Tick": {
                        "body": "{\n\n\tTotalTime+=deltaTime;\n\tIntervalTime+=deltaTime;\n\n\tif (IntervalTime > Interval)\n\t{\t\t\n\t\tif ((TimeLimit!=0 && TotalTime > TimeLimit) || (NumberSpawns!=0 && spawnedItems >= NumberSpawns))\n\t\t{\n\t\t\tSelf.Destroy();\n\t\t}\n\n\t\tnewEffect=Spawn(EffectClass,Owner);\n\t\tif (newEffect!=None)\n\t\t{\n\t\t\tnewEffect.Size=SizeofEffect;\n\t\t\tnewEffect.Skin=EffectSkin;\n\t\t\tnewEffect.LifeSpan=EffectLSpan;\n\t\t\tspawnedItems++;\n\t\t}\n\t\tIntervalTime=0;\n\t}\n}",
                        "locals": [
                            "local SizableEffects newEffect;"
                        ],
                        "modifiers": [],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltaTime"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 49,
                "replication": "",
                "states": [],
                "variables": [
                    "var() class<SizableEffects> EffectClass;\t//type of effect",
                    "var() float Interval;\t\t//time between spaws",
                    "var() float TimeLimit;\t\t\t//until when should I spawn? If 0, not limited",
                    "var() float SizeofEffect;\t\t//drawscale of effect",
                    "var() Texture EffectSkin;\t\t//what is the skin of this effect?",
                    "var() float EffectLSpan;\t\t//how much will this effect live?",
                    "var() int NumberSpawns;\t\t\t//if 0, not limited by a number",
                    "var float TotalTime, IntervalTime;",
                    "var int spawnedItems;"
                ]
            }
        },
        "SizableEffects.uc": {
            "body": "//=============================================================================\n// SizableEffects.\n//=============================================================================\nclass SizableEffects expands Effects;\n\nvar() float Size;\n\nfunction Tick(float deltaTime)\n{\n\tDrawScale = 3.0 * size * (Default.LifeSpan - LifeSpan) / Default.LifeSpan;\n\tScaleGlow = 2.0 * (LifeSpan / Default.LifeSpan);\n}\n\ndefaultproperties\n{\n     size=1.000000\n     LifeSpan=1.000000\n     bUnlit=True\n}\n",
            "name": "SizableEffects.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "size=1.000000",
                    "LifeSpan=1.000000",
                    "bUnlit=True"
                ],
                "exec": [],
                "extends": "Effects",
                "functions": {
                    "Tick": {
                        "body": "{\n\tDrawScale = 3.0 * size * (Default.LifeSpan - LifeSpan) / Default.LifeSpan;\n\tScaleGlow = 2.0 * (LifeSpan / Default.LifeSpan);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltaTime"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 20,
                "replication": "",
                "states": [],
                "variables": [
                    "var() float Size;"
                ]
            }
        },
        "SkullBolt.uc": {
            "body": "// SkullBolt by mouserpg@yahoo.com\n\nclass SkullBolt extends DeusExProjectile;\n\nvar ParticleGenerator pGen1;\nvar ParticleGenerator pGen2;\nvar float mpDamage;\nvar float mpBlastRadius;\n\n#exec OBJ LOAD FILE=Effects\n\nsimulated function Tick(float deltaTime)\n{\n\tlocal Rotator rot;\n\n\tif (bStuck)\n\t\treturn;\n\n\tSuper.Tick(deltaTime);\n\n\tif (Level.Netmode != NM_DedicatedServer)\n\t{\n\t\trot = Rotation;\n\t\trot.Yaw += 16384;\n\t\tSetRotation(rot);\n\t}\n}\n\nsimulated function DrawExplosionEffects(vector HitLocation, vector HitNormal) {\n\tlocal ParticleGenerator gen;\n\tgen = Spawn(class'ParticleGenerator',,, HitLocation, Rotator(HitNormal));\n\tif (gen != None) {\n      gen.RemoteRole = ROLE_None;\n\t\tgen.particleDrawScale = 3.0;\n\t\tgen.checkTime = 0.10;\n\t\tgen.frequency = 1.0;\n\t\tgen.ejectSpeed = 300.0;\n\t\tgen.bGravity = True;\n\t\tgen.bRandomEject = True;\n\t\tgen.particleLifeSpan = 1.0;\n\t\tgen.particleTexture = Texture'Effects.Laser.LaserSpot2';\n\t\tgen.LifeSpan = 1.3;\n\t}\n}\n\nfunction PostBeginPlay() {\n\tSuper.PostBeginPlay();\n        if ((Level.NetMode == NM_Standalone) || (Level.NetMode == NM_ListenServer))\n        SpawnPlasmaEffects();\n}\nsimulated function PreBeginPlay() {\n\tSuper.PreBeginPlay();\n\tDamage = mpDamage;\n\tblastRadius = mpBlastRadius;\n}\nsimulated function PostNetBeginPlay() {\n   if (Role < ROLE_Authority)\n      SpawnPlasmaEffects();\n}\nsimulated function SpawnPlasmaEffects() {\n\tlocal Rotator rot;\n        rot = Rotation;\n\trot.Yaw -= 32768;\n        pGen2 = Spawn(class'ParticleGenerator', Self,, Location, rot);\n\tif (pGen2 != None) {\n        pGen2.RemoteRole = ROLE_None;\n\t\tpGen2.particleTexture = Texture'Effects.Laser.LaserSpot2';\n\t\tpGen2.particleDrawScale = 0.1;\n\t\tpGen2.checkTime = 0.04;\n\t\tpGen2.riseRate = 0.0;\n\t\tpGen2.ejectSpeed = 300.0;\n\t\tpGen2.particleLifeSpan = 0.5;\n\t\tpGen2.bRandomEject = True;\n\t\tpGen2.SetBase(Self);\n\t}\n   \n}\nsimulated function Destroyed() {\n\tif (pGen1 != None)\n\tpGen1.DelayedDestroy();\n\tif (pGen2 != None)\n\tpGen2.DelayedDestroy();\n\tSuper.Destroyed();\n}\n\ndefaultproperties\n{\n     mpDamage=50.000000\n     mpBlastRadius=300.000000\n     bExplodes=True\n     blastRadius=128.000000\n     DamageType=exploded\n     AccurateRange=24400\n     maxRange=24000\n     ItemName=\"Skull Bolt\"\n     ItemArticle=\"a\"\n     speed=1500.000000\n     MaxSpeed=1500.000000\n     Damage=50.000000\n     MomentumTransfer=5000\n     ImpactSound=Sound'DeusExSounds.Weapons.PlasmaRifleHit'\n     ExplosionDecal=Class'DeusEx.ScorchMark'\n     Mesh=LodMesh'DeusExDeco.BoneSkull'\n     DrawScale=3.000000\n     bUnlit=True\n     LightBrightness=170\n     LightHue=177\n     LightSaturation=255\n     LightRadius=3\n     bFixedRotationDir=True\n}\n",
            "name": "SkullBolt.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "mpDamage=50.000000",
                    "mpBlastRadius=300.000000",
                    "bExplodes=True",
                    "blastRadius=128.000000",
                    "DamageType=exploded",
                    "AccurateRange=24400",
                    "maxRange=24000",
                    "ItemName=\"Skull Bolt\"",
                    "ItemArticle=\"a\"",
                    "speed=1500.000000",
                    "MaxSpeed=1500.000000",
                    "Damage=50.000000",
                    "MomentumTransfer=5000",
                    "ImpactSound=Sound'DeusExSounds.Weapons.PlasmaRifleHit'",
                    "ExplosionDecal=Class'DeusEx.ScorchMark'",
                    "Mesh=LodMesh'DeusExDeco.BoneSkull'",
                    "DrawScale=3.000000",
                    "bUnlit=True",
                    "LightBrightness=170",
                    "LightHue=177",
                    "LightSaturation=255",
                    "LightRadius=3",
                    "bFixedRotationDir=True"
                ],
                "exec": [
                    "#exec OBJ LOAD FILE=Effects"
                ],
                "extends": "DeusExProjectile",
                "functions": {
                    "Destroyed": {
                        "body": "if (pGen1 != None)",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Destroyed",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "DrawExplosionEffects": {
                        "body": "gen = Spawn(class'ParticleGenerator',,, HitLocation, Rotator(HitNormal));",
                        "locals": [
                            "local ParticleGenerator gen;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "DrawExplosionEffects",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "HitLocation"
                            ],
                            [
                                "vector",
                                "HitNormal"
                            ]
                        ],
                        "return": ""
                    },
                    "PostBeginPlay": {
                        "body": "Super.PostBeginPlay();",
                        "locals": [],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PostNetBeginPlay": {
                        "body": "if (Role < ROLE_Authority)",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PostNetBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "Super.PreBeginPlay();",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "SpawnPlasmaEffects": {
                        "body": "rot = Rotation;",
                        "locals": [
                            "local Rotator rot;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "SpawnPlasmaEffects",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Tick": {
                        "body": "{\n\n\tif (bStuck)\n\t\treturn;\n\n\tSuper.Tick(deltaTime);\n\n\tif (Level.Netmode != NM_DedicatedServer)\n\t{\n\t\trot = Rotation;\n\t\trot.Yaw += 16384;\n\t\tSetRotation(rot);\n\t}\n}",
                        "locals": [
                            "local Rotator rot;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltaTime"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 112,
                "replication": "",
                "states": [],
                "variables": [
                    "var ParticleGenerator pGen1;",
                    "var ParticleGenerator pGen2;",
                    "var float mpDamage;",
                    "var float mpBlastRadius;"
                ]
            }
        },
        "SkullballMP.uc": {
            "body": "class SkullballMP extends ThrownProjectile config(Skullball);\n\nvar bool bDoomedToDestroy;\nvar bool bAlreadyScored;\n\nfunction bump(actor other)\n{\nlocal DeusExMover move;\nlocal Weapon wep;\nlocal ScriptedPawn P;\nlocal DeusExDecoration Deco;\nlocal DeusExPlayer Player;\nlocal Basketball bask;\nP = ScriptedPawn(other);\nMove = DeusExMover(other);\nWep = Weapon(other);\nPlayer = DeusExPlayer(other);\nDeco = DeusExDecoration(other);\nBask = Basketball(other);\n\n//Players\n\tif((other.IsA('DeusExPlayer')))\n\t{\n\tPlayer.ReducedDamageType = '';\n    Player.TakeDamage(5000,Player,Player.Location,vect(0,0,0),'Exploded');\n    Destroy();\n\t}\n\n//Pawns\n\tif ((other.IsA('ScriptedPawn')))\n\t{\n\t\tP.binvincible=false;\n\t\tP.TakeDamage(5000,P,P.Location,vect(0,0,0),'Exploded');\n\t\tDestroy();\n\t}\n\n//Deco\n\tif ((other.IsA('Decoration')))\n\t{\n\tDeco.bInvincible=False;\n\tDeco.TakeDamage(5000,P,P.Location,vect(0,0,0),'Exploded');\n\tDestroy();\n\t}\n}\n\n\nsimulated function Timer()\n{\n\tif (bDoomedToDestroy)\n\t{\n\t\tDestroy();\n\t}\n\treturn;\n}\n\nsimulated function Tick(float deltaTime)\n{\n\treturn;\n}\n\nsimulated function TakeDamage(int Damage, Pawn instigatedBy, Vector HitLocation, Vector Momentum, name damageType)\n{\n\treturn;\n}\n\nsimulated function Explode(vector HitLocation, vector HitNormal)\n{\n\treturn;\n}\n\nfunction Frob(Actor Frobber, Inventory frobWith)\n{\n\tlocal SkullballMP4Player FLB4P;\n\tif (!bDoomedToDestroy)\n\t{\n\t\tFLB4P = Spawn(Class'SkullballMP4Player',Frobber,,Location,Rotation);\n\t\tDeusExPlayer(Frobber).FrobTarget = FLB4P;\n\t\tDeusExPlayer(Frobber).GrabDecoration();\n\t\tSuper.Frob(Frobber, frobWith);\n\t\tDestroy();\n\t}\n\telse \n\t{\n\t\treturn;\n\t}\n}\n\nauto simulated state Flying\n{\n\tsimulated function HitWall(vector HitNormal, actor HitWall)\n\t{\n\t\tlocal float speed;\n\t\t\n\t\tVelocity = 0.8*((Velocity dot HitNormal) * HitNormal * (-2.0) + Velocity);\n\t\tspeed = VSize(Velocity);\n\t\tbFixedRotationDir = True;\n\t\tRotationRate = RotRand(False);\n\t\tif ((speed > 0) && (speed < 30) && (HitNormal.Z > 0.7))\n\t\t{\n\t\t\tSetPhysics(PHYS_None, HitWall);\n\t\t\tif (Physics == PHYS_None)\n\t\t\t\tbFixedRotationDir = False;\n\t\t}\n\t\n\t\tif (HitWall.IsA('Mover'))\n\t\t{\n\t\t\tHitWall.TakeDamage(speed/58, Pawn(Owner), HitWall.Location, MomentumTransfer*Normal(Velocity), 'Shot');\n\t\t}\n\t\t\n\t\telse if (speed > 30)\n\t\t{\t\n\t\t\tif ((FRand() >= 0.75) && (FRand() < 1.0))\n\t\t\t{\n\t\t\t\tPlaySound(sound'BasketballBounce', SLOT_None, 3);\n\t\t\t}\n\t\t\telse if ((FRand() >= 0.5) && (FRand() < 0.75))\n\t\t\t{\n\t\t\t\tPlaySound(sound'BasketballBounce', SLOT_None, 3);\t\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tPlaySound(sound'BasketballBounce', SLOT_None, 3);\t\n\t\t\t}\n\t\t}\n\t}\n}\n\nsimulated function BeginPlay()\n{\n\tSuper.BeginPlay();\n}\n\ndefaultproperties\n{\n     bDisabled=True\n     bExplodes=False\n     bBlood=False\n     bEmitDanger=False\n     bIgnoresNanoDefense=True\n     ItemName=\"Skull ball\"\n     LifeSpan=0.000000\n     bDirectional=False\n     Mesh=LodMesh'DeusExDeco.BoneSkull'\n     DrawScale=1.500000\n     CollisionRadius=15.000000\n     CollisionHeight=15.000000\n     bBlockActors=True\n     bBlockPlayers=True\n     Mass=8.000000\n     Buoyancy=10.000000\n}\n",
            "name": "SkullballMP.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bDisabled=True",
                    "bExplodes=False",
                    "bBlood=False",
                    "bEmitDanger=False",
                    "bIgnoresNanoDefense=True",
                    "ItemName=\"Skull ball\"",
                    "LifeSpan=0.000000",
                    "bDirectional=False",
                    "Mesh=LodMesh'DeusExDeco.BoneSkull'",
                    "DrawScale=1.500000",
                    "CollisionRadius=15.000000",
                    "CollisionHeight=15.000000",
                    "bBlockActors=True",
                    "bBlockPlayers=True",
                    "Mass=8.000000",
                    "Buoyancy=10.000000"
                ],
                "exec": [],
                "extends": "ThrownProjectile",
                "functions": {
                    "BeginPlay": {
                        "body": "{\n\tSuper.BeginPlay();\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "BeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Explode": {
                        "body": "{\n\treturn;\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Explode",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "HitLocation"
                            ],
                            [
                                "vector",
                                "HitNormal"
                            ]
                        ],
                        "return": ""
                    },
                    "Frob": {
                        "body": "{\n\tif (!bDoomedToDestroy)\n\t{\n\t\tFLB4P = Spawn(Class'SkullballMP4Player',Frobber,,Location,Rotation);\n\t\tDeusExPlayer(Frobber).FrobTarget = FLB4P;\n\t\tDeusExPlayer(Frobber).GrabDecoration();\n\t\tSuper.Frob(Frobber, frobWith);\n\t\tDestroy();\n\t}\n\telse \n\t{\n\t\treturn;\n\t}\n}",
                        "locals": [
                            "local SkullballMP4Player FLB4P;"
                        ],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    },
                    "HitWall": {
                        "body": "{\n\t\t\n\t\tVelocity = 0.8*((Velocity dot HitNormal) * HitNormal * (-2.0) + Velocity);\n\t\tspeed = VSize(Velocity);\n\t\tbFixedRotationDir = True;\n\t\tRotationRate = RotRand(False);\n\t\tif ((speed > 0) && (speed < 30) && (HitNormal.Z > 0.7))\n\t\t{\n\t\t\tSetPhysics(PHYS_None, HitWall);\n\t\t\tif (Physics == PHYS_None)\n\t\t\t\tbFixedRotationDir = False;\n\t\t}\n\t\n\t\tif (HitWall.IsA('Mover'))\n\t\t{\n\t\t\tHitWall.TakeDamage(speed/58, Pawn(Owner), HitWall.Location, MomentumTransfer*Normal(Velocity), 'Shot');\n\t\t}\n\t\t\n\t\telse if (speed > 30)\n\t\t{\t\n\t\t\tif ((FRand() >= 0.75) && (FRand() < 1.0))\n\t\t\t{\n\t\t\t\tPlaySound(sound'BasketballBounce', SLOT_None, 3);\n\t\t\t}\n\t\t\telse if ((FRand() >= 0.5) && (FRand() < 0.75))\n\t\t\t{\n\t\t\t\tPlaySound(sound'BasketballBounce', SLOT_None, 3);\t\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tPlaySound(sound'BasketballBounce', SLOT_None, 3);\t\n\t\t\t}\n\t\t}\n\t}",
                        "locals": [
                            "local float speed;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "HitWall",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "HitNormal"
                            ],
                            [
                                "actor",
                                "HitWall"
                            ]
                        ],
                        "return": ""
                    },
                    "TakeDamage": {
                        "body": "{\n\treturn;\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TakeDamage",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "Damage"
                            ],
                            [
                                "Pawn",
                                "instigatedBy"
                            ],
                            [
                                "Vector",
                                "HitLocation"
                            ],
                            [
                                "Vector",
                                "Momentum"
                            ],
                            [
                                "name",
                                "damageType"
                            ]
                        ],
                        "return": ""
                    },
                    "Tick": {
                        "body": "{\n\treturn;\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltaTime"
                            ]
                        ],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\tif (bDoomedToDestroy)\n\t{\n\t\tDestroy();\n\t}\n\treturn;\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "bump": {
                        "body": "{\nP = ScriptedPawn(other);\nMove = DeusExMover(other);\nWep = Weapon(other);\nPlayer = DeusExPlayer(other);\nDeco = DeusExDecoration(other);\nBask = Basketball(other);\n\n//Players\n\tif((other.IsA('DeusExPlayer')))\n\t{\n\tPlayer.ReducedDamageType = '';\n    Player.TakeDamage(5000,Player,Player.Location,vect(0,0,0),'Exploded');\n    Destroy();\n\t}\n\n//Pawns\n\tif ((other.IsA('ScriptedPawn')))\n\t{\n\t\tP.binvincible=false;\n\t\tP.TakeDamage(5000,P,P.Location,vect(0,0,0),'Exploded');\n\t\tDestroy();\n\t}\n\n//Deco\n\tif ((other.IsA('Decoration')))\n\t{\n\tDeco.bInvincible=False;\n\tDeco.TakeDamage(5000,P,P.Location,vect(0,0,0),'Exploded');\n\tDestroy();\n\t}\n}",
                        "locals": [
                            "local DeusExMover move;",
                            "local Weapon wep;",
                            "local ScriptedPawn P;",
                            "local DeusExDecoration Deco;",
                            "local DeusExPlayer Player;",
                            "local Basketball bask;"
                        ],
                        "modifiers": [],
                        "name": "bump",
                        "native": false,
                        "param": [
                            [
                                "actor",
                                "other"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 152,
                "replication": "",
                "states": [],
                "variables": [
                    "var bool bDoomedToDestroy;",
                    "var bool bAlreadyScored;"
                ]
            }
        },
        "SkullballMP2.uc": {
            "body": "class SkullballMP2 extends ThrownProjectile;\n\nvar bool bDoomedToDestroy;\nvar bool bAlreadyScored;\n\nsimulated function Timer()\n{\n\tif (bDoomedToDestroy)\n\t{\n\t\tDestroy();\n\t}\n\treturn;\n}\n\nsimulated function Tick(float deltaTime)\n{\n\treturn;\n}\n\nsimulated function TakeDamage(int Damage, Pawn instigatedBy, Vector HitLocation, Vector Momentum, name damageType)\n{\n\treturn;\n}\n\nsimulated function Explode(vector HitLocation, vector HitNormal)\n{\n\treturn;\n}\n\nfunction Frob(Actor Frobber, Inventory frobWith)\n{\n\tlocal SkullballMP4Player2 FLB4P;\n\tif (!bDoomedToDestroy)\n\t{\n\t\tFLB4P = Spawn(Class'SkullballMP4Player2',Frobber,,Location,Rotation);\n\t\tDeusExPlayer(Frobber).FrobTarget = FLB4P;\n\t\tDeusExPlayer(Frobber).GrabDecoration();\n\t\tSuper.Frob(Frobber, frobWith);\n\t\tDestroy();\n\t}\n\telse \n\t{\n\t\treturn;\n\t}\n}\n\nauto simulated state Flying\n{\n\tsimulated function HitWall(vector HitNormal, actor HitWall)\n\t{\n\t\tlocal float speed;\n\t\t\n\t\tVelocity = 0.8*((Velocity dot HitNormal) * HitNormal * (-2.0) + Velocity);\n\t\tspeed = VSize(Velocity);\n\t\tbFixedRotationDir = True;\n\t\tRotationRate = RotRand(False);\n\t\tif ((speed > 0) && (speed < 30) && (HitNormal.Z > 0.7))\n\t\t{\n\t\t\tSetPhysics(PHYS_None, HitWall);\n\t\t\tif (Physics == PHYS_None)\n\t\t\t\tbFixedRotationDir = False;\n\t\t}\n\t\n\t\tif (HitWall.IsA('Mover'))\n\t\t{\n\t\t\tHitWall.TakeDamage(speed/58, Pawn(Owner), HitWall.Location, MomentumTransfer*Normal(Velocity), 'Shot');\n\t\t}\n\t\t\n\t\telse if (speed > 30)\n\t\t{\t\n\t\t\tif ((FRand() >= 0.75) && (FRand() < 1.0))\n\t\t\t{\n\t\t\t\tPlaySound(sound'BasketballBounce', SLOT_None, 3);\n\t\t\t}\n\t\t\telse if ((FRand() >= 0.5) && (FRand() < 0.75))\n\t\t\t{\n\t\t\t\tPlaySound(sound'BasketballBounce', SLOT_None, 3);\t\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tPlaySound(sound'BasketballBounce', SLOT_None, 3);\t\n\t\t\t}\n\t\t}\n\t}\n}\n\nsimulated function BeginPlay()\n{\n\tSuper.BeginPlay();\n}\n\ndefaultproperties\n{\n     bDisabled=True\n     bExplodes=False\n     bBlood=False\n     bEmitDanger=False\n     bIgnoresNanoDefense=True\n     ItemName=\"Skull ball\"\n     LifeSpan=0.000000\n     bDirectional=False\n     Mesh=LodMesh'DeusExDeco.BoneSkull'\n     CollisionRadius=10.000000\n     CollisionHeight=10.000000\n     bBlockActors=True\n     bBlockPlayers=True\n     Mass=8.000000\n     Buoyancy=10.000000\n}\n",
            "name": "SkullballMP2.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bDisabled=True",
                    "bExplodes=False",
                    "bBlood=False",
                    "bEmitDanger=False",
                    "bIgnoresNanoDefense=True",
                    "ItemName=\"Skull ball\"",
                    "LifeSpan=0.000000",
                    "bDirectional=False",
                    "Mesh=LodMesh'DeusExDeco.BoneSkull'",
                    "CollisionRadius=10.000000",
                    "CollisionHeight=10.000000",
                    "bBlockActors=True",
                    "bBlockPlayers=True",
                    "Mass=8.000000",
                    "Buoyancy=10.000000"
                ],
                "exec": [],
                "extends": "ThrownProjectile",
                "functions": {
                    "BeginPlay": {
                        "body": "{\n\tSuper.BeginPlay();\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "BeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Explode": {
                        "body": "{\n\treturn;\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Explode",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "HitLocation"
                            ],
                            [
                                "vector",
                                "HitNormal"
                            ]
                        ],
                        "return": ""
                    },
                    "Frob": {
                        "body": "{\n\tif (!bDoomedToDestroy)\n\t{\n\t\tFLB4P = Spawn(Class'SkullballMP4Player2',Frobber,,Location,Rotation);\n\t\tDeusExPlayer(Frobber).FrobTarget = FLB4P;\n\t\tDeusExPlayer(Frobber).GrabDecoration();\n\t\tSuper.Frob(Frobber, frobWith);\n\t\tDestroy();\n\t}\n\telse \n\t{\n\t\treturn;\n\t}\n}",
                        "locals": [
                            "local SkullballMP4Player2 FLB4P;"
                        ],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    },
                    "HitWall": {
                        "body": "{\n\t\t\n\t\tVelocity = 0.8*((Velocity dot HitNormal) * HitNormal * (-2.0) + Velocity);\n\t\tspeed = VSize(Velocity);\n\t\tbFixedRotationDir = True;\n\t\tRotationRate = RotRand(False);\n\t\tif ((speed > 0) && (speed < 30) && (HitNormal.Z > 0.7))\n\t\t{\n\t\t\tSetPhysics(PHYS_None, HitWall);\n\t\t\tif (Physics == PHYS_None)\n\t\t\t\tbFixedRotationDir = False;\n\t\t}\n\t\n\t\tif (HitWall.IsA('Mover'))\n\t\t{\n\t\t\tHitWall.TakeDamage(speed/58, Pawn(Owner), HitWall.Location, MomentumTransfer*Normal(Velocity), 'Shot');\n\t\t}\n\t\t\n\t\telse if (speed > 30)\n\t\t{\t\n\t\t\tif ((FRand() >= 0.75) && (FRand() < 1.0))\n\t\t\t{\n\t\t\t\tPlaySound(sound'BasketballBounce', SLOT_None, 3);\n\t\t\t}\n\t\t\telse if ((FRand() >= 0.5) && (FRand() < 0.75))\n\t\t\t{\n\t\t\t\tPlaySound(sound'BasketballBounce', SLOT_None, 3);\t\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tPlaySound(sound'BasketballBounce', SLOT_None, 3);\t\n\t\t\t}\n\t\t}\n\t}",
                        "locals": [
                            "local float speed;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "HitWall",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "HitNormal"
                            ],
                            [
                                "actor",
                                "HitWall"
                            ]
                        ],
                        "return": ""
                    },
                    "TakeDamage": {
                        "body": "{\n\treturn;\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TakeDamage",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "Damage"
                            ],
                            [
                                "Pawn",
                                "instigatedBy"
                            ],
                            [
                                "Vector",
                                "HitLocation"
                            ],
                            [
                                "Vector",
                                "Momentum"
                            ],
                            [
                                "name",
                                "damageType"
                            ]
                        ],
                        "return": ""
                    },
                    "Tick": {
                        "body": "{\n\treturn;\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltaTime"
                            ]
                        ],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\tif (bDoomedToDestroy)\n\t{\n\t\tDestroy();\n\t}\n\treturn;\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 110,
                "replication": "",
                "states": [],
                "variables": [
                    "var bool bDoomedToDestroy;",
                    "var bool bAlreadyScored;"
                ]
            }
        },
        "SkullballMP4Player.uc": {
            "body": "class SkullBallMP4Player extends DeusExDecoration;\n\nfunction bump(actor other)\n{\nlocal DeusExMover move;\nlocal Weapon wep;\nlocal ScriptedPawn P;\nlocal DeusExDecoration Deco;\nlocal DeusExPlayer Player;\nlocal Basketball bask;\nP = ScriptedPawn(other);\nMove = DeusExMover(other);\nWep = Weapon(other);\nPlayer = DeusExPlayer(other);\nDeco = DeusExDecoration(other);\nBask = Basketball(other);\n\n//Players\n\tif((other.IsA('DeusExPlayer')))\n\t{\n\tPlayer.ReducedDamageType = '';\n    Player.TakeDamage(5000,Player,Player.Location,vect(0,0,0),'Exploded');\n    Destroy();\n\t}\n\n//Pawns\n\tif ((other.IsA('ScriptedPawn')))\n\t{\n\t\tP.binvincible=false;\n\t\t        P.TakeDamage(5000,P,P.Location,vect(0,0,0),'Exploded');\n\t\t            Destroy();\n\t}\n\n//Deco\n\tif ((other.IsA('Decoration')))\n\t{\n\tDeco.TakeDamage(5000,P,P.Location,vect(0,0,0),'Exploded');\n\t    Destroy();\n\t}\n}\n\n\nevent BaseChange()\n{\n\tlocal SkullballMP AdvB;\n\tif (bWasCarried)\n\t{\n\t\tAdvB = Spawn(Class'SkullBallMP',Owner,,Location,Rotation);\n\t\tAdvB.Velocity = Velocity + 0.7 * Owner.Velocity;\n\t\tDestroy();\n\t}\n}\n\ndefaultproperties\n{\n     bInvincible=True\n     ItemName=\"Skull\"\n     Mesh=LodMesh'DeusExDeco.BoneSkull'\n     DrawScale=0.600000\n     CollisionRadius=10.000000\n     CollisionHeight=10.000000\n     bBounce=True\n     Mass=8.000000\n     Buoyancy=10.000000\n}\n",
            "name": "SkullballMP4Player.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bInvincible=True",
                    "ItemName=\"Skull\"",
                    "Mesh=LodMesh'DeusExDeco.BoneSkull'",
                    "DrawScale=0.600000",
                    "CollisionRadius=10.000000",
                    "CollisionHeight=10.000000",
                    "bBounce=True",
                    "Mass=8.000000",
                    "Buoyancy=10.000000"
                ],
                "exec": [],
                "extends": "DeusExDecoration",
                "functions": {
                    "BaseChange": {
                        "body": "{\n\tif (bWasCarried)\n\t{\n\t\tAdvB = Spawn(Class'SkullBallMP',Owner,,Location,Rotation);\n\t\tAdvB.Velocity = Velocity + 0.7 * Owner.Velocity;\n\t\tDestroy();\n\t}\n}",
                        "locals": [
                            "local SkullballMP AdvB;"
                        ],
                        "modifiers": [],
                        "name": "BaseChange",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "bump": {
                        "body": "{\nP = ScriptedPawn(other);\nMove = DeusExMover(other);\nWep = Weapon(other);\nPlayer = DeusExPlayer(other);\nDeco = DeusExDecoration(other);\nBask = Basketball(other);\n\n//Players\n\tif((other.IsA('DeusExPlayer')))\n\t{\n\tPlayer.ReducedDamageType = '';\n    Player.TakeDamage(5000,Player,Player.Location,vect(0,0,0),'Exploded');\n    Destroy();\n\t}\n\n//Pawns\n\tif ((other.IsA('ScriptedPawn')))\n\t{\n\t\tP.binvincible=false;\n\t\t        P.TakeDamage(5000,P,P.Location,vect(0,0,0),'Exploded');\n\t\t            Destroy();\n\t}\n\n//Deco\n\tif ((other.IsA('Decoration')))\n\t{\n\tDeco.TakeDamage(5000,P,P.Location,vect(0,0,0),'Exploded');\n\t    Destroy();\n\t}\n}",
                        "locals": [
                            "local DeusExMover move;",
                            "local Weapon wep;",
                            "local ScriptedPawn P;",
                            "local DeusExDecoration Deco;",
                            "local DeusExPlayer Player;",
                            "local Basketball bask;"
                        ],
                        "modifiers": [],
                        "name": "bump",
                        "native": false,
                        "param": [
                            [
                                "actor",
                                "other"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 66,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "SkullballMP4Player2.uc": {
            "body": "class SkullBallMP4Player2 extends DeusExDecoration;\n\nevent BaseChange()\n{\n\tlocal SkullballMP2 AdvB;\n\tif (bWasCarried)\n\t{\n\t\tAdvB = Spawn(Class'SkullBallMP2',Owner,,Location,Rotation);\n\t\tAdvB.Velocity = Velocity + 0.7 * Owner.Velocity;\n\t\tDestroy();\n\t}\n}\n\ndefaultproperties\n{\n     bInvincible=True\n     ItemName=\"Skull\"\n     Mesh=LodMesh'DeusExDeco.BoneSkull'\n     DrawScale=0.600000\n     CollisionRadius=10.000000\n     CollisionHeight=10.000000\n     bBounce=True\n     Mass=8.000000\n     Buoyancy=10.000000\n}\n",
            "name": "SkullballMP4Player2.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bInvincible=True",
                    "ItemName=\"Skull\"",
                    "Mesh=LodMesh'DeusExDeco.BoneSkull'",
                    "DrawScale=0.600000",
                    "CollisionRadius=10.000000",
                    "CollisionHeight=10.000000",
                    "bBounce=True",
                    "Mass=8.000000",
                    "Buoyancy=10.000000"
                ],
                "exec": [],
                "extends": "DeusExDecoration",
                "functions": {
                    "BaseChange": {
                        "body": "{\n\tif (bWasCarried)\n\t{\n\t\tAdvB = Spawn(Class'SkullBallMP2',Owner,,Location,Rotation);\n\t\tAdvB.Velocity = Velocity + 0.7 * Owner.Velocity;\n\t\tDestroy();\n\t}\n}",
                        "locals": [
                            "local SkullballMP2 AdvB;"
                        ],
                        "modifiers": [],
                        "name": "BaseChange",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 26,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "SmokeCloud.uc": {
            "body": "//=============================================================================\n// SmokeCloud - by Deadalus08.\n//=============================================================================\nclass SmokeCloud extends Cloud;\n\n\nsimulated function Tick(float deltaTime)\n{\n\t//override this function to avoid having the drawscale changed\n}\n\ndefaultproperties\n{\n     DamageType=TearGas\n     Damage=0.500000\n     bBlockSight=True\n     bDetectable=False\n     Texture=FireTexture'Effects.Smoke.SmokePuff1'\n}\n",
            "name": "SmokeCloud.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "DamageType=TearGas",
                    "Damage=0.500000",
                    "bBlockSight=True",
                    "bDetectable=False",
                    "Texture=FireTexture'Effects.Smoke.SmokePuff1'"
                ],
                "exec": [],
                "extends": "Cloud",
                "functions": {
                    "Tick": {
                        "body": "{\n\t//override this function to avoid having the drawscale changed\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltaTime"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 20,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "SmokeGrenade.uc": {
            "body": "//=============================================================================\n// SmokeGrenade - by Deadalus08.\n//=============================================================================\nclass SmokeGrenade extends ThrownProjectile;\n\nvar ParticleGenerator smokeGen;\n\nfunction PostBeginPlay()\n{\n\tSuper.PostBeginPlay();\n\n\tif (Level.NetMode == NM_DedicatedServer)\n\t\treturn;\n   \n   if(!bProximityTriggered)\n\tSpawnSmokeEffects();\n}\n\n\nfunction SpawnSmokeEffects()\n{\n\tsmokeGen = Spawn(class'ParticleGenerator', Self);\n\tif (smokeGen != None)\n\t{\n      smokeGen.RemoteRole = ROLE_None;\n\t\tsmokeGen.particleTexture = Texture'Effects.Smoke.SmokePuff1';\n\t\tsmokeGen.particleDrawScale = 2.0;\n\t\tsmokeGen.checkTime = 0.02;\n\t\tsmokeGen.riseRate = 8.0;\n\t\tsmokeGen.ejectSpeed = 5.0;\n\t\tsmokeGen.particleLifeSpan = 4.0;\n\t\tsmokeGen.bRandomEject = True;\n\t\tsmokeGen.SetBase(Self);\n\t}\n}\n\nfunction Tick(float deltatime)\n{\n\tsuper.Tick(deltatime);\n\t\n\tif(bProximityTriggered)\n\t\tsmokeGen.Destroy();\n\t\n}\n//\n// SpawnTearGas needs to happen on the server so the clouds are insync and damage is dealt out of them\n//\nfunction SpawnTearGas()\n{\n\tlocal Vector loc;\n\tlocal SmokeCloud gas;\n\tlocal int i;\n\n\tif ( Role < ROLE_Authority )\n\t\treturn;\n\n\tsmokeGen.Destroy();\n\t\n\tfor (i=0; i<blastRadius/8; i++)\n\t{\n\t\tif (FRand() < 0.9)\n\t\t{\n\t\t\tloc = Location;\n\t\t\tloc.X += FRand() * blastRadius - blastRadius * 0.5;\n\t\t\tloc.Y += FRand() * blastRadius - blastRadius * 0.5;\n\t\t\tloc.Z += FRand() * blastRadius/36;\n\t\t\tgas = spawn(class'SmokeCloud', None,, loc);\n\t\t\tif (gas != None)\n\t\t\t{\n\t\t\t\tgas.Velocity = vect(0,0,0);\n\t\t\t\tgas.Acceleration = vect(0,0,0);\n\t\t\t\tgas.DrawScale = FRand() * 3.0 + 7.0;\n\t\t\t\tgas.LifeSpan = FRand() * 10 + 30;\t\t\t\t\n\t\t\t\t//gas.Texture=Texture'Effects.Smoke.SmokePuff1';\n\t\t\t\tif ( Level.NetMode != NM_Standalone )\n\t\t\t\t\tgas.bFloating = False;\n\t\t\t\telse\n\t\t\t\t\tgas.bFloating = True;\n\t\t\t\tgas.Instigator = Instigator;\n\t\t\t}\n\t\t}\n\t}\n}\n\ndefaultproperties\n{\n     fuseLength=1.000000\n     proxRadius=128.000000\n     AISoundLevel=0.000000\n     bBlood=False\n     bDebris=False\n     DamageType=TearGas\n     spawnWeaponClass=Class'PartyStuff.WeaponSmokeGrenade'\n     ItemName=\"Gas Grenade\"\n     speed=1000.000000\n     MaxSpeed=1000.000000\n     Damage=10.000000\n     MomentumTransfer=50000\n     ImpactSound=Sound'DeusExSounds.Weapons.GasGrenadeExplode'\n     LifeSpan=0.000000\n     Mesh=LodMesh'DeusExItems.GasGrenadePickup'\n     CollisionRadius=4.300000\n     CollisionHeight=1.400000\n     Mass=5.000000\n     Buoyancy=2.000000\n}\n",
            "name": "SmokeGrenade.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "fuseLength=1.000000",
                    "proxRadius=128.000000",
                    "AISoundLevel=0.000000",
                    "bBlood=False",
                    "bDebris=False",
                    "DamageType=TearGas",
                    "spawnWeaponClass=Class'PartyStuff.WeaponSmokeGrenade'",
                    "ItemName=\"Gas Grenade\"",
                    "speed=1000.000000",
                    "MaxSpeed=1000.000000",
                    "Damage=10.000000",
                    "MomentumTransfer=50000",
                    "ImpactSound=Sound'DeusExSounds.Weapons.GasGrenadeExplode'",
                    "LifeSpan=0.000000",
                    "Mesh=LodMesh'DeusExItems.GasGrenadePickup'",
                    "CollisionRadius=4.300000",
                    "CollisionHeight=1.400000",
                    "Mass=5.000000",
                    "Buoyancy=2.000000"
                ],
                "exec": [],
                "extends": "ThrownProjectile",
                "functions": {
                    "PostBeginPlay": {
                        "body": "{\n\tSuper.PostBeginPlay();\n\n\tif (Level.NetMode == NM_DedicatedServer)\n\t\treturn;\n   \n   if(!bProximityTriggered)\n\tSpawnSmokeEffects();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "SpawnSmokeEffects": {
                        "body": "{\n\tsmokeGen = Spawn(class'ParticleGenerator', Self);\n\tif (smokeGen != None)\n\t{\n      smokeGen.RemoteRole = ROLE_None;\n\t\tsmokeGen.particleTexture = Texture'Effects.Smoke.SmokePuff1';\n\t\tsmokeGen.particleDrawScale = 2.0;\n\t\tsmokeGen.checkTime = 0.02;\n\t\tsmokeGen.riseRate = 8.0;\n\t\tsmokeGen.ejectSpeed = 5.0;\n\t\tsmokeGen.particleLifeSpan = 4.0;\n\t\tsmokeGen.bRandomEject = True;\n\t\tsmokeGen.SetBase(Self);\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "SpawnSmokeEffects",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "SpawnTearGas": {
                        "body": "{\n\n\tif ( Role < ROLE_Authority )\n\t\treturn;\n\n\tsmokeGen.Destroy();\n\t\n\tfor (i=0; i<blastRadius/8; i++)\n\t{\n\t\tif (FRand() < 0.9)\n\t\t{\n\t\t\tloc = Location;\n\t\t\tloc.X += FRand() * blastRadius - blastRadius * 0.5;\n\t\t\tloc.Y += FRand() * blastRadius - blastRadius * 0.5;\n\t\t\tloc.Z += FRand() * blastRadius/36;\n\t\t\tgas = spawn(class'SmokeCloud', None,, loc);\n\t\t\tif (gas != None)\n\t\t\t{\n\t\t\t\tgas.Velocity = vect(0,0,0);\n\t\t\t\tgas.Acceleration = vect(0,0,0);\n\t\t\t\tgas.DrawScale = FRand() * 3.0 + 7.0;\n\t\t\t\tgas.LifeSpan = FRand() * 10 + 30;\t\t\t\t\n\t\t\t\t//gas.Texture=Texture'Effects.Smoke.SmokePuff1';\n\t\t\t\tif ( Level.NetMode != NM_Standalone )\n\t\t\t\t\tgas.bFloating = False;\n\t\t\t\telse\n\t\t\t\t\tgas.bFloating = True;\n\t\t\t\tgas.Instigator = Instigator;\n\t\t\t}\n\t\t}\n\t}\n}",
                        "locals": [
                            "local Vector loc;",
                            "local SmokeCloud gas;",
                            "local int i;"
                        ],
                        "modifiers": [],
                        "name": "SpawnTearGas",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Tick": {
                        "body": "{\n\tsuper.Tick(deltatime);\n\t\n\tif(bProximityTriggered)\n\t\tsmokeGen.Destroy();\n\t\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltatime"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 107,
                "replication": "",
                "states": [],
                "variables": [
                    "var ParticleGenerator smokeGen;"
                ]
            }
        },
        "SpazmGas.uc": {
            "body": "//=============================================================================\n// SpazmGas.\n//=============================================================================\nclass SpazmGas expands Cloud;\n\nVar() float SpazDelay;\n\nFunction Tick(float Deltatime)\n{\n\tlocal Float SpazTime;\n\tlocal DeusExPlayer Victim;\n\tlocal DeusExPlayer POwner;\n\tLocal ScriptedPawn P;\n\n\tSuper.Tick(Deltatime);\n\n\tSpazTime=DeltaTime;\n\n\tIf(SpazTime>SpazDelay)\n\t{\t\n\t\tPOwner=DeusExPlayer(Owner);\n\t\n\t\t\tForEach RadiusActors(class'DeusExPlayer',Victim,128,Self.Location)\n\t\t\t{\n\t\t\t\tif(Victim!=POwner&&Victim.IsInState('PlayerWalking'))\n\t\t\t\t{\n\t\t\t\t\tVictim.GoToState('FeigningDeath'); // Make the player collapse on the floor XD\n\t\t\t\t\tVictim.InHand=None;\n\t\t\t\t}\n\t\t\t}\n\t\t\tForEach RadiusActors(class'ScriptedPawn',P,128,Self.location)\n\t\t\t{\n\t\t\t\tif(!P.IsA('Robot')&&!P.IsA('Animal')) // If this pawn isn't a robot...\n\t\t\t\t{\n\t\t\t\t\tP.GoToState('Stunned'); // Stun them directly, without damage. (Some are invunerable to stunning via damage)\n\t\t\t\t}\n\t\t\t}\n\t\tSpazTime=0.0;\n\t}\n}\n\ndefaultproperties\n{\n     DamageType=Stunned\n     Damage=0.000000\n     Sprite=WetTexture'Effects.Smoke.Gas_Poison_A'\n     Texture=WetTexture'Effects.Smoke.Gas_Poison_A'\n     Skin=WetTexture'Effects.Smoke.Gas_Poison_A'\n}\n",
            "name": "SpazmGas.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "DamageType=Stunned",
                    "Damage=0.000000",
                    "Sprite=WetTexture'Effects.Smoke.Gas_Poison_A'",
                    "Texture=WetTexture'Effects.Smoke.Gas_Poison_A'",
                    "Skin=WetTexture'Effects.Smoke.Gas_Poison_A'"
                ],
                "exec": [],
                "extends": "Cloud",
                "functions": {
                    "Tick": {
                        "body": "{\n\n\tSuper.Tick(Deltatime);\n\n\tSpazTime=DeltaTime;\n\n\tIf(SpazTime>SpazDelay)\n\t{\t\n\t\tPOwner=DeusExPlayer(Owner);\n\t\n\t\t\tForEach RadiusActors(class'DeusExPlayer',Victim,128,Self.Location)\n\t\t\t{\n\t\t\t\tif(Victim!=POwner&&Victim.IsInState('PlayerWalking'))\n\t\t\t\t{\n\t\t\t\t\tVictim.GoToState('FeigningDeath'); // Make the player collapse on the floor XD\n\t\t\t\t\tVictim.InHand=None;\n\t\t\t\t}\n\t\t\t}\n\t\t\tForEach RadiusActors(class'ScriptedPawn',P,128,Self.location)\n\t\t\t{\n\t\t\t\tif(!P.IsA('Robot')&&!P.IsA('Animal')) // If this pawn isn't a robot...\n\t\t\t\t{\n\t\t\t\t\tP.GoToState('Stunned'); // Stun them directly, without damage. (Some are invunerable to stunning via damage)\n\t\t\t\t}\n\t\t\t}\n\t\tSpazTime=0.0;\n\t}\n}",
                        "locals": [
                            "local Float SpazTime;",
                            "local DeusExPlayer Victim;",
                            "local DeusExPlayer POwner;",
                            "Local ScriptedPawn P;"
                        ],
                        "modifiers": [],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "Deltatime"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 50,
                "replication": "",
                "states": [],
                "variables": [
                    "Var() float SpazDelay;"
                ]
            }
        },
        "SphereEffectXL.uc": {
            "body": "//=============================================================================\n// SphereEffectXL\n//=============================================================================\nclass SphereEffectXL expands Effects;\n\ndefaultproperties\n{\n     DrawType=DT_Mesh\n     Style=STY_Translucent\n     Mesh=LodMesh'DeusExItems.SphereEffect'\n     DrawScale=15.000000\n     bUnlit=True\n}\n",
            "name": "SphereEffectXL.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "DrawType=DT_Mesh",
                    "Style=STY_Translucent",
                    "Mesh=LodMesh'DeusExItems.SphereEffect'",
                    "DrawScale=15.000000",
                    "bUnlit=True"
                ],
                "exec": [],
                "extends": "Effects",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 14,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "SprayPaint.uc": {
            "body": "//=============================================================================\n// SprayPaint\n//=============================================================================\nclass SprayPaint extends DeusExAmmo;\n\ndefaultproperties\n{\n     bShowInfo=True\n     AmmoAmount=800\n     MaxAmmo=800\n     ItemName=\"Spray Paint\"\n     ItemArticle=\"some\"\n     PickupViewMesh=LodMesh'DeusExItems.AmmoPepper'\n     LandSound=Sound'DeusExSounds.Generic.GlassHit1'\n     Icon=Texture'DeusExUI.Icons.BeltIconAmmoPepper'\n     largeIconWidth=19\n     largeIconHeight=45\n     Description=\"'ANTIGONE pepper spray will incapacitate your attacker in UNDER TWO SECONDS. ANTIGONE -- better BLIND than DEAD. NOTE: Keep away from children under the age of five. Contents under pressure.'\"\n     beltDescription=\"SPRAY\"\n     Mesh=LodMesh'DeusExItems.AmmoPepper'\n     CollisionRadius=1.440000\n     CollisionHeight=3.260000\n     bCollideActors=True\n}\n",
            "name": "SprayPaint.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bShowInfo=True",
                    "AmmoAmount=800",
                    "MaxAmmo=800",
                    "ItemName=\"Spray Paint\"",
                    "ItemArticle=\"some\"",
                    "PickupViewMesh=LodMesh'DeusExItems.AmmoPepper'",
                    "LandSound=Sound'DeusExSounds.Generic.GlassHit1'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconAmmoPepper'",
                    "largeIconWidth=19",
                    "largeIconHeight=45",
                    "Description=\"'ANTIGONE pepper spray will incapacitate your attacker in UNDER TWO SECONDS. ANTIGONE -- better BLIND than DEAD. NOTE: Keep away from children under the age of five. Contents under pressure.'\"",
                    "beltDescription=\"SPRAY\"",
                    "Mesh=LodMesh'DeusExItems.AmmoPepper'",
                    "CollisionRadius=1.440000",
                    "CollisionHeight=3.260000",
                    "bCollideActors=True"
                ],
                "exec": [],
                "extends": "DeusExAmmo",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 25,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "SprayPaintBlue.uc": {
            "body": "//=============================================================================\n// SprayPaint\n//=============================================================================\nclass SprayPaintBlue extends SprayPaint;\n\ndefaultproperties\n{\n     ItemName=\"Blue Spray Paint\"\n}\n",
            "name": "SprayPaintBlue.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "ItemName=\"Blue Spray Paint\""
                ],
                "exec": [],
                "extends": "SprayPaint",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 10,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "SprayPaintPink.uc": {
            "body": "//=============================================================================\n// SprayPaint\n//=============================================================================\nclass SprayPaintPink extends SprayPaint;\n\ndefaultproperties\n{\n     ItemName=\"Pink Spray Paint\"\n}\n",
            "name": "SprayPaintPink.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "ItemName=\"Pink Spray Paint\""
                ],
                "exec": [],
                "extends": "SprayPaint",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 10,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "SprayPaintRed.uc": {
            "body": "//=============================================================================\n// SprayPaint\n//=============================================================================\nclass SprayPaintRed extends SprayPaint;\n\ndefaultproperties\n{\n     ItemName=\"Red Spray Paint\"\n}\n",
            "name": "SprayPaintRed.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "ItemName=\"Red Spray Paint\""
                ],
                "exec": [],
                "extends": "SprayPaint",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 10,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "SprayPaintYellow.uc": {
            "body": "//=============================================================================\n// SprayPaint\n//=============================================================================\nclass SprayPaintYellow extends SprayPaint;\n\ndefaultproperties\n{\n     ItemName=\"Yellow Spray Paint\"\n}\n",
            "name": "SprayPaintYellow.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "ItemName=\"Yellow Spray Paint\""
                ],
                "exec": [],
                "extends": "SprayPaint",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 10,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "StaffCard.uc": {
            "body": "//=============================================================================\n// StaffCard.\n//=============================================================================\nclass StaffCard expands DeusExPickup;\n\n\n// ----------------------------------------------------------------------\n// TestMPBeltSpot()\n// Returns true if the suggested belt location is ok for the object in mp.\n// ----------------------------------------------------------------------\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\ndefaultproperties\n{\n     bCanHaveMultipleCopies=True\n     ItemName=\"Staff Card\"\n     PlayerViewOffset=(X=30.000000,Z=-12.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.Credits'\n     PickupViewMesh=LodMesh'DeusExItems.Credits'\n     ThirdPersonMesh=LodMesh'DeusExItems.Credits'\n     LandSound=Sound'DeusExSounds.Generic.PlasticHit1'\n     Icon=Texture'DeusExUI.Icons.BeltIconCredits'\n     beltDescription=\"Staff Pass\"\n     Mesh=LodMesh'DeusExItems.Credits'\n     MultiSkins(0)=Texture'DeusExUI.UserInterface.ComputerLogonLogoArea51'\n     CollisionRadius=7.000000\n     CollisionHeight=0.550000\n     Mass=2.000000\n     Buoyancy=3.000000\n}\n",
            "name": "StaffCard.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bCanHaveMultipleCopies=True",
                    "ItemName=\"Staff Card\"",
                    "PlayerViewOffset=(X=30.000000,Z=-12.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.Credits'",
                    "PickupViewMesh=LodMesh'DeusExItems.Credits'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.Credits'",
                    "LandSound=Sound'DeusExSounds.Generic.PlasticHit1'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconCredits'",
                    "beltDescription=\"Staff Pass\"",
                    "Mesh=LodMesh'DeusExItems.Credits'",
                    "MultiSkins(0)=Texture'DeusExUI.UserInterface.ComputerLogonLogoArea51'",
                    "CollisionRadius=7.000000",
                    "CollisionHeight=0.550000",
                    "Mass=2.000000",
                    "Buoyancy=3.000000"
                ],
                "exec": [],
                "extends": "DeusExPickup",
                "functions": {
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 35,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "StatueBird.uc": {
            "body": "//=============================================================================\n// FlagPole.\n//=============================================================================\nclass StatueBird extends DeusExDecoration;\n#exec obj load file=CoreTexStone.utx\n\ndefaultproperties\n{\n     bInvincible=True\n     FragType=Class'DeusEx.WoodFragment'\n     ItemName=\"Stone Bird\"\n     Mesh=LodMesh'DeusExCharacters.Seagull'\n     DrawScale=5.000000\n     MultiSkins(0)=Texture'CoreTexStone.Stone.ClenGrenSlate_A'\n     CollisionRadius=30.000000\n     CollisionHeight=32.000000\n     Mass=50.000000\n     Buoyancy=30.000000\n}\n",
            "name": "StatueBird.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bInvincible=True",
                    "FragType=Class'DeusEx.WoodFragment'",
                    "ItemName=\"Stone Bird\"",
                    "Mesh=LodMesh'DeusExCharacters.Seagull'",
                    "DrawScale=5.000000",
                    "MultiSkins(0)=Texture'CoreTexStone.Stone.ClenGrenSlate_A'",
                    "CollisionRadius=30.000000",
                    "CollisionHeight=32.000000",
                    "Mass=50.000000",
                    "Buoyancy=30.000000"
                ],
                "exec": [
                    "#exec obj load file=CoreTexStone.utx"
                ],
                "extends": "DeusExDecoration",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 20,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "StatueCat.uc": {
            "body": "//=============================================================================\n// FlagPole.\n//=============================================================================\nclass StatueCat extends DeusExDecoration;\n#exec obj load file=CoreTexStone.utx\n\ndefaultproperties\n{\n     bInvincible=True\n     FragType=Class'DeusEx.WoodFragment'\n     ItemName=\"Stone Cat\"\n     Mesh=LodMesh'DeusExCharacters.Cat'\n     DrawScale=3.000000\n     MultiSkins(0)=Texture'CoreTexStone.Stone.ClenGrenSlate_A'\n     CollisionRadius=33.000000\n     CollisionHeight=40.000000\n     Mass=50.000000\n     Buoyancy=30.000000\n}\n",
            "name": "StatueCat.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bInvincible=True",
                    "FragType=Class'DeusEx.WoodFragment'",
                    "ItemName=\"Stone Cat\"",
                    "Mesh=LodMesh'DeusExCharacters.Cat'",
                    "DrawScale=3.000000",
                    "MultiSkins(0)=Texture'CoreTexStone.Stone.ClenGrenSlate_A'",
                    "CollisionRadius=33.000000",
                    "CollisionHeight=40.000000",
                    "Mass=50.000000",
                    "Buoyancy=30.000000"
                ],
                "exec": [
                    "#exec obj load file=CoreTexStone.utx"
                ],
                "extends": "DeusExDecoration",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 20,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "StatueGreasel.uc": {
            "body": "//=============================================================================\n// FlagPole.\n//=============================================================================\nclass StatueGreasel extends DeusExDecoration;\n#exec obj load file=CoreTexStone.utx\n\ndefaultproperties\n{\n     bInvincible=True\n     FragType=Class'DeusEx.WoodFragment'\n     ItemName=\"Stone Greasel\"\n     Mesh=LodMesh'DeusExCharacters.Greasel'\n     DrawScale=2.000000\n     MultiSkins(0)=Texture'CoreTexStone.Stone.ClenGrenSlate_A'\n     CollisionRadius=30.000000\n     CollisionHeight=36.000000\n     Mass=50.000000\n     Buoyancy=30.000000\n}\n",
            "name": "StatueGreasel.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bInvincible=True",
                    "FragType=Class'DeusEx.WoodFragment'",
                    "ItemName=\"Stone Greasel\"",
                    "Mesh=LodMesh'DeusExCharacters.Greasel'",
                    "DrawScale=2.000000",
                    "MultiSkins(0)=Texture'CoreTexStone.Stone.ClenGrenSlate_A'",
                    "CollisionRadius=30.000000",
                    "CollisionHeight=36.000000",
                    "Mass=50.000000",
                    "Buoyancy=30.000000"
                ],
                "exec": [
                    "#exec obj load file=CoreTexStone.utx"
                ],
                "extends": "DeusExDecoration",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 20,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "StatueKarkian.uc": {
            "body": "//=============================================================================\n// FlagPole.\n//=============================================================================\nclass StatueKarkian extends DeusExDecoration;\n#exec obj load file=CoreTexStone.utx\n\ndefaultproperties\n{\n     bInvincible=True\n     FragType=Class'DeusEx.WoodFragment'\n     ItemName=\"Stone Karkian\"\n     Mesh=LodMesh'DeusExCharacters.Karkian'\n     MultiSkins(0)=Texture'CoreTexStone.Stone.ClenGrenSlate_A'\n     CollisionRadius=54.000000\n     CollisionHeight=37.000000\n     Mass=50.000000\n     Buoyancy=30.000000\n}\n",
            "name": "StatueKarkian.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bInvincible=True",
                    "FragType=Class'DeusEx.WoodFragment'",
                    "ItemName=\"Stone Karkian\"",
                    "Mesh=LodMesh'DeusExCharacters.Karkian'",
                    "MultiSkins(0)=Texture'CoreTexStone.Stone.ClenGrenSlate_A'",
                    "CollisionRadius=54.000000",
                    "CollisionHeight=37.000000",
                    "Mass=50.000000",
                    "Buoyancy=30.000000"
                ],
                "exec": [
                    "#exec obj load file=CoreTexStone.utx"
                ],
                "extends": "DeusExDecoration",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 19,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "StatueMutt.uc": {
            "body": "//=============================================================================\n// FlagPole.\n//=============================================================================\nclass StatueMutt extends DeusExDecoration;\n#exec obj load file=CoreTexStone.utx\n\ndefaultproperties\n{\n     bInvincible=True\n     FragType=Class'DeusEx.WoodFragment'\n     ItemName=\"Stone Mutt\"\n     Mesh=LodMesh'DeusExCharacters.Mutt'\n     DrawScale=2.000000\n     MultiSkins(0)=Texture'CoreTexStone.Stone.ClenGrenSlate_A'\n     CollisionRadius=50.000000\n     CollisionHeight=52.000000\n     Mass=50.000000\n     Buoyancy=30.000000\n}\n",
            "name": "StatueMutt.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bInvincible=True",
                    "FragType=Class'DeusEx.WoodFragment'",
                    "ItemName=\"Stone Mutt\"",
                    "Mesh=LodMesh'DeusExCharacters.Mutt'",
                    "DrawScale=2.000000",
                    "MultiSkins(0)=Texture'CoreTexStone.Stone.ClenGrenSlate_A'",
                    "CollisionRadius=50.000000",
                    "CollisionHeight=52.000000",
                    "Mass=50.000000",
                    "Buoyancy=30.000000"
                ],
                "exec": [
                    "#exec obj load file=CoreTexStone.utx"
                ],
                "extends": "DeusExDecoration",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 20,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "StrobeLamp.uc": {
            "body": "//=============================================================================\n// RandomColourLamp.\n//=============================================================================\nclass StrobeLamp expands Lamp;\n\nfunction tick(float v)\n{\nlocal int random;\n\trandom = Rand(255);\n\tif(bOn)\n\t{\n\tLightHue = random;\n\t\tif(LightType != LT_Steady)\n\t\t{\n\t\t\tLightType=LT_Steady;\n\t\t\tLightEffect=LE_NonIncidence;\t\t\n\t\t}\n\t}\n}\n\nfunction Frob(Actor Frobber, Inventory frobWith)\n{\n    local int Random;\n\tSuper.Frob(Frobber, frobWith);\n\n\tif (bOn)\n\t{\n\t\tLightType=LT_Steady;\n\t\tLightEffect=LE_NonIncidence;\n\t}\n\telse\n\t{\n\t\tLightType=LT_None;\n\t}\n}\n\ndefaultproperties\n{\n     bInvincible=True\n     ItemName=\"Strobe Lamp\"\n     Mesh=LodMesh'DeusExDeco.Lamp2'\n     CollisionRadius=15.000000\n     CollisionHeight=47.000000\n     LightSaturation=0\n     LightRadius=18\n}\n",
            "name": "StrobeLamp.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bInvincible=True",
                    "ItemName=\"Strobe Lamp\"",
                    "Mesh=LodMesh'DeusExDeco.Lamp2'",
                    "CollisionRadius=15.000000",
                    "CollisionHeight=47.000000",
                    "LightSaturation=0",
                    "LightRadius=18"
                ],
                "exec": [],
                "extends": "Lamp",
                "functions": {
                    "Frob": {
                        "body": "{\n\tSuper.Frob(Frobber, frobWith);\n\n\tif (bOn)\n\t{\n\t\tLightType=LT_Steady;\n\t\tLightEffect=LE_NonIncidence;\n\t}\n\telse\n\t{\n\t\tLightType=LT_None;\n\t}\n}",
                        "locals": [
                            "local int Random;"
                        ],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    },
                    "tick": {
                        "body": "{\n\trandom = Rand(255);\n\tif(bOn)\n\t{\n\tLightHue = random;\n\t\tif(LightType != LT_Steady)\n\t\t{\n\t\t\tLightType=LT_Steady;\n\t\t\tLightEffect=LE_NonIncidence;\t\t\n\t\t}\n\t}\n}",
                        "locals": [
                            "local int random;"
                        ],
                        "modifiers": [],
                        "name": "tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "v"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 47,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "SuperCleanerBot.uc": {
            "body": "//=============================================================================\n// CleanerBot.\n//=============================================================================\nclass SuperCleanerBot extends Robot;\n\nvar float blotchTimer;\nvar float fleePawnTimer;\n\nenum ECleanDirection  {\n\tCLEANDIR_North,\n\tCLEANDIR_South,\n\tCLEANDIR_East,\n\tCLEANDIR_West\n};\n\nvar ECleanDirection minorDir;\nvar ECleanDirection majorDir;\n\nfunction Frob(Actor Frobber, Inventory frobWith) \n{\nlocal string resoWut;\nlocal int r;\nlocal DeusExPlayer P;\nlocal SuperCleanerBotItem h;\n\t\t\t\t\tDestroy();\n\t\t\t\t\th=Spawn(class'SuperCleanerBotItem', Self,, Location, Rotation);\n\t\t\t\t\th.Frob(DeusExPlayer(Frobber),None);\n\t\t\t\t\th.bInObjectBelt = True;\n\t\t\t\t\th.Destroy();\n}\n\nfunction Tick(float deltaSeconds)\n{\n\tlocal pawn        fearPawn;\n\tlocal DeusExDecal blotch;\n\tlocal float       deltaXY, deltaZ;\n\tlocal Inventory inv;\n\t\n\tSuper.Tick(deltaSeconds);\n\n\tfleePawnTimer += deltaSeconds;\n\tif (fleePawnTimer > 0.5)\n\t{\n\t\tfleePawnTimer = 0;\n\t\tfearPawn = FrightenedByPawn();\n\t\tif (fearPawn != None)\n\t\t\tFleeFromPawn(fearPawn);\n\t}\n\n\tblotchTimer += deltaSeconds;\n\tif (blotchTimer > 0.3)\n\t{\n\t\tblotchTimer = 0;\n\t\t\t\t\n\t\tforeach RadiusActors(Class'Inventory', inv, CollisionRadius*2)\n\t\t{\n\t\t\tinv.Lifespan=1;\n\t\t}\n\t}\n}\n\n// hack -- copied from Animal.uc\nfunction Pawn FrightenedByPawn()\n{\n\tlocal pawn  candidate;\n\tlocal bool  bCheck;\n\tlocal Pawn  fearPawn;\n\n\tfearPawn = None;\n\tif (!bBlockActors && !bBlockPlayers)\n\t\treturn fearPawn;\n\n\tforeach RadiusActors(Class'Pawn', candidate, 500)\n\t{\n\t\tbCheck = false;\n\t\tif (!ClassIsChildOf(candidate.Class, Class))\n\t\t{\n\t\t\tif (candidate.bBlockActors)\n\t\t\t{\n\t\t\t\tif (bBlockActors && !candidate.bIsPlayer)\n\t\t\t\t\tbCheck = true;\n\t\t\t\telse if (bBlockPlayers && candidate.bIsPlayer)\n\t\t\t\t\tbCheck = true;\n\t\t\t}\n\t\t}\n\n\t\tif (bCheck)\n\t\t{\n\t\t\tif ((candidate.MaxStepHeight < CollisionHeight*1.5) && (candidate.CollisionHeight*0.5 <= CollisionHeight))\n\t\t\t\tbCheck = false;\n\t\t}\n\n\t\tif (bCheck)\n\t\t{\n\t\t\tif (ShouldBeStartled(candidate))\n\t\t\t{\n\t\t\t\tfearPawn = candidate;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn fearPawn;\n}\n\n\nfunction bool ShouldBeStartled(Pawn startler)\n{\n\tlocal float speed;\n\tlocal float time;\n\tlocal float dist;\n\tlocal float dist2;\n\tlocal bool  bPh33r;\n\n\tbPh33r = false;\n\tif (IsValidEnemy(startler, False))\n\t{\n\t\tspeed = VSize(startler.Velocity);\n\t\tif (speed >= 20)\n\t\t{\n\t\t\tdist = VSize(Location - startler.Location);\n\t\t\ttime = dist/speed;\n\t\t\tif (time <= 2.0)\n\t\t\t{\n\t\t\t\tdist2 = VSize(Location - (startler.Location+startler.Velocity*time));\n\t\t\t\tif (dist2 < speed*0.8)\n\t\t\t\t\tbPh33r = true;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn bPh33r;\n}\n\nfunction FleeFromPawn(Pawn fleePawn)\n{\n\tSetEnemy(fleePawn, , true);\n\tGotoState('AvoidingPawn');\n}\n\n\nstate Wandering\n{\n\tignores EnemyNotVisible;\n\n\tfunction SetFall()\n\t{\n\t\tStartFalling('Wandering', 'ContinueWander');\n\t}\n\n\tfunction Bump(actor bumper)\n\t{\n\t\tif (bAcceptBump)\n\t\t{\n\t\t\t// If we get bumped by another actor while we wait, start wandering again\n\t\t\tbAcceptBump = False;\n\t\t\tDisable('AnimEnd');\n\t\t\tGotoState('Wandering', 'Wander');\n\t\t}\n\n\t\t// Handle conversations, if need be\n\t\tGlobal.Bump(bumper);\n\t}\n\n\tfunction HitWall(vector HitNormal, actor Wall)\n\t{\n\t\tif (Physics == PHYS_Falling)\n\t\t\treturn;\n\t\tGlobal.HitWall(HitNormal, Wall);\n\t\tCheckOpenDoor(HitNormal, Wall);\n\t}\n\n\tfunction BeginState()\n\t{\n\t\tSuper.BeginState();\n\t}\n\n\tfunction EndState()\n\t{\n\t\tSuper.EndState();\n\t}\n\n\tfunction rotator RotationDir(ECleanDirection cleanDir)\n\t{\n\t\tlocal rotator rot;\n\n\t\trot = rot(0,0,0);\n\t\tif      (cleanDir == CLEANDIR_North)\n\t\t\trot.Yaw = 0;\n\t\telse if (cleanDir == CLEANDIR_South)\n\t\t\trot.Yaw = 32768;\n\t\telse if (cleanDir == CLEANDIR_East)\n\t\t\trot.Yaw = 16384;\n\t\telse if (cleanDir == CLEANDIR_West)\n\t\t\trot.Yaw = 49152;\n\n\t\treturn (rot);\n\t}\n\n\tfunction ECleanDirection GetReverseDirection(ECleanDirection cleanDir)\n\t{\n\t\tif      (cleanDir == CLEANDIR_North)\n\t\t\tcleanDir = CLEANDIR_South;\n\t\telse if (cleanDir == CLEANDIR_South)\n\t\t\tcleanDir = CLEANDIR_North;\n\t\telse if (cleanDir == CLEANDIR_East)\n\t\t\tcleanDir = CLEANDIR_West;\n\t\telse if (cleanDir == CLEANDIR_West)\n\t\t\tcleanDir = CLEANDIR_East;\n\n\t\treturn (cleanDir);\n\t}\n\n\tfunction PickDestination()\n\t{\n\t\tlocal Rotator rot;\n\t\tlocal float   minorMagnitude, majorMagnitude;\n\t\tlocal float   minDist;\n\n\t\tMoveTarget = None;\n\t\tdestPoint  = None;\n\n\t\tminorMagnitude = 256;\n\t\tmajorMagnitude = CollisionRadius*2;\n\t\tminDist        = 24;\n\n\t\trot = RotationDir(minorDir);\n\t\tif (!AIDirectionReachable(Location, rot.Yaw, rot.Pitch,\n\t\t                          minDist, minorMagnitude, destLoc))\n\t\t{\n\t\t\tminorDir = GetReverseDirection(minorDir);\n\t\t\trot = RotationDir(majorDir);\n\t\t\tif (!AIDirectionReachable(Location, rot.Yaw, rot.Pitch,\n\t\t\t                          minDist, majorMagnitude, destLoc))\n\t\t\t{\n\t\t\t\tmajorDir = GetReverseDirection(majorDir);\n\t\t\t\trot = RotationDir(minorDir);\n\t\t\t\tif (!AIDirectionReachable(Location, rot.Yaw, rot.Pitch,\n\t\t\t\t                          minDist, minorMagnitude, destLoc))\n\t\t\t\t{\n\t\t\t\t\tminorDir = GetReverseDirection(minorDir);\n\t\t\t\t\trot = RotationDir(majorDir);\n\t\t\t\t\tif (!AIDirectionReachable(Location, rot.Yaw, rot.Pitch,\n\t\t\t\t\t                          minDist, majorMagnitude, destLoc))\n\t\t\t\t\t{\n\t\t\t\t\t\tmajorDir = GetReverseDirection(majorDir);\n\t\t\t\t\t\tdestLoc = Location;  // give up\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\nBegin:\n\tdestPoint = None;\n\nGoHome:\n\tbAcceptBump = false;\n\tTweenToWalking(0.15);\n\tWaitForLanding();\n\tFinishAnim();\n\tPlayWalking();\n\nWander:\n\tPickDestination();\n\nMoving:\n\t// Move from pathnode to pathnode until we get where we're going\n\tPlayWalking();\n\tMoveTo(destLoc, GetWalkingSpeed());\n\nPausing:\n\tif (destLoc == Location)\n\t\tSleep(1.0);\n\tGoto('Wander');\n\nContinueWander:\nContinueFromDoor:\n\tFinishAnim();\n\tPlayWalking();\n\tGoto('Wander');\n}\n\ndefaultproperties\n{\n     EMPHitPoints=20\n     WalkingSpeed=0.200000\n     GroundSpeed=300.000000\n     WaterSpeed=50.000000\n     AirSpeed=144.000000\n     AccelRate=500.000000\n     Health=20\n     UnderWaterTime=20.000000\n     Mesh=LodMesh'DeusExCharacters.CleanerBot'\n     SoundRadius=16\n     SoundVolume=128\n     AmbientSound=Sound'DeusExSounds.Robot.CleanerBotMove'\n     CollisionRadius=18.000000\n     CollisionHeight=11.210000\n     Mass=70.000000\n     Buoyancy=97.000000\n     RotationRate=(Yaw=100000)\n     BindName=\"Super CleanerBot\"\n     FamiliarName=\"Super Cleaner Bot\"\n     UnfamiliarName=\"Super Cleaner Bot\"\n}\n",
            "name": "SuperCleanerBot.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "EMPHitPoints=20",
                    "WalkingSpeed=0.200000",
                    "GroundSpeed=300.000000",
                    "WaterSpeed=50.000000",
                    "AirSpeed=144.000000",
                    "AccelRate=500.000000",
                    "Health=20",
                    "UnderWaterTime=20.000000",
                    "Mesh=LodMesh'DeusExCharacters.CleanerBot'",
                    "SoundRadius=16",
                    "SoundVolume=128",
                    "AmbientSound=Sound'DeusExSounds.Robot.CleanerBotMove'",
                    "CollisionRadius=18.000000",
                    "CollisionHeight=11.210000",
                    "Mass=70.000000",
                    "Buoyancy=97.000000",
                    "RotationRate=(Yaw=100000)",
                    "BindName=\"Super CleanerBot\"",
                    "FamiliarName=\"Super Cleaner Bot\"",
                    "UnfamiliarName=\"Super Cleaner Bot\""
                ],
                "exec": [],
                "extends": "Robot",
                "functions": {
                    "BeginState": {
                        "body": "{\n\t\tSuper.BeginState();\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "BeginState",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Bump": {
                        "body": "{\n\t\tif (bAcceptBump)\n\t\t{\n\t\t\t// If we get bumped by another actor while we wait, start wandering again\n\t\t\tbAcceptBump = False;\n\t\t\tDisable('AnimEnd');\n\t\t\tGotoState('Wandering', 'Wander');\n\t\t}\n\n\t\t// Handle conversations, if need be\n\t\tGlobal.Bump(bumper);\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Bump",
                        "native": false,
                        "param": [
                            [
                                "actor",
                                "bumper"
                            ]
                        ],
                        "return": ""
                    },
                    "EndState": {
                        "body": "{\n\t\tSuper.EndState();\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "EndState",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "FleeFromPawn": {
                        "body": "{\n\tSetEnemy(fleePawn, , true);\n\tGotoState('AvoidingPawn');\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "FleeFromPawn",
                        "native": false,
                        "param": [
                            [
                                "Pawn",
                                "fleePawn"
                            ]
                        ],
                        "return": ""
                    },
                    "FrightenedByPawn": {
                        "body": "{\n\n\tfearPawn = None;\n\tif (!bBlockActors && !bBlockPlayers)\n\t\treturn fearPawn;\n\n\tforeach RadiusActors(Class'Pawn', candidate, 500)\n\t{\n\t\tbCheck = false;\n\t\tif (!ClassIsChildOf(candidate.Class, Class))\n\t\t{\n\t\t\tif (candidate.bBlockActors)\n\t\t\t{\n\t\t\t\tif (bBlockActors && !candidate.bIsPlayer)\n\t\t\t\t\tbCheck = true;\n\t\t\t\telse if (bBlockPlayers && candidate.bIsPlayer)\n\t\t\t\t\tbCheck = true;\n\t\t\t}\n\t\t}\n\n\t\tif (bCheck)\n\t\t{\n\t\t\tif ((candidate.MaxStepHeight < CollisionHeight*1.5) && (candidate.CollisionHeight*0.5 <= CollisionHeight))\n\t\t\t\tbCheck = false;\n\t\t}\n\n\t\tif (bCheck)\n\t\t{\n\t\t\tif (ShouldBeStartled(candidate))\n\t\t\t{\n\t\t\t\tfearPawn = candidate;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn fearPawn;\n}",
                        "locals": [
                            "local pawn  candidate;",
                            "local bool  bCheck;",
                            "local Pawn  fearPawn;"
                        ],
                        "modifiers": [],
                        "name": "FrightenedByPawn",
                        "native": false,
                        "param": [],
                        "return": "Pawn"
                    },
                    "Frob": {
                        "body": "{\n\t\t\t\t\tDestroy();\n\t\t\t\t\th=Spawn(class'SuperCleanerBotItem', Self,, Location, Rotation);\n\t\t\t\t\th.Frob(DeusExPlayer(Frobber),None);\n\t\t\t\t\th.bInObjectBelt = True;\n\t\t\t\t\th.Destroy();\n}",
                        "locals": [
                            "local string resoWut;",
                            "local int r;",
                            "local DeusExPlayer P;",
                            "local SuperCleanerBotItem h;"
                        ],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    },
                    "GetReverseDirection": {
                        "body": "{\n\t\tif      (cleanDir == CLEANDIR_North)\n\t\t\tcleanDir = CLEANDIR_South;\n\t\telse if (cleanDir == CLEANDIR_South)\n\t\t\tcleanDir = CLEANDIR_North;\n\t\telse if (cleanDir == CLEANDIR_East)\n\t\t\tcleanDir = CLEANDIR_West;\n\t\telse if (cleanDir == CLEANDIR_West)\n\t\t\tcleanDir = CLEANDIR_East;\n\n\t\treturn (cleanDir);\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetReverseDirection",
                        "native": false,
                        "param": [
                            [
                                "ECleanDirection",
                                "cleanDir"
                            ]
                        ],
                        "return": "ECleanDirection"
                    },
                    "HitWall": {
                        "body": "{\n\t\tif (Physics == PHYS_Falling)\n\t\t\treturn;\n\t\tGlobal.HitWall(HitNormal, Wall);\n\t\tCheckOpenDoor(HitNormal, Wall);\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "HitWall",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "HitNormal"
                            ],
                            [
                                "actor",
                                "Wall"
                            ]
                        ],
                        "return": ""
                    },
                    "PickDestination": {
                        "body": "{\n\n\t\tMoveTarget = None;\n\t\tdestPoint  = None;\n\n\t\tminorMagnitude = 256;\n\t\tmajorMagnitude = CollisionRadius*2;\n\t\tminDist        = 24;\n\n\t\trot = RotationDir(minorDir);\n\t\tif (!AIDirectionReachable(Location, rot.Yaw, rot.Pitch,\n\t\t                          minDist, minorMagnitude, destLoc))\n\t\t{\n\t\t\tminorDir = GetReverseDirection(minorDir);\n\t\t\trot = RotationDir(majorDir);\n\t\t\tif (!AIDirectionReachable(Location, rot.Yaw, rot.Pitch,\n\t\t\t                          minDist, majorMagnitude, destLoc))\n\t\t\t{\n\t\t\t\tmajorDir = GetReverseDirection(majorDir);\n\t\t\t\trot = RotationDir(minorDir);\n\t\t\t\tif (!AIDirectionReachable(Location, rot.Yaw, rot.Pitch,\n\t\t\t\t                          minDist, minorMagnitude, destLoc))\n\t\t\t\t{\n\t\t\t\t\tminorDir = GetReverseDirection(minorDir);\n\t\t\t\t\trot = RotationDir(majorDir);\n\t\t\t\t\tif (!AIDirectionReachable(Location, rot.Yaw, rot.Pitch,\n\t\t\t\t\t                          minDist, majorMagnitude, destLoc))\n\t\t\t\t\t{\n\t\t\t\t\t\tmajorDir = GetReverseDirection(majorDir);\n\t\t\t\t\t\tdestLoc = Location;  // give up\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}",
                        "locals": [
                            "local Rotator rot;",
                            "local float   minorMagnitude, majorMagnitude;",
                            "local float   minDist;"
                        ],
                        "modifiers": [],
                        "name": "PickDestination",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "RotationDir": {
                        "body": "{\n\n\t\trot = rot(0,0,0);\n\t\tif      (cleanDir == CLEANDIR_North)\n\t\t\trot.Yaw = 0;\n\t\telse if (cleanDir == CLEANDIR_South)\n\t\t\trot.Yaw = 32768;\n\t\telse if (cleanDir == CLEANDIR_East)\n\t\t\trot.Yaw = 16384;\n\t\telse if (cleanDir == CLEANDIR_West)\n\t\t\trot.Yaw = 49152;\n\n\t\treturn (rot);\n\t}",
                        "locals": [
                            "local rotator rot;"
                        ],
                        "modifiers": [],
                        "name": "RotationDir",
                        "native": false,
                        "param": [
                            [
                                "ECleanDirection",
                                "cleanDir"
                            ]
                        ],
                        "return": "rotator"
                    },
                    "SetFall": {
                        "body": "{\n\t\tStartFalling('Wandering', 'ContinueWander');\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetFall",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ShouldBeStartled": {
                        "body": "{\n\n\tbPh33r = false;\n\tif (IsValidEnemy(startler, False))\n\t{\n\t\tspeed = VSize(startler.Velocity);\n\t\tif (speed >= 20)\n\t\t{\n\t\t\tdist = VSize(Location - startler.Location);\n\t\t\ttime = dist/speed;\n\t\t\tif (time <= 2.0)\n\t\t\t{\n\t\t\t\tdist2 = VSize(Location - (startler.Location+startler.Velocity*time));\n\t\t\t\tif (dist2 < speed*0.8)\n\t\t\t\t\tbPh33r = true;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn bPh33r;\n}",
                        "locals": [
                            "local float speed;",
                            "local float time;",
                            "local float dist;",
                            "local float dist2;",
                            "local bool  bPh33r;"
                        ],
                        "modifiers": [],
                        "name": "ShouldBeStartled",
                        "native": false,
                        "param": [
                            [
                                "Pawn",
                                "startler"
                            ]
                        ],
                        "return": "bool"
                    },
                    "Tick": {
                        "body": "{\n\t\n\tSuper.Tick(deltaSeconds);\n\n\tfleePawnTimer += deltaSeconds;\n\tif (fleePawnTimer > 0.5)\n\t{\n\t\tfleePawnTimer = 0;\n\t\tfearPawn = FrightenedByPawn();\n\t\tif (fearPawn != None)\n\t\t\tFleeFromPawn(fearPawn);\n\t}\n\n\tblotchTimer += deltaSeconds;\n\tif (blotchTimer > 0.3)\n\t{\n\t\tblotchTimer = 0;\n\t\t\t\t\n\t\tforeach RadiusActors(Class'Inventory', inv, CollisionRadius*2)\n\t\t{\n\t\t\tinv.Lifespan=1;\n\t\t}\n\t}\n}",
                        "locals": [
                            "local pawn        fearPawn;",
                            "local DeusExDecal blotch;",
                            "local float       deltaXY, deltaZ;",
                            "local Inventory inv;"
                        ],
                        "modifiers": [],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltaSeconds"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 307,
                "replication": "",
                "states": [],
                "variables": [
                    "var float blotchTimer;",
                    "var float fleePawnTimer;",
                    "var ECleanDirection minorDir;",
                    "var ECleanDirection majorDir;"
                ]
            }
        },
        "SuperCleanerBotItem.uc": {
            "body": "//=============================================================================\n// It's a tarp.\n//=============================================================================\nclass SuperCleanerBotItem extends ChargedPickup;\n\n// ----------------------------------------------------------------------\n// ChargedPickupBegin()\n// ----------------------------------------------------------------------\n\nfunction ChargedPickupBegin(DeusExPlayer Player)\n{\n  // local HideyBox CD;\n   local Vector loc,X,Y,Z;\n   local SuperCleanerBot SCB;\n   \n   SCB = Spawn(Class'SuperCleanerBot',,,Player.Location + (Player.CollisionRadius+Default.CollisionRadius+30) * Vector(Player.ViewRotation) + vect(0,0,1) * 30 );\n   if(SCB == None)\n   {\n\t\tDeusexPlayer(Owner).ClientMessage(\"Error placing item..\");\n\t\treturn;\n   }\n\n\tSuper.ChargedPickupBegin(Player);\n\t\n}\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\nfunction UsedUp()\n{\n\tlocal DeusExPlayer Player;\n\n\tif ( Pawn(Owner) != None )\n\t{\n\t\tbActivatable = false;\n\t\t\n\t}\n\tPlayer = DeusExPlayer(Owner);\n\n\tif (Player != None)\n\t{\n\t\tif (Player.inHand == Self)\n\t\t\tChargedPickupEnd(Player);\n\t}\n\n\tDestroy();\n}\n\ndefaultproperties\n{\n     ActivateSound=Sound'DeusExSounds.Augmentation.CloakUp'\n     DeActivateSound=None\n     ChargeRemainingLabel=\"Box readiness:\"\n     ItemName=\"Super Cleaner Bot Spawner\"\n     PlayerViewOffset=(X=20.000000,Z=-12.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.VialAmbrosia'\n     PickupViewMesh=LodMesh'DeusExItems.VialAmbrosia'\n     ThirdPersonMesh=LodMesh'DeusExItems.VialAmbrosia'\n     Charge=8\n     LandSound=Sound'DeusExSounds.Generic.GlassHit1'\n     Icon=Texture'DeusExUI.Icons.BeltIconVialAmbrosia'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconVialAmbrosia'\n     largeIconWidth=35\n     largeIconHeight=49\n     Description=\"s\"\n     beltDescription=\"CLEANER\"\n     Mesh=LodMesh'DeusExItems.VialAmbrosia'\n     CollisionRadius=2.200000\n     CollisionHeight=4.890000\n     Mass=10.000000\n     Buoyancy=100.000000\n}\n",
            "name": "SuperCleanerBotItem.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "ActivateSound=Sound'DeusExSounds.Augmentation.CloakUp'",
                    "DeActivateSound=None",
                    "ChargeRemainingLabel=\"Box readiness:\"",
                    "ItemName=\"Super Cleaner Bot Spawner\"",
                    "PlayerViewOffset=(X=20.000000,Z=-12.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.VialAmbrosia'",
                    "PickupViewMesh=LodMesh'DeusExItems.VialAmbrosia'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.VialAmbrosia'",
                    "Charge=8",
                    "LandSound=Sound'DeusExSounds.Generic.GlassHit1'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconVialAmbrosia'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconVialAmbrosia'",
                    "largeIconWidth=35",
                    "largeIconHeight=49",
                    "Description=\"s\"",
                    "beltDescription=\"CLEANER\"",
                    "Mesh=LodMesh'DeusExItems.VialAmbrosia'",
                    "CollisionRadius=2.200000",
                    "CollisionHeight=4.890000",
                    "Mass=10.000000",
                    "Buoyancy=100.000000"
                ],
                "exec": [],
                "extends": "ChargedPickup",
                "functions": {
                    "ChargedPickupBegin": {
                        "body": "{\n  // local HideyBox CD;\n   \n   SCB = Spawn(Class'SuperCleanerBot',,,Player.Location + (Player.CollisionRadius+Default.CollisionRadius+30) * Vector(Player.ViewRotation) + vect(0,0,1) * 30 );\n   if(SCB == None)\n   {\n\t\tDeusexPlayer(Owner).ClientMessage(\"Error placing item..\");\n\t\treturn;\n   }\n\n\tSuper.ChargedPickupBegin(Player);\n\t\n}",
                        "locals": [
                            "local Vector loc,X,Y,Z;",
                            "local SuperCleanerBot SCB;"
                        ],
                        "modifiers": [],
                        "name": "ChargedPickupBegin",
                        "native": false,
                        "param": [
                            [
                                "DeusExPlayer",
                                "Player"
                            ]
                        ],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    },
                    "UsedUp": {
                        "body": "{\n\n\tif ( Pawn(Owner) != None )\n\t{\n\t\tbActivatable = false;\n\t\t\n\t}\n\tPlayer = DeusExPlayer(Owner);\n\n\tif (Player != None)\n\t{\n\t\tif (Player.inHand == Self)\n\t\t\tChargedPickupEnd(Player);\n\t}\n\n\tDestroy();\n}",
                        "locals": [
                            "local DeusExPlayer Player;"
                        ],
                        "modifiers": [],
                        "name": "UsedUp",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 76,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "SurfKnives.uc": {
            "body": "class SurfKnives extends Shuriken;\n\nsimulated function Tick(float DeltaTime)\n{\n\tSuper.Tick(DeltaTime);\n\tOwner.SetLocation(Location);\n}\n\ndefaultproperties\n{\n     ItemName=\"a\"\n     ItemArticle=\"surf knife\"\n}\n",
            "name": "SurfKnives.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "ItemName=\"a\"",
                    "ItemArticle=\"surf knife\""
                ],
                "exec": [],
                "extends": "Shuriken",
                "functions": {
                    "Tick": {
                        "body": "{\n\tSuper.Tick(DeltaTime);\n\tOwner.SetLocation(Location);\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "DeltaTime"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 14,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "SurfRocket.uc": {
            "body": "class SurfRocket extends Rocket;\n\nsimulated function Tick(float DeltaTime)\n{\n\tSuper.Tick(DeltaTime);\n\tOwner.SetLocation(Location);\n}\n\ndefaultproperties\n{\n     ItemName=\"bombing\"\n     ItemArticle=\"suicide\"\n}\n",
            "name": "SurfRocket.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "ItemName=\"bombing\"",
                    "ItemArticle=\"suicide\""
                ],
                "exec": [],
                "extends": "Rocket",
                "functions": {
                    "Tick": {
                        "body": "{\n\tSuper.Tick(DeltaTime);\n\tOwner.SetLocation(Location);\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "DeltaTime"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 14,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "TCAutoTimeTrigger.uc": {
            "body": "class TCAutoTimeTrigger extends Actor;\n\nvar() float TCDelay;\nvar() name Events[10];\n\nfunction PostBeginPlay()\n{\n\tSetTimer(TCDelay,True);\n}\n\nfunction Timer()\n{\nlocal mover a;\nlocal int j;\n\n\tfor(j=0;j<10;j++)\n\t{\n\t\tif(Events[j] != '')\n\t\t{\n\t\t\tforeach AllActors( class 'mover', A)\n\t\t\t{\n\t\t\t\tfor(j=0;j<10;j++)\n\t\t\t\t{\n\t\t\t\t\tif(A.Tag == Events[j])\n\t\t\t\t\t\tA.Trigger( Self, None );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\ndefaultproperties\n{\n     bHidden=True\n}\n",
            "name": "TCAutoTimeTrigger.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bHidden=True"
                ],
                "exec": [],
                "extends": "Actor",
                "functions": {
                    "PostBeginPlay": {
                        "body": "{\n\tSetTimer(TCDelay,True);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\n\tfor(j=0;j<10;j++)\n\t{\n\t\tif(Events[j] != '')\n\t\t{\n\t\t\tforeach AllActors( class 'mover', A)\n\t\t\t{\n\t\t\t\tfor(j=0;j<10;j++)\n\t\t\t\t{\n\t\t\t\t\tif(A.Tag == Events[j])\n\t\t\t\t\t\tA.Trigger( Self, None );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}",
                        "locals": [
                            "local mover a;",
                            "local int j;"
                        ],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 36,
                "replication": "",
                "states": [],
                "variables": [
                    "var() float TCDelay;",
                    "var() name Events[10];"
                ]
            }
        },
        "TCBarkActor.uc": {
            "body": "class TCBarkActor extends PGActors;\n\nvar PlayerPawn Flagger;\n\nvar string sMessage;\nvar float fDelay;\nvar DXScriptedPawn pSender;\n\nreplication\n{\n     reliable if (Role == ROLE_Authority)\n        cBark;\n}\n\nsimulated final function cBark(string BarkMessage, float Delay, DXScriptedPawn BotSender)\n{\n\tlocal DeusExPlayer _Player;\n\tlocal DeusExRootWindow _root;\n\t_Player = DeusExPlayer(Owner);\n\n\tif(_Player != None)\n\t{\n\t\t_root = DeusExRootWindow(_Player.rootWindow);\n\t\tif(_root != None)\n\t\t{\n\t\t\t_root.hud.barkdisplay.addBark(BarkMessage, Delay, BotSender);\n\t\t}\n\t}\n}\n\nfunction timer()\n{\n\t\tSetOwner(flagger);\n\t\tcBark(sMessage, fDelay, pSender);\n}\n\ndefaultproperties\n{\n     LifeSpan=1.000000\n     NetPriority=1.500000\n}\n",
            "name": "TCBarkActor.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "LifeSpan=1.000000",
                    "NetPriority=1.500000"
                ],
                "exec": [],
                "extends": "PGActors",
                "functions": {
                    "cBark": {
                        "body": "{\n\t_Player = DeusExPlayer(Owner);\n\n\tif(_Player != None)\n\t{\n\t\t_root = DeusExRootWindow(_Player.rootWindow);\n\t\tif(_root != None)\n\t\t{\n\t\t\t_root.hud.barkdisplay.addBark(BarkMessage, Delay, BotSender);\n\t\t}\n\t}\n}",
                        "locals": [
                            "local DeusExPlayer _Player;",
                            "local DeusExRootWindow _root;"
                        ],
                        "modifiers": [
                            "final",
                            "simulated"
                        ],
                        "name": "cBark",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "BarkMessage"
                            ],
                            [
                                "float",
                                "Delay"
                            ],
                            [
                                "DXScriptedPawn",
                                "BotSender"
                            ]
                        ],
                        "return": ""
                    },
                    "timer": {
                        "body": "{\n\t\tSetOwner(flagger);\n\t\tcBark(sMessage, fDelay, pSender);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 42,
                "replication": "",
                "states": [],
                "variables": [
                    "var PlayerPawn Flagger;",
                    "var string sMessage;",
                    "var float fDelay;",
                    "var DXScriptedPawn pSender;"
                ]
            }
        },
        "TCRadio.uc": {
            "body": "//================================================\n// Local Radio Player\n//================================================\nClass TCRadio extends DeusExWeapon;\n\nvar int PlaySlot;\nvar() music myTrackList[10];\nvar() EMusicTransition Transition;\nvar() byte             SongSection;\nvar() byte             CdTrack;\nvar() name Inheriter;\nvar int Max;\n\nreplication\n{\nreliable if (Role == ROLE_Authority)  //function must be sent to client\n ActivateMusicBotScreen;\n}\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\nfunction ToggleMusicLock(DeusExPlayer Them)\n{\nlocal MusicMemory MM;\nlocal bool bFound;\n\tforeach AllActors(class'MusicMemory', MM)\n\t{\n\t\tif(MM.Watcher == Them)\n\t\t{\n\t\t\t\t\tbFound=True;\n\t\t\tMM.bMMLocked = !MM.bMMLocked;\n\t\t\tThem.ClientMessage(\"Music lock status:\"@MM.bMMLocked);\n\t\t}\n\t}\n\tif(!bFound)\n\t{\n\t\tMM = Spawn(class'MusicMemory');\n\t\tMM.Watcher=Them;\n\t\tLog(\"New music memory.\"@them.playerreplicationinfo.playername);\n\t}\n}\n\nfunction MemorizeMusic(music This, DeusExPlayer Them)\n{\nlocal MusicMemory MM;\nlocal bool bFound;\n\tforeach AllActors(class'MusicMemory', MM)\n\t{\n\t\tif(MM.Watcher == Them)\n\t\t{\n\t\t\t\t\tbFound=True;\n\t\t\tMM.CurrentSong = This;\n\t\t\t//Log(\"Track memorized.\"@This@them.playerreplicationinfo.playername);\n\t\t\tThem.ClientSetMusic( This, SongSection, CdTrack, Transition );\n\t\t}\n\t}\n\tif(!bFound)\n\t{\n\t\tMM = Spawn(class'MusicMemory');\n\t\tMM.Watcher=Them;\n\t\tLog(\"New music memory.\"@This@them.playerreplicationinfo.playername);\n\t}\n}\n\nfunction bool mmIsPlaying(music This, DeusExPlayer Them)\n{\nlocal MusicMemory MM;\nlocal bool bFound;\n\n\tforeach AllActors(class'MusicMemory', MM)\n\t{\n\t\tif(MM.Watcher == Them)\n\t\t{\n\t\t\tbFound=True;\n\t\t\tif(MM.CurrentSong == This)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\t\n\tif(!bFound)\n\t{\n\t\tMM = Spawn(class'MusicMemory');\n\t\tMM.Watcher=Them;\n\t\tLog(\"New music memory.\"@This@them.playerreplicationinfo.playername);\n\t}\n}\n\nfunction Inherit()\n{\nlocal MusicPoint MPP;\nlocal int j;\n\n\tLog(\"Radio probably summoned? Getting inheritance from a Music Point.\");\n\tforeach allactors(class'MusicPoint',MPP)\n\t{\n\t\tif(MPP != None) //First one we found.\n\t\t{\n\t\t\tfor(j=0;j<10;j++)\n\t\t\t{\n\t\t\t\tmyTrackList[j] = mpp.myTrackList[j];\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n}\n\nfunction bool MMLocked(DeusExPlayer Them)\n{\nlocal MusicMemory MM;\n\tforeach AllActors(class'MusicMemory', MM)\n\t{\n\t\tif(MM.Watcher == Them)\n\t\t{\n\t\t\treturn MM.bMMLocked;\n\t\t}\n\t}\n}\n\nfunction BeginPlay()\n{\nlocal MusicPoint MPP;\nlocal int j;\nPlaySlot = 0;\n\t\tif(myTrackList[0] == None)\n\t\t{\n\t\t\tInherit();\n\t\t}\n\t\t\n\t\tfor(j=0;j<10;j++)\n\t\t{\n\t\t\tif(myTrackList[j] == None)\n\t\t\tMax = j;\n\t\t\treturn;\n\t\t}\n}\n\n\nfunction BecomePickup()\n{\n   Super(Inventory).BecomePickup();\n   lifespan=0;\n   SetDisplayProperties(Default.Style, Default.Texture, Default.bUnlit, Default.bMeshEnviromap );\n}\n\nfunction ProcessTraceHit(Actor Other, Vector HitLocation, Vector HitNormal, Vector X, Vector Y, Vector Z)\n{\n\tif(Other.isa('DeusExPlayer'))\n\t{\n\t\tif(!mmIsPlaying( myTrackList[PlaySlot], DeusExPlayer(Other)) && !mmLocked(DeusExPlayer(Other)))\n\t\t{\n\t\t\tMemorizeMusic(myTrackList[PlaySlot], DeusExPlayer(Other));\n\t\t\t//DeusExPlayer(Other).ClientSetMusic( myTrackList[PlaySlot], SongSection, CdTrack, Transition );\n\t\t\tDeusExPlayer(Other).ClientMessage(\"RADIO: Now playing track: \"$Left(string(myTrackList[PlaySlot]), InStr(string(myTrackList[PlaySlot]), \".\")));\n\t\t\tDeusExPlayer(Owner).ClientMessage(Left(string(myTrackList[PlaySlot]), InStr(string(myTrackList[PlaySlot]), \".\"))$\" sent to \"$DeusExPlayer(Other).PlayerReplicationInfo.PlayerName);\n\t\t}\n\t}\n}\n\nsimulated function float CalculateAccuracy()\n{\n\treturn 0.000000; //Dirty hack to always return dead on accuracy.\n}\n\nstate NormalFire //(Thanks to JimBowen for this Infinite ammo code) \n{ \n   Begin: \n      if ((ClipCount >= ReloadCount) && (ReloadCount != 0)) \n      { \n         if (!bAutomatic) \n         { \n            bFiring = False; \n            FinishAnim(); \n         } \n    \n         if (Owner != None) \n         { \n            if (Owner.IsA('DeusExPlayer')) \n            { \n               bFiring = False; \n            } \n            else if (Owner.IsA('ScriptedPawn')) \n            { \n               bFiring = False; \n               ReloadAmmo(); \n            } \n         } \n         else \n         { \n            if (bHasMuzzleFlash) \n               EraseMuzzleFlashTexture(); \n            GotoState('Idle'); \n         } \n      } \n      if ( bAutomatic && (( Level.NetMode == NM_DedicatedServer ) || ((Level.NetMode == NM_ListenServer) && Owner.IsA('DeusExPlayer') && !DeusExPlayer(Owner).PlayerIsListenClient()))) \n         GotoState('Idle'); \n    \n      Sleep(GetShotTime()); \n      if (bAutomatic) \n      { \n         GenerateBullet();       // In multiplayer bullets are generated by the client which will let the server know when \n         Goto('Begin'); \n      } \n      bFiring = False; \n      FinishAnim(); \n    \n   /*      // if ReloadCount is 0 and we're not hand to hand, then this is a \n      // single-use weapon so destroy it after firing once \n      if ((ReloadCount == 0) && !bHandToHand) \n      { \n         if (DeusExPlayer(Owner) != None) \n            DeusExPlayer(Owner).RemoveItemFromSlot(Self);   // remove it from the inventory grid \n         Destroy(); \n      } \n      */              // Do I REALLY need all that crap JUST for infinite ammo? \n      ReadyToFire(); \n   Done: \n      bFiring = False; \n      Finish(); \n}\n\nfunction ScopeToggle() \n{ \nlocal DeusExPlayer P;\n\t\tP = DeusExPlayer(Owner);\n\t\tif( P==None )\n\t\t\treturn;\n\t\tPlaySlot++;\n\t\tif(myTrackList[PlaySlot] == None || PlaySlot > Arraycount(myTrackList))\n\t\t{    \n\t\t\t//P.ClientMessage(\"No more songs.\");\n\t\t\tPlaySlot = 0;\n\t\t}\t\t\n\t\t// Go to music.\n\t\t//P.ClientSetMusic( myTrackList[PlaySlot], SongSection, CdTrack, Transition );\n\t\tif(!mmIsPlaying( myTrackList[PlaySlot], P))\n\t\t\tMemorizeMusic(myTrackList[PlaySlot], P);\n\t\tP.ClientMessage(\"Now playing track: \"$Left(string(myTrackList[PlaySlot]), InStr(string(myTrackList[PlaySlot]), \".\")));\n\t\treturn;\n}\n\nfunction LaserToggle()\n{\nlocal DeusExPlayer P;\n\t\tP = DeusExPlayer(Owner);\n\t\tif( P==None )\n\t\t\treturn;\n\t\t\n\t\t  ActivateMusicBotScreen(p);\n}\n\nfunction CycleAmmo()\n{\n\tToggleMusicLock(DeusExPlayer(Owner));\n}\n\nsimulated function ActivateMusicBotScreen(DeusExPlayer player2)\n{\nlocal DeusExRootWindow root;\nlocal MusicBotWindow winMusic;\n\nplayer2.InitRootWindow();\nroot = DeusExRootWindow(player2.rootWindow);\nif (root != None)\n {\n winMusic = MusicBotWindow(root.InvokeUIScreen(Class'MusicBotWindow', True));\n }\n}\n\ndefaultproperties\n{\n     Transition=MTRAN_Fade\n     CdTrack=255\n     LowAmmoWaterMark=0\n     NoiseLevel=1.800000\n     ShotTime=1.000000\n     reloadTime=0.030000\n     HitDamage=0\n     maxRange=48000\n     AccurateRange=12000\n     BaseAccuracy=0.000000\n     bHasScope=True\n     bHasMuzzleFlash=False\n     ReloadCount=0\n     bInstantHit=True\n     InventoryGroup=208\n     ItemName=\"Radio Player\"\n     PlayerViewOffset=(X=20.000000,Y=10.000000,Z=-16.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.MultitoolPOV'\n     PickupViewMesh=LodMesh'DeusExItems.Multitool'\n     ThirdPersonMesh=LodMesh'DeusExItems.Multitool3rd'\n     LandSound=Sound'DeusExSounds.Generic.PlasticHit2'\n     Icon=Texture'DeusExUI.Icons.BeltIconMultitool'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconMultitool'\n     largeIconWidth=28\n     largeIconHeight=46\n     beltDescription=\"RADIO\"\n     Mesh=LodMesh'DeusExItems.Multitool'\n     CollisionRadius=4.800000\n     CollisionHeight=0.860000\n     Mass=20.000000\n     Buoyancy=10.000000\n}\n",
            "name": "TCRadio.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "Transition=MTRAN_Fade",
                    "CdTrack=255",
                    "LowAmmoWaterMark=0",
                    "NoiseLevel=1.800000",
                    "ShotTime=1.000000",
                    "reloadTime=0.030000",
                    "HitDamage=0",
                    "maxRange=48000",
                    "AccurateRange=12000",
                    "BaseAccuracy=0.000000",
                    "bHasScope=True",
                    "bHasMuzzleFlash=False",
                    "ReloadCount=0",
                    "bInstantHit=True",
                    "InventoryGroup=208",
                    "ItemName=\"Radio Player\"",
                    "PlayerViewOffset=(X=20.000000,Y=10.000000,Z=-16.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.MultitoolPOV'",
                    "PickupViewMesh=LodMesh'DeusExItems.Multitool'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.Multitool3rd'",
                    "LandSound=Sound'DeusExSounds.Generic.PlasticHit2'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconMultitool'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconMultitool'",
                    "largeIconWidth=28",
                    "largeIconHeight=46",
                    "beltDescription=\"RADIO\"",
                    "Mesh=LodMesh'DeusExItems.Multitool'",
                    "CollisionRadius=4.800000",
                    "CollisionHeight=0.860000",
                    "Mass=20.000000",
                    "Buoyancy=10.000000"
                ],
                "exec": [],
                "extends": "DeusExWeapon",
                "functions": {
                    "ActivateMusicBotScreen": {
                        "body": "{\n\nplayer2.InitRootWindow();\nroot = DeusExRootWindow(player2.rootWindow);\nif (root != None)\n {\n winMusic = MusicBotWindow(root.InvokeUIScreen(Class'MusicBotWindow', True));\n }\n}",
                        "locals": [
                            "local DeusExRootWindow root;",
                            "local MusicBotWindow winMusic;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "ActivateMusicBotScreen",
                        "native": false,
                        "param": [
                            [
                                "DeusExPlayer",
                                "player2"
                            ]
                        ],
                        "return": ""
                    },
                    "BecomePickup": {
                        "body": "{\n   Super(Inventory).BecomePickup();\n   lifespan=0;\n   SetDisplayProperties(Default.Style, Default.Texture, Default.bUnlit, Default.bMeshEnviromap );\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "BecomePickup",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "BeginPlay": {
                        "body": "{\nPlaySlot = 0;\n\t\tif(myTrackList[0] == None)\n\t\t{\n\t\t\tInherit();\n\t\t}\n\t\t\n\t\tfor(j=0;j<10;j++)\n\t\t{\n\t\t\tif(myTrackList[j] == None)\n\t\t\tMax = j;\n\t\t\treturn;\n\t\t}\n}",
                        "locals": [
                            "local MusicPoint MPP;",
                            "local int j;"
                        ],
                        "modifiers": [],
                        "name": "BeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "CalculateAccuracy": {
                        "body": "{\n\treturn 0.000000; //Dirty hack to always return dead on accuracy.\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "CalculateAccuracy",
                        "native": false,
                        "param": [],
                        "return": "float"
                    },
                    "CycleAmmo": {
                        "body": "{\n\tToggleMusicLock(DeusExPlayer(Owner));\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "CycleAmmo",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Inherit": {
                        "body": "{\n\n\tLog(\"Radio probably summoned? Getting inheritance from a Music Point.\");\n\tforeach allactors(class'MusicPoint',MPP)\n\t{\n\t\tif(MPP != None) //First one we found.\n\t\t{\n\t\t\tfor(j=0;j<10;j++)\n\t\t\t{\n\t\t\t\tmyTrackList[j] = mpp.myTrackList[j];\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n}",
                        "locals": [
                            "local MusicPoint MPP;",
                            "local int j;"
                        ],
                        "modifiers": [],
                        "name": "Inherit",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "LaserToggle": {
                        "body": "{\n\t\tP = DeusExPlayer(Owner);\n\t\tif( P==None )\n\t\t\treturn;\n\t\t\n\t\t  ActivateMusicBotScreen(p);\n}",
                        "locals": [
                            "local DeusExPlayer P;"
                        ],
                        "modifiers": [],
                        "name": "LaserToggle",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "MMLocked": {
                        "body": "{\n\tforeach AllActors(class'MusicMemory', MM)\n\t{\n\t\tif(MM.Watcher == Them)\n\t\t{\n\t\t\treturn MM.bMMLocked;\n\t\t}\n\t}\n}",
                        "locals": [
                            "local MusicMemory MM;"
                        ],
                        "modifiers": [],
                        "name": "MMLocked",
                        "native": false,
                        "param": [
                            [
                                "DeusExPlayer",
                                "Them"
                            ]
                        ],
                        "return": "bool"
                    },
                    "MemorizeMusic": {
                        "body": "{\n\tforeach AllActors(class'MusicMemory', MM)\n\t{\n\t\tif(MM.Watcher == Them)\n\t\t{\n\t\t\t\t\tbFound=True;\n\t\t\tMM.CurrentSong = This;\n\t\t\t//Log(\"Track memorized.\"@This@them.playerreplicationinfo.playername);\n\t\t\tThem.ClientSetMusic( This, SongSection, CdTrack, Transition );\n\t\t}\n\t}\n\tif(!bFound)\n\t{\n\t\tMM = Spawn(class'MusicMemory');\n\t\tMM.Watcher=Them;\n\t\tLog(\"New music memory.\"@This@them.playerreplicationinfo.playername);\n\t}\n}",
                        "locals": [
                            "local MusicMemory MM;",
                            "local bool bFound;"
                        ],
                        "modifiers": [],
                        "name": "MemorizeMusic",
                        "native": false,
                        "param": [
                            [
                                "music",
                                "This"
                            ],
                            [
                                "DeusExPlayer",
                                "Them"
                            ]
                        ],
                        "return": ""
                    },
                    "ProcessTraceHit": {
                        "body": "{\n\tif(Other.isa('DeusExPlayer'))\n\t{\n\t\tif(!mmIsPlaying( myTrackList[PlaySlot], DeusExPlayer(Other)) && !mmLocked(DeusExPlayer(Other)))\n\t\t{\n\t\t\tMemorizeMusic(myTrackList[PlaySlot], DeusExPlayer(Other));\n\t\t\t//DeusExPlayer(Other).ClientSetMusic( myTrackList[PlaySlot], SongSection, CdTrack, Transition );\n\t\t\tDeusExPlayer(Other).ClientMessage(\"RADIO: Now playing track: \"$Left(string(myTrackList[PlaySlot]), InStr(string(myTrackList[PlaySlot]), \".\")));\n\t\t\tDeusExPlayer(Owner).ClientMessage(Left(string(myTrackList[PlaySlot]), InStr(string(myTrackList[PlaySlot]), \".\"))$\" sent to \"$DeusExPlayer(Other).PlayerReplicationInfo.PlayerName);\n\t\t}\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "ProcessTraceHit",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Other"
                            ],
                            [
                                "Vector",
                                "HitLocation"
                            ],
                            [
                                "Vector",
                                "HitNormal"
                            ],
                            [
                                "Vector",
                                "X"
                            ],
                            [
                                "Vector",
                                "Y"
                            ],
                            [
                                "Vector",
                                "Z"
                            ]
                        ],
                        "return": ""
                    },
                    "ScopeToggle": {
                        "body": "{ \n\t\tP = DeusExPlayer(Owner);\n\t\tif( P==None )\n\t\t\treturn;\n\t\tPlaySlot++;\n\t\tif(myTrackList[PlaySlot] == None || PlaySlot > Arraycount(myTrackList))\n\t\t{    \n\t\t\t//P.ClientMessage(\"No more songs.\");\n\t\t\tPlaySlot = 0;\n\t\t}\t\t\n\t\t// Go to music.\n\t\t//P.ClientSetMusic( myTrackList[PlaySlot], SongSection, CdTrack, Transition );\n\t\tif(!mmIsPlaying( myTrackList[PlaySlot], P))\n\t\t\tMemorizeMusic(myTrackList[PlaySlot], P);\n\t\tP.ClientMessage(\"Now playing track: \"$Left(string(myTrackList[PlaySlot]), InStr(string(myTrackList[PlaySlot]), \".\")));\n\t\treturn;\n}",
                        "locals": [
                            "local DeusExPlayer P;"
                        ],
                        "modifiers": [],
                        "name": "ScopeToggle",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    },
                    "ToggleMusicLock": {
                        "body": "{\n\tforeach AllActors(class'MusicMemory', MM)\n\t{\n\t\tif(MM.Watcher == Them)\n\t\t{\n\t\t\t\t\tbFound=True;\n\t\t\tMM.bMMLocked = !MM.bMMLocked;\n\t\t\tThem.ClientMessage(\"Music lock status:\"@MM.bMMLocked);\n\t\t}\n\t}\n\tif(!bFound)\n\t{\n\t\tMM = Spawn(class'MusicMemory');\n\t\tMM.Watcher=Them;\n\t\tLog(\"New music memory.\"@them.playerreplicationinfo.playername);\n\t}\n}",
                        "locals": [
                            "local MusicMemory MM;",
                            "local bool bFound;"
                        ],
                        "modifiers": [],
                        "name": "ToggleMusicLock",
                        "native": false,
                        "param": [
                            [
                                "DeusExPlayer",
                                "Them"
                            ]
                        ],
                        "return": ""
                    },
                    "mmIsPlaying": {
                        "body": "{\n\n\tforeach AllActors(class'MusicMemory', MM)\n\t{\n\t\tif(MM.Watcher == Them)\n\t\t{\n\t\t\tbFound=True;\n\t\t\tif(MM.CurrentSong == This)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\t\n\tif(!bFound)\n\t{\n\t\tMM = Spawn(class'MusicMemory');\n\t\tMM.Watcher=Them;\n\t\tLog(\"New music memory.\"@This@them.playerreplicationinfo.playername);\n\t}\n}",
                        "locals": [
                            "local MusicMemory MM;",
                            "local bool bFound;"
                        ],
                        "modifiers": [],
                        "name": "mmIsPlaying",
                        "native": false,
                        "param": [
                            [
                                "music",
                                "This"
                            ],
                            [
                                "DeusExPlayer",
                                "Them"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 306,
                "replication": "",
                "states": [],
                "variables": [
                    "var int PlaySlot;",
                    "var() music myTrackList[10];",
                    "var() EMusicTransition Transition;",
                    "var() byte             SongSection;",
                    "var() byte             CdTrack;",
                    "var() name Inheriter;",
                    "var int Max;"
                ]
            }
        },
        "TCT.uc": {
            "body": "//=============================================================================\n// It's a tarp.\n//=============================================================================\nclass TCT extends ChargedPickup;\n\nfunction ChargedPickupBegin(DeusExPlayer Player)\n{\n  local chainTeleporter CD;\n   local Vector loc,X,Y,Z;\n   \n   CD = Spawn(Class'ChainTeleporter',,,Player.Location + (Player.CollisionRadius+Default.CollisionRadius+30) * Vector(Player.ViewRotation) + vect(0,0,1) * 30 );\n\tCD.ReturnToPlayer = Player;\n\tCD.ChainNum = -1;\n\tSuper.ChargedPickupBegin(Player);\n\t\n}\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) || (BeltSpot == 0) );\n}\n\nfunction UsedUp()\n{\n\tlocal DeusExPlayer Player;\n\n\tif ( Pawn(Owner) != None )\n\t{\n\t\tbActivatable = false;\n\t\t\n\t}\n\tPlayer = DeusExPlayer(Owner);\n\n\tif (Player != None)\n\t{\n\t\tif (Player.inHand == Self)\n\t\t\tChargedPickupEnd(Player);\n\t}\n\n\tDestroy();\n}\n\ndefaultproperties\n{\n     ActivateSound=Sound'DeusExSounds.Augmentation.CloakUp'\n     DeActivateSound=None\n     ChargeRemainingLabel=\"tCT readiness:\"\n     ItemName=\"Temporary Chain Teleporter Spawner\"\n     PlayerViewOffset=(X=20.000000,Z=-12.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.VialAmbrosia'\n     PickupViewMesh=LodMesh'DeusExItems.VialAmbrosia'\n     ThirdPersonMesh=LodMesh'DeusExItems.VialAmbrosia'\n     Charge=8\n     LandSound=Sound'DeusExSounds.Generic.GlassHit1'\n     Icon=Texture'DeusExUI.Icons.BeltIconVialAmbrosia'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconVialAmbrosia'\n     largeIconWidth=35\n     largeIconHeight=49\n     Description=\"s\"\n     beltDescription=\"CHAIN\"\n     Mesh=LodMesh'DeusExItems.VialAmbrosia'\n     CollisionRadius=2.200000\n     CollisionHeight=4.890000\n     Mass=10.000000\n     Buoyancy=100.000000\n}\n",
            "name": "TCT.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "ActivateSound=Sound'DeusExSounds.Augmentation.CloakUp'",
                    "DeActivateSound=None",
                    "ChargeRemainingLabel=\"tCT readiness:\"",
                    "ItemName=\"Temporary Chain Teleporter Spawner\"",
                    "PlayerViewOffset=(X=20.000000,Z=-12.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.VialAmbrosia'",
                    "PickupViewMesh=LodMesh'DeusExItems.VialAmbrosia'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.VialAmbrosia'",
                    "Charge=8",
                    "LandSound=Sound'DeusExSounds.Generic.GlassHit1'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconVialAmbrosia'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconVialAmbrosia'",
                    "largeIconWidth=35",
                    "largeIconHeight=49",
                    "Description=\"s\"",
                    "beltDescription=\"CHAIN\"",
                    "Mesh=LodMesh'DeusExItems.VialAmbrosia'",
                    "CollisionRadius=2.200000",
                    "CollisionHeight=4.890000",
                    "Mass=10.000000",
                    "Buoyancy=100.000000"
                ],
                "exec": [],
                "extends": "ChargedPickup",
                "functions": {
                    "ChargedPickupBegin": {
                        "body": "{\n   \n   CD = Spawn(Class'ChainTeleporter',,,Player.Location + (Player.CollisionRadius+Default.CollisionRadius+30) * Vector(Player.ViewRotation) + vect(0,0,1) * 30 );\n\tCD.ReturnToPlayer = Player;\n\tCD.ChainNum = -1;\n\tSuper.ChargedPickupBegin(Player);\n\t\n}",
                        "locals": [
                            "local chainTeleporter CD;",
                            "local Vector loc,X,Y,Z;"
                        ],
                        "modifiers": [],
                        "name": "ChargedPickupBegin",
                        "native": false,
                        "param": [
                            [
                                "DeusExPlayer",
                                "Player"
                            ]
                        ],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) || (BeltSpot == 0) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    },
                    "UsedUp": {
                        "body": "{\n\n\tif ( Pawn(Owner) != None )\n\t{\n\t\tbActivatable = false;\n\t\t\n\t}\n\tPlayer = DeusExPlayer(Owner);\n\n\tif (Player != None)\n\t{\n\t\tif (Player.inHand == Self)\n\t\t\tChargedPickupEnd(Player);\n\t}\n\n\tDestroy();\n}",
                        "locals": [
                            "local DeusExPlayer Player;"
                        ],
                        "modifiers": [],
                        "name": "UsedUp",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 67,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "TLItem.uc": {
            "body": "//=============================================================================\n// It's a tarp.\n//=============================================================================\nclass TLItem extends ChargedPickup;\n\n// ----------------------------------------------------------------------\n// ChargedPickupBegin()\n// ----------------------------------------------------------------------\n\nfunction ChargedPickupBegin(DeusExPlayer Player)\n{\n  local TLauncher CD;\n   local Vector loc,X,Y,Z;\n   \n   CD = Spawn(Class'TLauncher',,,Player.Location + (Player.CollisionRadius+Default.CollisionRadius+30) * Vector(Player.ViewRotation) + vect(0,0,1) * 30 );\n\tCD.TM=T_Companion;\n\tSuper.ChargedPickupBegin(Player);\n\t\n}\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) || (BeltSpot == 0) );\n}\n\nfunction UsedUp()\n{\n\tlocal DeusExPlayer Player;\n\n\tif ( Pawn(Owner) != None )\n\t{\n\t\tbActivatable = false;\n\t\t\n\t}\n\tPlayer = DeusExPlayer(Owner);\n\n\tif (Player != None)\n\t{\n\t\tif (Player.inHand == Self)\n\t\t\tChargedPickupEnd(Player);\n\t}\n\n\tDestroy();\n}\n\ndefaultproperties\n{\n     ActivateSound=Sound'DeusExSounds.Augmentation.CloakUp'\n     DeActivateSound=None\n     ChargeRemainingLabel=\"TL readiness:\"\n     ItemName=\"Travel Bomber Spawner\"\n     PlayerViewOffset=(X=20.000000,Z=-12.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.VialAmbrosia'\n     PickupViewMesh=LodMesh'DeusExItems.VialAmbrosia'\n     ThirdPersonMesh=LodMesh'DeusExItems.VialAmbrosia'\n     Charge=8\n     LandSound=Sound'DeusExSounds.Generic.GlassHit1'\n     Icon=Texture'DeusExUI.Icons.BeltIconVialAmbrosia'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconVialAmbrosia'\n     largeIconWidth=35\n     largeIconHeight=49\n     Description=\"s\"\n     beltDescription=\"TRAVEL\"\n     Mesh=LodMesh'DeusExItems.VialAmbrosia'\n     CollisionRadius=2.200000\n     CollisionHeight=4.890000\n     Mass=10.000000\n     Buoyancy=100.000000\n}\n",
            "name": "TLItem.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "ActivateSound=Sound'DeusExSounds.Augmentation.CloakUp'",
                    "DeActivateSound=None",
                    "ChargeRemainingLabel=\"TL readiness:\"",
                    "ItemName=\"Travel Bomber Spawner\"",
                    "PlayerViewOffset=(X=20.000000,Z=-12.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.VialAmbrosia'",
                    "PickupViewMesh=LodMesh'DeusExItems.VialAmbrosia'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.VialAmbrosia'",
                    "Charge=8",
                    "LandSound=Sound'DeusExSounds.Generic.GlassHit1'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconVialAmbrosia'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconVialAmbrosia'",
                    "largeIconWidth=35",
                    "largeIconHeight=49",
                    "Description=\"s\"",
                    "beltDescription=\"TRAVEL\"",
                    "Mesh=LodMesh'DeusExItems.VialAmbrosia'",
                    "CollisionRadius=2.200000",
                    "CollisionHeight=4.890000",
                    "Mass=10.000000",
                    "Buoyancy=100.000000"
                ],
                "exec": [],
                "extends": "ChargedPickup",
                "functions": {
                    "ChargedPickupBegin": {
                        "body": "{\n   \n   CD = Spawn(Class'TLauncher',,,Player.Location + (Player.CollisionRadius+Default.CollisionRadius+30) * Vector(Player.ViewRotation) + vect(0,0,1) * 30 );\n\tCD.TM=T_Companion;\n\tSuper.ChargedPickupBegin(Player);\n\t\n}",
                        "locals": [
                            "local TLauncher CD;",
                            "local Vector loc,X,Y,Z;"
                        ],
                        "modifiers": [],
                        "name": "ChargedPickupBegin",
                        "native": false,
                        "param": [
                            [
                                "DeusExPlayer",
                                "Player"
                            ]
                        ],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) || (BeltSpot == 0) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    },
                    "UsedUp": {
                        "body": "{\n\n\tif ( Pawn(Owner) != None )\n\t{\n\t\tbActivatable = false;\n\t\t\n\t}\n\tPlayer = DeusExPlayer(Owner);\n\n\tif (Player != None)\n\t{\n\t\tif (Player.inHand == Self)\n\t\t\tChargedPickupEnd(Player);\n\t}\n\n\tDestroy();\n}",
                        "locals": [
                            "local DeusExPlayer Player;"
                        ],
                        "modifiers": [],
                        "name": "UsedUp",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 70,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "TLauncher.uc": {
            "body": "//=============================================\n// RestPoint\n//=============================================\nClass TLauncher extends DeusExDecoration;\n\nenum TMode\n{\n\tT_Normal, //Launches as original\n\tT_Companion, //It spawns with you\n\tT_Pickup, //frob to pickup\n};\nvar config TMode TM;\nvar bool bCooldown;\nvar() float Cooldown;\nvar float LastLaunchTime;\n\nreplication\n{\n\t// MBCODE: Replicate the last time healed to the server\n\treliable if ( Role < ROLE_Authority )\n\t\tLastLaunchTime, Cooldown;\n}\nfunction Timer()\n{\n\tbCooldown=False;\n\tTexture=Texture'DeusExDeco.Skins.AlarmLightTex4';\n\tLightHue=70;\n}\n\nfunction SilentAdd(class<inventory> addClass, DeusExPlayer addTarget)\n{ \n\tlocal Inventory anItem;\n\t\n\tanItem = Spawn(addClass); \n\tanItem.Instigator = addTarget; \n\tanItem.GotoState('Idle2'); \n\tanItem.bHeldItem = true; \n\tanItem.bTossedOut = false; \n\t\n\tif(Weapon(anItem) != None) \n\t\tWeapon(anItem).GiveAmmo(addTarget); \n\tanItem.GiveTo(addTarget);\n}\n\nfunction Frob(Actor Frobber, Inventory frobWith) \n{\n\tlocal DeusExPlayer P;\n\tlocal TRocket TR;\n\tlocal TLItem h;\n\tlocal rotator Z2F;\n\tP=DeusExPlayer(Frobber);\n\t\n\t\tif(DeusExPlayer(Frobber).bIsCrouching && P.bAdmin)\n\t\t{\n\t\t\tif(TM==T_Normal)\n\t\t\t{\n\t\t\t\tTM=T_Companion;\n\t\t\t\tP.ClientMessage(\"Companion Mode; Launcher will follow you when you warp.\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if(TM==T_Companion)\n\t\t\t{\n\t\t\t\tTM=T_Pickup;\n\t\t\t\tP.ClientMessage(\"Pickup Mode; Launcher will be collected.\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if(TM==T_Pickup)\n\t\t\t{\n\t\t\t\tTM=T_Normal;\n\t\t\t\tP.ClientMessage(\"Normal Mode; Static placement.\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(TM==T_Pickup)\n\t\t{\n\t\t\tDestroy();\n\t\t\tSilentAdd(class'TLItem', P);\n\t\t\treturn;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(Cooled())\n\t\t\t{\n\t\t\t\tZ2F=P.Rotation;\n\t\t\t\tTR = Spawn(class'TRocket',,,Location + (CollisionRadius + TR.Default.CollisionRadius + 30) * vector(Rotation) * BaseEyeHeight,Z2F);\n\t\t\t\tTR.SetOwner(P);\n\t\t\t\tP.UnderWaterTime = -1.0;\t\n\t\t\t\tP.bHidden=True;\n\t\t\t\tP.SetCollision(false, false, false);\n\t\t\t\tP.bCollideWorld = true;\n\t\t\t\tP.GotoState('PlayerWalking');\n\t\t\t\tLastLaunchTime = Level.TimeSeconds;\n\t\t\t\t\tif(TM==T_Normal)\n\t\t\t\t\t{\n\t\t\t\t\t\tbCooldown=True;\n\t\t\t\t\t\tTexture=Texture'DeusExDeco.Skins.AlarmLightTex2';\n\t\t\t\t\t\tLightHue=0;\n\t\t\t\t\t\tSetTimer(Cooldown,false);\n\t\t\t\t\t}\n\t\t\t\t\tif(TM==T_Companion)\n\t\t\t\t\t{\n\t\t\t\t\tTR.bCompanion=True;\n\t\t\t\t\tDestroy();\n\t\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tP.ClientMessage(\"Launcher is cooling down, please wait \"$int(Cooldown - (Level.TimeSeconds - lastLaunchTime))$\" seconds.\");\n\t\t\t}\n\t\t}\n\n}\n\nfunction bool Cooled()\n{\t\n\treturn (Level.TimeSeconds - lastLaunchTime > Cooldown);\n}\n\ndefaultproperties\n{\n     Cooldown=10.000000\n     bInvincible=True\n     ItemName=\"Travel Bomber\"\n     bPushable=False\n     Physics=PHYS_None\n     DrawType=DT_Sprite\n     Style=STY_Translucent\n     Texture=Texture'DeusExDeco.Skins.AlarmLightTex4'\n     Skin=Texture'DeusExDeco.Skins.AlarmLightTex6'\n     DrawScale=1.500000\n     CollisionRadius=45.200001\n     CollisionHeight=32.000000\n     bBlockPlayers=False\n     LightType=LT_Steady\n     LightBrightness=120\n     LightHue=70\n     LightSaturation=100\n     LightRadius=10\n}\n",
            "name": "TLauncher.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "Cooldown=10.000000",
                    "bInvincible=True",
                    "ItemName=\"Travel Bomber\"",
                    "bPushable=False",
                    "Physics=PHYS_None",
                    "DrawType=DT_Sprite",
                    "Style=STY_Translucent",
                    "Texture=Texture'DeusExDeco.Skins.AlarmLightTex4'",
                    "Skin=Texture'DeusExDeco.Skins.AlarmLightTex6'",
                    "DrawScale=1.500000",
                    "CollisionRadius=45.200001",
                    "CollisionHeight=32.000000",
                    "bBlockPlayers=False",
                    "LightType=LT_Steady",
                    "LightBrightness=120",
                    "LightHue=70",
                    "LightSaturation=100",
                    "LightRadius=10"
                ],
                "exec": [],
                "extends": "DeusExDecoration",
                "functions": {
                    "Cooled": {
                        "body": "{\t\n\treturn (Level.TimeSeconds - lastLaunchTime > Cooldown);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Cooled",
                        "native": false,
                        "param": [],
                        "return": "bool"
                    },
                    "Frob": {
                        "body": "{\n\tP=DeusExPlayer(Frobber);\n\t\n\t\tif(DeusExPlayer(Frobber).bIsCrouching && P.bAdmin)\n\t\t{\n\t\t\tif(TM==T_Normal)\n\t\t\t{\n\t\t\t\tTM=T_Companion;\n\t\t\t\tP.ClientMessage(\"Companion Mode; Launcher will follow you when you warp.\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if(TM==T_Companion)\n\t\t\t{\n\t\t\t\tTM=T_Pickup;\n\t\t\t\tP.ClientMessage(\"Pickup Mode; Launcher will be collected.\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if(TM==T_Pickup)\n\t\t\t{\n\t\t\t\tTM=T_Normal;\n\t\t\t\tP.ClientMessage(\"Normal Mode; Static placement.\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(TM==T_Pickup)\n\t\t{\n\t\t\tDestroy();\n\t\t\tSilentAdd(class'TLItem', P);\n\t\t\treturn;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(Cooled())\n\t\t\t{\n\t\t\t\tZ2F=P.Rotation;\n\t\t\t\tTR = Spawn(class'TRocket',,,Location + (CollisionRadius + TR.Default.CollisionRadius + 30) * vector(Rotation) * BaseEyeHeight,Z2F);\n\t\t\t\tTR.SetOwner(P);\n\t\t\t\tP.UnderWaterTime = -1.0;\t\n\t\t\t\tP.bHidden=True;\n\t\t\t\tP.SetCollision(false, false, false);\n\t\t\t\tP.bCollideWorld = true;\n\t\t\t\tP.GotoState('PlayerWalking');\n\t\t\t\tLastLaunchTime = Level.TimeSeconds;\n\t\t\t\t\tif(TM==T_Normal)\n\t\t\t\t\t{\n\t\t\t\t\t\tbCooldown=True;\n\t\t\t\t\t\tTexture=Texture'DeusExDeco.Skins.AlarmLightTex2';\n\t\t\t\t\t\tLightHue=0;\n\t\t\t\t\t\tSetTimer(Cooldown,false);\n\t\t\t\t\t}\n\t\t\t\t\tif(TM==T_Companion)\n\t\t\t\t\t{\n\t\t\t\t\tTR.bCompanion=True;\n\t\t\t\t\tDestroy();\n\t\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tP.ClientMessage(\"Launcher is cooling down, please wait \"$int(Cooldown - (Level.TimeSeconds - lastLaunchTime))$\" seconds.\");\n\t\t\t}\n\t\t}\n\n}",
                        "locals": [
                            "local DeusExPlayer P;",
                            "local TRocket TR;",
                            "local TLItem h;",
                            "local rotator Z2F;"
                        ],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    },
                    "SilentAdd": {
                        "body": "{ \n\t\n\tanItem = Spawn(addClass); \n\tanItem.Instigator = addTarget; \n\tanItem.GotoState('Idle2'); \n\tanItem.bHeldItem = true; \n\tanItem.bTossedOut = false; \n\t\n\tif(Weapon(anItem) != None) \n\t\tWeapon(anItem).GiveAmmo(addTarget); \n\tanItem.GiveTo(addTarget);\n}",
                        "locals": [
                            "local Inventory anItem;"
                        ],
                        "modifiers": [],
                        "name": "SilentAdd",
                        "native": false,
                        "param": [
                            [
                                "class<inventory>",
                                "addClass"
                            ],
                            [
                                "DeusExPlayer",
                                "addTarget"
                            ]
                        ],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\tbCooldown=False;\n\tTexture=Texture'DeusExDeco.Skins.AlarmLightTex4';\n\tLightHue=70;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 141,
                "replication": "",
                "states": [],
                "variables": [
                    "var config TMode TM;",
                    "var bool bCooldown;",
                    "var() float Cooldown;",
                    "var float LastLaunchTime;"
                ]
            }
        },
        "TRocket.uc": {
            "body": "//=============================================================================\n// Original code by JimBowen, modified by Kai\n//=============================================================================\nclass TRocket expands Rocket;\n\nvar AugmentationDisplayWindow win;\nvar gc gc;\nvar bowenviewportwindow vpw;\nvar bool bExploded, bDoneWin;\nvar rotator NewRotation;\nvar vector NewVelocity, NewLocation;\n\nvar bool bCompanion;\nvar(Bowen) sound LockedSound;\n\nreplication\n{\n\treliable if (Role == ROLE_Authority)\n\t\tbDoneWin, bExploded;\n\n\tunreliable if (Role == ROLE_Authority)\n\t\tNewRotation, NewVelocity, NewLocation;\n}\n\nsimulated function HitWall (vector HitLocation, Actor Wall)\n{\n\tif (vpw != None)\n\t\tvpw.Destroy();\n\tif (FireGen != None)\n\t\tFireGen.Destroy();\n\tif (SmokeGen != None)\n\t\tSmokeGen.Destroy();\n\tSuper.HitWall (HitLocation, Wall);\n}\n\nauto simulated state flying\n{\n\tsimulated function tick(float deltatime)\t\n\t{\n\t\tif(Role == ROLE_Authority || bNetOwner)\t//dont do this on clients that didnt fire the rocket\t\t\t\t\t\t\t\t\t\t\n\t\t{\n\t\t\tif(!bExploded)\n\t\t\t{\n\t\t\t\tif (bNetOwner)\n\t\t\t\t{\n\t\t\t\t\tif (FireGen != None)\n\t\t\t\t\t\tFireGen.Destroy();\n\t\t\t\t\tif (SmokeGen != None)\n\t\t\t\t\t\tSmokeGen.LifeSpan = 5;\n\t\t\t\t\tbDebris = False;\n\t\t\t\t}\n\t\t\t\tMakeWindow();\n\t\t\t\tSetDirection();\n\t\t\t\tSetRotation(NewRotation);\n\t\t\t\tVelocity = NewVelocity;\n\t\t\t\t//log(\"Nikita ticked\");\n\t\t\t}\n\t\t}\n\t\tif(Role < ROLE_Authority && !bNetOwner)\n\t\t{\n\t\t\tSetRotation(NewRotation);\n\t\t\tVelocity = NewVelocity;\n\t\t\tSetLocation(NewLocation);\n\t\t\tSmokeGen.SetLocation(NewLocation);\n\t\t\tFireGen.SetLocation(NewLocation);\n\t\t\t//log(\"Nikita ticked on observing client, new rotation is: \" @ NewRotation);\n\t\t}\n\t\t//log(\"Role = \" @ Role @ \", bNetOwner = \" @ bNetOwner); \n\t\tSuper.tick(DeltaTime);\n\t}\n}\n\nsimulated function MakeWindow()\t// adapted from DeusEx.AugmentationDisplayWindow.tick\n{\n\tlocal String str;\n\tlocal float boxCX, boxCY, boxTLX, boxTLY, boxBRX, boxBRY, boxW, boxH;\n\tlocal float x, y, w, h, mult;\n\tlocal Vector loc;\n\tlocal float x2, y2, w2, h2, cx, cy;\n\n\t\tif ((Owner != None) && (Owner.IsA('DeusExPlayer')))\n\t\t{\n\t\t\tif ((Level.NetMode == NM_Client) || (Level.NetMode == NM_Standalone))\n\t\t\t{\n\t\t\t\tif (!bDoneWin)\n\t\t\t\t{\t\n\t\t\t\t\tbDoneWin = True;\n\t\t\t\t\twin = DeusExRootWindow(DeusExPlayer(Owner).rootwindow).hud.augdisplay;\n\t\t\t\t\tgc = win.GetGC();\n\t\t\t\t\tvpw = BowenViewportWindow(win.NewChild(class'BowenViewportWindow'));\n\t\t\t\t\tvpw.projowner = Self;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvpw.AskParentForReconfigure();\n\t\t\t\t\tvpw.Lower();\n\t\t\t\t\tvpw.SetViewportActor(Self);\n\t\t\t\t}\n\t\t\t\tw2 = 512;\n\t\t\t\th2 = 256;\n\t\t\t\tcx = (win.width/2) - 256;//+ win.margin;\n\t\t\t\tcy = (win.height/2) - 128;\n\t\t\t\tx2 = cx - w/2;\n\t\t\t\ty2 = cy - h/2;\n\t\t\t\t\n\t\t\t\tif (vpw != None)\n\t\t\t\t\tvpw.ConfigureChild(x2, y2, w2, h2);\n\t\t\t}\t\t\t\n\t\t}\n}\n\nsimulated function setdirection()\n{\n\tNewRotation = (PlayerPawn(Owner).ViewRotation);\n\tNewVelocity = normal(vector(NewRotation))*speed;\n\tNewLocation = Location;\n\t//log(\"rotation to set (nikita) = \" @ NewRotation);\n}\n\nsimulated function destroyed()\n{\nlocal TLauncher TL;\n\tlocal TLItem h;\n\tDeusExPlayer(Owner).SetLocation(Location);\n\tDeusExPlayer(Owner).UnderWaterTime = DeusExPlayer(Owner).Default.UnderWaterTime;\t\n\tDeusExPlayer(Owner).SetCollision(true, true , true);\n\tDeusExPlayer(Owner).SetPhysics(PHYS_Walking);\n\tDeusExPlayer(Owner).bCollideWorld = true;\n\tDeusExPlayer(Owner).bHidden=False;\n\tDeusExPlayer(Owner).GotoState('PlayerWalking');\n\tDeusExPlayer(Owner).ClientReStart();\t\n\t\tif(bCompanion)\n\t\t{\n\t\th=Spawn(class'TLItem', Self,, Location, Rotation);\n\t\th.Frob(DeusExPlayer(Owner),None);\n\t\th.bInObjectBelt = True;\n\t\th.Destroy();\n\t\t}\n\tbExploded = True;\n\tif (vpw != None)\n\t\tvpw.Destroy();\n\tSuper.Destroyed();\n}\n\t\nsimulated function DrawExplosionEffects(vector HitLocation, vector HitNormal)\n{\n\tlocal ShockRing ring;\n\tlocal SphereEffect sphere;\n\tlocal ExplosionLight light;\n\tlocal AnimatedSprite expeffect;\n\n\t// draw a pretty shock ring\n\t// For nano defense we are doing something else.\n\tif ((!bAggressiveExploded) || (Level.NetMode == NM_Standalone))\n\t{\n\t\t\tif(!bNetOwner)\n\t\t\t{\n\t\t\t\tring = Spawn(class'ShockRing',,, HitLocation, rot(16384,0,0));\n\t\t\tif (ring != None)\n\t\t\t\t{\n\t\t\t\t\tring.RemoteRole = ROLE_None;\n\t\t\t\t\tring.size = blastRadius / 32.0;\n\t\t\t\t}\n\t\t\t\tring = Spawn(class'ShockRing',,, HitLocation, rot(0,0,0));\n\t\t\t\tif (ring != None)\n\t\t\t\t{\n\t\t\t\t\tring.RemoteRole = ROLE_None;\n\t\t\t\t\tring.size = blastRadius / 32.0;\n\t\t\t\t}\n\t\t\t\tring = Spawn(class'ShockRing',,, HitLocation, rot(0,16384,0));\n\t\t\t\tif (ring != None)\n\t\t\t\t{\n\t\t\t\t\tring.RemoteRole = ROLE_None;\n\t\t\t\t\tring.size = blastRadius / 32.0;\n\t\t\t\t}\n\t\t\t}\n\t}\n\telse\n\t{\n\t\tsphere = Spawn(class'SphereEffect',,, HitLocation, rot(16384,0,0));\n\t\tif (sphere != None)\n\t\t{\n\t\t\tsphere.RemoteRole = ROLE_None;\n\t\t\tsphere.size = blastRadius / 32.0;\n\t\t}\n\t\tsphere = Spawn(class'SphereEffect',,, HitLocation, rot(0,0,0));\n\t\tif (sphere != None)\n\t\t{\n\t\t\tsphere.RemoteRole = ROLE_None;\n\t\t\tsphere.size = blastRadius / 32.0;\n\t\t}\n\t\tsphere = Spawn(class'SphereEffect',,, HitLocation, rot(0,16384,0));\n\t\tif (sphere != None)\n\t\t{\n\t\t\tsphere.RemoteRole = ROLE_None;\n\t\t\tsphere.size = blastRadius / 32.0;\n\t\t}\n\t}\n}\n\nsimulated function Tick(float deltaTime)\n{\n\tlocal SmokeTrail s;\n\n\ttime += DeltaTime;\n\tDrawScale = FClamp(2.5*(time+0.5), 1.0, 6.0);\n\tif ((time > FRand() * 0.02) && (Level.NetMode != NM_DedicatedServer))\n\t{\n\t\ttime = 0;\n\n\t\t// spawn some trails\n\t\ts = Spawn(class'SmokeTrail',,, Location);\n\t\tif (s != None)\n\t\t{\n\t\t\ts.DrawScale = FRand() * 0.333;\n\t\t\ts.OrigScale = s.DrawScale;\n\t\t\ts.Texture = Texture'AlarmLightTex2';\n\t\t\ts.Velocity = VRand() * 50;\n\t\t\ts.OrigVel = s.Velocity;\n\t\t}\n\t}\n}\n\n//---END-CLASS---\n\ndefaultproperties\n{\n     LockedSound=Sound'DeusExSounds.Generic.Beep4'\n     mpBlastRadius=5.000000\n     blastRadius=5.000000\n     ItemName=\"Travel Bomb\"\n     Damage=0.000000\n     SpawnSound=Sound'DeusExSounds.UserInterface.DataLinkStart'\n     ImpactSound=Sound'DeusExSounds.Weapons.EMPGrenadeExplode'\n     ExplosionDecal=Class'DeusEx.BurnMark'\n     DrawType=DT_Sprite\n     Style=STY_Translucent\n     Texture=Texture'DeusExDeco.Skins.AlarmLightTex2'\n     DrawScale=1.000000\n     bAlwaysRelevant=True\n     NetPriority=3.000000\n}\n",
            "name": "TRocket.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "LockedSound=Sound'DeusExSounds.Generic.Beep4'",
                    "mpBlastRadius=5.000000",
                    "blastRadius=5.000000",
                    "ItemName=\"Travel Bomb\"",
                    "Damage=0.000000",
                    "SpawnSound=Sound'DeusExSounds.UserInterface.DataLinkStart'",
                    "ImpactSound=Sound'DeusExSounds.Weapons.EMPGrenadeExplode'",
                    "ExplosionDecal=Class'DeusEx.BurnMark'",
                    "DrawType=DT_Sprite",
                    "Style=STY_Translucent",
                    "Texture=Texture'DeusExDeco.Skins.AlarmLightTex2'",
                    "DrawScale=1.000000",
                    "bAlwaysRelevant=True",
                    "NetPriority=3.000000"
                ],
                "exec": [],
                "extends": "Rocket",
                "functions": {
                    "DrawExplosionEffects": {
                        "body": "{\n\n\t// draw a pretty shock ring\n\t// For nano defense we are doing something else.\n\tif ((!bAggressiveExploded) || (Level.NetMode == NM_Standalone))\n\t{\n\t\t\tif(!bNetOwner)\n\t\t\t{\n\t\t\t\tring = Spawn(class'ShockRing',,, HitLocation, rot(16384,0,0));\n\t\t\tif (ring != None)\n\t\t\t\t{\n\t\t\t\t\tring.RemoteRole = ROLE_None;\n\t\t\t\t\tring.size = blastRadius / 32.0;\n\t\t\t\t}\n\t\t\t\tring = Spawn(class'ShockRing',,, HitLocation, rot(0,0,0));\n\t\t\t\tif (ring != None)\n\t\t\t\t{\n\t\t\t\t\tring.RemoteRole = ROLE_None;\n\t\t\t\t\tring.size = blastRadius / 32.0;\n\t\t\t\t}\n\t\t\t\tring = Spawn(class'ShockRing',,, HitLocation, rot(0,16384,0));\n\t\t\t\tif (ring != None)\n\t\t\t\t{\n\t\t\t\t\tring.RemoteRole = ROLE_None;\n\t\t\t\t\tring.size = blastRadius / 32.0;\n\t\t\t\t}\n\t\t\t}\n\t}\n\telse\n\t{\n\t\tsphere = Spawn(class'SphereEffect',,, HitLocation, rot(16384,0,0));\n\t\tif (sphere != None)\n\t\t{\n\t\t\tsphere.RemoteRole = ROLE_None;\n\t\t\tsphere.size = blastRadius / 32.0;\n\t\t}\n\t\tsphere = Spawn(class'SphereEffect',,, HitLocation, rot(0,0,0));\n\t\tif (sphere != None)\n\t\t{\n\t\t\tsphere.RemoteRole = ROLE_None;\n\t\t\tsphere.size = blastRadius / 32.0;\n\t\t}\n\t\tsphere = Spawn(class'SphereEffect',,, HitLocation, rot(0,16384,0));\n\t\tif (sphere != None)\n\t\t{\n\t\t\tsphere.RemoteRole = ROLE_None;\n\t\t\tsphere.size = blastRadius / 32.0;\n\t\t}\n\t}\n}",
                        "locals": [
                            "local ShockRing ring;",
                            "local SphereEffect sphere;",
                            "local ExplosionLight light;",
                            "local AnimatedSprite expeffect;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "DrawExplosionEffects",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "HitLocation"
                            ],
                            [
                                "vector",
                                "HitNormal"
                            ]
                        ],
                        "return": ""
                    },
                    "HitWall": {
                        "body": "{\n\tif (vpw != None)\n\t\tvpw.Destroy();\n\tif (FireGen != None)\n\t\tFireGen.Destroy();\n\tif (SmokeGen != None)\n\t\tSmokeGen.Destroy();\n\tSuper.HitWall (HitLocation, Wall);\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "HitWall",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "HitLocation"
                            ],
                            [
                                "Actor",
                                "Wall"
                            ]
                        ],
                        "return": ""
                    },
                    "Tick": {
                        "body": "{\n\n\ttime += DeltaTime;\n\tDrawScale = FClamp(2.5*(time+0.5), 1.0, 6.0);\n\tif ((time > FRand() * 0.02) && (Level.NetMode != NM_DedicatedServer))\n\t{\n\t\ttime = 0;\n\n\t\t// spawn some trails\n\t\ts = Spawn(class'SmokeTrail',,, Location);\n\t\tif (s != None)\n\t\t{\n\t\t\ts.DrawScale = FRand() * 0.333;\n\t\t\ts.OrigScale = s.DrawScale;\n\t\t\ts.Texture = Texture'AlarmLightTex2';\n\t\t\ts.Velocity = VRand() * 50;\n\t\t\ts.OrigVel = s.Velocity;\n\t\t}\n\t}\n}",
                        "locals": [
                            "local SmokeTrail s;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltaTime"
                            ]
                        ],
                        "return": ""
                    },
                    "destroyed": {
                        "body": "{\n\tDeusExPlayer(Owner).SetLocation(Location);\n\tDeusExPlayer(Owner).UnderWaterTime = DeusExPlayer(Owner).Default.UnderWaterTime;\t\n\tDeusExPlayer(Owner).SetCollision(true, true , true);\n\tDeusExPlayer(Owner).SetPhysics(PHYS_Walking);\n\tDeusExPlayer(Owner).bCollideWorld = true;\n\tDeusExPlayer(Owner).bHidden=False;\n\tDeusExPlayer(Owner).GotoState('PlayerWalking');\n\tDeusExPlayer(Owner).ClientReStart();\t\n\t\tif(bCompanion)\n\t\t{\n\t\th=Spawn(class'TLItem', Self,, Location, Rotation);\n\t\th.Frob(DeusExPlayer(Owner),None);\n\t\th.bInObjectBelt = True;\n\t\th.Destroy();\n\t\t}\n\tbExploded = True;\n\tif (vpw != None)\n\t\tvpw.Destroy();\n\tSuper.Destroyed();\n}",
                        "locals": [
                            "local TLauncher TL;",
                            "local TLItem h;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "destroyed",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "setdirection": {
                        "body": "{\n\tNewRotation = (PlayerPawn(Owner).ViewRotation);\n\tNewVelocity = normal(vector(NewRotation))*speed;\n\tNewLocation = Location;\n\t//log(\"rotation to set (nikita) = \" @ NewRotation);\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "setdirection",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "tick": {
                        "body": "{\n\t\tif(Role == ROLE_Authority || bNetOwner)\t//dont do this on clients that didnt fire the rocket\t\t\t\t\t\t\t\t\t\t\n\t\t{\n\t\t\tif(!bExploded)\n\t\t\t{\n\t\t\t\tif (bNetOwner)\n\t\t\t\t{\n\t\t\t\t\tif (FireGen != None)\n\t\t\t\t\t\tFireGen.Destroy();\n\t\t\t\t\tif (SmokeGen != None)\n\t\t\t\t\t\tSmokeGen.LifeSpan = 5;\n\t\t\t\t\tbDebris = False;\n\t\t\t\t}\n\t\t\t\tMakeWindow();\n\t\t\t\tSetDirection();\n\t\t\t\tSetRotation(NewRotation);\n\t\t\t\tVelocity = NewVelocity;\n\t\t\t\t//log(\"Nikita ticked\");\n\t\t\t}\n\t\t}\n\t\tif(Role < ROLE_Authority && !bNetOwner)\n\t\t{\n\t\t\tSetRotation(NewRotation);\n\t\t\tVelocity = NewVelocity;\n\t\t\tSetLocation(NewLocation);\n\t\t\tSmokeGen.SetLocation(NewLocation);\n\t\t\tFireGen.SetLocation(NewLocation);\n\t\t\t//log(\"Nikita ticked on observing client, new rotation is: \" @ NewRotation);\n\t\t}\n\t\t//log(\"Role = \" @ Role @ \", bNetOwner = \" @ bNetOwner); \n\t\tSuper.tick(DeltaTime);\n\t}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltatime"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 243,
                "replication": "",
                "states": [],
                "variables": [
                    "var AugmentationDisplayWindow win;",
                    "var gc gc;",
                    "var bowenviewportwindow vpw;",
                    "var bool bExploded, bDoneWin;",
                    "var rotator NewRotation;",
                    "var vector NewVelocity, NewLocation;",
                    "var bool bCompanion;",
                    "var(Bowen) sound LockedSound;"
                ]
            }
        },
        "TempTurret.uc": {
            "body": "//=============================================================================\n// AutoTurret.\n//=============================================================================\nclass TempTurret extends DeusExDecoration;\n\nvar bool bDisb;\nvar() int TurretHealth;\nvar() string PTurretTeam;\nvar() deusexplayer Master;\n\nvar AutoTurretGun gun;\n\nvar() localized String titleString;\t\t// So we can name specific turrets in multiplayer\nvar() bool bTrackPawnsOnly;\nvar() bool bTrackPlayersOnly;\nvar() bool bActive;\nvar() int maxRange;\nvar() float fireRate;\nvar() float gunAccuracy;\nvar() int gunDamage;\nvar() int ammoAmount;\nvar Actor curTarget;\nvar Actor prevTarget;         // target we had last tick.\nvar Pawn safeTarget;          // in multiplayer, this actor is strictly off-limits\n                               // Usually for the player who activated the turret.\nvar float fireTimer;\nvar bool bConfused;\t\t\t\t// used when hit by EMP\nvar float confusionTimer;\t\t// how long until turret resumes normal operation\nvar float confusionDuration;\t// how long does an EMP hit last?\nvar Actor LastTarget;\t\t\t// what was our last target?\nvar float pitchLimit;\t\t\t// what's the maximum pitch?\nvar Rotator origRot;\t\t\t// original rotation\nvar bool bPreAlarmActiveState;\t// was I previously awake or not?\nvar bool bDisabled;\t\t\t\t// have I been hacked or shut down by computers?\nvar float TargetRefreshTime;      // used for multiplayer to reduce rate of checking for targets.\nvar() float Thick;\nvar() float PawnThick;\nvar() int team;\t\t\t\t\t\t// Keep track of team the turrets on\n\nvar int mpTurretDamage;\t\t\t// Settings for multiplayer\nvar int mpTurretRange;\n\nvar bool bComputerReset;\t\t\t// Keep track of if computer has been reset so we avoid all actors checks\n\nvar bool bSwitching;\nvar float SwitchTime, beepTime;\nvar Pawn savedTarget;\n\nvar int TE;\n\n// networking replication\nreplication\n{\n   //server to client\n   reliable if (Role == ROLE_Authority)\n      safeTarget, bDisabled, bActive, team, titleString;\n}\n\nfunction Frob(Actor Frobber, Inventory frobWith)\n{\t\nlocal TurretItem h;\n\n\tGun.destroy();\n\tDestroy();\n\tSilentAdd(class'TurretItem', DeusExPlayer(frobber));\n}\n\nfunction SilentAdd(class<inventory> addClass, DeusExPlayer addTarget)\n{ \n\tlocal Inventory anItem;\n\t\n\tanItem = Spawn(addClass,,,addTarget.Location); \n\tanItem.SpawnCopy(addTarget);\n\tanItem.Destroy();\n\t/*anItem.Instigator = addTarget; \n\tanItem.GotoState('Idle2'); \n\tanItem.bHeldItem = true; \n\tanItem.bTossedOut = false; \n\t\n\tif(Weapon(anItem) != None) \n\t\tWeapon(anItem).GiveAmmo(addTarget); \n\tanItem.GiveTo(addTarget);*/\n}\n\nfunction Destroyed()\n{\t\t\n}\n\nfunction UpdateSwitch()\n{\n\tif ( Level.Timeseconds > SwitchTime )\n\t{\n\t\tbSwitching = False;\n\t\t//safeTarget = savedTarget;\n\t\tSwitchTime = 0;\n\t\tbeepTime = 0;\n\t}\n\telse\n\t{\n\t\tif ( Level.Timeseconds > beepTime )\n\t\t{\n\t\t\tPlaySound(Sound'TurretSwitch', SLOT_Interact, 1.0,, maxRange );\n\t\t\tbeepTime = Level.Timeseconds + 0.75;\n\t\t}\n\t}\n}\n\nfunction Actor AcquireMultiplayerTarget()\n{\n\tlocal Pawn apawn;\n\tlocal DeusExPlayer aplayer;\n\tlocal Vector dist;\n\tlocal Actor noActor;\n\n\tif ( bSwitching )\n\t{\n\t\tnoActor = None;\n\t\treturn noActor;\n\t}\n\n\tapawn = gun.Level.PawnList;\n\n\twhile ( apawn != None )\n\t{\n\t\t//if (apawn.bDetectable && !apawn.bIgnore && apawn.IsA('DeusExPlayer'))\n\t\tif (apawn.bDetectable && !apawn.bIgnore)\n\t\t{\n\t\t\taplayer = DeusExPlayer(apawn);\n\n\t\t\tdist = apawn.Location - gun.Location; //apawn was aplayer\n\n\t\t\tif ( VSize(dist) < maxRange )\n\t\t\t{\n\t\t\t\t// Only players we can see\n\t\t\t\tif ( apawn.FastTrace( apawn.Location, gun.Location ))//apawn was aplayer\n\t\t\t\t{\n\t\t\t\t\tif(!PSOwners(apawn))\n\t\t\t\t\t{\n\t\t\t\t\t\tif(curTarget == None)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurTarget = apawn;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tapawn = apawn.nextPawn;\n\t}\n\treturn curtarget;\n}\n\nfunction Tick(float deltaTime)\n{\n\tlocal Pawn pawn;\n\tlocal ScriptedPawn sp;\n\tlocal DeusExDecoration deco;\n\tlocal float near;\n\tlocal Rotator destRot;\n\tlocal bool bSwitched;\n\t\tlocal float AreWeTooFar;\n\t    local Inventory Inv;\nSuper.Tick(deltaTime);\n\n\t/*if(Master != None)\n\t{\n\t\tAreWeTooFar = Abs(VSize(Master.Location - Location));\n\t\tif(AreWeTooFar > 650)\n\t\t\treturn;\n\t}*/\n\t\n\tbSwitched = False;\n\n\tif ( bSwitching )\n\t{\n\t\tUpdateSwitch();\n\t\treturn;\n\t}\n\n\n\t\t\n\tif (bActive && !bDisabled)\n\t{\n\t\t\n\t\tcurTarget = None;\n\n\t\tif ( !bConfused )\n\t\t{\n\t\t\tif (TargetRefreshTime < 0)\n\t\t\tTargetRefreshTime = 0;\n         \n\t\t\tTargetRefreshTime = TargetRefreshTime + deltaTime;\n\n\t\t\tif (TargetRefreshTime >= 0.3)\n\t\t\t{\n\t\t\t\tTargetRefreshTime = 0;\n\t\t\t\tcurTarget = AcquireMultiplayerTarget();\n\n//\t\t\t\tif ( curTarget == None )\n//\t\t\t\tPlaySound(Sound'TurretUnlocked', SLOT_Interact, 1.0,, maxRange );\n//\t\t\t\tprevtarget = curtarget;\t\t\n\t\t\t}\n\n\t\t\t\t\tforeach gun.VisibleActors(class'Pawn', pawn, maxRange, gun.Location)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (pawn.bDetectable && !pawn.bIgnore)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif(curTarget == None)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif(!PSOwners(Pawn))\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tcurTarget = Pawn;\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t}\n\n\t\t\t// if we have a target, rotate to face it\n\t\t\tif (curTarget != None)\n\t\t\t{\n\t\t\t\tdestRot = Rotator(curTarget.Location - gun.Location);\n\t\t\t\tgun.DesiredRotation = destRot;\n\t\t\t\tnear = pitchLimit / 2;\n\t\t\t\tgun.DesiredRotation.Pitch = FClamp(gun.DesiredRotation.Pitch, origRot.Pitch - near, origRot.Pitch + near);\n\t\t\t}\n\t\t\telse\n\t\t\t\tgun.DesiredRotation = origRot;\n\t}\n\telse\n\t{\n\t\tif ( !bConfused )\n\t\t\tgun.DesiredRotation = origRot;\n\t}\n\n\tnear = (Abs(gun.Rotation.Pitch - gun.DesiredRotation.Pitch)) % 65536;\n\tnear += (Abs(gun.Rotation.Yaw - gun.DesiredRotation.Yaw)) % 65536;\n\n\tif (bActive && !bDisabled)\n\t{\n\t\t// play an alert sound and light up\n\t\tif ((curTarget != None) && (curTarget != LastTarget))\n\t\t\tPlaySound(Sound'Beep6',,,, 1280);\n\n\t\t// if we're aiming close enough to our target\n\t\tif (curTarget != None)\n\t\t{\n\t\t\tgun.MultiSkins[1] = Texture'RedLightTex';\n\t\t\tif ((near < 4096) && (((Abs(gun.Rotation.Pitch - destRot.Pitch)) % 65536) < 8192))\n\t\t\t{\n\t\t\t\tif (fireTimer > fireRate)\n\t\t\t\t{\n\t\t\t\t\tFire();\n\t\t\t\t\tfireTimer = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (gun.IsAnimating())\n\t\t\t\tgun.PlayAnim('Still', 10.0, 0.001);\n\n\t\t\tif (bConfused)\n\t\t\t\tgun.MultiSkins[1] = Texture'YellowLightTex';\n\t\t\telse\n\t\t\t\tgun.MultiSkins[1] = Texture'GreenLightTex';\n\t\t}\n\n\t\tfireTimer += deltaTime;\n\t\tLastTarget = curTarget;\n\t}\n\telse\n\t{\n\t\tif (gun.IsAnimating())\n\t\t\tgun.PlayAnim('Still', 10.0, 0.001);\n\t\tgun.MultiSkins[1] = None;\n\t}\n\n\t// make noise if we're still moving\n\tif (near > 64)\n\t{\n\t\tgun.AmbientSound = Sound'AutoTurretMove';\n\t\tif (bConfused)\n\t\t\tgun.SoundPitch = 128;\n\t\telse\n\t\t\tgun.SoundPitch = 64;\n\t}\n\telse\n\t\tgun.AmbientSound = None;\n}\n\nfunction bool PSOwners(Pawn P)\n{\nlocal PSTurretController PSTC;\n\n\tif(DeusExPlayer(P) != None)\n\t{\n\t\tif(DeusExPlayer(P) == Master)\n\t\t\treturn True;\n\t}\n\t\t\n\tif(ScriptedPawn(P) != None)\n\t{\n\t\tif(ScriptedPawn(P).IsA('Pets') || ScriptedPawn(P).IsA('RadarDrone'))\n\t\t\treturn true;\n\t}\n\treturn False;\n}\n\nauto state Active\n{\n\tfunction TakeDamage(int Damage, Pawn EventInstigator, vector HitLocation, vector Momentum, name DamageType)\n\t{\n\t\tlocal Human dxp;\n\t\tlocal float mindmg;\n\n\t\tif (DamageType == 'EMP')\n\t\t{\n\t\t\treturn; //Nulled function, IMMUNE TO EMP.\n\t\t}\n\n\t\tTurretHealth -= Damage; //Edited this in to avoid some things.\n\n\t\tif(bDisb == False)\n\t\t{\n\t\t\tif(TurretHealth <= 0)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction Fire()\n{\n\tlocal Vector HitLocation, HitNormal, StartTrace, EndTrace, X, Y, Z;\n\tlocal Rotator rot;\n\tlocal Actor hit;\n\tlocal ShellCasing shell;\n\tlocal Spark spark;\n\tlocal Pawn attacker;\n\n\tif (!gun.IsAnimating())\n\t\tgun.LoopAnim('Fire');\n\n\t// CNN - give turrets infinite ammo\n//\tif (ammoAmount > 0)\n//\t{\n//\t\tammoAmount--;\n\t\tGetAxes(gun.Rotation, X, Y, Z);\n\t\tStartTrace = gun.Location;\n\t\tEndTrace = StartTrace + gunAccuracy * (FRand()-0.5)*Y*1000 + gunAccuracy * (FRand()-0.5)*Z*1000 ;\n\t\tEndTrace += 10000 * X;\n\t\thit = Trace(HitLocation, HitNormal, EndTrace, StartTrace, True);\n\n\t\t// spawn some effects\n      if ((DeusExMPGame(Level.Game) != None) && (!DeusExMPGame(Level.Game).bSpawnEffects))\n      {\n         shell = None;\n      }\n      else\n      {\n         shell = Spawn(class'ShellCasing',,, gun.Location);\n      }\n\t\tif (shell != None)\n\t\t\tshell.Velocity = Vector(gun.Rotation - rot(0,16384,0)) * 100 + VRand() * 30;\n\n\t\tMakeNoise(1.0);\n\t\tPlaySound(sound'PistolFire', SLOT_None);\n\t\tAISendEvent('LoudNoise', EAITYPE_Audio);\n\n\t\t// muzzle flash\n\t\tgun.LightType = LT_Steady;\n\t\tgun.MultiSkins[2] = Texture'FlatFXTex34';\n\t\tSetTimer(0.1, False);\n\n\t\t// randomly draw a tracer\n\t\tif (FRand() < 0.5)\n\t\t{\n\t\t\tif (VSize(HitLocation - StartTrace) > 250)\n\t\t\t{\n\t\t\t\trot = Rotator(EndTrace - StartTrace);\n\t\t\t\tSpawn(class'Tracer',,, StartTrace + 96 * Vector(rot), rot);\n\t\t\t}\n\t\t}\n\n\t\tif (hit != None)\n\t\t{\n         if ((DeusExMPGame(Level.Game) != None) && (!DeusExMPGame(Level.Game).bSpawnEffects))\n         {\n            spark = None;\n         }\n         else\n         {\n            // spawn a little spark and make a ricochet sound if we hit something\n            spark = spawn(class'Spark',,,HitLocation+HitNormal, Rotator(HitNormal));\n         }\n\n\t\t\tif (spark != None)\n\t\t\t{\n\t\t\t\tspark.DrawScale = 0.05;\n\t\t\t\tPlayHitSound(spark, hit);\n\t\t\t}\n\n\t\t\tattacker = None;\n\t\t\tif ((curTarget == hit) && !curTarget.IsA('PlayerPawn'))\n\t\t\t\tattacker = GetPlayerPawn();\n         if (Level.NetMode != NM_Standalone)\n            attacker = safetarget;\n\t\t\tif ( hit.IsA('DeusExPlayer') && ( Level.NetMode != NM_Standalone ))\n\t\t\t\tDeusExPlayer(hit).myTurretKiller = Self;\n\t\t\thit.TakeDamage(gunDamage, attacker, HitLocation, 1000.0*X, 'AutoShot');\n\n\t\t\tif (hit.IsA('Pawn') && !hit.IsA('Robot'))\n\t\t\t\tSpawnBlood(HitLocation, HitNormal);\n\t\t\telse if ((hit == Level) || hit.IsA('Mover'))\n\t\t\t\tSpawnEffects(HitLocation, HitNormal, hit);\n\t\t}\n//\t}\n//\telse\n//\t{\n//\t\tPlaySound(sound'DryFire', SLOT_None);\n//\t}\n}\n\nfunction SpawnBlood(Vector HitLocation, Vector HitNormal)\n{\n\tlocal rotator rot;\n\n\trot = Rotator(Location - HitLocation);\n\trot.Pitch = 0;\n\trot.Roll = 0;\n\n   if ((DeusExMPGame(Level.Game) != None) && (!DeusExMPGame(Level.Game).bSpawnEffects))\n      return;\n\n\tspawn(class'BloodSpurt',,,HitLocation+HitNormal, rot);\n\tspawn(class'BloodDrop',,,HitLocation+HitNormal);\n\tif (FRand() < 0.5)\n\t\tspawn(class'BloodDrop',,,HitLocation+HitNormal);\n}\n\nsimulated function SpawnEffects(Vector HitLocation, Vector HitNormal, Actor Other)\n{\n\tlocal SmokeTrail puff;\n\tlocal int i;\n\tlocal BulletHole hole;\n\tlocal Rotator rot;\n\n   if ((DeusExMPGame(Level.Game) != None) && (!DeusExMPGame(Level.Game).bSpawnEffects))\n      return;\n\n   if (FRand() < 0.5)\n\t{\n\t\tpuff = spawn(class'SmokeTrail',,,HitLocation+HitNormal, Rotator(HitNormal));\n\t\tif (puff != None)\n\t\t{\n\t\t\tpuff.DrawScale *= 0.3;\n\t\t\tpuff.OrigScale = puff.DrawScale;\n\t\t\tpuff.LifeSpan = 0.25;\n\t\t\tpuff.OrigLifeSpan = puff.LifeSpan;\n\t\t}\n\t}\n\n\tif (!Other.IsA('BreakableGlass'))\n\t\tfor (i=0; i<2; i++)\n\t\t\tif (FRand() < 0.8)\n\t\t\t\tspawn(class'Rockchip',,,HitLocation+HitNormal);\n\n\thole = spawn(class'BulletHole', Other,, HitLocation, Rotator(HitNormal));\n\n\t// should we crack glass?\n\tif (GetWallMaterial(HitLocation, HitNormal) == 'Glass')\n\t{\n\t\tif (FRand() < 0.5)\n\t\t\thole.Texture = Texture'FlatFXTex29';\n\t\telse\n\t\t\thole.Texture = Texture'FlatFXTex30';\n\n\t\thole.DrawScale = 0.1;\n\t\thole.ReattachDecal();\n\t}\n}\n\nfunction name GetWallMaterial(vector HitLocation, vector HitNormal)\n{\n\tlocal vector EndTrace, StartTrace;\n\tlocal actor newtarget;\n\tlocal int texFlags;\n\tlocal name texName, texGroup;\n\n\tStartTrace = HitLocation + HitNormal*16;\t\t// make sure we start far enough out\n\tEndTrace = HitLocation - HitNormal;\n\n\tforeach TraceTexture(class'Actor', newtarget, texName, texGroup, texFlags, StartTrace, HitNormal, EndTrace)\n\t\tif ((newtarget == Level) || newtarget.IsA('Mover'))\n\t\t\tbreak;\n\n\treturn texGroup;\n}\n\nfunction PlayHitSound(actor destActor, Actor hitActor)\n{\n\tlocal float rnd;\n\tlocal sound snd;\n\n\trnd = FRand();\n\n\tif (rnd < 0.25)\n\t\tsnd = sound'Ricochet1';\n\telse if (rnd < 0.5)\n\t\tsnd = sound'Ricochet2';\n\telse if (rnd < 0.75)\n\t\tsnd = sound'Ricochet3';\n\telse\n\t\tsnd = sound'Ricochet4';\n\n\t// play a different ricochet sound if the object isn't damaged by normal bullets\n\tif (hitActor != None) \n\t{\n\t\tif (hitActor.IsA('DeusExDecoration') && (DeusExDecoration(hitActor).minDamageThreshold > 10))\n\t\t\tsnd = sound'ArmorRicochet';\n\t\telse if (hitActor.IsA('Robot'))\n\t\t\tsnd = sound'ArmorRicochet';\n\t}\n\n\tif (destActor != None)\n\t\tdestActor.PlaySound(snd, SLOT_None,,, 1024, 1.1 - 0.2*FRand());\n}\n\n// turn off the muzzle flash\nsimulated function Timer()\n{\n\tgun.LightType = LT_None;\n\tgun.MultiSkins[2] = None;\n}\n\n/*function AlarmHeard(Name event, EAIEventState state, XAIParams params)\n{\n\tif (state == EAISTATE_Begin)\n\t{\n\t\tif (!bActive)\n\t\t{\n\t\t\tbPreAlarmActiveState = bActive;\n\t\t\tbActive = True;\n\t\t}\n\t}\n\telse if (state == EAISTATE_End)\n\t{\n\t\tif (bActive)\n\t\t\tbActive = bPreAlarmActiveState;\n\t}\n}*/\n\nfunction PreBeginPlay()\n{\n\tlocal Vector v1, v2;\n\tlocal class<AutoTurretGun> gunClass;\n\tlocal Rotator rot;\n\n\tSuper.PreBeginPlay();\n\n\tif (IsA('AutoTurretSmall'))\n\t\tgunClass = class'AutoTurretGunSmall';\n\telse\n\t\tgunClass = class'AutoTurretGun';\n\n\trot = Rotation;\n\trot.Pitch = 0;\n\trot.Roll = 0;\n\torigRot = rot;\n\tgun = Spawn(gunClass, Self,, Location, rot);\n\tif (gun != None)\n\t{\n\t\tv1.X = 0;\n\t\tv1.Y = 0;\n\t\tv1.Z = CollisionHeight + gun.Default.CollisionHeight;\n\t\tv2 = v1 >> Rotation;\n\t\tv2 += Location;\n\t\tgun.bHackable=False;\n\t\tgun.SetLocation(v2);\n\t\tgun.SetBase(Self);\n\t}\n\n\t// set up the alarm listeners\n\t//AISetEventCallback('Alarm', 'AlarmHeard');\n\n\tmaxRange = mpTurretRange;\n\tgunDamage = mpTurretDamage;\n\tbDisabled = !bActive;\n}\n\nfunction PostBeginPlay()\n{\n   safeTarget = None;\n   prevTarget = None;\n   TargetRefreshTime = 0;\n   Super.PostBeginPlay();\n}\n\ndefaultproperties\n{\n     TurretHealth=100\n     PTurretTeam=\"DEFAULT\"\n     titleString=\"AutoTurret\"\n     bTrackPlayersOnly=True\n     bActive=True\n     maxRange=512\n     fireRate=0.250000\n     gunAccuracy=0.500000\n     gunDamage=5\n     AmmoAmount=1000\n     confusionDuration=120.000000\n     pitchLimit=11000.000000\n     Team=500\n     mpTurretDamage=20\n     mpTurretRange=1024\n     HitPoints=100\n     minDamageThreshold=100\n     bHighlight=False\n     ItemName=\"Turret Base\"\n     bPushable=False\n     Mesh=LodMesh'DeusExDeco.AutoTurretBase'\n     SoundRadius=48\n     SoundVolume=192\n     AmbientSound=Sound'DeusExSounds.Generic.AutoTurretHum'\n     CollisionRadius=14.000000\n     CollisionHeight=20.200001\n     Mass=50.000000\n     Buoyancy=10.000000\n     bVisionImportant=True\n}\n",
            "name": "TempTurret.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "TurretHealth=100",
                    "PTurretTeam=\"DEFAULT\"",
                    "titleString=\"AutoTurret\"",
                    "bTrackPlayersOnly=True",
                    "bActive=True",
                    "maxRange=512",
                    "fireRate=0.250000",
                    "gunAccuracy=0.500000",
                    "gunDamage=5",
                    "AmmoAmount=1000",
                    "confusionDuration=120.000000",
                    "pitchLimit=11000.000000",
                    "Team=500",
                    "mpTurretDamage=20",
                    "mpTurretRange=1024",
                    "HitPoints=100",
                    "minDamageThreshold=100",
                    "bHighlight=False",
                    "ItemName=\"Turret Base\"",
                    "bPushable=False",
                    "Mesh=LodMesh'DeusExDeco.AutoTurretBase'",
                    "SoundRadius=48",
                    "SoundVolume=192",
                    "AmbientSound=Sound'DeusExSounds.Generic.AutoTurretHum'",
                    "CollisionRadius=14.000000",
                    "CollisionHeight=20.200001",
                    "Mass=50.000000",
                    "Buoyancy=10.000000",
                    "bVisionImportant=True"
                ],
                "exec": [],
                "extends": "DeusExDecoration",
                "functions": {
                    "AcquireMultiplayerTarget": {
                        "body": "{\n\n\tif ( bSwitching )\n\t{\n\t\tnoActor = None;\n\t\treturn noActor;\n\t}\n\n\tapawn = gun.Level.PawnList;\n\n\twhile ( apawn != None )\n\t{\n\t\t//if (apawn.bDetectable && !apawn.bIgnore && apawn.IsA('DeusExPlayer'))\n\t\tif (apawn.bDetectable && !apawn.bIgnore)\n\t\t{\n\t\t\taplayer = DeusExPlayer(apawn);\n\n\t\t\tdist = apawn.Location - gun.Location; //apawn was aplayer\n\n\t\t\tif ( VSize(dist) < maxRange )\n\t\t\t{\n\t\t\t\t// Only players we can see\n\t\t\t\tif ( apawn.FastTrace( apawn.Location, gun.Location ))//apawn was aplayer\n\t\t\t\t{\n\t\t\t\t\tif(!PSOwners(apawn))\n\t\t\t\t\t{\n\t\t\t\t\t\tif(curTarget == None)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurTarget = apawn;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tapawn = apawn.nextPawn;\n\t}\n\treturn curtarget;\n}",
                        "locals": [
                            "local Pawn apawn;",
                            "local DeusExPlayer aplayer;",
                            "local Vector dist;",
                            "local Actor noActor;"
                        ],
                        "modifiers": [],
                        "name": "AcquireMultiplayerTarget",
                        "native": false,
                        "param": [],
                        "return": "Actor"
                    },
                    "Destroyed": {
                        "body": "{\t\t\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Destroyed",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Fire": {
                        "body": "{\n\n\tif (!gun.IsAnimating())\n\t\tgun.LoopAnim('Fire');\n\n\t// CNN - give turrets infinite ammo\n//\tif (ammoAmount > 0)\n//\t{\n//\t\tammoAmount--;\n\t\tGetAxes(gun.Rotation, X, Y, Z);\n\t\tStartTrace = gun.Location;\n\t\tEndTrace = StartTrace + gunAccuracy * (FRand()-0.5)*Y*1000 + gunAccuracy * (FRand()-0.5)*Z*1000 ;\n\t\tEndTrace += 10000 * X;\n\t\thit = Trace(HitLocation, HitNormal, EndTrace, StartTrace, True);\n\n\t\t// spawn some effects\n      if ((DeusExMPGame(Level.Game) != None) && (!DeusExMPGame(Level.Game).bSpawnEffects))\n      {\n         shell = None;\n      }\n      else\n      {\n         shell = Spawn(class'ShellCasing',,, gun.Location);\n      }\n\t\tif (shell != None)\n\t\t\tshell.Velocity = Vector(gun.Rotation - rot(0,16384,0)) * 100 + VRand() * 30;\n\n\t\tMakeNoise(1.0);\n\t\tPlaySound(sound'PistolFire', SLOT_None);\n\t\tAISendEvent('LoudNoise', EAITYPE_Audio);\n\n\t\t// muzzle flash\n\t\tgun.LightType = LT_Steady;\n\t\tgun.MultiSkins[2] = Texture'FlatFXTex34';\n\t\tSetTimer(0.1, False);\n\n\t\t// randomly draw a tracer\n\t\tif (FRand() < 0.5)\n\t\t{\n\t\t\tif (VSize(HitLocation - StartTrace) > 250)\n\t\t\t{\n\t\t\t\trot = Rotator(EndTrace - StartTrace);\n\t\t\t\tSpawn(class'Tracer',,, StartTrace + 96 * Vector(rot), rot);\n\t\t\t}\n\t\t}\n\n\t\tif (hit != None)\n\t\t{\n         if ((DeusExMPGame(Level.Game) != None) && (!DeusExMPGame(Level.Game).bSpawnEffects))\n         {\n            spark = None;\n         }\n         else\n         {\n            // spawn a little spark and make a ricochet sound if we hit something\n            spark = spawn(class'Spark',,,HitLocation+HitNormal, Rotator(HitNormal));\n         }\n\n\t\t\tif (spark != None)\n\t\t\t{\n\t\t\t\tspark.DrawScale = 0.05;\n\t\t\t\tPlayHitSound(spark, hit);\n\t\t\t}\n\n\t\t\tattacker = None;\n\t\t\tif ((curTarget == hit) && !curTarget.IsA('PlayerPawn'))\n\t\t\t\tattacker = GetPlayerPawn();\n         if (Level.NetMode != NM_Standalone)\n            attacker = safetarget;\n\t\t\tif ( hit.IsA('DeusExPlayer') && ( Level.NetMode != NM_Standalone ))\n\t\t\t\tDeusExPlayer(hit).myTurretKiller = Self;\n\t\t\thit.TakeDamage(gunDamage, attacker, HitLocation, 1000.0*X, 'AutoShot');\n\n\t\t\tif (hit.IsA('Pawn') && !hit.IsA('Robot'))\n\t\t\t\tSpawnBlood(HitLocation, HitNormal);\n\t\t\telse if ((hit == Level) || hit.IsA('Mover'))\n\t\t\t\tSpawnEffects(HitLocation, HitNormal, hit);\n\t\t}\n//\t}",
                        "locals": [
                            "local Vector HitLocation, HitNormal, StartTrace, EndTrace, X, Y, Z;",
                            "local Rotator rot;",
                            "local Actor hit;",
                            "local ShellCasing shell;",
                            "local Spark spark;",
                            "local Pawn attacker;"
                        ],
                        "modifiers": [],
                        "name": "Fire",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Frob": {
                        "body": "{\t\n\n\tGun.destroy();\n\tDestroy();\n\tSilentAdd(class'TurretItem', DeusExPlayer(frobber));\n}",
                        "locals": [
                            "local TurretItem h;"
                        ],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    },
                    "GetWallMaterial": {
                        "body": "{\n\n\tStartTrace = HitLocation + HitNormal*16;\t\t// make sure we start far enough out\n\tEndTrace = HitLocation - HitNormal;\n\n\tforeach TraceTexture(class'Actor', newtarget, texName, texGroup, texFlags, StartTrace, HitNormal, EndTrace)\n\t\tif ((newtarget == Level) || newtarget.IsA('Mover'))\n\t\t\tbreak;\n\n\treturn texGroup;\n}",
                        "locals": [
                            "local vector EndTrace, StartTrace;",
                            "local actor newtarget;",
                            "local int texFlags;",
                            "local name texName, texGroup;"
                        ],
                        "modifiers": [],
                        "name": "GetWallMaterial",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "HitLocation"
                            ],
                            [
                                "vector",
                                "HitNormal"
                            ]
                        ],
                        "return": "name"
                    },
                    "PSOwners": {
                        "body": "{\n\n\tif(DeusExPlayer(P) != None)\n\t{\n\t\tif(DeusExPlayer(P) == Master)\n\t\t\treturn True;\n\t}\n\t\t\n\tif(ScriptedPawn(P) != None)\n\t{\n\t\tif(ScriptedPawn(P).IsA('Pets') || ScriptedPawn(P).IsA('RadarDrone'))\n\t\t\treturn true;\n\t}\n\treturn False;\n}",
                        "locals": [
                            "local PSTurretController PSTC;"
                        ],
                        "modifiers": [],
                        "name": "PSOwners",
                        "native": false,
                        "param": [
                            [
                                "Pawn",
                                "P"
                            ]
                        ],
                        "return": "bool"
                    },
                    "PlayHitSound": {
                        "body": "{\n\n\trnd = FRand();\n\n\tif (rnd < 0.25)\n\t\tsnd = sound'Ricochet1';\n\telse if (rnd < 0.5)\n\t\tsnd = sound'Ricochet2';\n\telse if (rnd < 0.75)\n\t\tsnd = sound'Ricochet3';\n\telse\n\t\tsnd = sound'Ricochet4';\n\n\t// play a different ricochet sound if the object isn't damaged by normal bullets\n\tif (hitActor != None) \n\t{\n\t\tif (hitActor.IsA('DeusExDecoration') && (DeusExDecoration(hitActor).minDamageThreshold > 10))\n\t\t\tsnd = sound'ArmorRicochet';\n\t\telse if (hitActor.IsA('Robot'))\n\t\t\tsnd = sound'ArmorRicochet';\n\t}\n\n\tif (destActor != None)\n\t\tdestActor.PlaySound(snd, SLOT_None,,, 1024, 1.1 - 0.2*FRand());\n}",
                        "locals": [
                            "local float rnd;",
                            "local sound snd;"
                        ],
                        "modifiers": [],
                        "name": "PlayHitSound",
                        "native": false,
                        "param": [
                            [
                                "actor",
                                "destActor"
                            ],
                            [
                                "Actor",
                                "hitActor"
                            ]
                        ],
                        "return": ""
                    },
                    "PostBeginPlay": {
                        "body": "{\n   safeTarget = None;\n   prevTarget = None;\n   TargetRefreshTime = 0;\n   Super.PostBeginPlay();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n\n\tSuper.PreBeginPlay();\n\n\tif (IsA('AutoTurretSmall'))\n\t\tgunClass = class'AutoTurretGunSmall';\n\telse\n\t\tgunClass = class'AutoTurretGun';\n\n\trot = Rotation;\n\trot.Pitch = 0;\n\trot.Roll = 0;\n\torigRot = rot;\n\tgun = Spawn(gunClass, Self,, Location, rot);\n\tif (gun != None)\n\t{\n\t\tv1.X = 0;\n\t\tv1.Y = 0;\n\t\tv1.Z = CollisionHeight + gun.Default.CollisionHeight;\n\t\tv2 = v1 >> Rotation;\n\t\tv2 += Location;\n\t\tgun.bHackable=False;\n\t\tgun.SetLocation(v2);\n\t\tgun.SetBase(Self);\n\t}\n\n\t// set up the alarm listeners\n\t//AISetEventCallback('Alarm', 'AlarmHeard');\n\n\tmaxRange = mpTurretRange;\n\tgunDamage = mpTurretDamage;\n\tbDisabled = !bActive;\n}",
                        "locals": [
                            "local Vector v1, v2;",
                            "local class<AutoTurretGun> gunClass;",
                            "local Rotator rot;"
                        ],
                        "modifiers": [],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "SilentAdd": {
                        "body": "{ \n\t\n\tanItem = Spawn(addClass,,,addTarget.Location); \n\tanItem.SpawnCopy(addTarget);\n\tanItem.Destroy();\n\t/*anItem.Instigator = addTarget; \n\tanItem.GotoState('Idle2'); \n\tanItem.bHeldItem = true; \n\tanItem.bTossedOut = false; \n\t\n\tif(Weapon(anItem) != None) \n\t\tWeapon(anItem).GiveAmmo(addTarget); \n\tanItem.GiveTo(addTarget);*/\n}",
                        "locals": [
                            "local Inventory anItem;"
                        ],
                        "modifiers": [],
                        "name": "SilentAdd",
                        "native": false,
                        "param": [
                            [
                                "class<inventory>",
                                "addClass"
                            ],
                            [
                                "DeusExPlayer",
                                "addTarget"
                            ]
                        ],
                        "return": ""
                    },
                    "SpawnBlood": {
                        "body": "{\n\n\trot = Rotator(Location - HitLocation);\n\trot.Pitch = 0;\n\trot.Roll = 0;\n\n   if ((DeusExMPGame(Level.Game) != None) && (!DeusExMPGame(Level.Game).bSpawnEffects))\n      return;\n\n\tspawn(class'BloodSpurt',,,HitLocation+HitNormal, rot);\n\tspawn(class'BloodDrop',,,HitLocation+HitNormal);\n\tif (FRand() < 0.5)\n\t\tspawn(class'BloodDrop',,,HitLocation+HitNormal);\n}",
                        "locals": [
                            "local rotator rot;"
                        ],
                        "modifiers": [],
                        "name": "SpawnBlood",
                        "native": false,
                        "param": [
                            [
                                "Vector",
                                "HitLocation"
                            ],
                            [
                                "Vector",
                                "HitNormal"
                            ]
                        ],
                        "return": ""
                    },
                    "SpawnEffects": {
                        "body": "{\n\n   if ((DeusExMPGame(Level.Game) != None) && (!DeusExMPGame(Level.Game).bSpawnEffects))\n      return;\n\n   if (FRand() < 0.5)\n\t{\n\t\tpuff = spawn(class'SmokeTrail',,,HitLocation+HitNormal, Rotator(HitNormal));\n\t\tif (puff != None)\n\t\t{\n\t\t\tpuff.DrawScale *= 0.3;\n\t\t\tpuff.OrigScale = puff.DrawScale;\n\t\t\tpuff.LifeSpan = 0.25;\n\t\t\tpuff.OrigLifeSpan = puff.LifeSpan;\n\t\t}\n\t}\n\n\tif (!Other.IsA('BreakableGlass'))\n\t\tfor (i=0; i<2; i++)\n\t\t\tif (FRand() < 0.8)\n\t\t\t\tspawn(class'Rockchip',,,HitLocation+HitNormal);\n\n\thole = spawn(class'BulletHole', Other,, HitLocation, Rotator(HitNormal));\n\n\t// should we crack glass?\n\tif (GetWallMaterial(HitLocation, HitNormal) == 'Glass')\n\t{\n\t\tif (FRand() < 0.5)\n\t\t\thole.Texture = Texture'FlatFXTex29';\n\t\telse\n\t\t\thole.Texture = Texture'FlatFXTex30';\n\n\t\thole.DrawScale = 0.1;\n\t\thole.ReattachDecal();\n\t}\n}",
                        "locals": [
                            "local SmokeTrail puff;",
                            "local int i;",
                            "local BulletHole hole;",
                            "local Rotator rot;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "SpawnEffects",
                        "native": false,
                        "param": [
                            [
                                "Vector",
                                "HitLocation"
                            ],
                            [
                                "Vector",
                                "HitNormal"
                            ],
                            [
                                "Actor",
                                "Other"
                            ]
                        ],
                        "return": ""
                    },
                    "TakeDamage": {
                        "body": "{\n\n\t\tif (DamageType == 'EMP')\n\t\t{\n\t\t\treturn; //Nulled function, IMMUNE TO EMP.\n\t\t}\n\n\t\tTurretHealth -= Damage; //Edited this in to avoid some things.\n\n\t\tif(bDisb == False)\n\t\t{\n\t\t\tif(TurretHealth <= 0)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}",
                        "locals": [
                            "local Human dxp;",
                            "local float mindmg;"
                        ],
                        "modifiers": [],
                        "name": "TakeDamage",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "Damage"
                            ],
                            [
                                "Pawn",
                                "EventInstigator"
                            ],
                            [
                                "vector",
                                "HitLocation"
                            ],
                            [
                                "vector",
                                "Momentum"
                            ],
                            [
                                "name",
                                "DamageType"
                            ]
                        ],
                        "return": ""
                    },
                    "Tick": {
                        "body": "{\nSuper.Tick(deltaTime);\n\n\t/*if(Master != None)\n\t{\n\t\tAreWeTooFar = Abs(VSize(Master.Location - Location));\n\t\tif(AreWeTooFar > 650)\n\t\t\treturn;\n\t}*/\n\t\n\tbSwitched = False;\n\n\tif ( bSwitching )\n\t{\n\t\tUpdateSwitch();\n\t\treturn;\n\t}\n\n\n\t\t\n\tif (bActive && !bDisabled)\n\t{\n\t\t\n\t\tcurTarget = None;\n\n\t\tif ( !bConfused )\n\t\t{\n\t\t\tif (TargetRefreshTime < 0)\n\t\t\tTargetRefreshTime = 0;\n         \n\t\t\tTargetRefreshTime = TargetRefreshTime + deltaTime;\n\n\t\t\tif (TargetRefreshTime >= 0.3)\n\t\t\t{\n\t\t\t\tTargetRefreshTime = 0;\n\t\t\t\tcurTarget = AcquireMultiplayerTarget();\n\n//\t\t\t\tif ( curTarget == None )\n//\t\t\t\tPlaySound(Sound'TurretUnlocked', SLOT_Interact, 1.0,, maxRange );\n//\t\t\t\tprevtarget = curtarget;\t\t\n\t\t\t}\n\n\t\t\t\t\tforeach gun.VisibleActors(class'Pawn', pawn, maxRange, gun.Location)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (pawn.bDetectable && !pawn.bIgnore)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif(curTarget == None)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif(!PSOwners(Pawn))\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tcurTarget = Pawn;\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t}\n\n\t\t\t// if we have a target, rotate to face it\n\t\t\tif (curTarget != None)\n\t\t\t{\n\t\t\t\tdestRot = Rotator(curTarget.Location - gun.Location);\n\t\t\t\tgun.DesiredRotation = destRot;\n\t\t\t\tnear = pitchLimit / 2;\n\t\t\t\tgun.DesiredRotation.Pitch = FClamp(gun.DesiredRotation.Pitch, origRot.Pitch - near, origRot.Pitch + near);\n\t\t\t}\n\t\t\telse\n\t\t\t\tgun.DesiredRotation = origRot;\n\t}\n\telse\n\t{\n\t\tif ( !bConfused )\n\t\t\tgun.DesiredRotation = origRot;\n\t}\n\n\tnear = (Abs(gun.Rotation.Pitch - gun.DesiredRotation.Pitch)) % 65536;\n\tnear += (Abs(gun.Rotation.Yaw - gun.DesiredRotation.Yaw)) % 65536;\n\n\tif (bActive && !bDisabled)\n\t{\n\t\t// play an alert sound and light up\n\t\tif ((curTarget != None) && (curTarget != LastTarget))\n\t\t\tPlaySound(Sound'Beep6',,,, 1280);\n\n\t\t// if we're aiming close enough to our target\n\t\tif (curTarget != None)\n\t\t{\n\t\t\tgun.MultiSkins[1] = Texture'RedLightTex';\n\t\t\tif ((near < 4096) && (((Abs(gun.Rotation.Pitch - destRot.Pitch)) % 65536) < 8192))\n\t\t\t{\n\t\t\t\tif (fireTimer > fireRate)\n\t\t\t\t{\n\t\t\t\t\tFire();\n\t\t\t\t\tfireTimer = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (gun.IsAnimating())\n\t\t\t\tgun.PlayAnim('Still', 10.0, 0.001);\n\n\t\t\tif (bConfused)\n\t\t\t\tgun.MultiSkins[1] = Texture'YellowLightTex';\n\t\t\telse\n\t\t\t\tgun.MultiSkins[1] = Texture'GreenLightTex';\n\t\t}\n\n\t\tfireTimer += deltaTime;\n\t\tLastTarget = curTarget;\n\t}\n\telse\n\t{\n\t\tif (gun.IsAnimating())\n\t\t\tgun.PlayAnim('Still', 10.0, 0.001);\n\t\tgun.MultiSkins[1] = None;\n\t}\n\n\t// make noise if we're still moving\n\tif (near > 64)\n\t{\n\t\tgun.AmbientSound = Sound'AutoTurretMove';\n\t\tif (bConfused)\n\t\t\tgun.SoundPitch = 128;\n\t\telse\n\t\t\tgun.SoundPitch = 64;\n\t}\n\telse\n\t\tgun.AmbientSound = None;\n}",
                        "locals": [
                            "local Pawn pawn;",
                            "local ScriptedPawn sp;",
                            "local DeusExDecoration deco;",
                            "local float near;",
                            "local Rotator destRot;",
                            "local bool bSwitched;",
                            "local float AreWeTooFar;",
                            "local Inventory Inv;"
                        ],
                        "modifiers": [],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltaTime"
                            ]
                        ],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\tgun.LightType = LT_None;\n\tgun.MultiSkins[2] = None;\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "UpdateSwitch": {
                        "body": "{\n\tif ( Level.Timeseconds > SwitchTime )\n\t{\n\t\tbSwitching = False;\n\t\t//safeTarget = savedTarget;\n\t\tSwitchTime = 0;\n\t\tbeepTime = 0;\n\t}\n\telse\n\t{\n\t\tif ( Level.Timeseconds > beepTime )\n\t\t{\n\t\t\tPlaySound(Sound'TurretSwitch', SLOT_Interact, 1.0,, maxRange );\n\t\t\tbeepTime = Level.Timeseconds + 0.75;\n\t\t}\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "UpdateSwitch",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 634,
                "replication": "",
                "states": [],
                "variables": [
                    "var bool bDisb;",
                    "var() int TurretHealth;",
                    "var() string PTurretTeam;",
                    "var() deusexplayer Master;",
                    "var AutoTurretGun gun;",
                    "var() localized String titleString;\t\t// So we can name specific turrets in multiplayer",
                    "var() bool bTrackPawnsOnly;",
                    "var() bool bTrackPlayersOnly;",
                    "var() bool bActive;",
                    "var() int maxRange;",
                    "var() float fireRate;",
                    "var() float gunAccuracy;",
                    "var() int gunDamage;",
                    "var() int ammoAmount;",
                    "var Actor curTarget;",
                    "var Actor prevTarget;         // target we had last tick.",
                    "var Pawn safeTarget;          // in multiplayer, this actor is strictly off-limits",
                    "var float fireTimer;",
                    "var bool bConfused;\t\t\t\t// used when hit by EMP",
                    "var float confusionTimer;\t\t// how long until turret resumes normal operation",
                    "var float confusionDuration;\t// how long does an EMP hit last?",
                    "var Actor LastTarget;\t\t\t// what was our last target?",
                    "var float pitchLimit;\t\t\t// what's the maximum pitch?",
                    "var Rotator origRot;\t\t\t// original rotation",
                    "var bool bPreAlarmActiveState;\t// was I previously awake or not?",
                    "var bool bDisabled;\t\t\t\t// have I been hacked or shut down by computers?",
                    "var float TargetRefreshTime;      // used for multiplayer to reduce rate of checking for targets.",
                    "var() float Thick;",
                    "var() float PawnThick;",
                    "var() int team;\t\t\t\t\t\t// Keep track of team the turrets on",
                    "var int mpTurretDamage;\t\t\t// Settings for multiplayer",
                    "var int mpTurretRange;",
                    "var bool bComputerReset;\t\t\t// Keep track of if computer has been reset so we avoid all actors checks",
                    "var bool bSwitching;",
                    "var float SwitchTime, beepTime;",
                    "var Pawn savedTarget;",
                    "var int TE;"
                ]
            }
        },
        "ThrownBaton.uc": {
            "body": "class ThrownBaton expands DeusExProjectile;\n\ndefaultproperties\n{\n     bStickToWall=True\n     DamageType=exploded\n     bIgnoresNanoDefense=True\n     ItemName=\"Baton (Thrown)\"\n     ItemArticle=\"a\"\n     speed=2000.000000\n     Damage=85.000000\n     MomentumTransfer=123456\n     Mesh=LodMesh'DeusExItems.Baton3rd'\n     bUnlit=True\n     bFixedRotationDir=True\n     RotationRate=(Pitch=-149000,Yaw=0)\n}\n",
            "name": "ThrownBaton.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bStickToWall=True",
                    "DamageType=exploded",
                    "bIgnoresNanoDefense=True",
                    "ItemName=\"Baton (Thrown)\"",
                    "ItemArticle=\"a\"",
                    "speed=2000.000000",
                    "Damage=85.000000",
                    "MomentumTransfer=123456",
                    "Mesh=LodMesh'DeusExItems.Baton3rd'",
                    "bUnlit=True",
                    "bFixedRotationDir=True",
                    "RotationRate=(Pitch=-149000,Yaw=0)"
                ],
                "exec": [],
                "extends": "DeusExProjectile",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 18,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "ThrownCombatKnife.uc": {
            "body": "class ThrownCombatknife expands DeusExProjectile;\n\ndefaultproperties\n{\n     bStickToWall=True\n     DamageType=exploded\n     bIgnoresNanoDefense=True\n     ItemName=\"Knife (Thrown)\"\n     ItemArticle=\"a\"\n     speed=2000.000000\n     Damage=85.000000\n     MomentumTransfer=123456\n     Mesh=LodMesh'DeusExItems.CombatKnife3rd'\n     bUnlit=True\n     bFixedRotationDir=True\n     RotationRate=(Pitch=-149000,Yaw=0)\n}\n",
            "name": "ThrownCombatKnife.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bStickToWall=True",
                    "DamageType=exploded",
                    "bIgnoresNanoDefense=True",
                    "ItemName=\"Knife (Thrown)\"",
                    "ItemArticle=\"a\"",
                    "speed=2000.000000",
                    "Damage=85.000000",
                    "MomentumTransfer=123456",
                    "Mesh=LodMesh'DeusExItems.CombatKnife3rd'",
                    "bUnlit=True",
                    "bFixedRotationDir=True",
                    "RotationRate=(Pitch=-149000,Yaw=0)"
                ],
                "exec": [],
                "extends": "DeusExProjectile",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 18,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "ThrownCrowbar.uc": {
            "body": "class ThrownCrowbar expands DeusExProjectile;\n\ndefaultproperties\n{\n     bStickToWall=True\n     DamageType=exploded\n     bIgnoresNanoDefense=True\n     ItemName=\"Crowbar (Thrown)\"\n     ItemArticle=\"a\"\n     speed=2000.000000\n     Damage=100.000000\n     MomentumTransfer=123456\n     Mesh=LodMesh'DeusExItems.Crowbar3rd'\n     bUnlit=True\n     bFixedRotationDir=True\n     RotationRate=(Pitch=-149000,Yaw=0)\n}\n",
            "name": "ThrownCrowbar.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bStickToWall=True",
                    "DamageType=exploded",
                    "bIgnoresNanoDefense=True",
                    "ItemName=\"Crowbar (Thrown)\"",
                    "ItemArticle=\"a\"",
                    "speed=2000.000000",
                    "Damage=100.000000",
                    "MomentumTransfer=123456",
                    "Mesh=LodMesh'DeusExItems.Crowbar3rd'",
                    "bUnlit=True",
                    "bFixedRotationDir=True",
                    "RotationRate=(Pitch=-149000,Yaw=0)"
                ],
                "exec": [],
                "extends": "DeusExProjectile",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 18,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "ThrownNanosword.uc": {
            "body": "class ThrownNanosword expands DeusExProjectile;\n\ndefaultproperties\n{\n     bStickToWall=True\n     DamageType=exploded\n     bIgnoresNanoDefense=True\n     ItemName=\"Dragon's tooth sword (Thrown)\"\n     ItemArticle=\"a\"\n     speed=2000.000000\n     Damage=200.000000\n     MomentumTransfer=123456\n     Mesh=LodMesh'DeusExItems.NanoSword3rd'\n     bUnlit=True\n     bFixedRotationDir=True\n     RotationRate=(Pitch=-149000,Yaw=0)\n}\n",
            "name": "ThrownNanosword.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bStickToWall=True",
                    "DamageType=exploded",
                    "bIgnoresNanoDefense=True",
                    "ItemName=\"Dragon's tooth sword (Thrown)\"",
                    "ItemArticle=\"a\"",
                    "speed=2000.000000",
                    "Damage=200.000000",
                    "MomentumTransfer=123456",
                    "Mesh=LodMesh'DeusExItems.NanoSword3rd'",
                    "bUnlit=True",
                    "bFixedRotationDir=True",
                    "RotationRate=(Pitch=-149000,Yaw=0)"
                ],
                "exec": [],
                "extends": "DeusExProjectile",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 18,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "ThrownSword.uc": {
            "body": "class Thrownsword expands DeusExProjectile;\n\ndefaultproperties\n{\n     bStickToWall=True\n     DamageType=exploded\n     bIgnoresNanoDefense=True\n     ItemName=\"Sword (Thrown)\"\n     ItemArticle=\"a\"\n     speed=2000.000000\n     Damage=100.000000\n     MomentumTransfer=123456\n     Mesh=LodMesh'DeusExItems.Sword3rd'\n     bUnlit=True\n     bFixedRotationDir=True\n     RotationRate=(Pitch=-149000,Yaw=0)\n}\n",
            "name": "ThrownSword.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bStickToWall=True",
                    "DamageType=exploded",
                    "bIgnoresNanoDefense=True",
                    "ItemName=\"Sword (Thrown)\"",
                    "ItemArticle=\"a\"",
                    "speed=2000.000000",
                    "Damage=100.000000",
                    "MomentumTransfer=123456",
                    "Mesh=LodMesh'DeusExItems.Sword3rd'",
                    "bUnlit=True",
                    "bFixedRotationDir=True",
                    "RotationRate=(Pitch=-149000,Yaw=0)"
                ],
                "exec": [],
                "extends": "DeusExProjectile",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 18,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "ToolRadar.uc": {
            "body": "Class ToolRadar extends DeusExDecoration;\n\nvar bool bEnabled;\nvar(Sounds) sound BeepActive, BeepPassive;\nvar bool bDebug;\nvar int Waittime;\nvar deusexplayer myOwner;\n\nfunction PostBeginplay()\n{\n\tSetTimer(1,False);\n}\n\nfunction Bump( actor Other )\n{\n}\n\nfunction BlowIt()\n{\n\tlocal SphereEffect sphere;\n\tlocal ScorchMark s;\n\tlocal ExplosionLight light;\n\tlocal int i;\n\tlocal float explosionDamage;\n\tlocal float explosionRadius;\n\n\texplosionDamage = 200;\n\texplosionRadius = 300;\n\n\t// alert NPCs that I'm exploding\n\tAISendEvent('LoudNoise', EAITYPE_Audio, , explosionRadius*16);\n\tPlaySound(Sound'LargeExplosion1', SLOT_None,,, explosionRadius*16);\n\n\t// draw a pretty explosion\n\tlight = Spawn(class'ExplosionLight',,, Location);\n\tif (light != None)\n\t\tlight.size = 4;\n\n\tSpawn(class'ExplosionSmall',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionLarge',,, Location + 2*VRand()*CollisionRadius);\n\n\tsphere = Spawn(class'SphereEffect',,, Location);\n\tif (sphere != None)\n\t\tsphere.size = explosionRadius / 32.0;\n\n\t// spawn a mark\n\ts = spawn(class'ScorchMark', Base,, Location-vect(0,0,1)*CollisionHeight, Rotation+rot(16384,0,0));\n\tif (s != None)\n\t{\n\t\ts.DrawScale = FClamp(explosionDamage/30, 0.1, 3.0);\n\t\ts.ReattachDecal();\n\t}\n\n\t// spawn some rocks and flesh fragments\n\tfor (i=0; i<explosionDamage/6; i++)\n\t{\n\t\tif (FRand() < 0.3)\n\t\t\tspawn(class'Rockchip',,,Location);\n\t\telse\n\t\t\tspawn(class'metalFragment',,,Location);\n\t}\n\tHurtRadius(explosionDamage, explosionRadius, 'Exploded', explosionDamage*100, Location);\n\tDestroy();\n}\n\nfunction Timer()\n{\n\tlocal int range;\n\tlocal DeusExPlayer player;\n\tlocal SphereEffect SE;\n\t\n\t\trange=0;\n\t\tforeach RadiusActors(class'DeusExPlayer', player, 350, Location)\n\t\t{\n\t\t\tif (player != None )\n\t\t\t\trange=2;\t\t\n\t\t}\n\t\t\n\t\tforeach RadiusActors(class'DeusExPlayer', player, 1000, Location)\n\t\t{\n\t\t\tif (player != None && range != 2)\n\t\t\t\trange=1;\t\t\n\t\t}\n\t\t\n\t\t\n\tif(bEnabled && Range==0)\n\t{\n\t\tSetTimer(1,False);\n\t}\n\tif(bEnabled && Range==2)\n\t{\n\t\tPlaySound(BeepActive, SLOT_None,200,, 255);\n\t\tSetTimer(0.5,False);\n\t}\n\tif(bEnabled && Range==1)\n\t{\n\t\tPlaySound(BeepActive, SLOT_None,200,, 255);\n\t\tSetTimer(1.3,False);\n\t}\n\n\t\n\tif(bDebug)\n\t{\n\tBroadcastMessage(\"Range\"@Range);\n\t}\n}\n\ndefaultproperties\n{\n     bEnabled=True\n     BeepActive=Sound'DeusExSounds.Generic.TurretSwitch'\n     bCanBeBase=True\n     ItemName=\"Radar\"\n     Mesh=LodMesh'DeusExDeco.AcousticSensor'\n     CollisionRadius=24.400000\n     CollisionHeight=23.059999\n     Mass=10.000000\n}\n",
            "name": "ToolRadar.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bEnabled=True",
                    "BeepActive=Sound'DeusExSounds.Generic.TurretSwitch'",
                    "bCanBeBase=True",
                    "ItemName=\"Radar\"",
                    "Mesh=LodMesh'DeusExDeco.AcousticSensor'",
                    "CollisionRadius=24.400000",
                    "CollisionHeight=23.059999",
                    "Mass=10.000000"
                ],
                "exec": [],
                "extends": "DeusExDecoration",
                "functions": {
                    "BlowIt": {
                        "body": "{\n\n\texplosionDamage = 200;\n\texplosionRadius = 300;\n\n\t// alert NPCs that I'm exploding\n\tAISendEvent('LoudNoise', EAITYPE_Audio, , explosionRadius*16);\n\tPlaySound(Sound'LargeExplosion1', SLOT_None,,, explosionRadius*16);\n\n\t// draw a pretty explosion\n\tlight = Spawn(class'ExplosionLight',,, Location);\n\tif (light != None)\n\t\tlight.size = 4;\n\n\tSpawn(class'ExplosionSmall',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionLarge',,, Location + 2*VRand()*CollisionRadius);\n\n\tsphere = Spawn(class'SphereEffect',,, Location);\n\tif (sphere != None)\n\t\tsphere.size = explosionRadius / 32.0;\n\n\t// spawn a mark\n\ts = spawn(class'ScorchMark', Base,, Location-vect(0,0,1)*CollisionHeight, Rotation+rot(16384,0,0));\n\tif (s != None)\n\t{\n\t\ts.DrawScale = FClamp(explosionDamage/30, 0.1, 3.0);\n\t\ts.ReattachDecal();\n\t}\n\n\t// spawn some rocks and flesh fragments\n\tfor (i=0; i<explosionDamage/6; i++)\n\t{\n\t\tif (FRand() < 0.3)\n\t\t\tspawn(class'Rockchip',,,Location);\n\t\telse\n\t\t\tspawn(class'metalFragment',,,Location);\n\t}\n\tHurtRadius(explosionDamage, explosionRadius, 'Exploded', explosionDamage*100, Location);\n\tDestroy();\n}",
                        "locals": [
                            "local SphereEffect sphere;",
                            "local ScorchMark s;",
                            "local ExplosionLight light;",
                            "local int i;",
                            "local float explosionDamage;",
                            "local float explosionRadius;"
                        ],
                        "modifiers": [],
                        "name": "BlowIt",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Bump": {
                        "body": "{\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Bump",
                        "native": false,
                        "param": [
                            [
                                "actor",
                                "Other"
                            ]
                        ],
                        "return": ""
                    },
                    "PostBeginplay": {
                        "body": "{\n\tSetTimer(1,False);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PostBeginplay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\t\n\t\trange=0;\n\t\tforeach RadiusActors(class'DeusExPlayer', player, 350, Location)\n\t\t{\n\t\t\tif (player != None )\n\t\t\t\trange=2;\t\t\n\t\t}\n\t\t\n\t\tforeach RadiusActors(class'DeusExPlayer', player, 1000, Location)\n\t\t{\n\t\t\tif (player != None && range != 2)\n\t\t\t\trange=1;\t\t\n\t\t}\n\t\t\n\t\t\n\tif(bEnabled && Range==0)\n\t{\n\t\tSetTimer(1,False);\n\t}\n\tif(bEnabled && Range==2)\n\t{\n\t\tPlaySound(BeepActive, SLOT_None,200,, 255);\n\t\tSetTimer(0.5,False);\n\t}\n\tif(bEnabled && Range==1)\n\t{\n\t\tPlaySound(BeepActive, SLOT_None,200,, 255);\n\t\tSetTimer(1.3,False);\n\t}\n\n\t\n\tif(bDebug)\n\t{\n\tBroadcastMessage(\"Range\"@Range);\n\t}\n}",
                        "locals": [
                            "local int range;",
                            "local DeusExPlayer player;",
                            "local SphereEffect SE;"
                        ],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 121,
                "replication": "",
                "states": [],
                "variables": [
                    "var bool bEnabled;",
                    "var(Sounds) sound BeepActive, BeepPassive;",
                    "var bool bDebug;",
                    "var int Waittime;",
                    "var deusexplayer myOwner;"
                ]
            }
        },
        "ToolRadarD.uc": {
            "body": "//=============================================================================\n// WeaponStealthPistol.\n//=============================================================================\nclass ToolRadarD extends DeusExWeapon;\n\nvar int Modes;\nvar RadarDrone LinkedDrone;\nvar RaidActor RA;\nvar bool bArmedNuclear;\nvar int DroneAmmo, rDroneammo;\nvar bool bStoredDrone;\nvar bool bStorageMode, bRepStorageMode;\nvar bool bViewing;\n\nreplication\n{\nreliable if (bNetOwner && Role==ROLE_Authority)\nLinkedDrone, DroneAmmo, bRepstoragemode;\n}\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t\tReloadCount = mpReloadCount;\n\t}\n}\n\nfunction PostBeginPlay()\n{\n\t\tlocal RadarDrone DR;\n\n\t\tforeach AllActors(class'RadarDrone', DR)\n\t\t\tif(DR.myOwner == DeusExPlayer(Owner))\n\t\t\t\tLinkedDrone = DR;\n\t\t\t\t\n\t\tif(LinkedDrone != None)\n\t\t\tDroneAmmo = LinkedDrone.Rocketsremain;\n}\n\nfunction ProcessTraceHit(Actor Other, Vector HitLocation, Vector HitNormal, Vector X, Vector Y, Vector Z)\n{\nlocal RadarDrone RD;\nlocal RocketDrone Rock;\nlocal rotator testRot;\n\n\tif(Other.isa('RadarDrone') && RadarDrone(Other).myOwner == DeusExPlayer(Owner))\n\t{\n\t\tif(bStorageMode)\n\t\t{\n\t\t\tbStoredDrone=True;\n\t\t\tDeusExPlayer(Owner).ClientMessage(\"Drone stored in gun.\");\n\t\t\tOther.Destroy();\n\t\t\treturn;\n\t\t}\n\t\tif(RadarDrone(Other).pOrders == 0)\n\t\t{\n\t\t\tRadarDrone(Other).pOrders=1;\n\t\t\tRadarDrone(Other).bSilence = True;\n\t\t\tRadarDrone(Other).GotoState('Following');\n\t\t\tRadarDrone(Other).myOwner.ClientMessage(\"RADAR Drone: Setting new orders, \"$RadarDrone(Other).myOwner.PlayerReplicationinfo.PlayerName$\", loading Follow/Silent.\", 'Teamsay');\n\t\t\treturn;\n\t\t}\n\t\tif(RadarDrone(Other).pOrders == 1)\n\t\t{\n\t\t\tRadarDrone(Other).pOrders=2;\n\t\t\tRadarDrone(Other).bSilence = False;\n\t\t\tRadarDrone(Other).GotoState('Waiting');\n\t\t\tRadarDrone(Other).myOwner.ClientMessage(\"RADAR Drone: Setting new orders, \"$RadarDrone(Other).myOwner.PlayerReplicationinfo.PlayerName$\", loading Stationary/Radar.\", 'Teamsay');\n\t\t\treturn;\n\t\t}\n\t\tif(RadarDrone(Other).pOrders == 2)\n\t\t{\n\t\t\tRadarDrone(Other).pOrders=3;\n\t\t\tRadarDrone(Other).bSilence = True;\n\t\t\tRadarDrone(Other).GotoState('Waiting');\n\t\t\tRadarDrone(Other).myOwner.ClientMessage(\"RADAR Drone: Setting new orders, \"$RadarDrone(Other).myOwner.PlayerReplicationinfo.PlayerName$\", loading Stationary/Silent.\", 'Teamsay');\n\t\t\treturn;\n\t\t}\t\n\t\tif(RadarDrone(Other).pOrders == 3)\n\t\t{\n\t\t\tRadarDrone(Other).pOrders=0;\n\t\t\tRadarDrone(Other).bSilence = False;\n\t\t\tRadarDrone(Other).GotoState('Following');\n\t\t\tRadarDrone(Other).myOwner.ClientMessage(\"RADAR Drone: Setting new orders, \"$RadarDrone(Other).myOwner.PlayerReplicationinfo.PlayerName$\", loading Follow/Radar.\", 'Teamsay');\n\t\t\treturn;\n\t\t}\t\n\t}\n\telse\n\t{\n\t\tForeach AllActors(class'RadarDrone',RD)\n\t\t{\n\t\t\tif(RD.myOwner == DeusExPlayer(Owner))\n\t\t\t{\n\t\t\t\t\n\t\t\t\tif(Other != None)\n\t\t\t\t{\t\t\t\t\t\n\t\t\t\t\tif(RD.RocketsRemain > 0)\n\t\t\t\t\t{\n\t\t\t\t\tRA = Spawn(class'RaidActor',,, HitLocation);\n\t\t\t\t\tRD.LookAtActor(RA, true, true, true, 0, 0.1);\n\t\t\t\t\ttestRot = rotator(RA.Location - RD.Location);\n\t\t\t\t\tRock = Spawn(class'RocketDrone',Pawn(Owner),,RD.Location + (RD.CollisionRadius+Default.CollisionRadius+5) * Vector(RD.Rotation) + vect(0,0,1) * 2,testRot);\n\t\t\t\t\tRA.Destroy();\n\t\t\t\t\tRD.RocketsRemain--;\n\t\t\t\t\tDroneAmmo = RD.RocketsRemain;\n\t\t\t\t\t//DeusExPlayer(Owner).ClientMessage(RD.RocketsRemain$\" ammo remaining in Drone.\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nsimulated function RenderOverlays(canvas Canvas)\n{\n\tlocal DeusExPlayer P;\n\tlocal Pawn CrosshairTarget;\n\tlocal float Scale, Accuracy, Dist;\n\tlocal vector HitLocation, HitNormal, StartTrace, EndTrace, X,Y,Z;\n\tlocal String KeyName, Alias, curKeyName;\n\tlocal int i;\n\tSuper.RenderOverlays(Canvas);\n\tP = DeusExPlayer(Owner);\n\tif ( P != None ) \n\t{\t\n\t\tGetAxes(Pawn(Owner).ViewRotation,X,Y,Z);\t\n\t\tStartTrace = ComputeProjectileStart(X, Y, Z);\n\t\tAdjustedAim = P.AdjustAim(1000000, StartTrace, 2*AimError, False, False);\n\t\tEndTrace = StartTrace + Accuracy * (FRand()-0.5)*Y*1000 + Accuracy * (FRand()-0.5)*Z*1000 ;\t\n\t\tEndTrace += (FMax(1024.0, MaxRange) * Vector(AdjustedAim));\n\t//\trDroneAmmo = DroneAmmo;\n\t\t\t\tbOwnsCrossHair = True; \n\t\t\t\tScale = Canvas.ClipX/640;\n\t\t\t\tCanvas.SetPos(0.5 * Canvas.ClipX - 16 * Scale, 0.5 * Canvas.ClipY - 16 * Scale );\n\t\t\t\t//Canvas.Style = ERenderStyle.STY_Translucent;\n\t\t\t\tCanvas.DrawColor.R = 0;\n\t\t\t\tCanvas.DrawColor.G = Rand(128);\n\t\t\t\tCanvas.DrawColor.B = Rand(128);\n\t\t\t\tCanvas.Font = Canvas.SmallFont;\n\n\t\t\t\tcurKeyName = \"\";\n\t\t\t\tfor ( i=0; i<255; i++ )\n\t\t\t\t{\n\t\t\t\t\tKeyName = Owner.ConsoleCommand ( \"KEYNAME \"$i );\n\t\t\t\t\tif ( KeyName != \"\" )\n\t\t\t\t\t{\n\t\t\t\t\t\tAlias = Owner.ConsoleCommand( \"KEYBINDING \"$KeyName );\n\t\t\t\t\t\tif ( Alias ~= \"ToggleScope\" )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurKeyName = KeyName;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ( curKeyName ~= \"\" )\n\t\t\t\t\tcurKeyName = \"NONE\";\n\t\t\n\t\t\t\tif(LinkedDrone != None)\n\t\t\t\t\tCanvas.DrawText(\"      Ammo: \"$DroneAmmo$\" - Health: \"$LinkedDrone.Health$\" - Storage: \"@LinkedDrone.iv);\n\t\t\t\telse if(bRepstoragemode)\n\t\t\t\t\tCanvas.DrawText(\"      Drone stored. (\"$curKeyName$\")\");\n\t\t\t\telse\n\t\t\t\t\tCanvas.DrawText(\"      ERROR: NO DRONE\");\n\n\t\t\t}\n\t\t\telse\n\t\t\t\tbOwnsCrossHair = False; // Only for compatibility with HDX50\t\t\n}\n\nsimulated function float CalculateAccuracy()\n{\n\treturn 0.000000; //Dirty hack to always return dead on accuracy.\n}\n\nstate NormalFire //(Thanks to JimBowen for this Infinite ammo code) \n{ \n   Begin: \n      if ((ClipCount >= ReloadCount) && (ReloadCount != 0)) \n      { \n         if (!bAutomatic) \n         { \n            bFiring = False; \n            FinishAnim(); \n         } \n    \n         if (Owner != None) \n         { \n            if (Owner.IsA('DeusExPlayer')) \n            { \n               bFiring = False; \n            } \n            else if (Owner.IsA('ScriptedPawn')) \n            { \n               bFiring = False; \n               ReloadAmmo(); \n            } \n         } \n         else \n         { \n            if (bHasMuzzleFlash) \n               EraseMuzzleFlashTexture(); \n            GotoState('Idle'); \n         } \n      } \n      if ( bAutomatic && (( Level.NetMode == NM_DedicatedServer ) || ((Level.NetMode == NM_ListenServer) && Owner.IsA('DeusExPlayer') && !DeusExPlayer(Owner).PlayerIsListenClient()))) \n         GotoState('Idle'); \n    \n      Sleep(GetShotTime()); \n      if (bAutomatic) \n      { \n         GenerateBullet();       // In multiplayer bullets are generated by the client which will let the server know when \n         Goto('Begin'); \n      } \n      bFiring = False; \n      FinishAnim();  \n      ReadyToFire(); \n   Done: \n      bFiring = False; \n      Finish(); \n}\n\nsimulated function lasertoggle()\n{\n\tRecreation();\n}\n\nfunction Recreation()\n{\n//local ToolRadar RT;\nlocal RadarDrone RD, RDb;\nlocal int ii;\nlocal DeusExPlayer hax;\nlocal int oldrockets;\nlocal string oldiv;\nlocal inventory oldstoredinv;\n\tlocal vector loc, line, HitLocation, hitNormal;\n\tlocal int oldOrders;\n\t\n\tforeach AllActors(class'RadarDrone',RD)\n\t{\n\t\tif(RD.myOwner == DeusExPlayer(Owner))\n\t\t{\n\t\tSpawn(class'SphereEffect',,, RD.Location);\t\t\n\t\tRD.SetLocation(DeusExPlayer(Owner).Location + (DeusExPlayer(Owner).CollisionRadius+Default.CollisionRadius+30) * Vector(DeusExPlayer(Owner).ViewRotation) + vect(0,0,1) * 30 );\n\t\tSpawn(class'SphereEffect',,, RD.Location);\n\t\t}\n\t}\n}\n\nfunction Recreationxredacted()\n{\n//local ToolRadar RT;\nlocal RadarDrone RD, RDb;\nlocal int ii;\nlocal DeusExPlayer hax;\nlocal int oldrockets;\nlocal string oldiv;\nlocal inventory oldstoredinv;\n\tlocal vector loc, line, HitLocation, hitNormal;\n\tlocal int oldOrders;\n\tforeach AllActors(class'RadarDrone',RD)\n\t{\n\t\tif(RD.myOwner == DeusExPlayer(Owner))\n\t\t{\n\t\tSpawn(class'SphereEffect',,, RD.Location);\n\t\thax = RD.myOwner;\n\t\toldrockets = RD.RocketsRemain;\n\t\toldOrders = RD.pOrders;\n\t\toldiv = RD.iv;\n\t\t//oldstoredinv = RD.storedinv;\n\t\tRD.Destroy();\n\t\t\n\t\tRDb = Spawn(Class'RadarDrone',,,DeusExPlayer(Owner).Location + (DeusExPlayer(Owner).CollisionRadius+Default.CollisionRadius+30) * Vector(DeusExPlayer(Owner).ViewRotation) + vect(0,0,1) * 30 );\n\t\tRDb.myOwner = hax;\n\t\tRDb.iv = oldiv;\n\t\t//rdb.storedinv = oldstoredinv;\n\t\t//rdm.oldstoredinv\n\t\tRDb.RocketsRemain = oldrockets;\n\t\tRDb.GotoState('following');\n\t\tRDb.myOwner.ClientMessage(\"RADAR Drone: Recreated at your location.\", 'Teamsay');\n\t\tRDb.SetTimer(1,False);\n\t\tRDb.pOrders = oldOrders;\n\t\tLinkedDrone = RDb;\n\t\t\tif(oldOrders == 0)\n\t\t\t{\n\t\t\t\tRDb.bSilence = False;\n\t\t\t\tRDb.GotoState('Following');\n\t\t\t}\n\t\t\tif(oldOrders == 1)\n\t\t\t{\n\t\t\t\tRDb.bSilence = True;\n\t\t\t\tRDb.GotoState('Following');\n\t\t\t}\n\t\t\tif(oldOrders == 2)\n\t\t\t{\n\t\t\t\tRDb.bSilence = False;\n\t\t\t\tRDb.GotoState('Waiting');\n\t\t\t}\n\t\t\tif(oldOrders == 3)\n\t\t\t{\n\t\t\t\tRDb.bSilence = True;\n\t\t\t\tRDb.GotoState('Waiting');\n\t\t\t}\n\t\t\t\n\t\t\tif(bViewing)\n\t\t\t{\n\t\t\t\tHax.ViewTarget = RDb;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tHax.ViewTarget = None;\n\t\t\t}\n\t\treturn;\n\t\t}\n\t}\n}\n\nsimulated function scopetoggle()\n{\nlocal RadarDrone RD;\nlocal class<actor> NewClass;\nlocal rotator testRot;\n\tif(bStoredDrone)\n\t{\n\tRD = Spawn(class'RadarDrone',Pawn(Owner),,Pawn(Owner).Location,Pawn(Owner).ViewRotation);\n\tRD.myOwner = DeusExPlayer(Owner);\n\t\tRD.GotoState('following');\n\t\tRD.myOwner.ClientMessage(\"RADAR Drone: Recreated at your location.\", 'Teamsay');\n\t\tRD.SetTimer(1,False);\n\t\tLinkedDrone=RD;\n\tbStoredDrone=False;\n\tbRepstoragemode=False;\n\t}\n\telse\n\t{\n\t\tforeach AllActors(class'RadarDrone',RD)\n\t\t\tif(RD.myOwner == DeusExPlayer(Owner))\n\t\t\t{\n\t\t\t\tRD.Destroy();\n\t\t\t\tbStoredDrone=True;\n\t\t\t\tbRepstoragemode=True;\n\t\t\t}\n\t\t\t\t\n\t}\n}\n\nfunction CycleAmmo()\n{\n\tbViewing = !bViewing;\n\t\n\tif(bViewing)\n\t\tLockPlayerCam(DeusExPlayer(Owner));\n\telse\n\t\tUnLockPlayerCam(DeusExPlayer(Owner));\n}\n\nfunction LockPlayerCam(deusexplayer dxp)\n{\nlocal RadarDrone RD;\n\t\t\tdxp.bBehindView=True;\n\t\t\t\n\t\tForeach AllActors(class'RadarDrone',RD)\n\t\t{\n\t\t\tif(RD.myOwner == DeusExPlayer(Owner))\n\t\t\t{\n\t\t\t\t\n\t\t\t\tif(RD != None)\n\t\t\t\t{\t\t\t\n\t\t\t\t\tdxp.ViewTarget = RD;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n}\n\nfunction UnLockPlayerCam(deusexplayer dxp)\n{\n\t\t\tdxp.bBehindView=False;\n\t\t\tdxp.ViewTarget = None;\n}\n\ndefaultproperties\n{\n     DroneAmmo=30\n     GoverningSkill=Class'DeusEx.SkillWeaponPistol'\n     NoiseLevel=0.010000\n     ShotTime=0.150000\n     reloadTime=1.500000\n     HitDamage=0\n     maxRange=4800\n     AccurateRange=2400\n     BaseAccuracy=0.800000\n     bCanHaveScope=True\n     ScopeFOV=25\n     bCanHaveLaser=True\n     recoilStrength=0.100000\n     mpBaseAccuracy=0.200000\n     mpAccurateRange=120000\n     mpMaxRange=120000\n     bCanHaveModBaseAccuracy=True\n     bCanHaveModReloadCount=True\n     bCanHaveModAccurateRange=True\n     bCanHaveModReloadTime=True\n     bInstantHit=True\n     FireOffset=(X=-24.000000,Y=10.000000,Z=14.000000)\n     shakemag=50.000000\n     FireSound=Sound'DeusExSounds.Weapons.StealthPistolFire'\n     AltFireSound=Sound'DeusExSounds.Weapons.StealthPistolReloadEnd'\n     CockingSound=Sound'DeusExSounds.Weapons.StealthPistolReload'\n     SelectSound=Sound'DeusExSounds.Weapons.StealthPistolSelect'\n     InventoryGroup=239\n     ItemName=\"Radar Drone Controller\"\n     PlayerViewOffset=(X=24.000000,Y=-10.000000,Z=-14.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.StealthPistol'\n     PickupViewMesh=LodMesh'DeusExItems.StealthPistolPickup'\n     ThirdPersonMesh=LodMesh'DeusExItems.StealthPistol3rd'\n     Icon=Texture'DeusExUI.Icons.BeltIconStealthPistol'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconStealthPistol'\n     largeIconWidth=47\n     largeIconHeight=37\n     Description=\"The stealth pistol is a variant of the standard 10mm pistol with a larger clip and integrated silencer designed for wet work at very close ranges.\"\n     beltDescription=\"DRONE\"\n     Mesh=LodMesh'DeusExItems.StealthPistolPickup'\n     CollisionRadius=8.000000\n     CollisionHeight=0.800000\n}\n",
            "name": "ToolRadarD.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "DroneAmmo=30",
                    "GoverningSkill=Class'DeusEx.SkillWeaponPistol'",
                    "NoiseLevel=0.010000",
                    "ShotTime=0.150000",
                    "reloadTime=1.500000",
                    "HitDamage=0",
                    "maxRange=4800",
                    "AccurateRange=2400",
                    "BaseAccuracy=0.800000",
                    "bCanHaveScope=True",
                    "ScopeFOV=25",
                    "bCanHaveLaser=True",
                    "recoilStrength=0.100000",
                    "mpBaseAccuracy=0.200000",
                    "mpAccurateRange=120000",
                    "mpMaxRange=120000",
                    "bCanHaveModBaseAccuracy=True",
                    "bCanHaveModReloadCount=True",
                    "bCanHaveModAccurateRange=True",
                    "bCanHaveModReloadTime=True",
                    "bInstantHit=True",
                    "FireOffset=(X=-24.000000,Y=10.000000,Z=14.000000)",
                    "shakemag=50.000000",
                    "FireSound=Sound'DeusExSounds.Weapons.StealthPistolFire'",
                    "AltFireSound=Sound'DeusExSounds.Weapons.StealthPistolReloadEnd'",
                    "CockingSound=Sound'DeusExSounds.Weapons.StealthPistolReload'",
                    "SelectSound=Sound'DeusExSounds.Weapons.StealthPistolSelect'",
                    "InventoryGroup=239",
                    "ItemName=\"Radar Drone Controller\"",
                    "PlayerViewOffset=(X=24.000000,Y=-10.000000,Z=-14.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.StealthPistol'",
                    "PickupViewMesh=LodMesh'DeusExItems.StealthPistolPickup'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.StealthPistol3rd'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconStealthPistol'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconStealthPistol'",
                    "largeIconWidth=47",
                    "largeIconHeight=37",
                    "Description=\"The stealth pistol is a variant of the standard 10mm pistol with a larger clip and integrated silencer designed for wet work at very close ranges.\"",
                    "beltDescription=\"DRONE\"",
                    "Mesh=LodMesh'DeusExItems.StealthPistolPickup'",
                    "CollisionRadius=8.000000",
                    "CollisionHeight=0.800000"
                ],
                "exec": [],
                "extends": "DeusExWeapon",
                "functions": {
                    "CalculateAccuracy": {
                        "body": "{\n\treturn 0.000000; //Dirty hack to always return dead on accuracy.\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "CalculateAccuracy",
                        "native": false,
                        "param": [],
                        "return": "float"
                    },
                    "CycleAmmo": {
                        "body": "{\n\tbViewing = !bViewing;\n\t\n\tif(bViewing)\n\t\tLockPlayerCam(DeusExPlayer(Owner));\n\telse\n\t\tUnLockPlayerCam(DeusExPlayer(Owner));\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "CycleAmmo",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "LockPlayerCam": {
                        "body": "{\n\t\t\tdxp.bBehindView=True;\n\t\t\t\n\t\tForeach AllActors(class'RadarDrone',RD)\n\t\t{\n\t\t\tif(RD.myOwner == DeusExPlayer(Owner))\n\t\t\t{\n\t\t\t\t\n\t\t\t\tif(RD != None)\n\t\t\t\t{\t\t\t\n\t\t\t\t\tdxp.ViewTarget = RD;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n}",
                        "locals": [
                            "local RadarDrone RD;"
                        ],
                        "modifiers": [],
                        "name": "LockPlayerCam",
                        "native": false,
                        "param": [
                            [
                                "deusexplayer",
                                "dxp"
                            ]
                        ],
                        "return": ""
                    },
                    "PostBeginPlay": {
                        "body": "{\n\n\t\tforeach AllActors(class'RadarDrone', DR)\n\t\t\tif(DR.myOwner == DeusExPlayer(Owner))\n\t\t\t\tLinkedDrone = DR;\n\t\t\t\t\n\t\tif(LinkedDrone != None)\n\t\t\tDroneAmmo = LinkedDrone.Rocketsremain;\n}",
                        "locals": [
                            "local RadarDrone DR;"
                        ],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t\tReloadCount = mpReloadCount;\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ProcessTraceHit": {
                        "body": "{\n\n\tif(Other.isa('RadarDrone') && RadarDrone(Other).myOwner == DeusExPlayer(Owner))\n\t{\n\t\tif(bStorageMode)\n\t\t{\n\t\t\tbStoredDrone=True;\n\t\t\tDeusExPlayer(Owner).ClientMessage(\"Drone stored in gun.\");\n\t\t\tOther.Destroy();\n\t\t\treturn;\n\t\t}\n\t\tif(RadarDrone(Other).pOrders == 0)\n\t\t{\n\t\t\tRadarDrone(Other).pOrders=1;\n\t\t\tRadarDrone(Other).bSilence = True;\n\t\t\tRadarDrone(Other).GotoState('Following');\n\t\t\tRadarDrone(Other).myOwner.ClientMessage(\"RADAR Drone: Setting new orders, \"$RadarDrone(Other).myOwner.PlayerReplicationinfo.PlayerName$\", loading Follow/Silent.\", 'Teamsay');\n\t\t\treturn;\n\t\t}\n\t\tif(RadarDrone(Other).pOrders == 1)\n\t\t{\n\t\t\tRadarDrone(Other).pOrders=2;\n\t\t\tRadarDrone(Other).bSilence = False;\n\t\t\tRadarDrone(Other).GotoState('Waiting');\n\t\t\tRadarDrone(Other).myOwner.ClientMessage(\"RADAR Drone: Setting new orders, \"$RadarDrone(Other).myOwner.PlayerReplicationinfo.PlayerName$\", loading Stationary/Radar.\", 'Teamsay');\n\t\t\treturn;\n\t\t}\n\t\tif(RadarDrone(Other).pOrders == 2)\n\t\t{\n\t\t\tRadarDrone(Other).pOrders=3;\n\t\t\tRadarDrone(Other).bSilence = True;\n\t\t\tRadarDrone(Other).GotoState('Waiting');\n\t\t\tRadarDrone(Other).myOwner.ClientMessage(\"RADAR Drone: Setting new orders, \"$RadarDrone(Other).myOwner.PlayerReplicationinfo.PlayerName$\", loading Stationary/Silent.\", 'Teamsay');\n\t\t\treturn;\n\t\t}\t\n\t\tif(RadarDrone(Other).pOrders == 3)\n\t\t{\n\t\t\tRadarDrone(Other).pOrders=0;\n\t\t\tRadarDrone(Other).bSilence = False;\n\t\t\tRadarDrone(Other).GotoState('Following');\n\t\t\tRadarDrone(Other).myOwner.ClientMessage(\"RADAR Drone: Setting new orders, \"$RadarDrone(Other).myOwner.PlayerReplicationinfo.PlayerName$\", loading Follow/Radar.\", 'Teamsay');\n\t\t\treturn;\n\t\t}\t\n\t}\n\telse\n\t{\n\t\tForeach AllActors(class'RadarDrone',RD)\n\t\t{\n\t\t\tif(RD.myOwner == DeusExPlayer(Owner))\n\t\t\t{\n\t\t\t\t\n\t\t\t\tif(Other != None)\n\t\t\t\t{\t\t\t\t\t\n\t\t\t\t\tif(RD.RocketsRemain > 0)\n\t\t\t\t\t{\n\t\t\t\t\tRA = Spawn(class'RaidActor',,, HitLocation);\n\t\t\t\t\tRD.LookAtActor(RA, true, true, true, 0, 0.1);\n\t\t\t\t\ttestRot = rotator(RA.Location - RD.Location);\n\t\t\t\t\tRock = Spawn(class'RocketDrone',Pawn(Owner),,RD.Location + (RD.CollisionRadius+Default.CollisionRadius+5) * Vector(RD.Rotation) + vect(0,0,1) * 2,testRot);\n\t\t\t\t\tRA.Destroy();\n\t\t\t\t\tRD.RocketsRemain--;\n\t\t\t\t\tDroneAmmo = RD.RocketsRemain;\n\t\t\t\t\t//DeusExPlayer(Owner).ClientMessage(RD.RocketsRemain$\" ammo remaining in Drone.\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}",
                        "locals": [
                            "local RadarDrone RD;",
                            "local RocketDrone Rock;",
                            "local rotator testRot;"
                        ],
                        "modifiers": [],
                        "name": "ProcessTraceHit",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Other"
                            ],
                            [
                                "Vector",
                                "HitLocation"
                            ],
                            [
                                "Vector",
                                "HitNormal"
                            ],
                            [
                                "Vector",
                                "X"
                            ],
                            [
                                "Vector",
                                "Y"
                            ],
                            [
                                "Vector",
                                "Z"
                            ]
                        ],
                        "return": ""
                    },
                    "Recreation": {
                        "body": "{\n//local ToolRadar RT;\n\t\n\tforeach AllActors(class'RadarDrone',RD)\n\t{\n\t\tif(RD.myOwner == DeusExPlayer(Owner))\n\t\t{\n\t\tSpawn(class'SphereEffect',,, RD.Location);\t\t\n\t\tRD.SetLocation(DeusExPlayer(Owner).Location + (DeusExPlayer(Owner).CollisionRadius+Default.CollisionRadius+30) * Vector(DeusExPlayer(Owner).ViewRotation) + vect(0,0,1) * 30 );\n\t\tSpawn(class'SphereEffect',,, RD.Location);\n\t\t}\n\t}\n}",
                        "locals": [
                            "local RadarDrone RD, RDb;",
                            "local int ii;",
                            "local DeusExPlayer hax;",
                            "local int oldrockets;",
                            "local string oldiv;",
                            "local inventory oldstoredinv;",
                            "local vector loc, line, HitLocation, hitNormal;",
                            "local int oldOrders;"
                        ],
                        "modifiers": [],
                        "name": "Recreation",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Recreationxredacted": {
                        "body": "{\n//local ToolRadar RT;\n\tforeach AllActors(class'RadarDrone',RD)\n\t{\n\t\tif(RD.myOwner == DeusExPlayer(Owner))\n\t\t{\n\t\tSpawn(class'SphereEffect',,, RD.Location);\n\t\thax = RD.myOwner;\n\t\toldrockets = RD.RocketsRemain;\n\t\toldOrders = RD.pOrders;\n\t\toldiv = RD.iv;\n\t\t//oldstoredinv = RD.storedinv;\n\t\tRD.Destroy();\n\t\t\n\t\tRDb = Spawn(Class'RadarDrone',,,DeusExPlayer(Owner).Location + (DeusExPlayer(Owner).CollisionRadius+Default.CollisionRadius+30) * Vector(DeusExPlayer(Owner).ViewRotation) + vect(0,0,1) * 30 );\n\t\tRDb.myOwner = hax;\n\t\tRDb.iv = oldiv;\n\t\t//rdb.storedinv = oldstoredinv;\n\t\t//rdm.oldstoredinv\n\t\tRDb.RocketsRemain = oldrockets;\n\t\tRDb.GotoState('following');\n\t\tRDb.myOwner.ClientMessage(\"RADAR Drone: Recreated at your location.\", 'Teamsay');\n\t\tRDb.SetTimer(1,False);\n\t\tRDb.pOrders = oldOrders;\n\t\tLinkedDrone = RDb;\n\t\t\tif(oldOrders == 0)\n\t\t\t{\n\t\t\t\tRDb.bSilence = False;\n\t\t\t\tRDb.GotoState('Following');\n\t\t\t}\n\t\t\tif(oldOrders == 1)\n\t\t\t{\n\t\t\t\tRDb.bSilence = True;\n\t\t\t\tRDb.GotoState('Following');\n\t\t\t}\n\t\t\tif(oldOrders == 2)\n\t\t\t{\n\t\t\t\tRDb.bSilence = False;\n\t\t\t\tRDb.GotoState('Waiting');\n\t\t\t}\n\t\t\tif(oldOrders == 3)\n\t\t\t{\n\t\t\t\tRDb.bSilence = True;\n\t\t\t\tRDb.GotoState('Waiting');\n\t\t\t}\n\t\t\t\n\t\t\tif(bViewing)\n\t\t\t{\n\t\t\t\tHax.ViewTarget = RDb;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tHax.ViewTarget = None;\n\t\t\t}\n\t\treturn;\n\t\t}\n\t}\n}",
                        "locals": [
                            "local RadarDrone RD, RDb;",
                            "local int ii;",
                            "local DeusExPlayer hax;",
                            "local int oldrockets;",
                            "local string oldiv;",
                            "local inventory oldstoredinv;",
                            "local vector loc, line, HitLocation, hitNormal;",
                            "local int oldOrders;"
                        ],
                        "modifiers": [],
                        "name": "Recreationxredacted",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "RenderOverlays": {
                        "body": "{\n\tSuper.RenderOverlays(Canvas);\n\tP = DeusExPlayer(Owner);\n\tif ( P != None ) \n\t{\t\n\t\tGetAxes(Pawn(Owner).ViewRotation,X,Y,Z);\t\n\t\tStartTrace = ComputeProjectileStart(X, Y, Z);\n\t\tAdjustedAim = P.AdjustAim(1000000, StartTrace, 2*AimError, False, False);\n\t\tEndTrace = StartTrace + Accuracy * (FRand()-0.5)*Y*1000 + Accuracy * (FRand()-0.5)*Z*1000 ;\t\n\t\tEndTrace += (FMax(1024.0, MaxRange) * Vector(AdjustedAim));\n\t//\trDroneAmmo = DroneAmmo;\n\t\t\t\tbOwnsCrossHair = True; \n\t\t\t\tScale = Canvas.ClipX/640;\n\t\t\t\tCanvas.SetPos(0.5 * Canvas.ClipX - 16 * Scale, 0.5 * Canvas.ClipY - 16 * Scale );\n\t\t\t\t//Canvas.Style = ERenderStyle.STY_Translucent;\n\t\t\t\tCanvas.DrawColor.R = 0;\n\t\t\t\tCanvas.DrawColor.G = Rand(128);\n\t\t\t\tCanvas.DrawColor.B = Rand(128);\n\t\t\t\tCanvas.Font = Canvas.SmallFont;\n\n\t\t\t\tcurKeyName = \"\";\n\t\t\t\tfor ( i=0; i<255; i++ )\n\t\t\t\t{\n\t\t\t\t\tKeyName = Owner.ConsoleCommand ( \"KEYNAME \"$i );\n\t\t\t\t\tif ( KeyName != \"\" )\n\t\t\t\t\t{\n\t\t\t\t\t\tAlias = Owner.ConsoleCommand( \"KEYBINDING \"$KeyName );\n\t\t\t\t\t\tif ( Alias ~= \"ToggleScope\" )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurKeyName = KeyName;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ( curKeyName ~= \"\" )\n\t\t\t\t\tcurKeyName = \"NONE\";\n\t\t\n\t\t\t\tif(LinkedDrone != None)\n\t\t\t\t\tCanvas.DrawText(\"      Ammo: \"$DroneAmmo$\" - Health: \"$LinkedDrone.Health$\" - Storage: \"@LinkedDrone.iv);\n\t\t\t\telse if(bRepstoragemode)\n\t\t\t\t\tCanvas.DrawText(\"      Drone stored. (\"$curKeyName$\")\");\n\t\t\t\telse\n\t\t\t\t\tCanvas.DrawText(\"      ERROR: NO DRONE\");\n\n\t\t\t}\n\t\t\telse\n\t\t\t\tbOwnsCrossHair = False; // Only for compatibility with HDX50\t\t\n}",
                        "locals": [
                            "local DeusExPlayer P;",
                            "local Pawn CrosshairTarget;",
                            "local float Scale, Accuracy, Dist;",
                            "local vector HitLocation, HitNormal, StartTrace, EndTrace, X,Y,Z;",
                            "local String KeyName, Alias, curKeyName;",
                            "local int i;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "RenderOverlays",
                        "native": false,
                        "param": [
                            [
                                "canvas",
                                "Canvas"
                            ]
                        ],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    },
                    "UnLockPlayerCam": {
                        "body": "{\n\t\t\tdxp.bBehindView=False;\n\t\t\tdxp.ViewTarget = None;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "UnLockPlayerCam",
                        "native": false,
                        "param": [
                            [
                                "deusexplayer",
                                "dxp"
                            ]
                        ],
                        "return": ""
                    },
                    "lasertoggle": {
                        "body": "{\n\tRecreation();\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "lasertoggle",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "scopetoggle": {
                        "body": "{\n\tif(bStoredDrone)\n\t{\n\tRD = Spawn(class'RadarDrone',Pawn(Owner),,Pawn(Owner).Location,Pawn(Owner).ViewRotation);\n\tRD.myOwner = DeusExPlayer(Owner);\n\t\tRD.GotoState('following');\n\t\tRD.myOwner.ClientMessage(\"RADAR Drone: Recreated at your location.\", 'Teamsay');\n\t\tRD.SetTimer(1,False);\n\t\tLinkedDrone=RD;\n\tbStoredDrone=False;\n\tbRepstoragemode=False;\n\t}\n\telse\n\t{\n\t\tforeach AllActors(class'RadarDrone',RD)\n\t\t\tif(RD.myOwner == DeusExPlayer(Owner))\n\t\t\t{\n\t\t\t\tRD.Destroy();\n\t\t\t\tbStoredDrone=True;\n\t\t\t\tbRepstoragemode=True;\n\t\t\t}\n\t\t\t\t\n\t}\n}",
                        "locals": [
                            "local RadarDrone RD;",
                            "local class<actor> NewClass;",
                            "local rotator testRot;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "scopetoggle",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 440,
                "replication": "",
                "states": [],
                "variables": [
                    "var int Modes;",
                    "var RadarDrone LinkedDrone;",
                    "var RaidActor RA;",
                    "var bool bArmedNuclear;",
                    "var int DroneAmmo, rDroneammo;",
                    "var bool bStoredDrone;",
                    "var bool bStorageMode, bRepStorageMode;",
                    "var bool bViewing;"
                ]
            }
        },
        "Torch.uc": {
            "body": "Class Torch extends DeusExWeapon;\n\nvar bool bTorchd;\n\nfunction name WeaponDamageType()\n{\n\treturn 'KnockedOut';\n}\n\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\n// Become a pickup\n// Weapons that carry their ammo with them don't vanish when dropped\nfunction BecomePickup()\n{\n\tSuper.BecomePickup();\n   if (Level.NetMode != NM_Standalone)\n      if (bTossedOut)\n         Lifespan = 0.0;\n}\n\nfunction ScopeToggle()\n{\nlocal DeusExPlayer player;\nSuper.BeginState();\n\t\tplayer = DeusExPlayer(Owner);\n\t\tif (player != None)\n\t\t{\nif ( !bTorchd)\n{\n            LightCone = 128;\n            LightEffect = LE_FireWaver;\n            LightPeriod = 32;\n            LightPhase = 0;\n            LightRadius = 25;\n            LightType = LT_Steady;\n            LightBrightness = 166;\n            LightHue = 1;\n            LightSaturation = 0;\n            bActorShadows = False;\n            bCorona = False;\n            bLensFlare = False;\n            bSpecialLit = False;\n            Hitdamage=20;\nMultiSkins[5] = FireTexture'Effects.Fire.OnFire_J';\nbTorchd = True;\n           \t}\nelse\n{\n            LightCone = 0;\n            LightEffect = LE_None;\n            LightPeriod = 32;\n            LightPhase = 0;\n           LightRadius = 100;\n            LightType = LT_None;\n            VolumeBrightness = 255;\n            Hitdamage=0;\nMultiSkins[5] = Texture'PinkMaskTex';\nbTorchd = False;\n}\n}\n}\n\n//Revert to defaults when in state DownWeapon\nstate DownWeapon\n{\n\tfunction BeginState()\n\t{\n\t\tSuper.BeginState();\n\t\tLightType = LT_None;\n            Hitdamage=0;\n            MultiSkins[1] = Texture'PinkMaskTex';\nMultiSkins[5] = Texture'PinkMaskTex';\nbTorchd = False;\n\t}\n}\n\n//Destroy when thrown\nfunction DropFrom(vector StartLocation)\n{\n\tDestroy();\n}\n\ndefaultproperties\n{\n     LowAmmoWaterMark=0\n     GoverningSkill=Class'DeusEx.SkillWeaponLowTech'\n     NoiseLevel=0.050000\n     reloadTime=0.000000\n     HitDamage=0\n     maxRange=96\n     AccurateRange=96\n     BaseAccuracy=1.000000\n     bPenetrating=False\n     bHasMuzzleFlash=False\n     bHandToHand=True\n     mpBaseAccuracy=1.000000\n     mpAccurateRange=96\n     mpMaxRange=96\n     AmmoName=Class'DeusEx.AmmoNone'\n     ReloadCount=0\n     bInstantHit=True\n     FireOffset=(X=-21.000000,Y=16.000000,Z=27.000000)\n     shakemag=20.000000\n     FireSound=Sound'DeusExSounds.Weapons.NanoSwordFire'\n     Misc1Sound=Sound'DeusExSounds.Weapons.NanoSwordHitFlesh'\n     Misc2Sound=Sound'DeusExSounds.Weapons.NanoSwordHitHard'\n     Misc3Sound=Sound'DeusExSounds.Weapons.NanoSwordHitSoft'\n     InventoryGroup=120\n     ItemName=\"|P2Torch - Press '[' {default |P3Scope|P2 key} to toggle on/off\"\n     PlayerViewOffset=(X=21.000000,Y=-16.000000,Z=-27.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.NanoSword'\n     PickupViewMesh=LodMesh'DeusExItems.NanoSwordPickup'\n     ThirdPersonMesh=LodMesh'DeusExItems.NanoSword3rd'\n     LandSound=Sound'DeusExSounds.Generic.DropLargeWeapon'\n     Icon=Texture'DeusExUI.Icons.BeltIconDragonTooth'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconDragonTooth'\n     largeIconWidth=205\n     largeIconHeight=46\n     invSlotsX=4\n     Description=\"A laserological blade of unknown origin.\"\n     beltDescription=\"Torch\"\n     Mesh=LodMesh'DeusExItems.NanoSwordPickup'\n     MultiSkins(1)=Texture'DeusExItems.Skins.PinkMaskTex'\n     MultiSkins(4)=Texture'DeusExItems.Skins.BlackMaskTex'\n     MultiSkins(5)=Texture'DeusExItems.Skins.PinkMaskTex'\n     MultiSkins(6)=Texture'DeusExItems.Skins.BlackMaskTex'\n     MultiSkins(7)=Texture'DeusExItems.Skins.BlackMaskTex'\n     CollisionRadius=32.000000\n     CollisionHeight=2.400000\n     Mass=20.000000\n}\n",
            "name": "Torch.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "LowAmmoWaterMark=0",
                    "GoverningSkill=Class'DeusEx.SkillWeaponLowTech'",
                    "NoiseLevel=0.050000",
                    "reloadTime=0.000000",
                    "HitDamage=0",
                    "maxRange=96",
                    "AccurateRange=96",
                    "BaseAccuracy=1.000000",
                    "bPenetrating=False",
                    "bHasMuzzleFlash=False",
                    "bHandToHand=True",
                    "mpBaseAccuracy=1.000000",
                    "mpAccurateRange=96",
                    "mpMaxRange=96",
                    "AmmoName=Class'DeusEx.AmmoNone'",
                    "ReloadCount=0",
                    "bInstantHit=True",
                    "FireOffset=(X=-21.000000,Y=16.000000,Z=27.000000)",
                    "shakemag=20.000000",
                    "FireSound=Sound'DeusExSounds.Weapons.NanoSwordFire'",
                    "Misc1Sound=Sound'DeusExSounds.Weapons.NanoSwordHitFlesh'",
                    "Misc2Sound=Sound'DeusExSounds.Weapons.NanoSwordHitHard'",
                    "Misc3Sound=Sound'DeusExSounds.Weapons.NanoSwordHitSoft'",
                    "InventoryGroup=120",
                    "ItemName=\"|P2Torch - Press '[' {default |P3Scope|P2 key} to toggle on/off\"",
                    "PlayerViewOffset=(X=21.000000,Y=-16.000000,Z=-27.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.NanoSword'",
                    "PickupViewMesh=LodMesh'DeusExItems.NanoSwordPickup'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.NanoSword3rd'",
                    "LandSound=Sound'DeusExSounds.Generic.DropLargeWeapon'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconDragonTooth'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconDragonTooth'",
                    "largeIconWidth=205",
                    "largeIconHeight=46",
                    "invSlotsX=4",
                    "Description=\"A laserological blade of unknown origin.\"",
                    "beltDescription=\"Torch\"",
                    "Mesh=LodMesh'DeusExItems.NanoSwordPickup'",
                    "MultiSkins(1)=Texture'DeusExItems.Skins.PinkMaskTex'",
                    "MultiSkins(4)=Texture'DeusExItems.Skins.BlackMaskTex'",
                    "MultiSkins(5)=Texture'DeusExItems.Skins.PinkMaskTex'",
                    "MultiSkins(6)=Texture'DeusExItems.Skins.BlackMaskTex'",
                    "MultiSkins(7)=Texture'DeusExItems.Skins.BlackMaskTex'",
                    "CollisionRadius=32.000000",
                    "CollisionHeight=2.400000",
                    "Mass=20.000000"
                ],
                "exec": [],
                "extends": "DeusExWeapon",
                "functions": {
                    "BecomePickup": {
                        "body": "{\n\tSuper.BecomePickup();\n   if (Level.NetMode != NM_Standalone)\n      if (bTossedOut)\n         Lifespan = 0.0;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "BecomePickup",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "BeginState": {
                        "body": "{\n\t\tSuper.BeginState();\n\t\tLightType = LT_None;\n            Hitdamage=0;\n            MultiSkins[1] = Texture'PinkMaskTex';\nMultiSkins[5] = Texture'PinkMaskTex';\nbTorchd = False;\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "BeginState",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "DropFrom": {
                        "body": "{\n\tDestroy();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "DropFrom",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "StartLocation"
                            ]
                        ],
                        "return": ""
                    },
                    "ScopeToggle": {
                        "body": "{\nSuper.BeginState();\n\t\tplayer = DeusExPlayer(Owner);\n\t\tif (player != None)\n\t\t{\nif ( !bTorchd)\n{\n            LightCone = 128;\n            LightEffect = LE_FireWaver;\n            LightPeriod = 32;\n            LightPhase = 0;\n            LightRadius = 25;\n            LightType = LT_Steady;\n            LightBrightness = 166;\n            LightHue = 1;\n            LightSaturation = 0;\n            bActorShadows = False;\n            bCorona = False;\n            bLensFlare = False;\n            bSpecialLit = False;\n            Hitdamage=20;\nMultiSkins[5] = FireTexture'Effects.Fire.OnFire_J';\nbTorchd = True;\n           \t}\nelse\n{\n            LightCone = 0;\n            LightEffect = LE_None;\n            LightPeriod = 32;\n            LightPhase = 0;\n           LightRadius = 100;\n            LightType = LT_None;\n            VolumeBrightness = 255;\n            Hitdamage=0;\nMultiSkins[5] = Texture'PinkMaskTex';\nbTorchd = False;\n}\n}\n}",
                        "locals": [
                            "local DeusExPlayer player;"
                        ],
                        "modifiers": [],
                        "name": "ScopeToggle",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    },
                    "WeaponDamageType": {
                        "body": "{\n\treturn 'KnockedOut';\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "WeaponDamageType",
                        "native": false,
                        "param": [],
                        "return": "name"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 137,
                "replication": "",
                "states": [],
                "variables": [
                    "var bool bTorchd;"
                ]
            }
        },
        "TrainingLam.uc": {
            "body": "//=============================================================================\n// LAM.\n//=============================================================================\nclass TrainingLAM extends ThrownProjectile;\n\nvar float\tmpBlastRadius;\nvar float\tmpProxRadius;\nvar float\tmpLAMDamage;\nvar float\tmpFuselength;\n\nsimulated function Tick(float deltaTime)\n{\n\tlocal float blinkRate;\n\n\tSuper.Tick(deltaTime);\n\n\tif (bDisabled)\n\t{\n\t\tSkin = Texture'BlackMaskTex';\n\t\treturn;\n\t}\n\n\t// flash faster as the time expires\n\tif (fuseLength - time <= 0.75)\n\t\tblinkRate = 0.1;\n\telse if (fuseLength - time <= fuseLength * 0.5)\n\t\tblinkRate = 0.3;\n\telse\n\t\tblinkRate = 0.5;\n\n   if ((Level.NetMode == NM_Standalone) || (Role < ROLE_Authority) || (Level.NetMode == NM_ListenServer))\n   {\n      if (Abs((fuseLength - time)) % blinkRate > blinkRate * 0.5)\n         Skin = Texture'BlackMaskTex';\n      else\n         Skin = Texture'LAM3rdTex1';\n   }\n}\n\nsimulated function SpawnEffects(Vector HitLocation, Vector HitNormal, Actor Other)\n{\n\tlocal int i;\n\tlocal SmokeTrail puff;\n\tlocal TearGas gas;\n\tlocal Fragment frag;\n\tlocal ParticleGenerator gen;\n\tlocal ProjectileGenerator projgen;\n\tlocal vector loc;\n\tlocal rotator rot;\n\tlocal ExplosionLight light;\n\tlocal DeusExDecal mark;\n   local AnimatedSprite expeffect;\n\n\trot.Pitch = 16384 + FRand() * 16384 - 8192;\n\trot.Yaw = FRand() * 65536;\n\trot.Roll = 0;\n\n\t// don't draw damage art on destroyed movers\n\tif (DeusExMover(Other) != None)\n\t\tif (DeusExMover(Other).bDestroyed)\n\t\t\tExplosionDecal = None;\n\n\tif (ExplosionDecal != None)\n\t{\n\t\tmark = DeusExDecal(Spawn(ExplosionDecal, Self,, HitLocation, Rotator(HitNormal)));\n\t\tif (mark != None)\n\t\t{\n\t\t\tmark.DrawScale = FClamp(damage/30, 0.1, 3.0);\n\t\t\tmark.ReattachDecal();\n         if (!bDamaged)\n            mark.RemoteRole = ROLE_None;\n\t\t}\n\t}\n\n\tfor (i=0; i<blastRadius/36; i++)\n\t{\n\t\tif (FRand() < 0.9)\n\t\t{\n\t\t\tif (bDebris && bStuck)\n\t\t\t{\n\t\t\t\tfrag = spawn(FragmentClass,,, HitLocation);\n\t\t\t\tif (!bDamaged)\n\t\t\t\t\tfrag.RemoteRole = ROLE_None;\n\t\t\t\tif (frag != None)\n\t\t\t\t\tfrag.CalcVelocity(VRand(), blastRadius);\n\t\t\t}\n\n\t\t\tloc = Location;\n\t\t\tloc.X += FRand() * blastRadius - blastRadius * 0.5;\n\t\t\tloc.Y += FRand() * blastRadius - blastRadius * 0.5;\n\n\t\t\tif (damageType == 'Exploded')\n\t\t\t{\n\t\t\t\tlight = Spawn(class'ExplosionLight',,, HitLocation);\n\t\t\t\tif ((light != None) && (!bDamaged))\n\t\t\t\t\tlight.RemoteRole = ROLE_None;\n\n\t\t\t\tif (FRand() < 0.5)\n\t\t\t\t{\n\t\t\t\t\texpeffect = spawn(class'ExplosionSmall',,, loc);\n\t\t\t\t\tlight.size = 2;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\texpeffect = spawn(class'ExplosionMedium',,, loc);\n\t\t\t\t\tlight.size = 4;\n\t\t\t\t}\n\t\t\t\tif ((expeffect != None) && (!bDamaged))\n\t\t\t\t\texpeffect.RemoteRole = ROLE_None;\n\t\t\t}\n\t\t\telse if (damageType == 'EMP')\n\t\t\t{\n\t\t\t\tlight = Spawn(class'ExplosionLight',,, HitLocation);\n\t\t\t\tif (light != None)\n\t\t\t\t{\n\t\t\t\t\tif (!bDamaged)\n\t\t\t\t\t\tlight.RemoteRole = ROLE_None;\n\t\t\t\t\tlight.size = 6;\n\t\t\t\t\tlight.LightHue = 170;\n\t\t\t\t\tlight.LightSaturation = 64;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\tif ( Level.NetMode != NM_Standalone )\n\t{\n\t\tblastRadius=mpBlastRadius;\n\t\tproxRadius=mpProxRadius;\n\t\tDamage=mpLAMDamage;\n\t\tfuseLength=mpFuselength;\n\t\tbIgnoresNanoDefense=True;\n\t}\n}\n\ndefaultproperties\n{\n     mpBlastRadius=512.000000\n     mpProxRadius=128.000000\n     mpFuselength=1.500000\n     fuseLength=3.000000\n     proxRadius=128.000000\n     blastRadius=384.000000\n     spawnWeaponClass=Class'PartyStuff.WeaponTrainingLam'\n     ItemName=\"Training Lightweight Attack Munition (TLAM)\"\n     speed=1000.000000\n     MaxSpeed=1000.000000\n     MomentumTransfer=50000\n     ImpactSound=Sound'DeusExSounds.Weapons.LAMExplode'\n     ExplosionDecal=Class'DeusEx.ScorchMark'\n     LifeSpan=0.000000\n     Mesh=LodMesh'DeusExItems.LAMPickup'\n     CollisionRadius=9.000000\n     CollisionHeight=9.000000\n     Mass=5.000000\n     Buoyancy=2.000000\n}\n",
            "name": "TrainingLam.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "mpBlastRadius=512.000000",
                    "mpProxRadius=128.000000",
                    "mpFuselength=1.500000",
                    "fuseLength=3.000000",
                    "proxRadius=128.000000",
                    "blastRadius=384.000000",
                    "spawnWeaponClass=Class'PartyStuff.WeaponTrainingLam'",
                    "ItemName=\"Training Lightweight Attack Munition (TLAM)\"",
                    "speed=1000.000000",
                    "MaxSpeed=1000.000000",
                    "MomentumTransfer=50000",
                    "ImpactSound=Sound'DeusExSounds.Weapons.LAMExplode'",
                    "ExplosionDecal=Class'DeusEx.ScorchMark'",
                    "LifeSpan=0.000000",
                    "Mesh=LodMesh'DeusExItems.LAMPickup'",
                    "CollisionRadius=9.000000",
                    "CollisionHeight=9.000000",
                    "Mass=5.000000",
                    "Buoyancy=2.000000"
                ],
                "exec": [],
                "extends": "ThrownProjectile",
                "functions": {
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\tif ( Level.NetMode != NM_Standalone )\n\t{\n\t\tblastRadius=mpBlastRadius;\n\t\tproxRadius=mpProxRadius;\n\t\tDamage=mpLAMDamage;\n\t\tfuseLength=mpFuselength;\n\t\tbIgnoresNanoDefense=True;\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "SpawnEffects": {
                        "body": "{\n\n\trot.Pitch = 16384 + FRand() * 16384 - 8192;\n\trot.Yaw = FRand() * 65536;\n\trot.Roll = 0;\n\n\t// don't draw damage art on destroyed movers\n\tif (DeusExMover(Other) != None)\n\t\tif (DeusExMover(Other).bDestroyed)\n\t\t\tExplosionDecal = None;\n\n\tif (ExplosionDecal != None)\n\t{\n\t\tmark = DeusExDecal(Spawn(ExplosionDecal, Self,, HitLocation, Rotator(HitNormal)));\n\t\tif (mark != None)\n\t\t{\n\t\t\tmark.DrawScale = FClamp(damage/30, 0.1, 3.0);\n\t\t\tmark.ReattachDecal();\n         if (!bDamaged)\n            mark.RemoteRole = ROLE_None;\n\t\t}\n\t}\n\n\tfor (i=0; i<blastRadius/36; i++)\n\t{\n\t\tif (FRand() < 0.9)\n\t\t{\n\t\t\tif (bDebris && bStuck)\n\t\t\t{\n\t\t\t\tfrag = spawn(FragmentClass,,, HitLocation);\n\t\t\t\tif (!bDamaged)\n\t\t\t\t\tfrag.RemoteRole = ROLE_None;\n\t\t\t\tif (frag != None)\n\t\t\t\t\tfrag.CalcVelocity(VRand(), blastRadius);\n\t\t\t}\n\n\t\t\tloc = Location;\n\t\t\tloc.X += FRand() * blastRadius - blastRadius * 0.5;\n\t\t\tloc.Y += FRand() * blastRadius - blastRadius * 0.5;\n\n\t\t\tif (damageType == 'Exploded')\n\t\t\t{\n\t\t\t\tlight = Spawn(class'ExplosionLight',,, HitLocation);\n\t\t\t\tif ((light != None) && (!bDamaged))\n\t\t\t\t\tlight.RemoteRole = ROLE_None;\n\n\t\t\t\tif (FRand() < 0.5)\n\t\t\t\t{\n\t\t\t\t\texpeffect = spawn(class'ExplosionSmall',,, loc);\n\t\t\t\t\tlight.size = 2;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\texpeffect = spawn(class'ExplosionMedium',,, loc);\n\t\t\t\t\tlight.size = 4;\n\t\t\t\t}\n\t\t\t\tif ((expeffect != None) && (!bDamaged))\n\t\t\t\t\texpeffect.RemoteRole = ROLE_None;\n\t\t\t}\n\t\t\telse if (damageType == 'EMP')\n\t\t\t{\n\t\t\t\tlight = Spawn(class'ExplosionLight',,, HitLocation);\n\t\t\t\tif (light != None)\n\t\t\t\t{\n\t\t\t\t\tif (!bDamaged)\n\t\t\t\t\t\tlight.RemoteRole = ROLE_None;\n\t\t\t\t\tlight.size = 6;\n\t\t\t\t\tlight.LightHue = 170;\n\t\t\t\t\tlight.LightSaturation = 64;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}",
                        "locals": [
                            "local int i;",
                            "local SmokeTrail puff;",
                            "local TearGas gas;",
                            "local Fragment frag;",
                            "local ParticleGenerator gen;",
                            "local ProjectileGenerator projgen;",
                            "local vector loc;",
                            "local rotator rot;",
                            "local ExplosionLight light;",
                            "local DeusExDecal mark;",
                            "local AnimatedSprite expeffect;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "SpawnEffects",
                        "native": false,
                        "param": [
                            [
                                "Vector",
                                "HitLocation"
                            ],
                            [
                                "Vector",
                                "HitNormal"
                            ],
                            [
                                "Actor",
                                "Other"
                            ]
                        ],
                        "return": ""
                    },
                    "Tick": {
                        "body": "{\n\n\tSuper.Tick(deltaTime);\n\n\tif (bDisabled)\n\t{\n\t\tSkin = Texture'BlackMaskTex';\n\t\treturn;\n\t}\n\n\t// flash faster as the time expires\n\tif (fuseLength - time <= 0.75)\n\t\tblinkRate = 0.1;\n\telse if (fuseLength - time <= fuseLength * 0.5)\n\t\tblinkRate = 0.3;\n\telse\n\t\tblinkRate = 0.5;\n\n   if ((Level.NetMode == NM_Standalone) || (Role < ROLE_Authority) || (Level.NetMode == NM_ListenServer))\n   {\n      if (Abs((fuseLength - time)) % blinkRate > blinkRate * 0.5)\n         Skin = Texture'BlackMaskTex';\n      else\n         Skin = Texture'LAM3rdTex1';\n   }\n}",
                        "locals": [
                            "local float blinkRate;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltaTime"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 162,
                "replication": "",
                "states": [],
                "variables": [
                    "var float\tmpBlastRadius;",
                    "var float\tmpProxRadius;",
                    "var float\tmpLAMDamage;",
                    "var float\tmpFuselength;"
                ]
            }
        },
        "TravelSwitch.uc": {
            "body": "//=============================================================================\n// PlaySound\n//=============================================================================\nclass TravelSwitch extends Switch2;\n\nvar() string MapURL;\nvar() float MinPercentage;\nvar float VoteTimer;\nvar DeusExPlayer Voters[16];\nvar() bool bDebug;\n\nfunction Frob(Actor Frobber, Inventory frobWith)\n{\n\tlocal int i, f, Players, VoteCount;\n\tlocal DeusExPlayer DXP, P;\n\tlocal bool bVoted;\n\t\n\t//Super.Frob(Frobber, frobWith);\n\t\n\tP = DeusExPlayer(Frobber);\n\t\t\n\tforeach AllActors(class'DeusExPlayer', DXP)\n\t\tPlayers++;\n\t\n\tfor(i=0;i<16;i++)\n\t\tif(Voters[i] != None)\n\t\t\tVoteCount++;\n\t\n\tfor(i=0;i<16;i++)\n\t\tif(Voters[i] == P)\n\t\t\tbVoted=True;\n\t\t\t\t\n\tif(!bVoted)\n\t{\n\t\tfor(i=0;i<16;i++)\n\t\t{\n\t\t\tif(Voters[i] == None)\n\t\t\t{\n\t\t\t\tBroadcastMessage(\"Vote Statistics: \"$VoteCount+1$\" out of \"$Players$\" players voted for \"$MapURL$\". \"$float((VoteCount+1 / Players) * 100)$\"% - Requires \"$MinPercentage$\"%\");\n\t\t\t\tVoters[i] = P;\n\t\t\t\t\n\t\t\t\tif( ( (VoteCount+1 / Players) * 100 ) >= MinPercentage )\n\t\t\t\t{\n\t\t\t\t\tif(bDebug)\n\t\t\t\t\t{\n\t\t\t\t\t\tBroadcastMessage(\"Vote passed.\");\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tLevel.Servertravel( MapURL ,false);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tP.ClientMessage(\"Client Vote Statistics: \"$VoteCount+1$\" out of \"$Players$\" players voted for \"$MapURL$\". \"$(VoteCount+1 / Players) * 100$\"% - Requires \"$MinPercentage$\"%\");\n\t\n\n}\n\ndefaultproperties\n{\n     ItemName=\"Travel Switch\"\n}\n",
            "name": "TravelSwitch.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "ItemName=\"Travel Switch\""
                ],
                "exec": [],
                "extends": "Switch2",
                "functions": {
                    "Frob": {
                        "body": "{\n\t\n\t//Super.Frob(Frobber, frobWith);\n\t\n\tP = DeusExPlayer(Frobber);\n\t\t\n\tforeach AllActors(class'DeusExPlayer', DXP)\n\t\tPlayers++;\n\t\n\tfor(i=0;i<16;i++)\n\t\tif(Voters[i] != None)\n\t\t\tVoteCount++;\n\t\n\tfor(i=0;i<16;i++)\n\t\tif(Voters[i] == P)\n\t\t\tbVoted=True;\n\t\t\t\t\n\tif(!bVoted)\n\t{\n\t\tfor(i=0;i<16;i++)\n\t\t{\n\t\t\tif(Voters[i] == None)\n\t\t\t{\n\t\t\t\tBroadcastMessage(\"Vote Statistics: \"$VoteCount+1$\" out of \"$Players$\" players voted for \"$MapURL$\". \"$float((VoteCount+1 / Players) * 100)$\"% - Requires \"$MinPercentage$\"%\");\n\t\t\t\tVoters[i] = P;\n\t\t\t\t\n\t\t\t\tif( ( (VoteCount+1 / Players) * 100 ) >= MinPercentage )\n\t\t\t\t{\n\t\t\t\t\tif(bDebug)\n\t\t\t\t\t{\n\t\t\t\t\t\tBroadcastMessage(\"Vote passed.\");\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tLevel.Servertravel( MapURL ,false);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tP.ClientMessage(\"Client Vote Statistics: \"$VoteCount+1$\" out of \"$Players$\" players voted for \"$MapURL$\". \"$(VoteCount+1 / Players) * 100$\"% - Requires \"$MinPercentage$\"%\");\n\t\n\n}",
                        "locals": [
                            "local int i, f, Players, VoteCount;",
                            "local DeusExPlayer DXP, P;",
                            "local bool bVoted;"
                        ],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 65,
                "replication": "",
                "states": [],
                "variables": [
                    "var() string MapURL;",
                    "var() float MinPercentage;",
                    "var float VoteTimer;",
                    "var DeusExPlayer Voters[16];",
                    "var() bool bDebug;"
                ]
            }
        },
        "TripProj.uc": {
            "body": "//=============================================================================\n// TripProj.\n//=============================================================================\nclass TripProj extends LaserProj;\n\nvar float\tmpBlastRadius;\nvar float\tmpProxRadius;\nvar float\tmpLAMDamage;\nvar float\tmpFuselength;\nvar MPLaserEmitter emitter;\nvar() bool bIsOn;\nvar bool bConfused;\t\t\t\t// used when hit by EMP\nvar bool bCanFrob;\nvar float confusionTimer;\t\t// how long until trigger resumes normal operation\nvar float confusionDuration;\t// how long does EMP hit last?\nvar int HitDamage;\nvar int HitPoints;\nvar int minDamageThreshold;\nvar float TripTimer;\nvar int charge;\n\nreplication\n{\n    reliable if(Role == ROLE_Authority)\n      bConfused,bIsOn;\n}\n\nfunction Timer()\n{\n\tif ((emitter == none))\n    {\n\t    emitter = Spawn(class'MPLaserEmitter');\n\n\t    if (emitter != None)\n\t    {\n\t\t   emitter.TurnOn();\n\t\t   bIsOn = True;\n\t\t      bDisabled=False;\n\t\t   emitter.SetLocation(Location);\n           emitter.SetRotation(Rotation);\n\t    }\n    }\n}\n\nfunction Trigger( actor Other, pawn EventInstigator )\n{\n\tif(bisOn)\n\t{\n\t\tDisarm();\n\t}\n\telse\n\t{\n\t\tSetTimer(1,False);\n\t}\n}\n\nfunction Arm()\n{\n   emitter.TurnOn();\n   bIsOn = True;\n\n   emitter.SetLocation(Location);\n   emitter.SetRotation(Rotation);\n}\n\nfunction Tick(float deltaTime)\n{\nlocal bool bConfusedOff;\nlocal Weapon wep;\nlocal ScriptedPawn P;\nlocal DeusExDecoration Deco;\nlocal DeusExPlayer Player;\n\n    if ( bIsOn)\n    {\n      if (emitter != none)\n      {\n\t\tif ((emitter.HitActor != None) && (!bDisabled))\n\t\t{\n\t\t\tif(DeusExDecoration(emitter.hitactor) != None && !DeusExDecoration(emitter.hitactor).bInvincible)\n\t\t\t{\n\t\t\t\tDeusExDecoration(emitter.hitactor).TakeDamage(100,DeusExPlayer(Owner),DeusExDecoration(emitter.hitactor).location,vect(0,0,0),'exploded');\n\t\t\t}\n\t\t\t\n\t\t\tif(Pawn(emitter.hitactor) != none)\n\t\t\t{\n\t\t\t\tPawn(emitter.hitactor).TakeDamage(20,DeusExPlayer(Owner),emitter.hitactor.location,vect(0,0,0),'special');\n\t\t\t}\n\t\t\t/*P = ScriptedPawn(emitter.hitactor);\n\t\t\tWep = Weapon(emitter.hitactor);\n\t\t\tPlayer = DeusExPlayer(emitter.hitactor);\n\t\t\tDeco = DeusExDecoration(emitter.hitactor);\n\n\t\t\t\n\t\t\tplayer.TakeDamage(20,none,vect(0,0,7),vect(0,0,0),'special');*/\n\t\t\t\n\t\t}\n      }\n    }\n}\n\nfunction Disarm()\n{\n\temitter.TurnOff();\n\tbDisabled=True;\n\tbIsOn = False;\n\tbCanFrob = True;\n\temitter.Destroy();\n\temitter = none;\n}\n\n// if we are frobbed, turn us off\nfunction Frob(Actor Frobber, Inventory frobWith)\n{\t\n\tif(bCanFrob)\n\t{\n\t\tSuper.Frob(Frobber, frobWith);\n\t\t\t\treturn;\n\t}\n\tDisarm();\n}\n\n//This function probably isn't needed.\nfunction Destroyed()\n{\n\tif (emitter != None)\n\t{\n\t\temitter.Destroy();\n\t\temitter = None;\n\t}\n\n\tSuper.Destroyed();\n}\n\n\n//Multiplayer Crap\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\tif ( Level.NetMode != NM_Standalone )\n\t{\n\t\tblastRadius=mpBlastRadius;\n\t\tproxRadius=mpProxRadius;\n\t\tDamage=mpLAMDamage;\n\t\tfuseLength=mpFuselength;\n\t\tbIgnoresNanoDefense=True;\n\t}\n}\n\nfunction PostBeginPlay()\n{\n\tSetTimer(TripTimer,False);\n}\n\nsimulated function BeginPlay()\n{\n\tlocal DeusExPlayer aplayer;\n\n\tSuper(DeusexProjectile).BeginPlay();\n\n\tSetCollision(True, True, True);\n}\n\ndefaultproperties\n{\n     confusionDuration=10.000000\n     TripTimer=3.000000\n     fuseLength=0.000000\n     proxRadius=0.000000\n     blastRadius=256.000000\n     spawnWeaponClass=Class'PartyStuff.WeaponTripBomb'\n     ItemName=\"Laser Wire\"\n     speed=1000.000000\n     MaxSpeed=1000.000000\n     Damage=500.000000\n     MomentumTransfer=50000\n     ImpactSound=Sound'DeusExSounds.Weapons.LAMExplode'\n     ExplosionDecal=Class'DeusEx.ScorchMark'\n     LifeSpan=0.000000\n     Mesh=LodMesh'DeusExDeco.LaserEmitter'\n     CollisionRadius=2.500000\n     CollisionHeight=2.500000\n     Mass=5.000000\n     Buoyancy=2.000000\n}\n",
            "name": "TripProj.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "confusionDuration=10.000000",
                    "TripTimer=3.000000",
                    "fuseLength=0.000000",
                    "proxRadius=0.000000",
                    "blastRadius=256.000000",
                    "spawnWeaponClass=Class'PartyStuff.WeaponTripBomb'",
                    "ItemName=\"Laser Wire\"",
                    "speed=1000.000000",
                    "MaxSpeed=1000.000000",
                    "Damage=500.000000",
                    "MomentumTransfer=50000",
                    "ImpactSound=Sound'DeusExSounds.Weapons.LAMExplode'",
                    "ExplosionDecal=Class'DeusEx.ScorchMark'",
                    "LifeSpan=0.000000",
                    "Mesh=LodMesh'DeusExDeco.LaserEmitter'",
                    "CollisionRadius=2.500000",
                    "CollisionHeight=2.500000",
                    "Mass=5.000000",
                    "Buoyancy=2.000000"
                ],
                "exec": [],
                "extends": "LaserProj",
                "functions": {
                    "Arm": {
                        "body": "{\n   emitter.TurnOn();\n   bIsOn = True;\n\n   emitter.SetLocation(Location);\n   emitter.SetRotation(Rotation);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Arm",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "BeginPlay": {
                        "body": "{\n\n\tSuper(DeusexProjectile).BeginPlay();\n\n\tSetCollision(True, True, True);\n}",
                        "locals": [
                            "local DeusExPlayer aplayer;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "BeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Destroyed": {
                        "body": "{\n\tif (emitter != None)\n\t{\n\t\temitter.Destroy();\n\t\temitter = None;\n\t}\n\n\tSuper.Destroyed();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Destroyed",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Disarm": {
                        "body": "{\n\temitter.TurnOff();\n\tbDisabled=True;\n\tbIsOn = False;\n\tbCanFrob = True;\n\temitter.Destroy();\n\temitter = none;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Disarm",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Frob": {
                        "body": "{\t\n\tif(bCanFrob)\n\t{\n\t\tSuper.Frob(Frobber, frobWith);\n\t\t\t\treturn;\n\t}\n\tDisarm();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    },
                    "PostBeginPlay": {
                        "body": "{\n\tSetTimer(TripTimer,False);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\tif ( Level.NetMode != NM_Standalone )\n\t{\n\t\tblastRadius=mpBlastRadius;\n\t\tproxRadius=mpProxRadius;\n\t\tDamage=mpLAMDamage;\n\t\tfuseLength=mpFuselength;\n\t\tbIgnoresNanoDefense=True;\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Tick": {
                        "body": "{\n\n    if ( bIsOn)\n    {\n      if (emitter != none)\n      {\n\t\tif ((emitter.HitActor != None) && (!bDisabled))\n\t\t{\n\t\t\tif(DeusExDecoration(emitter.hitactor) != None && !DeusExDecoration(emitter.hitactor).bInvincible)\n\t\t\t{\n\t\t\t\tDeusExDecoration(emitter.hitactor).TakeDamage(100,DeusExPlayer(Owner),DeusExDecoration(emitter.hitactor).location,vect(0,0,0),'exploded');\n\t\t\t}\n\t\t\t\n\t\t\tif(Pawn(emitter.hitactor) != none)\n\t\t\t{\n\t\t\t\tPawn(emitter.hitactor).TakeDamage(20,DeusExPlayer(Owner),emitter.hitactor.location,vect(0,0,0),'special');\n\t\t\t}\n\t\t\t/*P = ScriptedPawn(emitter.hitactor);\n\t\t\tWep = Weapon(emitter.hitactor);\n\t\t\tPlayer = DeusExPlayer(emitter.hitactor);\n\t\t\tDeco = DeusExDecoration(emitter.hitactor);\n\n\t\t\t\n\t\t\tplayer.TakeDamage(20,none,vect(0,0,7),vect(0,0,0),'special');*/\n\t\t\t\n\t\t}\n      }\n    }\n}",
                        "locals": [
                            "local bool bConfusedOff;",
                            "local Weapon wep;",
                            "local ScriptedPawn P;",
                            "local DeusExDecoration Deco;",
                            "local DeusExPlayer Player;"
                        ],
                        "modifiers": [],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltaTime"
                            ]
                        ],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\tif ((emitter == none))\n    {\n\t    emitter = Spawn(class'MPLaserEmitter');\n\n\t    if (emitter != None)\n\t    {\n\t\t   emitter.TurnOn();\n\t\t   bIsOn = True;\n\t\t      bDisabled=False;\n\t\t   emitter.SetLocation(Location);\n           emitter.SetRotation(Rotation);\n\t    }\n    }\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Trigger": {
                        "body": "{\n\tif(bisOn)\n\t{\n\t\tDisarm();\n\t}\n\telse\n\t{\n\t\tSetTimer(1,False);\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Trigger",
                        "native": false,
                        "param": [
                            [
                                "actor",
                                "Other"
                            ],
                            [
                                "pawn",
                                "EventInstigator"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 187,
                "replication": "",
                "states": [],
                "variables": [
                    "var float\tmpBlastRadius;",
                    "var float\tmpProxRadius;",
                    "var float\tmpLAMDamage;",
                    "var float\tmpFuselength;",
                    "var MPLaserEmitter emitter;",
                    "var() bool bIsOn;",
                    "var bool bConfused;\t\t\t\t// used when hit by EMP",
                    "var bool bCanFrob;",
                    "var float confusionTimer;\t\t// how long until trigger resumes normal operation",
                    "var float confusionDuration;\t// how long does EMP hit last?",
                    "var int HitDamage;",
                    "var int HitPoints;",
                    "var int minDamageThreshold;",
                    "var float TripTimer;",
                    "var int charge;"
                ]
            }
        },
        "TripProjEMP.uc": {
            "body": "//=============================================================================\n// TripProj.\n//=============================================================================\nclass TripProjEMP extends LaserProj;\n\nvar float\tmpBlastRadius;\nvar float\tmpProxRadius;\nvar float\tmpLAMDamage;\nvar float\tmpFuselength;\nvar mpLaserEmitter emitter;\nvar() bool bIsOn;\nvar bool bConfused;\t\t\t\t// used when hit by EMP\nvar bool bCanFrob;\nvar float confusionTimer;\t\t// how long until trigger resumes normal operation\nvar float confusionDuration;\t// how long does EMP hit last?\nvar int HitDamage;\nvar int HitPoints;\nvar int minDamageThreshold;\nvar float TripTimer;\nvar int charge;\n\nfunction Timer()\n{\n\tif ((emitter == none))\n    {\n\t    emitter = Spawn(class'MPLaserEmitter');\n\n\t    if (emitter != None)\n\t    {\n\t\t   emitter.TurnOn();\n\t\t   emitter.bBlueBeam=False;\n\t\t   bIsOn = True;\n\t\t      bDisabled=False;\n\t\t   emitter.SetLocation(Location);\n           emitter.SetRotation(Rotation);\n\t    }\n    }\n}\n\nfunction Trigger( actor Other, pawn EventInstigator )\n{\n\tif(bisOn)\n\t{\n\t\tDisarm();\n\t}\n\telse\n\t{\n\t\tSetTimer(1,False);\n\t}\n}\n\nfunction Arm()\n{\n   emitter.TurnOn();\n   emitter.bBlueBeam=False;\n   bIsOn = True;\n   emitter.SetLocation(Location);\n   emitter.SetRotation(Rotation);\n      bDisabled=False;\n}\n\nfunction Tick(float deltaTime)\n{\nlocal ScriptedPawn P;\nlocal DeusExPlayer Player;\n\n    if ( bIsOn)\n    {\n      if (emitter != none)\n      {\n\t\tif ((emitter.HitActor != None) && (!bDisabled))\n\t\t{\n\t\t\tif(Pawn(emitter.hitactor) != none)\n\t\t\t{\n\t\t\t\tPawn(emitter.hitactor).TakeDamage(20,DeusExPlayer(Owner),emitter.hitactor.location,vect(0,0,0),'EMP');\n\t\t\t}\n\t\t}\n      }\n    }\n}\n\nfunction Disarm()\n{\n\temitter.TurnOff();\n\tbDisabled=True;\n\tbIsOn = False;\n\tbCanFrob = True;\n\tEmitter.Destroy();\n\temitter = none;\n}\n\n// if we are frobbed, turn us off\nfunction Frob(Actor Frobber, Inventory frobWith)\n{\t\n\tif(bCanFrob)\n\t{\n\t\tSuper.Frob(Frobber, frobWith);\n\t\t\t\treturn;\n\t}\n\tDisarm();\n}\n\n//This function probably isn't needed.\nfunction Destroyed()\n{\n\tif (emitter != None)\n\t{\n\t\temitter.Destroy();\n\t\temitter = None;\n\t}\n\n\tSuper.Destroyed();\n}\n\n\n//Multiplayer Crap\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\tif ( Level.NetMode != NM_Standalone )\n\t{\n\t\tblastRadius=mpBlastRadius;\n\t\tproxRadius=mpProxRadius;\n\t\tDamage=mpLAMDamage;\n\t\tfuseLength=mpFuselength;\n\t\tbIgnoresNanoDefense=True;\n\t}\n}\n\nsimulated function BeginPlay()\n{\n\tlocal DeusExPlayer aplayer;\n\n\tSuper(DeusexProjectile).BeginPlay();\n\n\tSetCollision(True, True, True);\n}\n\nfunction PostBeginPlay()\n{\n\tSetTimer(TripTimer,False);\n}\n\ndefaultproperties\n{\n     confusionDuration=10.000000\n     TripTimer=3.000000\n     fuseLength=0.000000\n     proxRadius=0.000000\n     blastRadius=256.000000\n     spawnWeaponClass=Class'PartyStuff.WeaponTripBombEMP'\n     ItemName=\"Laser EMP\"\n     speed=1000.000000\n     MaxSpeed=1000.000000\n     Damage=500.000000\n     MomentumTransfer=50000\n     ImpactSound=Sound'DeusExSounds.Weapons.LAMExplode'\n     ExplosionDecal=Class'DeusEx.ScorchMark'\n     LifeSpan=0.000000\n     Mesh=LodMesh'DeusExDeco.LaserEmitter'\n     CollisionRadius=2.500000\n     CollisionHeight=2.500000\n     Mass=5.000000\n     Buoyancy=2.000000\n}\n",
            "name": "TripProjEMP.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "confusionDuration=10.000000",
                    "TripTimer=3.000000",
                    "fuseLength=0.000000",
                    "proxRadius=0.000000",
                    "blastRadius=256.000000",
                    "spawnWeaponClass=Class'PartyStuff.WeaponTripBombEMP'",
                    "ItemName=\"Laser EMP\"",
                    "speed=1000.000000",
                    "MaxSpeed=1000.000000",
                    "Damage=500.000000",
                    "MomentumTransfer=50000",
                    "ImpactSound=Sound'DeusExSounds.Weapons.LAMExplode'",
                    "ExplosionDecal=Class'DeusEx.ScorchMark'",
                    "LifeSpan=0.000000",
                    "Mesh=LodMesh'DeusExDeco.LaserEmitter'",
                    "CollisionRadius=2.500000",
                    "CollisionHeight=2.500000",
                    "Mass=5.000000",
                    "Buoyancy=2.000000"
                ],
                "exec": [],
                "extends": "LaserProj",
                "functions": {
                    "Arm": {
                        "body": "{\n   emitter.TurnOn();\n   emitter.bBlueBeam=False;\n   bIsOn = True;\n   emitter.SetLocation(Location);\n   emitter.SetRotation(Rotation);\n      bDisabled=False;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Arm",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "BeginPlay": {
                        "body": "{\n\n\tSuper(DeusexProjectile).BeginPlay();\n\n\tSetCollision(True, True, True);\n}",
                        "locals": [
                            "local DeusExPlayer aplayer;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "BeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Destroyed": {
                        "body": "{\n\tif (emitter != None)\n\t{\n\t\temitter.Destroy();\n\t\temitter = None;\n\t}\n\n\tSuper.Destroyed();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Destroyed",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Disarm": {
                        "body": "{\n\temitter.TurnOff();\n\tbDisabled=True;\n\tbIsOn = False;\n\tbCanFrob = True;\n\tEmitter.Destroy();\n\temitter = none;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Disarm",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Frob": {
                        "body": "{\t\n\tif(bCanFrob)\n\t{\n\t\tSuper.Frob(Frobber, frobWith);\n\t\t\t\treturn;\n\t}\n\tDisarm();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    },
                    "PostBeginPlay": {
                        "body": "{\n\tSetTimer(TripTimer,False);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\tif ( Level.NetMode != NM_Standalone )\n\t{\n\t\tblastRadius=mpBlastRadius;\n\t\tproxRadius=mpProxRadius;\n\t\tDamage=mpLAMDamage;\n\t\tfuseLength=mpFuselength;\n\t\tbIgnoresNanoDefense=True;\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Tick": {
                        "body": "{\n\n    if ( bIsOn)\n    {\n      if (emitter != none)\n      {\n\t\tif ((emitter.HitActor != None) && (!bDisabled))\n\t\t{\n\t\t\tif(Pawn(emitter.hitactor) != none)\n\t\t\t{\n\t\t\t\tPawn(emitter.hitactor).TakeDamage(20,DeusExPlayer(Owner),emitter.hitactor.location,vect(0,0,0),'EMP');\n\t\t\t}\n\t\t}\n      }\n    }\n}",
                        "locals": [
                            "local ScriptedPawn P;",
                            "local DeusExPlayer Player;"
                        ],
                        "modifiers": [],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltaTime"
                            ]
                        ],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\tif ((emitter == none))\n    {\n\t    emitter = Spawn(class'MPLaserEmitter');\n\n\t    if (emitter != None)\n\t    {\n\t\t   emitter.TurnOn();\n\t\t   emitter.bBlueBeam=False;\n\t\t   bIsOn = True;\n\t\t      bDisabled=False;\n\t\t   emitter.SetLocation(Location);\n           emitter.SetRotation(Rotation);\n\t    }\n    }\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Trigger": {
                        "body": "{\n\tif(bisOn)\n\t{\n\t\tDisarm();\n\t}\n\telse\n\t{\n\t\tSetTimer(1,False);\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Trigger",
                        "native": false,
                        "param": [
                            [
                                "actor",
                                "Other"
                            ],
                            [
                                "pawn",
                                "EventInstigator"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 167,
                "replication": "",
                "states": [],
                "variables": [
                    "var float\tmpBlastRadius;",
                    "var float\tmpProxRadius;",
                    "var float\tmpLAMDamage;",
                    "var float\tmpFuselength;",
                    "var mpLaserEmitter emitter;",
                    "var() bool bIsOn;",
                    "var bool bConfused;\t\t\t\t// used when hit by EMP",
                    "var bool bCanFrob;",
                    "var float confusionTimer;\t\t// how long until trigger resumes normal operation",
                    "var float confusionDuration;\t// how long does EMP hit last?",
                    "var int HitDamage;",
                    "var int HitPoints;",
                    "var int minDamageThreshold;",
                    "var float TripTimer;",
                    "var int charge;"
                ]
            }
        },
        "TripProjFire.uc": {
            "body": "//=============================================================================\n// TripProj.\n//=============================================================================\nclass TripProjFire extends LaserProj;\n\nvar float\tmpBlastRadius;\nvar float\tmpProxRadius;\nvar float\tmpLAMDamage;\nvar float\tmpFuselength;\nvar MPLaserEmitter emitter;\nvar() bool bIsOn;\nvar bool bConfused;\t\t\t\t// used when hit by EMP\nvar bool bCanFrob;\nvar float confusionTimer;\t\t// how long until trigger resumes normal operation\nvar float confusionDuration;\t// how long does EMP hit last?\nvar int HitDamage;\nvar int HitPoints;\nvar int minDamageThreshold;\nvar float TripTimer;\nvar int charge;\n\nfunction Timer()\n{\n\tif ((emitter == none))\n    {\n\t    emitter = Spawn(class'MPLaserEmitter');\n\n\t    if (emitter != None)\n\t    {\n\t\t   emitter.TurnOn();\n\t\t   emitter.bBlueBeam=False;\n\t\t   bIsOn = True;\n\t\t      bDisabled=False;\n\t\t   emitter.SetLocation(Location);\n           emitter.SetRotation(Rotation);\n\t    }\n    }\n}\n\nfunction Trigger( actor Other, pawn EventInstigator )\n{\n\tif(bisOn)\n\t{\n\t\tDisarm();\n\t}\n\telse\n\t{\n\t\tSetTimer(1,False);\n\t}\n}\n\nfunction Arm()\n{\n   emitter.TurnOn();\n   emitter.bBlueBeam=False;\n   bIsOn = True;\n   emitter.SetLocation(Location);\n   emitter.SetRotation(Rotation);\n      bDisabled=False;\n}\n\nfunction Tick(float deltaTime)\n{\nlocal bool bConfusedOff;\nlocal Weapon wep;\nlocal ScriptedPawn P;\nlocal DeusExDecoration Deco;\nlocal DeusExPlayer Player;\n\n    if ( bIsOn)\n    {\n      if (emitter != none)\n      {\n\t\t//Any actor it hits will get hurt\n\t\tif ((emitter.HitActor != None) && (!bDisabled))\n\t\t{\n\t\t\tif(DeusExDecoration(emitter.hitactor) != None && !DeusExDecoration(emitter.hitactor).bInvincible)\n\t\t\t{\n\t\t\t\tDeusExDecoration(emitter.hitactor).TakeDamage(100,DeusExPlayer(Owner),DeusExDecoration(emitter.hitactor).location,vect(0,0,0),'Flamed');\n\t\t\t}\n\t\t\t\n\t\t\tif(Pawn(emitter.hitactor) != none)\n\t\t\t{\n\t\t\t\tPawn(emitter.hitactor).TakeDamage(20,DeusExPlayer(Owner),emitter.hitactor.location,vect(0,0,0),'Flamed');\n\t\t\t}\n\t\t}\n      }\n    }\n}\n\nfunction Disarm()\n{\n\temitter.TurnOff();\n\temitter.Destroy();\n\temitter = none;\n\tbDisabled=True;\n\tbIsOn = False;\n\tbCanFrob = True;\n}\n\n// if we are frobbed, turn us off\nfunction Frob(Actor Frobber, Inventory frobWith)\n{\t\n\tif(bCanFrob)\n\t{\n\t\tSuper.Frob(Frobber, frobWith);\n\t\t\t\treturn;\n\t}\n\tDisarm();\n}\n\n//This function probably isn't needed.\nfunction Destroyed()\n{\n\tif (emitter != None)\n\t{\n\t\temitter.Destroy();\n\t\temitter = None;\n\t}\n\n\tSuper.Destroyed();\n}\n\n\n//Multiplayer Crap\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\tif ( Level.NetMode != NM_Standalone )\n\t{\n\t\tblastRadius=mpBlastRadius;\n\t\tproxRadius=mpProxRadius;\n\t\tDamage=mpLAMDamage;\n\t\tfuseLength=mpFuselength;\n\t\tbIgnoresNanoDefense=True;\n\t}\n}\n\nsimulated function BeginPlay()\n{\n\tlocal DeusExPlayer aplayer;\n\n\tSuper(DeusexProjectile).BeginPlay();\n\n\tSetCollision(True, True, True);\n}\n\nfunction PostBeginPlay()\n{\n\tSetTimer(TripTimer,False);\n}\n\ndefaultproperties\n{\n     confusionDuration=10.000000\n     TripTimer=3.000000\n     fuseLength=0.000000\n     proxRadius=0.000000\n     blastRadius=256.000000\n     spawnWeaponClass=Class'PartyStuff.WeaponTripBombFire'\n     ItemName=\"Laser Fire Wire\"\n     speed=1000.000000\n     MaxSpeed=1000.000000\n     Damage=500.000000\n     MomentumTransfer=50000\n     ImpactSound=Sound'DeusExSounds.Weapons.LAMExplode'\n     ExplosionDecal=Class'DeusEx.ScorchMark'\n     LifeSpan=0.000000\n     Mesh=LodMesh'DeusExDeco.LaserEmitter'\n     CollisionRadius=2.500000\n     CollisionHeight=2.500000\n     Mass=5.000000\n     Buoyancy=2.000000\n}\n",
            "name": "TripProjFire.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "confusionDuration=10.000000",
                    "TripTimer=3.000000",
                    "fuseLength=0.000000",
                    "proxRadius=0.000000",
                    "blastRadius=256.000000",
                    "spawnWeaponClass=Class'PartyStuff.WeaponTripBombFire'",
                    "ItemName=\"Laser Fire Wire\"",
                    "speed=1000.000000",
                    "MaxSpeed=1000.000000",
                    "Damage=500.000000",
                    "MomentumTransfer=50000",
                    "ImpactSound=Sound'DeusExSounds.Weapons.LAMExplode'",
                    "ExplosionDecal=Class'DeusEx.ScorchMark'",
                    "LifeSpan=0.000000",
                    "Mesh=LodMesh'DeusExDeco.LaserEmitter'",
                    "CollisionRadius=2.500000",
                    "CollisionHeight=2.500000",
                    "Mass=5.000000",
                    "Buoyancy=2.000000"
                ],
                "exec": [],
                "extends": "LaserProj",
                "functions": {
                    "Arm": {
                        "body": "{\n   emitter.TurnOn();\n   emitter.bBlueBeam=False;\n   bIsOn = True;\n   emitter.SetLocation(Location);\n   emitter.SetRotation(Rotation);\n      bDisabled=False;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Arm",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "BeginPlay": {
                        "body": "{\n\n\tSuper(DeusexProjectile).BeginPlay();\n\n\tSetCollision(True, True, True);\n}",
                        "locals": [
                            "local DeusExPlayer aplayer;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "BeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Destroyed": {
                        "body": "{\n\tif (emitter != None)\n\t{\n\t\temitter.Destroy();\n\t\temitter = None;\n\t}\n\n\tSuper.Destroyed();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Destroyed",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Disarm": {
                        "body": "{\n\temitter.TurnOff();\n\temitter.Destroy();\n\temitter = none;\n\tbDisabled=True;\n\tbIsOn = False;\n\tbCanFrob = True;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Disarm",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Frob": {
                        "body": "{\t\n\tif(bCanFrob)\n\t{\n\t\tSuper.Frob(Frobber, frobWith);\n\t\t\t\treturn;\n\t}\n\tDisarm();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    },
                    "PostBeginPlay": {
                        "body": "{\n\tSetTimer(TripTimer,False);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\tif ( Level.NetMode != NM_Standalone )\n\t{\n\t\tblastRadius=mpBlastRadius;\n\t\tproxRadius=mpProxRadius;\n\t\tDamage=mpLAMDamage;\n\t\tfuseLength=mpFuselength;\n\t\tbIgnoresNanoDefense=True;\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Tick": {
                        "body": "{\n\n    if ( bIsOn)\n    {\n      if (emitter != none)\n      {\n\t\t//Any actor it hits will get hurt\n\t\tif ((emitter.HitActor != None) && (!bDisabled))\n\t\t{\n\t\t\tif(DeusExDecoration(emitter.hitactor) != None && !DeusExDecoration(emitter.hitactor).bInvincible)\n\t\t\t{\n\t\t\t\tDeusExDecoration(emitter.hitactor).TakeDamage(100,DeusExPlayer(Owner),DeusExDecoration(emitter.hitactor).location,vect(0,0,0),'Flamed');\n\t\t\t}\n\t\t\t\n\t\t\tif(Pawn(emitter.hitactor) != none)\n\t\t\t{\n\t\t\t\tPawn(emitter.hitactor).TakeDamage(20,DeusExPlayer(Owner),emitter.hitactor.location,vect(0,0,0),'Flamed');\n\t\t\t}\n\t\t}\n      }\n    }\n}",
                        "locals": [
                            "local bool bConfusedOff;",
                            "local Weapon wep;",
                            "local ScriptedPawn P;",
                            "local DeusExDecoration Deco;",
                            "local DeusExPlayer Player;"
                        ],
                        "modifiers": [],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltaTime"
                            ]
                        ],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\tif ((emitter == none))\n    {\n\t    emitter = Spawn(class'MPLaserEmitter');\n\n\t    if (emitter != None)\n\t    {\n\t\t   emitter.TurnOn();\n\t\t   emitter.bBlueBeam=False;\n\t\t   bIsOn = True;\n\t\t      bDisabled=False;\n\t\t   emitter.SetLocation(Location);\n           emitter.SetRotation(Rotation);\n\t    }\n    }\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Trigger": {
                        "body": "{\n\tif(bisOn)\n\t{\n\t\tDisarm();\n\t}\n\telse\n\t{\n\t\tSetTimer(1,False);\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Trigger",
                        "native": false,
                        "param": [
                            [
                                "actor",
                                "Other"
                            ],
                            [
                                "pawn",
                                "EventInstigator"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 176,
                "replication": "",
                "states": [],
                "variables": [
                    "var float\tmpBlastRadius;",
                    "var float\tmpProxRadius;",
                    "var float\tmpLAMDamage;",
                    "var float\tmpFuselength;",
                    "var MPLaserEmitter emitter;",
                    "var() bool bIsOn;",
                    "var bool bConfused;\t\t\t\t// used when hit by EMP",
                    "var bool bCanFrob;",
                    "var float confusionTimer;\t\t// how long until trigger resumes normal operation",
                    "var float confusionDuration;\t// how long does EMP hit last?",
                    "var int HitDamage;",
                    "var int HitPoints;",
                    "var int minDamageThreshold;",
                    "var float TripTimer;",
                    "var int charge;"
                ]
            }
        },
        "TurretItem.uc": {
            "body": "//=============================================================================\n// It's a tarp.\n//=============================================================================\nclass TurretItem extends ChargedPickup;\n\n// ----------------------------------------------------------------------\n// ChargedPickupBegin()\n// ----------------------------------------------------------------------\n\nfunction ChargedPickupBegin(DeusExPlayer Player)\n{\n   local TempTurret CD;\n   local Vector loc,X,Y,Z;\n   \n   CD = Spawn(Class'TempTurret',,,Player.Location + (Player.CollisionRadius+Default.CollisionRadius+30) * Vector(Player.ViewRotation) + vect(0,0,1) * 30 );\n   CD.Master  = Player;\n\n\tSuper.ChargedPickupBegin(Player);\n\t\n}\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\nfunction UsedUp()\n{\n\tlocal DeusExPlayer Player;\n\n\tif ( Pawn(Owner) != None )\n\t{\n\t\tbActivatable = false;\n\t\t\n\t}\n\tPlayer = DeusExPlayer(Owner);\n\n\tif (Player != None)\n\t{\n\t\tif (Player.inHand == Self)\n\t\t\tChargedPickupEnd(Player);\n\t}\n\n\tDestroy();\n}\n\ndefaultproperties\n{\n     ActivateSound=Sound'DeusExSounds.Augmentation.CloakUp'\n     DeActivateSound=None\n     ChargeRemainingLabel=\"Box readiness:\"\n     ItemName=\"Portable Turret\"\n     PlayerViewOffset=(X=20.000000,Z=-12.000000)\n     PlayerViewMesh=LodMesh'DeusExDeco.BoxSmall'\n     PlayerViewScale=0.200000\n     PickupViewMesh=LodMesh'DeusExDeco.BoxSmall'\n     ThirdPersonMesh=LodMesh'DeusExDeco.BoxSmall'\n     ThirdPersonScale=0.250000\n     Charge=8\n     LandSound=Sound'DeusExSounds.Generic.DropLargeWeapon'\n     Icon=Texture'DeusExUI.Icons.BeltIconArmorAdaptive'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconArmorAdaptive'\n     largeIconWidth=35\n     largeIconHeight=49\n     Description=\"s\"\n     beltDescription=\"BOX\"\n     Mesh=LodMesh'DeusExDeco.BoxSmall'\n     CollisionRadius=13.000000\n     CollisionHeight=5.180000\n     Mass=10.000000\n     Buoyancy=100.000000\n}\n",
            "name": "TurretItem.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "ActivateSound=Sound'DeusExSounds.Augmentation.CloakUp'",
                    "DeActivateSound=None",
                    "ChargeRemainingLabel=\"Box readiness:\"",
                    "ItemName=\"Portable Turret\"",
                    "PlayerViewOffset=(X=20.000000,Z=-12.000000)",
                    "PlayerViewMesh=LodMesh'DeusExDeco.BoxSmall'",
                    "PlayerViewScale=0.200000",
                    "PickupViewMesh=LodMesh'DeusExDeco.BoxSmall'",
                    "ThirdPersonMesh=LodMesh'DeusExDeco.BoxSmall'",
                    "ThirdPersonScale=0.250000",
                    "Charge=8",
                    "LandSound=Sound'DeusExSounds.Generic.DropLargeWeapon'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconArmorAdaptive'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconArmorAdaptive'",
                    "largeIconWidth=35",
                    "largeIconHeight=49",
                    "Description=\"s\"",
                    "beltDescription=\"BOX\"",
                    "Mesh=LodMesh'DeusExDeco.BoxSmall'",
                    "CollisionRadius=13.000000",
                    "CollisionHeight=5.180000",
                    "Mass=10.000000",
                    "Buoyancy=100.000000"
                ],
                "exec": [],
                "extends": "ChargedPickup",
                "functions": {
                    "ChargedPickupBegin": {
                        "body": "{\n   \n   CD = Spawn(Class'TempTurret',,,Player.Location + (Player.CollisionRadius+Default.CollisionRadius+30) * Vector(Player.ViewRotation) + vect(0,0,1) * 30 );\n   CD.Master  = Player;\n\n\tSuper.ChargedPickupBegin(Player);\n\t\n}",
                        "locals": [
                            "local TempTurret CD;",
                            "local Vector loc,X,Y,Z;"
                        ],
                        "modifiers": [],
                        "name": "ChargedPickupBegin",
                        "native": false,
                        "param": [
                            [
                                "DeusExPlayer",
                                "Player"
                            ]
                        ],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    },
                    "UsedUp": {
                        "body": "{\n\n\tif ( Pawn(Owner) != None )\n\t{\n\t\tbActivatable = false;\n\t\t\n\t}\n\tPlayer = DeusExPlayer(Owner);\n\n\tif (Player != None)\n\t{\n\t\tif (Player.inHand == Self)\n\t\t\tChargedPickupEnd(Player);\n\t}\n\n\tDestroy();\n}",
                        "locals": [
                            "local DeusExPlayer Player;"
                        ],
                        "modifiers": [],
                        "name": "UsedUp",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 73,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "TzBallSpawnPoint.uc": {
            "body": "//=============================================================================\n// TzBasketExitTrigger.\n//=============================================================================\nclass TzBallSpawnPoint extends Actor;\n\ndefaultproperties\n{\n}\n",
            "name": "TzBallSpawnPoint.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "Actor",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 9,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "TzBallSwitch.uc": {
            "body": "//=============================================================================\n// TzBallSwitch.\n//=============================================================================\nclass TzBallSwitch extends Switch2;\n\nvar bool bOn;\nvar() int MaxBalls;\nvar vector SpawnPointBB;\n\nreplication\n{\n   reliable if (Role == ROLE_Authority)\n      MaxBalls, ShowMessage;\n} \n\nfunction BeginPlay()\n{\n\tlocal TzBallSpawnPoint SPB;\n\t\n\tforeach AllActors(class'TzBallSpawnPoint',SPB)\n\t{\n\t\tSpawnPointBB = SPB.Location;\n\t\treturn;\n\t}\n}\n\nfunction Frob(Actor Frobber, Inventory frobWith)\n{\n\tlocal BasketballMP BMP;\n\tlocal int AmountOfBalls;\n\tSuper.Frob(Frobber, frobWith);\n\tSetOwner(Frobber);\n\t\n\tforeach AllActors(class'BasketballMP',BMP)\n\t{\n\t\t\tAmountOfBalls++;\n\t}\n\tif (AmountOfBalls <= MaxBalls)\n\t{\n\t\tSpawn(Class'BasketballMP',self,,SpawnPointBB);\n\t}\n\telse \n\t{\n\t\tShowMessage(DeusExPlayer(Frobber),\"There are enough balls!\"); \n\t}\n\t\n\tif (bOn)\n\t{\n\t\tPlaySound(sound'Switch4ClickOff');\n\t\tPlayAnim('Off');\n\t}\n\telse\n\t{\n\t\tPlaySound(sound'Switch4ClickOn');\n\t\tPlayAnim('On');\n\t}\n\n\tbOn = !bOn;\n}\n\nsimulated function ShowMessage(DeusExPlayer Player, string Message)\n{\n  local HUDMissionStartTextDisplay    HUD;\n  if ((Player.RootWindow != None) && (DeusExRootWindow(Player.RootWindow).HUD != None))\n  {\n    HUD = DeusExRootWindow(Player.RootWindow).HUD.startDisplay;\n  }\n  if(HUD != None)\n  {\n    HUD.shadowDist = 0;\n    HUD.Message = \"\";\n    HUD.charIndex = 0;\n    HUD.winText.SetText(\"\");\n    HUD.winTextShadow.SetText(\"\");\n    HUD.displayTime = 5.50;\n    HUD.perCharDelay = 0.30;\n    HUD.AddMessage(Message);\n    HUD.StartMessage();\n  }\n}\n\ndefaultproperties\n{\n     MaxBalls=3\n     ItemName=\"Press to bring more balls!\"\n}\n",
            "name": "TzBallSwitch.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "MaxBalls=3",
                    "ItemName=\"Press to bring more balls!\""
                ],
                "exec": [],
                "extends": "Switch2",
                "functions": {
                    "BeginPlay": {
                        "body": "{\n\t\n\tforeach AllActors(class'TzBallSpawnPoint',SPB)\n\t{\n\t\tSpawnPointBB = SPB.Location;\n\t\treturn;\n\t}\n}",
                        "locals": [
                            "local TzBallSpawnPoint SPB;"
                        ],
                        "modifiers": [],
                        "name": "BeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Frob": {
                        "body": "{\n\tSuper.Frob(Frobber, frobWith);\n\tSetOwner(Frobber);\n\t\n\tforeach AllActors(class'BasketballMP',BMP)\n\t{\n\t\t\tAmountOfBalls++;\n\t}\n\tif (AmountOfBalls <= MaxBalls)\n\t{\n\t\tSpawn(Class'BasketballMP',self,,SpawnPointBB);\n\t}\n\telse \n\t{\n\t\tShowMessage(DeusExPlayer(Frobber),\"There are enough balls!\"); \n\t}\n\t\n\tif (bOn)\n\t{\n\t\tPlaySound(sound'Switch4ClickOff');\n\t\tPlayAnim('Off');\n\t}\n\telse\n\t{\n\t\tPlaySound(sound'Switch4ClickOn');\n\t\tPlayAnim('On');\n\t}\n\n\tbOn = !bOn;\n}",
                        "locals": [
                            "local BasketballMP BMP;",
                            "local int AmountOfBalls;"
                        ],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    },
                    "ShowMessage": {
                        "body": "{\n  if ((Player.RootWindow != None) && (DeusExRootWindow(Player.RootWindow).HUD != None))\n  {\n    HUD = DeusExRootWindow(Player.RootWindow).HUD.startDisplay;\n  }\n  if(HUD != None)\n  {\n    HUD.shadowDist = 0;\n    HUD.Message = \"\";\n    HUD.charIndex = 0;\n    HUD.winText.SetText(\"\");\n    HUD.winTextShadow.SetText(\"\");\n    HUD.displayTime = 5.50;\n    HUD.perCharDelay = 0.30;\n    HUD.AddMessage(Message);\n    HUD.StartMessage();\n  }\n}",
                        "locals": [
                            "local HUDMissionStartTextDisplay    HUD;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "ShowMessage",
                        "native": false,
                        "param": [
                            [
                                "DeusExPlayer",
                                "Player"
                            ],
                            [
                                "string",
                                "Message"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 87,
                "replication": "",
                "states": [],
                "variables": [
                    "var bool bOn;",
                    "var() int MaxBalls;",
                    "var vector SpawnPointBB;"
                ]
            }
        },
        "TzBasketExitTrigger.uc": {
            "body": "//=============================================================================\n// TzBasketExitTrigger.\n//=============================================================================\nclass TzBasketExitTrigger extends Trigger;\n\nfunction Touch(actor Other)\n{\n\tlocal Actor DXPO;\n\tDXPO = Other.Owner;\n\tif (Other.IsA('BasketballMP'))\n\t{\n\t\tif(BasketballMP(Other).bAlreadyScored)\n\t\t{\n\t\t\tBasketballMP(Other).bAlreadyScored = False;\n\t\t\tDeusExPlayer(DXPO).BroadcastMessage(\"|c33CCFF\"@DeusExPlayer(DXPO).PlayerReplicationInfo.Playername@\"has scored a point in basketball!\");\n\t\tDeusExPlayer(DXPO).PlayerReplicationInfo.Score += 1;\n\t\tDeusExPlayer(DXPO).PlayerReplicationInfo.Streak += 1;\n\t\tPlaySound(Sound'DeusExSounds.UserInterface.LogSkillPoints', SLOT_None,2,,512);\n\t\t}\n\n\t}\n}\n\ndefaultproperties\n{\n}\n",
            "name": "TzBasketExitTrigger.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "Trigger",
                "functions": {
                    "Touch": {
                        "body": "{\n\tDXPO = Other.Owner;\n\tif (Other.IsA('BasketballMP'))\n\t{\n\t\tif(BasketballMP(Other).bAlreadyScored)\n\t\t{\n\t\t\tBasketballMP(Other).bAlreadyScored = False;\n\t\t\tDeusExPlayer(DXPO).BroadcastMessage(\"|c33CCFF\"@DeusExPlayer(DXPO).PlayerReplicationInfo.Playername@\"has scored a point in basketball!\");\n\t\tDeusExPlayer(DXPO).PlayerReplicationInfo.Score += 1;\n\t\tDeusExPlayer(DXPO).PlayerReplicationInfo.Streak += 1;\n\t\tPlaySound(Sound'DeusExSounds.UserInterface.LogSkillPoints', SLOT_None,2,,512);\n\t\t}\n\n\t}\n}",
                        "locals": [
                            "local Actor DXPO;"
                        ],
                        "modifiers": [],
                        "name": "Touch",
                        "native": false,
                        "param": [
                            [
                                "actor",
                                "Other"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 27,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "TzBasketTrigger.uc": {
            "body": "//=============================================================================\n// TzBasketTrigger.\n//=============================================================================\nclass TzBasketTrigger extends Trigger;\n\n#exec obj load file=..\\System\\DeusExSounds.u package=DeusExSounds\n\nfunction Touch(actor Other)\n{\n\tlocal Actor DXPO;\n\tDXPO = Other.Owner;\n\tif (Other.IsA('BasketballMP')&& DeusExPlayer(DXPO) != None && !BasketballMP(Other).bAlreadyScored)\n\t{\n\t\tBasketballMP(Other).bAlreadyScored = True;\n\t}\n}\n\ndefaultproperties\n{\n}\n",
            "name": "TzBasketTrigger.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [
                    "#exec obj load file=..\\System\\DeusExSounds.u package=DeusExSounds"
                ],
                "extends": "Trigger",
                "functions": {
                    "Touch": {
                        "body": "{\n\tDXPO = Other.Owner;\n\tif (Other.IsA('BasketballMP')&& DeusExPlayer(DXPO) != None && !BasketballMP(Other).bAlreadyScored)\n\t{\n\t\tBasketballMP(Other).bAlreadyScored = True;\n\t}\n}",
                        "locals": [
                            "local Actor DXPO;"
                        ],
                        "modifiers": [],
                        "name": "Touch",
                        "native": false,
                        "param": [
                            [
                                "actor",
                                "Other"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 21,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "TzBasketZone.uc": {
            "body": "//=============================================================================\n// TzBasketZone.\n//=============================================================================\nclass TzBasketZone extends ZoneInfo;\n\ndefaultproperties\n{\n}\n",
            "name": "TzBasketZone.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "ZoneInfo",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 9,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "TzBasketballZone.uc": {
            "body": "//=============================================================================\n// TzBasketballZone.\n//=============================================================================\nclass TzBasketballZone extends ZoneInfo;\n\nevent ActorEntered(actor Other)\n{\nlocal float avg;\n\tSuper.ActorEntered(Other);\n\t\tif(DeusExPlayer(Other) != None)\n\t{\n\t\tDeusExPlayer(Other).StopPoison();\n\t\tDeusExPlayer(Other).ExtinguishFire();\n\t\tDeusExPlayer(Other).drugEffectTimer = 0;\n\t\tDeusExPlayer(Other).ReducedDamageType = 'All';\n\t\t\tif(DeusExPlayer(Other).Health < 100)\n\t\t\t{\n\t\t\t\t\tDeusExPlayer(Other).HealPlayer(100, True);\n\t\t\t}\n\t}\n\tif (Other.IsA('PlaygroundContainers') || Other.IsA('Box'))\n\t{\n\t\tavg = (DeusExDecoration(Other).CollisionRadius + DeusExDecoration(Other).CollisionHeight) / 2;\n\t\tDeusExDecoration(Other).Frag(DeusExDecoration(Other).fragType, vect(20,20,20), avg/20.0, avg/5 + 1);\n\t\tOther.Destroy();\n\t}\n\telse if (Other.IsA('DeusExDecoration'))\n\t{\n\t\tDeusExDecoration(Other).bInvincible=True;\n\t}\n\telse if (Other.IsA('SpyDrone') && !SpyDrone(Other).bDisabled)\n\t{\n\t\tDeusExPlayer(SpyDrone(Other).Owner).ForceDroneOff();\n\t\tSpyDrone(Other).bDisabled = True;\n\t\tSpyDrone(Other).SetPhysics(PHYS_Falling);\n\t\tSpyDrone(Other).bBounce = True;\n\t\tSpyDrone(Other).LifeSpan = 10.0;\n\t\tSpyDrone(Other).Spawn(class'SmokeTrail',,, Other.Location);\n\t\tOther.Spawn(class'SphereEffect',,, Other.Location);\n\t}\n\telse if (Other.IsA('ThrownProjectile') && !Other.IsA('BasketballMP'))\n\t{\n\t\tOther.TakeDamage(15, None, Other.Location, vect(0,0,0), 'EMP');\n\t\t\t\tOther.PlaySound(sound'ProdFire', SLOT_None,,,, 2.0);\n\t\tOther.Spawn(class'SphereEffect',,, Other.Location);\n\t\t\t\tOther.Spawn(class'SmokeTrail',,, Other.Location);\n\t\tOther.LifeSpan = 10.0;\n\t}\n\telse if (Other.IsA('RocketLAW') || Other.IsA('HECannister20mm') || Other.isA('Rocket') || Other.isA('RocketWP')) \n\t{\n\t\tOther.PlaySound(sound'ProdFire', SLOT_None,,,, 2.0);\n\t\tOther.Spawn(class'SmokeTrail',,, Other.Location);\n\t\tOther.Spawn(class'SphereEffect',,, Other.Location);\n\t\t\t\tDeusExProjectile(Other).Destroy();\n\t}\n\telse if (Other.IsA('DeusExProjectile'))\n\t{\n\t\tOther.PlaySound(sound'ProdFire', SLOT_None,,,, 2.0);\n\t\tOther.Spawn(class'SphereEffect',,, Other.Location);\n\t\tDeusExProjectile(Other).Destroy();\n\t}\n\telse if (Other.IsA('ProjectileGenerator'))\n\t{\n\t\tProjectileGenerator(Other).Destroy();\n\t}\n\telse if(Other.IsA('BasketballMP'))\n\t{\n\t\tif (BasketballMP(Other).bDoomedToDestroy)\n\t\t{\n\t\t\tBasketballMP(Other).bDoomedToDestroy = False;\n\t\t\tBasketballMP(Other).SetTimer(0,False);\n\t\t}\n\t}\n}\n\nevent ActorLeaving(actor Other)\n{\n\tSuper.ActorLeaving(Other);\n\tDeusExPlayer(Other).ReducedDamageType = '';\n\tif(Other.IsA('BasketballMP'))\n\t{\n\t\tBasketballMP(Other).bDoomedToDestroy = True;\n\t\tBasketballMP(Other).SetTimer(15, False);\n\t}\n}\n\ndefaultproperties\n{\n}\n",
            "name": "TzBasketballZone.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "ZoneInfo",
                "functions": {
                    "ActorEntered": {
                        "body": "{\n\tSuper.ActorEntered(Other);\n\t\tif(DeusExPlayer(Other) != None)\n\t{\n\t\tDeusExPlayer(Other).StopPoison();\n\t\tDeusExPlayer(Other).ExtinguishFire();\n\t\tDeusExPlayer(Other).drugEffectTimer = 0;\n\t\tDeusExPlayer(Other).ReducedDamageType = 'All';\n\t\t\tif(DeusExPlayer(Other).Health < 100)\n\t\t\t{\n\t\t\t\t\tDeusExPlayer(Other).HealPlayer(100, True);\n\t\t\t}\n\t}\n\tif (Other.IsA('PlaygroundContainers') || Other.IsA('Box'))\n\t{\n\t\tavg = (DeusExDecoration(Other).CollisionRadius + DeusExDecoration(Other).CollisionHeight) / 2;\n\t\tDeusExDecoration(Other).Frag(DeusExDecoration(Other).fragType, vect(20,20,20), avg/20.0, avg/5 + 1);\n\t\tOther.Destroy();\n\t}\n\telse if (Other.IsA('DeusExDecoration'))\n\t{\n\t\tDeusExDecoration(Other).bInvincible=True;\n\t}\n\telse if (Other.IsA('SpyDrone') && !SpyDrone(Other).bDisabled)\n\t{\n\t\tDeusExPlayer(SpyDrone(Other).Owner).ForceDroneOff();\n\t\tSpyDrone(Other).bDisabled = True;\n\t\tSpyDrone(Other).SetPhysics(PHYS_Falling);\n\t\tSpyDrone(Other).bBounce = True;\n\t\tSpyDrone(Other).LifeSpan = 10.0;\n\t\tSpyDrone(Other).Spawn(class'SmokeTrail',,, Other.Location);\n\t\tOther.Spawn(class'SphereEffect',,, Other.Location);\n\t}\n\telse if (Other.IsA('ThrownProjectile') && !Other.IsA('BasketballMP'))\n\t{\n\t\tOther.TakeDamage(15, None, Other.Location, vect(0,0,0), 'EMP');\n\t\t\t\tOther.PlaySound(sound'ProdFire', SLOT_None,,,, 2.0);\n\t\tOther.Spawn(class'SphereEffect',,, Other.Location);\n\t\t\t\tOther.Spawn(class'SmokeTrail',,, Other.Location);\n\t\tOther.LifeSpan = 10.0;\n\t}\n\telse if (Other.IsA('RocketLAW') || Other.IsA('HECannister20mm') || Other.isA('Rocket') || Other.isA('RocketWP')) \n\t{\n\t\tOther.PlaySound(sound'ProdFire', SLOT_None,,,, 2.0);\n\t\tOther.Spawn(class'SmokeTrail',,, Other.Location);\n\t\tOther.Spawn(class'SphereEffect',,, Other.Location);\n\t\t\t\tDeusExProjectile(Other).Destroy();\n\t}\n\telse if (Other.IsA('DeusExProjectile'))\n\t{\n\t\tOther.PlaySound(sound'ProdFire', SLOT_None,,,, 2.0);\n\t\tOther.Spawn(class'SphereEffect',,, Other.Location);\n\t\tDeusExProjectile(Other).Destroy();\n\t}\n\telse if (Other.IsA('ProjectileGenerator'))\n\t{\n\t\tProjectileGenerator(Other).Destroy();\n\t}\n\telse if(Other.IsA('BasketballMP'))\n\t{\n\t\tif (BasketballMP(Other).bDoomedToDestroy)\n\t\t{\n\t\t\tBasketballMP(Other).bDoomedToDestroy = False;\n\t\t\tBasketballMP(Other).SetTimer(0,False);\n\t\t}\n\t}\n}",
                        "locals": [
                            "local float avg;"
                        ],
                        "modifiers": [],
                        "name": "ActorEntered",
                        "native": false,
                        "param": [
                            [
                                "actor",
                                "Other"
                            ]
                        ],
                        "return": ""
                    },
                    "ActorLeaving": {
                        "body": "{\n\tSuper.ActorLeaving(Other);\n\tDeusExPlayer(Other).ReducedDamageType = '';\n\tif(Other.IsA('BasketballMP'))\n\t{\n\t\tBasketballMP(Other).bDoomedToDestroy = True;\n\t\tBasketballMP(Other).SetTimer(15, False);\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "ActorLeaving",
                        "native": false,
                        "param": [
                            [
                                "actor",
                                "Other"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 90,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "TzBlockPlayers.uc": {
            "body": "//=============================================================================\n// TzBlockPlayers.\n//=============================================================================\t\t\nclass TzBlockPlayers extends Trigger;\t\t\n\nvar() vector KickVelocity;\nvar() name KickedClasses;\nvar() bool bKillVelocity;\nvar() bool bRandomize;\n\nsimulated function Touch( actor Other )\n{\n\tlocal Actor A;\n\n\tif ( !Other.IsA(KickedClasses) )\n\t\treturn;\n\tPendingTouch = Other.PendingTouch;\n\tOther.PendingTouch = self;\n\tif( Event != '' )\n\t\tforeach AllActors( class 'Actor', A, Event )\n\t\t\tA.Trigger( Other, Other.Instigator );\n}\n\nsimulated function PostTouch( actor Other )\n{\n\tlocal bool bWasFalling;\n\tlocal vector Push;\n\tlocal float PMag;\n\n\tbWasFalling = ( Other.Physics == PHYS_Falling );\n\tif ( bKillVelocity )\n\t\tPush = -1 * Other.Velocity;\n\telse\n\t\tPush.Z = -1 * Other.Velocity.Z;\n\tif ( bRandomize )\n\t{\n\t\tPMag = VSize(KickVelocity);\n\t\tPush += PMag * Normal(KickVelocity + 0.5 * PMag * VRand());\n\t}\n\telse\n\t\tPush += KickVelocity;\n\tOther.SetPhysics(PHYS_Falling);\n\tOther.Velocity += Push;\n}\n\ndefaultproperties\n{\n     KickedClasses=DeusExPlayer\n     bDirectional=True\n}\n",
            "name": "TzBlockPlayers.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "KickedClasses=DeusExPlayer",
                    "bDirectional=True"
                ],
                "exec": [],
                "extends": "Trigger",
                "functions": {
                    "PostTouch": {
                        "body": "{\n\n\tbWasFalling = ( Other.Physics == PHYS_Falling );\n\tif ( bKillVelocity )\n\t\tPush = -1 * Other.Velocity;\n\telse\n\t\tPush.Z = -1 * Other.Velocity.Z;\n\tif ( bRandomize )\n\t{\n\t\tPMag = VSize(KickVelocity);\n\t\tPush += PMag * Normal(KickVelocity + 0.5 * PMag * VRand());\n\t}\n\telse\n\t\tPush += KickVelocity;\n\tOther.SetPhysics(PHYS_Falling);\n\tOther.Velocity += Push;\n}",
                        "locals": [
                            "local bool bWasFalling;",
                            "local vector Push;",
                            "local float PMag;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PostTouch",
                        "native": false,
                        "param": [
                            [
                                "actor",
                                "Other"
                            ]
                        ],
                        "return": ""
                    },
                    "Touch": {
                        "body": "{\n\n\tif ( !Other.IsA(KickedClasses) )\n\t\treturn;\n\tPendingTouch = Other.PendingTouch;\n\tOther.PendingTouch = self;\n\tif( Event != '' )\n\t\tforeach AllActors( class 'Actor', A, Event )\n\t\t\tA.Trigger( Other, Other.Instigator );\n}",
                        "locals": [
                            "local Actor A;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Touch",
                        "native": false,
                        "param": [
                            [
                                "actor",
                                "Other"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 51,
                "replication": "",
                "states": [],
                "variables": [
                    "var() vector KickVelocity;",
                    "var() name KickedClasses;",
                    "var() bool bKillVelocity;",
                    "var() bool bRandomize;"
                ]
            }
        },
        "Ultima.uc": {
            "body": "//=============================================================================\n// Ultima.\n//=============================================================================\nclass Ultima expands DeusExProjectile;\n\nsimulated function Tick(float deltaTime)\n{\n\tlocal SmokeTrail s;\n\n\ttime += DeltaTime;\n\tDrawScale = FClamp(2.5*(time+0.5), 1.0, 6.0);\n\tif ((time > FRand() * 0.02) && (Level.NetMode != NM_DedicatedServer))\n\t{\n\t\ttime = 0;\n\n\t\t// spawn some trails\n\t\ts = Spawn(class'SmokeTrail',,, Location);\n\t\tif (s != None)\n\t\t{\n\t\t\ts.DrawScale = FRand() * 0.333;\n\t\t\ts.OrigScale = s.DrawScale;\n\t\t\ts.Texture = Texture'AlarmLightTex2';\n\t\t\ts.Velocity = VRand() * 50;\n\t\t\ts.OrigVel = s.Velocity;\n\t\t}\n\t}\n}\n\nsimulated function DrawExplosionEffects(vector HitLocation, vector HitNormal)\n{\n\tlocal int i;\n\tlocal Rotator rot;\n\tlocal SphereEffect sphere;\n\n\t// draw a cool light sphere\n\tsphere = Spawn(class'SphereEffect',,, HitLocation);\n\tif (sphere != None)\n\t{\n\tsphere.RemoteRole = ROLE_None;\n\tsphere.size = blastradius / 32.0;\n\tSphere.MultiSkins[0]=Texture'DeusExDeco.Skins.AlarmLightTex3';\n\t}\n}\n\nsimulated function PreBeginPlay()\n{\n}\n\ndefaultproperties\n{\n     bExplodes=True\n     blastRadius=96.000000\n     DamageType=Sabot\n     ItemName=\"Blood Sword\"\n     ItemArticle=\"the\"\n     speed=1000.000000\n     MaxSpeed=1000.000000\n     Damage=200.000000\n     MomentumTransfer=128\n     SpawnSound=Sound'DeusExSounds.UserInterface.DataLinkStart'\n     ImpactSound=Sound'DeusExSounds.Weapons.EMPGrenadeExplode'\n     ExplosionDecal=Class'DeusEx.BurnMark'\n     DrawType=DT_Sprite\n     Style=STY_Translucent\n     Texture=Texture'DeusExDeco.Skins.AlarmLightTex2'\n     bUnlit=True\n     SoundRadius=10\n     SoundVolume=255\n     SoundPitch=173\n}\n",
            "name": "Ultima.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bExplodes=True",
                    "blastRadius=96.000000",
                    "DamageType=Sabot",
                    "ItemName=\"Blood Sword\"",
                    "ItemArticle=\"the\"",
                    "speed=1000.000000",
                    "MaxSpeed=1000.000000",
                    "Damage=200.000000",
                    "MomentumTransfer=128",
                    "SpawnSound=Sound'DeusExSounds.UserInterface.DataLinkStart'",
                    "ImpactSound=Sound'DeusExSounds.Weapons.EMPGrenadeExplode'",
                    "ExplosionDecal=Class'DeusEx.BurnMark'",
                    "DrawType=DT_Sprite",
                    "Style=STY_Translucent",
                    "Texture=Texture'DeusExDeco.Skins.AlarmLightTex2'",
                    "bUnlit=True",
                    "SoundRadius=10",
                    "SoundVolume=255",
                    "SoundPitch=173"
                ],
                "exec": [],
                "extends": "DeusExProjectile",
                "functions": {
                    "DrawExplosionEffects": {
                        "body": "{\n\n\t// draw a cool light sphere\n\tsphere = Spawn(class'SphereEffect',,, HitLocation);\n\tif (sphere != None)\n\t{\n\tsphere.RemoteRole = ROLE_None;\n\tsphere.size = blastradius / 32.0;\n\tSphere.MultiSkins[0]=Texture'DeusExDeco.Skins.AlarmLightTex3';\n\t}\n}",
                        "locals": [
                            "local int i;",
                            "local Rotator rot;",
                            "local SphereEffect sphere;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "DrawExplosionEffects",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "HitLocation"
                            ],
                            [
                                "vector",
                                "HitNormal"
                            ]
                        ],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Tick": {
                        "body": "{\n\n\ttime += DeltaTime;\n\tDrawScale = FClamp(2.5*(time+0.5), 1.0, 6.0);\n\tif ((time > FRand() * 0.02) && (Level.NetMode != NM_DedicatedServer))\n\t{\n\t\ttime = 0;\n\n\t\t// spawn some trails\n\t\ts = Spawn(class'SmokeTrail',,, Location);\n\t\tif (s != None)\n\t\t{\n\t\t\ts.DrawScale = FRand() * 0.333;\n\t\t\ts.OrigScale = s.DrawScale;\n\t\t\ts.Texture = Texture'AlarmLightTex2';\n\t\t\ts.Velocity = VRand() * 50;\n\t\t\ts.OrigVel = s.Velocity;\n\t\t}\n\t}\n}",
                        "locals": [
                            "local SmokeTrail s;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltaTime"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 71,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "Ultima2.uc": {
            "body": "//=============================================================================\n// SatelliteLaser.\n//=============================================================================\nclass Ultima2 extends DeusExProjectile;\n\n\nsimulated function DrawExplosionEffects(Vector HitLocation, Vector HitNormal)\n{\n  local Pring pr;\n  local ssring sr;\n  local explosionlight l;\n  local explosionlarge expeffect;\n\tlocal int i;\n\tlocal Rotator rot;\n\tlocal pring sphere;\n\n\t// draw a cool light sphere\n\tsphere = Spawn(class'pring',,, HitLocation);\n\tif (sphere != None)\n\t{\n\tsphere.RemoteRole = ROLE_None;\n\tsphere.size = blastradius / 32.0;\n\tSphere.MultiSkins[0]=Texture'DeusExDeco.Skins.AlarmLightTex3';\n\t}\n\nl = spawn(class'ExplosionLight',,, HitLocation);\nif (l !=None)\n{\n  l.remoterole = Role_None;\n       l.size = 15;\n       l.LightHue = 128;\nl.LightBrightness = 255;\n       l.LightSaturation = 96;\n       l.LightEffect = LE_Shell;\n\n}\n      }\n\ndefaultproperties\n{\n     bExplodes=True\n     blastRadius=700.000000\n     DamageType=Sabot\n     ItemName=\"Blood Sword\"\n     ItemArticle=\"the\"\n     speed=3000.000000\n     MaxSpeed=3000.000000\n     Damage=500.000000\n     MomentumTransfer=100000\n     ImpactSound=Sound'DeusExSounds.Generic.BioElectricHiss'\n     Style=STY_Translucent\n     DrawScale=200.000000\n     ScaleGlow=10.000000\n     Fatness=120\n     bUnlit=True\n     SoundRadius=255\n     SoundVolume=255\n     TransientSoundVolume=90.000000\n     LightType=LT_SubtlePulse\n     LightBrightness=224\n     LightHue=51\n     LightRadius=255\n     Mass=1.000000\n}\n",
            "name": "Ultima2.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bExplodes=True",
                    "blastRadius=700.000000",
                    "DamageType=Sabot",
                    "ItemName=\"Blood Sword\"",
                    "ItemArticle=\"the\"",
                    "speed=3000.000000",
                    "MaxSpeed=3000.000000",
                    "Damage=500.000000",
                    "MomentumTransfer=100000",
                    "ImpactSound=Sound'DeusExSounds.Generic.BioElectricHiss'",
                    "Style=STY_Translucent",
                    "DrawScale=200.000000",
                    "ScaleGlow=10.000000",
                    "Fatness=120",
                    "bUnlit=True",
                    "SoundRadius=255",
                    "SoundVolume=255",
                    "TransientSoundVolume=90.000000",
                    "LightType=LT_SubtlePulse",
                    "LightBrightness=224",
                    "LightHue=51",
                    "LightRadius=255",
                    "Mass=1.000000"
                ],
                "exec": [],
                "extends": "DeusExProjectile",
                "functions": {
                    "DrawExplosionEffects": {
                        "body": "{\n\n\t// draw a cool light sphere\n\tsphere = Spawn(class'pring',,, HitLocation);\n\tif (sphere != None)\n\t{\n\tsphere.RemoteRole = ROLE_None;\n\tsphere.size = blastradius / 32.0;\n\tSphere.MultiSkins[0]=Texture'DeusExDeco.Skins.AlarmLightTex3';\n\t}\n\nl = spawn(class'ExplosionLight',,, HitLocation);\nif (l !=None)\n{\n  l.remoterole = Role_None;\n       l.size = 15;\n       l.LightHue = 128;\nl.LightBrightness = 255;\n       l.LightSaturation = 96;\n       l.LightEffect = LE_Shell;\n\n}\n      }",
                        "locals": [
                            "local Pring pr;",
                            "local ssring sr;",
                            "local explosionlight l;",
                            "local explosionlarge expeffect;",
                            "local int i;",
                            "local Rotator rot;",
                            "local pring sphere;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "DrawExplosionEffects",
                        "native": false,
                        "param": [
                            [
                                "Vector",
                                "HitLocation"
                            ],
                            [
                                "Vector",
                                "HitNormal"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 65,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "VIPCard.uc": {
            "body": "//=============================================================================\n// VIPCard.\n//=============================================================================\nclass VIPCard expands DeusExPickup;\n\n// ----------------------------------------------------------------------\n// TestMPBeltSpot()\n// Returns true if the suggested belt location is ok for the object in mp.\n// ----------------------------------------------------------------------\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\ndefaultproperties\n{\n     bCanHaveMultipleCopies=True\n     ItemName=\"VIP Pass\"\n     PlayerViewOffset=(X=30.000000,Z=-12.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.Credits'\n     PickupViewMesh=LodMesh'DeusExItems.Credits'\n     ThirdPersonMesh=LodMesh'DeusExItems.Credits'\n     LandSound=Sound'DeusExSounds.Generic.PlasticHit1'\n     Icon=Texture'DeusExUI.Icons.BeltIconCredits'\n     beltDescription=\"VIP Pass\"\n     Mesh=LodMesh'DeusExItems.Credits'\n     MultiSkins(0)=Texture'Extras.Eggs.Matrix_A00'\n     CollisionRadius=7.000000\n     CollisionHeight=0.550000\n     Mass=2.000000\n     Buoyancy=3.000000\n}\n",
            "name": "VIPCard.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bCanHaveMultipleCopies=True",
                    "ItemName=\"VIP Pass\"",
                    "PlayerViewOffset=(X=30.000000,Z=-12.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.Credits'",
                    "PickupViewMesh=LodMesh'DeusExItems.Credits'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.Credits'",
                    "LandSound=Sound'DeusExSounds.Generic.PlasticHit1'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconCredits'",
                    "beltDescription=\"VIP Pass\"",
                    "Mesh=LodMesh'DeusExItems.Credits'",
                    "MultiSkins(0)=Texture'Extras.Eggs.Matrix_A00'",
                    "CollisionRadius=7.000000",
                    "CollisionHeight=0.550000",
                    "Mass=2.000000",
                    "Buoyancy=3.000000"
                ],
                "exec": [],
                "extends": "DeusExPickup",
                "functions": {
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 34,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "VialBlood.uc": {
            "body": "//-----------------------------------------------------------\n//\n//-----------------------------------------------------------\nclass VialBlood extends CraftingMaterial;\n\nfunction bool OtherRequirements()\n{\n\tlocal WeaponNanoSword GS;\n\tlocal WeaponNanoSword2 GS2;\n\tlocal bool bFound, bFound2;\n\t\n\tforeach AllActors(class'WeaponNanosword',GS)\n\t\tif(GS.Owner == Owner && GS.ItemName==\"Dragon's Tooth Sword\")\n\t\t\tbFound=True;\n\t\t\t\n\n\tforeach AllActors(class'WeaponNanosword2',GS2)\n\t\tif(GS2.Owner == Owner && GS.ItemName==\"Dragon's Tooth Sword\")\n\t\t\tbFound2=True;\n\t\n\tif(bFound)\n\t{\n\t\tforeach AllActors(class'WeaponNanosword',GS)\n\t\t\tif(GS.Owner == Owner && GS.ItemName==\"Dragon's Tooth Sword\")\n\t\t\t\tGS.Destroy();\n\t\treturn True;\n\t}\n\tif(bFound2)\n\t{\n\t\tforeach AllActors(class'WeaponNanosword2',GS2)\n\t\t\tif(GS2.Owner == Owner && GS2.ItemName==\"Dragon's Tooth Sword\")\n\t\t\t\tGS2.Destroy();\n\t\treturn True;\n\t}\n}\n\ndefaultproperties\n{\n     InvResult=Class'PartyStuff.WeaponBloodSword'\n     NumNeeded=1\n     DispStr=\"Requires 1x Vial of Blood, 1x Dragon's Tooth Sword to make Blood Sword\"\n     ItemName=\"Vial of Blood\"\n     PlayerViewMesh=LodMesh'DeusExItems.VialAmbrosia'\n     PickupViewMesh=LodMesh'DeusExItems.VialAmbrosia'\n     ThirdPersonMesh=LodMesh'DeusExItems.VialAmbrosia'\n     Icon=Texture'PGAssets.Icons.BeltIconCraftingFlask'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconVialAmbrosia'\n     largeIconWidth=18\n     largeIconHeight=44\n     beltDescription=\"BLOOD\"\n     Mesh=LodMesh'DeusExItems.BioCell'\n     MultiSkins(1)=Texture'DeusExDeco.Skins.AlarmLightTex3'\n     CollisionRadius=2.200000\n     CollisionHeight=4.890000\n     Mass=2.000000\n     Buoyancy=4.000000\n}\n",
            "name": "VialBlood.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "InvResult=Class'PartyStuff.WeaponBloodSword'",
                    "NumNeeded=1",
                    "DispStr=\"Requires 1x Vial of Blood, 1x Dragon's Tooth Sword to make Blood Sword\"",
                    "ItemName=\"Vial of Blood\"",
                    "PlayerViewMesh=LodMesh'DeusExItems.VialAmbrosia'",
                    "PickupViewMesh=LodMesh'DeusExItems.VialAmbrosia'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.VialAmbrosia'",
                    "Icon=Texture'PGAssets.Icons.BeltIconCraftingFlask'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconVialAmbrosia'",
                    "largeIconWidth=18",
                    "largeIconHeight=44",
                    "beltDescription=\"BLOOD\"",
                    "Mesh=LodMesh'DeusExItems.BioCell'",
                    "MultiSkins(1)=Texture'DeusExDeco.Skins.AlarmLightTex3'",
                    "CollisionRadius=2.200000",
                    "CollisionHeight=4.890000",
                    "Mass=2.000000",
                    "Buoyancy=4.000000"
                ],
                "exec": [],
                "extends": "CraftingMaterial",
                "functions": {
                    "OtherRequirements": {
                        "body": "{\n\t\n\tforeach AllActors(class'WeaponNanosword',GS)\n\t\tif(GS.Owner == Owner && GS.ItemName==\"Dragon's Tooth Sword\")\n\t\t\tbFound=True;\n\t\t\t\n\n\tforeach AllActors(class'WeaponNanosword2',GS2)\n\t\tif(GS2.Owner == Owner && GS.ItemName==\"Dragon's Tooth Sword\")\n\t\t\tbFound2=True;\n\t\n\tif(bFound)\n\t{\n\t\tforeach AllActors(class'WeaponNanosword',GS)\n\t\t\tif(GS.Owner == Owner && GS.ItemName==\"Dragon's Tooth Sword\")\n\t\t\t\tGS.Destroy();\n\t\treturn True;\n\t}\n\tif(bFound2)\n\t{\n\t\tforeach AllActors(class'WeaponNanosword2',GS2)\n\t\t\tif(GS2.Owner == Owner && GS2.ItemName==\"Dragon's Tooth Sword\")\n\t\t\t\tGS2.Destroy();\n\t\treturn True;\n\t}\n}",
                        "locals": [
                            "local WeaponNanoSword GS;",
                            "local WeaponNanoSword2 GS2;",
                            "local bool bFound, bFound2;"
                        ],
                        "modifiers": [],
                        "name": "OtherRequirements",
                        "native": false,
                        "param": [],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 58,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "VialGrow.uc": {
            "body": "//=============================================================================\n// VialAmbrosia.\n//=============================================================================\nclass VialGrow extends DeusExPickup;\n\nvar bool bOn;\n\nstate Activated\n{\n\tfunction Activate()\n\t{\n\t\t// can't turn it off\n\t}\n\n\tfunction BeginState()\n\t{\n\t\tlocal DeusExPlayer player;\n\t\tSuper.BeginState();\n\n\t\tplayer = DeusExPlayer(Owner);\n\t\tif (player != None)\n\n\t\tbOn = !bOn;\n\t\t\n\t\tif(bOn)\n\t\t\tDeusExPlayer(Owner).ClientMessage(\"Grow activated.\");\n\t\telse\n\t\t\tDeusExPlayer(Owner).ClientMessage(\"Grow de-activated.\");\n\tGotoState('DeActivated');\n\t}\nBegin:\n}\n\ndefaultproperties\n{\n     maxCopies=1\n     bCanHaveMultipleCopies=True\n     bActivatable=True\n     ItemName=\"Grow Vial\"\n     ItemArticle=\"an\"\n     PlayerViewOffset=(X=30.000000,Z=-12.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.VialAmbrosia'\n     PickupViewMesh=LodMesh'DeusExItems.VialAmbrosia'\n     ThirdPersonMesh=LodMesh'DeusExItems.VialAmbrosia'\n     LandSound=Sound'DeusExSounds.Generic.GlassHit1'\n     Icon=Texture'DeusExUI.Icons.BeltIconVialAmbrosia'\n     M_Activated=\"\"\n     largeIcon=Texture'DeusExUI.Icons.LargeIconVialAmbrosia'\n     largeIconWidth=18\n     largeIconHeight=44\n     Description=\"The only known vaccine against the 'Gray Death.' Unfortunately, it is quickly metabolized by the body making its effects temporary at best.\"\n     beltDescription=\"GROW\"\n     Mesh=LodMesh'DeusExItems.VialAmbrosia'\n     CollisionRadius=2.200000\n     CollisionHeight=4.890000\n     Mass=2.000000\n     Buoyancy=3.000000\n}\n",
            "name": "VialGrow.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "maxCopies=1",
                    "bCanHaveMultipleCopies=True",
                    "bActivatable=True",
                    "ItemName=\"Grow Vial\"",
                    "ItemArticle=\"an\"",
                    "PlayerViewOffset=(X=30.000000,Z=-12.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.VialAmbrosia'",
                    "PickupViewMesh=LodMesh'DeusExItems.VialAmbrosia'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.VialAmbrosia'",
                    "LandSound=Sound'DeusExSounds.Generic.GlassHit1'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconVialAmbrosia'",
                    "M_Activated=\"\"",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconVialAmbrosia'",
                    "largeIconWidth=18",
                    "largeIconHeight=44",
                    "Description=\"The only known vaccine against the 'Gray Death.' Unfortunately, it is quickly metabolized by the body making its effects temporary at best.\"",
                    "beltDescription=\"GROW\"",
                    "Mesh=LodMesh'DeusExItems.VialAmbrosia'",
                    "CollisionRadius=2.200000",
                    "CollisionHeight=4.890000",
                    "Mass=2.000000",
                    "Buoyancy=3.000000"
                ],
                "exec": [],
                "extends": "DeusExPickup",
                "functions": {
                    "Activate": {
                        "body": "{\n\t\t// can't turn it off\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Activate",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "BeginState": {
                        "body": "{\n\t\tSuper.BeginState();\n\n\t\tplayer = DeusExPlayer(Owner);\n\t\tif (player != None)\n\n\t\tbOn = !bOn;\n\t\t\n\t\tif(bOn)\n\t\t\tDeusExPlayer(Owner).ClientMessage(\"Grow activated.\");\n\t\telse\n\t\t\tDeusExPlayer(Owner).ClientMessage(\"Grow de-activated.\");\n\tGotoState('DeActivated');\n\t}",
                        "locals": [
                            "local DeusExPlayer player;"
                        ],
                        "modifiers": [],
                        "name": "BeginState",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 59,
                "replication": "",
                "states": [],
                "variables": [
                    "var bool bOn;"
                ]
            }
        },
        "VialNanites.uc": {
            "body": "//-----------------------------------------------------------\n//\n//-----------------------------------------------------------\nclass VialNanites extends CraftingMaterial;\n\nfunction bool OtherRequirements()\n{\n\tlocal WeaponNanoSword GS;\n\tlocal WeaponNanoSword2 GS2;\n\tlocal bool bFound, bFound2;\n\t\n\tforeach AllActors(class'WeaponNanosword',GS)\n\t\tif(GS.Owner == Owner && GS.ItemName==\"Dragon's Tooth Sword\")\n\t\t\tbFound=True;\n\t\t\t\n\n\tforeach AllActors(class'WeaponNanosword2',GS2)\n\t\tif(GS2.Owner == Owner && GS.ItemName==\"Dragon's Tooth Sword\")\n\t\t\tbFound2=True;\n\t\n\tif(bFound)\n\t{\n\t\tforeach AllActors(class'WeaponNanosword',GS)\n\t\t\tif(GS.Owner == Owner && GS.ItemName==\"Dragon's Tooth Sword\")\n\t\t\t\tGS.Destroy();\n\t\treturn True;\n\t}\n\tif(bFound2)\n\t{\n\t\tforeach AllActors(class'WeaponNanosword2',GS2)\n\t\t\tif(GS2.Owner == Owner && GS2.ItemName==\"Dragon's Tooth Sword\")\n\t\t\t\tGS2.Destroy();\n\t\treturn True;\n\t}\n}\n\ndefaultproperties\n{\n     InvResult=Class'PartyStuff.WeaponAugrist'\n     NumNeeded=7\n     DispStr=\"Requires 7x Vial of Nanites, 1x Dragon's Tooth Sword to make Augrist\"\n     ItemName=\"Vial of Concentrated Nanites\"\n     PlayerViewMesh=LodMesh'DeusExItems.VialAmbrosia'\n     PickupViewMesh=LodMesh'DeusExItems.VialAmbrosia'\n     ThirdPersonMesh=LodMesh'DeusExItems.VialAmbrosia'\n     Icon=Texture'PGAssets.Icons.BeltIconCraftingFlask'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconVialAmbrosia'\n     largeIconWidth=18\n     largeIconHeight=44\n     beltDescription=\"NANITES\"\n     Mesh=LodMesh'DeusExItems.BioCell'\n     MultiSkins(1)=Texture'PGAssets.Skins.wtf'\n     CollisionRadius=2.200000\n     CollisionHeight=4.890000\n     Mass=2.000000\n     Buoyancy=4.000000\n}\n",
            "name": "VialNanites.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "InvResult=Class'PartyStuff.WeaponAugrist'",
                    "NumNeeded=7",
                    "DispStr=\"Requires 7x Vial of Nanites, 1x Dragon's Tooth Sword to make Augrist\"",
                    "ItemName=\"Vial of Concentrated Nanites\"",
                    "PlayerViewMesh=LodMesh'DeusExItems.VialAmbrosia'",
                    "PickupViewMesh=LodMesh'DeusExItems.VialAmbrosia'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.VialAmbrosia'",
                    "Icon=Texture'PGAssets.Icons.BeltIconCraftingFlask'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconVialAmbrosia'",
                    "largeIconWidth=18",
                    "largeIconHeight=44",
                    "beltDescription=\"NANITES\"",
                    "Mesh=LodMesh'DeusExItems.BioCell'",
                    "MultiSkins(1)=Texture'PGAssets.Skins.wtf'",
                    "CollisionRadius=2.200000",
                    "CollisionHeight=4.890000",
                    "Mass=2.000000",
                    "Buoyancy=4.000000"
                ],
                "exec": [],
                "extends": "CraftingMaterial",
                "functions": {
                    "OtherRequirements": {
                        "body": "{\n\t\n\tforeach AllActors(class'WeaponNanosword',GS)\n\t\tif(GS.Owner == Owner && GS.ItemName==\"Dragon's Tooth Sword\")\n\t\t\tbFound=True;\n\t\t\t\n\n\tforeach AllActors(class'WeaponNanosword2',GS2)\n\t\tif(GS2.Owner == Owner && GS.ItemName==\"Dragon's Tooth Sword\")\n\t\t\tbFound2=True;\n\t\n\tif(bFound)\n\t{\n\t\tforeach AllActors(class'WeaponNanosword',GS)\n\t\t\tif(GS.Owner == Owner && GS.ItemName==\"Dragon's Tooth Sword\")\n\t\t\t\tGS.Destroy();\n\t\treturn True;\n\t}\n\tif(bFound2)\n\t{\n\t\tforeach AllActors(class'WeaponNanosword2',GS2)\n\t\t\tif(GS2.Owner == Owner && GS2.ItemName==\"Dragon's Tooth Sword\")\n\t\t\t\tGS2.Destroy();\n\t\treturn True;\n\t}\n}",
                        "locals": [
                            "local WeaponNanoSword GS;",
                            "local WeaponNanoSword2 GS2;",
                            "local bool bFound, bFound2;"
                        ],
                        "modifiers": [],
                        "name": "OtherRequirements",
                        "native": false,
                        "param": [],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 58,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "Vortex.uc": {
            "body": "//=============================================================================\n// Vortex\n//=============================================================================\nclass Vortex extends Projectile;\n\n//var chunktrail trail;\nvar int TickDelay;\nvar int Ticks;\nvar bool bVAdded, bPlayedStartSound;\nvar bool bVortexSucking,bVortexStopped;\nvar float VortexGravity, VortexRadius;\nvar SphereEffectXL sp;\n\nvar() localized string DirectHitString, SuicideString, SuicideFString;\nvar() float DamageRadius;\n\nreplication\n{\n   Reliable if ( Role == Role_Authority )\n      bVortexSucking;\n}\n\nsimulated function PostBeginPlay()\n{\n\n   Super.PostBeginPlay();\n   \n   Velocity = Vector(Rotation) * Speed;\n   Velocity.Z += 200;\n   SetTimer(0.05, True);\n   RandSpin(30000);\n}\n\n\nsimulated function Tick (float DeltaTime)\n{\n\t//spawns lightballs all around\n\tif(bVortexSucking)\n\t\tSpawnLights();\n\t\n   if ( Ticks - TickDelay == 15 )\n   {\n      if ( !bVAdded )\n      {\n          Velocity.Z += 15;\n         bVAdded = True;\n      }\n   }\n   \n   if ( Ticks - TickDelay > 15 )\n      Velocity -= Region.Zone.ZoneGravity * DeltaTime * 0.8;\n   \n   if ( Ticks - TickDelay > 25 )\n      DrawScale = Min(1 + ((Ticks - TickDelay) - 25) * 0.25, 2.0);\n\n   if ( Ticks - TickDelay == 40 )\n   {\n\t  \n\t  //Owner.PlaySound(Sound'DXRVUltimate.Effect.Teleport01',SLOT_None,16384);\n      Velocity = vect(0,0,0);\n      SetPhysics(PHYS_Rotating);\n\t  bVortexSucking = True;\n   }\n   \n   //if ( Ticks - TickDelay == 70 )\n    //     bVortexSucking = True;\n   \n   if ( Ticks - TickDelay == 300)\n   {\n      AmbientSound = None;\n      PlaySound(MiscSound,, 255.0,, 6000.00);\n   }\n   else if ( Default.LifeSpan - LifeSpan > 6.0 + TickDelay * 0.05 && AmbientSound == None )\n   {\t\n      //AmbientSound = Sound'DXRVUltimate.Effect.VortexRun';\n      SoundVolume = 255;\n      SoundRadius = 6000;\n   }\n   else if ( Default.LifeSpan - LifeSpan > TickDelay * 0.05 && !bPlayedStartSound )\n   {\n      PlaySound(SpawnSound,, 255.0,, 6000.00);\n      bPlayedStartSound = True;\n   }\n}\n\nsimulated function Destroyed()\n{\n\tbVortexSucking = False;\n\n}\n\n\nsimulated function LoopRunAnim(float Rate)\n{\n  // LoopAnim('VortexRun', Rate);\n}\n\n\nsimulated function SetVictimPhysics(actor Victim)\n{\n   if ( Victim.Physics != PHYS_Falling && (!Victim.IsA('Pawn') || !Victim.Region.Zone.bWaterZone) ) \n   {\n      Victim.SetPhysics(PHYS_Falling);\n      if ( Victim.IsA('Pawn') )\n         Pawn(Victim).Falling();\n   }\n}\n\n\nfunction SetKillType(Pawn Killer, Pawn Victim)\n{\n   if ( Killer == None || Victim == None )\n      return;\n   if ( Killer != Victim )\n      Level.Game.SpecialDamageString = DirectHitString;\n   else if ( Killer.bIsFemale )\n      Level.Game.SpecialDamageString = SuicideFString;\n   else\n      Level.Game.SpecialDamageString = SuicideString;\n}\n\n\nfunction SplashDamage()\n{\n   local actor Victim;\n   local float dist, damageScale;\n\n   if ( bHurtEntry )\n      return;\n   bHurtEntry = true;\n\n   foreach VisibleCollidingActors(class 'Actor', Victim, DamageRadius, Location)\n      if ( Victim != Self ) {\n         dist = FMax(1, VSize(Victim.Location - Location));\n         damageScale = 1 - FClamp((dist - Victim.CollisionRadius) / DamageRadius, 0, 1);\n         SetKillType(Instigator, Pawn(Victim));\n         Victim.TakeDamage(damageScale * Damage, Instigator, Victim.Location, vect(0,0,0), MyDamageType);\n      }\n\n   bHurtEntry = false;\n}\n\n\nsimulated function VortexTarget()\n{\n   local float Distance;\n   local vector Direction;\n   local Actor Victim;\n   local bool bVictimInSight;\n\n   // suck (almost) everything in\n   ForEach RadiusActors(class'Actor', Victim, VortexRadius, Location)\n   {\n\t   if(Victim!=Owner)\n\t   {\n\t      bVictimInSight = FastTrace(Location, Victim.Location);\n\n\t       if (Victim.Class != Class && !Victim.IsA('StationaryPawn')  &&  !Victim.bHidden && Victim.Physics != PHYS_Trailer &&  ( (Victim.bIsPawn || Victim.IsA('Carcass')) || Victim.IsA('TranslocatorTarget') || ( (Victim.IsA('Projectile') && Victim.Physics == PHYS_Falling) )   ) )\n\t       {\n\t         if ( Pawn(Victim) == None || !Pawn(Victim).bIsPlayer || !Pawn(Victim).PlayerReplicationInfo.bIsSpectator )\n\t         {\n\t            Direction = Location - Victim.Location;\n\t            Distance = 2.1 - VSize(Direction * 2) / VortexRadius;\n\t            Direction = Normal(Direction);\n\t            if ( !bVictimInSight )\n\t               Direction *= 0.3;\n\t            SetVictimPhysics(Victim);\n\t            Victim.Velocity += Direction * VortexGravity * 0.2 * Square(Distance);\n\t         }\n\t        }\n\t\t\t\n\t      if ( Victim.Role == ROLE_Authority && Victim.bIsPawn\n\t            && (bVictimInSight || VSize(Location - Victim.Location) < VortexRadius * 0.8) )\n\t      {\n\t         Pawn(Victim).FearThisSpot(Self);\n\t      }\n\t\t  \n\t      if (Victim.bIsPawn &&  Role == ROLE_Authority  && Pawn(Victim).Health > 0 && bVictimInSight\n\t            && VSize(Location - Victim.Location) < DamageRadius * 0.4 )\n\t      {\n\t         SetKillType(Instigator, Pawn(Victim));\n\t         Pawn(Victim).Health = -1000;\n\t         Pawn(Victim).Died(Instigator, MyDamageType, Victim.Location);\n\t      }\n\t  }\n   }\n   SplashDamage();\n}\n\n\nsimulated function Landed( vector HitNormal )\n{\n   HitWall(HitNormal, None);\n}\n\nsimulated function ProcessTouch( actor Other, vector HitLocation )\n{\n   HitWall(Normal(HitLocation - Other.Location), None );\n}\n\nsimulated function HitWall( vector HitNormal, actor Wall )\n{\n   Velocity = 0.75 * ((Velocity dot HitNormal) * HitNormal * (-2.0) + Velocity);   // Reflect off Wall w/damping\n   speed = VSize(Velocity);\n   if ( Velocity.Z > 400 )\n      Velocity.Z = 0.5 * (400 + Velocity.Z);\n}\n\n\nsimulated function Timer()\n{\n   SetTimer(0.05, True);\n   LoopRunAnim(Min(0.25 + (Ticks * 0.05), 1.0));\n   Ticks += 1;\n   Velocity -= Velocity * 0.1;\n   if ( bVortexSucking )\n      VortexTarget();\n}\n\nfunction SpawnLights()\n{\n\tlocal int randomheight,randomNum;\n\tlocal vector vec1,summonLocation, PlayerHitLocation;\n\tlocal LightBall lightB;\n\n\trandomheight=Rand(40);\n\trandomNum=Rand(4);\n\n\tvec1=VRand();\n\tvec1*=500;\n\n\tsummonLocation = vec1+Location;\n\tsummonLocation.z += randomheight;\n\tPlayerHitLocation = Location;\n\tPlayerHitLocation.z += randomheight;\n\n\tlightB=Spawn(class'LightBall',,, summonLocation, rotator(PlayerHitLocation-summonLocation));\n\tif (lightB!=None)\n\t{\n\t\t\tlightB.Texture=Texture'DeusExDeco.Skins.AlarmLightTex6';\n\t\t\tlightB.TimeLimit=1.5;\n\t}\t\n}\n\ndefaultproperties\n{\n     VortexGravity=120.000000\n     VortexRadius=7000.000000\n     DamageRadius=200.000000\n     speed=600.000000\n     Damage=10.000000\n     MyDamageType=SpecialDamage\n     LifeSpan=20.000000\n     Skin=FireTexture'Effects.liquid.Virus_SFX'\n     Mesh=LodMesh'DeusExDeco.Basketball'\n     AmbientGlow=67\n     bUnlit=True\n     SoundRadius=112\n     SoundVolume=255\n     CollisionRadius=5.000000\n     CollisionHeight=5.000000\n     bBounce=True\n     bFixedRotationDir=True\n     DesiredRotation=(Pitch=12000,Yaw=5666,Roll=2334)\n}\n",
            "name": "Vortex.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "VortexGravity=120.000000",
                    "VortexRadius=7000.000000",
                    "DamageRadius=200.000000",
                    "speed=600.000000",
                    "Damage=10.000000",
                    "MyDamageType=SpecialDamage",
                    "LifeSpan=20.000000",
                    "Skin=FireTexture'Effects.liquid.Virus_SFX'",
                    "Mesh=LodMesh'DeusExDeco.Basketball'",
                    "AmbientGlow=67",
                    "bUnlit=True",
                    "SoundRadius=112",
                    "SoundVolume=255",
                    "CollisionRadius=5.000000",
                    "CollisionHeight=5.000000",
                    "bBounce=True",
                    "bFixedRotationDir=True",
                    "DesiredRotation=(Pitch=12000,Yaw=5666,Roll=2334)"
                ],
                "exec": [],
                "extends": "Projectile",
                "functions": {
                    "Destroyed": {
                        "body": "{\n\tbVortexSucking = False;\n\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Destroyed",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "HitWall": {
                        "body": "{\n   Velocity = 0.75 * ((Velocity dot HitNormal) * HitNormal * (-2.0) + Velocity);   // Reflect off Wall w/damping\n   speed = VSize(Velocity);\n   if ( Velocity.Z > 400 )\n      Velocity.Z = 0.5 * (400 + Velocity.Z);\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "HitWall",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "HitNormal"
                            ],
                            [
                                "actor",
                                "Wall"
                            ]
                        ],
                        "return": ""
                    },
                    "Landed": {
                        "body": "{\n   HitWall(HitNormal, None);\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Landed",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "HitNormal"
                            ]
                        ],
                        "return": ""
                    },
                    "LoopRunAnim": {
                        "body": "{\n  // LoopAnim('VortexRun', Rate);\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "LoopRunAnim",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "Rate"
                            ]
                        ],
                        "return": ""
                    },
                    "PostBeginPlay": {
                        "body": "{\n\n   Super.PostBeginPlay();\n   \n   Velocity = Vector(Rotation) * Speed;\n   Velocity.Z += 200;\n   SetTimer(0.05, True);\n   RandSpin(30000);\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ProcessTouch": {
                        "body": "{\n   HitWall(Normal(HitLocation - Other.Location), None );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "ProcessTouch",
                        "native": false,
                        "param": [
                            [
                                "actor",
                                "Other"
                            ],
                            [
                                "vector",
                                "HitLocation"
                            ]
                        ],
                        "return": ""
                    },
                    "SetKillType": {
                        "body": "{\n   if ( Killer == None || Victim == None )\n      return;\n   if ( Killer != Victim )\n      Level.Game.SpecialDamageString = DirectHitString;\n   else if ( Killer.bIsFemale )\n      Level.Game.SpecialDamageString = SuicideFString;\n   else\n      Level.Game.SpecialDamageString = SuicideString;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "SetKillType",
                        "native": false,
                        "param": [
                            [
                                "Pawn",
                                "Killer"
                            ],
                            [
                                "Pawn",
                                "Victim"
                            ]
                        ],
                        "return": ""
                    },
                    "SetVictimPhysics": {
                        "body": "{\n   if ( Victim.Physics != PHYS_Falling && (!Victim.IsA('Pawn') || !Victim.Region.Zone.bWaterZone) ) \n   {\n      Victim.SetPhysics(PHYS_Falling);\n      if ( Victim.IsA('Pawn') )\n         Pawn(Victim).Falling();\n   }\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "SetVictimPhysics",
                        "native": false,
                        "param": [
                            [
                                "actor",
                                "Victim"
                            ]
                        ],
                        "return": ""
                    },
                    "SpawnLights": {
                        "body": "{\n\n\trandomheight=Rand(40);\n\trandomNum=Rand(4);\n\n\tvec1=VRand();\n\tvec1*=500;\n\n\tsummonLocation = vec1+Location;\n\tsummonLocation.z += randomheight;\n\tPlayerHitLocation = Location;\n\tPlayerHitLocation.z += randomheight;\n\n\tlightB=Spawn(class'LightBall',,, summonLocation, rotator(PlayerHitLocation-summonLocation));\n\tif (lightB!=None)\n\t{\n\t\t\tlightB.Texture=Texture'DeusExDeco.Skins.AlarmLightTex6';\n\t\t\tlightB.TimeLimit=1.5;\n\t}\t\n}",
                        "locals": [
                            "local int randomheight,randomNum;",
                            "local vector vec1,summonLocation, PlayerHitLocation;",
                            "local LightBall lightB;"
                        ],
                        "modifiers": [],
                        "name": "SpawnLights",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "SplashDamage": {
                        "body": "{\n\n   if ( bHurtEntry )\n      return;\n   bHurtEntry = true;\n\n   foreach VisibleCollidingActors(class 'Actor', Victim, DamageRadius, Location)\n      if ( Victim != Self ) {\n         dist = FMax(1, VSize(Victim.Location - Location));\n         damageScale = 1 - FClamp((dist - Victim.CollisionRadius) / DamageRadius, 0, 1);\n         SetKillType(Instigator, Pawn(Victim));\n         Victim.TakeDamage(damageScale * Damage, Instigator, Victim.Location, vect(0,0,0), MyDamageType);\n      }",
                        "locals": [
                            "local actor Victim;",
                            "local float dist, damageScale;"
                        ],
                        "modifiers": [],
                        "name": "SplashDamage",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Tick": {
                        "body": "{\n\t//spawns lightballs all around\n\tif(bVortexSucking)\n\t\tSpawnLights();\n\t\n   if ( Ticks - TickDelay == 15 )\n   {\n      if ( !bVAdded )\n      {\n          Velocity.Z += 15;\n         bVAdded = True;\n      }\n   }\n   \n   if ( Ticks - TickDelay > 15 )\n      Velocity -= Region.Zone.ZoneGravity * DeltaTime * 0.8;\n   \n   if ( Ticks - TickDelay > 25 )\n      DrawScale = Min(1 + ((Ticks - TickDelay) - 25) * 0.25, 2.0);\n\n   if ( Ticks - TickDelay == 40 )\n   {\n\t  \n\t  //Owner.PlaySound(Sound'DXRVUltimate.Effect.Teleport01',SLOT_None,16384);\n      Velocity = vect(0,0,0);\n      SetPhysics(PHYS_Rotating);\n\t  bVortexSucking = True;\n   }\n   \n   //if ( Ticks - TickDelay == 70 )\n    //     bVortexSucking = True;\n   \n   if ( Ticks - TickDelay == 300)\n   {\n      AmbientSound = None;\n      PlaySound(MiscSound,, 255.0,, 6000.00);\n   }\n   else if ( Default.LifeSpan - LifeSpan > 6.0 + TickDelay * 0.05 && AmbientSound == None )\n   {\t\n      //AmbientSound = Sound'DXRVUltimate.Effect.VortexRun';\n      SoundVolume = 255;\n      SoundRadius = 6000;\n   }\n   else if ( Default.LifeSpan - LifeSpan > TickDelay * 0.05 && !bPlayedStartSound )\n   {\n      PlaySound(SpawnSound,, 255.0,, 6000.00);\n      bPlayedStartSound = True;\n   }\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "DeltaTime"
                            ]
                        ],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n   SetTimer(0.05, True);\n   LoopRunAnim(Min(0.25 + (Ticks * 0.05), 1.0));\n   Ticks += 1;\n   Velocity -= Velocity * 0.1;\n   if ( bVortexSucking )\n      VortexTarget();\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "VortexTarget": {
                        "body": "{\n\n   // suck (almost) everything in\n   ForEach RadiusActors(class'Actor', Victim, VortexRadius, Location)\n   {\n\t   if(Victim!=Owner)\n\t   {\n\t      bVictimInSight = FastTrace(Location, Victim.Location);\n\n\t       if (Victim.Class != Class && !Victim.IsA('StationaryPawn')  &&  !Victim.bHidden && Victim.Physics != PHYS_Trailer &&  ( (Victim.bIsPawn || Victim.IsA('Carcass')) || Victim.IsA('TranslocatorTarget') || ( (Victim.IsA('Projectile') && Victim.Physics == PHYS_Falling) )   ) )\n\t       {\n\t         if ( Pawn(Victim) == None || !Pawn(Victim).bIsPlayer || !Pawn(Victim).PlayerReplicationInfo.bIsSpectator )\n\t         {\n\t            Direction = Location - Victim.Location;\n\t            Distance = 2.1 - VSize(Direction * 2) / VortexRadius;\n\t            Direction = Normal(Direction);\n\t            if ( !bVictimInSight )\n\t               Direction *= 0.3;\n\t            SetVictimPhysics(Victim);\n\t            Victim.Velocity += Direction * VortexGravity * 0.2 * Square(Distance);\n\t         }\n\t        }\n\t\t\t\n\t      if ( Victim.Role == ROLE_Authority && Victim.bIsPawn\n\t            && (bVictimInSight || VSize(Location - Victim.Location) < VortexRadius * 0.8) )\n\t      {\n\t         Pawn(Victim).FearThisSpot(Self);\n\t      }\n\t\t  \n\t      if (Victim.bIsPawn &&  Role == ROLE_Authority  && Pawn(Victim).Health > 0 && bVictimInSight\n\t            && VSize(Location - Victim.Location) < DamageRadius * 0.4 )\n\t      {\n\t         SetKillType(Instigator, Pawn(Victim));\n\t         Pawn(Victim).Health = -1000;\n\t         Pawn(Victim).Died(Instigator, MyDamageType, Victim.Location);\n\t      }\n\t  }\n   }\n   SplashDamage();\n}",
                        "locals": [
                            "local float Distance;",
                            "local vector Direction;",
                            "local Actor Victim;",
                            "local bool bVictimInSight;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "VortexTarget",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 266,
                "replication": "",
                "states": [],
                "variables": [
                    "var int TickDelay;",
                    "var int Ticks;",
                    "var bool bVAdded, bPlayedStartSound;",
                    "var bool bVortexSucking,bVortexStopped;",
                    "var float VortexGravity, VortexRadius;",
                    "var SphereEffectXL sp;",
                    "var() localized string DirectHitString, SuicideString, SuicideFString;",
                    "var() float DamageRadius;"
                ]
            }
        },
        "VortexGen.uc": {
            "body": "//=============================================================================\n// VortexGen\n//=============================================================================\nclass VortexGen expands DeusExPickup;\n\nsimulated state Activated\n{\n\tfunction Activate()\n\t{\t\t\n\n\t}\n\t\n\tfunction BeginState()\n\t{\t\t\n\t\tspawn(class'Vortex',Owner,,Owner.Location,DeusExPlayer(Owner).ViewRotation);\n\n\t\tGotoState('DeActivated');\n\t\tUseOnce();\n\t\t\n\t}\n\t\n\tBegin:\n}\n\ndefaultproperties\n{\n     maxCopies=5\n     bCanHaveMultipleCopies=True\n     bActivatable=True\n     ItemName=\"Vortex Generator\"\n     ItemArticle=\"an\"\n     PlayerViewOffset=(X=20.000000,Y=10.000000,Z=-16.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.MultitoolPOV'\n     PickupViewMesh=LodMesh'DeusExItems.Multitool'\n     ThirdPersonMesh=LodMesh'DeusExItems.Multitool3rd'\n     Icon=Texture'DeusExUI.Icons.BeltIconMultitool'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconMultitool'\n     Description=\"This Tool generates a temporary powerful gravitational vortex, which will suck every human or robot within its reach.|n|n<ULTIMATE OPS FILE NOTE AJ012-BLACK> Before creating this vortex, be sure your allies are distant enough. The vortex is only able to identify its owner, therefore he is the only one who can stand unaffected near it. -- Deadalus08 <END NOTE>\"\n     beltDescription=\"VORTEX GEN\"\n     Mesh=LodMesh'DeusExItems.Multitool'\n     CollisionRadius=4.800000\n     CollisionHeight=0.860000\n}\n",
            "name": "VortexGen.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "maxCopies=5",
                    "bCanHaveMultipleCopies=True",
                    "bActivatable=True",
                    "ItemName=\"Vortex Generator\"",
                    "ItemArticle=\"an\"",
                    "PlayerViewOffset=(X=20.000000,Y=10.000000,Z=-16.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.MultitoolPOV'",
                    "PickupViewMesh=LodMesh'DeusExItems.Multitool'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.Multitool3rd'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconMultitool'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconMultitool'",
                    "Description=\"This Tool generates a temporary powerful gravitational vortex, which will suck every human or robot within its reach.|n|n<ULTIMATE OPS FILE NOTE AJ012-BLACK> Before creating this vortex, be sure your allies are distant enough. The vortex is only able to identify its owner, therefore he is the only one who can stand unaffected near it. -- Deadalus08 <END NOTE>\"",
                    "beltDescription=\"VORTEX GEN\"",
                    "Mesh=LodMesh'DeusExItems.Multitool'",
                    "CollisionRadius=4.800000",
                    "CollisionHeight=0.860000"
                ],
                "exec": [],
                "extends": "DeusExPickup",
                "functions": {
                    "Activate": {
                        "body": "{\t\t\n\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Activate",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "BeginState": {
                        "body": "{\t\t\n\t\tspawn(class'Vortex',Owner,,Owner.Location,DeusExPlayer(Owner).ViewRotation);\n\n\t\tGotoState('DeActivated');\n\t\tUseOnce();\n\t\t\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "BeginState",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 44,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "WPGrenade.uc": {
            "body": "class WPGrenade extends GasGrenade;\n\nsimulated function DrawExplosionEffects(vector HitLocation, vector HitNormal)\n{\n\tlocal ExplosionLight light;\n\tlocal ParticleGenerator gen;\n   local ExplosionSmall expeffect;\n\n\t// draw a pretty explosion\n\tlight = Spawn(class'ExplosionLight',,, HitLocation);\n\tif (light != None)\n   {\n      light.RemoteRole = ROLE_None;\n\t\tlight.size = 12;\n   }\n\t\n   expeffect = Spawn(class'ExplosionSmall',,, HitLocation);\n   if (expeffect != None)\n      expeffect.RemoteRole = ROLE_None;\n\n\t// create a particle generator shooting out white-hot fireballs\n\tgen = Spawn(class'ParticleGenerator',,, HitLocation, Rotator(HitNormal));\n\tif (gen != None)\n\t{\n      gen.RemoteRole = ROLE_None;\n\t\tgen.particleDrawScale = 1.0;\n\t\tgen.checkTime = 0.05;\n\t\tgen.frequency = 1.0;\n\t\tgen.ejectSpeed = 200.0;\n\t\tgen.bGravity = True;\n\t\tgen.bRandomEject = True;\n\t\tgen.particleTexture = Texture'Effects.Fire.FireballWhite';\n\t\tgen.LifeSpan = 2.0;\n\t}\n}\n\ndefaultproperties\n{\n     DamageType=Flamed\n     spawnWeaponClass=Class'PartyStuff.WeaponWPGrenade'\n     ItemName=\"WP Grenade\"\n     ImpactSound=Sound'DeusExSounds.Generic.SmallExplosion2'\n}\n",
            "name": "WPGrenade.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "DamageType=Flamed",
                    "spawnWeaponClass=Class'PartyStuff.WeaponWPGrenade'",
                    "ItemName=\"WP Grenade\"",
                    "ImpactSound=Sound'DeusExSounds.Generic.SmallExplosion2'"
                ],
                "exec": [],
                "extends": "GasGrenade",
                "functions": {
                    "DrawExplosionEffects": {
                        "body": "{\n\n\t// draw a pretty explosion\n\tlight = Spawn(class'ExplosionLight',,, HitLocation);\n\tif (light != None)\n   {\n      light.RemoteRole = ROLE_None;\n\t\tlight.size = 12;\n   }\n\t\n   expeffect = Spawn(class'ExplosionSmall',,, HitLocation);\n   if (expeffect != None)\n      expeffect.RemoteRole = ROLE_None;\n\n\t// create a particle generator shooting out white-hot fireballs\n\tgen = Spawn(class'ParticleGenerator',,, HitLocation, Rotator(HitNormal));\n\tif (gen != None)\n\t{\n      gen.RemoteRole = ROLE_None;\n\t\tgen.particleDrawScale = 1.0;\n\t\tgen.checkTime = 0.05;\n\t\tgen.frequency = 1.0;\n\t\tgen.ejectSpeed = 200.0;\n\t\tgen.bGravity = True;\n\t\tgen.bRandomEject = True;\n\t\tgen.particleTexture = Texture'Effects.Fire.FireballWhite';\n\t\tgen.LifeSpan = 2.0;\n\t}\n}",
                        "locals": [
                            "local ExplosionLight light;",
                            "local ParticleGenerator gen;",
                            "local ExplosionSmall expeffect;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "DrawExplosionEffects",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "HitLocation"
                            ],
                            [
                                "vector",
                                "HitNormal"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 44,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "WallHealer.uc": {
            "body": "class WallHealer extends ElectronicDevices;\n\n\n#exec OBJ LOAD FILE=Ambient\n\nvar() int healAmount;\nvar() int healRefreshTime;\nvar() int mphealRefreshTime;\nvar Float lastHealTime;\n\n// ----------------------------------------------------------------------\n// Network replication\n// ----------------------------------------------------------------------\nreplication\n{\n\t// MBCODE: Replicate the last time healed to the server\n\treliable if ( Role < ROLE_Authority )\n\t\tlastHealTime, healRefreshTime;\n}\n\n// ----------------------------------------------------------------------\n// PostBeginPlay()\n// ----------------------------------------------------------------------\n\nfunction PostBeginPlay()\n{\n\tSuper.PostBeginPlay();\n\n   if (Level.NetMode != NM_Standalone)\n   {\n      healRefreshTime = mpHealRefreshTime;\n   }\n}\n\n// ----------------------------------------------------------------------\n// Frob()\n// ----------------------------------------------------------------------\n\nfunction Frob(Actor Frobber, Inventory frobWith)\n{\n   local DeusExPlayer player;\n\tlocal DeusExRootWindow root;\n\tlocal HUDMedBotAddAugsScreen winAug;\n\tlocal HUDMedBotHealthScreen  winHealth;\n\tlocal AugmentationCannister augCan;\n\n   Super.Frob(Frobber, frobWith);\n   \n   player = DeusExPlayer(Frobber);\n\n      if (CanHeal())\n      {\n\t\t\tif ( Level.NetMode != NM_Standalone )\n\t\t\t{\n\t\t\t\tPlaySound(sound'MedicalHiss', SLOT_None,,, 256);\n\t\t\t\tif ( Frobber.IsA('DeusExPlayer') )\n\t\t\t\t{\n\t\t\t\t\tDeusExPlayer(Frobber).StopPoison();\n\t\t\t\t\tDeusExPlayer(Frobber).ExtinguishFire();\n\t\t\t\t\tDeusExPlayer(Frobber).drugEffectTimer = 0;\n\t\t\t\t}\n\t\t\t}\n         HealPlayer(DeusExPlayer(Frobber));\n      }\n      else\n      {\n         Pawn(Frobber).ClientMessage(\"still charging, \"$int(healRefreshTime - (Level.TimeSeconds - lastHealTime))$\" seconds to go.\");\n      } \n}\n\n// ----------------------------------------------------------------------\n// HealPlayer()\n// ----------------------------------------------------------------------\n\nfunction int HealPlayer(DeusExPlayer player)\n{\n\tlocal int healedPoints;\n\n\tif (player != None)\n\t{\n\t\thealedPoints = player.HealPlayer(healAmount);\n\t\tlastHealTime = Level.TimeSeconds;\n\t}\n\treturn healedPoints;\n}\n\n// ----------------------------------------------------------------------\n// CanHeal()\n// \n// Returns whether or not the bot can heal the player\n// ----------------------------------------------------------------------\n\nfunction bool CanHeal()\n{\t\n\treturn (Level.TimeSeconds - lastHealTime > healRefreshTime);\n}\n\n// ----------------------------------------------------------------------\n// GetRefreshTimeRemaining()\n// ----------------------------------------------------------------------\n\nfunction Float GetRefreshTimeRemaining()\n{\n\treturn healRefreshTime - (Level.TimeSeconds - lastHealTime);\n}\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n\ndefaultproperties\n{\n     healAmount=300\n     healRefreshTime=15\n     mphealRefreshTime=15\n     bCanBeBase=True\n     ItemName=\"Medical Station\"\n     Physics=PHYS_None\n     Mesh=LodMesh'DeusExItems.MedKit'\n     DrawScale=4.000000\n     MultiSkins(0)=Texture'PGAssets.Skins.iMed'\n     SoundRadius=8\n     SoundVolume=96\n     AmbientSound=Sound'Ambient.Ambient.HumLow3'\n     CollisionRadius=23.000000\n     CollisionHeight=5.000000\n     Mass=20.000000\n     Buoyancy=16.000000\n}\n",
            "name": "WallHealer.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "healAmount=300",
                    "healRefreshTime=15",
                    "mphealRefreshTime=15",
                    "bCanBeBase=True",
                    "ItemName=\"Medical Station\"",
                    "Physics=PHYS_None",
                    "Mesh=LodMesh'DeusExItems.MedKit'",
                    "DrawScale=4.000000",
                    "MultiSkins(0)=Texture'PGAssets.Skins.iMed'",
                    "SoundRadius=8",
                    "SoundVolume=96",
                    "AmbientSound=Sound'Ambient.Ambient.HumLow3'",
                    "CollisionRadius=23.000000",
                    "CollisionHeight=5.000000",
                    "Mass=20.000000",
                    "Buoyancy=16.000000"
                ],
                "exec": [
                    "#exec OBJ LOAD FILE=Ambient"
                ],
                "extends": "ElectronicDevices",
                "functions": {
                    "CanHeal": {
                        "body": "{\t\n\treturn (Level.TimeSeconds - lastHealTime > healRefreshTime);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "CanHeal",
                        "native": false,
                        "param": [],
                        "return": "bool"
                    },
                    "Frob": {
                        "body": "{\n\n   Super.Frob(Frobber, frobWith);\n   \n   player = DeusExPlayer(Frobber);\n\n      if (CanHeal())\n      {\n\t\t\tif ( Level.NetMode != NM_Standalone )\n\t\t\t{\n\t\t\t\tPlaySound(sound'MedicalHiss', SLOT_None,,, 256);\n\t\t\t\tif ( Frobber.IsA('DeusExPlayer') )\n\t\t\t\t{\n\t\t\t\t\tDeusExPlayer(Frobber).StopPoison();\n\t\t\t\t\tDeusExPlayer(Frobber).ExtinguishFire();\n\t\t\t\t\tDeusExPlayer(Frobber).drugEffectTimer = 0;\n\t\t\t\t}\n\t\t\t}\n         HealPlayer(DeusExPlayer(Frobber));\n      }\n      else\n      {\n         Pawn(Frobber).ClientMessage(\"still charging, \"$int(healRefreshTime - (Level.TimeSeconds - lastHealTime))$\" seconds to go.\");\n      } \n}",
                        "locals": [
                            "local DeusExPlayer player;",
                            "local DeusExRootWindow root;",
                            "local HUDMedBotAddAugsScreen winAug;",
                            "local HUDMedBotHealthScreen  winHealth;",
                            "local AugmentationCannister augCan;"
                        ],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    },
                    "GetRefreshTimeRemaining": {
                        "body": "{\n\treturn healRefreshTime - (Level.TimeSeconds - lastHealTime);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetRefreshTimeRemaining",
                        "native": false,
                        "param": [],
                        "return": "Float"
                    },
                    "HealPlayer": {
                        "body": "{\n\n\tif (player != None)\n\t{\n\t\thealedPoints = player.HealPlayer(healAmount);\n\t\tlastHealTime = Level.TimeSeconds;\n\t}\n\treturn healedPoints;\n}",
                        "locals": [
                            "local int healedPoints;"
                        ],
                        "modifiers": [],
                        "name": "HealPlayer",
                        "native": false,
                        "param": [
                            [
                                "DeusExPlayer",
                                "player"
                            ]
                        ],
                        "return": "int"
                    },
                    "PostBeginPlay": {
                        "body": "{\n\tSuper.PostBeginPlay();\n\n   if (Level.NetMode != NM_Standalone)\n   {\n      healRefreshTime = mpHealRefreshTime;\n   }\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 129,
                "replication": "",
                "states": [],
                "variables": [
                    "var() int healAmount;",
                    "var() int healRefreshTime;",
                    "var() int mphealRefreshTime;",
                    "var Float lastHealTime;"
                ]
            }
        },
        "WaterCooler2.uc": {
            "body": "//=============================================================================\n// WaterCooler.\n//=============================================================================\nclass WaterCooler2 extends DeusExDecoration;\n\nvar bool bUsing;\n\nfunction Timer()\n{\n\tbUsing = False;\n\tAmbientSound = None;\n}\n\nfunction Frob(Actor Frobber, Inventory frobWith)\n{\n\tSuper.Frob(Frobber, frobWith);\n\n\tif (bUsing)\n\t\treturn;\n\n\tSetTimer(2.0, False);\n\tbUsing = True;\n\n\t// heal the frobber a small bit\n\tif (DeusExPlayer(Frobber) != None)\n\t\tDeusExPlayer(Frobber).HealPlayer(50);\n\n\tPlayAnim('Bubble');\n\tAmbientSound = sound'WaterBubbling';\n}\n\nfunction Destroyed()\n{\n\tlocal Vector HitLocation, HitNormal, EndTrace;\n\tlocal Actor hit;\n\tlocal WaterPool pool;\n\n\t// trace down about 20 feet if we're not in water\n\tif (!Region.Zone.bWaterZone)\n\t{\n\t\tEndTrace = Location - vect(0,0,320);\n\t\thit = Trace(HitLocation, HitNormal, EndTrace, Location, False);\n\t\tpool = spawn(class'WaterPool',,, HitLocation+HitNormal, Rotator(HitNormal));\n\t\tif (pool != None)\n\t\t\tpool.maxDrawScale = CollisionRadius / 20.0;\n\t}\n\n\tSuper.Destroyed();\n}\n\ndefaultproperties\n{\n     FragType=Class'DeusEx.PlasticFragment'\n     bCanBeBase=True\n     ItemName=\"Water Cooler\"\n     bPushable=False\n     Mesh=LodMesh'DeusExDeco.WaterCooler'\n     CollisionRadius=14.070000\n     CollisionHeight=41.570000\n     Mass=70.000000\n     Buoyancy=100.000000\n}\n",
            "name": "WaterCooler2.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "FragType=Class'DeusEx.PlasticFragment'",
                    "bCanBeBase=True",
                    "ItemName=\"Water Cooler\"",
                    "bPushable=False",
                    "Mesh=LodMesh'DeusExDeco.WaterCooler'",
                    "CollisionRadius=14.070000",
                    "CollisionHeight=41.570000",
                    "Mass=70.000000",
                    "Buoyancy=100.000000"
                ],
                "exec": [],
                "extends": "DeusExDecoration",
                "functions": {
                    "Destroyed": {
                        "body": "{\n\n\t// trace down about 20 feet if we're not in water\n\tif (!Region.Zone.bWaterZone)\n\t{\n\t\tEndTrace = Location - vect(0,0,320);\n\t\thit = Trace(HitLocation, HitNormal, EndTrace, Location, False);\n\t\tpool = spawn(class'WaterPool',,, HitLocation+HitNormal, Rotator(HitNormal));\n\t\tif (pool != None)\n\t\t\tpool.maxDrawScale = CollisionRadius / 20.0;\n\t}\n\n\tSuper.Destroyed();\n}",
                        "locals": [
                            "local Vector HitLocation, HitNormal, EndTrace;",
                            "local Actor hit;",
                            "local WaterPool pool;"
                        ],
                        "modifiers": [],
                        "name": "Destroyed",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Frob": {
                        "body": "{\n\tSuper.Frob(Frobber, frobWith);\n\n\tif (bUsing)\n\t\treturn;\n\n\tSetTimer(2.0, False);\n\tbUsing = True;\n\n\t// heal the frobber a small bit\n\tif (DeusExPlayer(Frobber) != None)\n\t\tDeusExPlayer(Frobber).HealPlayer(50);\n\n\tPlayAnim('Bubble');\n\tAmbientSound = sound'WaterBubbling';\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\tbUsing = False;\n\tAmbientSound = None;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 63,
                "replication": "",
                "states": [],
                "variables": [
                    "var bool bUsing;"
                ]
            }
        },
        "WaterFountain2.uc": {
            "body": "//=============================================================================\n// WaterFountain.\n//=============================================================================\nclass WaterFountain2 extends DeusExDecoration;\n\nvar bool bUsing;\n\nfunction Timer()\n{\n\tbUsing = False;\n\tPlayAnim('Still');\n\tAmbientSound = None;\n}\n\nfunction Frob(Actor Frobber, Inventory frobWith)\n{\n\tSuper.Frob(Frobber, frobWith);\n\n\tif (bUsing)\n\t\treturn;\n\n\tSetTimer(2.0, False);\n\tbUsing = True;\n\n\t// heal the frobber a small bit\n\tif (DeusExPlayer(Frobber) != None)\n\t\tDeusExPlayer(Frobber).HealPlayer(50);\n\n\tLoopAnim('Use');\n\tAmbientSound = sound'WaterBubbling';\n}\n\ndefaultproperties\n{\n     ItemName=\"Water Fountain\"\n     bPushable=False\n     Physics=PHYS_None\n     Mesh=LodMesh'DeusExDeco.WaterFountain'\n     CollisionRadius=20.000000\n     CollisionHeight=24.360001\n     Mass=70.000000\n     Buoyancy=100.000000\n}\n",
            "name": "WaterFountain2.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "ItemName=\"Water Fountain\"",
                    "bPushable=False",
                    "Physics=PHYS_None",
                    "Mesh=LodMesh'DeusExDeco.WaterFountain'",
                    "CollisionRadius=20.000000",
                    "CollisionHeight=24.360001",
                    "Mass=70.000000",
                    "Buoyancy=100.000000"
                ],
                "exec": [],
                "extends": "DeusExDecoration",
                "functions": {
                    "Frob": {
                        "body": "{\n\tSuper.Frob(Frobber, frobWith);\n\n\tif (bUsing)\n\t\treturn;\n\n\tSetTimer(2.0, False);\n\tbUsing = True;\n\n\t// heal the frobber a small bit\n\tif (DeusExPlayer(Frobber) != None)\n\t\tDeusExPlayer(Frobber).HealPlayer(50);\n\n\tLoopAnim('Use');\n\tAmbientSound = sound'WaterBubbling';\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\tbUsing = False;\n\tPlayAnim('Still');\n\tAmbientSound = None;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 44,
                "replication": "",
                "states": [],
                "variables": [
                    "var bool bUsing;"
                ]
            }
        },
        "WeaponAirget.uc": {
            "body": "class WeaponAirget extends DeusExWeapon;\n\nvar float\tmpRecoilStrength;\nvar int muznum; //loop through muzzleflashes\nvar texture muztex; //sigh\nvar int airammo, rAirammo;\n\nreplication\n{\nreliable if (bNetOwner && Role==ROLE_Authority)\nrAirammo;\n}\n\nfunction Tick(float deltatime)\n{\n\tsuper.Tick(deltatime);\n\t\n\tif(bZoomed)\n\t{\n\t\tDeusExPlayer(Owner).Energy -= 0.25;\n\t\tif(DeusExPlayer(Owner).Energy <= 0)\n\t\t{\n\t\t\tScopeOff();\n\t\t}\n\t}\n}\n\nfunction LaserToggle()\n{\n\tlocal vector v2;\n\t\n\tv2 = Owner.location;\n\tv2.z += 20;\n\t\tif(AirAmmo >= 1)\n\t\t{\n\t\t\tSpawn(class'Rocket',Pawn(Owner),,v2,Pawn(Owner).ViewRotation);\n\t\t\tAirAmmo -= 1;\n\t\t\trAirammo = AirAmmo;\n\t\t}\n}\n\nfunction ScopeOn()\n{\n   if (bHasScope && !bZoomed && (Owner != None) && Owner.IsA('DeusExPlayer'))\n   {\n      bZoomed = True;\n      RefreshScopeDisplay(DeusExPlayer(Owner), False, bZoomed);\n   }\n}\n\nfunction ScopeOff()\n{\n\tif (bHasScope && bZoomed && (Owner != None) && Owner.IsA('DeusExPlayer'))\n\t{\n\t\tbZoomed = False;\n\t\tRefreshScopeDisplay(DeusExPlayer(Owner), False, bZoomed);\n\t}\n}\n\n\nsimulated function RefreshScopeDisplay(DeusExPlayer player, bool bInstant, bool bScopeOn)\n{\n\tif (bScopeOn && (Player !=None))\n\t{\n\t\tDeusExPlayer(Owner).PlaySound(sound'Switch2ClickOn', SLOT_Talk,2,,1024,);\n\t\tDeusExRootWindow(Player.RootWindow).HUD.AugDisplay.bVisionActive = True;\n\t\tDeusExRootWindow(Player.RootWindow).HUD.AugDisplay.VisionLevel = 3;\n\t\tDeusExRootWindow(Player.RootWindow).HUD.AugDisplay.VisionLevelValue = 28800;\n\t}\n\telse if (!bScopeOn)\n\t{\n\t\tDeusExPlayer(Owner).PlaySound(sound'Switch2ClickOff', SLOT_Talk,2,,1024,);\n\t\tDeusExRootWindow(Player.RootWindow).HUD.AugDisplay.bVisionActive = False;\n\t}\n}\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t\tReloadCount = mpReloadCount;\n\n\t\t// Tuned for advanced -> master skill system (Monte & Ricardo's number) client-side\n\t\trecoilStrength = 0.75;\n\t}\n}\n\n/*simulated function renderoverlays(Canvas canvas)\n{\n\n\tsuper.renderoverlays(canvas);\n}*/\n\nsimulated event RenderOverlays(canvas Canvas)\n{\n\tlocal DeusExPlayer P;\n\tlocal Actor CrosshairTarget;\n\tlocal float Scale, Accuracy, Dist;\n\tlocal vector HitLocation, HitNormal, StartTrace, EndTrace, X,Y,Z;\n\t\tlocal vector loc, line;\n\t\t\tlocal String KeyName, Alias, curKeyName;\n\tlocal int i;\n\tSuper.RenderOverlays(Canvas);\n\tP = DeusExPlayer(Owner);\n\tif ( P != None ) \n\t{\t\n\t\tif(muztex != none && multiskins[2] != muztex) //don't overwrite the muzzleflash..this is fucking ugly, but I think we can spare some comp cycles for shit like this\n\t\tmultiskins[2]=muztex;\n\telse \n\t\tmultiskins[2]=none;\n\n\t\t\t\tloc = P.Location;\n\t\t\t\tloc.Z += P.BaseEyeHeight;\n\t\t\t\tline = Vector(P.ViewRotation) * 90000;\n\t\t\t\n\t\t\t\tTrace(hitLocation, hitNormal, loc+line, loc, true);\n\t\t/*foreach P.TraceActors(class'Actor', CrosshairTarget, HitLocation, HitNormal, EndTrace, StartTrace)\n\t\t{*/\n\t\t\tDist = Abs(VSize(HitLocation - P.Location));\n\n\t\t\t//if ( Dist < MaxRange )\n\t\t\t//{\n\t\t\t\tbOwnsCrossHair = True; \n\t\t\t\tScale = Canvas.ClipX/640;\n\t\t\t\tCanvas.SetPos(0.5 * Canvas.ClipX - 16 * Scale, 0.5 * Canvas.ClipY - 16 * Scale );\n\t\t\t\t//Canvas.Style = ERenderStyle.STY_Translucent;\n\t\t\t\tCanvas.DrawColor.R = 255;\n\t\t\t\tCanvas.DrawColor.G = 250;\n\t\t\t\tCanvas.DrawColor.B = 255;\n\t\t\t\tCanvas.Font = Canvas.SmallFont;\n\t\t\t\tcurKeyName = \"\";\n\t\t\t\tfor ( i=0; i<255; i++ )\n\t\t\t\t{\n\t\t\t\t\tKeyName = Owner.ConsoleCommand ( \"KEYNAME \"$i );\n\t\t\t\t\tif ( KeyName != \"\" )\n\t\t\t\t\t{\n\t\t\t\t\t\tAlias = Owner.ConsoleCommand( \"KEYBINDING \"$KeyName );\n\t\t\t\t\t\tif ( Alias ~= \"ToggleLaser\" )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurKeyName = KeyName;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ( curKeyName ~= \"\" )\n\t\t\t\t\tcurKeyName = \"NONE\";\n\t\t\t\t\t\n\t\t\t\tCanvas.DrawText(\"      Alt Ammo: \"$rAirAmmo$\"/10 [\"$curKeyName$\"] - Distance: \"$Left(Dist, Len(Dist)-7));\n\t\t\t}\n\t\t\telse\n\t\t\t\tbOwnsCrossHair = False; // Only for compatibility with HDX50\t\t\n\t\t//}\t\n//}\t\t\n}\n\nsimulated function SwapMuzzleFlashTexture()\n{\n\tMuztex = GetMuzzleTex();\n\tMultiskins[2] = Muztex;\n\tMuzzleFlashLight();\n\tSetTimer(0.1, False);\n}\n\nsimulated function texture GetMuzzleTex()\n{\n\tlocal texture tex;\n\n\tmuznum++;\n\tif(muznum > 7)\n\t\tmuznum = 0;\n\tswitch(muznum)\n\t{\n\t\tcase 0: tex = texture'HDTPMuzzleflashlarge1'; break;\n\t\tcase 1: tex = texture'HDTPMuzzleflashlarge2'; break;\n\t\tcase 2: tex = texture'HDTPMuzzleflashlarge3'; break;\n\t\tcase 3: tex = texture'HDTPMuzzleflashlarge4'; break;\n\t\tcase 4: tex = texture'HDTPMuzzleflashlarge5'; break;\n\t\tcase 5: tex = texture'HDTPMuzzleflashlarge6'; break;\n\t\tcase 6: tex = texture'HDTPMuzzleflashlarge7'; break;\n\t\tcase 7: tex = texture'HDTPMuzzleflashlarge8'; break;\n\t}\n\treturn tex;\n}\n\nsimulated function EraseMuzzleFlashTexture()\n{\n\tlocal int i;\n\n\tMuztex = none; //put this before the silencer check just in case we somehow add a silencer while mid shooting (it could happen!)\n\tif(!bHasMuzzleflash || bHasSilencer)\n\t\treturn;\n\n\tMultiSkins[2] = None;\n}\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\ndefaultproperties\n{\n     airammo=10\n     rAirammo=10\n     LowAmmoWaterMark=30\n     GoverningSkill=Class'DeusEx.SkillWeaponRifle'\n     EnviroEffective=ENVEFF_Air\n     Concealability=CONC_Visual\n     bAutomatic=True\n     ShotTime=0.100000\n     reloadTime=3.000000\n     BaseAccuracy=0.000003\n     bHasScope=True\n     bCanHaveLaser=True\n     bHasLaser=True\n     bCanHaveSilencer=True\n     recoilStrength=0.500000\n     MinWeaponAcc=0.000002\n     mpReloadTime=0.500000\n     mpHitDamage=20\n     mpBaseAccuracy=0.000000\n     mpAccurateRange=2400\n     mpMaxRange=2400\n     mpReloadCount=20\n     bCanHaveModBaseAccuracy=True\n     bCanHaveModReloadCount=True\n     bCanHaveModAccurateRange=True\n     bCanHaveModReloadTime=True\n     bCanHaveModRecoilStrength=True\n     AmmoName=Class'DeusEx.Ammo762mm'\n     ReloadCount=20\n     PickupAmmoCount=60\n     bInstantHit=True\n     FireOffset=(X=-16.000000,Y=5.000000,Z=11.500000)\n     shakemag=200.000000\n     FireSound=Sound'DeusExSounds.Weapons.AssaultGunFire'\n     AltFireSound=Sound'DeusExSounds.Weapons.AssaultGunReloadEnd'\n     CockingSound=Sound'DeusExSounds.Weapons.AssaultGunReload'\n     SelectSound=Sound'DeusExSounds.Weapons.AssaultGunSelect'\n     InventoryGroup=186\n     ItemName=\"Airget-Lamh B/V2\"\n     PlayerViewOffset=(X=10.000000,Y=-5.000000,Z=-15.000000)\n     PlayerViewMesh=LodMesh'PGAssets.BRAssaultGun'\n     PickupViewMesh=LodMesh'PGAssets.BRAssaultGunPickup'\n     ThirdPersonMesh=LodMesh'PGAssets.BRAssaultGun3rd'\n     LandSound=Sound'DeusExSounds.Generic.DropMediumWeapon'\n     Icon=Texture'PGAssets.Icons.BeltIconSGAssault'\n     largeIcon=Texture'PGAssets.Icons.LargeSGAssaultIcon'\n     largeIconWidth=203\n     largeIconHeight=77\n     invSlotsX=2\n     invSlotsY=2\n     Description=\"The 7.62x51mm assault rifle is designed for close-quarters combat, utilizing a shortened barrel and 'bullpup' design for increased maneuverability. An additional underhand 20mm HE launcher increases the rifle's effectiveness against a variety of targets.\"\n     beltDescription=\"AIRGET\"\n     Mesh=LodMesh'PGAssets.BRAssaultGunPickup'\n     CollisionRadius=15.000000\n     CollisionHeight=1.100000\n     Mass=30.000000\n}\n",
            "name": "WeaponAirget.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "airammo=10",
                    "rAirammo=10",
                    "LowAmmoWaterMark=30",
                    "GoverningSkill=Class'DeusEx.SkillWeaponRifle'",
                    "EnviroEffective=ENVEFF_Air",
                    "Concealability=CONC_Visual",
                    "bAutomatic=True",
                    "ShotTime=0.100000",
                    "reloadTime=3.000000",
                    "BaseAccuracy=0.000003",
                    "bHasScope=True",
                    "bCanHaveLaser=True",
                    "bHasLaser=True",
                    "bCanHaveSilencer=True",
                    "recoilStrength=0.500000",
                    "MinWeaponAcc=0.000002",
                    "mpReloadTime=0.500000",
                    "mpHitDamage=20",
                    "mpBaseAccuracy=0.000000",
                    "mpAccurateRange=2400",
                    "mpMaxRange=2400",
                    "mpReloadCount=20",
                    "bCanHaveModBaseAccuracy=True",
                    "bCanHaveModReloadCount=True",
                    "bCanHaveModAccurateRange=True",
                    "bCanHaveModReloadTime=True",
                    "bCanHaveModRecoilStrength=True",
                    "AmmoName=Class'DeusEx.Ammo762mm'",
                    "ReloadCount=20",
                    "PickupAmmoCount=60",
                    "bInstantHit=True",
                    "FireOffset=(X=-16.000000,Y=5.000000,Z=11.500000)",
                    "shakemag=200.000000",
                    "FireSound=Sound'DeusExSounds.Weapons.AssaultGunFire'",
                    "AltFireSound=Sound'DeusExSounds.Weapons.AssaultGunReloadEnd'",
                    "CockingSound=Sound'DeusExSounds.Weapons.AssaultGunReload'",
                    "SelectSound=Sound'DeusExSounds.Weapons.AssaultGunSelect'",
                    "InventoryGroup=186",
                    "ItemName=\"Airget-Lamh B/V2\"",
                    "PlayerViewOffset=(X=10.000000,Y=-5.000000,Z=-15.000000)",
                    "PlayerViewMesh=LodMesh'PGAssets.BRAssaultGun'",
                    "PickupViewMesh=LodMesh'PGAssets.BRAssaultGunPickup'",
                    "ThirdPersonMesh=LodMesh'PGAssets.BRAssaultGun3rd'",
                    "LandSound=Sound'DeusExSounds.Generic.DropMediumWeapon'",
                    "Icon=Texture'PGAssets.Icons.BeltIconSGAssault'",
                    "largeIcon=Texture'PGAssets.Icons.LargeSGAssaultIcon'",
                    "largeIconWidth=203",
                    "largeIconHeight=77",
                    "invSlotsX=2",
                    "invSlotsY=2",
                    "Description=\"The 7.62x51mm assault rifle is designed for close-quarters combat, utilizing a shortened barrel and 'bullpup' design for increased maneuverability. An additional underhand 20mm HE launcher increases the rifle's effectiveness against a variety of targets.\"",
                    "beltDescription=\"AIRGET\"",
                    "Mesh=LodMesh'PGAssets.BRAssaultGunPickup'",
                    "CollisionRadius=15.000000",
                    "CollisionHeight=1.100000",
                    "Mass=30.000000"
                ],
                "exec": [],
                "extends": "DeusExWeapon",
                "functions": {
                    "EraseMuzzleFlashTexture": {
                        "body": "{\n\n\tMuztex = none; //put this before the silencer check just in case we somehow add a silencer while mid shooting (it could happen!)\n\tif(!bHasMuzzleflash || bHasSilencer)\n\t\treturn;\n\n\tMultiSkins[2] = None;\n}",
                        "locals": [
                            "local int i;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "EraseMuzzleFlashTexture",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "GetMuzzleTex": {
                        "body": "{\n\n\tmuznum++;\n\tif(muznum > 7)\n\t\tmuznum = 0;\n\tswitch(muznum)\n\t{\n\t\tcase 0: tex = texture'HDTPMuzzleflashlarge1'; break;\n\t\tcase 1: tex = texture'HDTPMuzzleflashlarge2'; break;\n\t\tcase 2: tex = texture'HDTPMuzzleflashlarge3'; break;\n\t\tcase 3: tex = texture'HDTPMuzzleflashlarge4'; break;\n\t\tcase 4: tex = texture'HDTPMuzzleflashlarge5'; break;\n\t\tcase 5: tex = texture'HDTPMuzzleflashlarge6'; break;\n\t\tcase 6: tex = texture'HDTPMuzzleflashlarge7'; break;\n\t\tcase 7: tex = texture'HDTPMuzzleflashlarge8'; break;\n\t}\n\treturn tex;\n}",
                        "locals": [
                            "local texture tex;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "GetMuzzleTex",
                        "native": false,
                        "param": [],
                        "return": "texture"
                    },
                    "LaserToggle": {
                        "body": "{\n\t\n\tv2 = Owner.location;\n\tv2.z += 20;\n\t\tif(AirAmmo >= 1)\n\t\t{\n\t\t\tSpawn(class'Rocket',Pawn(Owner),,v2,Pawn(Owner).ViewRotation);\n\t\t\tAirAmmo -= 1;\n\t\t\trAirammo = AirAmmo;\n\t\t}\n}",
                        "locals": [
                            "local vector v2;"
                        ],
                        "modifiers": [],
                        "name": "LaserToggle",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t\tReloadCount = mpReloadCount;\n\n\t\t// Tuned for advanced -> master skill system (Monte & Ricardo's number) client-side\n\t\trecoilStrength = 0.75;\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "RefreshScopeDisplay": {
                        "body": "{\n\tif (bScopeOn && (Player !=None))\n\t{\n\t\tDeusExPlayer(Owner).PlaySound(sound'Switch2ClickOn', SLOT_Talk,2,,1024,);\n\t\tDeusExRootWindow(Player.RootWindow).HUD.AugDisplay.bVisionActive = True;\n\t\tDeusExRootWindow(Player.RootWindow).HUD.AugDisplay.VisionLevel = 3;\n\t\tDeusExRootWindow(Player.RootWindow).HUD.AugDisplay.VisionLevelValue = 28800;\n\t}\n\telse if (!bScopeOn)\n\t{\n\t\tDeusExPlayer(Owner).PlaySound(sound'Switch2ClickOff', SLOT_Talk,2,,1024,);\n\t\tDeusExRootWindow(Player.RootWindow).HUD.AugDisplay.bVisionActive = False;\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "RefreshScopeDisplay",
                        "native": false,
                        "param": [
                            [
                                "DeusExPlayer",
                                "player"
                            ],
                            [
                                "bool",
                                "bInstant"
                            ],
                            [
                                "bool",
                                "bScopeOn"
                            ]
                        ],
                        "return": ""
                    },
                    "RenderOverlays": {
                        "body": "{\n\tSuper.RenderOverlays(Canvas);\n\tP = DeusExPlayer(Owner);\n\tif ( P != None ) \n\t{\t\n\t\tif(muztex != none && multiskins[2] != muztex) //don't overwrite the muzzleflash..this is fucking ugly, but I think we can spare some comp cycles for shit like this\n\t\tmultiskins[2]=muztex;\n\telse \n\t\tmultiskins[2]=none;\n\n\t\t\t\tloc = P.Location;\n\t\t\t\tloc.Z += P.BaseEyeHeight;\n\t\t\t\tline = Vector(P.ViewRotation) * 90000;\n\t\t\t\n\t\t\t\tTrace(hitLocation, hitNormal, loc+line, loc, true);\n\t\t/*foreach P.TraceActors(class'Actor', CrosshairTarget, HitLocation, HitNormal, EndTrace, StartTrace)\n\t\t{*/\n\t\t\tDist = Abs(VSize(HitLocation - P.Location));\n\n\t\t\t//if ( Dist < MaxRange )\n\t\t\t//{\n\t\t\t\tbOwnsCrossHair = True; \n\t\t\t\tScale = Canvas.ClipX/640;\n\t\t\t\tCanvas.SetPos(0.5 * Canvas.ClipX - 16 * Scale, 0.5 * Canvas.ClipY - 16 * Scale );\n\t\t\t\t//Canvas.Style = ERenderStyle.STY_Translucent;\n\t\t\t\tCanvas.DrawColor.R = 255;\n\t\t\t\tCanvas.DrawColor.G = 250;\n\t\t\t\tCanvas.DrawColor.B = 255;\n\t\t\t\tCanvas.Font = Canvas.SmallFont;\n\t\t\t\tcurKeyName = \"\";\n\t\t\t\tfor ( i=0; i<255; i++ )\n\t\t\t\t{\n\t\t\t\t\tKeyName = Owner.ConsoleCommand ( \"KEYNAME \"$i );\n\t\t\t\t\tif ( KeyName != \"\" )\n\t\t\t\t\t{\n\t\t\t\t\t\tAlias = Owner.ConsoleCommand( \"KEYBINDING \"$KeyName );\n\t\t\t\t\t\tif ( Alias ~= \"ToggleLaser\" )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurKeyName = KeyName;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ( curKeyName ~= \"\" )\n\t\t\t\t\tcurKeyName = \"NONE\";\n\t\t\t\t\t\n\t\t\t\tCanvas.DrawText(\"      Alt Ammo: \"$rAirAmmo$\"/10 [\"$curKeyName$\"] - Distance: \"$Left(Dist, Len(Dist)-7));\n\t\t\t}\n\t\t\telse\n\t\t\t\tbOwnsCrossHair = False; // Only for compatibility with HDX50\t\t\n\t\t//}",
                        "locals": [
                            "local DeusExPlayer P;",
                            "local Actor CrosshairTarget;",
                            "local float Scale, Accuracy, Dist;",
                            "local vector HitLocation, HitNormal, StartTrace, EndTrace, X,Y,Z;",
                            "local vector loc, line;",
                            "local String KeyName, Alias, curKeyName;",
                            "local int i;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "RenderOverlays",
                        "native": false,
                        "param": [
                            [
                                "canvas",
                                "Canvas"
                            ]
                        ],
                        "return": ""
                    },
                    "ScopeOff": {
                        "body": "{\n\tif (bHasScope && bZoomed && (Owner != None) && Owner.IsA('DeusExPlayer'))\n\t{\n\t\tbZoomed = False;\n\t\tRefreshScopeDisplay(DeusExPlayer(Owner), False, bZoomed);\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "ScopeOff",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ScopeOn": {
                        "body": "{\n   if (bHasScope && !bZoomed && (Owner != None) && Owner.IsA('DeusExPlayer'))\n   {\n      bZoomed = True;\n      RefreshScopeDisplay(DeusExPlayer(Owner), False, bZoomed);\n   }\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "ScopeOn",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "SwapMuzzleFlashTexture": {
                        "body": "{\n\tMuztex = GetMuzzleTex();\n\tMultiskins[2] = Muztex;\n\tMuzzleFlashLight();\n\tSetTimer(0.1, False);\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "SwapMuzzleFlashTexture",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    },
                    "Tick": {
                        "body": "{\n\tsuper.Tick(deltatime);\n\t\n\tif(bZoomed)\n\t{\n\t\tDeusExPlayer(Owner).Energy -= 0.25;\n\t\tif(DeusExPlayer(Owner).Energy <= 0)\n\t\t{\n\t\t\tScopeOff();\n\t\t}\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltatime"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 268,
                "replication": "",
                "states": [],
                "variables": [
                    "var float\tmpRecoilStrength;",
                    "var int muznum; //loop through muzzleflashes",
                    "var texture muztex; //sigh",
                    "var int airammo, rAirammo;"
                ]
            }
        },
        "WeaponAugrist.uc": {
            "body": "//=============================================\n// PlasmaSword\n//=============================================\nClass WeaponAugrist extends WeaponNanoSword;\n\n#exec OBJ LOAD FILE=\"..\\Textures\\Effects.utx\"\n\n/*enum eChk\n{\n\tCH_Elec,\n\tCH_Flame,\n\tCH_Drain,\n\tCH_None\n};\n\nvar() eChk Spell;*/\nvar() int spell, lve, lvl;\nvar() bool bLockState;\n\n/*function BeginPlay()\n{\nlocal WeaponAugrist Augrist;\nlocal bool bFound;\n\n\tforeach AllActors(class'WeaponAugrist', Augrist)\n\t\tif(Augrist != Self)\n\t\t\tbFound=True;\n\t\n\tif(bFound) Destroy();\n}*/\n\nfunction Tick(float Deltatime)\n{\n\tsuper.Tick(deltatime);\n\t\n     LightHue++;\n\tif(LightHue >= 255)\n\t{\n\t\tLightHue=0;\n\t}\n     LightSaturation=126;\n\t\n\t\n//\tDXP.TakeDamage(1, DeusExPlayer(Owner), DXP.Location, vect(0,0,0), 'EMP');\n}\n\n/*function GiveTo( pawn Other )\n{\nlocal inventory inv;\n\n    super.Giveto(Other);\n\t\tinv=Spawn(class'WeaponAugrist');\n\t\tInv.Frob(DeusExPlayer(Other),None);\t  \n\t\tInv.bInObjectBelt = True;\n\t\tinv.Destroy();\n\tDestroy();\n}*/\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\nstate DownWeapon\n{\n\tfunction BeginState()\n\t{\n\t\tSuper.BeginState();\n\t\tLightType = LT_None;\n\n\t}\n}\n\nstate Idle\n{\n\tfunction BeginState()\n\t{\n\t\tSuper.BeginState();\n\t\tLightType = LT_Steady;\n\t}\n}\n\nauto state Pickup\n{\n\tfunction EndState()\n\t{\n\t\tSuper.EndState();\n\t\tLightType = LT_None;\n\t}\n}\n\nsimulated function ProcessTraceHit(Actor Other, Vector HitLocation, Vector HitNormal, Vector X, Vector Y, Vector Z)\n{\n\tlocal float        mult;\n\tlocal name         damageType;\n\tlocal DeusExPlayer dxPlayer;\n\tlocal int Bloodinc;\n\tdxplayer = deusexplayer(other);\n\tsuper.ProcessTraceHit(other, hitlocation, hitnormal, x, y, z);\n\tif(Other.isa('Pawn') || Other.IsA('DeusExCarcass'))\n\t{\n\t\tEvolve(Rand(30));\n\t\treturn;\n\t}\n\t\n\n}\n\nfunction Evolve(int i)\n{\n\tlve+=i;\n\tif(lve >= 100*lvl)\n\t{\n\t\tDeusExPlayer(Owner).ClientMessage(ItemArticle@ItemName$\" grows stronger...\");\n\t\tlvl++;\n\t\tlve=0;\n\t}\n}\n\nfunction AugExp(int Spell)\n{\n\tlocal SphereEffect sphere;\n\tlocal ScorchMark s;\n\tlocal ExplosionLight light;\n\tlocal int i;\n\tlocal float explosionDamage;\n\tlocal float explosionRadius;\n\tlocal DeusExPlayer DXP;\n\texplosionDamage = 100;\n\texplosionRadius = 1000;\n\n\t// alert NPCs that I'm exploding\n\tAISendEvent('LoudNoise', EAITYPE_Audio, , explosionRadius*16);\n\tPlaySound(Sound'LargeExplosion1', SLOT_None,,, explosionRadius*16);\n\n\t// draw a pretty explosion\n\tlight = Spawn(class'ExplosionLight',,, Location);\n\tif (light != None)\n\t\tlight.size = 4;\n\n\tSpawn(class'ExplosionSmall',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionLarge',,, Location + 2*VRand()*CollisionRadius);\n\n\tsphere = Spawn(class'SphereEffect',,, Location);\n\tif (sphere != None)\n\t\tsphere.size = explosionRadius / 32.0;\n\t\tsphere.Skin=FireTexture'Effects.Electricity.Virus_SFX';\n\t\tsphere.Texture=FireTexture'Effects.Electricity.Virus_SFX';\n\n\t// spawn a mark\n\ts = spawn(class'ScorchMark', Base,, Location-vect(0,0,1)*CollisionHeight, Rotation+rot(16384,0,0));\n\tif (s != None)\n\t{\n\t\ts.DrawScale = FClamp(explosionDamage/30, 0.1, 3.0);\n\t\ts.ReattachDecal();\n\t}\n\n\tif(Spell == 0) //Elec\n\t{\n\t\tforeach VisibleActors(class'DeusExPlayer', DXP, 150)\n\t\t{\n\t\t\tif(DXP != Owner)\n\t\t\t{\n\t\t\t\tDXP.TakeDamage(20*lvl,DeusExPlayer(Owner),DXP.Location,vect(0,0,1),'EMP');\n\t\t\t}\n\t\t}\n\t}\n\telse if(Spell == 1) //Flame\n\t{\n\t\tforeach VisibleActors(class'DeusExPlayer', DXP, 150)\n\t\t{\n\t\t\tif(DXP != Owner)\n\t\t\t{\n\t\t\t\tDXP.TakeDamage(20*lvl,DeusExPlayer(Owner),DXP.Location,vect(0,0,1),'Burned');\n\t\t\t}\n\t\t}\n\t}\n\telse if(Spell == 2) //Drain\n\t{\n\t\tforeach VisibleActors(class'DeusExPlayer', DXP, 150)\n\t\t{\n\t\t\tif(DXP != Owner)\n\t\t\t{\n\t\t\t\tDXP.TakeDamage(15*lvl,DeusExPlayer(Owner),DXP.Location,vect(0,0,1),'Special');\n\t\t\t\tDeusExPlayer(Owner).HealPlayer(50, True);\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction bool EnergyUse(int i)\n{\n\tif(DeusExPlayer(Owner).Energy > i)\n\t{\n\t\tDeusExPlayer(Owner).Energy -= i;\n\t\treturn true;\n\t}\n}\n\nfunction ScopeToggle()\n{\n\tif(Spell == 0)\n\t{\n\t\tDeusExPlayer(Owner).ClientMessage(\"Flame spell active.\");\n\t\tSpell = 1;\n\t\treturn;\n\t}\n\telse if(Spell == 1)\n\t{\n\t\tDeusExPlayer(Owner).ClientMessage(\"Drain spell active.\");\n\t\tSpell = 2;\n\t\treturn;\n\t}\n\telse if(Spell == 2)\n\t{\n\t\tDeusExPlayer(Owner).ClientMessage(\"Electric spell active.\");\n\t\tSpell = 0;\n\t\treturn;\n\t}\n}\n\nfunction LaserToggle()\n{\n\tif(Spell == 0 && !EnergyUse(10))\n\t\t\treturn;\n\tif(Spell == 1 && !EnergyUse(20))\n\t\t\treturn;\n\tif(Spell == 2 && !EnergyUse(40))\n\t\t\treturn;\n\tAugExp(Spell);\n}\n\nfunction CycleAmmo()\n{\n\tlocal Augrist GA;\n\t\n\tGA = Spawn(class'Augrist',,,Owner.Location);\n\tGA.spell = spell;\n\tGA.lve = lve;\n\tGA.lvl = lvl;\n\tDestroy();\n}\n\ndefaultproperties\n{\n     InventoryGroup=251\n     ItemName=\"Augrist\"\n     Description=\"A strange, ancient triad weapon. You would be hard pressed finding out anything else about it.\"\n     beltDescription=\"AUGRIST\"\n     MultiSkins(1)=Texture'DeusExItems.Skins.PinkMaskTex'\n     MultiSkins(2)=Texture'DeusExItems.Skins.PinkMaskTex'\n     MultiSkins(4)=Texture'PGAssets.Skins.wtf'\n     MultiSkins(5)=Texture'PGAssets.Skins.wtf'\n     MultiSkins(6)=Texture'DeusExItems.Skins.PinkMaskTex'\n     MultiSkins(7)=Texture'DeusExItems.Skins.PinkMaskTex'\n     LightEffect=LE_NonIncidence\n     LightHue=128\n}\n",
            "name": "WeaponAugrist.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "InventoryGroup=251",
                    "ItemName=\"Augrist\"",
                    "Description=\"A strange, ancient triad weapon. You would be hard pressed finding out anything else about it.\"",
                    "beltDescription=\"AUGRIST\"",
                    "MultiSkins(1)=Texture'DeusExItems.Skins.PinkMaskTex'",
                    "MultiSkins(2)=Texture'DeusExItems.Skins.PinkMaskTex'",
                    "MultiSkins(4)=Texture'PGAssets.Skins.wtf'",
                    "MultiSkins(5)=Texture'PGAssets.Skins.wtf'",
                    "MultiSkins(6)=Texture'DeusExItems.Skins.PinkMaskTex'",
                    "MultiSkins(7)=Texture'DeusExItems.Skins.PinkMaskTex'",
                    "LightEffect=LE_NonIncidence",
                    "LightHue=128"
                ],
                "exec": [
                    "#exec OBJ LOAD FILE=\"..\\Textures\\Effects.utx\""
                ],
                "extends": "WeaponNanoSword",
                "functions": {
                    "AugExp": {
                        "body": "{\n\texplosionDamage = 100;\n\texplosionRadius = 1000;\n\n\t// alert NPCs that I'm exploding\n\tAISendEvent('LoudNoise', EAITYPE_Audio, , explosionRadius*16);\n\tPlaySound(Sound'LargeExplosion1', SLOT_None,,, explosionRadius*16);\n\n\t// draw a pretty explosion\n\tlight = Spawn(class'ExplosionLight',,, Location);\n\tif (light != None)\n\t\tlight.size = 4;\n\n\tSpawn(class'ExplosionSmall',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionLarge',,, Location + 2*VRand()*CollisionRadius);\n\n\tsphere = Spawn(class'SphereEffect',,, Location);\n\tif (sphere != None)\n\t\tsphere.size = explosionRadius / 32.0;\n\t\tsphere.Skin=FireTexture'Effects.Electricity.Virus_SFX';\n\t\tsphere.Texture=FireTexture'Effects.Electricity.Virus_SFX';\n\n\t// spawn a mark\n\ts = spawn(class'ScorchMark', Base,, Location-vect(0,0,1)*CollisionHeight, Rotation+rot(16384,0,0));\n\tif (s != None)\n\t{\n\t\ts.DrawScale = FClamp(explosionDamage/30, 0.1, 3.0);\n\t\ts.ReattachDecal();\n\t}\n\n\tif(Spell == 0) //Elec\n\t{\n\t\tforeach VisibleActors(class'DeusExPlayer', DXP, 150)\n\t\t{\n\t\t\tif(DXP != Owner)\n\t\t\t{\n\t\t\t\tDXP.TakeDamage(20*lvl,DeusExPlayer(Owner),DXP.Location,vect(0,0,1),'EMP');\n\t\t\t}\n\t\t}\n\t}\n\telse if(Spell == 1) //Flame\n\t{\n\t\tforeach VisibleActors(class'DeusExPlayer', DXP, 150)\n\t\t{\n\t\t\tif(DXP != Owner)\n\t\t\t{\n\t\t\t\tDXP.TakeDamage(20*lvl,DeusExPlayer(Owner),DXP.Location,vect(0,0,1),'Burned');\n\t\t\t}\n\t\t}\n\t}\n\telse if(Spell == 2) //Drain\n\t{\n\t\tforeach VisibleActors(class'DeusExPlayer', DXP, 150)\n\t\t{\n\t\t\tif(DXP != Owner)\n\t\t\t{\n\t\t\t\tDXP.TakeDamage(15*lvl,DeusExPlayer(Owner),DXP.Location,vect(0,0,1),'Special');\n\t\t\t\tDeusExPlayer(Owner).HealPlayer(50, True);\n\t\t\t}\n\t\t}\n\t}\n}",
                        "locals": [
                            "local SphereEffect sphere;",
                            "local ScorchMark s;",
                            "local ExplosionLight light;",
                            "local int i;",
                            "local float explosionDamage;",
                            "local float explosionRadius;",
                            "local DeusExPlayer DXP;"
                        ],
                        "modifiers": [],
                        "name": "AugExp",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "Spell"
                            ]
                        ],
                        "return": ""
                    },
                    "BeginState": {
                        "body": "{\n\t\tSuper.BeginState();\n\t\tLightType = LT_Steady;\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "BeginState",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "CycleAmmo": {
                        "body": "{\n\t\n\tGA = Spawn(class'Augrist',,,Owner.Location);\n\tGA.spell = spell;\n\tGA.lve = lve;\n\tGA.lvl = lvl;\n\tDestroy();\n}",
                        "locals": [
                            "local Augrist GA;"
                        ],
                        "modifiers": [],
                        "name": "CycleAmmo",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "EndState": {
                        "body": "{\n\t\tSuper.EndState();\n\t\tLightType = LT_None;\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "EndState",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "EnergyUse": {
                        "body": "{\n\tif(DeusExPlayer(Owner).Energy > i)\n\t{\n\t\tDeusExPlayer(Owner).Energy -= i;\n\t\treturn true;\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "EnergyUse",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "i"
                            ]
                        ],
                        "return": "bool"
                    },
                    "Evolve": {
                        "body": "{\n\tlve+=i;\n\tif(lve >= 100*lvl)\n\t{\n\t\tDeusExPlayer(Owner).ClientMessage(ItemArticle@ItemName$\" grows stronger...\");\n\t\tlvl++;\n\t\tlve=0;\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Evolve",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "i"
                            ]
                        ],
                        "return": ""
                    },
                    "LaserToggle": {
                        "body": "{\n\tif(Spell == 0 && !EnergyUse(10))\n\t\t\treturn;\n\tif(Spell == 1 && !EnergyUse(20))\n\t\t\treturn;\n\tif(Spell == 2 && !EnergyUse(40))\n\t\t\treturn;\n\tAugExp(Spell);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "LaserToggle",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ProcessTraceHit": {
                        "body": "{\n\tdxplayer = deusexplayer(other);\n\tsuper.ProcessTraceHit(other, hitlocation, hitnormal, x, y, z);\n\tif(Other.isa('Pawn') || Other.IsA('DeusExCarcass'))\n\t{\n\t\tEvolve(Rand(30));\n\t\treturn;\n\t}\n\t\n\n}",
                        "locals": [
                            "local float        mult;",
                            "local name         damageType;",
                            "local DeusExPlayer dxPlayer;",
                            "local int Bloodinc;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "ProcessTraceHit",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Other"
                            ],
                            [
                                "Vector",
                                "HitLocation"
                            ],
                            [
                                "Vector",
                                "HitNormal"
                            ],
                            [
                                "Vector",
                                "X"
                            ],
                            [
                                "Vector",
                                "Y"
                            ],
                            [
                                "Vector",
                                "Z"
                            ]
                        ],
                        "return": ""
                    },
                    "ScopeToggle": {
                        "body": "{\n\tif(Spell == 0)\n\t{\n\t\tDeusExPlayer(Owner).ClientMessage(\"Flame spell active.\");\n\t\tSpell = 1;\n\t\treturn;\n\t}\n\telse if(Spell == 1)\n\t{\n\t\tDeusExPlayer(Owner).ClientMessage(\"Drain spell active.\");\n\t\tSpell = 2;\n\t\treturn;\n\t}\n\telse if(Spell == 2)\n\t{\n\t\tDeusExPlayer(Owner).ClientMessage(\"Electric spell active.\");\n\t\tSpell = 0;\n\t\treturn;\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "ScopeToggle",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    },
                    "Tick": {
                        "body": "{\n\tsuper.Tick(deltatime);\n\t\n     LightHue++;\n\tif(LightHue >= 255)\n\t{\n\t\tLightHue=0;\n\t}\n     LightSaturation=126;\n\t\n\t\n//\tDXP.TakeDamage(1, DeusExPlayer(Owner), DXP.Location, vect(0,0,0), 'EMP');\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "Deltatime"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 261,
                "replication": "",
                "states": [],
                "variables": [
                    "var() eChk Spell;*/",
                    "var() int spell, lve, lvl;",
                    "var() bool bLockState;"
                ]
            }
        },
        "WeaponAugristReplica.uc": {
            "body": "//=============================================\n// PlasmaSword\n//=============================================\nClass WeaponAugristReplica extends WeaponNanoSword;\n\n#exec OBJ LOAD FILE=\"..\\Textures\\Effects.utx\"\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\nstate DownWeapon\n{\n\tfunction BeginState()\n\t{\n\t\tSuper.BeginState();\n\t\tLightType = LT_None;\n\n\t}\n}\n\nstate Idle\n{\n\tfunction BeginState()\n\t{\n\t\tSuper.BeginState();\n\t\tLightType = LT_Steady;\n\t}\n}\n\nauto state Pickup\n{\n\tfunction EndState()\n\t{\n\t\tSuper.EndState();\n\t\tLightType = LT_None;\n\t}\n}\n\nfunction AugExp()\n{\n\tlocal SphereEffect sphere;\n\tlocal ScorchMark s;\n\tlocal ExplosionLight light;\n\tlocal int i;\n\tlocal float explosionDamage;\n\tlocal float explosionRadius;\n\n\texplosionDamage = 100;\n\texplosionRadius = 1000;\n\n\t// alert NPCs that I'm exploding\n\tAISendEvent('LoudNoise', EAITYPE_Audio, , explosionRadius*16);\n\tPlaySound(Sound'LargeExplosion1', SLOT_None,,, explosionRadius*16);\n\n\t// draw a pretty explosion\n\tlight = Spawn(class'ExplosionLight',,, Location);\n\tif (light != None)\n\t\tlight.size = 4;\n\n\tSpawn(class'ExplosionSmall',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionLarge',,, Location + 2*VRand()*CollisionRadius);\n\n\tsphere = Spawn(class'SphereEffect',,, Location);\n\tif (sphere != None)\n\t\tsphere.size = explosionRadius / 32.0;\n\t\tsphere.Skin=FireTexture'Effects.Electricity.Virus_SFX';\n\t\tsphere.Texture=FireTexture'Effects.Electricity.Virus_SFX';\n\n\t// spawn a mark\n\ts = spawn(class'ScorchMark', Base,, Location-vect(0,0,1)*CollisionHeight, Rotation+rot(16384,0,0));\n\tif (s != None)\n\t{\n\t\ts.DrawScale = FClamp(explosionDamage/30, 0.1, 3.0);\n\t\ts.ReattachDecal();\n\t}\n\n\t// spawn some rocks and flesh fragments\n\tfor (i=0; i<explosionDamage/6; i++)\n\t{\n\t\tif (FRand() < 0.3)\n\t\t\tspawn(class'Rockchip',,,Location);\n\t\telse\n\t\t\tspawn(class'FleshFragment',,,Location);\n\t}\n\n\tDeusExPlayer(Owner).ReducedDamageType = 'Burned';\n\tHurtRadius(explosionDamage, explosionRadius, 'Burned', explosionDamage*100, Location);\n}\n\ndefaultproperties\n{\n     InventoryGroup=251\n     ItemName=\"Augrist Replica\"\n     ItemArticle=\"an\"\n     Description=\"A strange, ancient triad weapon. You would be hard pressed finding out anything else about it.\"\n     beltDescription=\"AUGRIST\"\n     MultiSkins(1)=Texture'DeusExItems.Skins.PinkMaskTex'\n     MultiSkins(2)=Texture'DeusExItems.Skins.PinkMaskTex'\n     MultiSkins(4)=FireTexture'Effects.Electricity.Wepn_EMPG_SFX'\n     MultiSkins(5)=FireTexture'Effects.Electricity.Wepn_EMPG_SFX'\n     MultiSkins(6)=Texture'DeusExItems.Skins.PinkMaskTex'\n     MultiSkins(7)=Texture'DeusExItems.Skins.PinkMaskTex'\n     LightHue=128\n}\n",
            "name": "WeaponAugristReplica.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "InventoryGroup=251",
                    "ItemName=\"Augrist Replica\"",
                    "ItemArticle=\"an\"",
                    "Description=\"A strange, ancient triad weapon. You would be hard pressed finding out anything else about it.\"",
                    "beltDescription=\"AUGRIST\"",
                    "MultiSkins(1)=Texture'DeusExItems.Skins.PinkMaskTex'",
                    "MultiSkins(2)=Texture'DeusExItems.Skins.PinkMaskTex'",
                    "MultiSkins(4)=FireTexture'Effects.Electricity.Wepn_EMPG_SFX'",
                    "MultiSkins(5)=FireTexture'Effects.Electricity.Wepn_EMPG_SFX'",
                    "MultiSkins(6)=Texture'DeusExItems.Skins.PinkMaskTex'",
                    "MultiSkins(7)=Texture'DeusExItems.Skins.PinkMaskTex'",
                    "LightHue=128"
                ],
                "exec": [
                    "#exec OBJ LOAD FILE=\"..\\Textures\\Effects.utx\""
                ],
                "extends": "WeaponNanoSword",
                "functions": {
                    "AugExp": {
                        "body": "{\n\n\texplosionDamage = 100;\n\texplosionRadius = 1000;\n\n\t// alert NPCs that I'm exploding\n\tAISendEvent('LoudNoise', EAITYPE_Audio, , explosionRadius*16);\n\tPlaySound(Sound'LargeExplosion1', SLOT_None,,, explosionRadius*16);\n\n\t// draw a pretty explosion\n\tlight = Spawn(class'ExplosionLight',,, Location);\n\tif (light != None)\n\t\tlight.size = 4;\n\n\tSpawn(class'ExplosionSmall',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionMedium',,, Location + 2*VRand()*CollisionRadius);\n\tSpawn(class'ExplosionLarge',,, Location + 2*VRand()*CollisionRadius);\n\n\tsphere = Spawn(class'SphereEffect',,, Location);\n\tif (sphere != None)\n\t\tsphere.size = explosionRadius / 32.0;\n\t\tsphere.Skin=FireTexture'Effects.Electricity.Virus_SFX';\n\t\tsphere.Texture=FireTexture'Effects.Electricity.Virus_SFX';\n\n\t// spawn a mark\n\ts = spawn(class'ScorchMark', Base,, Location-vect(0,0,1)*CollisionHeight, Rotation+rot(16384,0,0));\n\tif (s != None)\n\t{\n\t\ts.DrawScale = FClamp(explosionDamage/30, 0.1, 3.0);\n\t\ts.ReattachDecal();\n\t}\n\n\t// spawn some rocks and flesh fragments\n\tfor (i=0; i<explosionDamage/6; i++)\n\t{\n\t\tif (FRand() < 0.3)\n\t\t\tspawn(class'Rockchip',,,Location);\n\t\telse\n\t\t\tspawn(class'FleshFragment',,,Location);\n\t}\n\n\tDeusExPlayer(Owner).ReducedDamageType = 'Burned';\n\tHurtRadius(explosionDamage, explosionRadius, 'Burned', explosionDamage*100, Location);\n}",
                        "locals": [
                            "local SphereEffect sphere;",
                            "local ScorchMark s;",
                            "local ExplosionLight light;",
                            "local int i;",
                            "local float explosionDamage;",
                            "local float explosionRadius;"
                        ],
                        "modifiers": [],
                        "name": "AugExp",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "BeginState": {
                        "body": "{\n\t\tSuper.BeginState();\n\t\tLightType = LT_Steady;\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "BeginState",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "EndState": {
                        "body": "{\n\t\tSuper.EndState();\n\t\tLightType = LT_None;\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "EndState",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 109,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "WeaponBFG.uc": {
            "body": "//=============================================================================\n// WeaponLAW.\n//=============================================================================\nclass WeaponBFG extends DeusExWeapon;\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t\tReloadCount = mpReloadCount;\n\t}\n}\n\nfunction PostBeginPlay()\n{\n   Super.PostBeginPlay();\n   bWeaponStay=False;\n}\n\n// Become a pickup\n// Weapons that carry their ammo with them don't vanish when dropped\nfunction BecomePickup()\n{\n\tSuper.BecomePickup();\n   if (Level.NetMode != NM_Standalone)\n      if (bTossedOut)\n         Lifespan = 0.0;\n}\n\ndefaultproperties\n{\n     LowAmmoWaterMark=0\n     GoverningSkill=Class'DeusEx.SkillWeaponHeavy'\n     NoiseLevel=2.000000\n     ShotTime=0.300000\n     reloadTime=0.000000\n     HitDamage=100\n     maxRange=24000\n     AccurateRange=14400\n     BaseAccuracy=0.600000\n     bHasMuzzleFlash=False\n     recoilStrength=1.000000\n     mpHitDamage=100\n     mpBaseAccuracy=0.600000\n     mpAccurateRange=14400\n     mpMaxRange=14400\n     AmmoName=Class'DeusEx.AmmoNone'\n     ReloadCount=0\n     FireOffset=(X=28.000000,Y=12.000000,Z=4.000000)\n     ProjectileClass=Class'PartyStuff.BFG'\n     shakemag=500.000000\n     FireSound=Sound'DeusExSounds.Weapons.LAWFire'\n     SelectSound=Sound'DeusExSounds.Weapons.LAWSelect'\n     InventoryGroup=16\n     ItemName=\"Big Fucking Gun (BFG)\"\n     PlayerViewOffset=(X=18.000000,Y=-18.000000,Z=-7.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.LAW'\n     PickupViewMesh=LodMesh'DeusExItems.LAWPickup'\n     ThirdPersonMesh=LodMesh'DeusExItems.LAW3rd'\n     LandSound=Sound'DeusExSounds.Generic.DropLargeWeapon'\n     Icon=Texture'DeusExUI.Icons.BeltIconLAW'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconLAW'\n     largeIconWidth=166\n     largeIconHeight=47\n     invSlotsX=4\n     Description=\"The LAW provides cheap, dependable anti-armor capability in the form of an integrated one-shot rocket and delivery system, though at the expense of any laser guidance. Like other heavy weapons, the LAW can slow agents who have not trained with it extensively.\"\n     beltDescription=\"BFG\"\n     Mesh=LodMesh'DeusExItems.LAWPickup'\n     CollisionRadius=25.000000\n     CollisionHeight=6.800000\n     Mass=50.000000\n}\n",
            "name": "WeaponBFG.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "LowAmmoWaterMark=0",
                    "GoverningSkill=Class'DeusEx.SkillWeaponHeavy'",
                    "NoiseLevel=2.000000",
                    "ShotTime=0.300000",
                    "reloadTime=0.000000",
                    "HitDamage=100",
                    "maxRange=24000",
                    "AccurateRange=14400",
                    "BaseAccuracy=0.600000",
                    "bHasMuzzleFlash=False",
                    "recoilStrength=1.000000",
                    "mpHitDamage=100",
                    "mpBaseAccuracy=0.600000",
                    "mpAccurateRange=14400",
                    "mpMaxRange=14400",
                    "AmmoName=Class'DeusEx.AmmoNone'",
                    "ReloadCount=0",
                    "FireOffset=(X=28.000000,Y=12.000000,Z=4.000000)",
                    "ProjectileClass=Class'PartyStuff.BFG'",
                    "shakemag=500.000000",
                    "FireSound=Sound'DeusExSounds.Weapons.LAWFire'",
                    "SelectSound=Sound'DeusExSounds.Weapons.LAWSelect'",
                    "InventoryGroup=16",
                    "ItemName=\"Big Fucking Gun (BFG)\"",
                    "PlayerViewOffset=(X=18.000000,Y=-18.000000,Z=-7.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.LAW'",
                    "PickupViewMesh=LodMesh'DeusExItems.LAWPickup'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.LAW3rd'",
                    "LandSound=Sound'DeusExSounds.Generic.DropLargeWeapon'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconLAW'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconLAW'",
                    "largeIconWidth=166",
                    "largeIconHeight=47",
                    "invSlotsX=4",
                    "Description=\"The LAW provides cheap, dependable anti-armor capability in the form of an integrated one-shot rocket and delivery system, though at the expense of any laser guidance. Like other heavy weapons, the LAW can slow agents who have not trained with it extensively.\"",
                    "beltDescription=\"BFG\"",
                    "Mesh=LodMesh'DeusExItems.LAWPickup'",
                    "CollisionRadius=25.000000",
                    "CollisionHeight=6.800000",
                    "Mass=50.000000"
                ],
                "exec": [],
                "extends": "DeusExWeapon",
                "functions": {
                    "BecomePickup": {
                        "body": "{\n\tSuper.BecomePickup();\n   if (Level.NetMode != NM_Standalone)\n      if (bTossedOut)\n         Lifespan = 0.0;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "BecomePickup",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PostBeginPlay": {
                        "body": "{\n   Super.PostBeginPlay();\n   bWeaponStay=False;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t\tReloadCount = mpReloadCount;\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 81,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "WeaponBantorain.uc": {
            "body": "class WeaponBantorain extends WeaponPistol;\n\nvar float\tmpRecoilStrength;\nvar MuzzleFlash flash;\nvar float mpNoScopeMult;\nvar() float Thick;\nvar() float PawnThick;\n\n//simulated function bool clientFire(float value)\nfunction Fire(float value)\n{\n     Local Vector offset,x,y,z;\n     local rotator rot;\n     if (owner==none)\n        return;\n     else if (!bHasMuzzleFlash)\n         {\n         super.fire(value);\n         return;\n         }\n     GetAxes(pawn(owner).ViewRotation,x,y,z);\n     if (owner.IsA('DeusExPlayer'))\n        {\n        offset = Owner.Location + CalcDrawOffset() + FireOffset.X * X + FireOffset.Y * Y + FireOffset.Z * Z;\n        rot=DeusExPlayer(owner).viewRotation;\n        }\n     else\n         {\n         offset= Owner.Location;\n         offset += X * Owner.CollisionRadius*2;\n         rot=owner.rotation;\n         }\n     Flash = spawn(class'muzzleflash',,,offset,rot);\n     if(flash!=none)\n         {\n         Flash.setbase(owner);\n         //Flash.playanim('shoot');\n         }\n     super.fire(value);\n}\n\nfunction TraceFire (float Accuracy)\n{\n\tlocal Vector HitLocation;\n\tlocal Vector HitNormal;\n\tlocal Vector StartTrace;\n\tlocal Vector EndTrace;\n\tlocal Vector X;\n\tlocal Vector Y;\n\tlocal Vector Z;\n\tlocal Actor Other;\n\tlocal Pawn PawnOwner;\n\tlocal float Penetration;\n\tlocal Rotator rot;\n\t\n\tPawnOwner=Pawn(Owner);\n\tOwner.MakeNoise(PawnOwner.SoundDampening);\n\tGetAxes(PawnOwner.ViewRotation,X,Y,Z);\n\tStartTrace=Owner.Location + CalcDrawOffset() + FireOffset.X * X + FireOffset.Y * Y + FireOffset.Z * Z;\n\tAdjustedAim=PawnOwner.AdjustAim(1000000.00,StartTrace,2 * aimerror,False,False);\n\tEndTrace=StartTrace + Accuracy * (FRand() - 0.50) * Y * 1000 + Accuracy * (FRand() - 0.50) * Z * 1000;\n\tX=vector(AdjustedAim);\n\tEndTrace += 10000 * X;\n\tOther=PawnOwner.TraceShot(HitLocation,HitNormal,EndTrace,StartTrace);\n\trot = Rotator(EndTrace - StartTrace);\n\tSpawn(class'Tracer',,, StartTrace + 96 * Vector(rot), rot);\n\tProcessTraceHit(Other,HitLocation,HitNormal,X,Y,Z);\n\tif ( Other.IsA('Pawn') )\n\t{\n\t\tPenetration=PawnThick;\n\t}\n\telse\n\t{\n\t\tPenetration=Thick;\n\t}\n\tStartTrace=HitLocation + HitNormal + Penetration * X;\n\tEndTrace=StartTrace + Accuracy * (FRand() - 0.50) * Y * 1000 + Accuracy * (FRand() - 0.50) * Z * 1000;\n\tEndTrace += 10000 * X;\n\tOther=PawnOwner.TraceShot(HitLocation,HitNormal,EndTrace,StartTrace);\n\tProcessTraceHit(Other,HitLocation,HitNormal,X,Y,Z);\n}\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\ndefaultproperties\n{\n     Thick=64.000000\n     PawnThick=32.000000\n     HitDamage=30\n     bHasScope=True\n     mpHitDamage=100\n     FireSound=Sound'DeusExSounds.Weapons.RifleFire'\n     AltFireSound=Sound'DeusExSounds.Weapons.RifleReloadEnd'\n     CockingSound=Sound'DeusExSounds.Weapons.RifleReload'\n     SelectSound=Sound'DeusExSounds.Weapons.RifleSelect'\n     InventoryGroup=122\n     ItemName=\"Bantorain 93R\"\n     ItemArticle=\"the\"\n     beltDescription=\"BA 93R\"\n     Mass=1.000000\n}\n",
            "name": "WeaponBantorain.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "Thick=64.000000",
                    "PawnThick=32.000000",
                    "HitDamage=30",
                    "bHasScope=True",
                    "mpHitDamage=100",
                    "FireSound=Sound'DeusExSounds.Weapons.RifleFire'",
                    "AltFireSound=Sound'DeusExSounds.Weapons.RifleReloadEnd'",
                    "CockingSound=Sound'DeusExSounds.Weapons.RifleReload'",
                    "SelectSound=Sound'DeusExSounds.Weapons.RifleSelect'",
                    "InventoryGroup=122",
                    "ItemName=\"Bantorain 93R\"",
                    "ItemArticle=\"the\"",
                    "beltDescription=\"BA 93R\"",
                    "Mass=1.000000"
                ],
                "exec": [],
                "extends": "WeaponPistol",
                "functions": {
                    "Fire": {
                        "body": "{\n     if (owner==none)\n        return;\n     else if (!bHasMuzzleFlash)\n         {\n         super.fire(value);\n         return;\n         }\n     GetAxes(pawn(owner).ViewRotation,x,y,z);\n     if (owner.IsA('DeusExPlayer'))\n        {\n        offset = Owner.Location + CalcDrawOffset() + FireOffset.X * X + FireOffset.Y * Y + FireOffset.Z * Z;\n        rot=DeusExPlayer(owner).viewRotation;\n        }\n     else\n         {\n         offset= Owner.Location;\n         offset += X * Owner.CollisionRadius*2;\n         rot=owner.rotation;\n         }\n     Flash = spawn(class'muzzleflash',,,offset,rot);\n     if(flash!=none)\n         {\n         Flash.setbase(owner);\n         //Flash.playanim('shoot');\n         }\n     super.fire(value);\n}",
                        "locals": [
                            "Local Vector offset,x,y,z;",
                            "local rotator rot;"
                        ],
                        "modifiers": [],
                        "name": "Fire",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "value"
                            ]
                        ],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    },
                    "TraceFire": {
                        "body": "{\n\t\n\tPawnOwner=Pawn(Owner);\n\tOwner.MakeNoise(PawnOwner.SoundDampening);\n\tGetAxes(PawnOwner.ViewRotation,X,Y,Z);\n\tStartTrace=Owner.Location + CalcDrawOffset() + FireOffset.X * X + FireOffset.Y * Y + FireOffset.Z * Z;\n\tAdjustedAim=PawnOwner.AdjustAim(1000000.00,StartTrace,2 * aimerror,False,False);\n\tEndTrace=StartTrace + Accuracy * (FRand() - 0.50) * Y * 1000 + Accuracy * (FRand() - 0.50) * Z * 1000;\n\tX=vector(AdjustedAim);\n\tEndTrace += 10000 * X;\n\tOther=PawnOwner.TraceShot(HitLocation,HitNormal,EndTrace,StartTrace);\n\trot = Rotator(EndTrace - StartTrace);\n\tSpawn(class'Tracer',,, StartTrace + 96 * Vector(rot), rot);\n\tProcessTraceHit(Other,HitLocation,HitNormal,X,Y,Z);\n\tif ( Other.IsA('Pawn') )\n\t{\n\t\tPenetration=PawnThick;\n\t}\n\telse\n\t{\n\t\tPenetration=Thick;\n\t}\n\tStartTrace=HitLocation + HitNormal + Penetration * X;\n\tEndTrace=StartTrace + Accuracy * (FRand() - 0.50) * Y * 1000 + Accuracy * (FRand() - 0.50) * Z * 1000;\n\tEndTrace += 10000 * X;\n\tOther=PawnOwner.TraceShot(HitLocation,HitNormal,EndTrace,StartTrace);\n\tProcessTraceHit(Other,HitLocation,HitNormal,X,Y,Z);\n}",
                        "locals": [
                            "local Vector HitLocation;",
                            "local Vector HitNormal;",
                            "local Vector StartTrace;",
                            "local Vector EndTrace;",
                            "local Vector X;",
                            "local Vector Y;",
                            "local Vector Z;",
                            "local Actor Other;",
                            "local Pawn PawnOwner;",
                            "local float Penetration;",
                            "local Rotator rot;"
                        ],
                        "modifiers": [],
                        "name": "TraceFire",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "Accuracy"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 105,
                "replication": "",
                "states": [],
                "variables": [
                    "var float\tmpRecoilStrength;",
                    "var MuzzleFlash flash;",
                    "var float mpNoScopeMult;",
                    "var() float Thick;",
                    "var() float PawnThick;"
                ]
            }
        },
        "WeaponBaton2.uc": {
            "body": "//=============================================================================\n// WeaponBaton.\n//=============================================================================\nclass WeaponBaton2 extends DeusExWeapon;\n\nenum EModeNum\n{\n\tMode_Normal,\n\tMode_Throw,\n};\n\nVar EModeNum Mode;\nvar DeusExPlayer DXPl;\n\nreplication\n{\n\tReliable if(Role==ROLE_AUTHORITY)\n\t\tMode;\n}\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t}\n}\n\nFunction Fire(Float value)\n{\n\tlocal Thrownbaton S;\n\tDXPL=DeusExPlayer(Owner);\n\tIf(Mode==Mode_Throw)\n\t{\n\t\tS=Spawn(class'Thrownbaton',Pawn(Owner),,Location+vect(0,0,-2),DXPL.ViewRotation);\n\t\tif(S!=None)\n\t\t{\n\t\t\tS.SetOwner(DXPL);\n\t\t\tS.Lifespan=15;\n\t\t}\n\t\tDestroy();\n\t}\n\telse\n\t{\n\t\tSuper.Fire(Value);\n\t}\n}\n\nFunction cycleammo()\n{\n\tswitch Mode\n\t\t{\n\t\tcase MODE_Normal:\n\t\t\tMode = MODE_Throw;\n\t\t\tif (Role == ROLE_Authority)\n\t\t\tPawn(Owner).Clientmessage(\"Throwing mode\");\n\t\t\tbreak;\n\n\t\tcase MODE_Throw:\n\t\t\tMode = MODE_Normal;\n\t\t\tif (Role == ROLE_Authority)\n\t\t\tPawn(Owner).Clientmessage(\"Normal mode\");\n\t\t\tbreak;\n\t\t\t\n\t\t}\n}\n\nfunction name WeaponDamageType()\n{\n\treturn 'KnockedOut';\n}\n\ndefaultproperties\n{\n     LowAmmoWaterMark=0\n     GoverningSkill=Class'DeusEx.SkillWeaponLowTech'\n     NoiseLevel=0.050000\n     reloadTime=0.000000\n     HitDamage=7\n     maxRange=80\n     AccurateRange=80\n     BaseAccuracy=1.000000\n     bPenetrating=False\n     bHasMuzzleFlash=False\n     bHandToHand=True\n     bFallbackWeapon=True\n     bEmitWeaponDrawn=False\n     AmmoName=Class'DeusEx.AmmoNone'\n     ReloadCount=0\n     bInstantHit=True\n     FireOffset=(X=-24.000000,Y=14.000000,Z=17.000000)\n     shakemag=20.000000\n     FireSound=Sound'DeusExSounds.Weapons.BatonFire'\n     SelectSound=Sound'DeusExSounds.Weapons.BatonSelect'\n     Misc1Sound=Sound'DeusExSounds.Weapons.BatonHitFlesh'\n     Misc2Sound=Sound'DeusExSounds.Weapons.BatonHitHard'\n     Misc3Sound=Sound'DeusExSounds.Weapons.BatonHitSoft'\n     InventoryGroup=24\n     ItemName=\"Baton\"\n     PlayerViewOffset=(X=24.000000,Y=-14.000000,Z=-17.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.Baton'\n     PickupViewMesh=LodMesh'DeusExItems.BatonPickup'\n     ThirdPersonMesh=LodMesh'DeusExItems.Baton3rd'\n     Icon=Texture'DeusExUI.Icons.BeltIconBaton'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconBaton'\n     largeIconWidth=46\n     largeIconHeight=47\n     Description=\"A hefty looking baton, typically used by riot police and national security forces to discourage civilian resistance.\"\n     beltDescription=\"BATON\"\n     Mesh=LodMesh'DeusExItems.BatonPickup'\n     CollisionRadius=14.000000\n     CollisionHeight=1.000000\n}\n",
            "name": "WeaponBaton2.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "LowAmmoWaterMark=0",
                    "GoverningSkill=Class'DeusEx.SkillWeaponLowTech'",
                    "NoiseLevel=0.050000",
                    "reloadTime=0.000000",
                    "HitDamage=7",
                    "maxRange=80",
                    "AccurateRange=80",
                    "BaseAccuracy=1.000000",
                    "bPenetrating=False",
                    "bHasMuzzleFlash=False",
                    "bHandToHand=True",
                    "bFallbackWeapon=True",
                    "bEmitWeaponDrawn=False",
                    "AmmoName=Class'DeusEx.AmmoNone'",
                    "ReloadCount=0",
                    "bInstantHit=True",
                    "FireOffset=(X=-24.000000,Y=14.000000,Z=17.000000)",
                    "shakemag=20.000000",
                    "FireSound=Sound'DeusExSounds.Weapons.BatonFire'",
                    "SelectSound=Sound'DeusExSounds.Weapons.BatonSelect'",
                    "Misc1Sound=Sound'DeusExSounds.Weapons.BatonHitFlesh'",
                    "Misc2Sound=Sound'DeusExSounds.Weapons.BatonHitHard'",
                    "Misc3Sound=Sound'DeusExSounds.Weapons.BatonHitSoft'",
                    "InventoryGroup=24",
                    "ItemName=\"Baton\"",
                    "PlayerViewOffset=(X=24.000000,Y=-14.000000,Z=-17.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.Baton'",
                    "PickupViewMesh=LodMesh'DeusExItems.BatonPickup'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.Baton3rd'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconBaton'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconBaton'",
                    "largeIconWidth=46",
                    "largeIconHeight=47",
                    "Description=\"A hefty looking baton, typically used by riot police and national security forces to discourage civilian resistance.\"",
                    "beltDescription=\"BATON\"",
                    "Mesh=LodMesh'DeusExItems.BatonPickup'",
                    "CollisionRadius=14.000000",
                    "CollisionHeight=1.000000"
                ],
                "exec": [],
                "extends": "DeusExWeapon",
                "functions": {
                    "Fire": {
                        "body": "{\n\tDXPL=DeusExPlayer(Owner);\n\tIf(Mode==Mode_Throw)\n\t{\n\t\tS=Spawn(class'Thrownbaton',Pawn(Owner),,Location+vect(0,0,-2),DXPL.ViewRotation);\n\t\tif(S!=None)\n\t\t{\n\t\t\tS.SetOwner(DXPL);\n\t\t\tS.Lifespan=15;\n\t\t}\n\t\tDestroy();\n\t}\n\telse\n\t{\n\t\tSuper.Fire(Value);\n\t}\n}",
                        "locals": [
                            "local Thrownbaton S;"
                        ],
                        "modifiers": [],
                        "name": "Fire",
                        "native": false,
                        "param": [
                            [
                                "Float",
                                "value"
                            ]
                        ],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "WeaponDamageType": {
                        "body": "{\n\treturn 'KnockedOut';\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "WeaponDamageType",
                        "native": false,
                        "param": [],
                        "return": "name"
                    },
                    "cycleammo": {
                        "body": "{\n\tswitch Mode\n\t\t{\n\t\tcase MODE_Normal:\n\t\t\tMode = MODE_Throw;\n\t\t\tif (Role == ROLE_Authority)\n\t\t\tPawn(Owner).Clientmessage(\"Throwing mode\");\n\t\t\tbreak;\n\n\t\tcase MODE_Throw:\n\t\t\tMode = MODE_Normal;\n\t\t\tif (Role == ROLE_Authority)\n\t\t\tPawn(Owner).Clientmessage(\"Normal mode\");\n\t\t\tbreak;\n\t\t\t\n\t\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "cycleammo",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 121,
                "replication": "",
                "states": [],
                "variables": [
                    "Var EModeNum Mode;",
                    "var DeusExPlayer DXPl;"
                ]
            }
        },
        "WeaponBeamRifle.uc": {
            "body": "class WeaponBeamRifle extends WeaponAssaultGun;\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\ndefaultproperties\n{\n     HitDamage=8\n     bInstantHit=False\n     ProjectileClass=Class'PartyStuff.LB2'\n     InventoryGroup=35\n     ItemName=\"Light Beam Rifle\"\n     beltDescription=\"BEAM\"\n     Mass=1.000000\n}\n",
            "name": "WeaponBeamRifle.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "HitDamage=8",
                    "bInstantHit=False",
                    "ProjectileClass=Class'PartyStuff.LB2'",
                    "InventoryGroup=35",
                    "ItemName=\"Light Beam Rifle\"",
                    "beltDescription=\"BEAM\"",
                    "Mass=1.000000"
                ],
                "exec": [],
                "extends": "WeaponAssaultGun",
                "functions": {
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 18,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "WeaponBeamRifleHeavy.uc": {
            "body": "class WeaponBeamRifleHeavy extends WeaponAssaultGun;\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\ndefaultproperties\n{\n     HitDamage=8\n     bInstantHit=False\n     ProjectileClass=Class'PartyStuff.LB3'\n     InventoryGroup=250\n     ItemName=\"Heavy Beam Rifle\"\n     PlayerViewOffset=(X=46.000000,Y=-22.000000,Z=-10.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.GEPGun'\n     PickupViewMesh=LodMesh'DeusExItems.GEPGunPickup'\n     ThirdPersonMesh=LodMesh'DeusExItems.GEPGun3rd'\n     LandSound=Sound'DeusExSounds.Generic.DropLargeWeapon'\n     Icon=Texture'DeusExUI.Icons.BeltIconGEPGun'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconGEPGun'\n     largeIconWidth=203\n     largeIconHeight=77\n     invSlotsX=4\n     beltDescription=\"BEAM\"\n}\n",
            "name": "WeaponBeamRifleHeavy.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "HitDamage=8",
                    "bInstantHit=False",
                    "ProjectileClass=Class'PartyStuff.LB3'",
                    "InventoryGroup=250",
                    "ItemName=\"Heavy Beam Rifle\"",
                    "PlayerViewOffset=(X=46.000000,Y=-22.000000,Z=-10.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.GEPGun'",
                    "PickupViewMesh=LodMesh'DeusExItems.GEPGunPickup'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.GEPGun3rd'",
                    "LandSound=Sound'DeusExSounds.Generic.DropLargeWeapon'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconGEPGun'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconGEPGun'",
                    "largeIconWidth=203",
                    "largeIconHeight=77",
                    "invSlotsX=4",
                    "beltDescription=\"BEAM\""
                ],
                "exec": [],
                "extends": "WeaponAssaultGun",
                "functions": {
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 27,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "WeaponBioRifle.uc": {
            "body": "class WeaponBioRifle extends WeaponAssaultGun;\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\ndefaultproperties\n{\n     HitDamage=8\n     bInstantHit=False\n     ProjectileClass=Class'PartyStuff.GrayShoot'\n     InventoryGroup=111\n     ItemName=\"|P2Bio Assault Gun\"\n     beltDescription=\"BIO\"\n     Mass=1.000000\n}\n",
            "name": "WeaponBioRifle.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "HitDamage=8",
                    "bInstantHit=False",
                    "ProjectileClass=Class'PartyStuff.GrayShoot'",
                    "InventoryGroup=111",
                    "ItemName=\"|P2Bio Assault Gun\"",
                    "beltDescription=\"BIO\"",
                    "Mass=1.000000"
                ],
                "exec": [],
                "extends": "WeaponAssaultGun",
                "functions": {
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 18,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "WeaponBioRifleX.uc": {
            "body": "class WeaponBioRifleX extends WeaponAssaultGun;\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\ndefaultproperties\n{\n     HitDamage=8\n     bInstantHit=False\n     ProjectileClass=Class'PartyStuff.GrayShoot'\n     InventoryGroup=111\n     ItemName=\"|P2Bio Assault Gun\"\n     ThirdPersonMesh=None\n     beltDescription=\"BIO\"\n     Mass=1.000000\n}\n",
            "name": "WeaponBioRifleX.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "HitDamage=8",
                    "bInstantHit=False",
                    "ProjectileClass=Class'PartyStuff.GrayShoot'",
                    "InventoryGroup=111",
                    "ItemName=\"|P2Bio Assault Gun\"",
                    "ThirdPersonMesh=None",
                    "beltDescription=\"BIO\"",
                    "Mass=1.000000"
                ],
                "exec": [],
                "extends": "WeaponAssaultGun",
                "functions": {
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 19,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "WeaponBloodSword.uc": {
            "body": "//=============================================================================\n// WeaponPure\n//=============================================================================\nclass WeaponBloodSword extends DeusExWeapon;\n\nvar int Blood, rBlood;\n\nreplication\n{\nreliable if (bNetOwner && Role==ROLE_Authority)\nrBlood;\n}\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t}\n}\n\nsimulated function ProcessTraceHit(Actor Other, Vector HitLocation, Vector HitNormal, Vector X, Vector Y, Vector Z)\n{\n\tlocal float        mult;\n\tlocal name         damageType;\n\tlocal DeusExPlayer dxPlayer;\n\tlocal int Bloodinc;\n\tdxplayer = deusexplayer(other);\n\n\tif(Other.isa('Pawn') || Other.IsA('DeusExCarcass'))\n\t{\n\t\tif(DeusExPlayer(Owner).Health < 100)\n\t\t{\n\t\tDeusExPlayer(Owner).HealPlayer(HitDamage, True);\n\t\t}\n\t\tBloodinc += RandRange(5,15);\n\t}\n\t\n\tsuper.ProcessTraceHit(other, hitlocation, hitnormal, x, y, z);\n\t\n\tBlood += Bloodinc;\n\trBlood = Blood;\n}\n\nfunction ScopeToggle()\n{\n\tif(Blood >= 10)\n\t{\n\t\tBlood -= 10;\n\t\trBlood = Blood;\n\t\tSpawn(class'Ultima',Pawn(Owner),,Pawn(Owner).Location,Pawn(Owner).ViewRotation);\n\t}\n}\n\nfunction LaserToggle()\n{\n\tif(Blood >= 200)\n\t{\n\t\tBlood -= 200;\n\t\trBlood = Blood;\n\t\tSpawn(class'Ultima2',Pawn(Owner),,Pawn(Owner).Location,Pawn(Owner).ViewRotation);\n\t}\n}\n\nfunction CycleAmmo()\n{\n}\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\nstate DownWeapon\n{\n\tfunction BeginState()\n\t{\n\t\tSuper.BeginState();\n\t\tLightType = LT_None;\n\t}\n}\n\nstate Idle\n{\n\tfunction BeginState()\n\t{\n\t\tSuper.BeginState();\n\t\tLightType = LT_Steady;\n\t}\n}\n\nauto state Pickup\n{\n\tfunction EndState()\n\t{\n\t\tSuper.EndState();\n\t\tLightType = LT_None;\n\t}\n}\n\nsimulated function RenderOverlays(canvas Canvas)\n{\n\tlocal DeusExPlayer P;\n\tlocal Pawn CrosshairTarget;\n\tlocal float Scale, Accuracy, Dist;\n\tlocal vector HitLocation, HitNormal, StartTrace, EndTrace, X,Y,Z;\n\n\tSuper.RenderOverlays(Canvas);\n\tP = DeusExPlayer(Owner);\n\tif ( P != None ) \n\t{\t\n\t\tGetAxes(Pawn(Owner).ViewRotation,X,Y,Z);\t\n\t\tStartTrace = ComputeProjectileStart(X, Y, Z);\n\t\tAdjustedAim = P.AdjustAim(1000000, StartTrace, 2*AimError, False, False);\n\t\tEndTrace = StartTrace + Accuracy * (FRand()-0.5)*Y*1000 + Accuracy * (FRand()-0.5)*Z*1000 ;\t\n\t\tEndTrace += (FMax(1024.0, MaxRange) * Vector(AdjustedAim));\n\t\t\t\tbOwnsCrossHair = True; \n\t\t\t\tScale = Canvas.ClipX/640;\n\t\t\t\tCanvas.SetPos(0.5 * Canvas.ClipX - 16 * Scale, 0.5 * Canvas.ClipY - 16 * Scale );\n\t\t\t\tCanvas.DrawColor.R = Rand(128);\n\t\t\t\tCanvas.DrawColor.G = 0;\n\t\t\t\tCanvas.DrawColor.B = 0;\n\t\t\t\tCanvas.Font = Canvas.SmallFont;\n\n\t\t\t\t\tCanvas.DrawText(\"        Blood: \"$rBlood);\n\t\t\t}\n\t\t\telse\n\t\t\t\tbOwnsCrossHair = False; // Only for compatibility with HDX50\t\t\n}\n\ndefaultproperties\n{\n     LowAmmoWaterMark=0\n     GoverningSkill=Class'DeusEx.SkillWeaponLowTech'\n     NoiseLevel=0.050000\n     reloadTime=0.000000\n     HitDamage=500\n     maxRange=96\n     AccurateRange=96\n     BaseAccuracy=1.000000\n     AreaOfEffect=AOE_Cone\n     bHasMuzzleFlash=False\n     bHandToHand=True\n     SwingOffset=(X=24.000000,Z=2.000000)\n     mpHitDamage=500\n     mpBaseAccuracy=1.000000\n     mpAccurateRange=150\n     mpMaxRange=150\n     AmmoName=Class'DeusEx.AmmoNone'\n     ReloadCount=0\n     bInstantHit=True\n     FireOffset=(X=-21.000000,Y=16.000000,Z=27.000000)\n     shakemag=20.000000\n     FireSound=Sound'DeusExSounds.Weapons.NanoSwordFire'\n     SelectSound=Sound'DeusExSounds.Weapons.NanoSwordSelect'\n     Misc1Sound=Sound'DeusExSounds.Weapons.NanoSwordHitFlesh'\n     Misc2Sound=Sound'DeusExSounds.Weapons.NanoSwordHitHard'\n     Misc3Sound=Sound'DeusExSounds.Weapons.NanoSwordHitSoft'\n     InventoryGroup=14\n     ItemName=\"Blood Sword\"\n     ItemArticle=\"the\"\n     PlayerViewOffset=(X=21.000000,Y=-16.000000,Z=-27.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.NanoSword'\n     PickupViewMesh=LodMesh'DeusExItems.NanoSwordPickup'\n     ThirdPersonMesh=LodMesh'DeusExItems.NanoSword3rd'\n     LandSound=Sound'DeusExSounds.Generic.DropLargeWeapon'\n     Icon=Texture'DeusExUI.Icons.BeltIconDragonTooth'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconDragonTooth'\n     largeIconWidth=205\n     largeIconHeight=46\n     invSlotsX=4\n     Description=\"Eviiiil.\"\n     beltDescription=\"BLOOD\"\n     Physics=PHYS_Rotating\n     Rotation=(Pitch=900,Yaw=900,Roll=900)\n     Mesh=LodMesh'DeusExItems.NanoSwordPickup'\n     MultiSkins(1)=FireTexture'Effects.Laser.LaserSpot1'\n     MultiSkins(4)=FireTexture'Effects.liquid.Virus_SFX'\n     MultiSkins(5)=FireTexture'Effects.liquid.Virus_SFX'\n     MultiSkins(6)=FireTexture'Effects.Laser.LaserSpot1'\n     CollisionRadius=32.000000\n     CollisionHeight=2.400000\n     LightType=LT_SubtlePulse\n     LightEffect=LE_Interference\n     LightBrightness=224\n     LightRadius=10\n     Mass=20.000000\n     RotationRate=(Pitch=900,Yaw=900,Roll=900)\n}\n",
            "name": "WeaponBloodSword.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "LowAmmoWaterMark=0",
                    "GoverningSkill=Class'DeusEx.SkillWeaponLowTech'",
                    "NoiseLevel=0.050000",
                    "reloadTime=0.000000",
                    "HitDamage=500",
                    "maxRange=96",
                    "AccurateRange=96",
                    "BaseAccuracy=1.000000",
                    "AreaOfEffect=AOE_Cone",
                    "bHasMuzzleFlash=False",
                    "bHandToHand=True",
                    "SwingOffset=(X=24.000000,Z=2.000000)",
                    "mpHitDamage=500",
                    "mpBaseAccuracy=1.000000",
                    "mpAccurateRange=150",
                    "mpMaxRange=150",
                    "AmmoName=Class'DeusEx.AmmoNone'",
                    "ReloadCount=0",
                    "bInstantHit=True",
                    "FireOffset=(X=-21.000000,Y=16.000000,Z=27.000000)",
                    "shakemag=20.000000",
                    "FireSound=Sound'DeusExSounds.Weapons.NanoSwordFire'",
                    "SelectSound=Sound'DeusExSounds.Weapons.NanoSwordSelect'",
                    "Misc1Sound=Sound'DeusExSounds.Weapons.NanoSwordHitFlesh'",
                    "Misc2Sound=Sound'DeusExSounds.Weapons.NanoSwordHitHard'",
                    "Misc3Sound=Sound'DeusExSounds.Weapons.NanoSwordHitSoft'",
                    "InventoryGroup=14",
                    "ItemName=\"Blood Sword\"",
                    "ItemArticle=\"the\"",
                    "PlayerViewOffset=(X=21.000000,Y=-16.000000,Z=-27.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.NanoSword'",
                    "PickupViewMesh=LodMesh'DeusExItems.NanoSwordPickup'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.NanoSword3rd'",
                    "LandSound=Sound'DeusExSounds.Generic.DropLargeWeapon'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconDragonTooth'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconDragonTooth'",
                    "largeIconWidth=205",
                    "largeIconHeight=46",
                    "invSlotsX=4",
                    "Description=\"Eviiiil.\"",
                    "beltDescription=\"BLOOD\"",
                    "Physics=PHYS_Rotating",
                    "Rotation=(Pitch=900,Yaw=900,Roll=900)",
                    "Mesh=LodMesh'DeusExItems.NanoSwordPickup'",
                    "MultiSkins(1)=FireTexture'Effects.Laser.LaserSpot1'",
                    "MultiSkins(4)=FireTexture'Effects.liquid.Virus_SFX'",
                    "MultiSkins(5)=FireTexture'Effects.liquid.Virus_SFX'",
                    "MultiSkins(6)=FireTexture'Effects.Laser.LaserSpot1'",
                    "CollisionRadius=32.000000",
                    "CollisionHeight=2.400000",
                    "LightType=LT_SubtlePulse",
                    "LightEffect=LE_Interference",
                    "LightBrightness=224",
                    "LightRadius=10",
                    "Mass=20.000000",
                    "RotationRate=(Pitch=900,Yaw=900,Roll=900)"
                ],
                "exec": [],
                "extends": "DeusExWeapon",
                "functions": {
                    "BeginState": {
                        "body": "{\n\t\tSuper.BeginState();\n\t\tLightType = LT_Steady;\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "BeginState",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "CycleAmmo": {
                        "body": "{\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "CycleAmmo",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "EndState": {
                        "body": "{\n\t\tSuper.EndState();\n\t\tLightType = LT_None;\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "EndState",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "LaserToggle": {
                        "body": "{\n\tif(Blood >= 200)\n\t{\n\t\tBlood -= 200;\n\t\trBlood = Blood;\n\t\tSpawn(class'Ultima2',Pawn(Owner),,Pawn(Owner).Location,Pawn(Owner).ViewRotation);\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "LaserToggle",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ProcessTraceHit": {
                        "body": "{\n\tdxplayer = deusexplayer(other);\n\n\tif(Other.isa('Pawn') || Other.IsA('DeusExCarcass'))\n\t{\n\t\tif(DeusExPlayer(Owner).Health < 100)\n\t\t{\n\t\tDeusExPlayer(Owner).HealPlayer(HitDamage, True);\n\t\t}\n\t\tBloodinc += RandRange(5,15);\n\t}\n\t\n\tsuper.ProcessTraceHit(other, hitlocation, hitnormal, x, y, z);\n\t\n\tBlood += Bloodinc;\n\trBlood = Blood;\n}",
                        "locals": [
                            "local float        mult;",
                            "local name         damageType;",
                            "local DeusExPlayer dxPlayer;",
                            "local int Bloodinc;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "ProcessTraceHit",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Other"
                            ],
                            [
                                "Vector",
                                "HitLocation"
                            ],
                            [
                                "Vector",
                                "HitNormal"
                            ],
                            [
                                "Vector",
                                "X"
                            ],
                            [
                                "Vector",
                                "Y"
                            ],
                            [
                                "Vector",
                                "Z"
                            ]
                        ],
                        "return": ""
                    },
                    "RenderOverlays": {
                        "body": "{\n\n\tSuper.RenderOverlays(Canvas);\n\tP = DeusExPlayer(Owner);\n\tif ( P != None ) \n\t{\t\n\t\tGetAxes(Pawn(Owner).ViewRotation,X,Y,Z);\t\n\t\tStartTrace = ComputeProjectileStart(X, Y, Z);\n\t\tAdjustedAim = P.AdjustAim(1000000, StartTrace, 2*AimError, False, False);\n\t\tEndTrace = StartTrace + Accuracy * (FRand()-0.5)*Y*1000 + Accuracy * (FRand()-0.5)*Z*1000 ;\t\n\t\tEndTrace += (FMax(1024.0, MaxRange) * Vector(AdjustedAim));\n\t\t\t\tbOwnsCrossHair = True; \n\t\t\t\tScale = Canvas.ClipX/640;\n\t\t\t\tCanvas.SetPos(0.5 * Canvas.ClipX - 16 * Scale, 0.5 * Canvas.ClipY - 16 * Scale );\n\t\t\t\tCanvas.DrawColor.R = Rand(128);\n\t\t\t\tCanvas.DrawColor.G = 0;\n\t\t\t\tCanvas.DrawColor.B = 0;\n\t\t\t\tCanvas.Font = Canvas.SmallFont;\n\n\t\t\t\t\tCanvas.DrawText(\"        Blood: \"$rBlood);\n\t\t\t}\n\t\t\telse\n\t\t\t\tbOwnsCrossHair = False; // Only for compatibility with HDX50\t\t\n}",
                        "locals": [
                            "local DeusExPlayer P;",
                            "local Pawn CrosshairTarget;",
                            "local float Scale, Accuracy, Dist;",
                            "local vector HitLocation, HitNormal, StartTrace, EndTrace, X,Y,Z;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "RenderOverlays",
                        "native": false,
                        "param": [
                            [
                                "canvas",
                                "Canvas"
                            ]
                        ],
                        "return": ""
                    },
                    "ScopeToggle": {
                        "body": "{\n\tif(Blood >= 10)\n\t{\n\t\tBlood -= 10;\n\t\trBlood = Blood;\n\t\tSpawn(class'Ultima',Pawn(Owner),,Pawn(Owner).Location,Pawn(Owner).ViewRotation);\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "ScopeToggle",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 197,
                "replication": "",
                "states": [],
                "variables": [
                    "var int Blood, rBlood;"
                ]
            }
        },
        "WeaponBoner.uc": {
            "body": "//=============================================================================\n// WeaponNailGun.\n//=============================================================================\nclass WeaponBoner extends DeusExWeapon;\n\nvar bool bStickyPayload;\n\nfunction ScopeToggle()\n{\nlocal BonerPayload BP;\n\t\t\tDeusExPlayer(Owner).ClientMessage(\"Blown the load!!!!!!\");\n\tforeach AllActors(class'BonerPayload', BP)\n\t{\n\t\tif(BP.Payloader == DeusExPlayer(Owner))\n\t\t{\n\t\t\tBP.BlowLoad();\n\t\t}\n\t}\n}\n\nfunction LaserToggle()\n{\n\tbStickyPayload = !bStickyPayload;\n\t\tif(bStickyPayload)\n\t\t{\n\t\t\tDeusExPlayer(Owner).ClientMessage(\"Sticky Payload is armed!\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tDeusExPlayer(Owner).ClientMessage(\"Sticky Payload is disarmed!\");\n\t\t}\n}\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t\tReloadCount = mpReloadCount;\n\t}\n}\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\nstate NormalFire //(Thanks to JimBowen for this Infinite ammo code) \n{ \n   Begin: \n      if ((ClipCount >= ReloadCount) && (ReloadCount != 0)) \n      { \n         if (!bAutomatic) \n         { \n            bFiring = False; \n            FinishAnim(); \n         } \n    \n         if (Owner != None) \n         { \n            if (Owner.IsA('DeusExPlayer')) \n            { \n               bFiring = False; \n            } \n            else if (Owner.IsA('ScriptedPawn')) \n            { \n               bFiring = False; \n               ReloadAmmo(); \n            } \n         } \n         else \n         { \n            if (bHasMuzzleFlash) \n               EraseMuzzleFlashTexture(); \n            GotoState('Idle'); \n         } \n      } \n      if ( bAutomatic && (( Level.NetMode == NM_DedicatedServer ) || ((Level.NetMode == NM_ListenServer) && Owner.IsA('DeusExPlayer') && !DeusExPlayer(Owner).PlayerIsListenClient()))) \n         GotoState('Idle'); \n    \n      Sleep(GetShotTime()); \n      if (bAutomatic) \n      { \n         GenerateBullet();       // In multiplayer bullets are generated by the client which will let the server know when \n         Goto('Begin'); \n      } \n      bFiring = False; \n      FinishAnim(); \n      ReadyToFire(); \n   Done: \n      bFiring = False; \n      Finish(); \n}\n\nsimulated event RenderOverlays( canvas Canvas )\n{\n\t// set first person skin settings\n\t\tMultiSkins[3]=Texture'BonerTex1';\n\n\tSuper.RenderOverlays( Canvas );\n\n\t// reset third person skin settings\n\t\tMultiSkins[0]=Texture'boner3rdTex1';\n}\n\ndefaultproperties\n{\n     GoverningSkill=Class'DeusEx.SkillWeaponPistol'\n     NoiseLevel=0.010000\n     ShotTime=0.150000\n     reloadTime=0.000000\n     HitDamage=8\n     maxRange=4800\n     AccurateRange=2400\n     BaseAccuracy=0.800000\n     bCanHaveScope=True\n     bHasScope=True\n     ScopeFOV=25\n     bCanHaveLaser=True\n     bHasLaser=True\n     recoilStrength=0.100000\n     mpReloadTime=1.500000\n     mpHitDamage=30\n     mpBaseAccuracy=0.200000\n     mpAccurateRange=1200\n     mpMaxRange=8200\n     bCanHaveModBaseAccuracy=True\n     bCanHaveModReloadCount=True\n     bCanHaveModAccurateRange=True\n     bCanHaveModReloadTime=True\n     FireOffset=(X=-24.000000,Y=10.000000,Z=14.000000)\n     ProjectileClass=Class'PartyStuff.Boner'\n     shakemag=50.000000\n     FireSound=Sound'DeusExSounds.Weapons.MiniCrossbowFire'\n     AltFireSound=Sound'DeusExSounds.Weapons.StealthPistolReloadEnd'\n     CockingSound=Sound'DeusExSounds.Weapons.StealthPistolReload'\n     SelectSound=Sound'DeusExSounds.Weapons.StealthPistolSelect'\n     InventoryGroup=190\n     ItemName=\"Boner\"\n     PlayerViewOffset=(X=22.000000,Y=-10.000000,Z=-14.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.Glock'\n     PickupViewMesh=LodMesh'DeusExItems.GlockPickup'\n     ThirdPersonMesh=LodMesh'DeusExItems.Glock3rd'\n     LandSound=Sound'DeusExSounds.Generic.DropLargeWeapon'\n     Icon=Texture'DeusExUI.Icons.BeltIconPistol'\n     largeIconWidth=47\n     largeIconHeight=37\n     Description=\"Hot boner\"\n     beltDescription=\"Boner\"\n     Skin=Texture'PGAssets.boner3rdTex1'\n     Mesh=LodMesh'DeusExItems.Glock'\n     CollisionRadius=7.000000\n     CollisionHeight=1.000000\n     Mass=3.000000\n}\n",
            "name": "WeaponBoner.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "GoverningSkill=Class'DeusEx.SkillWeaponPistol'",
                    "NoiseLevel=0.010000",
                    "ShotTime=0.150000",
                    "reloadTime=0.000000",
                    "HitDamage=8",
                    "maxRange=4800",
                    "AccurateRange=2400",
                    "BaseAccuracy=0.800000",
                    "bCanHaveScope=True",
                    "bHasScope=True",
                    "ScopeFOV=25",
                    "bCanHaveLaser=True",
                    "bHasLaser=True",
                    "recoilStrength=0.100000",
                    "mpReloadTime=1.500000",
                    "mpHitDamage=30",
                    "mpBaseAccuracy=0.200000",
                    "mpAccurateRange=1200",
                    "mpMaxRange=8200",
                    "bCanHaveModBaseAccuracy=True",
                    "bCanHaveModReloadCount=True",
                    "bCanHaveModAccurateRange=True",
                    "bCanHaveModReloadTime=True",
                    "FireOffset=(X=-24.000000,Y=10.000000,Z=14.000000)",
                    "ProjectileClass=Class'PartyStuff.Boner'",
                    "shakemag=50.000000",
                    "FireSound=Sound'DeusExSounds.Weapons.MiniCrossbowFire'",
                    "AltFireSound=Sound'DeusExSounds.Weapons.StealthPistolReloadEnd'",
                    "CockingSound=Sound'DeusExSounds.Weapons.StealthPistolReload'",
                    "SelectSound=Sound'DeusExSounds.Weapons.StealthPistolSelect'",
                    "InventoryGroup=190",
                    "ItemName=\"Boner\"",
                    "PlayerViewOffset=(X=22.000000,Y=-10.000000,Z=-14.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.Glock'",
                    "PickupViewMesh=LodMesh'DeusExItems.GlockPickup'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.Glock3rd'",
                    "LandSound=Sound'DeusExSounds.Generic.DropLargeWeapon'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconPistol'",
                    "largeIconWidth=47",
                    "largeIconHeight=37",
                    "Description=\"Hot boner\"",
                    "beltDescription=\"Boner\"",
                    "Skin=Texture'PGAssets.boner3rdTex1'",
                    "Mesh=LodMesh'DeusExItems.Glock'",
                    "CollisionRadius=7.000000",
                    "CollisionHeight=1.000000",
                    "Mass=3.000000"
                ],
                "exec": [],
                "extends": "DeusExWeapon",
                "functions": {
                    "LaserToggle": {
                        "body": "{\n\tbStickyPayload = !bStickyPayload;\n\t\tif(bStickyPayload)\n\t\t{\n\t\t\tDeusExPlayer(Owner).ClientMessage(\"Sticky Payload is armed!\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tDeusExPlayer(Owner).ClientMessage(\"Sticky Payload is disarmed!\");\n\t\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "LaserToggle",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t\tReloadCount = mpReloadCount;\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "RenderOverlays": {
                        "body": "{\n\t// set first person skin settings\n\t\tMultiSkins[3]=Texture'BonerTex1';\n\n\tSuper.RenderOverlays( Canvas );\n\n\t// reset third person skin settings\n\t\tMultiSkins[0]=Texture'boner3rdTex1';\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "RenderOverlays",
                        "native": false,
                        "param": [
                            [
                                "canvas",
                                "Canvas"
                            ]
                        ],
                        "return": ""
                    },
                    "ScopeToggle": {
                        "body": "{\n\t\t\tDeusExPlayer(Owner).ClientMessage(\"Blown the load!!!!!!\");\n\tforeach AllActors(class'BonerPayload', BP)\n\t{\n\t\tif(BP.Payloader == DeusExPlayer(Owner))\n\t\t{\n\t\t\tBP.BlowLoad();\n\t\t}\n\t}\n}",
                        "locals": [
                            "local BonerPayload BP;"
                        ],
                        "modifiers": [],
                        "name": "ScopeToggle",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 163,
                "replication": "",
                "states": [],
                "variables": [
                    "var bool bStickyPayload;"
                ]
            }
        },
        "WeaponBoxGun.uc": {
            "body": "//=============================================================================\n// WeaponBoxGun.\n//=============================================================================\nclass WeaponBoxGun expands WeaponLAW;\n\nvar int currentMode;\nvar Box currentBox;\nvar string cycleMessages[5];\nvar float createSize;\nvar travel Texture CurSkin;\nvar travel byte SkinMode;\n\n#exec obj load file=..\\Textures\\Extras.utx package=Extras\n#exec obj load file=..\\Textures\\Effects.utx package=Effects\n\nreplication\n{\n     reliable if (Role == ROLE_Authority)\n        createSizeWindow, currentMode;\n\n     reliable if (Role < ROLE_Authority)\n        setSize, createBox;\n}\n\nfunction GiveTo( pawn Other )\n{\n    super.Giveto(Other);\n        CurSkin = Texture'CoreTexDetail.Detail.DStone_A';\n\tOther.ClientMessage(\"SCOPE to change skin. AMMO CHANGE to change mode.\");\n}\n\nFunction ScopeToggle()\n{\n    local DeusExplayer P;\n    P=DeusExPlayer(Owner);\n        \n    if (SkinMode == 0)\n    {\n        SkinMode = 1;\n        CurSkin = Texture'DeusExDeco.Skins.AlarmLightTex3';\n\tDeusExPlayer(Owner).Clientmessage(\"|P3Red Box\");\n        return;\n    }\n    if (SkinMode == 1)\n    {\n        SkinMode = 2;\n        CurSkin = Texture'DeusExDeco.Skins.AlarmLightTex5';\n\tDeusExPlayer(Owner).Clientmessage(\"|P3Green Box\");\n        return;\n    }\n    if (SkinMode == 2)\n    {\n        SkinMode = 3;\n        CurSkin = Texture'DeusExDeco.Skins.AlarmLightTex7';\n\tDeusExPlayer(Owner).Clientmessage(\"|P3Blue Box\");\n        return;\n    }\n    if (SkinMode == 3)\n    {\n        SkinMode = 4;\n        CurSkin = Texture'DeusExDeco.Skins.AlarmLightTex9';\n\tDeusExPlayer(Owner).Clientmessage(\"|P3Gold Box\");\n        return;\n    }\n    if (SkinMode == 4)\n    {\n        SkinMode = 5;\n        CurSkin = Texture'Extras.Eggs.Matrix_A00';\n\tDeusExPlayer(Owner).Clientmessage(\"|P3Matrix Box\");\n        return;\n    }\n    if (SkinMode == 5)\n    {\n        SkinMode = 6;\n        CurSkin = Texture'Effects.water.bluewater_a';\n\tDeusExPlayer(Owner).Clientmessage(\"|P3Water Box\");\n        return;\n    }\n    if (SkinMode == 6)\n    {\n        SkinMode = 0;\n        CurSkin = Texture'CoreTexDetail.Detail.DStone_A';\n\tDeusExPlayer(Owner).Clientmessage(\"|P3Default Box\");\n        return;\n    }\n}\n\nfunction setSize(float newSize, int sizeType)\n{\n\tif(newSize > 5)\n\t\tnewSize = 5.00000;\n\n\tif(sizeType == 1 && currentBox != None)\n\t{\n\t\tcurrentBox.DrawScale = currentBox.Default.DrawScale*newSize;\n\t\tcurrentBox.SetCollisionSize(currentBox.Default.CollisionRadius*newSize,currentBox.Default.CollisionHeight*newSize);\n\t}\n\telse if(sizeType == 2)\n\t{\n\t\tcreateSize = newSize;\n\t}\n}\n\nsimulated function createSizeWindow()\n{\n\tlocal DeusExPlayer _Player;\n\tlocal DeusExRootWindow _root;\n\tlocal BoxSizeWindow _boxWindow;\n\t_Player = DeusExPlayer(Owner);\n\tif(_Player != None)\n\t{\n\t\t_Player.InitRootWindow();\n\t\t_root = DeusExRootWindow(_Player.rootWindow);\n\t\tif(_root != None)\n\t\t{\n\t\t\t_boxWindow = BoxSizeWindow(_root.InvokeUIScreen(Class'BoxSizeWindow', True));\n\t\t\tif(_boxWindow != None)\n\t\t\t{\n\t\t\t\t_boxWindow._windowOwner = self;\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction createBox(vector spawnLocation)\n{\n\tlocal Box _newBox;\n\t_newBox = Spawn (class'Box',,, spawnLocation);\n\tif(_newBox != None)\n\t{\n\t\t_newBox.SetRotation(_newBox.Default.Rotation);\n\t\t_newBox.DrawScale = _newBox.Default.DrawScale*createSize;\n\t\t_newBox.Skin = CurSkin;\n\t\t_newBox.Texture = CurSkin;\n\t\t_newBox.Multiskins[0] = CurSkin;\n\t\t _newBox.CreatedBy = DeusExPlayer(Owner).PlayerReplicationInfo.PlayerName;\n\t\t_newBox.SetCollisionSize(_newBox.Default.CollisionRadius*createSize,_newBox.Default.CollisionHeight*createSize);\n\t}\n}\n\nsimulated function cycleammo()\n{\n\n\tif(currentMode == 3 && currentBox != None)\n\t{\n\t\tcurrentBox = None;\n\t}\n\n\tcurrentMode++;\n\tif(currentMode > 4)\n\t{\n\t\tcurrentMode = 0;\n\t}\n\tDeusExPlayer(Owner).ClientMessage(cycleMessages[currentMode]);\n\n}\n\nfunction ProcessTraceHit(Actor Other, Vector HitLocation, Vector HitNormal, Vector X, Vector Y, Vector Z)\n{\n\tlocal vector spawnLocation;\n\n\tif(currentMode == 0)\n\t{\n\t\tspawnLocation = HitLocation;\n\n\t\tif(Box(Other) != None)\n\t\t\tspawnLocation.Z += (Class'Box'.Default.CollisionHeight*createSize) / 2;\n\n\t\tcreateBox(spawnLocation);\n\t}\n\telse if(currentMode == 1)\n\t{\n\t\tif(currentBox != None)\n\t\t{\n\t\t\tcurrentBox.bHidden = False;\n\t\t\tcurrentBox.SetCollision(True, True, True);\n\t\t\tcurrentBox.SetLocation(HitLocation);\n\t\t\t\t\t\tcurrentBox.bMovable=False;\n\t\t\tcurrentBox = None;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(Box(Other) != None)\n\t\t\t{\n\t\t\t\tif(Box(Other).CreatedBy == DeusExPlayer(Owner).PlayerReplicationInfo.PlayerName || DeusExPlayer(Owner).bAdmin)\n\t\t\t\t{\n\t\t\t\t\tcurrentBox.bMovable=True;\n\t\t\t\t\tcurrentBox = Box(Other);\n\t\t\t\t\tcurrentBox.SetCollision(False, False, False);\n\t\t\t\t\tcurrentBox.bHidden = True;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse if(currentMode == 2)\n\t{\n\t\tif(Box(Other) != None)\n\t\t{\n\t\t\tif(Box(Other).CreatedBy == DeusExPlayer(Owner).PlayerReplicationInfo.PlayerName || DeusExPlayer(Owner).bAdmin)\n\t\t\t{\n\t\t\tBox(Other).Destroy();\n\t\t\t}\n\t\t}\n\t}\n\telse if(currentMode == 3)\n\t{\n\t\tif(Box(Other) != None)\n\t\t{\n\t\t\tif(Box(Other).CreatedBy == DeusExPlayer(Owner).PlayerReplicationInfo.PlayerName || DeusExPlayer(Owner).bAdmin)\n\t\t\t{\n\t\t\t\tif(currentBox != None)\n\t\t\t\t{\n\t\t\t\t\tcurrentBox.bHidden = False;\n\t\t\t\t\tcurrentBox.SetCollision(True, True, True);\n\t\t\t\t}\n\t\t\t\tcurrentBox = Box(Other);\n\t\t\t\tcreateSizeWindow();\n\t\t\t}\n\t\t}\n\t}\n\telse if(currentMode == 4)\n\t{\n\t\tif(Box(Other) != None)\n\t\t{\n\t\t\tif(Box(Other).CreatedBy == DeusExPlayer(Owner).PlayerReplicationInfo.PlayerName || DeusExPlayer(Owner).bAdmin)\n\t\t\t{\n\t\t\tBox(Other).Multiskins[0] = CurSkin;\n\t\t\t}\n\t\t}\n\t}\n}\n\nstate NormalFire\n{\nBegin:\n\tif ((ClipCount >= ReloadCount) && (ReloadCount != 0))\n\t{\n\t\tif (!bAutomatic)\n\t\t{\n\t\t\tbFiring = False;\n\t\t\tFinishAnim();\n\t\t}\n\n\t\tif (Owner != None)\n\t\t{\n\t\t\tif (Owner.IsA('DeusExPlayer'))\n\t\t\t{\n\t\t\t\tbFiring = False;\n\n\n\t\t\t\t// should we autoreload?\n\t\t\t\tif (DeusExPlayer(Owner).bAutoReload)\n\t\t\t\t{\n\t\t\t\t\t// auto switch ammo if we're out of ammo and\n\t\t\t\t\t// we're not using the primary ammo\n\t\t\t\t\tif ((AmmoType.AmmoAmount == 0) && (AmmoName != AmmoNames[0]))\n\t\t\t\t\t\tCycleAmmo();\n\t\t\t\t\tReloadAmmo();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (bHasMuzzleFlash)\n\t\t\t\t\t\tEraseMuzzleFlashTexture();\n\t\t\t\t\tGotoState('Idle');\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (Owner.IsA('ScriptedPawn'))\n\t\t\t{\n\t\t\t\tbFiring = False;\n\t\t\t\tReloadAmmo();\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (bHasMuzzleFlash)\n\t\t\t\tEraseMuzzleFlashTexture();\n\t\t\tGotoState('Idle');\n\t\t}\n\t}\n\tif ( bAutomatic && (( Level.NetMode == NM_DedicatedServer ) || ((Level.NetMode == NM_ListenServer) && Owner.IsA('DeusExPlayer') && !DeusExPlayer(Owner).PlayerIsListenClient())))\n\t\tGotoState('Idle');\n\n\tSleep(GetShotTime());\n\tif (bAutomatic)\n\t{\n\t\tGenerateBullet();\t// In multiplayer bullets are generated by the client which will let the server know when\n\t\tGoto('Begin');\n\t}\n\tbFiring = False;\n\tFinishAnim();\n\n\tReadyToFire();\nDone:\n\tbFiring = False;\n\tFinish();\n}\n\nfunction PostBeginPlay()\n{\nSuper.PostBeginPlay();\n   if (Level.NetMode != NM_Standalone)\n   {\n      bWeaponStay = True;\n      if (bNeedToSetMPPickupAmmo)\n      {\n         PickupAmmoCount = PickupAmmoCount * 3;\n         bNeedToSetMPPickupAmmo = False;\n      }\n   }\n}\n\ndefaultproperties\n{\n     cycleMessages(0)=\"Box Spawn Mode Activated\"\n     cycleMessages(1)=\"Box Move Mode Activated\"\n     cycleMessages(2)=\"Box Delete Mode Activated\"\n     cycleMessages(3)=\"Box Size Mode Activated\"\n     cycleMessages(4)=\"Box Skin Mode Activated\"\n     createSize=1.000000\n     reloadTime=0.500000\n     PickupAmmoCount=10\n     bInstantHit=True\n     bWeaponStay=True\n     shakemag=0.000000\n     InventoryGroup=56\n     ItemName=\"Box Gun\"\n     beltDescription=\"BOX\"\n}\n",
            "name": "WeaponBoxGun.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "cycleMessages(0)=\"Box Spawn Mode Activated\"",
                    "cycleMessages(1)=\"Box Move Mode Activated\"",
                    "cycleMessages(2)=\"Box Delete Mode Activated\"",
                    "cycleMessages(3)=\"Box Size Mode Activated\"",
                    "cycleMessages(4)=\"Box Skin Mode Activated\"",
                    "createSize=1.000000",
                    "reloadTime=0.500000",
                    "PickupAmmoCount=10",
                    "bInstantHit=True",
                    "bWeaponStay=True",
                    "shakemag=0.000000",
                    "InventoryGroup=56",
                    "ItemName=\"Box Gun\"",
                    "beltDescription=\"BOX\""
                ],
                "exec": [
                    "#exec obj load file=..\\Textures\\Extras.utx package=Extras",
                    "#exec obj load file=..\\Textures\\Effects.utx package=Effects"
                ],
                "extends": "WeaponLAW",
                "functions": {
                    "GiveTo": {
                        "body": "{\n    super.Giveto(Other);\n        CurSkin = Texture'CoreTexDetail.Detail.DStone_A';\n\tOther.ClientMessage(\"SCOPE to change skin. AMMO CHANGE to change mode.\");\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "GiveTo",
                        "native": false,
                        "param": [
                            [
                                "pawn",
                                "Other"
                            ]
                        ],
                        "return": ""
                    },
                    "PostBeginPlay": {
                        "body": "{\nSuper.PostBeginPlay();\n   if (Level.NetMode != NM_Standalone)\n   {\n      bWeaponStay = True;\n      if (bNeedToSetMPPickupAmmo)\n      {\n         PickupAmmoCount = PickupAmmoCount * 3;\n         bNeedToSetMPPickupAmmo = False;\n      }\n   }\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ProcessTraceHit": {
                        "body": "{\n\n\tif(currentMode == 0)\n\t{\n\t\tspawnLocation = HitLocation;\n\n\t\tif(Box(Other) != None)\n\t\t\tspawnLocation.Z += (Class'Box'.Default.CollisionHeight*createSize) / 2;\n\n\t\tcreateBox(spawnLocation);\n\t}\n\telse if(currentMode == 1)\n\t{\n\t\tif(currentBox != None)\n\t\t{\n\t\t\tcurrentBox.bHidden = False;\n\t\t\tcurrentBox.SetCollision(True, True, True);\n\t\t\tcurrentBox.SetLocation(HitLocation);\n\t\t\t\t\t\tcurrentBox.bMovable=False;\n\t\t\tcurrentBox = None;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(Box(Other) != None)\n\t\t\t{\n\t\t\t\tif(Box(Other).CreatedBy == DeusExPlayer(Owner).PlayerReplicationInfo.PlayerName || DeusExPlayer(Owner).bAdmin)\n\t\t\t\t{\n\t\t\t\t\tcurrentBox.bMovable=True;\n\t\t\t\t\tcurrentBox = Box(Other);\n\t\t\t\t\tcurrentBox.SetCollision(False, False, False);\n\t\t\t\t\tcurrentBox.bHidden = True;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse if(currentMode == 2)\n\t{\n\t\tif(Box(Other) != None)\n\t\t{\n\t\t\tif(Box(Other).CreatedBy == DeusExPlayer(Owner).PlayerReplicationInfo.PlayerName || DeusExPlayer(Owner).bAdmin)\n\t\t\t{\n\t\t\tBox(Other).Destroy();\n\t\t\t}\n\t\t}\n\t}\n\telse if(currentMode == 3)\n\t{\n\t\tif(Box(Other) != None)\n\t\t{\n\t\t\tif(Box(Other).CreatedBy == DeusExPlayer(Owner).PlayerReplicationInfo.PlayerName || DeusExPlayer(Owner).bAdmin)\n\t\t\t{\n\t\t\t\tif(currentBox != None)\n\t\t\t\t{\n\t\t\t\t\tcurrentBox.bHidden = False;\n\t\t\t\t\tcurrentBox.SetCollision(True, True, True);\n\t\t\t\t}\n\t\t\t\tcurrentBox = Box(Other);\n\t\t\t\tcreateSizeWindow();\n\t\t\t}\n\t\t}\n\t}\n\telse if(currentMode == 4)\n\t{\n\t\tif(Box(Other) != None)\n\t\t{\n\t\t\tif(Box(Other).CreatedBy == DeusExPlayer(Owner).PlayerReplicationInfo.PlayerName || DeusExPlayer(Owner).bAdmin)\n\t\t\t{\n\t\t\tBox(Other).Multiskins[0] = CurSkin;\n\t\t\t}\n\t\t}\n\t}\n}",
                        "locals": [
                            "local vector spawnLocation;"
                        ],
                        "modifiers": [],
                        "name": "ProcessTraceHit",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Other"
                            ],
                            [
                                "Vector",
                                "HitLocation"
                            ],
                            [
                                "Vector",
                                "HitNormal"
                            ],
                            [
                                "Vector",
                                "X"
                            ],
                            [
                                "Vector",
                                "Y"
                            ],
                            [
                                "Vector",
                                "Z"
                            ]
                        ],
                        "return": ""
                    },
                    "ScopeToggle": {
                        "body": "{\n    P=DeusExPlayer(Owner);\n        \n    if (SkinMode == 0)\n    {\n        SkinMode = 1;\n        CurSkin = Texture'DeusExDeco.Skins.AlarmLightTex3';\n\tDeusExPlayer(Owner).Clientmessage(\"|P3Red Box\");\n        return;\n    }\n    if (SkinMode == 1)\n    {\n        SkinMode = 2;\n        CurSkin = Texture'DeusExDeco.Skins.AlarmLightTex5';\n\tDeusExPlayer(Owner).Clientmessage(\"|P3Green Box\");\n        return;\n    }\n    if (SkinMode == 2)\n    {\n        SkinMode = 3;\n        CurSkin = Texture'DeusExDeco.Skins.AlarmLightTex7';\n\tDeusExPlayer(Owner).Clientmessage(\"|P3Blue Box\");\n        return;\n    }\n    if (SkinMode == 3)\n    {\n        SkinMode = 4;\n        CurSkin = Texture'DeusExDeco.Skins.AlarmLightTex9';\n\tDeusExPlayer(Owner).Clientmessage(\"|P3Gold Box\");\n        return;\n    }\n    if (SkinMode == 4)\n    {\n        SkinMode = 5;\n        CurSkin = Texture'Extras.Eggs.Matrix_A00';\n\tDeusExPlayer(Owner).Clientmessage(\"|P3Matrix Box\");\n        return;\n    }\n    if (SkinMode == 5)\n    {\n        SkinMode = 6;\n        CurSkin = Texture'Effects.water.bluewater_a';\n\tDeusExPlayer(Owner).Clientmessage(\"|P3Water Box\");\n        return;\n    }\n    if (SkinMode == 6)\n    {\n        SkinMode = 0;\n        CurSkin = Texture'CoreTexDetail.Detail.DStone_A';\n\tDeusExPlayer(Owner).Clientmessage(\"|P3Default Box\");\n        return;\n    }\n}",
                        "locals": [
                            "local DeusExplayer P;"
                        ],
                        "modifiers": [],
                        "name": "ScopeToggle",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "createBox": {
                        "body": "{\n\t_newBox = Spawn (class'Box',,, spawnLocation);\n\tif(_newBox != None)\n\t{\n\t\t_newBox.SetRotation(_newBox.Default.Rotation);\n\t\t_newBox.DrawScale = _newBox.Default.DrawScale*createSize;\n\t\t_newBox.Skin = CurSkin;\n\t\t_newBox.Texture = CurSkin;\n\t\t_newBox.Multiskins[0] = CurSkin;\n\t\t _newBox.CreatedBy = DeusExPlayer(Owner).PlayerReplicationInfo.PlayerName;\n\t\t_newBox.SetCollisionSize(_newBox.Default.CollisionRadius*createSize,_newBox.Default.CollisionHeight*createSize);\n\t}\n}",
                        "locals": [
                            "local Box _newBox;"
                        ],
                        "modifiers": [],
                        "name": "createBox",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "spawnLocation"
                            ]
                        ],
                        "return": ""
                    },
                    "createSizeWindow": {
                        "body": "{\n\t_Player = DeusExPlayer(Owner);\n\tif(_Player != None)\n\t{\n\t\t_Player.InitRootWindow();\n\t\t_root = DeusExRootWindow(_Player.rootWindow);\n\t\tif(_root != None)\n\t\t{\n\t\t\t_boxWindow = BoxSizeWindow(_root.InvokeUIScreen(Class'BoxSizeWindow', True));\n\t\t\tif(_boxWindow != None)\n\t\t\t{\n\t\t\t\t_boxWindow._windowOwner = self;\n\t\t\t}\n\t\t}\n\t}\n}",
                        "locals": [
                            "local DeusExPlayer _Player;",
                            "local DeusExRootWindow _root;",
                            "local BoxSizeWindow _boxWindow;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "createSizeWindow",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "cycleammo": {
                        "body": "{\n\n\tif(currentMode == 3 && currentBox != None)\n\t{\n\t\tcurrentBox = None;\n\t}\n\n\tcurrentMode++;\n\tif(currentMode > 4)\n\t{\n\t\tcurrentMode = 0;\n\t}\n\tDeusExPlayer(Owner).ClientMessage(cycleMessages[currentMode]);\n\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "cycleammo",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "setSize": {
                        "body": "{\n\tif(newSize > 5)\n\t\tnewSize = 5.00000;\n\n\tif(sizeType == 1 && currentBox != None)\n\t{\n\t\tcurrentBox.DrawScale = currentBox.Default.DrawScale*newSize;\n\t\tcurrentBox.SetCollisionSize(currentBox.Default.CollisionRadius*newSize,currentBox.Default.CollisionHeight*newSize);\n\t}\n\telse if(sizeType == 2)\n\t{\n\t\tcreateSize = newSize;\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "setSize",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "newSize"
                            ],
                            [
                                "int",
                                "sizeType"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 329,
                "replication": "",
                "states": [],
                "variables": [
                    "var int currentMode;",
                    "var Box currentBox;",
                    "var string cycleMessages[5];",
                    "var float createSize;",
                    "var travel Texture CurSkin;",
                    "var travel byte SkinMode;"
                ]
            }
        },
        "WeaponBurnRifle.uc": {
            "body": "//=============================================================================\n// WeaponRifle.\n//=============================================================================\nclass WeaponBurnRifle extends DeusExWeapon;\n\nvar float\tmpNoScopeMult;\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t\tReloadCount = mpReloadCount;\n      bHasMuzzleFlash = True;\n      ReloadCount = 1;\n      ReloadTime = ShotTime;\n\t}\n}\n\ndefaultproperties\n{\n     mpNoScopeMult=0.350000\n     LowAmmoWaterMark=6\n     GoverningSkill=Class'DeusEx.SkillWeaponRifle'\n     NoiseLevel=2.000000\n     ShotTime=1.500000\n     reloadTime=2.000000\n     HitDamage=25\n     maxRange=48000\n     AccurateRange=28800\n     bCanHaveScope=True\n     bHasScope=True\n     bCanHaveLaser=True\n     bCanHaveSilencer=True\n     bHasMuzzleFlash=False\n     recoilStrength=0.400000\n     bUseWhileCrouched=False\n     mpReloadTime=2.000000\n     mpHitDamage=25\n     mpAccurateRange=28800\n     mpMaxRange=28800\n     mpReloadCount=6\n     bCanHaveModBaseAccuracy=True\n     bCanHaveModReloadCount=True\n     bCanHaveModAccurateRange=True\n     bCanHaveModReloadTime=True\n     bCanHaveModRecoilStrength=True\n     AmmoName=Class'DeusEx.Ammo3006'\n     ReloadCount=6\n     PickupAmmoCount=6\n     FireOffset=(X=-20.000000,Y=2.000000,Z=30.000000)\n     ProjectileClass=Class'PartyStuff.FireBolt'\n     shakemag=50.000000\n     FireSound=Sound'DeusExSounds.Weapons.RifleFire'\n     AltFireSound=Sound'DeusExSounds.Weapons.RifleReloadEnd'\n     CockingSound=Sound'DeusExSounds.Weapons.RifleReload'\n     SelectSound=Sound'DeusExSounds.Weapons.RifleSelect'\n     InventoryGroup=5\n     ItemName=\"Burn Rifle\"\n     PlayerViewOffset=(X=20.000000,Y=-2.000000,Z=-30.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.SniperRifle'\n     PickupViewMesh=LodMesh'DeusExItems.SniperRiflePickup'\n     ThirdPersonMesh=LodMesh'DeusExItems.SniperRifle3rd'\n     LandSound=Sound'DeusExSounds.Generic.DropMediumWeapon'\n     Icon=Texture'DeusExUI.Icons.BeltIconRifle'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconRifle'\n     largeIconWidth=159\n     largeIconHeight=47\n     invSlotsX=4\n     Description=\"The military sniper rifle is the superior tool for the interdiction of long-range targets. When coupled with the proven 30.06 round, a marksman can achieve tight groupings at better than 1 MOA (minute of angle) depending on environmental conditions.\"\n     beltDescription=\"SNIPER\"\n     Mesh=LodMesh'DeusExItems.SniperRiflePickup'\n     CollisionRadius=26.000000\n     CollisionHeight=2.000000\n     Mass=30.000000\n}\n",
            "name": "WeaponBurnRifle.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "mpNoScopeMult=0.350000",
                    "LowAmmoWaterMark=6",
                    "GoverningSkill=Class'DeusEx.SkillWeaponRifle'",
                    "NoiseLevel=2.000000",
                    "ShotTime=1.500000",
                    "reloadTime=2.000000",
                    "HitDamage=25",
                    "maxRange=48000",
                    "AccurateRange=28800",
                    "bCanHaveScope=True",
                    "bHasScope=True",
                    "bCanHaveLaser=True",
                    "bCanHaveSilencer=True",
                    "bHasMuzzleFlash=False",
                    "recoilStrength=0.400000",
                    "bUseWhileCrouched=False",
                    "mpReloadTime=2.000000",
                    "mpHitDamage=25",
                    "mpAccurateRange=28800",
                    "mpMaxRange=28800",
                    "mpReloadCount=6",
                    "bCanHaveModBaseAccuracy=True",
                    "bCanHaveModReloadCount=True",
                    "bCanHaveModAccurateRange=True",
                    "bCanHaveModReloadTime=True",
                    "bCanHaveModRecoilStrength=True",
                    "AmmoName=Class'DeusEx.Ammo3006'",
                    "ReloadCount=6",
                    "PickupAmmoCount=6",
                    "FireOffset=(X=-20.000000,Y=2.000000,Z=30.000000)",
                    "ProjectileClass=Class'PartyStuff.FireBolt'",
                    "shakemag=50.000000",
                    "FireSound=Sound'DeusExSounds.Weapons.RifleFire'",
                    "AltFireSound=Sound'DeusExSounds.Weapons.RifleReloadEnd'",
                    "CockingSound=Sound'DeusExSounds.Weapons.RifleReload'",
                    "SelectSound=Sound'DeusExSounds.Weapons.RifleSelect'",
                    "InventoryGroup=5",
                    "ItemName=\"Burn Rifle\"",
                    "PlayerViewOffset=(X=20.000000,Y=-2.000000,Z=-30.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.SniperRifle'",
                    "PickupViewMesh=LodMesh'DeusExItems.SniperRiflePickup'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.SniperRifle3rd'",
                    "LandSound=Sound'DeusExSounds.Generic.DropMediumWeapon'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconRifle'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconRifle'",
                    "largeIconWidth=159",
                    "largeIconHeight=47",
                    "invSlotsX=4",
                    "Description=\"The military sniper rifle is the superior tool for the interdiction of long-range targets. When coupled with the proven 30.06 round, a marksman can achieve tight groupings at better than 1 MOA (minute of angle) depending on environmental conditions.\"",
                    "beltDescription=\"SNIPER\"",
                    "Mesh=LodMesh'DeusExItems.SniperRiflePickup'",
                    "CollisionRadius=26.000000",
                    "CollisionHeight=2.000000",
                    "Mass=30.000000"
                ],
                "exec": [],
                "extends": "DeusExWeapon",
                "functions": {
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t\tReloadCount = mpReloadCount;\n      bHasMuzzleFlash = True;\n      ReloadCount = 1;\n      ReloadTime = ShotTime;\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 84,
                "replication": "",
                "states": [],
                "variables": [
                    "var float\tmpNoScopeMult;"
                ]
            }
        },
        "WeaponClaymore.uc": {
            "body": "//=============================================================================\n// WeaponTripBomb.\n//=============================================================================\nclass WeaponClaymore extends DeusExWeapon;\n\nvar localized String shortName;\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t}\n}\n\nfunction Fire(float Value)\n{\n\t// if facing a wall, affix the LAM to the wall\n\tif (Pawn(Owner) != None)\n\t{\n\t\tif (!NearWallCheck())\n\t\t{\n\t\t\tDeusExPlayer(Owner).bJustFired = False;\n\t\t\tbReadyToFire = True;\n\t\t\tbPointing = False;\n\t\t\tbFiring = False;\n\t\t\tGotoState('Idle');\n\t\t\tDeusExPlayer(Owner).ConsoleCommand(\"ThrowWeapon\");\n\t\t\treturn;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbReadyToFire = False;\n\t\t\tGotoState('NormalFire');\n\t\t\tbPointing = True;\n\t\t\tPlayAnim('Place',, 0.0);\n\t\t\treturn;\n\t\t}\n\t}\n}\nfunction PostBeginPlay()\n{\n   Super.PostBeginPlay();\n   bWeaponStay=False;\n}\n// Become a pickup\n// Weapons that carry their ammo with them don't vanish when dropped\nfunction BecomePickup()\n{\n\tSuper.BecomePickup();\n   if (Level.NetMode != NM_Standalone)\n      if (bTossedOut)\n         Lifespan = 0.0;\n}\n\n// ----------------------------------------------------------------------\n// TestMPBeltSpot()\n// Returns true if the suggested belt location is ok for the object in mp.\n// ----------------------------------------------------------------------\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\ndefaultproperties\n{\n     ShortName=\"Laser\"\n     LowAmmoWaterMark=2\n     GoverningSkill=Class'DeusEx.SkillDemolition'\n     Concealability=CONC_All\n     ShotTime=0.300000\n     reloadTime=0.100000\n     HitDamage=50\n     maxRange=4800\n     AccurateRange=2400\n     BaseAccuracy=1.000000\n     bHasMuzzleFlash=False\n     bHandToHand=True\n     bUseAsDrawnWeapon=False\n     bNeedToSetMPPickupAmmo=False\n     mpReloadTime=0.100000\n     mpHitDamage=50\n     mpBaseAccuracy=1.000000\n     mpAccurateRange=2400\n     mpMaxRange=2400\n     mpPickupAmmoCount=6\n     AmmoName=Class'PartyStuff.AmmoClaymore'\n     ReloadCount=1\n     PickupAmmoCount=6\n     FireOffset=(Y=10.000000,Z=20.000000)\n     ProjectileClass=Class'PartyStuff.ClaymoreProj'\n     shakemag=50.000000\n     SelectSound=Sound'DeusExSounds.Weapons.LAMSelect'\n     InventoryGroup=77\n     ItemName=\"Claymore Laser Mine\"\n     PlayerViewOffset=(X=24.000000,Y=-15.000000,Z=-17.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.LAM'\n     PickupViewMesh=LodMesh'DeusExItems.LAMPickup'\n     ThirdPersonMesh=LodMesh'DeusExItems.LAM3rd'\n     Icon=Texture'DeusExUI.Icons.BeltIconLAM'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconLAM'\n     largeIconWidth=35\n     largeIconHeight=45\n     Description=\"Places a deadly laser wire that will instantly kill anything that touches it\"\n     beltDescription=\"CLAY\"\n     Mesh=LodMesh'DeusExItems.LAMPickup'\n     CollisionRadius=3.800000\n     CollisionHeight=3.500000\n     Mass=5.000000\n     Buoyancy=2.000000\n}\n",
            "name": "WeaponClaymore.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "ShortName=\"Laser\"",
                    "LowAmmoWaterMark=2",
                    "GoverningSkill=Class'DeusEx.SkillDemolition'",
                    "Concealability=CONC_All",
                    "ShotTime=0.300000",
                    "reloadTime=0.100000",
                    "HitDamage=50",
                    "maxRange=4800",
                    "AccurateRange=2400",
                    "BaseAccuracy=1.000000",
                    "bHasMuzzleFlash=False",
                    "bHandToHand=True",
                    "bUseAsDrawnWeapon=False",
                    "bNeedToSetMPPickupAmmo=False",
                    "mpReloadTime=0.100000",
                    "mpHitDamage=50",
                    "mpBaseAccuracy=1.000000",
                    "mpAccurateRange=2400",
                    "mpMaxRange=2400",
                    "mpPickupAmmoCount=6",
                    "AmmoName=Class'PartyStuff.AmmoClaymore'",
                    "ReloadCount=1",
                    "PickupAmmoCount=6",
                    "FireOffset=(Y=10.000000,Z=20.000000)",
                    "ProjectileClass=Class'PartyStuff.ClaymoreProj'",
                    "shakemag=50.000000",
                    "SelectSound=Sound'DeusExSounds.Weapons.LAMSelect'",
                    "InventoryGroup=77",
                    "ItemName=\"Claymore Laser Mine\"",
                    "PlayerViewOffset=(X=24.000000,Y=-15.000000,Z=-17.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.LAM'",
                    "PickupViewMesh=LodMesh'DeusExItems.LAMPickup'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.LAM3rd'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconLAM'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconLAM'",
                    "largeIconWidth=35",
                    "largeIconHeight=45",
                    "Description=\"Places a deadly laser wire that will instantly kill anything that touches it\"",
                    "beltDescription=\"CLAY\"",
                    "Mesh=LodMesh'DeusExItems.LAMPickup'",
                    "CollisionRadius=3.800000",
                    "CollisionHeight=3.500000",
                    "Mass=5.000000",
                    "Buoyancy=2.000000"
                ],
                "exec": [],
                "extends": "DeusExWeapon",
                "functions": {
                    "BecomePickup": {
                        "body": "{\n\tSuper.BecomePickup();\n   if (Level.NetMode != NM_Standalone)\n      if (bTossedOut)\n         Lifespan = 0.0;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "BecomePickup",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Fire": {
                        "body": "{\n\t// if facing a wall, affix the LAM to the wall\n\tif (Pawn(Owner) != None)\n\t{\n\t\tif (!NearWallCheck())\n\t\t{\n\t\t\tDeusExPlayer(Owner).bJustFired = False;\n\t\t\tbReadyToFire = True;\n\t\t\tbPointing = False;\n\t\t\tbFiring = False;\n\t\t\tGotoState('Idle');\n\t\t\tDeusExPlayer(Owner).ConsoleCommand(\"ThrowWeapon\");\n\t\t\treturn;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbReadyToFire = False;\n\t\t\tGotoState('NormalFire');\n\t\t\tbPointing = True;\n\t\t\tPlayAnim('Place',, 0.0);\n\t\t\treturn;\n\t\t}\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Fire",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "Value"
                            ]
                        ],
                        "return": ""
                    },
                    "PostBeginPlay": {
                        "body": "{\n   Super.PostBeginPlay();\n   bWeaponStay=False;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 120,
                "replication": "",
                "states": [],
                "variables": [
                    "var localized String shortName;"
                ]
            }
        },
        "WeaponCombatKnife2.uc": {
            "body": "//=============================================================================\n// WeaponCombatKnife.\n//=============================================================================\nclass WeaponCombatKnife2 extends DeusExWeapon;\n\nenum EModeNum\n{\n\tMode_Normal,\n\tMode_Throw,\n};\n\nVar EModeNum Mode;\nvar DeusExPlayer DXPl;\n\nreplication\n{\n\tReliable if(Role==ROLE_AUTHORITY)\n\t\tMode;\n}\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t}\n}\n\nFunction Fire(Float value)\n{\n\tlocal ThrownCombatKnife S;\n\tDXPL=DeusExPlayer(Owner);\n\tIf(Mode==Mode_Throw)\n\t{\n\t\tS=Spawn(class'ThrownCombatKnife',Pawn(Owner),,Location+vect(0,0,-2),DXPL.ViewRotation);\n\t\tif(S!=None)\n\t\t{\n\t\t\tS.SetOwner(DXPL);\n\t\t\tS.Lifespan=15;\n\t\t}\n\t\tDestroy();\n\t}\n\telse\n\t{\n\t\tSuper.Fire(Value);\n\t}\n}\n\nFunction cycleammo()\n{\n\tswitch Mode\n\t\t{\n\t\tcase MODE_Normal:\n\t\t\tMode = MODE_Throw;\n\t\t\tif (Role == ROLE_Authority)\n\t\t\tPawn(Owner).Clientmessage(\"Throwing mode\");\n\t\t\tbreak;\n\n\t\tcase MODE_Throw:\n\t\t\tMode = MODE_Normal;\n\t\t\tif (Role == ROLE_Authority)\n\t\t\tPawn(Owner).Clientmessage(\"Normal mode\");\n\t\t\tbreak;\n\t\t\t\n\t\t}\n}\n\ndefaultproperties\n{\n     LowAmmoWaterMark=0\n     GoverningSkill=Class'DeusEx.SkillWeaponLowTech'\n     NoiseLevel=0.050000\n     EnemyEffective=ENMEFF_Organic\n     Concealability=CONC_Visual\n     reloadTime=0.000000\n     HitDamage=5\n     maxRange=80\n     AccurateRange=80\n     BaseAccuracy=1.000000\n     bHasMuzzleFlash=False\n     bHandToHand=True\n     bFallbackWeapon=True\n     mpHitDamage=20\n     mpBaseAccuracy=1.000000\n     mpAccurateRange=96\n     mpMaxRange=96\n     AmmoName=Class'DeusEx.AmmoNone'\n     ReloadCount=0\n     bInstantHit=True\n     FireOffset=(X=-5.000000,Y=8.000000,Z=14.000000)\n     shakemag=20.000000\n     FireSound=Sound'DeusExSounds.Weapons.CombatKnifeFire'\n     SelectSound=Sound'DeusExSounds.Weapons.CombatKnifeSelect'\n     Misc1Sound=Sound'DeusExSounds.Weapons.CombatKnifeHitFlesh'\n     Misc2Sound=Sound'DeusExSounds.Weapons.CombatKnifeHitHard'\n     Misc3Sound=Sound'DeusExSounds.Weapons.CombatKnifeHitSoft'\n     InventoryGroup=11\n     ItemName=\"Combat Knife\"\n     PlayerViewOffset=(X=5.000000,Y=-8.000000,Z=-14.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.CombatKnife'\n     PickupViewMesh=LodMesh'DeusExItems.CombatKnifePickup'\n     ThirdPersonMesh=LodMesh'DeusExItems.CombatKnife3rd'\n     Icon=Texture'DeusExUI.Icons.BeltIconCombatKnife'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconCombatKnife'\n     largeIconWidth=49\n     largeIconHeight=45\n     Description=\"An ultra-high carbon stainless steel knife.\"\n     beltDescription=\"KNIFE\"\n     Mesh=LodMesh'DeusExItems.CombatKnifePickup'\n     CollisionRadius=12.650000\n     CollisionHeight=0.800000\n}\n",
            "name": "WeaponCombatKnife2.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "LowAmmoWaterMark=0",
                    "GoverningSkill=Class'DeusEx.SkillWeaponLowTech'",
                    "NoiseLevel=0.050000",
                    "EnemyEffective=ENMEFF_Organic",
                    "Concealability=CONC_Visual",
                    "reloadTime=0.000000",
                    "HitDamage=5",
                    "maxRange=80",
                    "AccurateRange=80",
                    "BaseAccuracy=1.000000",
                    "bHasMuzzleFlash=False",
                    "bHandToHand=True",
                    "bFallbackWeapon=True",
                    "mpHitDamage=20",
                    "mpBaseAccuracy=1.000000",
                    "mpAccurateRange=96",
                    "mpMaxRange=96",
                    "AmmoName=Class'DeusEx.AmmoNone'",
                    "ReloadCount=0",
                    "bInstantHit=True",
                    "FireOffset=(X=-5.000000,Y=8.000000,Z=14.000000)",
                    "shakemag=20.000000",
                    "FireSound=Sound'DeusExSounds.Weapons.CombatKnifeFire'",
                    "SelectSound=Sound'DeusExSounds.Weapons.CombatKnifeSelect'",
                    "Misc1Sound=Sound'DeusExSounds.Weapons.CombatKnifeHitFlesh'",
                    "Misc2Sound=Sound'DeusExSounds.Weapons.CombatKnifeHitHard'",
                    "Misc3Sound=Sound'DeusExSounds.Weapons.CombatKnifeHitSoft'",
                    "InventoryGroup=11",
                    "ItemName=\"Combat Knife\"",
                    "PlayerViewOffset=(X=5.000000,Y=-8.000000,Z=-14.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.CombatKnife'",
                    "PickupViewMesh=LodMesh'DeusExItems.CombatKnifePickup'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.CombatKnife3rd'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconCombatKnife'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconCombatKnife'",
                    "largeIconWidth=49",
                    "largeIconHeight=45",
                    "Description=\"An ultra-high carbon stainless steel knife.\"",
                    "beltDescription=\"KNIFE\"",
                    "Mesh=LodMesh'DeusExItems.CombatKnifePickup'",
                    "CollisionRadius=12.650000",
                    "CollisionHeight=0.800000"
                ],
                "exec": [],
                "extends": "DeusExWeapon",
                "functions": {
                    "Fire": {
                        "body": "{\n\tDXPL=DeusExPlayer(Owner);\n\tIf(Mode==Mode_Throw)\n\t{\n\t\tS=Spawn(class'ThrownCombatKnife',Pawn(Owner),,Location+vect(0,0,-2),DXPL.ViewRotation);\n\t\tif(S!=None)\n\t\t{\n\t\t\tS.SetOwner(DXPL);\n\t\t\tS.Lifespan=15;\n\t\t}\n\t\tDestroy();\n\t}\n\telse\n\t{\n\t\tSuper.Fire(Value);\n\t}\n}",
                        "locals": [
                            "local ThrownCombatKnife S;"
                        ],
                        "modifiers": [],
                        "name": "Fire",
                        "native": false,
                        "param": [
                            [
                                "Float",
                                "value"
                            ]
                        ],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "cycleammo": {
                        "body": "{\n\tswitch Mode\n\t\t{\n\t\tcase MODE_Normal:\n\t\t\tMode = MODE_Throw;\n\t\t\tif (Role == ROLE_Authority)\n\t\t\tPawn(Owner).Clientmessage(\"Throwing mode\");\n\t\t\tbreak;\n\n\t\tcase MODE_Throw:\n\t\t\tMode = MODE_Normal;\n\t\t\tif (Role == ROLE_Authority)\n\t\t\tPawn(Owner).Clientmessage(\"Normal mode\");\n\t\t\tbreak;\n\t\t\t\n\t\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "cycleammo",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 120,
                "replication": "",
                "states": [],
                "variables": [
                    "Var EModeNum Mode;",
                    "var DeusExPlayer DXPl;"
                ]
            }
        },
        "WeaponCoyote.uc": {
            "body": "//=============================================================================\n// WeaponSawedOffShotgun.\n//=============================================================================\nclass WeaponCoyote extends DeusExWeapon;\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t\tReloadCount = mpReloadCount;\n      PickupAmmoCount = 12; //to match assaultshotgun\n\t}\n}\n\ndefaultproperties\n{\n     LowAmmoWaterMark=4\n     GoverningSkill=Class'DeusEx.SkillWeaponRifle'\n     EnviroEffective=ENVEFF_Air\n     Concealability=CONC_Visual\n     ShotTime=0.300000\n     reloadTime=5.000000\n     HitDamage=30\n     maxRange=2400\n     AccurateRange=1200\n     BaseAccuracy=0.600000\n     AmmoNames(0)=Class'DeusEx.AmmoShell'\n     AmmoNames(1)=Class'DeusEx.AmmoSabot'\n     AreaOfEffect=AOE_Cone\n     recoilStrength=0.500000\n     mpReloadTime=0.500000\n     mpHitDamage=30\n     mpBaseAccuracy=0.200000\n     mpAccurateRange=1200\n     mpMaxRange=1200\n     mpReloadCount=3\n     mpPickupAmmoCount=12\n     bCanHaveModReloadCount=True\n     bCanHaveModReloadTime=True\n     bCanHaveModRecoilStrength=True\n     AmmoName=Class'DeusEx.AmmoShell'\n     ReloadCount=3\n     PickupAmmoCount=12\n     bInstantHit=True\n     FireOffset=(X=-11.000000,Y=4.000000,Z=13.000000)\n     shakemag=50.000000\n     FireSound=Sound'DeusExSounds.Weapons.SawedOffShotgunFire'\n     AltFireSound=Sound'DeusExSounds.Weapons.SawedOffShotgunReloadEnd'\n     CockingSound=Sound'DeusExSounds.Weapons.SawedOffShotgunReload'\n     SelectSound=Sound'DeusExSounds.Weapons.SawedOffShotgunSelect'\n     InventoryGroup=6\n     ItemName=\"Coyote M17F\"\n     ItemArticle=\"the\"\n     PlayerViewOffset=(X=11.000000,Y=-4.000000,Z=-13.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.Shotgun'\n     PickupViewMesh=LodMesh'DeusExItems.ShotgunPickup'\n     ThirdPersonMesh=LodMesh'DeusExItems.Shotgun3rd'\n     LandSound=Sound'DeusExSounds.Generic.DropMediumWeapon'\n     Icon=Texture'DeusExUI.Icons.BeltIconShotgun'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconShotgun'\n     largeIconWidth=131\n     largeIconHeight=45\n     invSlotsX=3\n     Description=\"The sawed-off, pump-action shotgun features a truncated barrel resulting in a wide spread at close range and will accept either buckshot or sabot shells.\"\n     beltDescription=\"COYOTE\"\n     Mesh=LodMesh'DeusExItems.ShotgunPickup'\n     CollisionRadius=12.000000\n     CollisionHeight=0.900000\n     Mass=15.000000\n}\n",
            "name": "WeaponCoyote.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "LowAmmoWaterMark=4",
                    "GoverningSkill=Class'DeusEx.SkillWeaponRifle'",
                    "EnviroEffective=ENVEFF_Air",
                    "Concealability=CONC_Visual",
                    "ShotTime=0.300000",
                    "reloadTime=5.000000",
                    "HitDamage=30",
                    "maxRange=2400",
                    "AccurateRange=1200",
                    "BaseAccuracy=0.600000",
                    "AmmoNames(0)=Class'DeusEx.AmmoShell'",
                    "AmmoNames(1)=Class'DeusEx.AmmoSabot'",
                    "AreaOfEffect=AOE_Cone",
                    "recoilStrength=0.500000",
                    "mpReloadTime=0.500000",
                    "mpHitDamage=30",
                    "mpBaseAccuracy=0.200000",
                    "mpAccurateRange=1200",
                    "mpMaxRange=1200",
                    "mpReloadCount=3",
                    "mpPickupAmmoCount=12",
                    "bCanHaveModReloadCount=True",
                    "bCanHaveModReloadTime=True",
                    "bCanHaveModRecoilStrength=True",
                    "AmmoName=Class'DeusEx.AmmoShell'",
                    "ReloadCount=3",
                    "PickupAmmoCount=12",
                    "bInstantHit=True",
                    "FireOffset=(X=-11.000000,Y=4.000000,Z=13.000000)",
                    "shakemag=50.000000",
                    "FireSound=Sound'DeusExSounds.Weapons.SawedOffShotgunFire'",
                    "AltFireSound=Sound'DeusExSounds.Weapons.SawedOffShotgunReloadEnd'",
                    "CockingSound=Sound'DeusExSounds.Weapons.SawedOffShotgunReload'",
                    "SelectSound=Sound'DeusExSounds.Weapons.SawedOffShotgunSelect'",
                    "InventoryGroup=6",
                    "ItemName=\"Coyote M17F\"",
                    "ItemArticle=\"the\"",
                    "PlayerViewOffset=(X=11.000000,Y=-4.000000,Z=-13.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.Shotgun'",
                    "PickupViewMesh=LodMesh'DeusExItems.ShotgunPickup'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.Shotgun3rd'",
                    "LandSound=Sound'DeusExSounds.Generic.DropMediumWeapon'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconShotgun'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconShotgun'",
                    "largeIconWidth=131",
                    "largeIconHeight=45",
                    "invSlotsX=3",
                    "Description=\"The sawed-off, pump-action shotgun features a truncated barrel resulting in a wide spread at close range and will accept either buckshot or sabot shells.\"",
                    "beltDescription=\"COYOTE\"",
                    "Mesh=LodMesh'DeusExItems.ShotgunPickup'",
                    "CollisionRadius=12.000000",
                    "CollisionHeight=0.900000",
                    "Mass=15.000000"
                ],
                "exec": [],
                "extends": "DeusExWeapon",
                "functions": {
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t\tReloadCount = mpReloadCount;\n      PickupAmmoCount = 12; //to match assaultshotgun\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 79,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "WeaponCrowbar2.uc": {
            "body": "//=============================================================================\n// WeaponCrowbar.\n//=============================================================================\nclass WeaponCrowbar2 extends DeusExWeapon;\n\nenum EModeNum\n{\n\tMode_Normal,\n\tMode_Throw,\n};\n\nVar EModeNum Mode;\nvar DeusExPlayer DXPl;\n\nreplication\n{\n\tReliable if(Role==ROLE_AUTHORITY)\n\t\tMode;\n}\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t}\n}\n\nFunction Fire(Float value)\n{\n\tlocal ThrownCrowbar S;\n\tDXPL=DeusExPlayer(Owner);\n\tIf(Mode==Mode_Throw)\n\t{\n\t\tS=Spawn(class'ThrownCrowbar',Pawn(Owner),,Location+vect(0,0,-2),DXPL.ViewRotation);\n\t\tif(S!=None)\n\t\t{\n\t\t\tS.SetOwner(DXPL);\n\t\t\tS.Lifespan=15;\n\t\t}\n\t\tDestroy();\n\t}\n\telse\n\t{\n\t\tSuper.Fire(Value);\n\t}\n}\n\nFunction cycleammo()\n{\n\tswitch Mode\n\t\t{\n\t\tcase MODE_Normal:\n\t\t\tMode = MODE_Throw;\n\t\t\tif (Role == ROLE_Authority)\n\t\t\tPawn(Owner).Clientmessage(\"Throwing mode\");\n\t\t\tbreak;\n\n\t\tcase MODE_Throw:\n\t\t\tMode = MODE_Normal;\n\t\t\tif (Role == ROLE_Authority)\n\t\t\tPawn(Owner).Clientmessage(\"Normal mode\");\n\t\t\tbreak;\n\t\t\t\n\t\t}\n}\n\ndefaultproperties\n{\n     LowAmmoWaterMark=0\n     GoverningSkill=Class'DeusEx.SkillWeaponLowTech'\n     NoiseLevel=0.050000\n     reloadTime=0.000000\n     HitDamage=6\n     maxRange=80\n     AccurateRange=80\n     BaseAccuracy=1.000000\n     bPenetrating=False\n     bHasMuzzleFlash=False\n     bHandToHand=True\n     bFallbackWeapon=True\n     bEmitWeaponDrawn=False\n     mpHitDamage=12\n     mpBaseAccuracy=1.000000\n     mpAccurateRange=96\n     mpMaxRange=96\n     AmmoName=Class'DeusEx.AmmoNone'\n     ReloadCount=0\n     bInstantHit=True\n     FireOffset=(X=-40.000000,Y=15.000000,Z=8.000000)\n     shakemag=20.000000\n     FireSound=Sound'DeusExSounds.Weapons.CrowbarFire'\n     SelectSound=Sound'DeusExSounds.Weapons.CrowbarSelect'\n     Misc1Sound=Sound'DeusExSounds.Weapons.CrowbarHitFlesh'\n     Misc2Sound=Sound'DeusExSounds.Weapons.CrowbarHitHard'\n     Misc3Sound=Sound'DeusExSounds.Weapons.CrowbarHitSoft'\n     InventoryGroup=10\n     ItemName=\"Crowbar\"\n     PlayerViewOffset=(X=40.000000,Y=-15.000000,Z=-8.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.Crowbar'\n     PickupViewMesh=LodMesh'DeusExItems.CrowbarPickup'\n     ThirdPersonMesh=LodMesh'DeusExItems.Crowbar3rd'\n     LandSound=Sound'DeusExSounds.Generic.DropMediumWeapon'\n     Icon=Texture'DeusExUI.Icons.BeltIconCrowbar'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconCrowbar'\n     largeIconWidth=101\n     largeIconHeight=43\n     invSlotsX=2\n     Description=\"A crowbar. Hit someone or something with it. Repeat.|n|n<UNATCO OPS FILE NOTE GH010-BLUE> Many crowbars we call 'murder of crowbars.'  Always have one for kombat. Ha. -- Gunther Hermann <END NOTE>\"\n     beltDescription=\"CROWBAR\"\n     Mesh=LodMesh'DeusExItems.CrowbarPickup'\n     CollisionRadius=19.000000\n     CollisionHeight=1.050000\n     Mass=15.000000\n}\n",
            "name": "WeaponCrowbar2.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "LowAmmoWaterMark=0",
                    "GoverningSkill=Class'DeusEx.SkillWeaponLowTech'",
                    "NoiseLevel=0.050000",
                    "reloadTime=0.000000",
                    "HitDamage=6",
                    "maxRange=80",
                    "AccurateRange=80",
                    "BaseAccuracy=1.000000",
                    "bPenetrating=False",
                    "bHasMuzzleFlash=False",
                    "bHandToHand=True",
                    "bFallbackWeapon=True",
                    "bEmitWeaponDrawn=False",
                    "mpHitDamage=12",
                    "mpBaseAccuracy=1.000000",
                    "mpAccurateRange=96",
                    "mpMaxRange=96",
                    "AmmoName=Class'DeusEx.AmmoNone'",
                    "ReloadCount=0",
                    "bInstantHit=True",
                    "FireOffset=(X=-40.000000,Y=15.000000,Z=8.000000)",
                    "shakemag=20.000000",
                    "FireSound=Sound'DeusExSounds.Weapons.CrowbarFire'",
                    "SelectSound=Sound'DeusExSounds.Weapons.CrowbarSelect'",
                    "Misc1Sound=Sound'DeusExSounds.Weapons.CrowbarHitFlesh'",
                    "Misc2Sound=Sound'DeusExSounds.Weapons.CrowbarHitHard'",
                    "Misc3Sound=Sound'DeusExSounds.Weapons.CrowbarHitSoft'",
                    "InventoryGroup=10",
                    "ItemName=\"Crowbar\"",
                    "PlayerViewOffset=(X=40.000000,Y=-15.000000,Z=-8.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.Crowbar'",
                    "PickupViewMesh=LodMesh'DeusExItems.CrowbarPickup'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.Crowbar3rd'",
                    "LandSound=Sound'DeusExSounds.Generic.DropMediumWeapon'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconCrowbar'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconCrowbar'",
                    "largeIconWidth=101",
                    "largeIconHeight=43",
                    "invSlotsX=2",
                    "Description=\"A crowbar. Hit someone or something with it. Repeat.|n|n<UNATCO OPS FILE NOTE GH010-BLUE> Many crowbars we call 'murder of crowbars.'  Always have one for kombat. Ha. -- Gunther Hermann <END NOTE>\"",
                    "beltDescription=\"CROWBAR\"",
                    "Mesh=LodMesh'DeusExItems.CrowbarPickup'",
                    "CollisionRadius=19.000000",
                    "CollisionHeight=1.050000",
                    "Mass=15.000000"
                ],
                "exec": [],
                "extends": "DeusExWeapon",
                "functions": {
                    "Fire": {
                        "body": "{\n\tDXPL=DeusExPlayer(Owner);\n\tIf(Mode==Mode_Throw)\n\t{\n\t\tS=Spawn(class'ThrownCrowbar',Pawn(Owner),,Location+vect(0,0,-2),DXPL.ViewRotation);\n\t\tif(S!=None)\n\t\t{\n\t\t\tS.SetOwner(DXPL);\n\t\t\tS.Lifespan=15;\n\t\t}\n\t\tDestroy();\n\t}\n\telse\n\t{\n\t\tSuper.Fire(Value);\n\t}\n}",
                        "locals": [
                            "local ThrownCrowbar S;"
                        ],
                        "modifiers": [],
                        "name": "Fire",
                        "native": false,
                        "param": [
                            [
                                "Float",
                                "value"
                            ]
                        ],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "cycleammo": {
                        "body": "{\n\tswitch Mode\n\t\t{\n\t\tcase MODE_Normal:\n\t\t\tMode = MODE_Throw;\n\t\t\tif (Role == ROLE_Authority)\n\t\t\tPawn(Owner).Clientmessage(\"Throwing mode\");\n\t\t\tbreak;\n\n\t\tcase MODE_Throw:\n\t\t\tMode = MODE_Normal;\n\t\t\tif (Role == ROLE_Authority)\n\t\t\tPawn(Owner).Clientmessage(\"Normal mode\");\n\t\t\tbreak;\n\t\t\t\n\t\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "cycleammo",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 123,
                "replication": "",
                "states": [],
                "variables": [
                    "Var EModeNum Mode;",
                    "var DeusExPlayer DXPl;"
                ]
            }
        },
        "WeaponDRR.uc": {
            "body": "class WeaponDRR extends WeaponAssaultGun;\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\ndefaultproperties\n{\n     AmmoNames(0)=None\n     AmmoNames(1)=None\n     ProjectileNames(1)=None\n     bInstantHit=False\n     ProjectileClass=Class'PartyStuff.RocketDrone'\n     InventoryGroup=116\n     ItemName=\"Automatic Drone Rocket Rifle\"\n     beltDescription=\"DRR\"\n     Mass=1.000000\n}\n",
            "name": "WeaponDRR.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "AmmoNames(0)=None",
                    "AmmoNames(1)=None",
                    "ProjectileNames(1)=None",
                    "bInstantHit=False",
                    "ProjectileClass=Class'PartyStuff.RocketDrone'",
                    "InventoryGroup=116",
                    "ItemName=\"Automatic Drone Rocket Rifle\"",
                    "beltDescription=\"DRR\"",
                    "Mass=1.000000"
                ],
                "exec": [],
                "extends": "WeaponAssaultGun",
                "functions": {
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 20,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "WeaponDePressurizer.uc": {
            "body": "//=============================================================================\n// WeaponDe-pressurizer.\n//=============================================================================\nclass WeaponDePressurizer extends DeusExWeapon;\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t\tReloadCount = mpReloadCount;\n\t}\n}\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\nstate NormalFire //(Thanks to JimBowen for this Infinite ammo code) \n{ \n   Begin: \n      if ((ClipCount >= ReloadCount) && (ReloadCount != 0)) \n      { \n         if (!bAutomatic) \n         { \n            bFiring = False; \n            FinishAnim(); \n         } \n    \n         if (Owner != None) \n         { \n            if (Owner.IsA('DeusExPlayer')) \n            { \n               bFiring = False; \n            } \n            else if (Owner.IsA('ScriptedPawn')) \n            { \n               bFiring = False; \n               ReloadAmmo(); \n            } \n         } \n         else \n         { \n            if (bHasMuzzleFlash) \n               EraseMuzzleFlashTexture(); \n            GotoState('Idle'); \n         } \n      } \n      if ( bAutomatic && (( Level.NetMode == NM_DedicatedServer ) || ((Level.NetMode == NM_ListenServer) && Owner.IsA('DeusExPlayer') && !DeusExPlayer(Owner).PlayerIsListenClient()))) \n         GotoState('Idle'); \n    \n      Sleep(GetShotTime()); \n      if (bAutomatic) \n      { \n         GenerateBullet();       // In multiplayer bullets are generated by the client which will let the server know when \n         Goto('Begin'); \n      } \n      bFiring = False; \n      FinishAnim(); \n    \n   /*      // if ReloadCount is 0 and we're not hand to hand, then this is a \n      // single-use weapon so destroy it after firing once \n      if ((ReloadCount == 0) && !bHandToHand) \n      { \n         if (DeusExPlayer(Owner) != None) \n            DeusExPlayer(Owner).RemoveItemFromSlot(Self);   // remove it from the inventory grid \n         Destroy(); \n      } \n      */              // Do I REALLY need all that crap JUST for infinite ammo? \n      ReadyToFire(); \n   Done: \n      bFiring = False; \n      Finish(); \n}\n\ndefaultproperties\n{\n     LowAmmoWaterMark=12\n     GoverningSkill=Class'DeusEx.SkillWeaponHeavy'\n     reloadTime=2.000000\n     HitDamage=35\n     maxRange=24000\n     AccurateRange=14400\n     BaseAccuracy=0.600000\n     bCanHaveScope=True\n     bHasScope=True\n     ScopeFOV=20\n     bCanHaveLaser=True\n     bHasLaser=True\n     AreaOfEffect=AOE_Cone\n     bPenetrating=False\n     recoilStrength=0.300000\n     mpReloadTime=0.200000\n     mpHitDamage=50\n     mpBaseAccuracy=1.500000\n     mpAccurateRange=9000\n     mpMaxRange=10000\n     bCanHaveModBaseAccuracy=True\n     bCanHaveModReloadCount=True\n     bCanHaveModAccurateRange=True\n     bCanHaveModReloadTime=True\n     bCanHaveModRecoilStrength=True\n     ReloadCount=0\n     ProjectileClass=Class'PartyStuff.PBeam'\n     shakemag=50.000000\n     FireSound=Sound'DeusExSounds.Weapons.PlasmaRifleFire'\n     AltFireSound=Sound'DeusExSounds.Weapons.PlasmaRifleReloadEnd'\n     CockingSound=Sound'DeusExSounds.Weapons.PlasmaRifleReload'\n     SelectSound=Sound'DeusExSounds.Weapons.PlasmaRifleSelect'\n     InventoryGroup=8\n     ItemName=\"De-Pressurizer\"\n     PlayerViewOffset=(X=18.000000,Z=-7.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.PlasmaRifle'\n     PickupViewMesh=LodMesh'DeusExItems.PlasmaRiflePickup'\n     ThirdPersonMesh=LodMesh'DeusExItems.PlasmaRifle3rd'\n     LandSound=Sound'DeusExSounds.Generic.DropLargeWeapon'\n     Icon=Texture'DeusExUI.Icons.BeltIconPlasmaRifle'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconPlasmaRifle'\n     largeIconWidth=203\n     largeIconHeight=66\n     invSlotsX=4\n     invSlotsY=2\n     Description=\"A weapon made with TOP-SECRET technology from labs.\"\n     beltDescription=\"DPGUN\"\n     Mesh=LodMesh'DeusExItems.PlasmaRiflePickup'\n     CollisionRadius=15.600000\n     CollisionHeight=5.200000\n     Mass=1.000000\n}\n",
            "name": "WeaponDePressurizer.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "LowAmmoWaterMark=12",
                    "GoverningSkill=Class'DeusEx.SkillWeaponHeavy'",
                    "reloadTime=2.000000",
                    "HitDamage=35",
                    "maxRange=24000",
                    "AccurateRange=14400",
                    "BaseAccuracy=0.600000",
                    "bCanHaveScope=True",
                    "bHasScope=True",
                    "ScopeFOV=20",
                    "bCanHaveLaser=True",
                    "bHasLaser=True",
                    "AreaOfEffect=AOE_Cone",
                    "bPenetrating=False",
                    "recoilStrength=0.300000",
                    "mpReloadTime=0.200000",
                    "mpHitDamage=50",
                    "mpBaseAccuracy=1.500000",
                    "mpAccurateRange=9000",
                    "mpMaxRange=10000",
                    "bCanHaveModBaseAccuracy=True",
                    "bCanHaveModReloadCount=True",
                    "bCanHaveModAccurateRange=True",
                    "bCanHaveModReloadTime=True",
                    "bCanHaveModRecoilStrength=True",
                    "ReloadCount=0",
                    "ProjectileClass=Class'PartyStuff.PBeam'",
                    "shakemag=50.000000",
                    "FireSound=Sound'DeusExSounds.Weapons.PlasmaRifleFire'",
                    "AltFireSound=Sound'DeusExSounds.Weapons.PlasmaRifleReloadEnd'",
                    "CockingSound=Sound'DeusExSounds.Weapons.PlasmaRifleReload'",
                    "SelectSound=Sound'DeusExSounds.Weapons.PlasmaRifleSelect'",
                    "InventoryGroup=8",
                    "ItemName=\"De-Pressurizer\"",
                    "PlayerViewOffset=(X=18.000000,Z=-7.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.PlasmaRifle'",
                    "PickupViewMesh=LodMesh'DeusExItems.PlasmaRiflePickup'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.PlasmaRifle3rd'",
                    "LandSound=Sound'DeusExSounds.Generic.DropLargeWeapon'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconPlasmaRifle'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconPlasmaRifle'",
                    "largeIconWidth=203",
                    "largeIconHeight=66",
                    "invSlotsX=4",
                    "invSlotsY=2",
                    "Description=\"A weapon made with TOP-SECRET technology from labs.\"",
                    "beltDescription=\"DPGUN\"",
                    "Mesh=LodMesh'DeusExItems.PlasmaRiflePickup'",
                    "CollisionRadius=15.600000",
                    "CollisionHeight=5.200000",
                    "Mass=1.000000"
                ],
                "exec": [],
                "extends": "DeusExWeapon",
                "functions": {
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t\tReloadCount = mpReloadCount;\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 138,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "WeaponDildo.uc": {
            "body": "//=============================================\n// PlasmaSword\n//=============================================\nClass WeaponDildo extends WeaponBaton;\n\nvar Name WeaponDamageType;\nvar bool bHard;\n\nfunction Timer()\n{\n\t\tmpHitDamage=25;\n\t\tmpMaxRange=150;\n\t\tbHard=False;\n\t\tDeusExPlayer(Owner).ClientMessage(\"Dildo went soft.\");\n\t\t\n}\n\nfunction DropFrom(vector StartLocation)\n{\n\tif(bHard)\n\t{\n\t\tDeusExPlayer(Owner).ClientMessage(\"Your hand has gripped the dildo too hard.\");\n\t}\n\telse\n\t{\n\t\tsuper.DropFrom(startLocation);\n\t}\n}\n\nfunction ScopeToggle()\n{\n\tif(!bHard)\n\t{\n\t\tmpHitDamage=100;\n\t\tmpMaxRange=300;\n\t\tHitDamage=100;\n\t\tMaxRange=300;\n\t\tDeusExPlayer(Owner).ClientMessage(\"Dildo hardened.\");\n\t\tbHard=True;\n\t}\n\telse\n\t{\n\t\tmpHitDamage=25;\n\t\tHitDamage=25;\n\t\tMaxRange=150;\n\t\tmpMaxRange=150;\n\t\tbHard=False;\n\t\tDeusExPlayer(Owner).ClientMessage(\"Dildo went soft.\");\n\t}\n}\n\ndefaultproperties\n{\n     WeaponDamageType=exploded\n     mpHitDamage=25\n     mpBaseAccuracy=1.000000\n     mpAccurateRange=150\n     mpMaxRange=150\n     InventoryGroup=141\n     ItemName=\"Dildo\"\n     Description=\"A strange, ancient triad weapon. You would be hard pressed finding out anything else about it.\"\n     beltDescription=\"DILDO\"\n     Skin=Texture'PGAssets.Skins.DildoTex1'\n     Fatness=180\n     MultiSkins(0)=Texture'PGAssets.Skins.DildoTex1'\n     Mass=20.000000\n}\n",
            "name": "WeaponDildo.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "WeaponDamageType=exploded",
                    "mpHitDamage=25",
                    "mpBaseAccuracy=1.000000",
                    "mpAccurateRange=150",
                    "mpMaxRange=150",
                    "InventoryGroup=141",
                    "ItemName=\"Dildo\"",
                    "Description=\"A strange, ancient triad weapon. You would be hard pressed finding out anything else about it.\"",
                    "beltDescription=\"DILDO\"",
                    "Skin=Texture'PGAssets.Skins.DildoTex1'",
                    "Fatness=180",
                    "MultiSkins(0)=Texture'PGAssets.Skins.DildoTex1'",
                    "Mass=20.000000"
                ],
                "exec": [],
                "extends": "WeaponBaton",
                "functions": {
                    "DropFrom": {
                        "body": "{\n\tif(bHard)\n\t{\n\t\tDeusExPlayer(Owner).ClientMessage(\"Your hand has gripped the dildo too hard.\");\n\t}\n\telse\n\t{\n\t\tsuper.DropFrom(startLocation);\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "DropFrom",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "StartLocation"
                            ]
                        ],
                        "return": ""
                    },
                    "ScopeToggle": {
                        "body": "{\n\tif(!bHard)\n\t{\n\t\tmpHitDamage=100;\n\t\tmpMaxRange=300;\n\t\tHitDamage=100;\n\t\tMaxRange=300;\n\t\tDeusExPlayer(Owner).ClientMessage(\"Dildo hardened.\");\n\t\tbHard=True;\n\t}\n\telse\n\t{\n\t\tmpHitDamage=25;\n\t\tHitDamage=25;\n\t\tMaxRange=150;\n\t\tmpMaxRange=150;\n\t\tbHard=False;\n\t\tDeusExPlayer(Owner).ClientMessage(\"Dildo went soft.\");\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "ScopeToggle",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\t\tmpHitDamage=25;\n\t\tmpMaxRange=150;\n\t\tbHard=False;\n\t\tDeusExPlayer(Owner).ClientMessage(\"Dildo went soft.\");\n\t\t\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 68,
                "replication": "",
                "states": [],
                "variables": [
                    "var Name WeaponDamageType;",
                    "var bool bHard;"
                ]
            }
        },
        "WeaponDisarmer.uc": {
            "body": "//==================================\n// Disarm Pistol... IT DISARMS! WOW!\n//==================================\nclass WeaponDisarmer extends WeaponPistol;\n\nsimulated function ProcessTraceHit(Actor Other, Vector HitLocation, Vector HitNormal, Vector X, Vector Y, Vector Z)\n{\n    local DeusExWeapon W;\n\t\tlocal JailPoint JP;\n\t\tlocal bool bFoundJail;\n\t\tlocal int Jails;\n\t\tlocal int Decider;\n\tsuper.ProcessTraceHit(Other,HitLocation,HitNormal,X,Y,Z);\n    if(Other.IsA('Pawn'))\n    {\n\t\t\t\t\t\n\n\t    foreach allactors(class'DeusExWeapon',W)\n\t\t{\n\t\t\tif(W.Owner == Other)\n\t\t\t{\n\t\t\t\tW.Destroy();\n\t\t\t}\n\t\t}\t\n\n    }\n}\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\nstate NormalFire //(Thanks to JimBowen for this Infinite ammo code) \n{ \n   Begin: \n      if ((ClipCount >= ReloadCount) && (ReloadCount != 0)) \n      { \n         if (!bAutomatic) \n         { \n            bFiring = False; \n            FinishAnim(); \n         } \n    \n         if (Owner != None) \n         { \n            if (Owner.IsA('DeusExPlayer')) \n            { \n               bFiring = False; \n            } \n            else if (Owner.IsA('ScriptedPawn')) \n            { \n               bFiring = False; \n               ReloadAmmo(); \n            } \n         } \n         else \n         { \n            if (bHasMuzzleFlash) \n               EraseMuzzleFlashTexture(); \n            GotoState('Idle'); \n         } \n      } \n      if ( bAutomatic && (( Level.NetMode == NM_DedicatedServer ) || ((Level.NetMode == NM_ListenServer) && Owner.IsA('DeusExPlayer') && !DeusExPlayer(Owner).PlayerIsListenClient()))) \n         GotoState('Idle'); \n    \n      Sleep(GetShotTime()); \n      if (bAutomatic) \n      { \n         GenerateBullet();       // In multiplayer bullets are generated by the client which will let the server know when \n         Goto('Begin'); \n      } \n      bFiring = False; \n      FinishAnim(); \n    \n   /*      // if ReloadCount is 0 and we're not hand to hand, then this is a \n      // single-use weapon so destroy it after firing once \n      if ((ReloadCount == 0) && !bHandToHand) \n      { \n         if (DeusExPlayer(Owner) != None) \n            DeusExPlayer(Owner).RemoveItemFromSlot(Self);   // remove it from the inventory grid \n         Destroy(); \n      } \n      */              // Do I REALLY need all that crap JUST for infinite ammo? \n      ReadyToFire(); \n   Done: \n      bFiring = False; \n      Finish(); \n}\n\nsimulated function PreBeginPlay()\n{\n    return;\n}\n\ndefaultproperties\n{\n     ShotTime=0.100000\n     HitDamage=5\n     BaseAccuracy=0.000000\n     ReloadCount=0\n     PickupAmmoCount=0\n     FireSound=Sound'DeusExSounds.Generic.Beep1'\n     InventoryGroup=117\n     ItemName=\"Arrester gun\"\n     ItemArticle=\"the\"\n     Description=\"A Pistol that charges up it's projectile and that projectile can disarm any person immediately.\"\n     beltDescription=\"PP\"\n}\n",
            "name": "WeaponDisarmer.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "ShotTime=0.100000",
                    "HitDamage=5",
                    "BaseAccuracy=0.000000",
                    "ReloadCount=0",
                    "PickupAmmoCount=0",
                    "FireSound=Sound'DeusExSounds.Generic.Beep1'",
                    "InventoryGroup=117",
                    "ItemName=\"Arrester gun\"",
                    "ItemArticle=\"the\"",
                    "Description=\"A Pistol that charges up it's projectile and that projectile can disarm any person immediately.\"",
                    "beltDescription=\"PP\""
                ],
                "exec": [],
                "extends": "WeaponPistol",
                "functions": {
                    "PreBeginPlay": {
                        "body": "{\n    return;\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ProcessTraceHit": {
                        "body": "{\n\tsuper.ProcessTraceHit(Other,HitLocation,HitNormal,X,Y,Z);\n    if(Other.IsA('Pawn'))\n    {\n\t\t\t\t\t\n\n\t    foreach allactors(class'DeusExWeapon',W)\n\t\t{\n\t\t\tif(W.Owner == Other)\n\t\t\t{\n\t\t\t\tW.Destroy();\n\t\t\t}\n\t\t}\t\n\n    }\n}",
                        "locals": [
                            "local DeusExWeapon W;",
                            "local JailPoint JP;",
                            "local bool bFoundJail;",
                            "local int Jails;",
                            "local int Decider;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "ProcessTraceHit",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Other"
                            ],
                            [
                                "Vector",
                                "HitLocation"
                            ],
                            [
                                "Vector",
                                "HitNormal"
                            ],
                            [
                                "Vector",
                                "X"
                            ],
                            [
                                "Vector",
                                "Y"
                            ],
                            [
                                "Vector",
                                "Z"
                            ]
                        ],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 110,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "WeaponDragonsClaw.uc": {
            "body": "//=============================================\n// Dragon's Claw\n//=============================================\nClass WeaponDragonsClaw extends WeaponNanoSword;\n\n#exec OBJ LOAD FILE=\"..\\Textures\\Effects.utx\"\n\nvar Name WeaponDamageType;\n\nsimulated function ProcessTraceHit(Actor Other, Vector HitLocation, Vector HitNormal, Vector X, Vector Y, Vector Z)\n{\n\tlocal float        mult;\n\tlocal name         damageType;\n\tlocal DeusExPlayer dxPlayer;\n\n\tif (Other != None)\n\t{\n\t\t// AugCombat increases our damage if hand to hand\n\t\tmult = 1.0;\n\t\tif (bHandToHand && (DeusExPlayer(Owner) != None))\n\t\t{\n\t\t\tmult = DeusExPlayer(Owner).AugmentationSystem.GetAugLevelValue(class'AugCombat');\n\t\t\tif (mult == -1.0)\n\t\t\t\tmult = 1.0;\n\t\t}\n\n\t\t// skill also affects our damage\n\t\t// GetWeaponSkill returns 0.0 to -0.7 (max skill/aug)\n\t\tmult += -2.0 * GetWeaponSkill();\n\n\t\t// Determine damage type\n\t\tdamageType = WeaponDamageType;\n\n\t\tif (Other != None)\n\t\t{\n\t\t\tif (Other.bOwned)\n\t\t\t{\n\t\t\t\tdxPlayer = DeusExPlayer(Owner);\n\t\t\t\tif (dxPlayer != None)\n\t\t\t\t\tdxPlayer.AISendEvent('Futz', EAITYPE_Visual);\n\t\t\t}\n\t\t}\n\t\tif ((Other == Level) || (Other.IsA('Mover')))\n\t\t{\n\t\t\tif ( Role == ROLE_Authority )\n\t\t\t\tOther.TakeDamage(HitDamage * mult, Pawn(Owner), HitLocation, 1000.0*X, damageType);\n\n\t\t\tSelectiveSpawnEffects( HitLocation, HitNormal, Other, HitDamage * mult);\n\t\t}\n\t\telse if ((Other != self) && (Other != Owner))\n\t\t{\n\t\t\tif ( Role == ROLE_Authority )\n\t\t\t\tOther.TakeDamage(HitDamage * mult, Pawn(Owner), HitLocation, 1000.0*X, damageType);\n\t\t\tif (bHandToHand)\n\t\t\t\tSelectiveSpawnEffects( HitLocation, HitNormal, Other, HitDamage * mult);\n\n\t\t\tif (bPenetrating && Other.IsA('Pawn') && !Other.IsA('Robot'))\n\t\t\t\tSpawnBlood(HitLocation, HitNormal);\n\t\t}\n\t}\n   if (DeusExMPGame(Level.Game) != None)\n   {\n      if (DeusExPlayer(Other) != None)\n         DeusExMPGame(Level.Game).TrackWeapon(self,HitDamage * mult);\n      else\n         DeusExMPGame(Level.Game).TrackWeapon(self,0);\n   }\n}\n\nstate DownWeapon\n{\n\tfunction BeginState()\n\t{\n\t\tSuper.BeginState();\n\t\tLightType = LT_None;\n\t}\n}\n\nstate Idle\n{\n\tfunction BeginState()\n\t{\n\t\tSuper.BeginState();\n\t\tLightType = LT_Steady;\n\t}\n}\n\nauto state Pickup\n{\n\tfunction EndState()\n\t{\n\t\tSuper.EndState();\n\t\tLightType = LT_None;\n\n\t}\n}\n\ndefaultproperties\n{\n     mpHitDamage=5\n     InventoryGroup=109\n     ItemName=\"Dragon's Claw\"\n     Description=\"A strange, ancient triad weapon. You would be hard pressed finding out anything else about it.\"\n     MultiSkins(1)=FireTexture'Effects.Fire.flmethrwr_fire'\n     MultiSkins(2)=FireTexture'Effects.Fire.flmethrwr_fire'\n     MultiSkins(4)=FireTexture'Effects.Fire.flmethrwr_fire'\n     MultiSkins(5)=FireTexture'Effects.Fire.flmethrwr_fire'\n     MultiSkins(6)=FireTexture'Effects.Fire.flmethrwr_fire'\n     LightHue=40\n}\n",
            "name": "WeaponDragonsClaw.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "mpHitDamage=5",
                    "InventoryGroup=109",
                    "ItemName=\"Dragon's Claw\"",
                    "Description=\"A strange, ancient triad weapon. You would be hard pressed finding out anything else about it.\"",
                    "MultiSkins(1)=FireTexture'Effects.Fire.flmethrwr_fire'",
                    "MultiSkins(2)=FireTexture'Effects.Fire.flmethrwr_fire'",
                    "MultiSkins(4)=FireTexture'Effects.Fire.flmethrwr_fire'",
                    "MultiSkins(5)=FireTexture'Effects.Fire.flmethrwr_fire'",
                    "MultiSkins(6)=FireTexture'Effects.Fire.flmethrwr_fire'",
                    "LightHue=40"
                ],
                "exec": [
                    "#exec OBJ LOAD FILE=\"..\\Textures\\Effects.utx\""
                ],
                "extends": "WeaponNanoSword",
                "functions": {
                    "BeginState": {
                        "body": "{\n\t\tSuper.BeginState();\n\t\tLightType = LT_Steady;\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "BeginState",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "EndState": {
                        "body": "{\n\t\tSuper.EndState();\n\t\tLightType = LT_None;\n\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "EndState",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ProcessTraceHit": {
                        "body": "{\n\n\tif (Other != None)\n\t{\n\t\t// AugCombat increases our damage if hand to hand\n\t\tmult = 1.0;\n\t\tif (bHandToHand && (DeusExPlayer(Owner) != None))\n\t\t{\n\t\t\tmult = DeusExPlayer(Owner).AugmentationSystem.GetAugLevelValue(class'AugCombat');\n\t\t\tif (mult == -1.0)\n\t\t\t\tmult = 1.0;\n\t\t}\n\n\t\t// skill also affects our damage\n\t\t// GetWeaponSkill returns 0.0 to -0.7 (max skill/aug)\n\t\tmult += -2.0 * GetWeaponSkill();\n\n\t\t// Determine damage type\n\t\tdamageType = WeaponDamageType;\n\n\t\tif (Other != None)\n\t\t{\n\t\t\tif (Other.bOwned)\n\t\t\t{\n\t\t\t\tdxPlayer = DeusExPlayer(Owner);\n\t\t\t\tif (dxPlayer != None)\n\t\t\t\t\tdxPlayer.AISendEvent('Futz', EAITYPE_Visual);\n\t\t\t}\n\t\t}\n\t\tif ((Other == Level) || (Other.IsA('Mover')))\n\t\t{\n\t\t\tif ( Role == ROLE_Authority )\n\t\t\t\tOther.TakeDamage(HitDamage * mult, Pawn(Owner), HitLocation, 1000.0*X, damageType);\n\n\t\t\tSelectiveSpawnEffects( HitLocation, HitNormal, Other, HitDamage * mult);\n\t\t}\n\t\telse if ((Other != self) && (Other != Owner))\n\t\t{\n\t\t\tif ( Role == ROLE_Authority )\n\t\t\t\tOther.TakeDamage(HitDamage * mult, Pawn(Owner), HitLocation, 1000.0*X, damageType);\n\t\t\tif (bHandToHand)\n\t\t\t\tSelectiveSpawnEffects( HitLocation, HitNormal, Other, HitDamage * mult);\n\n\t\t\tif (bPenetrating && Other.IsA('Pawn') && !Other.IsA('Robot'))\n\t\t\t\tSpawnBlood(HitLocation, HitNormal);\n\t\t}\n\t}\n   if (DeusExMPGame(Level.Game) != None)\n   {\n      if (DeusExPlayer(Other) != None)\n         DeusExMPGame(Level.Game).TrackWeapon(self,HitDamage * mult);\n      else\n         DeusExMPGame(Level.Game).TrackWeapon(self,0);\n   }\n}",
                        "locals": [
                            "local float        mult;",
                            "local name         damageType;",
                            "local DeusExPlayer dxPlayer;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "ProcessTraceHit",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Other"
                            ],
                            [
                                "Vector",
                                "HitLocation"
                            ],
                            [
                                "Vector",
                                "HitNormal"
                            ],
                            [
                                "Vector",
                                "X"
                            ],
                            [
                                "Vector",
                                "Y"
                            ],
                            [
                                "Vector",
                                "Z"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 111,
                "replication": "",
                "states": [],
                "variables": [
                    "var Name WeaponDamageType;"
                ]
            }
        },
        "WeaponDroneGrenade.uc": {
            "body": "//=============================================================================\n// WeaponFlashBang.\n//=============================================================================\nclass WeaponDroneGrenade expands WeaponEMPGrenade;\n\nfunction PostBeginPlay()\n{\n   Super.PostBeginPlay();\n   bWeaponStay=False;\n}\n\nfunction Fire(float Value)\n{\n\tif (Pawn(Owner) != None)\n\t{\n\t\tif (bNearWall)\n\t\t{\n\t\t\tbReadyToFire = False;\n\t\t\tGotoState('NormalFire');\n\t\t\tbPointing = True;\n\t\t\tPlayAnim('Place',, 0.1);\n\t\t\treturn;\n\t\t}\n\t}\n\tSuper.Fire(Value);\n}\n\nfunction Projectile ProjectileFire(class<projectile> ProjClass, float ProjSpeed, bool bWarn)\n{\n\tlocal Projectile proj;\n\n\tproj = Super.ProjectileFire(ProjClass, ProjSpeed, bWarn);\n\n\tif (proj != None)\n\t\tproj.PlayAnim('Open');\n}\n\nfunction BecomePickup()\n{\n\tSuper.BecomePickup();\n   if (Level.NetMode != NM_Standalone)\n      if (bTossedOut)\n         Lifespan = 0.0;\n}\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return (BeltSpot == 4);\n}\n\ndefaultproperties\n{\n     AmmoName=Class'PartyStuff.AmmoDG'\n     ProjectileClass=Class'PartyStuff.DroneGrenade'\n     InventoryGroup=35\n     ItemName=\"Drone Grenade\"\n     ItemArticle=\"a\"\n     Description=\"A Droner..\"\n     beltDescription=\"DRONE\"\n     MultiSkins(4)=Texture'DeusExDeco.Skins.AlarmLightTex3'\n}\n",
            "name": "WeaponDroneGrenade.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "AmmoName=Class'PartyStuff.AmmoDG'",
                    "ProjectileClass=Class'PartyStuff.DroneGrenade'",
                    "InventoryGroup=35",
                    "ItemName=\"Drone Grenade\"",
                    "ItemArticle=\"a\"",
                    "Description=\"A Droner..\"",
                    "beltDescription=\"DRONE\"",
                    "MultiSkins(4)=Texture'DeusExDeco.Skins.AlarmLightTex3'"
                ],
                "exec": [],
                "extends": "WeaponEMPGrenade",
                "functions": {
                    "BecomePickup": {
                        "body": "{\n\tSuper.BecomePickup();\n   if (Level.NetMode != NM_Standalone)\n      if (bTossedOut)\n         Lifespan = 0.0;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "BecomePickup",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Fire": {
                        "body": "{\n\tif (Pawn(Owner) != None)\n\t{\n\t\tif (bNearWall)\n\t\t{\n\t\t\tbReadyToFire = False;\n\t\t\tGotoState('NormalFire');\n\t\t\tbPointing = True;\n\t\t\tPlayAnim('Place',, 0.1);\n\t\t\treturn;\n\t\t}\n\t}\n\tSuper.Fire(Value);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Fire",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "Value"
                            ]
                        ],
                        "return": ""
                    },
                    "PostBeginPlay": {
                        "body": "{\n   Super.PostBeginPlay();\n   bWeaponStay=False;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ProjectileFire": {
                        "body": "{\n\n\tproj = Super.ProjectileFire(ProjClass, ProjSpeed, bWarn);\n\n\tif (proj != None)\n\t\tproj.PlayAnim('Open');\n}",
                        "locals": [
                            "local Projectile proj;"
                        ],
                        "modifiers": [],
                        "name": "ProjectileFire",
                        "native": false,
                        "param": [
                            [
                                "class<projectile>",
                                "ProjClass"
                            ],
                            [
                                "float",
                                "ProjSpeed"
                            ],
                            [
                                "bool",
                                "bWarn"
                            ]
                        ],
                        "return": "Projectile"
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return (BeltSpot == 4);\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 61,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "WeaponEnergyAssault.uc": {
            "body": "class WeaponEnergyAssault extends WeaponAssaultGun;\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\ndefaultproperties\n{\n     HitDamage=8\n     bInstantHit=False\n     ProjectileClass=Class'PartyStuff.BB'\n     InventoryGroup=255\n     ItemName=\"|P5Charged Energy Rifle\"\n     beltDescription=\"ENERGY\"\n     Mass=1.000000\n}\n",
            "name": "WeaponEnergyAssault.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "HitDamage=8",
                    "bInstantHit=False",
                    "ProjectileClass=Class'PartyStuff.BB'",
                    "InventoryGroup=255",
                    "ItemName=\"|P5Charged Energy Rifle\"",
                    "beltDescription=\"ENERGY\"",
                    "Mass=1.000000"
                ],
                "exec": [],
                "extends": "WeaponAssaultGun",
                "functions": {
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 18,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "WeaponFRK1.uc": {
            "body": "//=============================================================================\n// WeaponKarkianBite.\n//=============================================================================\nclass WeaponFRK1 extends WeaponNPCMelee;\n\ndefaultproperties\n{\n     ShotTime=0.100000\n     HitDamage=15\n     maxRange=120\n     AccurateRange=120\n     BaseAccuracy=0.000000\n     bFallbackWeapon=True\n     ProjectileClass=Class'DeusEx.Rocket'\n     Misc1Sound=Sound'DeusExSounds.Animal.KarkianAttack'\n     Misc2Sound=Sound'DeusExSounds.Animal.KarkianAttack'\n     Misc3Sound=Sound'DeusExSounds.Animal.KarkianAttack'\n}\n",
            "name": "WeaponFRK1.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "ShotTime=0.100000",
                    "HitDamage=15",
                    "maxRange=120",
                    "AccurateRange=120",
                    "BaseAccuracy=0.000000",
                    "bFallbackWeapon=True",
                    "ProjectileClass=Class'DeusEx.Rocket'",
                    "Misc1Sound=Sound'DeusExSounds.Animal.KarkianAttack'",
                    "Misc2Sound=Sound'DeusExSounds.Animal.KarkianAttack'",
                    "Misc3Sound=Sound'DeusExSounds.Animal.KarkianAttack'"
                ],
                "exec": [],
                "extends": "WeaponNPCMelee",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 19,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "WeaponFRK2.uc": {
            "body": "//=============================================================================\n// WeaponKarkianBump.\n//=============================================================================\nclass WeaponFRK2 extends WeaponNPCRanged;\n\ndefaultproperties\n{\n     ShotTime=0.100000\n     HitDamage=15\n     maxRange=80\n     AccurateRange=80\n     BaseAccuracy=0.000000\n     AITimeLimit=10.000000\n     AIFireDelay=8.000000\n     ProjectileClass=Class'DeusEx.RocketWP'\n     Misc1Sound=Sound'DeusExSounds.Animal.KarkianAttack'\n     Misc2Sound=Sound'DeusExSounds.Animal.KarkianAttack'\n     Misc3Sound=Sound'DeusExSounds.Animal.KarkianAttack'\n}\n",
            "name": "WeaponFRK2.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "ShotTime=0.100000",
                    "HitDamage=15",
                    "maxRange=80",
                    "AccurateRange=80",
                    "BaseAccuracy=0.000000",
                    "AITimeLimit=10.000000",
                    "AIFireDelay=8.000000",
                    "ProjectileClass=Class'DeusEx.RocketWP'",
                    "Misc1Sound=Sound'DeusExSounds.Animal.KarkianAttack'",
                    "Misc2Sound=Sound'DeusExSounds.Animal.KarkianAttack'",
                    "Misc3Sound=Sound'DeusExSounds.Animal.KarkianAttack'"
                ],
                "exec": [],
                "extends": "WeaponNPCRanged",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 20,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "WeaponFatten.uc": {
            "body": "//=============================================================================\n// WeaponStealthPistol.\n//=============================================================================\nclass WeaponFatten extends DeusExWeapon;\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t\tReloadCount = mpReloadCount;\n\t}\n}\n\nfunction string GetDisplayString(Actor P)\n{\n\tif(P.isA('DeusExPlayer'))\n\t\treturn DeusExPlayer(p).PlayerReplicationInfo.PlayerName;\n\telse if(P.isA('ScriptedPawn'))\n\t\treturn ScriptedPawn(P).FamiliarName;\n\telse if(P.isA('DeusExDecoration'))\n\t\treturn DeusExDecoration(P).ItemName;\n}\n\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\nfunction ProcessTraceHit(Actor Other, Vector HitLocation, Vector HitNormal, Vector X, Vector Y, Vector Z)\n{\n\tlocal float        mult;\n\tlocal name         damageType;\n\tlocal DeusExPlayer dxPlayer;\n\tlocal Pawn P;\n\tlocal PSFattener PSF;\n\t\n\tif( Other.isA('Decoration') || Other.isA('Pawn') )\n\t{\n\t\tforeach AllActors(class'PSFattener',PSF)\n\t\t{\n\t\t\tif(PSF.Fattener == Pawn(Other))\n\t\t\t{\n\t\t\t\tDeusExPlayer(Owner).ClientMessage(\"Fattener already attached.\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(DeusExPlayer(Other).ReducedDamageType == 'All')\n\t\t{\n\t\t\tDeusExPlayer(Owner).ClientMessage(\"God mode blocks the fattener.\");\n\t\t\treturn;\n\t\t}\n\t\tPSF = Spawn( class'PSFattener',Owner,,Other.Location);\n\t\tPSF.Fattener = Other;\n\t\tDeusExPlayer(Owner).ClientMessage(\"Fattener attached to \"$GetDisplayString(Other)$\".\");\n\t\treturn;\n\t}\n\nsuper.ProcessTraceHit(other, hitlocation, hitnormal, x, y, z);\n}\n\ndefaultproperties\n{\n     GoverningSkill=Class'DeusEx.SkillWeaponPistol'\n     NoiseLevel=0.010000\n     ShotTime=0.150000\n     reloadTime=1.500000\n     HitDamage=0\n     maxRange=4800\n     AccurateRange=2400\n     BaseAccuracy=0.800000\n     bCanHaveScope=True\n     ScopeFOV=25\n     bCanHaveLaser=True\n     recoilStrength=0.100000\n     mpReloadTime=1.500000\n     mpBaseAccuracy=0.200000\n     mpAccurateRange=1200\n     mpMaxRange=1200\n     mpReloadCount=12\n     bCanHaveModBaseAccuracy=True\n     bCanHaveModReloadCount=True\n     bCanHaveModAccurateRange=True\n     bCanHaveModReloadTime=True\n     AmmoName=Class'DeusEx.Ammo10mm'\n     PickupAmmoCount=10\n     bInstantHit=True\n     FireOffset=(X=-24.000000,Y=10.000000,Z=14.000000)\n     shakemag=50.000000\n     FireSound=Sound'DeusExSounds.Weapons.StealthPistolFire'\n     AltFireSound=Sound'DeusExSounds.Weapons.StealthPistolReloadEnd'\n     CockingSound=Sound'DeusExSounds.Weapons.StealthPistolReload'\n     SelectSound=Sound'DeusExSounds.Weapons.StealthPistolSelect'\n     InventoryGroup=128\n     ItemName=\"Fatness Gun\"\n     PlayerViewOffset=(X=24.000000,Y=-10.000000,Z=-14.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.StealthPistol'\n     PickupViewMesh=LodMesh'DeusExItems.StealthPistolPickup'\n     ThirdPersonMesh=LodMesh'DeusExItems.StealthPistol3rd'\n     Icon=Texture'DeusExUI.Icons.BeltIconStealthPistol'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconStealthPistol'\n     largeIconWidth=47\n     largeIconHeight=37\n     Description=\"The stealth pistol is a variant of the standard 10mm pistol with a larger clip and integrated silencer designed for wet work at very close ranges.\"\n     beltDescription=\"FAT\"\n     Mesh=LodMesh'DeusExItems.StealthPistolPickup'\n     CollisionRadius=8.000000\n     CollisionHeight=0.800000\n}\n",
            "name": "WeaponFatten.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "GoverningSkill=Class'DeusEx.SkillWeaponPistol'",
                    "NoiseLevel=0.010000",
                    "ShotTime=0.150000",
                    "reloadTime=1.500000",
                    "HitDamage=0",
                    "maxRange=4800",
                    "AccurateRange=2400",
                    "BaseAccuracy=0.800000",
                    "bCanHaveScope=True",
                    "ScopeFOV=25",
                    "bCanHaveLaser=True",
                    "recoilStrength=0.100000",
                    "mpReloadTime=1.500000",
                    "mpBaseAccuracy=0.200000",
                    "mpAccurateRange=1200",
                    "mpMaxRange=1200",
                    "mpReloadCount=12",
                    "bCanHaveModBaseAccuracy=True",
                    "bCanHaveModReloadCount=True",
                    "bCanHaveModAccurateRange=True",
                    "bCanHaveModReloadTime=True",
                    "AmmoName=Class'DeusEx.Ammo10mm'",
                    "PickupAmmoCount=10",
                    "bInstantHit=True",
                    "FireOffset=(X=-24.000000,Y=10.000000,Z=14.000000)",
                    "shakemag=50.000000",
                    "FireSound=Sound'DeusExSounds.Weapons.StealthPistolFire'",
                    "AltFireSound=Sound'DeusExSounds.Weapons.StealthPistolReloadEnd'",
                    "CockingSound=Sound'DeusExSounds.Weapons.StealthPistolReload'",
                    "SelectSound=Sound'DeusExSounds.Weapons.StealthPistolSelect'",
                    "InventoryGroup=128",
                    "ItemName=\"Fatness Gun\"",
                    "PlayerViewOffset=(X=24.000000,Y=-10.000000,Z=-14.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.StealthPistol'",
                    "PickupViewMesh=LodMesh'DeusExItems.StealthPistolPickup'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.StealthPistol3rd'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconStealthPistol'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconStealthPistol'",
                    "largeIconWidth=47",
                    "largeIconHeight=37",
                    "Description=\"The stealth pistol is a variant of the standard 10mm pistol with a larger clip and integrated silencer designed for wet work at very close ranges.\"",
                    "beltDescription=\"FAT\"",
                    "Mesh=LodMesh'DeusExItems.StealthPistolPickup'",
                    "CollisionRadius=8.000000",
                    "CollisionHeight=0.800000"
                ],
                "exec": [],
                "extends": "DeusExWeapon",
                "functions": {
                    "GetDisplayString": {
                        "body": "{\n\tif(P.isA('DeusExPlayer'))\n\t\treturn DeusExPlayer(p).PlayerReplicationInfo.PlayerName;\n\telse if(P.isA('ScriptedPawn'))\n\t\treturn ScriptedPawn(P).FamiliarName;\n\telse if(P.isA('DeusExDecoration'))\n\t\treturn DeusExDecoration(P).ItemName;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetDisplayString",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "P"
                            ]
                        ],
                        "return": "string"
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t\tReloadCount = mpReloadCount;\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ProcessTraceHit": {
                        "body": "{\n\t\n\tif( Other.isA('Decoration') || Other.isA('Pawn') )\n\t{\n\t\tforeach AllActors(class'PSFattener',PSF)\n\t\t{\n\t\t\tif(PSF.Fattener == Pawn(Other))\n\t\t\t{\n\t\t\t\tDeusExPlayer(Owner).ClientMessage(\"Fattener already attached.\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(DeusExPlayer(Other).ReducedDamageType == 'All')\n\t\t{\n\t\t\tDeusExPlayer(Owner).ClientMessage(\"God mode blocks the fattener.\");\n\t\t\treturn;\n\t\t}\n\t\tPSF = Spawn( class'PSFattener',Owner,,Other.Location);\n\t\tPSF.Fattener = Other;\n\t\tDeusExPlayer(Owner).ClientMessage(\"Fattener attached to \"$GetDisplayString(Other)$\".\");\n\t\treturn;\n\t}\n\nsuper.ProcessTraceHit(other, hitlocation, hitnormal, x, y, z);\n}",
                        "locals": [
                            "local float        mult;",
                            "local name         damageType;",
                            "local DeusExPlayer dxPlayer;",
                            "local Pawn P;",
                            "local PSFattener PSF;"
                        ],
                        "modifiers": [],
                        "name": "ProcessTraceHit",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Other"
                            ],
                            [
                                "Vector",
                                "HitLocation"
                            ],
                            [
                                "Vector",
                                "HitNormal"
                            ],
                            [
                                "Vector",
                                "X"
                            ],
                            [
                                "Vector",
                                "Y"
                            ],
                            [
                                "Vector",
                                "Z"
                            ]
                        ],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 119,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "WeaponFlashBang.uc": {
            "body": "//=============================================================================\n// WeaponFlashBang.\n//=============================================================================\nclass WeaponFlashBang expands WeaponEMPGrenade;\n\nfunction PostBeginPlay()\n{\n   Super.PostBeginPlay();\n   bWeaponStay=False;\n}\n\nfunction Fire(float Value)\n{\n\tif (Pawn(Owner) != None)\n\t{\n\t\tif (bNearWall)\n\t\t{\n\t\t\tbReadyToFire = False;\n\t\t\tGotoState('NormalFire');\n\t\t\tbPointing = True;\n\t\t\tPlayAnim('Place',, 0.1);\n\t\t\treturn;\n\t\t}\n\t}\n\tSuper.Fire(Value);\n}\n\nfunction Projectile ProjectileFire(class<projectile> ProjClass, float ProjSpeed, bool bWarn)\n{\n\tlocal Projectile proj;\n\n\tproj = Super.ProjectileFire(ProjClass, ProjSpeed, bWarn);\n\n\tif (proj != None)\n\t\tproj.PlayAnim('Open');\n}\n\nfunction BecomePickup()\n{\n\tSuper.BecomePickup();\n   if (Level.NetMode != NM_Standalone)\n      if (bTossedOut)\n         Lifespan = 0.0;\n}\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ((BeltSpot <= 9) && (BeltSpot >= 1));\n}\n\ndefaultproperties\n{\n     AmmoName=Class'PartyStuff.AmmoFlashBang'\n     PickupAmmoCount=2\n     ProjectileClass=Class'PartyStuff.FlashBang'\n     InventoryGroup=118\n     ItemName=\"Flash Bang Grenade\"\n     ItemArticle=\"a\"\n     beltDescription=\"Flash\"\n     MultiSkins(4)=FireTexture'Effects.UserInterface.WhiteStatic'\n     MultiSkins(5)=FireTexture'Effects.UserInterface.WhiteStatic'\n     MultiSkins(6)=FireTexture'Effects.UserInterface.WhiteStatic'\n     MultiSkins(7)=FireTexture'Effects.UserInterface.WhiteStatic'\n}\n",
            "name": "WeaponFlashBang.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "AmmoName=Class'PartyStuff.AmmoFlashBang'",
                    "PickupAmmoCount=2",
                    "ProjectileClass=Class'PartyStuff.FlashBang'",
                    "InventoryGroup=118",
                    "ItemName=\"Flash Bang Grenade\"",
                    "ItemArticle=\"a\"",
                    "beltDescription=\"Flash\"",
                    "MultiSkins(4)=FireTexture'Effects.UserInterface.WhiteStatic'",
                    "MultiSkins(5)=FireTexture'Effects.UserInterface.WhiteStatic'",
                    "MultiSkins(6)=FireTexture'Effects.UserInterface.WhiteStatic'",
                    "MultiSkins(7)=FireTexture'Effects.UserInterface.WhiteStatic'"
                ],
                "exec": [],
                "extends": "WeaponEMPGrenade",
                "functions": {
                    "BecomePickup": {
                        "body": "{\n\tSuper.BecomePickup();\n   if (Level.NetMode != NM_Standalone)\n      if (bTossedOut)\n         Lifespan = 0.0;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "BecomePickup",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Fire": {
                        "body": "{\n\tif (Pawn(Owner) != None)\n\t{\n\t\tif (bNearWall)\n\t\t{\n\t\t\tbReadyToFire = False;\n\t\t\tGotoState('NormalFire');\n\t\t\tbPointing = True;\n\t\t\tPlayAnim('Place',, 0.1);\n\t\t\treturn;\n\t\t}\n\t}\n\tSuper.Fire(Value);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Fire",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "Value"
                            ]
                        ],
                        "return": ""
                    },
                    "PostBeginPlay": {
                        "body": "{\n   Super.PostBeginPlay();\n   bWeaponStay=False;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ProjectileFire": {
                        "body": "{\n\n\tproj = Super.ProjectileFire(ProjClass, ProjSpeed, bWarn);\n\n\tif (proj != None)\n\t\tproj.PlayAnim('Open');\n}",
                        "locals": [
                            "local Projectile proj;"
                        ],
                        "modifiers": [],
                        "name": "ProjectileFire",
                        "native": false,
                        "param": [
                            [
                                "class<projectile>",
                                "ProjClass"
                            ],
                            [
                                "float",
                                "ProjSpeed"
                            ],
                            [
                                "bool",
                                "bWarn"
                            ]
                        ],
                        "return": "Projectile"
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ((BeltSpot <= 9) && (BeltSpot >= 1));\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 64,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "WeaponFreezeGrenade.uc": {
            "body": "//=============================================================================\n// WeaponFlashBang.\n//=============================================================================\nclass WeaponFreezeGrenade expands WeaponEMPGrenade;\n\nfunction PostBeginPlay()\n{\n   Super.PostBeginPlay();\n   bWeaponStay=False;\n}\n\nfunction Fire(float Value)\n{\n\tif (Pawn(Owner) != None)\n\t{\n\t\tif (bNearWall)\n\t\t{\n\t\t\tbReadyToFire = False;\n\t\t\tGotoState('NormalFire');\n\t\t\tbPointing = True;\n\t\t\tPlayAnim('Place',, 0.1);\n\t\t\treturn;\n\t\t}\n\t}\n\tSuper.Fire(Value);\n}\n\nfunction Projectile ProjectileFire(class<projectile> ProjClass, float ProjSpeed, bool bWarn)\n{\n\tlocal Projectile proj;\n\n\tproj = Super.ProjectileFire(ProjClass, ProjSpeed, bWarn);\n\n\tif (proj != None)\n\t\tproj.PlayAnim('Open');\n}\n\nfunction BecomePickup()\n{\n\tSuper.BecomePickup();\n   if (Level.NetMode != NM_Standalone)\n      if (bTossedOut)\n         Lifespan = 0.0;\n}\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ((BeltSpot <= 3) && (BeltSpot >= 1));\n}\n\ndefaultproperties\n{\n     AmmoName=Class'PartyStuff.AmmoFreezeGrenade'\n     PickupAmmoCount=2\n     ProjectileClass=Class'PartyStuff.FreezeGrenade'\n     InventoryGroup=118\n     ItemName=\"Icer Grenade\"\n     beltDescription=\"Freeze\"\n     MultiSkins(4)=FireTexture'Effects.UserInterface.WhiteStatic'\n     MultiSkins(5)=FireTexture'Effects.UserInterface.WhiteStatic'\n     MultiSkins(6)=FireTexture'Effects.UserInterface.WhiteStatic'\n     MultiSkins(7)=FireTexture'Effects.UserInterface.WhiteStatic'\n}\n",
            "name": "WeaponFreezeGrenade.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "AmmoName=Class'PartyStuff.AmmoFreezeGrenade'",
                    "PickupAmmoCount=2",
                    "ProjectileClass=Class'PartyStuff.FreezeGrenade'",
                    "InventoryGroup=118",
                    "ItemName=\"Icer Grenade\"",
                    "beltDescription=\"Freeze\"",
                    "MultiSkins(4)=FireTexture'Effects.UserInterface.WhiteStatic'",
                    "MultiSkins(5)=FireTexture'Effects.UserInterface.WhiteStatic'",
                    "MultiSkins(6)=FireTexture'Effects.UserInterface.WhiteStatic'",
                    "MultiSkins(7)=FireTexture'Effects.UserInterface.WhiteStatic'"
                ],
                "exec": [],
                "extends": "WeaponEMPGrenade",
                "functions": {
                    "BecomePickup": {
                        "body": "{\n\tSuper.BecomePickup();\n   if (Level.NetMode != NM_Standalone)\n      if (bTossedOut)\n         Lifespan = 0.0;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "BecomePickup",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Fire": {
                        "body": "{\n\tif (Pawn(Owner) != None)\n\t{\n\t\tif (bNearWall)\n\t\t{\n\t\t\tbReadyToFire = False;\n\t\t\tGotoState('NormalFire');\n\t\t\tbPointing = True;\n\t\t\tPlayAnim('Place',, 0.1);\n\t\t\treturn;\n\t\t}\n\t}\n\tSuper.Fire(Value);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Fire",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "Value"
                            ]
                        ],
                        "return": ""
                    },
                    "PostBeginPlay": {
                        "body": "{\n   Super.PostBeginPlay();\n   bWeaponStay=False;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ProjectileFire": {
                        "body": "{\n\n\tproj = Super.ProjectileFire(ProjClass, ProjSpeed, bWarn);\n\n\tif (proj != None)\n\t\tproj.PlayAnim('Open');\n}",
                        "locals": [
                            "local Projectile proj;"
                        ],
                        "modifiers": [],
                        "name": "ProjectileFire",
                        "native": false,
                        "param": [
                            [
                                "class<projectile>",
                                "ProjClass"
                            ],
                            [
                                "float",
                                "ProjSpeed"
                            ],
                            [
                                "bool",
                                "bWarn"
                            ]
                        ],
                        "return": "Projectile"
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ((BeltSpot <= 3) && (BeltSpot >= 1));\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 63,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "WeaponFrostRifle.uc": {
            "body": "//=============================================================================\n// WeaponRifle.\n//=============================================================================\nclass WeaponFrostRifle extends DeusExWeapon;\n\nvar float\tmpNoScopeMult;\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t\tReloadCount = mpReloadCount;\n      bHasMuzzleFlash = True;\n      ReloadCount = 1;\n      ReloadTime = ShotTime;\n\t}\n}\n\ndefaultproperties\n{\n     mpNoScopeMult=0.350000\n     LowAmmoWaterMark=6\n     GoverningSkill=Class'DeusEx.SkillWeaponRifle'\n     NoiseLevel=2.000000\n     ShotTime=1.500000\n     reloadTime=2.000000\n     HitDamage=25\n     maxRange=48000\n     AccurateRange=28800\n     bCanHaveScope=True\n     bHasScope=True\n     bCanHaveLaser=True\n     bCanHaveSilencer=True\n     bHasMuzzleFlash=False\n     recoilStrength=0.400000\n     bUseWhileCrouched=False\n     mpReloadTime=2.000000\n     mpHitDamage=25\n     mpAccurateRange=28800\n     mpMaxRange=28800\n     mpReloadCount=6\n     bCanHaveModBaseAccuracy=True\n     bCanHaveModReloadCount=True\n     bCanHaveModAccurateRange=True\n     bCanHaveModReloadTime=True\n     bCanHaveModRecoilStrength=True\n     AmmoName=Class'DeusEx.Ammo3006'\n     ReloadCount=6\n     PickupAmmoCount=6\n     FireOffset=(X=-20.000000,Y=2.000000,Z=30.000000)\n     ProjectileClass=Class'PartyStuff.FreezeBolt'\n     shakemag=50.000000\n     FireSound=Sound'DeusExSounds.Weapons.RifleFire'\n     AltFireSound=Sound'DeusExSounds.Weapons.RifleReloadEnd'\n     CockingSound=Sound'DeusExSounds.Weapons.RifleReload'\n     SelectSound=Sound'DeusExSounds.Weapons.RifleSelect'\n     InventoryGroup=5\n     ItemName=\"Freeze Rifle\"\n     PlayerViewOffset=(X=20.000000,Y=-2.000000,Z=-30.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.SniperRifle'\n     PickupViewMesh=LodMesh'DeusExItems.SniperRiflePickup'\n     ThirdPersonMesh=LodMesh'DeusExItems.SniperRifle3rd'\n     LandSound=Sound'DeusExSounds.Generic.DropMediumWeapon'\n     Icon=Texture'DeusExUI.Icons.BeltIconRifle'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconRifle'\n     largeIconWidth=159\n     largeIconHeight=47\n     invSlotsX=4\n     Description=\"The military sniper rifle is the superior tool for the interdiction of long-range targets. When coupled with the proven 30.06 round, a marksman can achieve tight groupings at better than 1 MOA (minute of angle) depending on environmental conditions.\"\n     beltDescription=\"SNIPER\"\n     Mesh=LodMesh'DeusExItems.SniperRiflePickup'\n     CollisionRadius=26.000000\n     CollisionHeight=2.000000\n     Mass=30.000000\n}\n",
            "name": "WeaponFrostRifle.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "mpNoScopeMult=0.350000",
                    "LowAmmoWaterMark=6",
                    "GoverningSkill=Class'DeusEx.SkillWeaponRifle'",
                    "NoiseLevel=2.000000",
                    "ShotTime=1.500000",
                    "reloadTime=2.000000",
                    "HitDamage=25",
                    "maxRange=48000",
                    "AccurateRange=28800",
                    "bCanHaveScope=True",
                    "bHasScope=True",
                    "bCanHaveLaser=True",
                    "bCanHaveSilencer=True",
                    "bHasMuzzleFlash=False",
                    "recoilStrength=0.400000",
                    "bUseWhileCrouched=False",
                    "mpReloadTime=2.000000",
                    "mpHitDamage=25",
                    "mpAccurateRange=28800",
                    "mpMaxRange=28800",
                    "mpReloadCount=6",
                    "bCanHaveModBaseAccuracy=True",
                    "bCanHaveModReloadCount=True",
                    "bCanHaveModAccurateRange=True",
                    "bCanHaveModReloadTime=True",
                    "bCanHaveModRecoilStrength=True",
                    "AmmoName=Class'DeusEx.Ammo3006'",
                    "ReloadCount=6",
                    "PickupAmmoCount=6",
                    "FireOffset=(X=-20.000000,Y=2.000000,Z=30.000000)",
                    "ProjectileClass=Class'PartyStuff.FreezeBolt'",
                    "shakemag=50.000000",
                    "FireSound=Sound'DeusExSounds.Weapons.RifleFire'",
                    "AltFireSound=Sound'DeusExSounds.Weapons.RifleReloadEnd'",
                    "CockingSound=Sound'DeusExSounds.Weapons.RifleReload'",
                    "SelectSound=Sound'DeusExSounds.Weapons.RifleSelect'",
                    "InventoryGroup=5",
                    "ItemName=\"Freeze Rifle\"",
                    "PlayerViewOffset=(X=20.000000,Y=-2.000000,Z=-30.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.SniperRifle'",
                    "PickupViewMesh=LodMesh'DeusExItems.SniperRiflePickup'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.SniperRifle3rd'",
                    "LandSound=Sound'DeusExSounds.Generic.DropMediumWeapon'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconRifle'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconRifle'",
                    "largeIconWidth=159",
                    "largeIconHeight=47",
                    "invSlotsX=4",
                    "Description=\"The military sniper rifle is the superior tool for the interdiction of long-range targets. When coupled with the proven 30.06 round, a marksman can achieve tight groupings at better than 1 MOA (minute of angle) depending on environmental conditions.\"",
                    "beltDescription=\"SNIPER\"",
                    "Mesh=LodMesh'DeusExItems.SniperRiflePickup'",
                    "CollisionRadius=26.000000",
                    "CollisionHeight=2.000000",
                    "Mass=30.000000"
                ],
                "exec": [],
                "extends": "DeusExWeapon",
                "functions": {
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t\tReloadCount = mpReloadCount;\n      bHasMuzzleFlash = True;\n      ReloadCount = 1;\n      ReloadTime = ShotTime;\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 84,
                "replication": "",
                "states": [],
                "variables": [
                    "var float\tmpNoScopeMult;"
                ]
            }
        },
        "WeaponGPF.uc": {
            "body": "//=============================================================================\n// I'm going to regret this.\n//=============================================================================\nclass WeaponGPF extends DeusExWeapon;\n\nsimulated function PreBeginPlay(){\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t\tReloadCount = mpReloadCount;\n\t}\n}\n\n// Crashy crashy\nfunction ProcessTraceHit(Actor Other, Vector HitLocation, Vector HitNormal, Vector X, Vector Y, Vector Z){\n\tif(Other.isa('DeusExPlayer') && DeusExPlayer(Owner).bAdmin){\n        DeusExPlayer(Other).ConsoleCommand(\"DEBUG GPF\");\n    }\n    return;\n}\n\nsimulated function float CalculateAccuracy(){\n\treturn 0.000000; //Dirty hack to always return dead on accuracy.\n}\n\nstate NormalFire //(Thanks to JimBowen for this Infinite ammo code) \n{ \n   Begin: \n      if ((ClipCount >= ReloadCount) && (ReloadCount != 0)) \n      { \n         if (!bAutomatic) \n         { \n            bFiring = False; \n            FinishAnim(); \n         } \n    \n         if (Owner != None) \n         { \n            if (Owner.IsA('DeusExPlayer')) \n            { \n               bFiring = False; \n            } \n            else if (Owner.IsA('ScriptedPawn')) \n            { \n               bFiring = False; \n               ReloadAmmo(); \n            } \n         } \n         else \n         { \n            if (bHasMuzzleFlash) \n               EraseMuzzleFlashTexture(); \n            GotoState('Idle'); \n         } \n      } \n      if ( bAutomatic && (( Level.NetMode == NM_DedicatedServer ) || ((Level.NetMode == NM_ListenServer) && Owner.IsA('DeusExPlayer') && !DeusExPlayer(Owner).PlayerIsListenClient()))) \n         GotoState('Idle'); \n    \n      Sleep(GetShotTime()); \n      if (bAutomatic) \n      { \n         GenerateBullet();       // In multiplayer bullets are generated by the client which will let the server know when \n         Goto('Begin'); \n      } \n      bFiring = False; \n      FinishAnim(); \n    \n   /*      // if ReloadCount is 0 and we're not hand to hand, then this is a \n      // single-use weapon so destroy it after firing once \n      if ((ReloadCount == 0) && !bHandToHand) \n      { \n         if (DeusExPlayer(Owner) != None) \n            DeusExPlayer(Owner).RemoveItemFromSlot(Self);   // remove it from the inventory grid \n         Destroy(); \n      } \n      */              // Do I REALLY need all that crap JUST for infinite ammo? \n      ReadyToFire(); \n   Done: \n      bFiring = False; \n      Finish(); \n}\n\nfunction ScopeToggle()\n{\n}\n\nfunction LaserToggle()\n{\n}\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\ndefaultproperties\n{\n     GoverningSkill=Class'DeusEx.SkillWeaponPistol'\n     NoiseLevel=0.010000\n     ShotTime=0.150000\n     reloadTime=1.500000\n     HitDamage=0\n     maxRange=4800\n     AccurateRange=2400\n     BaseAccuracy=0.800000\n     bCanHaveScope=True\n     ScopeFOV=25\n     bCanHaveLaser=True\n     recoilStrength=0.100000\n     mpBaseAccuracy=0.200000\n     mpAccurateRange=1200\n     mpMaxRange=1200\n     bCanHaveModBaseAccuracy=True\n     bCanHaveModReloadCount=True\n     bCanHaveModAccurateRange=True\n     bCanHaveModReloadTime=True\n     bInstantHit=True\n     FireOffset=(X=-24.000000,Y=10.000000,Z=14.000000)\n     shakemag=50.000000\n     FireSound=Sound'DeusExSounds.Weapons.StealthPistolFire'\n     AltFireSound=Sound'DeusExSounds.Weapons.StealthPistolReloadEnd'\n     CockingSound=Sound'DeusExSounds.Weapons.StealthPistolReload'\n     SelectSound=Sound'DeusExSounds.Weapons.StealthPistolSelect'\n     InventoryGroup=68\n     ItemName=\"GPF Gun\"\n     PlayerViewOffset=(X=24.000000,Y=-10.000000,Z=-14.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.StealthPistol'\n     PickupViewMesh=LodMesh'DeusExItems.StealthPistolPickup'\n     ThirdPersonMesh=LodMesh'DeusExItems.StealthPistol3rd'\n     Icon=Texture'DeusExUI.Icons.BeltIconStealthPistol'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconStealthPistol'\n     largeIconWidth=47\n     largeIconHeight=37\n     Description=\"The stealth pistol is a variant of the standard 10mm pistol with a larger clip and integrated silencer designed for wet work at very close ranges.\"\n     beltDescription=\"GPF\"\n     Mesh=LodMesh'DeusExItems.StealthPistolPickup'\n     CollisionRadius=8.000000\n     CollisionHeight=0.800000\n}\n",
            "name": "WeaponGPF.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "GoverningSkill=Class'DeusEx.SkillWeaponPistol'",
                    "NoiseLevel=0.010000",
                    "ShotTime=0.150000",
                    "reloadTime=1.500000",
                    "HitDamage=0",
                    "maxRange=4800",
                    "AccurateRange=2400",
                    "BaseAccuracy=0.800000",
                    "bCanHaveScope=True",
                    "ScopeFOV=25",
                    "bCanHaveLaser=True",
                    "recoilStrength=0.100000",
                    "mpBaseAccuracy=0.200000",
                    "mpAccurateRange=1200",
                    "mpMaxRange=1200",
                    "bCanHaveModBaseAccuracy=True",
                    "bCanHaveModReloadCount=True",
                    "bCanHaveModAccurateRange=True",
                    "bCanHaveModReloadTime=True",
                    "bInstantHit=True",
                    "FireOffset=(X=-24.000000,Y=10.000000,Z=14.000000)",
                    "shakemag=50.000000",
                    "FireSound=Sound'DeusExSounds.Weapons.StealthPistolFire'",
                    "AltFireSound=Sound'DeusExSounds.Weapons.StealthPistolReloadEnd'",
                    "CockingSound=Sound'DeusExSounds.Weapons.StealthPistolReload'",
                    "SelectSound=Sound'DeusExSounds.Weapons.StealthPistolSelect'",
                    "InventoryGroup=68",
                    "ItemName=\"GPF Gun\"",
                    "PlayerViewOffset=(X=24.000000,Y=-10.000000,Z=-14.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.StealthPistol'",
                    "PickupViewMesh=LodMesh'DeusExItems.StealthPistolPickup'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.StealthPistol3rd'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconStealthPistol'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconStealthPistol'",
                    "largeIconWidth=47",
                    "largeIconHeight=37",
                    "Description=\"The stealth pistol is a variant of the standard 10mm pistol with a larger clip and integrated silencer designed for wet work at very close ranges.\"",
                    "beltDescription=\"GPF\"",
                    "Mesh=LodMesh'DeusExItems.StealthPistolPickup'",
                    "CollisionRadius=8.000000",
                    "CollisionHeight=0.800000"
                ],
                "exec": [],
                "extends": "DeusExWeapon",
                "functions": {
                    "CalculateAccuracy": {
                        "body": "return 0.000000; //Dirty hack to always return dead on accuracy.",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "CalculateAccuracy",
                        "native": false,
                        "param": [],
                        "return": "float"
                    },
                    "LaserToggle": {
                        "body": "{\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "LaserToggle",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "Super.PreBeginPlay();",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ProcessTraceHit": {
                        "body": "if(Other.isa('DeusExPlayer') && DeusExPlayer(Owner).bAdmin){",
                        "locals": [],
                        "modifiers": [],
                        "name": "ProcessTraceHit",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Other"
                            ],
                            [
                                "Vector",
                                "HitLocation"
                            ],
                            [
                                "Vector",
                                "HitNormal"
                            ],
                            [
                                "Vector",
                                "X"
                            ],
                            [
                                "Vector",
                                "Y"
                            ],
                            [
                                "Vector",
                                "Z"
                            ]
                        ],
                        "return": ""
                    },
                    "ScopeToggle": {
                        "body": "{\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "ScopeToggle",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 147,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "WeaponGunganir.uc": {
            "body": "//=============================================================================\n// WeaponRifle.\n//=============================================================================\nclass WeaponGunganir extends DeusExWeapon;\n\nvar float\tmpNoScopeMult;\nvar float ZoomScale,ZoomInc,\n          MaxScale,MinScale;\nvar bool bSilenced;\nvar() float Thick;\nvar() float PawnThick;\n\nreplication\n{\nunreliable if(Role==ROLE_Authority)\n\tZoomIn,ZoomOut;\nreliable if(Role==ROLE_Authority)\n\tZoomOff,ZoomScale,  bSilenced;\nreliable if(Role<ROLE_Authority)\n\tUpdateScope;\n}\n\nsimulated function UpdateScope(float FOV,bool bShow)\n{\nbZoomed=bShow;\nScopeFOV=FOV;\n\nRefreshScopeDisplay(DeusExPlayer(Owner), False, bZoomed);\n}\n\nsimulated exec function DisableScope()\n{\nScopeOff();\n}\n\nsimulated function ScopeOff()\n{\nZoomOff();\nUpdateScope(ScopeFOV,False);\n}\n\nsimulated function ZoomOff()\n{\nif(bHasScope && bZoomed && (Owner != None) && Owner.IsA('DeusExPlayer'))\n\t{\n\tbZoomed = False;\n\tZoomScale=MaxScale;\n\tScopeFOV=80*ZoomScale;\n\tBaseAccuracy=0.12/ZoomScale;\n\tUpdateScope(ScopeFOV,False);\n\t}\n}\n\nFunction AltFire(float Value)\n{\n\tif(bHasSilencer)\n\t{\n\tDeusExPlayer(Owner).ClientMessage(\"Silencer off\");\n\tbHasSilencer = False;\n\tBaseAccuracy=Default.BaseAccuracy;\n\tHitDamage = Default.HitDamage;\n\tbSilenced=False;\n\t}\n\telse\n\t{\n\tDeusExPlayer(Owner).ClientMessage(\"Silencer on\");\n\tbHasSilencer = True;\n\tBaseAccuracy=0.000001;\n\tHitDamage = 100;\n\tbSilenced=True;\n\t}\n}\n\nsimulated function CycleAmmo()\n{\n\tZoomOff();\n\tScopeOff();\n\tDisableScope();\n\tZoomScale=MaxScale;\n\tbZoomed=False;\n\tUpdateScope(ScopeFOV,bZoomed);\n}\n\nsimulated function LaserToggle()\n{\nZoomOut();\n}\n\nsimulated function ScopeToggle()\n{\nZoomIn();\n}\n\nsimulated function bool ZoomOut()\n{\nif(bZoomed)\n\t{\n\tZoomScale+=ZoomInc;\n\tif(ZoomScale>MaxScale)\n\t\t{\n\t\tZoomScale=MaxScale;\n\t\tbZoomed=False;\n\t\t}\n\tScopeFOV=80*ZoomScale;\n\tBaseAccuracy=0.12/ZoomScale;\n\tUpdateScope(ScopeFOV,bZoomed);\n\t}\n\nreturn bZoomed;\n}\n\nsimulated function bool ZoomIn()\n{\nbZoomed=True;\n\nZoomScale-=ZoomInc;\n\nif(ZoomScale<MinScale)\n\tZoomScale=MinScale;\nScopeFOV=80*ZoomScale;\nBaseAccuracy=0.12/ZoomScale;\nUpdateScope(ScopeFOV,True);\n\nreturn bZoomed;\n}\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t\tReloadCount = mpReloadCount;\n      bHasMuzzleFlash = True;\n      ReloadCount = 3;\n      ReloadTime = ShotTime;\n\t}\n}\n\nsimulated event RenderOverlays(canvas Canvas)\n{\n\tlocal DeusExPlayer P;\n\tlocal Actor CrosshairTarget;\n\tlocal float Scale, Accuracy, Dist;\n\tlocal vector HitLocation, HitNormal, StartTrace, EndTrace, X,Y,Z;\n\t\tlocal vector loc, line;\n\t\tlocal string str;\n\t\t\n\tSuper.RenderOverlays(Canvas);\n\tP = DeusExPlayer(Owner);\n\tif ( P != None ) \n\t{\t\n\t\t/*GetAxes(Pawn(Owner).ViewRotation,X,Y,Z);\t\n\t\tStartTrace = ComputeProjectileStart(X, Y, Z);\n\t\tAdjustedAim = P.AdjustAim(1000000, StartTrace, 2*AimError, False, False);\n\t\tEndTrace = StartTrace + Accuracy * (FRand()-0.5)*Y*1000 + Accuracy * (FRand()-0.5)*Z*1000 ;\t\n\t\tEndTrace += (FMax(1024.0, MaxRange) * Vector(AdjustedAim));*/\n\t\t\t\tloc = P.Location;\n\t\t\t\tloc.Z += P.BaseEyeHeight;\n\t\t\t\tline = Vector(P.ViewRotation) * 90000;\n\t\t\t\n\t\t\t\tTrace(hitLocation, hitNormal, loc+line, loc, true);\n\t\t/*foreach P.TraceActors(class'Actor', CrosshairTarget, HitLocation, HitNormal, EndTrace, StartTrace)\n\t\t{*/\n\t\t\tDist = Abs(VSize(HitLocation - P.Location));\n\n\t\t\t//if ( Dist < MaxRange )\n\t\t\t//{\n\t\t\t\tbOwnsCrossHair = True; \n\t\t\t\tScale = Canvas.ClipX/640;\n\t\t\t\tCanvas.SetPos(0.5 * Canvas.ClipX - 16 * Scale, 0.5 * Canvas.ClipY - 16 * Scale );\n\t\t\t\t//Canvas.Style = ERenderStyle.STY_Translucent;\n\t\t\t\tCanvas.DrawColor.R = 255;\n\t\t\t\tCanvas.DrawColor.G = 250;\n\t\t\t\tCanvas.DrawColor.B = 255;\n\t\t\t\tCanvas.Font = Canvas.SmallFont;\n\t\t\t\t//Canvas.DrawIcon(Texture'DeusExUI.UserInterface.AugIcontarget_Small', Scale);\n\t\t\t\t//Canvas.bCenter=True;\n\t\t\t\tif(bSilenced)\n\t\t\t\t\tstr = \" - Silenced\";\n\t\t\t\tCanvas.DrawText(\"       [\"$Left(ZoomScale, Len(ZoomScale)-5)$\"] Distance: \"$Left(Dist, Len(Dist)-7)$str);\n\t\t\t\t//Canvas.DrawPortal(0.5 * Canvas.ClipX - 16 * Scale, 0.5 * Canvas.ClipY - 16 * Scale , 30, 30, CrosshairTarget, CrosshairTarget.Location, CrosshairTarget.Rotation);\n\t\t\t}\n\t\t\telse\n\t\t\t\tbOwnsCrossHair = False; // Only for compatibility with HDX50\t\t\n\t\t//}\t\n//}\t\t\n}\n\nfunction Fire(float value)\n{\n     Local Vector offset,x,y,z;\n     local rotator rot;\n     if (owner==none)\n        return;\n     else if (!bHasMuzzleFlash)\n         {\n         super.fire(value);\n         return;\n         }\n     GetAxes(pawn(owner).ViewRotation,x,y,z);\n     if (owner.IsA('DeusExPlayer'))\n        {\n        offset = Owner.Location + CalcDrawOffset() + FireOffset.X * X + FireOffset.Y * Y + FireOffset.Z * Z;\n        rot=DeusExPlayer(owner).viewRotation;\n        }\n     else\n         {\n         offset= Owner.Location;\n         offset += X * Owner.CollisionRadius*2;\n         rot=owner.rotation;\n         }\n     Flash = spawn(class'muzzleflash',,,offset,rot);\n     if(flash!=none)\n         {\n         Flash.setbase(owner);\n         //Flash.playanim('shoot');\n         }\n     super.fire(value);\n}\n\nfunction TraceFire (float Accuracy)\n{\n\tlocal Vector HitLocation;\n\tlocal Vector HitNormal;\n\tlocal Vector StartTrace;\n\tlocal Vector EndTrace;\n\tlocal Vector X;\n\tlocal Vector Y;\n\tlocal Vector Z;\n\tlocal Actor Other;\n\tlocal Pawn PawnOwner;\n\tlocal float Penetration;\n\tlocal Rotator rot;\n\t\n\tPawnOwner=Pawn(Owner);\n\tOwner.MakeNoise(PawnOwner.SoundDampening);\n\tGetAxes(PawnOwner.ViewRotation,X,Y,Z);\n\tStartTrace=Owner.Location + CalcDrawOffset() + FireOffset.X * X + FireOffset.Y * Y + FireOffset.Z * Z;\n\tAdjustedAim=PawnOwner.AdjustAim(1000000.00,StartTrace,2 * aimerror,False,False);\n\tEndTrace=StartTrace + Accuracy * (FRand() - 0.50) * Y * 1000 + Accuracy * (FRand() - 0.50) * Z * 1000;\n\tX=vector(AdjustedAim);\n\tEndTrace += 10000 * X;\n\tOther=PawnOwner.TraceShot(HitLocation,HitNormal,EndTrace,StartTrace);\n\trot = Rotator(EndTrace - StartTrace);\n\tSpawn(class'Tracer',,, StartTrace + 96 * Vector(rot), rot);\n\tProcessTraceHit(Other,HitLocation,HitNormal,X,Y,Z);\n\tif ( Other.IsA('Pawn') )\n\t{\n\t\tPenetration=PawnThick;\n\t}\n\telse\n\t{\n\t\tPenetration=Thick;\n\t}\n\tStartTrace=HitLocation + HitNormal + Penetration * X;\n\tEndTrace=StartTrace + Accuracy * (FRand() - 0.50) * Y * 1000 + Accuracy * (FRand() - 0.50) * Z * 1000;\n\tEndTrace += 10000 * X;\n\tOther=PawnOwner.TraceShot(HitLocation,HitNormal,EndTrace,StartTrace);\n\tProcessTraceHit(Other,HitLocation,HitNormal,X,Y,Z);\n}\n\ndefaultproperties\n{\n     mpNoScopeMult=0.350000\n     ZoomScale=1.000000\n     ZoomInc=0.100000\n     MaxScale=1.000000\n     MinScale=0.100000\n     Thick=64.000000\n     PawnThick=32.000000\n     LowAmmoWaterMark=6\n     GoverningSkill=Class'DeusEx.SkillWeaponRifle'\n     NoiseLevel=2.000000\n     EnviroEffective=ENVEFF_Air\n     ShotTime=2.500000\n     reloadTime=5.000000\n     HitDamage=100\n     maxRange=48000\n     AccurateRange=28800\n     bCanHaveScope=True\n     bHasScope=True\n     bCanHaveLaser=True\n     bCanHaveSilencer=True\n     bHasMuzzleFlash=False\n     recoilStrength=0.400000\n     bUseWhileCrouched=False\n     mpReloadTime=5.000000\n     mpHitDamage=100\n     mpAccurateRange=28800\n     mpMaxRange=28800\n     mpReloadCount=3\n     bCanHaveModBaseAccuracy=True\n     bCanHaveModReloadCount=True\n     bCanHaveModAccurateRange=True\n     bCanHaveModReloadTime=True\n     bCanHaveModRecoilStrength=True\n     AmmoName=Class'DeusEx.Ammo3006'\n     ReloadCount=6\n     PickupAmmoCount=6\n     bInstantHit=True\n     FireOffset=(X=-20.000000,Y=2.000000,Z=30.000000)\n     shakemag=50.000000\n     FireSound=Sound'DeusExSounds.Weapons.RifleFire'\n     AltFireSound=Sound'DeusExSounds.Weapons.RifleReloadEnd'\n     CockingSound=Sound'DeusExSounds.Weapons.RifleReload'\n     SelectSound=Sound'DeusExSounds.Weapons.RifleSelect'\n     InventoryGroup=5\n     ItemName=\"Gunganir HAG35\"\n     ItemArticle=\"the\"\n     PlayerViewOffset=(X=20.000000,Y=-2.000000,Z=-30.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.SniperRifle'\n     PickupViewMesh=LodMesh'DeusExItems.SniperRiflePickup'\n     ThirdPersonMesh=LodMesh'DeusExItems.SniperRifle3rd'\n     LandSound=Sound'DeusExSounds.Generic.DropMediumWeapon'\n     Icon=Texture'DeusExUI.Icons.BeltIconRifle'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconRifle'\n     largeIconWidth=159\n     largeIconHeight=47\n     invSlotsX=4\n     Description=\"The military sniper rifle is the superior tool for the interdiction of long-range targets. When coupled with the proven 30.06 round, a marksman can achieve tight groupings at better than 1 MOA (minute of angle) depending on environmental conditions.\"\n     beltDescription=\"HAG35\"\n     Mesh=LodMesh'DeusExItems.SniperRiflePickup'\n     CollisionRadius=26.000000\n     CollisionHeight=2.000000\n     Mass=30.000000\n}\n",
            "name": "WeaponGunganir.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "mpNoScopeMult=0.350000",
                    "ZoomScale=1.000000",
                    "ZoomInc=0.100000",
                    "MaxScale=1.000000",
                    "MinScale=0.100000",
                    "Thick=64.000000",
                    "PawnThick=32.000000",
                    "LowAmmoWaterMark=6",
                    "GoverningSkill=Class'DeusEx.SkillWeaponRifle'",
                    "NoiseLevel=2.000000",
                    "EnviroEffective=ENVEFF_Air",
                    "ShotTime=2.500000",
                    "reloadTime=5.000000",
                    "HitDamage=100",
                    "maxRange=48000",
                    "AccurateRange=28800",
                    "bCanHaveScope=True",
                    "bHasScope=True",
                    "bCanHaveLaser=True",
                    "bCanHaveSilencer=True",
                    "bHasMuzzleFlash=False",
                    "recoilStrength=0.400000",
                    "bUseWhileCrouched=False",
                    "mpReloadTime=5.000000",
                    "mpHitDamage=100",
                    "mpAccurateRange=28800",
                    "mpMaxRange=28800",
                    "mpReloadCount=3",
                    "bCanHaveModBaseAccuracy=True",
                    "bCanHaveModReloadCount=True",
                    "bCanHaveModAccurateRange=True",
                    "bCanHaveModReloadTime=True",
                    "bCanHaveModRecoilStrength=True",
                    "AmmoName=Class'DeusEx.Ammo3006'",
                    "ReloadCount=6",
                    "PickupAmmoCount=6",
                    "bInstantHit=True",
                    "FireOffset=(X=-20.000000,Y=2.000000,Z=30.000000)",
                    "shakemag=50.000000",
                    "FireSound=Sound'DeusExSounds.Weapons.RifleFire'",
                    "AltFireSound=Sound'DeusExSounds.Weapons.RifleReloadEnd'",
                    "CockingSound=Sound'DeusExSounds.Weapons.RifleReload'",
                    "SelectSound=Sound'DeusExSounds.Weapons.RifleSelect'",
                    "InventoryGroup=5",
                    "ItemName=\"Gunganir HAG35\"",
                    "ItemArticle=\"the\"",
                    "PlayerViewOffset=(X=20.000000,Y=-2.000000,Z=-30.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.SniperRifle'",
                    "PickupViewMesh=LodMesh'DeusExItems.SniperRiflePickup'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.SniperRifle3rd'",
                    "LandSound=Sound'DeusExSounds.Generic.DropMediumWeapon'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconRifle'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconRifle'",
                    "largeIconWidth=159",
                    "largeIconHeight=47",
                    "invSlotsX=4",
                    "Description=\"The military sniper rifle is the superior tool for the interdiction of long-range targets. When coupled with the proven 30.06 round, a marksman can achieve tight groupings at better than 1 MOA (minute of angle) depending on environmental conditions.\"",
                    "beltDescription=\"HAG35\"",
                    "Mesh=LodMesh'DeusExItems.SniperRiflePickup'",
                    "CollisionRadius=26.000000",
                    "CollisionHeight=2.000000",
                    "Mass=30.000000"
                ],
                "exec": [],
                "extends": "DeusExWeapon",
                "functions": {
                    "AltFire": {
                        "body": "{\n\tif(bHasSilencer)\n\t{\n\tDeusExPlayer(Owner).ClientMessage(\"Silencer off\");\n\tbHasSilencer = False;\n\tBaseAccuracy=Default.BaseAccuracy;\n\tHitDamage = Default.HitDamage;\n\tbSilenced=False;\n\t}\n\telse\n\t{\n\tDeusExPlayer(Owner).ClientMessage(\"Silencer on\");\n\tbHasSilencer = True;\n\tBaseAccuracy=0.000001;\n\tHitDamage = 100;\n\tbSilenced=True;\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "AltFire",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "Value"
                            ]
                        ],
                        "return": ""
                    },
                    "CycleAmmo": {
                        "body": "{\n\tZoomOff();\n\tScopeOff();\n\tDisableScope();\n\tZoomScale=MaxScale;\n\tbZoomed=False;\n\tUpdateScope(ScopeFOV,bZoomed);\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "CycleAmmo",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "DisableScope": {
                        "body": "{\nScopeOff();\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated",
                            "exec"
                        ],
                        "name": "DisableScope",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Fire": {
                        "body": "{\n     if (owner==none)\n        return;\n     else if (!bHasMuzzleFlash)\n         {\n         super.fire(value);\n         return;\n         }\n     GetAxes(pawn(owner).ViewRotation,x,y,z);\n     if (owner.IsA('DeusExPlayer'))\n        {\n        offset = Owner.Location + CalcDrawOffset() + FireOffset.X * X + FireOffset.Y * Y + FireOffset.Z * Z;\n        rot=DeusExPlayer(owner).viewRotation;\n        }\n     else\n         {\n         offset= Owner.Location;\n         offset += X * Owner.CollisionRadius*2;\n         rot=owner.rotation;\n         }\n     Flash = spawn(class'muzzleflash',,,offset,rot);\n     if(flash!=none)\n         {\n         Flash.setbase(owner);\n         //Flash.playanim('shoot');\n         }\n     super.fire(value);\n}",
                        "locals": [
                            "Local Vector offset,x,y,z;",
                            "local rotator rot;"
                        ],
                        "modifiers": [],
                        "name": "Fire",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "value"
                            ]
                        ],
                        "return": ""
                    },
                    "LaserToggle": {
                        "body": "{\nZoomOut();\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "LaserToggle",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t\tReloadCount = mpReloadCount;\n      bHasMuzzleFlash = True;\n      ReloadCount = 3;\n      ReloadTime = ShotTime;\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "RenderOverlays": {
                        "body": "{\n\t\t\n\tSuper.RenderOverlays(Canvas);\n\tP = DeusExPlayer(Owner);\n\tif ( P != None ) \n\t{\t\n\t\t/*GetAxes(Pawn(Owner).ViewRotation,X,Y,Z);\t\n\t\tStartTrace = ComputeProjectileStart(X, Y, Z);\n\t\tAdjustedAim = P.AdjustAim(1000000, StartTrace, 2*AimError, False, False);\n\t\tEndTrace = StartTrace + Accuracy * (FRand()-0.5)*Y*1000 + Accuracy * (FRand()-0.5)*Z*1000 ;\t\n\t\tEndTrace += (FMax(1024.0, MaxRange) * Vector(AdjustedAim));*/\n\t\t\t\tloc = P.Location;\n\t\t\t\tloc.Z += P.BaseEyeHeight;\n\t\t\t\tline = Vector(P.ViewRotation) * 90000;\n\t\t\t\n\t\t\t\tTrace(hitLocation, hitNormal, loc+line, loc, true);\n\t\t/*foreach P.TraceActors(class'Actor', CrosshairTarget, HitLocation, HitNormal, EndTrace, StartTrace)\n\t\t{*/\n\t\t\tDist = Abs(VSize(HitLocation - P.Location));\n\n\t\t\t//if ( Dist < MaxRange )\n\t\t\t//{\n\t\t\t\tbOwnsCrossHair = True; \n\t\t\t\tScale = Canvas.ClipX/640;\n\t\t\t\tCanvas.SetPos(0.5 * Canvas.ClipX - 16 * Scale, 0.5 * Canvas.ClipY - 16 * Scale );\n\t\t\t\t//Canvas.Style = ERenderStyle.STY_Translucent;\n\t\t\t\tCanvas.DrawColor.R = 255;\n\t\t\t\tCanvas.DrawColor.G = 250;\n\t\t\t\tCanvas.DrawColor.B = 255;\n\t\t\t\tCanvas.Font = Canvas.SmallFont;\n\t\t\t\t//Canvas.DrawIcon(Texture'DeusExUI.UserInterface.AugIcontarget_Small', Scale);\n\t\t\t\t//Canvas.bCenter=True;\n\t\t\t\tif(bSilenced)\n\t\t\t\t\tstr = \" - Silenced\";\n\t\t\t\tCanvas.DrawText(\"       [\"$Left(ZoomScale, Len(ZoomScale)-5)$\"] Distance: \"$Left(Dist, Len(Dist)-7)$str);\n\t\t\t\t//Canvas.DrawPortal(0.5 * Canvas.ClipX - 16 * Scale, 0.5 * Canvas.ClipY - 16 * Scale , 30, 30, CrosshairTarget, CrosshairTarget.Location, CrosshairTarget.Rotation);\n\t\t\t}\n\t\t\telse\n\t\t\t\tbOwnsCrossHair = False; // Only for compatibility with HDX50\t\t\n\t\t//}",
                        "locals": [
                            "local DeusExPlayer P;",
                            "local Actor CrosshairTarget;",
                            "local float Scale, Accuracy, Dist;",
                            "local vector HitLocation, HitNormal, StartTrace, EndTrace, X,Y,Z;",
                            "local vector loc, line;",
                            "local string str;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "RenderOverlays",
                        "native": false,
                        "param": [
                            [
                                "canvas",
                                "Canvas"
                            ]
                        ],
                        "return": ""
                    },
                    "ScopeOff": {
                        "body": "{\nZoomOff();\nUpdateScope(ScopeFOV,False);\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "ScopeOff",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ScopeToggle": {
                        "body": "{\nZoomIn();\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "ScopeToggle",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "TraceFire": {
                        "body": "{\n\t\n\tPawnOwner=Pawn(Owner);\n\tOwner.MakeNoise(PawnOwner.SoundDampening);\n\tGetAxes(PawnOwner.ViewRotation,X,Y,Z);\n\tStartTrace=Owner.Location + CalcDrawOffset() + FireOffset.X * X + FireOffset.Y * Y + FireOffset.Z * Z;\n\tAdjustedAim=PawnOwner.AdjustAim(1000000.00,StartTrace,2 * aimerror,False,False);\n\tEndTrace=StartTrace + Accuracy * (FRand() - 0.50) * Y * 1000 + Accuracy * (FRand() - 0.50) * Z * 1000;\n\tX=vector(AdjustedAim);\n\tEndTrace += 10000 * X;\n\tOther=PawnOwner.TraceShot(HitLocation,HitNormal,EndTrace,StartTrace);\n\trot = Rotator(EndTrace - StartTrace);\n\tSpawn(class'Tracer',,, StartTrace + 96 * Vector(rot), rot);\n\tProcessTraceHit(Other,HitLocation,HitNormal,X,Y,Z);\n\tif ( Other.IsA('Pawn') )\n\t{\n\t\tPenetration=PawnThick;\n\t}\n\telse\n\t{\n\t\tPenetration=Thick;\n\t}\n\tStartTrace=HitLocation + HitNormal + Penetration * X;\n\tEndTrace=StartTrace + Accuracy * (FRand() - 0.50) * Y * 1000 + Accuracy * (FRand() - 0.50) * Z * 1000;\n\tEndTrace += 10000 * X;\n\tOther=PawnOwner.TraceShot(HitLocation,HitNormal,EndTrace,StartTrace);\n\tProcessTraceHit(Other,HitLocation,HitNormal,X,Y,Z);\n}",
                        "locals": [
                            "local Vector HitLocation;",
                            "local Vector HitNormal;",
                            "local Vector StartTrace;",
                            "local Vector EndTrace;",
                            "local Vector X;",
                            "local Vector Y;",
                            "local Vector Z;",
                            "local Actor Other;",
                            "local Pawn PawnOwner;",
                            "local float Penetration;",
                            "local Rotator rot;"
                        ],
                        "modifiers": [],
                        "name": "TraceFire",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "Accuracy"
                            ]
                        ],
                        "return": ""
                    },
                    "UpdateScope": {
                        "body": "{\nbZoomed=bShow;\nScopeFOV=FOV;\n\nRefreshScopeDisplay(DeusExPlayer(Owner), False, bZoomed);\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "UpdateScope",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "FOV"
                            ],
                            [
                                "bool",
                                "bShow"
                            ]
                        ],
                        "return": ""
                    },
                    "ZoomIn": {
                        "body": "{\nbZoomed=True;\n\nZoomScale-=ZoomInc;\n\nif(ZoomScale<MinScale)\n\tZoomScale=MinScale;\nScopeFOV=80*ZoomScale;\nBaseAccuracy=0.12/ZoomScale;\nUpdateScope(ScopeFOV,True);\n\nreturn bZoomed;\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "ZoomIn",
                        "native": false,
                        "param": [],
                        "return": "bool"
                    },
                    "ZoomOff": {
                        "body": "{\nif(bHasScope && bZoomed && (Owner != None) && Owner.IsA('DeusExPlayer'))\n\t{\n\tbZoomed = False;\n\tZoomScale=MaxScale;\n\tScopeFOV=80*ZoomScale;\n\tBaseAccuracy=0.12/ZoomScale;\n\tUpdateScope(ScopeFOV,False);\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "ZoomOff",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ZoomOut": {
                        "body": "{\nif(bZoomed)\n\t{\n\tZoomScale+=ZoomInc;\n\tif(ZoomScale>MaxScale)\n\t\t{\n\t\tZoomScale=MaxScale;\n\t\tbZoomed=False;\n\t\t}\n\tScopeFOV=80*ZoomScale;\n\tBaseAccuracy=0.12/ZoomScale;\n\tUpdateScope(ScopeFOV,bZoomed);\n\t}\n\nreturn bZoomed;\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "ZoomOut",
                        "native": false,
                        "param": [],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 334,
                "replication": "",
                "states": [],
                "variables": [
                    "var float\tmpNoScopeMult;",
                    "var float ZoomScale,ZoomInc,",
                    "var bool bSilenced;",
                    "var() float Thick;",
                    "var() float PawnThick;"
                ]
            }
        },
        "WeaponHeavyBeamSword.uc": {
            "body": "//=============================================\n// PlasmaSword\n//=============================================\nClass WeaponHeavyBeamSword extends WeaponNanoSword;\n\nvar Name WeaponDamageType;\n\nsimulated function ProcessTraceHit(Actor Other, Vector HitLocation, Vector HitNormal, Vector X, Vector Y, Vector Z)\n{\n\tlocal float        mult;\n\tlocal name         damageType;\n\tlocal DeusExPlayer dxPlayer;\n\n\tif (Other != None)\n\t{\n\t\t// AugCombat increases our damage if hand to hand\n\t\tmult = 1.0;\n\t\tif (bHandToHand && (DeusExPlayer(Owner) != None))\n\t\t{\n\t\t\tmult = DeusExPlayer(Owner).AugmentationSystem.GetAugLevelValue(class'AugCombat');\n\t\t\tif (mult == -1.0)\n\t\t\t\tmult = 1.0;\n\t\t}\n\n\t\t// skill also affects our damage\n\t\t// GetWeaponSkill returns 0.0 to -0.7 (max skill/aug)\n\t\tmult += -2.0 * GetWeaponSkill();\n\n\t\t// Determine damage type\n\t\tdamageType = WeaponDamageType;\n\n\t\tif (Other != None)\n\t\t{\n\t\t\tif (Other.bOwned)\n\t\t\t{\n\t\t\t\tdxPlayer = DeusExPlayer(Owner);\n\t\t\t\tif (dxPlayer != None)\n\t\t\t\t\tdxPlayer.AISendEvent('Futz', EAITYPE_Visual);\n\t\t\t}\n\t\t}\n\t\tif ((Other == Level) || (Other.IsA('Mover')))\n\t\t{\n\t\t\tif ( Role == ROLE_Authority )\n\t\t\t\tOther.TakeDamage(HitDamage * mult, Pawn(Owner), HitLocation, 1000.0*X, damageType);\n\n\t\t\tSelectiveSpawnEffects( HitLocation, HitNormal, Other, HitDamage * mult);\n\t\t}\n\t\telse if ((Other != self) && (Other != Owner))\n\t\t{\n\t\t\tif ( Role == ROLE_Authority )\n\t\t\t\tOther.TakeDamage(HitDamage * mult, Pawn(Owner), HitLocation, 1000.0*X, damageType);\n\t\t\tif (bHandToHand)\n\t\t\t\tSelectiveSpawnEffects( HitLocation, HitNormal, Other, HitDamage * mult);\n\n\t\t\tif (bPenetrating && Other.IsA('Pawn') && !Other.IsA('Robot'))\n\t\t\t\tSpawnBlood(HitLocation, HitNormal);\n\t\t}\n\t}\n   if (DeusExMPGame(Level.Game) != None)\n   {\n      if (DeusExPlayer(Other) != None)\n         DeusExMPGame(Level.Game).TrackWeapon(self,HitDamage * mult);\n      else\n         DeusExMPGame(Level.Game).TrackWeapon(self,0);\n   }\n}\n\ndefaultproperties\n{\n     WeaponDamageType=exploded\n     InventoryGroup=135\n     ItemName=\"Heavy Beam Sword\"\n     Description=\"A strange, ancient triad weapon. You would be hard pressed finding out anything else about it.\"\n     beltDescription=\"HEAVY\"\n     Fatness=255\n}\n",
            "name": "WeaponHeavyBeamSword.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "WeaponDamageType=exploded",
                    "InventoryGroup=135",
                    "ItemName=\"Heavy Beam Sword\"",
                    "Description=\"A strange, ancient triad weapon. You would be hard pressed finding out anything else about it.\"",
                    "beltDescription=\"HEAVY\"",
                    "Fatness=255"
                ],
                "exec": [],
                "extends": "WeaponNanoSword",
                "functions": {
                    "ProcessTraceHit": {
                        "body": "{\n\n\tif (Other != None)\n\t{\n\t\t// AugCombat increases our damage if hand to hand\n\t\tmult = 1.0;\n\t\tif (bHandToHand && (DeusExPlayer(Owner) != None))\n\t\t{\n\t\t\tmult = DeusExPlayer(Owner).AugmentationSystem.GetAugLevelValue(class'AugCombat');\n\t\t\tif (mult == -1.0)\n\t\t\t\tmult = 1.0;\n\t\t}\n\n\t\t// skill also affects our damage\n\t\t// GetWeaponSkill returns 0.0 to -0.7 (max skill/aug)\n\t\tmult += -2.0 * GetWeaponSkill();\n\n\t\t// Determine damage type\n\t\tdamageType = WeaponDamageType;\n\n\t\tif (Other != None)\n\t\t{\n\t\t\tif (Other.bOwned)\n\t\t\t{\n\t\t\t\tdxPlayer = DeusExPlayer(Owner);\n\t\t\t\tif (dxPlayer != None)\n\t\t\t\t\tdxPlayer.AISendEvent('Futz', EAITYPE_Visual);\n\t\t\t}\n\t\t}\n\t\tif ((Other == Level) || (Other.IsA('Mover')))\n\t\t{\n\t\t\tif ( Role == ROLE_Authority )\n\t\t\t\tOther.TakeDamage(HitDamage * mult, Pawn(Owner), HitLocation, 1000.0*X, damageType);\n\n\t\t\tSelectiveSpawnEffects( HitLocation, HitNormal, Other, HitDamage * mult);\n\t\t}\n\t\telse if ((Other != self) && (Other != Owner))\n\t\t{\n\t\t\tif ( Role == ROLE_Authority )\n\t\t\t\tOther.TakeDamage(HitDamage * mult, Pawn(Owner), HitLocation, 1000.0*X, damageType);\n\t\t\tif (bHandToHand)\n\t\t\t\tSelectiveSpawnEffects( HitLocation, HitNormal, Other, HitDamage * mult);\n\n\t\t\tif (bPenetrating && Other.IsA('Pawn') && !Other.IsA('Robot'))\n\t\t\t\tSpawnBlood(HitLocation, HitNormal);\n\t\t}\n\t}\n   if (DeusExMPGame(Level.Game) != None)\n   {\n      if (DeusExPlayer(Other) != None)\n         DeusExMPGame(Level.Game).TrackWeapon(self,HitDamage * mult);\n      else\n         DeusExMPGame(Level.Game).TrackWeapon(self,0);\n   }\n}",
                        "locals": [
                            "local float        mult;",
                            "local name         damageType;",
                            "local DeusExPlayer dxPlayer;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "ProcessTraceHit",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Other"
                            ],
                            [
                                "Vector",
                                "HitLocation"
                            ],
                            [
                                "Vector",
                                "HitNormal"
                            ],
                            [
                                "Vector",
                                "X"
                            ],
                            [
                                "Vector",
                                "Y"
                            ],
                            [
                                "Vector",
                                "Z"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 77,
                "replication": "",
                "states": [],
                "variables": [
                    "var Name WeaponDamageType;"
                ]
            }
        },
        "WeaponHellBite.uc": {
            "body": "//=============================================================================\n// WeaponKarkianOldBite.\n//=============================================================================\nclass WeaponHellBite extends WeaponNPCMelee;\n\ndefaultproperties\n{\n     ShotTime=0.100000\n     HitDamage=30\n     maxRange=120\n     AccurateRange=120\n     BaseAccuracy=0.000000\n     Misc1Sound=Sound'DeusExSounds.Animal.KarkianAttack'\n     Misc2Sound=Sound'DeusExSounds.Animal.KarkianAttack'\n     Misc3Sound=Sound'DeusExSounds.Animal.KarkianAttack'\n}\n",
            "name": "WeaponHellBite.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "ShotTime=0.100000",
                    "HitDamage=30",
                    "maxRange=120",
                    "AccurateRange=120",
                    "BaseAccuracy=0.000000",
                    "Misc1Sound=Sound'DeusExSounds.Animal.KarkianAttack'",
                    "Misc2Sound=Sound'DeusExSounds.Animal.KarkianAttack'",
                    "Misc3Sound=Sound'DeusExSounds.Animal.KarkianAttack'"
                ],
                "exec": [],
                "extends": "WeaponNPCMelee",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 17,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "WeaponHostageDevice.uc": {
            "body": "class WeaponHostageDevice extends WeaponStealthPistol;\n\nvar int currentMode;\nvar string cycleMessages[6];\nvar Pawn hostage;\n\nreplication\n{\n     reliable if (Role == ROLE_Authority)\n        currentMode, hostage;\n}\n\nfunction string GetDisplayString(Pawn P)\n{\n\tif(P.isA('DeusExPlayer'))\n\t\treturn DeusExPlayer(p).PlayerReplicationInfo.PlayerName;\n\telse if(P.isA('ScriptedPawn'))\n\t\treturn ScriptedPawn(P).FamiliarName;\n}\n\nfunction GiveTo( pawn Other )\n{\n    super.Giveto(Other);\n    super.GiveAmmo(Other);\n\thostage = none;\n\tcurrentMode = 0;\n\tOther.ClientMessage(\"|P3Press Ammochange to cycle through the modes\");\n\n}\n\nsimulated function cycleammo()\n{\n\tif(Hostage != None)\n\t{\n\t\tcurrentMode++;\n\t\tif(currentMode > 4)\n\t\t{\n\t\t\tcurrentMode = 0;\n\t\t}\n\t\tDeusExPlayer(Owner).ClientMessage(cycleMessages[currentMode]);\t\n\t}\n\telse\n\t{\n\tDeusExPlayer(Owner).ClientMessage(\"Features unavailable while no hostage is hooked.\");\n\tcurrentMode = 0;\n\t}\n}\n\nfunction ProcessTraceHit(Actor Other, Vector HitLocation, Vector HitNormal, Vector X, Vector Y, Vector Z)\n{\n\n    local DeusExWeapon W;\n    local Pawn P;\nlocal vector hostageLocation; \nlocal string checkedhostage;\n\n\tif(currentMode == 0)\n\t{\n\t\t//Hooking\n\t\tOther = Pawn(Other);\n\t\t\t\tif(hostage != none)\n\t\t\t\t{\n\t\t\t\t\tif(Other != None)\n\t\t\t\t\t{\n\t\t\t\t\t\t\tforeach allactors(class'Pawn',P)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif(P == hostage)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcheckedhostage = GetDisplayString(P);\n\t\t\t\t\t\t\t\tDeusExPlayer(Owner).ClientMessage(\"|P3Current hostage will be released: \"$checkedhostage,'TeamSay');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\tif(Other != None)\n\t\t\t{\n\t\t\t\tif(Other.isA('DXScriptedPawn'))\n\t\t\t\t{\n\t\t\t\t\tif(DXHumanMilitary(Other).bSpecial)\n\t\t\t\t\t{\n\t\t\t\t\t\tDeusExPlayer(Owner).ClientMessage(\"|P2You can not take this person as a hostage. [Special]\");\n\t\t\t\t\t\treturn;\t\t\t\t\t\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\tif(Other.isA('DeusExPlayer'))\n\t\t\t\t{\n\t\t\t\t\tif(DeusExPlayer(Other).bAdmin)\n\t\t\t\t\t{\n\t\t\t\t\t\tDeusExPlayer(Owner).ClientMessage(\"|P2You can not take this person as a hostage. [Admin Protection]\");\n\t\t\t\t\t\treturn;\t\t\t\t\t\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\tcheckedhostage = GetDisplayString(pawn(other));\n\t\t\t\tDeusExPlayer(Owner).ClientMessage(\"|P3Hostage Hooked: \"$checkedhostage,'TeamSay');\n\t\t\t\thostage = pawn(Other);\n\t\t\t\tSpawnSphere(Other.Location);\n\t\t\t\tSpawnSphere(Owner.Location);\n\t\t\t}\n\t}\n\telse if(currentMode == 1)\n\t{\n\t\t//Releasing\n\t\tif(hostage != none)\n\t\t{\n\t\t\tforeach allactors(class'Pawn',P)\n\t\t\t{\n\t\t\t\tif(P == hostage)\n\t\t\t\t{\n\t\t\t\tSpawnSphere(P.Location);\n\t\t\t\tSpawnSphere(Owner.Location);\n\t\t\t\tcheckedhostage = GetDisplayString(p);\n\t\t\t\tDeusExPlayer(Owner).ClientMessage(\"|P3Hostage Unhooked: \"$checkedhostage,'TeamSay');\n\t\t\t\thostage = None;\n\t\t\t\t}\n\t\t\t}\t\n\t\t}\n\t\telse\n\t\t{\n\t\tDeusExPlayer(Owner).ClientMessage(\"|P3There is no hostage hooked!\",'TeamSay');\n\t\tcurrentMode = 0;\n\t\t}\n\t\t\n\t}\n\telse if(currentMode == 2)\n\t{\n\t\t//Teleporting to\n\t\tif(hostage != none)\n\t\t{\n\t\t\tforeach allactors(class'Pawn',P)\n\t\t\t{\n\t\t\t\tif(P == hostage)\n\t\t\t\t{\n\t\t\t\t\n\t\t\t\tcheckedhostage = GetDisplayString(p);\n\t\t\t\tDeusExPlayer(Owner).ClientMessage(\"|P3Hostage Located: \"$checkedhostage);\n\t\t\t\tOwner.SetLocation(P.location+vect(50,0,0));\n\t\t\t\tSpawnSphere(P.Location);\n\t\t\t\tSpawnSphere(Owner.Location);\n\t\t\t\t}\n\t\t\t}\t\n\t\t}\n\t\telse\n\t\t{\n\t\tDeusExPlayer(Owner).ClientMessage(\"|P3There is no hostage hooked!\",'TeamSay');\n\t\tcurrentMode = 0;\n\t\t}\n\t}\n\telse if(currentMode == 3)\n\t{\n\t\t//Summoning\n\t\tif(hostage != none)\n\t\t{\n\t\t\tforeach allactors(class'Pawn',P)\n\t\t\t{\n\t\t\t\tif(P == hostage)\n\t\t\t\t{\n\t\t\t\tcheckedhostage = GetDisplayString(p);\n\t\t\t\tDeusExPlayer(Owner).ClientMessage(\"|P3Hostage Summoned: \"$checkedhostage);\n\t\t\t\tP.SetLocation(Owner.location+vect(50,0,0));\n\t\t\t\tSpawnSphere(P.Location);\n\t\t\t\tSpawnSphere(Owner.Location);\n\t\t\t\t}\n\t\t\t}\t\n\t\t}\n\t\telse\n\t\t{\n\t\tDeusExPlayer(Owner).ClientMessage(\"|P3There is no hostage hooked!\",'TeamSay');\n\t\tcurrentMode = 0;\n\t\t}\n\t}\n\telse if(currentMode == 4)\n\t{\n\t\t//Killing\n\t\tif(hostage != none)\n\t\t{\n\t\t\tforeach allactors(class'Pawn',P)\n\t\t\t{\n\t\t\t\tif(P == hostage)\n\t\t\t\t{\n\t\t\t\tcheckedhostage = GetDisplayString(p);\n\t\t\t\tDeusExPlayer(Owner).ClientMessage(\"|P3Hostage Killed: \"$checkedhostage);\n\t\t\t\tDeusExPlayer(P).ReducedDamageType = '';\n\t\t\t\tScriptedPawn(P).bInvincible=False;\n\t\t\t\tSpawnExplosion(P.Location);\n\t\t\t\tP.setPhysics(PHYS_Falling);\n\t\t\t\tP.Velocity = vect(0,0,512);\n\t\t\t\tP.TakeDamage(5000,none,vect(0,0,7),vect(0,0,0),'Exploded');\n\t\t\t\t\tif(P.isa('ScriptedPawn'))\n\t\t\t\t\t{\n\t\t\t\t\t\tDeusExPlayer(Owner).ClientMessage(\"|P3Hostage is an scriptedPawn, and permenantly dead. Hostage Device no longer hooked.\");\n\t\t\t\t\t\thostage = none;\n\t\t\t\t\t\tcurrentMode = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\t\n\t\t}\n\t\telse\n\t\t{\n\t\tDeusExPlayer(Owner).ClientMessage(\"|P3There is no hostage hooked!\",'TeamSay');\n\t\tcurrentMode = 0;\n\t\t}\n\t}\n\telse if(currentMode == 5)\n\t{\n\t\t//Viewing\n\t\t/*if(hostage != \"\")\n\t\t{\n\t\t\tforeach allactors(class'Pawn',P)\n\t\t\t{\n\t\t\t\tif(P == hostage)\n\t\t\t\t{\n\t\t\t\t\tif(bViewing)\n\t\t\t\tcheckedhostage = GetDisplayString(p);\n\t\t\t\tDeusExPlayer(Owner).ClientMessage(\"|P3Hostage Viewed: \"$checkedhostage);\n\t\t\t\t}\n\t\t\t}\t\n\t\t}\n\t\telse\n\t\t{\n\t\tDeusExPlayer(Owner).ClientMessage(\"|P3There is no hostage hooked!\",'TeamSay');\n\t\tcurrentMode = 0;\n\t\t}*/\n\t}\n}\n\nfunction SpawnExplosion(vector Loc)\n{\n    spawn(class'ShockRing',,,Loc,rot(16384,0,0));\n    spawn(class'ShockRing',,,Loc,rot(0,16384,0));\n    spawn(class'ShockRing',,,Loc,rot(0,0,16384));\n\tspawn(class'SphereEffect',,,Loc,rot(16384,0,0));\n}\n\nfunction SpawnSphere(vector Loc)\n{\nlocal SphereEffect S;\n\ts = spawn(class'SphereEffect',,,Loc,rot(16384,0,0));\n}\n\n\nsimulated function PreBeginPlay()\n{\n    return;\n}\n\nstate NormalFire //Bowens Infinite Firing\n{ \n   Begin: \n      if ((ClipCount >= ReloadCount) && (ReloadCount != 0)) \n      { \n         if (!bAutomatic) \n         { \n            bFiring = False; \n            FinishAnim(); \n         } \n    \n         if (Owner != None) \n         { \n            if (Owner.IsA('DeusExPlayer')) \n            { \n               bFiring = False; \n            } \n            else if (Owner.IsA('ScriptedPawn')) \n            { \n               bFiring = False; \n               ReloadAmmo(); \n            } \n         } \n         else \n         { \n            if (bHasMuzzleFlash) \n               EraseMuzzleFlashTexture(); \n            GotoState('Idle'); \n         } \n      } \n      if ( bAutomatic && (( Level.NetMode == NM_DedicatedServer ) || ((Level.NetMode == NM_ListenServer) && Owner.IsA('DeusExPlayer') && !DeusExPlayer(Owner).PlayerIsListenClient()))) \n         GotoState('Idle'); \n    \n      Sleep(GetShotTime()); \n      if (bAutomatic) \n      { \n         GenerateBullet();       // In multiplayer bullets are generated by the client which will let the server know when \n         Goto('Begin'); \n      } \n      bFiring = False; \n      FinishAnim(); \n    \n   /*      // if ReloadCount is 0 and we're not hand to hand, then this is a \n      // single-use weapon so destroy it after firing once \n      if ((ReloadCount == 0) && !bHandToHand) \n      { \n         if (DeusExPlayer(Owner) != None) \n            DeusExPlayer(Owner).RemoveItemFromSlot(Self);   // remove it from the inventory grid \n         Destroy(); \n      } \n      */              // Do I REALLY need all that crap JUST for infinite ammo? \n      ReadyToFire(); \n   Done: \n      bFiring = False; \n      Finish(); \n} \n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\n//-----END-CLASS----------\n\ndefaultproperties\n{\n     cycleMessages(0)=\"Take Hostage\"\n     cycleMessages(1)=\"Release Hostage\"\n     cycleMessages(2)=\"Teleport to Hostage\"\n     cycleMessages(3)=\"Summon Hostage\"\n     cycleMessages(4)=\"Kill Hostage\"\n     cycleMessages(5)=\"Cheat View Hostage\"\n     ShotTime=0.100000\n     HitDamage=0\n     BaseAccuracy=0.000000\n     ReloadCount=0\n     PickupAmmoCount=0\n     FireSound=Sound'DeusExSounds.Generic.Beep1'\n     InventoryGroup=201\n     ItemName=\"Hostage Device\"\n     PickupViewMesh=LodMesh'DeusExItems.Multitool'\n     ThirdPersonMesh=LodMesh'DeusExItems.Multitool3rd'\n     Icon=Texture'DeusExUI.Icons.BeltIconMultitool'\n     largeIcon=None\n     Description=\"An interesting device...\"\n     beltDescription=\"HOSTAGE\"\n}\n",
            "name": "WeaponHostageDevice.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "cycleMessages(0)=\"Take Hostage\"",
                    "cycleMessages(1)=\"Release Hostage\"",
                    "cycleMessages(2)=\"Teleport to Hostage\"",
                    "cycleMessages(3)=\"Summon Hostage\"",
                    "cycleMessages(4)=\"Kill Hostage\"",
                    "cycleMessages(5)=\"Cheat View Hostage\"",
                    "ShotTime=0.100000",
                    "HitDamage=0",
                    "BaseAccuracy=0.000000",
                    "ReloadCount=0",
                    "PickupAmmoCount=0",
                    "FireSound=Sound'DeusExSounds.Generic.Beep1'",
                    "InventoryGroup=201",
                    "ItemName=\"Hostage Device\"",
                    "PickupViewMesh=LodMesh'DeusExItems.Multitool'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.Multitool3rd'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconMultitool'",
                    "largeIcon=None",
                    "Description=\"An interesting device...\"",
                    "beltDescription=\"HOSTAGE\""
                ],
                "exec": [],
                "extends": "WeaponStealthPistol",
                "functions": {
                    "GetDisplayString": {
                        "body": "{\n\tif(P.isA('DeusExPlayer'))\n\t\treturn DeusExPlayer(p).PlayerReplicationInfo.PlayerName;\n\telse if(P.isA('ScriptedPawn'))\n\t\treturn ScriptedPawn(P).FamiliarName;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetDisplayString",
                        "native": false,
                        "param": [
                            [
                                "Pawn",
                                "P"
                            ]
                        ],
                        "return": "string"
                    },
                    "GiveTo": {
                        "body": "{\n    super.Giveto(Other);\n    super.GiveAmmo(Other);\n\thostage = none;\n\tcurrentMode = 0;\n\tOther.ClientMessage(\"|P3Press Ammochange to cycle through the modes\");\n\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "GiveTo",
                        "native": false,
                        "param": [
                            [
                                "pawn",
                                "Other"
                            ]
                        ],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n    return;\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ProcessTraceHit": {
                        "body": "{\n\n\n\tif(currentMode == 0)\n\t{\n\t\t//Hooking\n\t\tOther = Pawn(Other);\n\t\t\t\tif(hostage != none)\n\t\t\t\t{\n\t\t\t\t\tif(Other != None)\n\t\t\t\t\t{\n\t\t\t\t\t\t\tforeach allactors(class'Pawn',P)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif(P == hostage)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcheckedhostage = GetDisplayString(P);\n\t\t\t\t\t\t\t\tDeusExPlayer(Owner).ClientMessage(\"|P3Current hostage will be released: \"$checkedhostage,'TeamSay');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\tif(Other != None)\n\t\t\t{\n\t\t\t\tif(Other.isA('DXScriptedPawn'))\n\t\t\t\t{\n\t\t\t\t\tif(DXHumanMilitary(Other).bSpecial)\n\t\t\t\t\t{\n\t\t\t\t\t\tDeusExPlayer(Owner).ClientMessage(\"|P2You can not take this person as a hostage. [Special]\");\n\t\t\t\t\t\treturn;\t\t\t\t\t\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\tif(Other.isA('DeusExPlayer'))\n\t\t\t\t{\n\t\t\t\t\tif(DeusExPlayer(Other).bAdmin)\n\t\t\t\t\t{\n\t\t\t\t\t\tDeusExPlayer(Owner).ClientMessage(\"|P2You can not take this person as a hostage. [Admin Protection]\");\n\t\t\t\t\t\treturn;\t\t\t\t\t\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\tcheckedhostage = GetDisplayString(pawn(other));\n\t\t\t\tDeusExPlayer(Owner).ClientMessage(\"|P3Hostage Hooked: \"$checkedhostage,'TeamSay');\n\t\t\t\thostage = pawn(Other);\n\t\t\t\tSpawnSphere(Other.Location);\n\t\t\t\tSpawnSphere(Owner.Location);\n\t\t\t}\n\t}\n\telse if(currentMode == 1)\n\t{\n\t\t//Releasing\n\t\tif(hostage != none)\n\t\t{\n\t\t\tforeach allactors(class'Pawn',P)\n\t\t\t{\n\t\t\t\tif(P == hostage)\n\t\t\t\t{\n\t\t\t\tSpawnSphere(P.Location);\n\t\t\t\tSpawnSphere(Owner.Location);\n\t\t\t\tcheckedhostage = GetDisplayString(p);\n\t\t\t\tDeusExPlayer(Owner).ClientMessage(\"|P3Hostage Unhooked: \"$checkedhostage,'TeamSay');\n\t\t\t\thostage = None;\n\t\t\t\t}\n\t\t\t}\t\n\t\t}\n\t\telse\n\t\t{\n\t\tDeusExPlayer(Owner).ClientMessage(\"|P3There is no hostage hooked!\",'TeamSay');\n\t\tcurrentMode = 0;\n\t\t}\n\t\t\n\t}\n\telse if(currentMode == 2)\n\t{\n\t\t//Teleporting to\n\t\tif(hostage != none)\n\t\t{\n\t\t\tforeach allactors(class'Pawn',P)\n\t\t\t{\n\t\t\t\tif(P == hostage)\n\t\t\t\t{\n\t\t\t\t\n\t\t\t\tcheckedhostage = GetDisplayString(p);\n\t\t\t\tDeusExPlayer(Owner).ClientMessage(\"|P3Hostage Located: \"$checkedhostage);\n\t\t\t\tOwner.SetLocation(P.location+vect(50,0,0));\n\t\t\t\tSpawnSphere(P.Location);\n\t\t\t\tSpawnSphere(Owner.Location);\n\t\t\t\t}\n\t\t\t}\t\n\t\t}\n\t\telse\n\t\t{\n\t\tDeusExPlayer(Owner).ClientMessage(\"|P3There is no hostage hooked!\",'TeamSay');\n\t\tcurrentMode = 0;\n\t\t}\n\t}\n\telse if(currentMode == 3)\n\t{\n\t\t//Summoning\n\t\tif(hostage != none)\n\t\t{\n\t\t\tforeach allactors(class'Pawn',P)\n\t\t\t{\n\t\t\t\tif(P == hostage)\n\t\t\t\t{\n\t\t\t\tcheckedhostage = GetDisplayString(p);\n\t\t\t\tDeusExPlayer(Owner).ClientMessage(\"|P3Hostage Summoned: \"$checkedhostage);\n\t\t\t\tP.SetLocation(Owner.location+vect(50,0,0));\n\t\t\t\tSpawnSphere(P.Location);\n\t\t\t\tSpawnSphere(Owner.Location);\n\t\t\t\t}\n\t\t\t}\t\n\t\t}\n\t\telse\n\t\t{\n\t\tDeusExPlayer(Owner).ClientMessage(\"|P3There is no hostage hooked!\",'TeamSay');\n\t\tcurrentMode = 0;\n\t\t}\n\t}\n\telse if(currentMode == 4)\n\t{\n\t\t//Killing\n\t\tif(hostage != none)\n\t\t{\n\t\t\tforeach allactors(class'Pawn',P)\n\t\t\t{\n\t\t\t\tif(P == hostage)\n\t\t\t\t{\n\t\t\t\tcheckedhostage = GetDisplayString(p);\n\t\t\t\tDeusExPlayer(Owner).ClientMessage(\"|P3Hostage Killed: \"$checkedhostage);\n\t\t\t\tDeusExPlayer(P).ReducedDamageType = '';\n\t\t\t\tScriptedPawn(P).bInvincible=False;\n\t\t\t\tSpawnExplosion(P.Location);\n\t\t\t\tP.setPhysics(PHYS_Falling);\n\t\t\t\tP.Velocity = vect(0,0,512);\n\t\t\t\tP.TakeDamage(5000,none,vect(0,0,7),vect(0,0,0),'Exploded');\n\t\t\t\t\tif(P.isa('ScriptedPawn'))\n\t\t\t\t\t{\n\t\t\t\t\t\tDeusExPlayer(Owner).ClientMessage(\"|P3Hostage is an scriptedPawn, and permenantly dead. Hostage Device no longer hooked.\");\n\t\t\t\t\t\thostage = none;\n\t\t\t\t\t\tcurrentMode = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\t\n\t\t}\n\t\telse\n\t\t{\n\t\tDeusExPlayer(Owner).ClientMessage(\"|P3There is no hostage hooked!\",'TeamSay');\n\t\tcurrentMode = 0;\n\t\t}\n\t}\n\telse if(currentMode == 5)\n\t{\n\t\t//Viewing\n\t\t/*if(hostage != \"\")\n\t\t{\n\t\t\tforeach allactors(class'Pawn',P)\n\t\t\t{\n\t\t\t\tif(P == hostage)\n\t\t\t\t{\n\t\t\t\t\tif(bViewing)\n\t\t\t\tcheckedhostage = GetDisplayString(p);\n\t\t\t\tDeusExPlayer(Owner).ClientMessage(\"|P3Hostage Viewed: \"$checkedhostage);\n\t\t\t\t}\n\t\t\t}\t\n\t\t}\n\t\telse\n\t\t{\n\t\tDeusExPlayer(Owner).ClientMessage(\"|P3There is no hostage hooked!\",'TeamSay');\n\t\tcurrentMode = 0;\n\t\t}*/\n\t}\n}",
                        "locals": [
                            "local DeusExWeapon W;",
                            "local Pawn P;",
                            "local vector hostageLocation;",
                            "local string checkedhostage;"
                        ],
                        "modifiers": [],
                        "name": "ProcessTraceHit",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Other"
                            ],
                            [
                                "Vector",
                                "HitLocation"
                            ],
                            [
                                "Vector",
                                "HitNormal"
                            ],
                            [
                                "Vector",
                                "X"
                            ],
                            [
                                "Vector",
                                "Y"
                            ],
                            [
                                "Vector",
                                "Z"
                            ]
                        ],
                        "return": ""
                    },
                    "SpawnExplosion": {
                        "body": "{\n    spawn(class'ShockRing',,,Loc,rot(16384,0,0));\n    spawn(class'ShockRing',,,Loc,rot(0,16384,0));\n    spawn(class'ShockRing',,,Loc,rot(0,0,16384));\n\tspawn(class'SphereEffect',,,Loc,rot(16384,0,0));\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "SpawnExplosion",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "Loc"
                            ]
                        ],
                        "return": ""
                    },
                    "SpawnSphere": {
                        "body": "{\n\ts = spawn(class'SphereEffect',,,Loc,rot(16384,0,0));\n}",
                        "locals": [
                            "local SphereEffect S;"
                        ],
                        "modifiers": [],
                        "name": "SpawnSphere",
                        "native": false,
                        "param": [
                            [
                                "vector",
                                "Loc"
                            ]
                        ],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    },
                    "cycleammo": {
                        "body": "{\n\tif(Hostage != None)\n\t{\n\t\tcurrentMode++;\n\t\tif(currentMode > 4)\n\t\t{\n\t\t\tcurrentMode = 0;\n\t\t}\n\t\tDeusExPlayer(Owner).ClientMessage(cycleMessages[currentMode]);\t\n\t}\n\telse\n\t{\n\tDeusExPlayer(Owner).ClientMessage(\"Features unavailable while no hostage is hooked.\");\n\tcurrentMode = 0;\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "cycleammo",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 336,
                "replication": "",
                "states": [],
                "variables": [
                    "var int currentMode;",
                    "var string cycleMessages[6];",
                    "var Pawn hostage;"
                ]
            }
        },
        "WeaponHostageGun.uc": {
            "body": "//=============================================================================\n// WeaponHostageGun.\n//=============================================================================\nclass WeaponHostageGun extends WeaponGEPGun;\n\nsimulated function CycleAmmo()\n{\n  local Hostager Selector;\n  foreach AllActors(class 'Hostager', Selector)\n  {\n    if(Selector != None)\n    {\n      if(Selector.Instigator == Instigator)\n      {\n        Selector.Destroy();\n        DeusExPlayer(Owner).ClientMessage(GetDisplayString(Selector.Player)@\"has been released.\");\n      }\n    }\n  }\n}\n\n\nfunction string GetDisplayString(Actor P)\n{\n\tif(P.isA('DeusExPlayer'))\n\t\treturn DeusExPlayer(p).PlayerReplicationInfo.PlayerName;\n\telse if(P.isA('ScriptedPawn'))\n\t\treturn ScriptedPawn(P).FamiliarName;\n\telse if(P.isA('DeusExDecoration'))\n\t\treturn DeusExDecoration(P).ItemName;\n}\n\ndefaultproperties\n{\n     ProjectileClass=Class'PartyStuff.RocketHostage'\n     InventoryGroup=182\n     ItemName=\"Hostage Weapon\"\n     Description=\"Blablabla takes people hostage blablabla.\"\n     beltDescription=\"HOSTAGE\"\n}\n",
            "name": "WeaponHostageGun.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "ProjectileClass=Class'PartyStuff.RocketHostage'",
                    "InventoryGroup=182",
                    "ItemName=\"Hostage Weapon\"",
                    "Description=\"Blablabla takes people hostage blablabla.\"",
                    "beltDescription=\"HOSTAGE\""
                ],
                "exec": [],
                "extends": "WeaponGEPGun",
                "functions": {
                    "CycleAmmo": {
                        "body": "{\n  foreach AllActors(class 'Hostager', Selector)\n  {\n    if(Selector != None)\n    {\n      if(Selector.Instigator == Instigator)\n      {\n        Selector.Destroy();\n        DeusExPlayer(Owner).ClientMessage(GetDisplayString(Selector.Player)@\"has been released.\");\n      }\n    }\n  }\n}",
                        "locals": [
                            "local Hostager Selector;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "CycleAmmo",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "GetDisplayString": {
                        "body": "{\n\tif(P.isA('DeusExPlayer'))\n\t\treturn DeusExPlayer(p).PlayerReplicationInfo.PlayerName;\n\telse if(P.isA('ScriptedPawn'))\n\t\treturn ScriptedPawn(P).FamiliarName;\n\telse if(P.isA('DeusExDecoration'))\n\t\treturn DeusExDecoration(P).ItemName;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetDisplayString",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "P"
                            ]
                        ],
                        "return": "string"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 41,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "WeaponHoverBotSuicide.uc": {
            "body": "class WeaponHoverBotSuicide extends WeaponNPCmelee;\n\ndefaultproperties\n{\n     ShotTime=0.100000\n     HitDamage=15\n     maxRange=80\n     AccurateRange=80\n     BaseAccuracy=0.000000\n     AITimeLimit=10.000000\n     AIFireDelay=8.000000\n     Misc1Sound=Sound'DeusExSounds.Animal.KarkianAttack'\n     Misc2Sound=Sound'DeusExSounds.Animal.KarkianAttack'\n     Misc3Sound=Sound'DeusExSounds.Animal.KarkianAttack'\n     ItemName=\"Suicide Attack\"\n}\n",
            "name": "WeaponHoverBotSuicide.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "ShotTime=0.100000",
                    "HitDamage=15",
                    "maxRange=80",
                    "AccurateRange=80",
                    "BaseAccuracy=0.000000",
                    "AITimeLimit=10.000000",
                    "AIFireDelay=8.000000",
                    "Misc1Sound=Sound'DeusExSounds.Animal.KarkianAttack'",
                    "Misc2Sound=Sound'DeusExSounds.Animal.KarkianAttack'",
                    "Misc3Sound=Sound'DeusExSounds.Animal.KarkianAttack'",
                    "ItemName=\"Suicide Attack\""
                ],
                "exec": [],
                "extends": "WeaponNPCmelee",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 17,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "WeaponInflatableSword.uc": {
            "body": "//=============================================\n// PlasmaSword\n//=============================================\nClass WeaponInflatableSword extends WeaponSword;\n\ndefaultproperties\n{\n     mpHitDamage=3\n     mpAccurateRange=150\n     mpMaxRange=150\n     InventoryGroup=133\n     ItemName=\"Heavy Inflatable Sword\"\n     Description=\"A strange, ancient triad weapon. You would be hard pressed finding out anything else about it.\"\n     beltDescription=\"INFLATABLE\"\n     Fatness=255\n}\n",
            "name": "WeaponInflatableSword.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "mpHitDamage=3",
                    "mpAccurateRange=150",
                    "mpMaxRange=150",
                    "InventoryGroup=133",
                    "ItemName=\"Heavy Inflatable Sword\"",
                    "Description=\"A strange, ancient triad weapon. You would be hard pressed finding out anything else about it.\"",
                    "beltDescription=\"INFLATABLE\"",
                    "Fatness=255"
                ],
                "exec": [],
                "extends": "WeaponSword",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 17,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "WeaponJTazer.uc": {
            "body": "//=============================================================================\n// WeaponTazer.\n//=============================================================================\nclass WeaponJTazer expands WeaponProd;\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ((BeltSpot <= 9) && (BeltSpot >= 1));\n}\n\n\nfunction ProcessTraceHit(Actor Other, Vector HitLocation, Vector HitNormal, Vector X, Vector Y, Vector Z)\n{\nlocal int i;\nlocal DeusExPlayer PlayerOwner;\n\tPlayerOwner = DeusExPlayer(Owner);\n\n\tif (PlayerOwner != None && ScriptedPawn(Owner) == None)\n\t{\n\t\t\n\t\tOther.TakeDamage(HitDamage, Pawn(Owner), HitLocation, Vect(0,0,0), 'Shocked');\n\t\tOther.TakeDamage(HitDamage, Pawn(Owner), HitLocation, Vect(0,0,0), 'EMP');\n\t\tif(DeusExPlayer(Other) != None)\n\t\t{\n\t\t\tPlayerOwner.ClientInstantFlash(-0.4, vect(450, 190, 650));\n\t\t\tDeusExPlayer(Other).ConsoleCommand(\"feigndeath\");\n\t\t\tDeusExPlayer(Other).ClientFlash(1,Vect(20000,20000,20000));\n\t\t\tDeusExPlayer(Other).IncreaseClientFlashLength(12.0); //Drag that flash out for miles!!!\n\t\t}\n\t}\n}\n\ndefaultproperties\n{\n     ShotTime=1.500000\n     reloadTime=1.000000\n     HitDamage=20\n     maxRange=1920\n     AccurateRange=1280\n     BaseAccuracy=0.000000\n     bPenetrating=True\n     StunDuration=15.000000\n     ReloadCount=250\n     PickupAmmoCount=80\n     FireOffset=(X=-16.000000)\n     shakemag=0.000000\n     shaketime=0.000000\n     shakevert=0.000000\n     InventoryGroup=108\n     ItemName=\"Tazer\"\n     bToggleSteadyFlash=False\n     beltDescription=\"TAZER\"\n}\n",
            "name": "WeaponJTazer.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "ShotTime=1.500000",
                    "reloadTime=1.000000",
                    "HitDamage=20",
                    "maxRange=1920",
                    "AccurateRange=1280",
                    "BaseAccuracy=0.000000",
                    "bPenetrating=True",
                    "StunDuration=15.000000",
                    "ReloadCount=250",
                    "PickupAmmoCount=80",
                    "FireOffset=(X=-16.000000)",
                    "shakemag=0.000000",
                    "shaketime=0.000000",
                    "shakevert=0.000000",
                    "InventoryGroup=108",
                    "ItemName=\"Tazer\"",
                    "bToggleSteadyFlash=False",
                    "beltDescription=\"TAZER\""
                ],
                "exec": [],
                "extends": "WeaponProd",
                "functions": {
                    "ProcessTraceHit": {
                        "body": "{\n\tPlayerOwner = DeusExPlayer(Owner);\n\n\tif (PlayerOwner != None && ScriptedPawn(Owner) == None)\n\t{\n\t\t\n\t\tOther.TakeDamage(HitDamage, Pawn(Owner), HitLocation, Vect(0,0,0), 'Shocked');\n\t\tOther.TakeDamage(HitDamage, Pawn(Owner), HitLocation, Vect(0,0,0), 'EMP');\n\t\tif(DeusExPlayer(Other) != None)\n\t\t{\n\t\t\tPlayerOwner.ClientInstantFlash(-0.4, vect(450, 190, 650));\n\t\t\tDeusExPlayer(Other).ConsoleCommand(\"feigndeath\");\n\t\t\tDeusExPlayer(Other).ClientFlash(1,Vect(20000,20000,20000));\n\t\t\tDeusExPlayer(Other).IncreaseClientFlashLength(12.0); //Drag that flash out for miles!!!\n\t\t}\n\t}\n}",
                        "locals": [
                            "local int i;",
                            "local DeusExPlayer PlayerOwner;"
                        ],
                        "modifiers": [],
                        "name": "ProcessTraceHit",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Other"
                            ],
                            [
                                "Vector",
                                "HitLocation"
                            ],
                            [
                                "Vector",
                                "HitNormal"
                            ],
                            [
                                "Vector",
                                "X"
                            ],
                            [
                                "Vector",
                                "Y"
                            ],
                            [
                                "Vector",
                                "Z"
                            ]
                        ],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ((BeltSpot <= 9) && (BeltSpot >= 1));\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 54,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "WeaponKarkianOldBiteL.uc": {
            "body": "//=============================================================================\n// WeaponKarkianOldBite.\n//=============================================================================\nclass WeaponKarkianOldBiteL extends WeaponNPCMelee;\n\ndefaultproperties\n{\n     ShotTime=0.100000\n     HitDamage=25\n     maxRange=120\n     AccurateRange=120\n     BaseAccuracy=0.000000\n     bFallbackWeapon=True\n     Misc1Sound=Sound'DeusExSounds.Animal.KarkianAttack'\n     Misc2Sound=Sound'DeusExSounds.Animal.KarkianAttack'\n     Misc3Sound=Sound'DeusExSounds.Animal.KarkianAttack'\n}\n",
            "name": "WeaponKarkianOldBiteL.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "ShotTime=0.100000",
                    "HitDamage=25",
                    "maxRange=120",
                    "AccurateRange=120",
                    "BaseAccuracy=0.000000",
                    "bFallbackWeapon=True",
                    "Misc1Sound=Sound'DeusExSounds.Animal.KarkianAttack'",
                    "Misc2Sound=Sound'DeusExSounds.Animal.KarkianAttack'",
                    "Misc3Sound=Sound'DeusExSounds.Animal.KarkianAttack'"
                ],
                "exec": [],
                "extends": "WeaponNPCMelee",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 18,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "WeaponKarkianOldBumpL.uc": {
            "body": "//=============================================================================\n// WeaponKarkianOldBump.\n//=============================================================================\nclass WeaponKarkianOldBumpL extends WeaponNPCMelee;\n\ndefaultproperties\n{\n     ShotTime=0.100000\n     HitDamage=30\n     maxRange=90\n     AccurateRange=90\n     BaseAccuracy=0.000000\n     AITimeLimit=10.000000\n     AIFireDelay=8.000000\n     Misc1Sound=Sound'DeusExSounds.Animal.KarkianAttack'\n     Misc2Sound=Sound'DeusExSounds.Animal.KarkianAttack'\n     Misc3Sound=Sound'DeusExSounds.Animal.KarkianAttack'\n}\n",
            "name": "WeaponKarkianOldBumpL.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "ShotTime=0.100000",
                    "HitDamage=30",
                    "maxRange=90",
                    "AccurateRange=90",
                    "BaseAccuracy=0.000000",
                    "AITimeLimit=10.000000",
                    "AIFireDelay=8.000000",
                    "Misc1Sound=Sound'DeusExSounds.Animal.KarkianAttack'",
                    "Misc2Sound=Sound'DeusExSounds.Animal.KarkianAttack'",
                    "Misc3Sound=Sound'DeusExSounds.Animal.KarkianAttack'"
                ],
                "exec": [],
                "extends": "WeaponNPCMelee",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 19,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "WeaponKnifeBomb.uc": {
            "body": "//=============================================================================\n// WeaponFlashBang.\n//=============================================================================\nclass WeaponKnifeBomb expands WeaponEMPGrenade;\n\nfunction PostBeginPlay()\n{\n   Super.PostBeginPlay();\n   bWeaponStay=False;\n}\n\nfunction Fire(float Value)\n{\n\tif (Pawn(Owner) != None)\n\t{\n\t\tif (bNearWall)\n\t\t{\n\t\t\tbReadyToFire = False;\n\t\t\tGotoState('NormalFire');\n\t\t\tbPointing = True;\n\t\t\tPlayAnim('Place',, 0.1);\n\t\t\treturn;\n\t\t}\n\t}\n\tSuper.Fire(Value);\n}\n\nfunction Projectile ProjectileFire(class<projectile> ProjClass, float ProjSpeed, bool bWarn)\n{\n\tlocal Projectile proj;\n\n\tproj = Super.ProjectileFire(ProjClass, ProjSpeed, bWarn);\n\n\tif (proj != None)\n\t\tproj.PlayAnim('Open');\n}\n\nfunction BecomePickup()\n{\n\tSuper.BecomePickup();\n   if (Level.NetMode != NM_Standalone)\n      if (bTossedOut)\n         Lifespan = 0.0;\n}\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return (BeltSpot == 4);\n}\n\ndefaultproperties\n{\n     AmmoName=Class'PartyStuff.AmmoKB'\n     ProjectileClass=Class'PartyStuff.KnifeBomb'\n     InventoryGroup=35\n     ItemName=\"Knife Grenade\"\n     ItemArticle=\"a\"\n     Description=\"A knifer..\"\n     beltDescription=\"KNIFE\"\n     MultiSkins(4)=Texture'DeusExDeco.Skins.AlarmLightTex3'\n}\n",
            "name": "WeaponKnifeBomb.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "AmmoName=Class'PartyStuff.AmmoKB'",
                    "ProjectileClass=Class'PartyStuff.KnifeBomb'",
                    "InventoryGroup=35",
                    "ItemName=\"Knife Grenade\"",
                    "ItemArticle=\"a\"",
                    "Description=\"A knifer..\"",
                    "beltDescription=\"KNIFE\"",
                    "MultiSkins(4)=Texture'DeusExDeco.Skins.AlarmLightTex3'"
                ],
                "exec": [],
                "extends": "WeaponEMPGrenade",
                "functions": {
                    "BecomePickup": {
                        "body": "{\n\tSuper.BecomePickup();\n   if (Level.NetMode != NM_Standalone)\n      if (bTossedOut)\n         Lifespan = 0.0;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "BecomePickup",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Fire": {
                        "body": "{\n\tif (Pawn(Owner) != None)\n\t{\n\t\tif (bNearWall)\n\t\t{\n\t\t\tbReadyToFire = False;\n\t\t\tGotoState('NormalFire');\n\t\t\tbPointing = True;\n\t\t\tPlayAnim('Place',, 0.1);\n\t\t\treturn;\n\t\t}\n\t}\n\tSuper.Fire(Value);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Fire",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "Value"
                            ]
                        ],
                        "return": ""
                    },
                    "PostBeginPlay": {
                        "body": "{\n   Super.PostBeginPlay();\n   bWeaponStay=False;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ProjectileFire": {
                        "body": "{\n\n\tproj = Super.ProjectileFire(ProjClass, ProjSpeed, bWarn);\n\n\tif (proj != None)\n\t\tproj.PlayAnim('Open');\n}",
                        "locals": [
                            "local Projectile proj;"
                        ],
                        "modifiers": [],
                        "name": "ProjectileFire",
                        "native": false,
                        "param": [
                            [
                                "class<projectile>",
                                "ProjClass"
                            ],
                            [
                                "float",
                                "ProjSpeed"
                            ],
                            [
                                "bool",
                                "bWarn"
                            ]
                        ],
                        "return": "Projectile"
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return (BeltSpot == 4);\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 61,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "WeaponLaserAssault.uc": {
            "body": "class WeaponLaserAssault extends WeaponAssaultGun;\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\ndefaultproperties\n{\n     HitDamage=8\n     bInstantHit=False\n     ProjectileClass=Class'PartyStuff.LB'\n     InventoryGroup=132\n     ItemName=\"|P2Charged Laser Rifle\"\n     beltDescription=\"LASER\"\n     Mass=1.000000\n}\n",
            "name": "WeaponLaserAssault.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "HitDamage=8",
                    "bInstantHit=False",
                    "ProjectileClass=Class'PartyStuff.LB'",
                    "InventoryGroup=132",
                    "ItemName=\"|P2Charged Laser Rifle\"",
                    "beltDescription=\"LASER\"",
                    "Mass=1.000000"
                ],
                "exec": [],
                "extends": "WeaponAssaultGun",
                "functions": {
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 18,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "WeaponLightdartGun.uc": {
            "body": "//=============================================================================\n// WeaponNailGun.\n//=============================================================================\nclass WeaponLightdartGun extends DeusExWeapon;\n\nvar bool bTorchOn;\n\nreplication\n{\nreliable if(Role<ROLE_Authority)\n\tbTorchOn,TorchToggle;\nreliable if(Role==ROLE_Authority)\n\tOnTorch,OffTorch;\n}\n\nsimulated function LaserToggle()\n{\nTorchToggle();\n}\n\nsimulated function LaserOff()\n{\nif(bTorchOn)\n\tTorchToggle();\n}\n\nsimulated function TorchToggle()\n{\nif (bTorchOn)\n\t{\n\tbTorchOn=False;\n\tOffTorch();\n\t}\nelse\n\t{\n\tbTorchOn=True;\n\tOnTorch();\n\t}\n}\n\nsimulated function OnTorch()\n{\nowner.LightEffect=LE_Spotlight;\nowner.LightBrightness=120;\nowner.LightSaturation=255;\nowner.LightRadius=64;\nowner.LightPeriod=32;\nowner.LightCone=64;\nowner.LightType=LT_Steady;\n}\n\nsimulated function OffTorch()\n{\nowner.LightType=LT_None;\n}\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t\tReloadCount = mpReloadCount;\n\t}\n}\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\n\nstate NormalFire //(Thanks to JimBowen for this Infinite ammo code) \n{ \n   Begin: \n      if ((ClipCount >= ReloadCount) && (ReloadCount != 0)) \n      { \n         if (!bAutomatic) \n         { \n            bFiring = False; \n            FinishAnim(); \n         } \n    \n         if (Owner != None) \n         { \n            if (Owner.IsA('DeusExPlayer')) \n            { \n               bFiring = False; \n            } \n            else if (Owner.IsA('ScriptedPawn')) \n            { \n               bFiring = False; \n               ReloadAmmo(); \n            } \n         } \n         else \n         { \n            if (bHasMuzzleFlash) \n               EraseMuzzleFlashTexture(); \n            GotoState('Idle'); \n         } \n      } \n      if ( bAutomatic && (( Level.NetMode == NM_DedicatedServer ) || ((Level.NetMode == NM_ListenServer) && Owner.IsA('DeusExPlayer') && !DeusExPlayer(Owner).PlayerIsListenClient()))) \n         GotoState('Idle'); \n    \n      Sleep(GetShotTime()); \n      if (bAutomatic) \n      { \n         GenerateBullet();       // In multiplayer bullets are generated by the client which will let the server know when \n         Goto('Begin'); \n      } \n      bFiring = False; \n      FinishAnim(); \n    \n   /*      // if ReloadCount is 0 and we're not hand to hand, then this is a \n      // single-use weapon so destroy it after firing once \n      if ((ReloadCount == 0) && !bHandToHand) \n      { \n         if (DeusExPlayer(Owner) != None) \n            DeusExPlayer(Owner).RemoveItemFromSlot(Self);   // remove it from the inventory grid \n         Destroy(); \n      } \n      */              // Do I REALLY need all that crap JUST for infinite ammo? \n      ReadyToFire(); \n   Done: \n      bFiring = False; \n      Finish(); \n}\n\ndefaultproperties\n{\n     GoverningSkill=Class'DeusEx.SkillWeaponPistol'\n     NoiseLevel=0.010000\n     ShotTime=0.150000\n     reloadTime=0.000000\n     HitDamage=8\n     maxRange=4800\n     AccurateRange=2400\n     BaseAccuracy=0.800000\n     bCanHaveScope=True\n     bHasScope=True\n     ScopeFOV=25\n     bCanHaveLaser=True\n     bHasLaser=True\n     recoilStrength=0.100000\n     mpReloadTime=1.500000\n     mpHitDamage=30\n     mpBaseAccuracy=0.200000\n     mpAccurateRange=1200\n     mpMaxRange=8200\n     bCanHaveModBaseAccuracy=True\n     bCanHaveModReloadCount=True\n     bCanHaveModAccurateRange=True\n     bCanHaveModReloadTime=True\n     FireOffset=(X=-24.000000,Y=10.000000,Z=14.000000)\n     ProjectileClass=Class'PartyStuff.DartLight'\n     shakemag=50.000000\n     FireSound=Sound'DeusExSounds.Weapons.StealthPistolFire'\n     AltFireSound=Sound'DeusExSounds.Weapons.StealthPistolReloadEnd'\n     CockingSound=Sound'DeusExSounds.Weapons.StealthPistolReload'\n     SelectSound=Sound'DeusExSounds.Weapons.StealthPistolSelect'\n     InventoryGroup=3\n     ItemName=\"|P2Light Gun\"\n     PlayerViewOffset=(X=24.000000,Y=-10.000000,Z=-14.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.StealthPistol'\n     PickupViewMesh=LodMesh'DeusExItems.StealthPistolPickup'\n     ThirdPersonMesh=LodMesh'DeusExItems.StealthPistol3rd'\n     Icon=Texture'DeusExUI.Icons.BeltIconStealthPistol'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconStealthPistol'\n     largeIconWidth=47\n     largeIconHeight=37\n     Description=\"A modified nail pistol with extra nail capacity and more accuracy than a regular nailgun.\"\n     beltDescription=\"|p2LGUN\"\n     Mesh=LodMesh'DeusExItems.StealthPistolPickup'\n     CollisionRadius=8.000000\n     CollisionHeight=0.800000\n}\n",
            "name": "WeaponLightdartGun.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "GoverningSkill=Class'DeusEx.SkillWeaponPistol'",
                    "NoiseLevel=0.010000",
                    "ShotTime=0.150000",
                    "reloadTime=0.000000",
                    "HitDamage=8",
                    "maxRange=4800",
                    "AccurateRange=2400",
                    "BaseAccuracy=0.800000",
                    "bCanHaveScope=True",
                    "bHasScope=True",
                    "ScopeFOV=25",
                    "bCanHaveLaser=True",
                    "bHasLaser=True",
                    "recoilStrength=0.100000",
                    "mpReloadTime=1.500000",
                    "mpHitDamage=30",
                    "mpBaseAccuracy=0.200000",
                    "mpAccurateRange=1200",
                    "mpMaxRange=8200",
                    "bCanHaveModBaseAccuracy=True",
                    "bCanHaveModReloadCount=True",
                    "bCanHaveModAccurateRange=True",
                    "bCanHaveModReloadTime=True",
                    "FireOffset=(X=-24.000000,Y=10.000000,Z=14.000000)",
                    "ProjectileClass=Class'PartyStuff.DartLight'",
                    "shakemag=50.000000",
                    "FireSound=Sound'DeusExSounds.Weapons.StealthPistolFire'",
                    "AltFireSound=Sound'DeusExSounds.Weapons.StealthPistolReloadEnd'",
                    "CockingSound=Sound'DeusExSounds.Weapons.StealthPistolReload'",
                    "SelectSound=Sound'DeusExSounds.Weapons.StealthPistolSelect'",
                    "InventoryGroup=3",
                    "ItemName=\"|P2Light Gun\"",
                    "PlayerViewOffset=(X=24.000000,Y=-10.000000,Z=-14.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.StealthPistol'",
                    "PickupViewMesh=LodMesh'DeusExItems.StealthPistolPickup'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.StealthPistol3rd'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconStealthPistol'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconStealthPistol'",
                    "largeIconWidth=47",
                    "largeIconHeight=37",
                    "Description=\"A modified nail pistol with extra nail capacity and more accuracy than a regular nailgun.\"",
                    "beltDescription=\"|p2LGUN\"",
                    "Mesh=LodMesh'DeusExItems.StealthPistolPickup'",
                    "CollisionRadius=8.000000",
                    "CollisionHeight=0.800000"
                ],
                "exec": [],
                "extends": "DeusExWeapon",
                "functions": {
                    "LaserOff": {
                        "body": "{\nif(bTorchOn)\n\tTorchToggle();\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "LaserOff",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "LaserToggle": {
                        "body": "{\nTorchToggle();\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "LaserToggle",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "OffTorch": {
                        "body": "{\nowner.LightType=LT_None;\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "OffTorch",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "OnTorch": {
                        "body": "{\nowner.LightEffect=LE_Spotlight;\nowner.LightBrightness=120;\nowner.LightSaturation=255;\nowner.LightRadius=64;\nowner.LightPeriod=32;\nowner.LightCone=64;\nowner.LightType=LT_Steady;\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "OnTorch",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t\tReloadCount = mpReloadCount;\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    },
                    "TorchToggle": {
                        "body": "{\nif (bTorchOn)\n\t{\n\tbTorchOn=False;\n\tOffTorch();\n\t}\nelse\n\t{\n\tbTorchOn=True;\n\tOnTorch();\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TorchToggle",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 184,
                "replication": "",
                "states": [],
                "variables": [
                    "var bool bTorchOn;"
                ]
            }
        },
        "WeaponLightshow.uc": {
            "body": "//=============================================================================\n// WeaponFlashBang.\n//=============================================================================\nclass WeaponLightshow expands WeaponEMPGrenade;\n\nfunction PostBeginPlay()\n{\n   Super.PostBeginPlay();\n   bWeaponStay=False;\n}\n\nfunction Fire(float Value)\n{\n\tif (Pawn(Owner) != None)\n\t{\n\t\tif (bNearWall)\n\t\t{\n\t\t\tbReadyToFire = False;\n\t\t\tGotoState('NormalFire');\n\t\t\tbPointing = True;\n\t\t\tPlayAnim('Place',, 0.1);\n\t\t\treturn;\n\t\t}\n\t}\n\tSuper.Fire(Value);\n}\n\nfunction Projectile ProjectileFire(class<projectile> ProjClass, float ProjSpeed, bool bWarn)\n{\n\tlocal Projectile proj;\n\n\tproj = Super.ProjectileFire(ProjClass, ProjSpeed, bWarn);\n\n\tif (proj != None)\n\t\tproj.PlayAnim('Open');\n}\n\nfunction BecomePickup()\n{\n\tSuper.BecomePickup();\n   if (Level.NetMode != NM_Standalone)\n      if (bTossedOut)\n         Lifespan = 0.0;\n}\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return (BeltSpot == 4);\n}\n\ndefaultproperties\n{\n     AmmoName=Class'PartyStuff.AmmoLS'\n     ProjectileClass=Class'PartyStuff.Lightshow'\n     InventoryGroup=35\n     ItemName=\"Lightshow\"\n     ItemArticle=\"a\"\n     Description=\"A Lighter..\"\n     beltDescription=\"LIGHT\"\n     MultiSkins(4)=Texture'DeusExDeco.Skins.AlarmLightTex3'\n}\n",
            "name": "WeaponLightshow.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "AmmoName=Class'PartyStuff.AmmoLS'",
                    "ProjectileClass=Class'PartyStuff.Lightshow'",
                    "InventoryGroup=35",
                    "ItemName=\"Lightshow\"",
                    "ItemArticle=\"a\"",
                    "Description=\"A Lighter..\"",
                    "beltDescription=\"LIGHT\"",
                    "MultiSkins(4)=Texture'DeusExDeco.Skins.AlarmLightTex3'"
                ],
                "exec": [],
                "extends": "WeaponEMPGrenade",
                "functions": {
                    "BecomePickup": {
                        "body": "{\n\tSuper.BecomePickup();\n   if (Level.NetMode != NM_Standalone)\n      if (bTossedOut)\n         Lifespan = 0.0;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "BecomePickup",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Fire": {
                        "body": "{\n\tif (Pawn(Owner) != None)\n\t{\n\t\tif (bNearWall)\n\t\t{\n\t\t\tbReadyToFire = False;\n\t\t\tGotoState('NormalFire');\n\t\t\tbPointing = True;\n\t\t\tPlayAnim('Place',, 0.1);\n\t\t\treturn;\n\t\t}\n\t}\n\tSuper.Fire(Value);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Fire",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "Value"
                            ]
                        ],
                        "return": ""
                    },
                    "PostBeginPlay": {
                        "body": "{\n   Super.PostBeginPlay();\n   bWeaponStay=False;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ProjectileFire": {
                        "body": "{\n\n\tproj = Super.ProjectileFire(ProjClass, ProjSpeed, bWarn);\n\n\tif (proj != None)\n\t\tproj.PlayAnim('Open');\n}",
                        "locals": [
                            "local Projectile proj;"
                        ],
                        "modifiers": [],
                        "name": "ProjectileFire",
                        "native": false,
                        "param": [
                            [
                                "class<projectile>",
                                "ProjClass"
                            ],
                            [
                                "float",
                                "ProjSpeed"
                            ],
                            [
                                "bool",
                                "bWarn"
                            ]
                        ],
                        "return": "Projectile"
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return (BeltSpot == 4);\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 61,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "WeaponMagnum.uc": {
            "body": "class WeaponMagnum extends WeaponPistol;\n\nvar float\tmpRecoilStrength;\nvar MuzzleFlash flash;\nvar float mpNoScopeMult;\nvar() float Thick;\nvar() float PawnThick;\n\n//simulated function bool clientFire(float value)\nfunction Fire(float value)\n{\n     Local Vector offset,x,y,z;\n     local rotator rot;\n     if (owner==none)\n        return;\n     else if (!bHasMuzzleFlash)\n         {\n         super.fire(value);\n         return;\n         }\n     GetAxes(pawn(owner).ViewRotation,x,y,z);\n     if (owner.IsA('DeusExPlayer'))\n        {\n        offset = Owner.Location + CalcDrawOffset() + FireOffset.X * X + FireOffset.Y * Y + FireOffset.Z * Z;\n        rot=DeusExPlayer(owner).viewRotation;\n        }\n     else\n         {\n         offset= Owner.Location;\n         offset += X * Owner.CollisionRadius*2;\n         rot=owner.rotation;\n         }\n     Flash = spawn(class'muzzleflash',,,offset,rot);\n     if(flash!=none)\n         {\n         Flash.setbase(owner);\n         //Flash.playanim('shoot');\n         }\n     super.fire(value);\n}\n\nfunction TraceFire (float Accuracy)\n{\n\tlocal Vector HitLocation;\n\tlocal Vector HitNormal;\n\tlocal Vector StartTrace;\n\tlocal Vector EndTrace;\n\tlocal Vector X;\n\tlocal Vector Y;\n\tlocal Vector Z;\n\tlocal Actor Other;\n\tlocal Pawn PawnOwner;\n\tlocal float Penetration;\n\tlocal Rotator rot;\n\t\n\tPawnOwner=Pawn(Owner);\n\tOwner.MakeNoise(PawnOwner.SoundDampening);\n\tGetAxes(PawnOwner.ViewRotation,X,Y,Z);\n\tStartTrace=Owner.Location + CalcDrawOffset() + FireOffset.X * X + FireOffset.Y * Y + FireOffset.Z * Z;\n\tAdjustedAim=PawnOwner.AdjustAim(1000000.00,StartTrace,2 * aimerror,False,False);\n\tEndTrace=StartTrace + Accuracy * (FRand() - 0.50) * Y * 1000 + Accuracy * (FRand() - 0.50) * Z * 1000;\n\tX=vector(AdjustedAim);\n\tEndTrace += 10000 * X;\n\tOther=PawnOwner.TraceShot(HitLocation,HitNormal,EndTrace,StartTrace);\n\trot = Rotator(EndTrace - StartTrace);\n\tSpawn(class'Tracer',,, StartTrace + 96 * Vector(rot), rot);\n\tProcessTraceHit(Other,HitLocation,HitNormal,X,Y,Z);\n\tif ( Other.IsA('Pawn') )\n\t{\n\t\tPenetration=PawnThick;\n\t}\n\telse\n\t{\n\t\tPenetration=Thick;\n\t}\n\tStartTrace=HitLocation + HitNormal + Penetration * X;\n\tEndTrace=StartTrace + Accuracy * (FRand() - 0.50) * Y * 1000 + Accuracy * (FRand() - 0.50) * Z * 1000;\n\tEndTrace += 10000 * X;\n\tOther=PawnOwner.TraceShot(HitLocation,HitNormal,EndTrace,StartTrace);\n\tProcessTraceHit(Other,HitLocation,HitNormal,X,Y,Z);\n}\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\ndefaultproperties\n{\n     Thick=64.000000\n     PawnThick=32.000000\n     HitDamage=45\n     bHasScope=True\n     mpHitDamage=100\n     FireSound=Sound'DeusExSounds.Weapons.RifleFire'\n     AltFireSound=Sound'DeusExSounds.Weapons.RifleReloadEnd'\n     CockingSound=Sound'DeusExSounds.Weapons.RifleReload'\n     SelectSound=Sound'DeusExSounds.Weapons.RifleSelect'\n     InventoryGroup=122\n     ItemName=\"Magnum\"\n     ItemArticle=\"the\"\n     beltDescription=\"MGNM\"\n     Mass=1.000000\n}\n",
            "name": "WeaponMagnum.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "Thick=64.000000",
                    "PawnThick=32.000000",
                    "HitDamage=45",
                    "bHasScope=True",
                    "mpHitDamage=100",
                    "FireSound=Sound'DeusExSounds.Weapons.RifleFire'",
                    "AltFireSound=Sound'DeusExSounds.Weapons.RifleReloadEnd'",
                    "CockingSound=Sound'DeusExSounds.Weapons.RifleReload'",
                    "SelectSound=Sound'DeusExSounds.Weapons.RifleSelect'",
                    "InventoryGroup=122",
                    "ItemName=\"Magnum\"",
                    "ItemArticle=\"the\"",
                    "beltDescription=\"MGNM\"",
                    "Mass=1.000000"
                ],
                "exec": [],
                "extends": "WeaponPistol",
                "functions": {
                    "Fire": {
                        "body": "{\n     if (owner==none)\n        return;\n     else if (!bHasMuzzleFlash)\n         {\n         super.fire(value);\n         return;\n         }\n     GetAxes(pawn(owner).ViewRotation,x,y,z);\n     if (owner.IsA('DeusExPlayer'))\n        {\n        offset = Owner.Location + CalcDrawOffset() + FireOffset.X * X + FireOffset.Y * Y + FireOffset.Z * Z;\n        rot=DeusExPlayer(owner).viewRotation;\n        }\n     else\n         {\n         offset= Owner.Location;\n         offset += X * Owner.CollisionRadius*2;\n         rot=owner.rotation;\n         }\n     Flash = spawn(class'muzzleflash',,,offset,rot);\n     if(flash!=none)\n         {\n         Flash.setbase(owner);\n         //Flash.playanim('shoot');\n         }\n     super.fire(value);\n}",
                        "locals": [
                            "Local Vector offset,x,y,z;",
                            "local rotator rot;"
                        ],
                        "modifiers": [],
                        "name": "Fire",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "value"
                            ]
                        ],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    },
                    "TraceFire": {
                        "body": "{\n\t\n\tPawnOwner=Pawn(Owner);\n\tOwner.MakeNoise(PawnOwner.SoundDampening);\n\tGetAxes(PawnOwner.ViewRotation,X,Y,Z);\n\tStartTrace=Owner.Location + CalcDrawOffset() + FireOffset.X * X + FireOffset.Y * Y + FireOffset.Z * Z;\n\tAdjustedAim=PawnOwner.AdjustAim(1000000.00,StartTrace,2 * aimerror,False,False);\n\tEndTrace=StartTrace + Accuracy * (FRand() - 0.50) * Y * 1000 + Accuracy * (FRand() - 0.50) * Z * 1000;\n\tX=vector(AdjustedAim);\n\tEndTrace += 10000 * X;\n\tOther=PawnOwner.TraceShot(HitLocation,HitNormal,EndTrace,StartTrace);\n\trot = Rotator(EndTrace - StartTrace);\n\tSpawn(class'Tracer',,, StartTrace + 96 * Vector(rot), rot);\n\tProcessTraceHit(Other,HitLocation,HitNormal,X,Y,Z);\n\tif ( Other.IsA('Pawn') )\n\t{\n\t\tPenetration=PawnThick;\n\t}\n\telse\n\t{\n\t\tPenetration=Thick;\n\t}\n\tStartTrace=HitLocation + HitNormal + Penetration * X;\n\tEndTrace=StartTrace + Accuracy * (FRand() - 0.50) * Y * 1000 + Accuracy * (FRand() - 0.50) * Z * 1000;\n\tEndTrace += 10000 * X;\n\tOther=PawnOwner.TraceShot(HitLocation,HitNormal,EndTrace,StartTrace);\n\tProcessTraceHit(Other,HitLocation,HitNormal,X,Y,Z);\n}",
                        "locals": [
                            "local Vector HitLocation;",
                            "local Vector HitNormal;",
                            "local Vector StartTrace;",
                            "local Vector EndTrace;",
                            "local Vector X;",
                            "local Vector Y;",
                            "local Vector Z;",
                            "local Actor Other;",
                            "local Pawn PawnOwner;",
                            "local float Penetration;",
                            "local Rotator rot;"
                        ],
                        "modifiers": [],
                        "name": "TraceFire",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "Accuracy"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 105,
                "replication": "",
                "states": [],
                "variables": [
                    "var float\tmpRecoilStrength;",
                    "var MuzzleFlash flash;",
                    "var float mpNoScopeMult;",
                    "var() float Thick;",
                    "var() float PawnThick;"
                ]
            }
        },
        "WeaponMomsKnife.uc": {
            "body": "//=============================================================================\n// WeaponHideAGun.\n//=============================================================================\nclass WeaponMomsKnife extends DeusExWeapon;\n\nfunction Fire(float Value)\n{\nlocal MomsKnifeRespawner MKR;\n\tsuper.Fire(value);\n\tMKR = Spawn(class'MomsKnifeRespawner',,, Location);\n\tMKR.Giver = PlayerPawn(Owner);\n\tMKR.SetTimer(2,False);\n\tDestroy();\n}\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t}\n}\n\ndefaultproperties\n{\n     LowAmmoWaterMark=0\n     GoverningSkill=Class'DeusEx.SkillWeaponLowTech'\n     NoiseLevel=0.050000\n     EnemyEffective=ENMEFF_Organic\n     Concealability=CONC_Visual\n     reloadTime=0.000000\n     HitDamage=5\n     maxRange=80\n     AccurateRange=80\n     BaseAccuracy=1.000000\n     bHasMuzzleFlash=False\n     bFallbackWeapon=True\n     mpHitDamage=20\n     mpBaseAccuracy=1.000000\n     mpAccurateRange=96\n     mpMaxRange=96\n     AmmoName=Class'DeusEx.AmmoNone'\n     ReloadCount=0\n     FireOffset=(X=-5.000000,Y=8.000000,Z=14.000000)\n     ProjectileClass=Class'PartyStuff.MomsKnife'\n     shakemag=20.000000\n     FireSound=Sound'DeusExSounds.Weapons.CombatKnifeFire'\n     SelectSound=Sound'DeusExSounds.Weapons.CombatKnifeSelect'\n     Misc1Sound=Sound'DeusExSounds.Weapons.CombatKnifeHitFlesh'\n     Misc2Sound=Sound'DeusExSounds.Weapons.CombatKnifeHitHard'\n     Misc3Sound=Sound'DeusExSounds.Weapons.CombatKnifeHitSoft'\n     InventoryGroup=11\n     ItemName=\"Knife\"\n     ItemArticle=\"Mom's\"\n     PlayerViewOffset=(X=5.000000,Y=-8.000000,Z=-14.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.CombatKnife'\n     PickupViewMesh=LodMesh'DeusExItems.CombatKnifePickup'\n     ThirdPersonMesh=LodMesh'DeusExItems.CombatKnife3rd'\n     Icon=Texture'DeusExUI.Icons.BeltIconCombatKnife'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconCombatKnife'\n     largeIconWidth=49\n     largeIconHeight=45\n     Description=\"An ultra-high carbon stainless steel knife.\"\n     beltDescription=\"MOMS\"\n     Mesh=LodMesh'DeusExItems.CombatKnifePickup'\n     CollisionRadius=12.650000\n     CollisionHeight=0.800000\n}\n",
            "name": "WeaponMomsKnife.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "LowAmmoWaterMark=0",
                    "GoverningSkill=Class'DeusEx.SkillWeaponLowTech'",
                    "NoiseLevel=0.050000",
                    "EnemyEffective=ENMEFF_Organic",
                    "Concealability=CONC_Visual",
                    "reloadTime=0.000000",
                    "HitDamage=5",
                    "maxRange=80",
                    "AccurateRange=80",
                    "BaseAccuracy=1.000000",
                    "bHasMuzzleFlash=False",
                    "bFallbackWeapon=True",
                    "mpHitDamage=20",
                    "mpBaseAccuracy=1.000000",
                    "mpAccurateRange=96",
                    "mpMaxRange=96",
                    "AmmoName=Class'DeusEx.AmmoNone'",
                    "ReloadCount=0",
                    "FireOffset=(X=-5.000000,Y=8.000000,Z=14.000000)",
                    "ProjectileClass=Class'PartyStuff.MomsKnife'",
                    "shakemag=20.000000",
                    "FireSound=Sound'DeusExSounds.Weapons.CombatKnifeFire'",
                    "SelectSound=Sound'DeusExSounds.Weapons.CombatKnifeSelect'",
                    "Misc1Sound=Sound'DeusExSounds.Weapons.CombatKnifeHitFlesh'",
                    "Misc2Sound=Sound'DeusExSounds.Weapons.CombatKnifeHitHard'",
                    "Misc3Sound=Sound'DeusExSounds.Weapons.CombatKnifeHitSoft'",
                    "InventoryGroup=11",
                    "ItemName=\"Knife\"",
                    "ItemArticle=\"Mom's\"",
                    "PlayerViewOffset=(X=5.000000,Y=-8.000000,Z=-14.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.CombatKnife'",
                    "PickupViewMesh=LodMesh'DeusExItems.CombatKnifePickup'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.CombatKnife3rd'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconCombatKnife'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconCombatKnife'",
                    "largeIconWidth=49",
                    "largeIconHeight=45",
                    "Description=\"An ultra-high carbon stainless steel knife.\"",
                    "beltDescription=\"MOMS\"",
                    "Mesh=LodMesh'DeusExItems.CombatKnifePickup'",
                    "CollisionRadius=12.650000",
                    "CollisionHeight=0.800000"
                ],
                "exec": [],
                "extends": "DeusExWeapon",
                "functions": {
                    "Fire": {
                        "body": "{\n\tsuper.Fire(value);\n\tMKR = Spawn(class'MomsKnifeRespawner',,, Location);\n\tMKR.Giver = PlayerPawn(Owner);\n\tMKR.SetTimer(2,False);\n\tDestroy();\n}",
                        "locals": [
                            "local MomsKnifeRespawner MKR;"
                        ],
                        "modifiers": [],
                        "name": "Fire",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "Value"
                            ]
                        ],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 76,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "WeaponMomsKnives.uc": {
            "body": "class WeaponMomsKnives extends WeaponShuriken;\n\ndefaultproperties\n{\n     AmmoName=Class'PartyStuff.AmmoPoisonKnife'\n     ProjectileClass=Class'PartyStuff.MomsKnife'\n     ItemName=\"Mom's Knives\"\n     PlayerViewOffset=(X=5.000000,Y=-8.000000,Z=-14.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.CombatKnife'\n     PickupViewMesh=LodMesh'DeusExItems.CombatKnifePickup'\n     ThirdPersonMesh=LodMesh'DeusExItems.CombatKnife3rd'\n     Icon=Texture'DeusExUI.Icons.BeltIconCombatKnife'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconCombatKnife'\n     largeIconWidth=49\n     Description=\"An ultra-high carbon stainless steel knife.\"\n     beltDescription=\"MOMS T\"\n     Mesh=LodMesh'DeusExItems.CombatKnifePickup'\n     CollisionRadius=12.650000\n     CollisionHeight=0.800000\n}\n",
            "name": "WeaponMomsKnives.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "AmmoName=Class'PartyStuff.AmmoPoisonKnife'",
                    "ProjectileClass=Class'PartyStuff.MomsKnife'",
                    "ItemName=\"Mom's Knives\"",
                    "PlayerViewOffset=(X=5.000000,Y=-8.000000,Z=-14.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.CombatKnife'",
                    "PickupViewMesh=LodMesh'DeusExItems.CombatKnifePickup'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.CombatKnife3rd'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconCombatKnife'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconCombatKnife'",
                    "largeIconWidth=49",
                    "Description=\"An ultra-high carbon stainless steel knife.\"",
                    "beltDescription=\"MOMS T\"",
                    "Mesh=LodMesh'DeusExItems.CombatKnifePickup'",
                    "CollisionRadius=12.650000",
                    "CollisionHeight=0.800000"
                ],
                "exec": [],
                "extends": "WeaponShuriken",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 21,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "WeaponNailGun.uc": {
            "body": "//=============================================================================\n// WeaponNailGun.\n//=============================================================================\nclass WeaponNailGun extends DeusExWeapon;\n\nvar bool bTorchOn;\n\nreplication\n{\nreliable if(Role<ROLE_Authority)\n\tbTorchOn,TorchToggle;\nreliable if(Role==ROLE_Authority)\n\tOnTorch,OffTorch;\n}\n\nsimulated function LaserToggle()\n{\nTorchToggle();\n}\n\nsimulated function LaserOff()\n{\nif(bTorchOn)\n\tTorchToggle();\n}\n\nsimulated function TorchToggle()\n{\nif (bTorchOn)\n\t{\n\tbTorchOn=False;\n\tOffTorch();\n\t}\nelse\n\t{\n\tbTorchOn=True;\n\tOnTorch();\n\t}\n}\n\nsimulated function OnTorch()\n{\nowner.LightEffect=LE_Spotlight;\nowner.LightBrightness=120;\nowner.LightSaturation=255;\nowner.LightRadius=64;\nowner.LightPeriod=32;\nowner.LightCone=64;\nowner.LightType=LT_Steady;\n}\n\nsimulated function OffTorch()\n{\nowner.LightType=LT_None;\n}\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t\tReloadCount = mpReloadCount;\n\t}\n}\n\nfunction SpawnSmoke()\n{\n  local SmokeTrail trail;\n  local Vector X,Y,Z;\n\n   if (Owner != None)\n \n    trail = Spawn(Class'SmokeTrail',,, self.Location + CalcDrawOffset() + (FireOffset.X)* X + (FireOffset.Y) * Y  + (FireOffset.Z) * Z + vect(1,-0.8,1) * 3 );\n              if (trail != None)\n           \n             trail.SetBase(self);\n             trail.DrawScale = 1.00000;\n             trail.OrigScale = trail.DrawScale;\n         //    trail.RemoteRole = ROLE_None;\n            \n}\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\nfunction Fire(float Value)\n{\n\tSuper.Fire(Value);\n   \t  SpawnSmoke();\n}\n\nstate NormalFire //(Thanks to JimBowen for this Infinite ammo code) \n{ \n   Begin: \n      if ((ClipCount >= ReloadCount) && (ReloadCount != 0)) \n      { \n         if (!bAutomatic) \n         { \n            bFiring = False; \n            FinishAnim(); \n         } \n    \n         if (Owner != None) \n         { \n            if (Owner.IsA('DeusExPlayer')) \n            { \n               bFiring = False; \n            } \n            else if (Owner.IsA('ScriptedPawn')) \n            { \n               bFiring = False; \n               ReloadAmmo(); \n            } \n         } \n         else \n         { \n            if (bHasMuzzleFlash) \n               EraseMuzzleFlashTexture(); \n            GotoState('Idle'); \n         } \n      } \n      if ( bAutomatic && (( Level.NetMode == NM_DedicatedServer ) || ((Level.NetMode == NM_ListenServer) && Owner.IsA('DeusExPlayer') && !DeusExPlayer(Owner).PlayerIsListenClient()))) \n         GotoState('Idle'); \n    \n      Sleep(GetShotTime()); \n      if (bAutomatic) \n      { \n         GenerateBullet();       // In multiplayer bullets are generated by the client which will let the server know when \n         Goto('Begin'); \n      } \n      bFiring = False; \n      FinishAnim(); \n    \n   /*      // if ReloadCount is 0 and we're not hand to hand, then this is a \n      // single-use weapon so destroy it after firing once \n      if ((ReloadCount == 0) && !bHandToHand) \n      { \n         if (DeusExPlayer(Owner) != None) \n            DeusExPlayer(Owner).RemoveItemFromSlot(Self);   // remove it from the inventory grid \n         Destroy(); \n      } \n      */              // Do I REALLY need all that crap JUST for infinite ammo? \n      ReadyToFire(); \n   Done: \n      bFiring = False; \n      Finish(); \n}\n\ndefaultproperties\n{\n     GoverningSkill=Class'DeusEx.SkillWeaponPistol'\n     NoiseLevel=0.010000\n     ShotTime=0.150000\n     reloadTime=0.000000\n     HitDamage=8\n     maxRange=4800\n     AccurateRange=2400\n     BaseAccuracy=0.800000\n     bCanHaveScope=True\n     bHasScope=True\n     ScopeFOV=25\n     bCanHaveLaser=True\n     bHasLaser=True\n     recoilStrength=0.100000\n     mpReloadTime=1.500000\n     mpHitDamage=30\n     mpBaseAccuracy=0.200000\n     mpAccurateRange=1200\n     mpMaxRange=8200\n     bCanHaveModBaseAccuracy=True\n     bCanHaveModReloadCount=True\n     bCanHaveModAccurateRange=True\n     bCanHaveModReloadTime=True\n     FireOffset=(X=-24.000000,Y=10.000000,Z=14.000000)\n     ProjectileClass=Class'PartyStuff.Nail'\n     shakemag=50.000000\n     FireSound=Sound'DeusExSounds.Weapons.MiniCrossbowFire'\n     AltFireSound=Sound'DeusExSounds.Weapons.StealthPistolReloadEnd'\n     CockingSound=Sound'DeusExSounds.Weapons.StealthPistolReload'\n     SelectSound=Sound'DeusExSounds.Weapons.StealthPistolSelect'\n     InventoryGroup=113\n     ItemName=\"|P2Nail Gun\"\n     PlayerViewOffset=(X=24.000000,Y=-10.000000,Z=-14.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.StealthPistol'\n     PickupViewMesh=LodMesh'DeusExItems.StealthPistolPickup'\n     ThirdPersonMesh=LodMesh'DeusExItems.StealthPistol3rd'\n     Icon=Texture'DeusExUI.Icons.BeltIconStealthPistol'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconStealthPistol'\n     largeIconWidth=47\n     largeIconHeight=37\n     Description=\"A modified nail pistol with extra nail capacity and more accuracy than a regular nailgun.\"\n     beltDescription=\"|p2NGUN\"\n     Mesh=LodMesh'DeusExItems.StealthPistolPickup'\n     CollisionRadius=8.000000\n     CollisionHeight=0.800000\n}\n",
            "name": "WeaponNailGun.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "GoverningSkill=Class'DeusEx.SkillWeaponPistol'",
                    "NoiseLevel=0.010000",
                    "ShotTime=0.150000",
                    "reloadTime=0.000000",
                    "HitDamage=8",
                    "maxRange=4800",
                    "AccurateRange=2400",
                    "BaseAccuracy=0.800000",
                    "bCanHaveScope=True",
                    "bHasScope=True",
                    "ScopeFOV=25",
                    "bCanHaveLaser=True",
                    "bHasLaser=True",
                    "recoilStrength=0.100000",
                    "mpReloadTime=1.500000",
                    "mpHitDamage=30",
                    "mpBaseAccuracy=0.200000",
                    "mpAccurateRange=1200",
                    "mpMaxRange=8200",
                    "bCanHaveModBaseAccuracy=True",
                    "bCanHaveModReloadCount=True",
                    "bCanHaveModAccurateRange=True",
                    "bCanHaveModReloadTime=True",
                    "FireOffset=(X=-24.000000,Y=10.000000,Z=14.000000)",
                    "ProjectileClass=Class'PartyStuff.Nail'",
                    "shakemag=50.000000",
                    "FireSound=Sound'DeusExSounds.Weapons.MiniCrossbowFire'",
                    "AltFireSound=Sound'DeusExSounds.Weapons.StealthPistolReloadEnd'",
                    "CockingSound=Sound'DeusExSounds.Weapons.StealthPistolReload'",
                    "SelectSound=Sound'DeusExSounds.Weapons.StealthPistolSelect'",
                    "InventoryGroup=113",
                    "ItemName=\"|P2Nail Gun\"",
                    "PlayerViewOffset=(X=24.000000,Y=-10.000000,Z=-14.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.StealthPistol'",
                    "PickupViewMesh=LodMesh'DeusExItems.StealthPistolPickup'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.StealthPistol3rd'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconStealthPistol'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconStealthPistol'",
                    "largeIconWidth=47",
                    "largeIconHeight=37",
                    "Description=\"A modified nail pistol with extra nail capacity and more accuracy than a regular nailgun.\"",
                    "beltDescription=\"|p2NGUN\"",
                    "Mesh=LodMesh'DeusExItems.StealthPistolPickup'",
                    "CollisionRadius=8.000000",
                    "CollisionHeight=0.800000"
                ],
                "exec": [],
                "extends": "DeusExWeapon",
                "functions": {
                    "Fire": {
                        "body": "{\n\tSuper.Fire(Value);\n   \t  SpawnSmoke();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Fire",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "Value"
                            ]
                        ],
                        "return": ""
                    },
                    "LaserOff": {
                        "body": "{\nif(bTorchOn)\n\tTorchToggle();\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "LaserOff",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "LaserToggle": {
                        "body": "{\nTorchToggle();\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "LaserToggle",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "OffTorch": {
                        "body": "{\nowner.LightType=LT_None;\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "OffTorch",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "OnTorch": {
                        "body": "{\nowner.LightEffect=LE_Spotlight;\nowner.LightBrightness=120;\nowner.LightSaturation=255;\nowner.LightRadius=64;\nowner.LightPeriod=32;\nowner.LightCone=64;\nowner.LightType=LT_Steady;\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "OnTorch",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t\tReloadCount = mpReloadCount;\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "SpawnSmoke": {
                        "body": "{\n\n   if (Owner != None)\n \n    trail = Spawn(Class'SmokeTrail',,, self.Location + CalcDrawOffset() + (FireOffset.X)* X + (FireOffset.Y) * Y  + (FireOffset.Z) * Z + vect(1,-0.8,1) * 3 );\n              if (trail != None)\n           \n             trail.SetBase(self);\n             trail.DrawScale = 1.00000;\n             trail.OrigScale = trail.DrawScale;\n         //    trail.RemoteRole = ROLE_None;\n            \n}",
                        "locals": [
                            "local SmokeTrail trail;",
                            "local Vector X,Y,Z;"
                        ],
                        "modifiers": [],
                        "name": "SpawnSmoke",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    },
                    "TorchToggle": {
                        "body": "{\nif (bTorchOn)\n\t{\n\tbTorchOn=False;\n\tOffTorch();\n\t}\nelse\n\t{\n\tbTorchOn=True;\n\tOnTorch();\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TorchToggle",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 206,
                "replication": "",
                "states": [],
                "variables": [
                    "var bool bTorchOn;"
                ]
            }
        },
        "WeaponNailGunWeaker.uc": {
            "body": "//=============================================================================\n// WeaponNailGun.\n//=============================================================================\nclass WeaponNailGunWeaker extends DeusExWeapon;\n\nvar bool bTorchOn;\n\nreplication\n{\nreliable if(Role<ROLE_Authority)\n\tbTorchOn,TorchToggle;\nreliable if(Role==ROLE_Authority)\n\tOnTorch,OffTorch;\n}\n\nsimulated function LaserToggle()\n{\nTorchToggle();\n}\n\nsimulated function LaserOff()\n{\nif(bTorchOn)\n\tTorchToggle();\n}\n\nsimulated function TorchToggle()\n{\nif (bTorchOn)\n\t{\n\tbTorchOn=False;\n\tOffTorch();\n\t}\nelse\n\t{\n\tbTorchOn=True;\n\tOnTorch();\n\t}\n}\n\nsimulated function OnTorch()\n{\nowner.LightEffect=LE_Spotlight;\nowner.LightBrightness=120;\nowner.LightSaturation=255;\nowner.LightRadius=64;\nowner.LightPeriod=32;\nowner.LightCone=64;\nowner.LightType=LT_Steady;\n}\n\nsimulated function OffTorch()\n{\nowner.LightType=LT_None;\n}\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t\tReloadCount = mpReloadCount;\n\t}\n}\n\nfunction SpawnSmoke()\n{\n  local SmokeTrail trail;\n  local Vector X,Y,Z;\n\n   if (Owner != None)\n \n    trail = Spawn(Class'SmokeTrail',,, self.Location + CalcDrawOffset() + (FireOffset.X)* X + (FireOffset.Y) * Y  + (FireOffset.Z) * Z + vect(1,-0.8,1) * 3 );\n              if (trail != None)\n           \n             trail.SetBase(self);\n             trail.DrawScale = 1.00000;\n             trail.OrigScale = trail.DrawScale;\n         //    trail.RemoteRole = ROLE_None;\n            \n}\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\nfunction Fire(float Value)\n{\n\tSuper.Fire(Value);\n   \t  SpawnSmoke();\n}\n\nstate NormalFire //(Thanks to JimBowen for this Infinite ammo code) \n{ \n   Begin: \n      if ((ClipCount >= ReloadCount) && (ReloadCount != 0)) \n      { \n         if (!bAutomatic) \n         { \n            bFiring = False; \n            FinishAnim(); \n         } \n    \n         if (Owner != None) \n         { \n            if (Owner.IsA('DeusExPlayer')) \n            { \n               bFiring = False; \n            } \n            else if (Owner.IsA('ScriptedPawn')) \n            { \n               bFiring = False; \n               ReloadAmmo(); \n            } \n         } \n         else \n         { \n            if (bHasMuzzleFlash) \n               EraseMuzzleFlashTexture(); \n            GotoState('Idle'); \n         } \n      } \n      if ( bAutomatic && (( Level.NetMode == NM_DedicatedServer ) || ((Level.NetMode == NM_ListenServer) && Owner.IsA('DeusExPlayer') && !DeusExPlayer(Owner).PlayerIsListenClient()))) \n         GotoState('Idle'); \n    \n      Sleep(GetShotTime()); \n      if (bAutomatic) \n      { \n         GenerateBullet();       // In multiplayer bullets are generated by the client which will let the server know when \n         Goto('Begin'); \n      } \n      bFiring = False; \n      FinishAnim(); \n    \n   /*      // if ReloadCount is 0 and we're not hand to hand, then this is a \n      // single-use weapon so destroy it after firing once \n      if ((ReloadCount == 0) && !bHandToHand) \n      { \n         if (DeusExPlayer(Owner) != None) \n            DeusExPlayer(Owner).RemoveItemFromSlot(Self);   // remove it from the inventory grid \n         Destroy(); \n      } \n      */              // Do I REALLY need all that crap JUST for infinite ammo? \n      ReadyToFire(); \n   Done: \n      bFiring = False; \n      Finish(); \n}\n\ndefaultproperties\n{\n     GoverningSkill=Class'DeusEx.SkillWeaponPistol'\n     NoiseLevel=0.010000\n     ShotTime=0.150000\n     reloadTime=0.000000\n     HitDamage=8\n     maxRange=4800\n     AccurateRange=2400\n     BaseAccuracy=0.800000\n     bCanHaveScope=True\n     bHasScope=True\n     ScopeFOV=25\n     bCanHaveLaser=True\n     bHasLaser=True\n     recoilStrength=0.100000\n     mpReloadTime=1.500000\n     mpHitDamage=30\n     mpBaseAccuracy=0.200000\n     mpAccurateRange=1200\n     mpMaxRange=8200\n     bCanHaveModBaseAccuracy=True\n     bCanHaveModReloadCount=True\n     bCanHaveModAccurateRange=True\n     bCanHaveModReloadTime=True\n     FireOffset=(X=-24.000000,Y=10.000000,Z=14.000000)\n     ProjectileClass=Class'PartyStuff.Nail2'\n     shakemag=50.000000\n     FireSound=Sound'DeusExSounds.Weapons.MiniCrossbowFire'\n     AltFireSound=Sound'DeusExSounds.Weapons.StealthPistolReloadEnd'\n     CockingSound=Sound'DeusExSounds.Weapons.StealthPistolReload'\n     SelectSound=Sound'DeusExSounds.Weapons.StealthPistolSelect'\n     InventoryGroup=113\n     ItemName=\"|P2Nail Gun\"\n     PlayerViewOffset=(X=24.000000,Y=-10.000000,Z=-14.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.StealthPistol'\n     PickupViewMesh=LodMesh'DeusExItems.StealthPistolPickup'\n     ThirdPersonMesh=LodMesh'DeusExItems.StealthPistol3rd'\n     Icon=Texture'DeusExUI.Icons.BeltIconStealthPistol'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconStealthPistol'\n     largeIconWidth=47\n     largeIconHeight=37\n     Description=\"A modified nail pistol with extra nail capacity and more accuracy than a regular nailgun.\"\n     beltDescription=\"|p2NGUN\"\n     Mesh=LodMesh'DeusExItems.StealthPistolPickup'\n     CollisionRadius=8.000000\n     CollisionHeight=0.800000\n}\n",
            "name": "WeaponNailGunWeaker.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "GoverningSkill=Class'DeusEx.SkillWeaponPistol'",
                    "NoiseLevel=0.010000",
                    "ShotTime=0.150000",
                    "reloadTime=0.000000",
                    "HitDamage=8",
                    "maxRange=4800",
                    "AccurateRange=2400",
                    "BaseAccuracy=0.800000",
                    "bCanHaveScope=True",
                    "bHasScope=True",
                    "ScopeFOV=25",
                    "bCanHaveLaser=True",
                    "bHasLaser=True",
                    "recoilStrength=0.100000",
                    "mpReloadTime=1.500000",
                    "mpHitDamage=30",
                    "mpBaseAccuracy=0.200000",
                    "mpAccurateRange=1200",
                    "mpMaxRange=8200",
                    "bCanHaveModBaseAccuracy=True",
                    "bCanHaveModReloadCount=True",
                    "bCanHaveModAccurateRange=True",
                    "bCanHaveModReloadTime=True",
                    "FireOffset=(X=-24.000000,Y=10.000000,Z=14.000000)",
                    "ProjectileClass=Class'PartyStuff.Nail2'",
                    "shakemag=50.000000",
                    "FireSound=Sound'DeusExSounds.Weapons.MiniCrossbowFire'",
                    "AltFireSound=Sound'DeusExSounds.Weapons.StealthPistolReloadEnd'",
                    "CockingSound=Sound'DeusExSounds.Weapons.StealthPistolReload'",
                    "SelectSound=Sound'DeusExSounds.Weapons.StealthPistolSelect'",
                    "InventoryGroup=113",
                    "ItemName=\"|P2Nail Gun\"",
                    "PlayerViewOffset=(X=24.000000,Y=-10.000000,Z=-14.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.StealthPistol'",
                    "PickupViewMesh=LodMesh'DeusExItems.StealthPistolPickup'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.StealthPistol3rd'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconStealthPistol'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconStealthPistol'",
                    "largeIconWidth=47",
                    "largeIconHeight=37",
                    "Description=\"A modified nail pistol with extra nail capacity and more accuracy than a regular nailgun.\"",
                    "beltDescription=\"|p2NGUN\"",
                    "Mesh=LodMesh'DeusExItems.StealthPistolPickup'",
                    "CollisionRadius=8.000000",
                    "CollisionHeight=0.800000"
                ],
                "exec": [],
                "extends": "DeusExWeapon",
                "functions": {
                    "Fire": {
                        "body": "{\n\tSuper.Fire(Value);\n   \t  SpawnSmoke();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Fire",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "Value"
                            ]
                        ],
                        "return": ""
                    },
                    "LaserOff": {
                        "body": "{\nif(bTorchOn)\n\tTorchToggle();\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "LaserOff",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "LaserToggle": {
                        "body": "{\nTorchToggle();\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "LaserToggle",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "OffTorch": {
                        "body": "{\nowner.LightType=LT_None;\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "OffTorch",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "OnTorch": {
                        "body": "{\nowner.LightEffect=LE_Spotlight;\nowner.LightBrightness=120;\nowner.LightSaturation=255;\nowner.LightRadius=64;\nowner.LightPeriod=32;\nowner.LightCone=64;\nowner.LightType=LT_Steady;\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "OnTorch",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t\tReloadCount = mpReloadCount;\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "SpawnSmoke": {
                        "body": "{\n\n   if (Owner != None)\n \n    trail = Spawn(Class'SmokeTrail',,, self.Location + CalcDrawOffset() + (FireOffset.X)* X + (FireOffset.Y) * Y  + (FireOffset.Z) * Z + vect(1,-0.8,1) * 3 );\n              if (trail != None)\n           \n             trail.SetBase(self);\n             trail.DrawScale = 1.00000;\n             trail.OrigScale = trail.DrawScale;\n         //    trail.RemoteRole = ROLE_None;\n            \n}",
                        "locals": [
                            "local SmokeTrail trail;",
                            "local Vector X,Y,Z;"
                        ],
                        "modifiers": [],
                        "name": "SpawnSmoke",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    },
                    "TorchToggle": {
                        "body": "{\nif (bTorchOn)\n\t{\n\tbTorchOn=False;\n\tOffTorch();\n\t}\nelse\n\t{\n\tbTorchOn=True;\n\tOnTorch();\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TorchToggle",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 206,
                "replication": "",
                "states": [],
                "variables": [
                    "var bool bTorchOn;"
                ]
            }
        },
        "WeaponNanoSword2.uc": {
            "body": "//=============================================================================\n// WeaponNanoSword.\n//=============================================================================\nclass WeaponNanoSword2 extends DeusExWeapon;\n\nenum EModeNum\n{\n\tMode_Normal,\n\tMode_Throw,\n};\n\nVar EModeNum Mode;\nvar DeusExPlayer DXPl;\n\nreplication\n{\n\tReliable if(Role==ROLE_AUTHORITY)\n\t\tMode;\n}\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t}\n}\n\nFunction Fire(Float value)\n{\n\tlocal ThrownnanoSword S;\n\tDXPL=DeusExPlayer(Owner);\n\tIf(Mode==Mode_Throw)\n\t{\n\t\tS=Spawn(class'ThrownnanoSword',Pawn(Owner),,Location+vect(0,0,-2),DXPL.ViewRotation);\n\t\tif(S!=None)\n\t\t{\n\t\t\tS.SetOwner(DXPL);\n\t\t\tS.Lifespan=15;\n\t\t}\n\t\tDestroy();\n\t}\n\telse\n\t{\n\t\tSuper.Fire(Value);\n\t}\n}\n\nFunction cycleammo()\n{\n\tswitch Mode\n\t\t{\n\t\tcase MODE_Normal:\n\t\t\tMode = MODE_Throw;\n\t\t\tif (Role == ROLE_Authority)\n\t\t\tPawn(Owner).Clientmessage(\"Throwing mode\");\n\t\t\tbreak;\n\n\t\tcase MODE_Throw:\n\t\t\tMode = MODE_Normal;\n\t\t\tif (Role == ROLE_Authority)\n\t\t\tPawn(Owner).Clientmessage(\"Normal mode\");\n\t\t\tbreak;\n\t\t\t\n\t\t}\n}\n\nstate DownWeapon\n{\n\tfunction BeginState()\n\t{\n\t\tSuper.BeginState();\n\t\tLightType = LT_None;\n\t}\n}\n\nstate Idle\n{\n\tfunction BeginState()\n\t{\n\t\tSuper.BeginState();\n\t\tLightType = LT_Steady;\n\t}\n}\n\nauto state Pickup\n{\n\tfunction EndState()\n\t{\n\t\tSuper.EndState();\n\t\tLightType = LT_None;\n\t}\n}\n\ndefaultproperties\n{\n     LowAmmoWaterMark=0\n     GoverningSkill=Class'DeusEx.SkillWeaponLowTech'\n     NoiseLevel=0.050000\n     reloadTime=0.000000\n     HitDamage=20\n     maxRange=96\n     AccurateRange=96\n     BaseAccuracy=1.000000\n     AreaOfEffect=AOE_Cone\n     bHasMuzzleFlash=False\n     bHandToHand=True\n     mpHitDamage=10\n     mpBaseAccuracy=1.000000\n     mpAccurateRange=150\n     mpMaxRange=150\n     AmmoName=Class'DeusEx.AmmoNone'\n     ReloadCount=0\n     bInstantHit=True\n     FireOffset=(X=-21.000000,Y=16.000000,Z=27.000000)\n     shakemag=20.000000\n     FireSound=Sound'DeusExSounds.Weapons.NanoSwordFire'\n     SelectSound=Sound'DeusExSounds.Weapons.NanoSwordSelect'\n     Misc1Sound=Sound'DeusExSounds.Weapons.NanoSwordHitFlesh'\n     Misc2Sound=Sound'DeusExSounds.Weapons.NanoSwordHitHard'\n     Misc3Sound=Sound'DeusExSounds.Weapons.NanoSwordHitSoft'\n     InventoryGroup=14\n     ItemName=\"Dragon's Tooth Sword\"\n     ItemArticle=\"the\"\n     PlayerViewOffset=(X=21.000000,Y=-16.000000,Z=-27.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.NanoSword'\n     PickupViewMesh=LodMesh'DeusExItems.NanoSwordPickup'\n     ThirdPersonMesh=LodMesh'DeusExItems.NanoSword3rd'\n     LandSound=Sound'DeusExSounds.Generic.DropLargeWeapon'\n     Icon=Texture'DeusExUI.Icons.BeltIconDragonTooth'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconDragonTooth'\n     largeIconWidth=205\n     largeIconHeight=46\n     invSlotsX=4\n     Description=\"The true weapon of a modern warrior, the Dragon's Tooth is not a sword in the traditional sense, but a nanotechnologically constructed blade that is dynamically 'forged' on command into a non-eutactic solid. Nanoscale whetting devices insure that the blade is both unbreakable and lethally sharp.\"\n     beltDescription=\"DRAGON\"\n     Mesh=LodMesh'DeusExItems.NanoSwordPickup'\n     CollisionRadius=32.000000\n     CollisionHeight=2.400000\n     LightType=LT_Steady\n     LightEffect=LE_WateryShimmer\n     LightBrightness=224\n     LightHue=160\n     LightSaturation=64\n     LightRadius=4\n     Mass=20.000000\n}\n",
            "name": "WeaponNanoSword2.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "LowAmmoWaterMark=0",
                    "GoverningSkill=Class'DeusEx.SkillWeaponLowTech'",
                    "NoiseLevel=0.050000",
                    "reloadTime=0.000000",
                    "HitDamage=20",
                    "maxRange=96",
                    "AccurateRange=96",
                    "BaseAccuracy=1.000000",
                    "AreaOfEffect=AOE_Cone",
                    "bHasMuzzleFlash=False",
                    "bHandToHand=True",
                    "mpHitDamage=10",
                    "mpBaseAccuracy=1.000000",
                    "mpAccurateRange=150",
                    "mpMaxRange=150",
                    "AmmoName=Class'DeusEx.AmmoNone'",
                    "ReloadCount=0",
                    "bInstantHit=True",
                    "FireOffset=(X=-21.000000,Y=16.000000,Z=27.000000)",
                    "shakemag=20.000000",
                    "FireSound=Sound'DeusExSounds.Weapons.NanoSwordFire'",
                    "SelectSound=Sound'DeusExSounds.Weapons.NanoSwordSelect'",
                    "Misc1Sound=Sound'DeusExSounds.Weapons.NanoSwordHitFlesh'",
                    "Misc2Sound=Sound'DeusExSounds.Weapons.NanoSwordHitHard'",
                    "Misc3Sound=Sound'DeusExSounds.Weapons.NanoSwordHitSoft'",
                    "InventoryGroup=14",
                    "ItemName=\"Dragon's Tooth Sword\"",
                    "ItemArticle=\"the\"",
                    "PlayerViewOffset=(X=21.000000,Y=-16.000000,Z=-27.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.NanoSword'",
                    "PickupViewMesh=LodMesh'DeusExItems.NanoSwordPickup'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.NanoSword3rd'",
                    "LandSound=Sound'DeusExSounds.Generic.DropLargeWeapon'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconDragonTooth'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconDragonTooth'",
                    "largeIconWidth=205",
                    "largeIconHeight=46",
                    "invSlotsX=4",
                    "Description=\"The true weapon of a modern warrior, the Dragon's Tooth is not a sword in the traditional sense, but a nanotechnologically constructed blade that is dynamically 'forged' on command into a non-eutactic solid. Nanoscale whetting devices insure that the blade is both unbreakable and lethally sharp.\"",
                    "beltDescription=\"DRAGON\"",
                    "Mesh=LodMesh'DeusExItems.NanoSwordPickup'",
                    "CollisionRadius=32.000000",
                    "CollisionHeight=2.400000",
                    "LightType=LT_Steady",
                    "LightEffect=LE_WateryShimmer",
                    "LightBrightness=224",
                    "LightHue=160",
                    "LightSaturation=64",
                    "LightRadius=4",
                    "Mass=20.000000"
                ],
                "exec": [],
                "extends": "DeusExWeapon",
                "functions": {
                    "BeginState": {
                        "body": "{\n\t\tSuper.BeginState();\n\t\tLightType = LT_Steady;\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "BeginState",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "EndState": {
                        "body": "{\n\t\tSuper.EndState();\n\t\tLightType = LT_None;\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "EndState",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Fire": {
                        "body": "{\n\tDXPL=DeusExPlayer(Owner);\n\tIf(Mode==Mode_Throw)\n\t{\n\t\tS=Spawn(class'ThrownnanoSword',Pawn(Owner),,Location+vect(0,0,-2),DXPL.ViewRotation);\n\t\tif(S!=None)\n\t\t{\n\t\t\tS.SetOwner(DXPL);\n\t\t\tS.Lifespan=15;\n\t\t}\n\t\tDestroy();\n\t}\n\telse\n\t{\n\t\tSuper.Fire(Value);\n\t}\n}",
                        "locals": [
                            "local ThrownnanoSword S;"
                        ],
                        "modifiers": [],
                        "name": "Fire",
                        "native": false,
                        "param": [
                            [
                                "Float",
                                "value"
                            ]
                        ],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "cycleammo": {
                        "body": "{\n\tswitch Mode\n\t\t{\n\t\tcase MODE_Normal:\n\t\t\tMode = MODE_Throw;\n\t\t\tif (Role == ROLE_Authority)\n\t\t\tPawn(Owner).Clientmessage(\"Throwing mode\");\n\t\t\tbreak;\n\n\t\tcase MODE_Throw:\n\t\t\tMode = MODE_Normal;\n\t\t\tif (Role == ROLE_Authority)\n\t\t\tPawn(Owner).Clientmessage(\"Normal mode\");\n\t\t\tbreak;\n\t\t\t\n\t\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "cycleammo",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 155,
                "replication": "",
                "states": [],
                "variables": [
                    "Var EModeNum Mode;",
                    "var DeusExPlayer DXPl;"
                ]
            }
        },
        "WeaponNeedler.uc": {
            "body": "class WeaponNeedler extends WeaponAssaultGun;\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\ndefaultproperties\n{\n     HitDamage=8\n     bInstantHit=False\n     ProjectileClass=Class'DeusEx.Dart'\n     InventoryGroup=217\n     ItemName=\"|P1Needle Gun\"\n     beltDescription=\"NEEDLE\"\n     Mass=1.000000\n}\n",
            "name": "WeaponNeedler.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "HitDamage=8",
                    "bInstantHit=False",
                    "ProjectileClass=Class'DeusEx.Dart'",
                    "InventoryGroup=217",
                    "ItemName=\"|P1Needle Gun\"",
                    "beltDescription=\"NEEDLE\"",
                    "Mass=1.000000"
                ],
                "exec": [],
                "extends": "WeaponAssaultGun",
                "functions": {
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 18,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "WeaponNeedler2.uc": {
            "body": "class WeaponNeedler2 extends WeaponAssaultGun;\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\ndefaultproperties\n{\n     HitDamage=8\n     bInstantHit=False\n     ProjectileClass=Class'PartyStuff.DartLight'\n     InventoryGroup=255\n     ItemName=\"|P1Disco Needle Gun\"\n     beltDescription=\"D-NEEDLE\"\n     Mass=1.000000\n}\n",
            "name": "WeaponNeedler2.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "HitDamage=8",
                    "bInstantHit=False",
                    "ProjectileClass=Class'PartyStuff.DartLight'",
                    "InventoryGroup=255",
                    "ItemName=\"|P1Disco Needle Gun\"",
                    "beltDescription=\"D-NEEDLE\"",
                    "Mass=1.000000"
                ],
                "exec": [],
                "extends": "WeaponAssaultGun",
                "functions": {
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 18,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "WeaponPhatRifle.uc": {
            "body": "//=============================================================================\n// WeaponAssaultGun.\n//=============================================================================\nclass WeaponPhatRifle extends DeusExWeapon;\n\nvar float\tmpRecoilStrength;\nvar bool bReverse;\n\nfunction string GetDisplayString(Actor P)\n{\n\tif(P.isA('DeusExPlayer'))\n\t\treturn DeusExPlayer(p).PlayerReplicationInfo.PlayerName;\n\telse if(P.isA('ScriptedPawn'))\n\t\treturn ScriptedPawn(P).FamiliarName;\n\telse if(P.isA('DeusExDecoration'))\n\t\treturn DeusExDecoration(P).ItemName;\n}\n\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\nfunction ProcessTraceHit(Actor Other, Vector HitLocation, Vector HitNormal, Vector X, Vector Y, Vector Z)\n{\n\tlocal float        mult;\n\tlocal name         damageType;\n\tlocal DeusExPlayer dxPlayer;\n\tlocal Pawn P;\n\tlocal PSSing PSF;\n\t\n\tif( Other.isA('DeusExDecoration') || Other.isA('Pawn') )\n\t{\n\t\tif(!bReverse)\n\t\t{\n\t\t\tOther.Fatness += 5;\n\t\t\t\tif(Other.Fatness >= 249)\n\t\t\t\t{\n\t\t\t\t\tif(DeusExPlayer(Owner).bAdmin)\n\t\t\t\t\t\tDeusExPlayer(Other).ReducedDamageType = '';\n\t\t\t\t\tScriptedPawn(Other).bInvincible=False;\n\t\t\t\t\tDeusExDecoration(Other).bInvincible=False;\n\t\t\t\t\tOther.TakeDamage(200,DeusExPlayer(Owner),vect(0,0,0),vect(0,0,1),'Exploded');\n\t\t\t\t\tOther.Fatness=Other.Default.Fatness;\n\t\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tOther.Fatness -= 5;\n\t\t\t\tif(Other.Fatness <= 90)\n\t\t\t\t{\n\t\t\t\t\tif(DeusExPlayer(Owner).bAdmin)\n\t\t\t\t\t\tDeusExPlayer(Other).ReducedDamageType = '';\n\t\t\t\t\tScriptedPawn(Other).bInvincible=False;\n\t\t\t\t\tDeusExDecoration(Other).bInvincible=False;\n\t\t\t\t\tOther.TakeDamage(200,DeusExPlayer(Owner),vect(0,0,0),vect(0,0,1),'Exploded');\n\t\t\t\t\tOther.Fatness=Other.Default.Fatness;\n\t\t\t\t}\n\t\t}\n\t\treturn;\n\t}\n\nsuper.ProcessTraceHit(other, hitlocation, hitnormal, x, y, z);\n}\n\nsimulated function CycleAmmo()\n{\n\tbReverse = !bReverse;\n\tDeusExPlayer(Owner).ClientMessage(\"Reversing:\"@bReverse);\n}\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t\tReloadCount = mpReloadCount;\n\n\t\t// Tuned for advanced -> master skill system (Monte & Ricardo's number) client-side\n\t\trecoilStrength = 0.75;\n\t}\n}\n\ndefaultproperties\n{\n     LowAmmoWaterMark=30\n     GoverningSkill=Class'DeusEx.SkillWeaponRifle'\n     bAutomatic=True\n     ShotTime=0.100000\n     reloadTime=3.000000\n     HitDamage=0\n     BaseAccuracy=0.700000\n     bCanHaveLaser=True\n     bCanHaveSilencer=True\n     recoilStrength=0.500000\n     MinWeaponAcc=0.200000\n     mpReloadTime=0.500000\n     mpBaseAccuracy=1.000000\n     mpAccurateRange=2400\n     mpMaxRange=2400\n     mpReloadCount=30\n     bCanHaveModBaseAccuracy=True\n     bCanHaveModReloadCount=True\n     bCanHaveModAccurateRange=True\n     bCanHaveModReloadTime=True\n     bCanHaveModRecoilStrength=True\n     AmmoName=Class'DeusEx.Ammo762mm'\n     ReloadCount=30\n     PickupAmmoCount=30\n     bInstantHit=True\n     FireOffset=(X=-16.000000,Y=5.000000,Z=11.500000)\n     shakemag=200.000000\n     FireSound=Sound'DeusExSounds.Weapons.AssaultGunFire'\n     AltFireSound=Sound'DeusExSounds.Weapons.AssaultGunReloadEnd'\n     CockingSound=Sound'DeusExSounds.Weapons.AssaultGunReload'\n     SelectSound=Sound'DeusExSounds.Weapons.AssaultGunSelect'\n     InventoryGroup=4\n     ItemName=\"phat rifel ermergerd\"\n     PlayerViewOffset=(X=16.000000,Y=-5.000000,Z=-11.500000)\n     PlayerViewMesh=LodMesh'DeusExItems.AssaultGun'\n     PickupViewMesh=LodMesh'DeusExItems.AssaultGunPickup'\n     ThirdPersonMesh=LodMesh'DeusExItems.AssaultGun3rd'\n     LandSound=Sound'DeusExSounds.Generic.DropMediumWeapon'\n     Icon=Texture'DeusExUI.Icons.BeltIconAssaultGun'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconAssaultGun'\n     largeIconWidth=94\n     largeIconHeight=65\n     invSlotsX=2\n     invSlotsY=2\n     Description=\"The 7.62x51mm assault rifle is designed for close-quarters combat, utilizing a shortened barrel and 'bullpup' design for increased maneuverability. An additional underhand 20mm HE launcher increases the rifle's effectiveness against a variety of targets.\"\n     beltDescription=\"PHAT\"\n     Mesh=LodMesh'DeusExItems.AssaultGunPickup'\n     Fatness=255\n     CollisionRadius=15.000000\n     CollisionHeight=1.100000\n     Mass=30.000000\n}\n",
            "name": "WeaponPhatRifle.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "LowAmmoWaterMark=30",
                    "GoverningSkill=Class'DeusEx.SkillWeaponRifle'",
                    "bAutomatic=True",
                    "ShotTime=0.100000",
                    "reloadTime=3.000000",
                    "HitDamage=0",
                    "BaseAccuracy=0.700000",
                    "bCanHaveLaser=True",
                    "bCanHaveSilencer=True",
                    "recoilStrength=0.500000",
                    "MinWeaponAcc=0.200000",
                    "mpReloadTime=0.500000",
                    "mpBaseAccuracy=1.000000",
                    "mpAccurateRange=2400",
                    "mpMaxRange=2400",
                    "mpReloadCount=30",
                    "bCanHaveModBaseAccuracy=True",
                    "bCanHaveModReloadCount=True",
                    "bCanHaveModAccurateRange=True",
                    "bCanHaveModReloadTime=True",
                    "bCanHaveModRecoilStrength=True",
                    "AmmoName=Class'DeusEx.Ammo762mm'",
                    "ReloadCount=30",
                    "PickupAmmoCount=30",
                    "bInstantHit=True",
                    "FireOffset=(X=-16.000000,Y=5.000000,Z=11.500000)",
                    "shakemag=200.000000",
                    "FireSound=Sound'DeusExSounds.Weapons.AssaultGunFire'",
                    "AltFireSound=Sound'DeusExSounds.Weapons.AssaultGunReloadEnd'",
                    "CockingSound=Sound'DeusExSounds.Weapons.AssaultGunReload'",
                    "SelectSound=Sound'DeusExSounds.Weapons.AssaultGunSelect'",
                    "InventoryGroup=4",
                    "ItemName=\"phat rifel ermergerd\"",
                    "PlayerViewOffset=(X=16.000000,Y=-5.000000,Z=-11.500000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.AssaultGun'",
                    "PickupViewMesh=LodMesh'DeusExItems.AssaultGunPickup'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.AssaultGun3rd'",
                    "LandSound=Sound'DeusExSounds.Generic.DropMediumWeapon'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconAssaultGun'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconAssaultGun'",
                    "largeIconWidth=94",
                    "largeIconHeight=65",
                    "invSlotsX=2",
                    "invSlotsY=2",
                    "Description=\"The 7.62x51mm assault rifle is designed for close-quarters combat, utilizing a shortened barrel and 'bullpup' design for increased maneuverability. An additional underhand 20mm HE launcher increases the rifle's effectiveness against a variety of targets.\"",
                    "beltDescription=\"PHAT\"",
                    "Mesh=LodMesh'DeusExItems.AssaultGunPickup'",
                    "Fatness=255",
                    "CollisionRadius=15.000000",
                    "CollisionHeight=1.100000",
                    "Mass=30.000000"
                ],
                "exec": [],
                "extends": "DeusExWeapon",
                "functions": {
                    "CycleAmmo": {
                        "body": "{\n\tbReverse = !bReverse;\n\tDeusExPlayer(Owner).ClientMessage(\"Reversing:\"@bReverse);\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "CycleAmmo",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "GetDisplayString": {
                        "body": "{\n\tif(P.isA('DeusExPlayer'))\n\t\treturn DeusExPlayer(p).PlayerReplicationInfo.PlayerName;\n\telse if(P.isA('ScriptedPawn'))\n\t\treturn ScriptedPawn(P).FamiliarName;\n\telse if(P.isA('DeusExDecoration'))\n\t\treturn DeusExDecoration(P).ItemName;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetDisplayString",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "P"
                            ]
                        ],
                        "return": "string"
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t\tReloadCount = mpReloadCount;\n\n\t\t// Tuned for advanced -> master skill system (Monte & Ricardo's number) client-side\n\t\trecoilStrength = 0.75;\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ProcessTraceHit": {
                        "body": "{\n\t\n\tif( Other.isA('DeusExDecoration') || Other.isA('Pawn') )\n\t{\n\t\tif(!bReverse)\n\t\t{\n\t\t\tOther.Fatness += 5;\n\t\t\t\tif(Other.Fatness >= 249)\n\t\t\t\t{\n\t\t\t\t\tif(DeusExPlayer(Owner).bAdmin)\n\t\t\t\t\t\tDeusExPlayer(Other).ReducedDamageType = '';\n\t\t\t\t\tScriptedPawn(Other).bInvincible=False;\n\t\t\t\t\tDeusExDecoration(Other).bInvincible=False;\n\t\t\t\t\tOther.TakeDamage(200,DeusExPlayer(Owner),vect(0,0,0),vect(0,0,1),'Exploded');\n\t\t\t\t\tOther.Fatness=Other.Default.Fatness;\n\t\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tOther.Fatness -= 5;\n\t\t\t\tif(Other.Fatness <= 90)\n\t\t\t\t{\n\t\t\t\t\tif(DeusExPlayer(Owner).bAdmin)\n\t\t\t\t\t\tDeusExPlayer(Other).ReducedDamageType = '';\n\t\t\t\t\tScriptedPawn(Other).bInvincible=False;\n\t\t\t\t\tDeusExDecoration(Other).bInvincible=False;\n\t\t\t\t\tOther.TakeDamage(200,DeusExPlayer(Owner),vect(0,0,0),vect(0,0,1),'Exploded');\n\t\t\t\t\tOther.Fatness=Other.Default.Fatness;\n\t\t\t\t}\n\t\t}\n\t\treturn;\n\t}\n\nsuper.ProcessTraceHit(other, hitlocation, hitnormal, x, y, z);\n}",
                        "locals": [
                            "local float        mult;",
                            "local name         damageType;",
                            "local DeusExPlayer dxPlayer;",
                            "local Pawn P;",
                            "local PSSing PSF;"
                        ],
                        "modifiers": [],
                        "name": "ProcessTraceHit",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Other"
                            ],
                            [
                                "Vector",
                                "HitLocation"
                            ],
                            [
                                "Vector",
                                "HitNormal"
                            ],
                            [
                                "Vector",
                                "X"
                            ],
                            [
                                "Vector",
                                "Y"
                            ],
                            [
                                "Vector",
                                "Z"
                            ]
                        ],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 146,
                "replication": "",
                "states": [],
                "variables": [
                    "var float\tmpRecoilStrength;",
                    "var bool bReverse;"
                ]
            }
        },
        "WeaponPlasmaAssault.uc": {
            "body": "class WeaponPlasmaAssault extends WeaponAssaultGun;\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\ndefaultproperties\n{\n     HitDamage=8\n     bInstantHit=False\n     ProjectileClass=Class'DeusEx.PlasmaBolt'\n     InventoryGroup=41\n     ItemName=\"|P4Plasma Assault Gun\"\n     beltDescription=\"PLAS\"\n     Mass=1.000000\n}\n",
            "name": "WeaponPlasmaAssault.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "HitDamage=8",
                    "bInstantHit=False",
                    "ProjectileClass=Class'DeusEx.PlasmaBolt'",
                    "InventoryGroup=41",
                    "ItemName=\"|P4Plasma Assault Gun\"",
                    "beltDescription=\"PLAS\"",
                    "Mass=1.000000"
                ],
                "exec": [],
                "extends": "WeaponAssaultGun",
                "functions": {
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 18,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "WeaponPlasmaSword.uc": {
            "body": "//=============================================\n// PlasmaSword\n//=============================================\nClass WeaponPlasmaSword extends WeaponNanoSword;\n\n#exec OBJ LOAD FILE=\"..\\Textures\\Effects.utx\"\n\nvar Name WeaponDamageType;\n\nsimulated function ProcessTraceHit(Actor Other, Vector HitLocation, Vector HitNormal, Vector X, Vector Y, Vector Z)\n{\n\tlocal float        mult;\n\tlocal name         damageType;\n\tlocal DeusExPlayer dxPlayer;\n\n\tif (Other != None)\n\t{\n\t\t// AugCombat increases our damage if hand to hand\n\t\tmult = 1.0;\n\t\tif (bHandToHand && (DeusExPlayer(Owner) != None))\n\t\t{\n\t\t\tmult = DeusExPlayer(Owner).AugmentationSystem.GetAugLevelValue(class'AugCombat');\n\t\t\tif (mult == -1.0)\n\t\t\t\tmult = 1.0;\n\t\t}\n\n\t\t// skill also affects our damage\n\t\t// GetWeaponSkill returns 0.0 to -0.7 (max skill/aug)\n\t\tmult += -2.0 * GetWeaponSkill();\n\n\t\t// Determine damage type\n\t\tdamageType = WeaponDamageType;\n\n\t\tif (Other != None)\n\t\t{\n\t\t\tif (Other.bOwned)\n\t\t\t{\n\t\t\t\tdxPlayer = DeusExPlayer(Owner);\n\t\t\t\tif (dxPlayer != None)\n\t\t\t\t\tdxPlayer.AISendEvent('Futz', EAITYPE_Visual);\n\t\t\t}\n\t\t}\n\t\tif ((Other == Level) || (Other.IsA('Mover')))\n\t\t{\n\t\t\tif ( Role == ROLE_Authority )\n\t\t\t\tOther.TakeDamage(HitDamage * mult, Pawn(Owner), HitLocation, 1000.0*X, damageType);\n\n\t\t\tSelectiveSpawnEffects( HitLocation, HitNormal, Other, HitDamage * mult);\n\t\t}\n\t\telse if ((Other != self) && (Other != Owner))\n\t\t{\n\t\t\tif ( Role == ROLE_Authority )\n\t\t\t\tOther.TakeDamage(HitDamage * mult, Pawn(Owner), HitLocation, 1000.0*X, damageType);\n\t\t\tif (bHandToHand)\n\t\t\t\tSelectiveSpawnEffects( HitLocation, HitNormal, Other, HitDamage * mult);\n\n\t\t\tif (bPenetrating && Other.IsA('Pawn') && !Other.IsA('Robot'))\n\t\t\t\tSpawnBlood(HitLocation, HitNormal);\n\t\t}\n\t}\n   if (DeusExMPGame(Level.Game) != None)\n   {\n      if (DeusExPlayer(Other) != None)\n         DeusExMPGame(Level.Game).TrackWeapon(self,HitDamage * mult);\n      else\n         DeusExMPGame(Level.Game).TrackWeapon(self,0);\n   }\n}\n\nstate DownWeapon\n{\n\tfunction BeginState()\n\t{\n\t\tSuper.BeginState();\n\t\tLightType = LT_None;\n\n\t}\n}\n\nstate Idle\n{\n\tfunction BeginState()\n\t{\n\t\tSuper.BeginState();\n\t\tLightType = LT_Steady;\n\t}\n}\n\nauto state Pickup\n{\n\tfunction EndState()\n\t{\n\t\tSuper.EndState();\n\t\tLightType = LT_None;\n\t}\n}\n\ndefaultproperties\n{\n     WeaponDamageType=exploded\n     InventoryGroup=111\n     ItemName=\"Plasma Sword\"\n     Description=\"A strange, ancient triad weapon. You would be hard pressed finding out anything else about it.\"\n     beltDescription=\"PLASMA\"\n     MultiSkins(1)=FireTexture'Effects.Fire.OneFlame_G'\n     MultiSkins(2)=FireTexture'Effects.Fire.OneFlame_G'\n     MultiSkins(4)=FireTexture'Effects.Smoke.SmokePuff1'\n     MultiSkins(5)=FireTexture'Effects.Fire.OneFlame_G'\n     MultiSkins(6)=FireTexture'Effects.Fire.OneFlame_G'\n     LightHue=128\n}\n",
            "name": "WeaponPlasmaSword.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "WeaponDamageType=exploded",
                    "InventoryGroup=111",
                    "ItemName=\"Plasma Sword\"",
                    "Description=\"A strange, ancient triad weapon. You would be hard pressed finding out anything else about it.\"",
                    "beltDescription=\"PLASMA\"",
                    "MultiSkins(1)=FireTexture'Effects.Fire.OneFlame_G'",
                    "MultiSkins(2)=FireTexture'Effects.Fire.OneFlame_G'",
                    "MultiSkins(4)=FireTexture'Effects.Smoke.SmokePuff1'",
                    "MultiSkins(5)=FireTexture'Effects.Fire.OneFlame_G'",
                    "MultiSkins(6)=FireTexture'Effects.Fire.OneFlame_G'",
                    "LightHue=128"
                ],
                "exec": [
                    "#exec OBJ LOAD FILE=\"..\\Textures\\Effects.utx\""
                ],
                "extends": "WeaponNanoSword",
                "functions": {
                    "BeginState": {
                        "body": "{\n\t\tSuper.BeginState();\n\t\tLightType = LT_Steady;\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "BeginState",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "EndState": {
                        "body": "{\n\t\tSuper.EndState();\n\t\tLightType = LT_None;\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "EndState",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ProcessTraceHit": {
                        "body": "{\n\n\tif (Other != None)\n\t{\n\t\t// AugCombat increases our damage if hand to hand\n\t\tmult = 1.0;\n\t\tif (bHandToHand && (DeusExPlayer(Owner) != None))\n\t\t{\n\t\t\tmult = DeusExPlayer(Owner).AugmentationSystem.GetAugLevelValue(class'AugCombat');\n\t\t\tif (mult == -1.0)\n\t\t\t\tmult = 1.0;\n\t\t}\n\n\t\t// skill also affects our damage\n\t\t// GetWeaponSkill returns 0.0 to -0.7 (max skill/aug)\n\t\tmult += -2.0 * GetWeaponSkill();\n\n\t\t// Determine damage type\n\t\tdamageType = WeaponDamageType;\n\n\t\tif (Other != None)\n\t\t{\n\t\t\tif (Other.bOwned)\n\t\t\t{\n\t\t\t\tdxPlayer = DeusExPlayer(Owner);\n\t\t\t\tif (dxPlayer != None)\n\t\t\t\t\tdxPlayer.AISendEvent('Futz', EAITYPE_Visual);\n\t\t\t}\n\t\t}\n\t\tif ((Other == Level) || (Other.IsA('Mover')))\n\t\t{\n\t\t\tif ( Role == ROLE_Authority )\n\t\t\t\tOther.TakeDamage(HitDamage * mult, Pawn(Owner), HitLocation, 1000.0*X, damageType);\n\n\t\t\tSelectiveSpawnEffects( HitLocation, HitNormal, Other, HitDamage * mult);\n\t\t}\n\t\telse if ((Other != self) && (Other != Owner))\n\t\t{\n\t\t\tif ( Role == ROLE_Authority )\n\t\t\t\tOther.TakeDamage(HitDamage * mult, Pawn(Owner), HitLocation, 1000.0*X, damageType);\n\t\t\tif (bHandToHand)\n\t\t\t\tSelectiveSpawnEffects( HitLocation, HitNormal, Other, HitDamage * mult);\n\n\t\t\tif (bPenetrating && Other.IsA('Pawn') && !Other.IsA('Robot'))\n\t\t\t\tSpawnBlood(HitLocation, HitNormal);\n\t\t}\n\t}\n   if (DeusExMPGame(Level.Game) != None)\n   {\n      if (DeusExPlayer(Other) != None)\n         DeusExMPGame(Level.Game).TrackWeapon(self,HitDamage * mult);\n      else\n         DeusExMPGame(Level.Game).TrackWeapon(self,0);\n   }\n}",
                        "locals": [
                            "local float        mult;",
                            "local name         damageType;",
                            "local DeusExPlayer dxPlayer;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "ProcessTraceHit",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Other"
                            ],
                            [
                                "Vector",
                                "HitLocation"
                            ],
                            [
                                "Vector",
                                "HitNormal"
                            ],
                            [
                                "Vector",
                                "X"
                            ],
                            [
                                "Vector",
                                "Y"
                            ],
                            [
                                "Vector",
                                "Z"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 112,
                "replication": "",
                "states": [],
                "variables": [
                    "var Name WeaponDamageType;"
                ]
            }
        },
        "WeaponPoisonKnives.uc": {
            "body": "class WeaponPoisonKnives extends WeaponShuriken;\n\nfunction name WeaponDamageType()\n{\n\treturn 'Poison';\n}\n\ndefaultproperties\n{\n     AmmoName=Class'PartyStuff.AmmoPoisonKnife'\n     ProjectileClass=Class'PartyStuff.PoisonKnife'\n     ItemName=\"Poisoned Throwing Knives\"\n     Description=\"A favorite weapon of assassins in the Far East for centuries, throwing knives can be deadly when wielded by a master but are more generally used when it becomes desirable to send a message. The message is usually 'Your death is coming on swift feet.'|n|nThese throwing knives have been coated with a deadly toxin which is virtually guaranteed to kill within seconds.\"\n     beltDescription=\"PSN KNIFE\"\n}\n",
            "name": "WeaponPoisonKnives.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "AmmoName=Class'PartyStuff.AmmoPoisonKnife'",
                    "ProjectileClass=Class'PartyStuff.PoisonKnife'",
                    "ItemName=\"Poisoned Throwing Knives\"",
                    "Description=\"A favorite weapon of assassins in the Far East for centuries, throwing knives can be deadly when wielded by a master but are more generally used when it becomes desirable to send a message. The message is usually 'Your death is coming on swift feet.'|n|nThese throwing knives have been coated with a deadly toxin which is virtually guaranteed to kill within seconds.\"",
                    "beltDescription=\"PSN KNIFE\""
                ],
                "exec": [],
                "extends": "WeaponShuriken",
                "functions": {
                    "WeaponDamageType": {
                        "body": "{\n\treturn 'Poison';\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "WeaponDamageType",
                        "native": false,
                        "param": [],
                        "return": "name"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 16,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "WeaponPoisonSword.uc": {
            "body": "//=============================================\n// PoisonSword\n//=============================================\nClass WeaponPoisonSword extends WeaponNanoSword;\n\n#exec OBJ LOAD FILE=\"..\\Textures\\Effects.utx\"\n\nvar Name WeaponDamageType;\n\nsimulated function ProcessTraceHit(Actor Other, Vector HitLocation, Vector HitNormal, Vector X, Vector Y, Vector Z)\n{\n\tlocal float        mult;\n\tlocal name         damageType;\n\tlocal DeusExPlayer dxPlayer;\n\n\tif (Other != None)\n\t{\n\t\t// AugCombat increases our damage if hand to hand\n\t\tmult = 1.0;\n\t\tif (bHandToHand && (DeusExPlayer(Owner) != None))\n\t\t{\n\t\t\tmult = DeusExPlayer(Owner).AugmentationSystem.GetAugLevelValue(class'AugCombat');\n\t\t\tif (mult == -1.0)\n\t\t\t\tmult = 1.0;\n\t\t}\n\n\t\t// skill also affects our damage\n\t\t// GetWeaponSkill returns 0.0 to -0.7 (max skill/aug)\n\t\tmult += -2.0 * GetWeaponSkill();\n\n\t\t// Determine damage type\n\t\tdamageType = WeaponDamageType;\n\n\t\tif (Other != None)\n\t\t{\n\t\t\tif (Other.bOwned)\n\t\t\t{\n\t\t\t\tdxPlayer = DeusExPlayer(Owner);\n\t\t\t\tif (dxPlayer != None)\n\t\t\t\t\tdxPlayer.AISendEvent('Futz', EAITYPE_Visual);\n\t\t\t}\n\t\t}\n\t\tif ((Other == Level) || (Other.IsA('Mover')))\n\t\t{\n\t\t\tif ( Role == ROLE_Authority )\n\t\t\t\tOther.TakeDamage(HitDamage * mult, Pawn(Owner), HitLocation, 1000.0*X, damageType);\n\n\t\t\tSelectiveSpawnEffects( HitLocation, HitNormal, Other, HitDamage * mult);\n\t\t}\n\t\telse if ((Other != self) && (Other != Owner))\n\t\t{\n\t\t\tif ( Role == ROLE_Authority )\n\t\t\t\tOther.TakeDamage(HitDamage * mult, Pawn(Owner), HitLocation, 1000.0*X, damageType);\n\t\t\tif (bHandToHand)\n\t\t\t\tSelectiveSpawnEffects( HitLocation, HitNormal, Other, HitDamage * mult);\n\n\t\t\tif (bPenetrating && Other.IsA('Pawn') && !Other.IsA('Robot'))\n\t\t\t\tSpawnBlood(HitLocation, HitNormal);\n\t\t}\n\t}\n   if (DeusExMPGame(Level.Game) != None)\n   {\n      if (DeusExPlayer(Other) != None)\n         DeusExMPGame(Level.Game).TrackWeapon(self,HitDamage * mult);\n      else\n         DeusExMPGame(Level.Game).TrackWeapon(self,0);\n   }\n}\n\nstate DownWeapon\n{\n\tfunction BeginState()\n\t{\n\t\tSuper.BeginState();\n\t\tLightType = LT_None;\n\t}\n}\n\nstate Idle\n{\n\tfunction BeginState()\n\t{\n\t\tSuper.BeginState();\n\t\tLightType = LT_Steady;\n\t}\n}\n\nauto state Pickup\n{\n\tfunction EndState()\n\t{\n\t\tSuper.EndState();\n\t\tLightType = LT_None;\n\t}\n}\n\ndefaultproperties\n{\n     WeaponDamageType=Poison\n     InventoryGroup=110\n     ItemName=\"Snake's Tooth\"\n     Description=\"A strange, ancient triad weapon. You would be hard pressed finding out anything else about it.\"\n     beltDescription=\"SNAKE\"\n     MultiSkins(1)=Texture'Effects.Corona.Corona_D'\n     MultiSkins(2)=FireTexture'Effects.liquid.ambrosia_SFX'\n     MultiSkins(4)=FireTexture'Effects.Fire.flmethrwr_flme'\n     MultiSkins(5)=Texture'Effects.Corona.Corona_D'\n     MultiSkins(6)=Texture'Effects.Corona.Corona_D'\n     LightHue=40\n}\n",
            "name": "WeaponPoisonSword.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "WeaponDamageType=Poison",
                    "InventoryGroup=110",
                    "ItemName=\"Snake's Tooth\"",
                    "Description=\"A strange, ancient triad weapon. You would be hard pressed finding out anything else about it.\"",
                    "beltDescription=\"SNAKE\"",
                    "MultiSkins(1)=Texture'Effects.Corona.Corona_D'",
                    "MultiSkins(2)=FireTexture'Effects.liquid.ambrosia_SFX'",
                    "MultiSkins(4)=FireTexture'Effects.Fire.flmethrwr_flme'",
                    "MultiSkins(5)=Texture'Effects.Corona.Corona_D'",
                    "MultiSkins(6)=Texture'Effects.Corona.Corona_D'",
                    "LightHue=40"
                ],
                "exec": [
                    "#exec OBJ LOAD FILE=\"..\\Textures\\Effects.utx\""
                ],
                "extends": "WeaponNanoSword",
                "functions": {
                    "BeginState": {
                        "body": "{\n\t\tSuper.BeginState();\n\t\tLightType = LT_Steady;\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "BeginState",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "EndState": {
                        "body": "{\n\t\tSuper.EndState();\n\t\tLightType = LT_None;\n\t}",
                        "locals": [],
                        "modifiers": [],
                        "name": "EndState",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ProcessTraceHit": {
                        "body": "{\n\n\tif (Other != None)\n\t{\n\t\t// AugCombat increases our damage if hand to hand\n\t\tmult = 1.0;\n\t\tif (bHandToHand && (DeusExPlayer(Owner) != None))\n\t\t{\n\t\t\tmult = DeusExPlayer(Owner).AugmentationSystem.GetAugLevelValue(class'AugCombat');\n\t\t\tif (mult == -1.0)\n\t\t\t\tmult = 1.0;\n\t\t}\n\n\t\t// skill also affects our damage\n\t\t// GetWeaponSkill returns 0.0 to -0.7 (max skill/aug)\n\t\tmult += -2.0 * GetWeaponSkill();\n\n\t\t// Determine damage type\n\t\tdamageType = WeaponDamageType;\n\n\t\tif (Other != None)\n\t\t{\n\t\t\tif (Other.bOwned)\n\t\t\t{\n\t\t\t\tdxPlayer = DeusExPlayer(Owner);\n\t\t\t\tif (dxPlayer != None)\n\t\t\t\t\tdxPlayer.AISendEvent('Futz', EAITYPE_Visual);\n\t\t\t}\n\t\t}\n\t\tif ((Other == Level) || (Other.IsA('Mover')))\n\t\t{\n\t\t\tif ( Role == ROLE_Authority )\n\t\t\t\tOther.TakeDamage(HitDamage * mult, Pawn(Owner), HitLocation, 1000.0*X, damageType);\n\n\t\t\tSelectiveSpawnEffects( HitLocation, HitNormal, Other, HitDamage * mult);\n\t\t}\n\t\telse if ((Other != self) && (Other != Owner))\n\t\t{\n\t\t\tif ( Role == ROLE_Authority )\n\t\t\t\tOther.TakeDamage(HitDamage * mult, Pawn(Owner), HitLocation, 1000.0*X, damageType);\n\t\t\tif (bHandToHand)\n\t\t\t\tSelectiveSpawnEffects( HitLocation, HitNormal, Other, HitDamage * mult);\n\n\t\t\tif (bPenetrating && Other.IsA('Pawn') && !Other.IsA('Robot'))\n\t\t\t\tSpawnBlood(HitLocation, HitNormal);\n\t\t}\n\t}\n   if (DeusExMPGame(Level.Game) != None)\n   {\n      if (DeusExPlayer(Other) != None)\n         DeusExMPGame(Level.Game).TrackWeapon(self,HitDamage * mult);\n      else\n         DeusExMPGame(Level.Game).TrackWeapon(self,0);\n   }\n}",
                        "locals": [
                            "local float        mult;",
                            "local name         damageType;",
                            "local DeusExPlayer dxPlayer;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "ProcessTraceHit",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Other"
                            ],
                            [
                                "Vector",
                                "HitLocation"
                            ],
                            [
                                "Vector",
                                "HitNormal"
                            ],
                            [
                                "Vector",
                                "X"
                            ],
                            [
                                "Vector",
                                "Y"
                            ],
                            [
                                "Vector",
                                "Z"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 111,
                "replication": "",
                "states": [],
                "variables": [
                    "var Name WeaponDamageType;"
                ]
            }
        },
        "WeaponRailgun.uc": {
            "body": "class WeaponRailgun extends WeaponPlasmaRifle;\n\nvar LaserEmitter FireBeamEmitter; //== For firing effects\n\nsimulated function float CalculateAccuracy()\n{\n\tif(bLasing || bZoomed)\n\t\treturn 0.0;\n\n\treturn FMax(0.0, Super.CalculateAccuracy() - 0.5);\n}\n\nsimulated function DoTraceFire( float Accuracy )\n{\n\tlocal vector HitLocation, HitNormal, StartTrace, EndTrace, X, Y, Z, LastHit;\n\tlocal Rotator rot;\n\tlocal actor Other, Last;\n\tlocal Pawn pOther;\n//\tlocal Decoration dOther;\n\tlocal float dist;\n\tlocal float volume, radius;\n\tlocal float i;\n\tlocal int j;\n\n\tGetAIVolume(volume, radius);\n\tOwner.AISendEvent('WeaponFire', EAITYPE_Audio, volume, radius);\n\tOwner.AISendEvent('LoudNoise', EAITYPE_Audio, volume, radius);\n\tif (!Owner.IsA('PlayerPawn'))\n\t\tOwner.AISendEvent('Distress', EAITYPE_Audio, volume, radius);\n\n\t//PlayFiringSound();\n\n\tGetAxes(Pawn(owner).ViewRotation,X,Y,Z);\n\tStartTrace = ComputeProjectileStart(X, Y, Z);\n\tAdjustedAim = pawn(owner).AdjustAim(1000000, StartTrace, 2.75*AimError, False, False);\n\n\tEndTrace = StartTrace + Accuracy * (FRand()-0.5)*Y*1000 + Accuracy * (FRand()-0.5)*Z*1000 ;\n\tEndTrace += (FMax(1024.0, MaxRange) * vector(AdjustedAim));\n\n\tOther = Pawn(Owner).TraceShot(HitLocation,HitNormal,EndTrace,StartTrace);\n\tdist = Abs(VSize(HitLocation - Owner.Location));\n\tj = 0;\n\t//=== Note to self, rewrite with less accuracy but make so it does a backwards check when it clears a wall\n\twhile(Other != None && dist <= MaxRange && j <= 250)\n\t{\n\t\tj++;\n\t\ti = 1.000000;\n\t\tProcessTraceHit(Other, HitLocation, HitNormal, vector(AdjustedAim),Y,Z);\n\t\tStartTrace = HitLocation + (0.100000 * vector(AdjustedAim));\n\t\tLast = Other;\n\t\tOther = Pawn(Owner).TraceShot(HitLocation,HitNormal,EndTrace,StartTrace);\n\t\t//== If the trace hits the same object we want to force it to continue on.  For Level (map) shapes we want\n\t\t//== it to make sure the hit location is close, since it's possible to intersect the Level multiple times\n\t\twhile(Last == Other && i <= 300.000000 && (Other != Level || (Other == Level && Abs(VSize(HitLocation - StartTrace)) <= 0.200000)))\n\t\t{\n\t\t\ti += 1.000000;\n\t\t\tif(i > 300.000000)\n\t\t\t{\n\t\t\t\tdist = MaxRange + 2.000000;\n\t\t\t\tOther = None;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tStartTrace = HitLocation + (0.200000 * vector(AdjustedAim));\n\t\t\tOther = Pawn(Owner).TraceShot(HitLocation,HitNormal,EndTrace,StartTrace);\n\t\t}\n\t\tdist = Abs(VSize(HitLocation - Owner.Location));\n\t}\n\n\tFireBeamEmitter = Spawn(class'LaserEmitter', None, , Location, Pawn(Owner).ViewRotation);\n\tif(FireBeamEmitter != None)\n\t{\n\t\tFireBeamEmitter.AmbientSound = None;\n\t\tif(FireBeamEmitter.proxy != None)\n\t\t\tFireBeamEmitter.proxy.Skin = Texture'Wepn_Prifle_SFX';\n\t\tFireBeamEmitter.TurnOn();\n\t\tFireBeamEmitter.Lifespan = 0.5;\n\n\t\tfor(j=0; j<ArrayCount(FireBeamEmitter.spot); j++)\n\t\t{\n\t\t\tif (FireBeamEmitter.spot[j] != None)\n\t\t\t{\n\t\t\t\tFireBeamEmitter.spot[j].Skin = Texture'proj_Prifle';\n\t\t\t}\n\t\t}\n\n\t\t//== This code is supposed to make the beam go through walls, but it doesn't\n/*\t\tfor (j=0; j<ArrayCount(FireBeamEmitter.spot); j++)\n\t\t{\n\t\t\tif (FireBeamEmitter.spot[j] != None)\n\t\t\t{\n\t\t\t\tFireBeamEmitter.spot[j].Destroy();\n\t\t\t\tFireBeamEmitter.spot[j] = None;\n\t\t\t\tif (LaserIterator(FireBeamEmitter.RenderInterface) != None)\n\t\t\t\t\tLaserIterator(FireBeamEmitter.RenderInterface).DeleteBeam(j);\n\t\t\t}\n\t\t}\n\n\t\tif (LaserIterator(FireBeamEmitter.RenderInterface) != None)\n\t\t\tLaserIterator(FireBeamEmitter.RenderInterface).AddBeam(0, Location, FireBeamEmitter.Rotation, 1200);\n\n\t\tFireBeamEmitter.spot[0] = Spawn(class'LaserSpot', FireBeamEmitter, , Location, FireBeamEmitter.Rotation);\n\t\tif(FireBeamEmitter.spot[0] != None)\n\t\t\tFireBeamEmitter.spot[0].Skin = Texture'proj_Prifle';\n\n\t\tFireBeamEmitter.bIsOn = False;\n*/\n\t\t\n\n\t\tSetTimer(0.6, False); //== Deactivate the laser trail after a little while\n\t}\n\n\tEndTrace = Pawn(Owner).Location;\n\tEndTrace.Z += Pawn(Owner).BaseEyeHeight;\n\n\t//== This will make absolutely sure that we hit a target we're aiming at, just not necessarily in the right place\n\tforeach allActors(class'Pawn', pOther)\n\t{\n\t\tdist = Abs(VSize(pOther.Location - EndTrace));\n\n\t\tif(pOther != Owner && dist <= AccurateRange)\n\t\t{\n\t\t\tLastHit = pOther.Location;\n\t\t\tLastHit.Z += pOther.CollisionHeight / 2;\n\t\n\t\t\t//== Manually calculate the collision and offset.  Bleh.\n\t\t\tif(pOther.CollisionRadius > VSize( ( (dist * Normal(LastHit - EndTrace) ) - ( dist * Normal(vector(AdjustedAim)) ) ) * vect(1,1,0) ) &&\n\t\t\t\t(pOther.CollisionHeight / 2) > VSize( ( (dist * Normal(LastHit - EndTrace) ) - ( dist * Normal(vector(AdjustedAim)) ) ) * vect(0,0,1) ) )\n\t\t\t{\n\t\t\t\t//== Switch this with some code that does trace shot backwards and then forwards really quickly to get a proper hit location\n\t\t\t\tLastHit = dist * Normal(vector(AdjustedAim));\n\t\t\t\tOther = Pawn(Owner).TraceShot(HitLocation, HitNormal, LastHit - ( Normal(vector(AdjustedAim)) * pOther.CollisionRadius * 5.000000 / 9.000000), LastHit + (Normal(vector(AdjustedAim)) * pOther.CollisionRadius * 5.000000 / 9.000000));\n\n\t\t\t\t//== Since headshot/etc. calculation isn't working properly yet, let's just up the damage to absurd levels\n\t\t\t\tfor(j = 0; j < 5; j++)\n\t\t\t\t\tProcessTraceHit(pOther, HitLocation, HitNormal, vector(AdjustedAim), Y, Z);\n\t\t\t}\n\t\t}\n\t}\n\n\n\t//== This code needs to check for rotation, as decorations can have non-zero Z orientations\n/*\tforeach allActors(class'Decoration', dOther)\n\t{\n\t\tLastHit = dOther.Location;\n\t\tLastHit.Z += dOther.CollisionHeight / 2;\n\n\t\tEndTrace = Pawn(Owner).Location;\n\t\tEndTrace.Z += Pawn(Owner).BaseEyeHeight;\n\n\t\tif(dOther.CollisionRadius > VSize( ( (dist * Normal(LastHit - EndTrace) ) - ( dist * vector(Pawn(Owner).ViewRotation) ) ) * vect(1,1,0) ) &&\n\t\t\t(dOther.CollisionHeight / 2) > VSize( ( (dist * Normal(LastHit - EndTrace) ) - ( dist * vector(Pawn(Owner).ViewRotation) ) ) * vect(0,0,1) ) )\n\t\t{\n\t\t\tLastHit = dist * vector(Pawn(Owner).ViewRotation);\n\n\t\t\tProcessTraceHit(dOther, LastHit, -1 * vector(Pawn(Owner).ViewRotation), vector(AdjustedAim), Y, Z);\n\t\t}\n\t} */\n\n}\n\nfunction Timer()\n{\n\tif(FireBeamEmitter != None)\n\t{\n\t\tFireBeamEmitter.bIsOn = True;\n\t\tFireBeamEmitter.TurnOff();\n\t\tFireBeamEmitter.Destroy();\n\t}\n}\n\nfunction Tick(float deltaTime)\n{\n\tSuper.Tick(deltaTime);\n\n\t//== No timer set and a beam effect active\n\tif(FireBeamEmitter != None && TimerRate <=0)\n\t{\n\t\tFireBeamEmitter.bIsOn = True;\n\t\tFireBeamEmitter.TurnOff();\n\t\tFireBeamEmitter.Destroy();\n\t}\n}\n\ndefaultproperties\n{\n     LowAmmoWaterMark=5\n     NoiseLevel=0.250000\n     reloadTime=5.000000\n     HitDamage=25\n     maxRange=36000\n     AccurateRange=14000\n     BaseAccuracy=0.300000\n     bHasScope=True\n     bPenetrating=True\n     recoilStrength=0.600000\n     ReloadCount=1\n     PickupAmmoCount=4\n     bInstantHit=True\n     InventoryGroup=98\n     ItemName=\"Railgun\"\n     Description=\"A one-of-a-kind prototype, the Railgun compacts standard plasma slugs into a significantly smaller shape, then magnetically accelerates them to near-light speeds.  The force of the projectile allows it to penetrate multiple objects in succession; to compliment this the Railgun has been equipped with a heat scope.\"\n     beltDescription=\"RAILGUN\"\n     MultiSkins(1)=FireTexture'Effects.Electricity.BioCell_SFX'\n}\n",
            "name": "WeaponRailgun.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "LowAmmoWaterMark=5",
                    "NoiseLevel=0.250000",
                    "reloadTime=5.000000",
                    "HitDamage=25",
                    "maxRange=36000",
                    "AccurateRange=14000",
                    "BaseAccuracy=0.300000",
                    "bHasScope=True",
                    "bPenetrating=True",
                    "recoilStrength=0.600000",
                    "ReloadCount=1",
                    "PickupAmmoCount=4",
                    "bInstantHit=True",
                    "InventoryGroup=98",
                    "ItemName=\"Railgun\"",
                    "Description=\"A one-of-a-kind prototype, the Railgun compacts standard plasma slugs into a significantly smaller shape, then magnetically accelerates them to near-light speeds.  The force of the projectile allows it to penetrate multiple objects in succession; to compliment this the Railgun has been equipped with a heat scope.\"",
                    "beltDescription=\"RAILGUN\"",
                    "MultiSkins(1)=FireTexture'Effects.Electricity.BioCell_SFX'"
                ],
                "exec": [],
                "extends": "WeaponPlasmaRifle",
                "functions": {
                    "CalculateAccuracy": {
                        "body": "{\n\tif(bLasing || bZoomed)\n\t\treturn 0.0;\n\n\treturn FMax(0.0, Super.CalculateAccuracy() - 0.5);\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "CalculateAccuracy",
                        "native": false,
                        "param": [],
                        "return": "float"
                    },
                    "DoTraceFire": {
                        "body": "{\n//\tlocal Decoration dOther;\n\n\tGetAIVolume(volume, radius);\n\tOwner.AISendEvent('WeaponFire', EAITYPE_Audio, volume, radius);\n\tOwner.AISendEvent('LoudNoise', EAITYPE_Audio, volume, radius);\n\tif (!Owner.IsA('PlayerPawn'))\n\t\tOwner.AISendEvent('Distress', EAITYPE_Audio, volume, radius);\n\n\t//PlayFiringSound();\n\n\tGetAxes(Pawn(owner).ViewRotation,X,Y,Z);\n\tStartTrace = ComputeProjectileStart(X, Y, Z);\n\tAdjustedAim = pawn(owner).AdjustAim(1000000, StartTrace, 2.75*AimError, False, False);\n\n\tEndTrace = StartTrace + Accuracy * (FRand()-0.5)*Y*1000 + Accuracy * (FRand()-0.5)*Z*1000 ;\n\tEndTrace += (FMax(1024.0, MaxRange) * vector(AdjustedAim));\n\n\tOther = Pawn(Owner).TraceShot(HitLocation,HitNormal,EndTrace,StartTrace);\n\tdist = Abs(VSize(HitLocation - Owner.Location));\n\tj = 0;\n\t//=== Note to self, rewrite with less accuracy but make so it does a backwards check when it clears a wall\n\twhile(Other != None && dist <= MaxRange && j <= 250)\n\t{\n\t\tj++;\n\t\ti = 1.000000;\n\t\tProcessTraceHit(Other, HitLocation, HitNormal, vector(AdjustedAim),Y,Z);\n\t\tStartTrace = HitLocation + (0.100000 * vector(AdjustedAim));\n\t\tLast = Other;\n\t\tOther = Pawn(Owner).TraceShot(HitLocation,HitNormal,EndTrace,StartTrace);\n\t\t//== If the trace hits the same object we want to force it to continue on.  For Level (map) shapes we want\n\t\t//== it to make sure the hit location is close, since it's possible to intersect the Level multiple times\n\t\twhile(Last == Other && i <= 300.000000 && (Other != Level || (Other == Level && Abs(VSize(HitLocation - StartTrace)) <= 0.200000)))\n\t\t{\n\t\t\ti += 1.000000;\n\t\t\tif(i > 300.000000)\n\t\t\t{\n\t\t\t\tdist = MaxRange + 2.000000;\n\t\t\t\tOther = None;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tStartTrace = HitLocation + (0.200000 * vector(AdjustedAim));\n\t\t\tOther = Pawn(Owner).TraceShot(HitLocation,HitNormal,EndTrace,StartTrace);\n\t\t}\n\t\tdist = Abs(VSize(HitLocation - Owner.Location));\n\t}\n\n\tFireBeamEmitter = Spawn(class'LaserEmitter', None, , Location, Pawn(Owner).ViewRotation);\n\tif(FireBeamEmitter != None)\n\t{\n\t\tFireBeamEmitter.AmbientSound = None;\n\t\tif(FireBeamEmitter.proxy != None)\n\t\t\tFireBeamEmitter.proxy.Skin = Texture'Wepn_Prifle_SFX';\n\t\tFireBeamEmitter.TurnOn();\n\t\tFireBeamEmitter.Lifespan = 0.5;\n\n\t\tfor(j=0; j<ArrayCount(FireBeamEmitter.spot); j++)\n\t\t{\n\t\t\tif (FireBeamEmitter.spot[j] != None)\n\t\t\t{\n\t\t\t\tFireBeamEmitter.spot[j].Skin = Texture'proj_Prifle';\n\t\t\t}\n\t\t}\n\n\t\t//== This code is supposed to make the beam go through walls, but it doesn't\n/*\t\tfor (j=0; j<ArrayCount(FireBeamEmitter.spot); j++)\n\t\t{\n\t\t\tif (FireBeamEmitter.spot[j] != None)\n\t\t\t{\n\t\t\t\tFireBeamEmitter.spot[j].Destroy();\n\t\t\t\tFireBeamEmitter.spot[j] = None;\n\t\t\t\tif (LaserIterator(FireBeamEmitter.RenderInterface) != None)\n\t\t\t\t\tLaserIterator(FireBeamEmitter.RenderInterface).DeleteBeam(j);\n\t\t\t}\n\t\t}\n\n\t\tif (LaserIterator(FireBeamEmitter.RenderInterface) != None)\n\t\t\tLaserIterator(FireBeamEmitter.RenderInterface).AddBeam(0, Location, FireBeamEmitter.Rotation, 1200);\n\n\t\tFireBeamEmitter.spot[0] = Spawn(class'LaserSpot', FireBeamEmitter, , Location, FireBeamEmitter.Rotation);\n\t\tif(FireBeamEmitter.spot[0] != None)\n\t\t\tFireBeamEmitter.spot[0].Skin = Texture'proj_Prifle';\n\n\t\tFireBeamEmitter.bIsOn = False;\n*/\n\t\t\n\n\t\tSetTimer(0.6, False); //== Deactivate the laser trail after a little while\n\t}\n\n\tEndTrace = Pawn(Owner).Location;\n\tEndTrace.Z += Pawn(Owner).BaseEyeHeight;\n\n\t//== This will make absolutely sure that we hit a target we're aiming at, just not necessarily in the right place\n\tforeach allActors(class'Pawn', pOther)\n\t{\n\t\tdist = Abs(VSize(pOther.Location - EndTrace));\n\n\t\tif(pOther != Owner && dist <= AccurateRange)\n\t\t{\n\t\t\tLastHit = pOther.Location;\n\t\t\tLastHit.Z += pOther.CollisionHeight / 2;\n\t\n\t\t\t//== Manually calculate the collision and offset.  Bleh.\n\t\t\tif(pOther.CollisionRadius > VSize( ( (dist * Normal(LastHit - EndTrace) ) - ( dist * Normal(vector(AdjustedAim)) ) ) * vect(1,1,0) ) &&\n\t\t\t\t(pOther.CollisionHeight / 2) > VSize( ( (dist * Normal(LastHit - EndTrace) ) - ( dist * Normal(vector(AdjustedAim)) ) ) * vect(0,0,1) ) )\n\t\t\t{\n\t\t\t\t//== Switch this with some code that does trace shot backwards and then forwards really quickly to get a proper hit location\n\t\t\t\tLastHit = dist * Normal(vector(AdjustedAim));\n\t\t\t\tOther = Pawn(Owner).TraceShot(HitLocation, HitNormal, LastHit - ( Normal(vector(AdjustedAim)) * pOther.CollisionRadius * 5.000000 / 9.000000), LastHit + (Normal(vector(AdjustedAim)) * pOther.CollisionRadius * 5.000000 / 9.000000));\n\n\t\t\t\t//== Since headshot/etc. calculation isn't working properly yet, let's just up the damage to absurd levels\n\t\t\t\tfor(j = 0; j < 5; j++)\n\t\t\t\t\tProcessTraceHit(pOther, HitLocation, HitNormal, vector(AdjustedAim), Y, Z);\n\t\t\t}\n\t\t}\n\t}\n\n\n\t//== This code needs to check for rotation, as decorations can have non-zero Z orientations\n/*\tforeach allActors(class'Decoration', dOther)\n\t{\n\t\tLastHit = dOther.Location;\n\t\tLastHit.Z += dOther.CollisionHeight / 2;\n\n\t\tEndTrace = Pawn(Owner).Location;\n\t\tEndTrace.Z += Pawn(Owner).BaseEyeHeight;\n\n\t\tif(dOther.CollisionRadius > VSize( ( (dist * Normal(LastHit - EndTrace) ) - ( dist * vector(Pawn(Owner).ViewRotation) ) ) * vect(1,1,0) ) &&\n\t\t\t(dOther.CollisionHeight / 2) > VSize( ( (dist * Normal(LastHit - EndTrace) ) - ( dist * vector(Pawn(Owner).ViewRotation) ) ) * vect(0,0,1) ) )\n\t\t{\n\t\t\tLastHit = dist * vector(Pawn(Owner).ViewRotation);\n\n\t\t\tProcessTraceHit(dOther, LastHit, -1 * vector(Pawn(Owner).ViewRotation), vector(AdjustedAim), Y, Z);\n\t\t}\n\t} */\n\n}",
                        "locals": [
                            "local vector HitLocation, HitNormal, StartTrace, EndTrace, X, Y, Z, LastHit;",
                            "local Rotator rot;",
                            "local actor Other, Last;",
                            "local Pawn pOther;",
                            "local float dist;",
                            "local float volume, radius;",
                            "local float i;",
                            "local int j;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "DoTraceFire",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "Accuracy"
                            ]
                        ],
                        "return": ""
                    },
                    "Tick": {
                        "body": "{\n\tSuper.Tick(deltaTime);\n\n\t//== No timer set and a beam effect active\n\tif(FireBeamEmitter != None && TimerRate <=0)\n\t{\n\t\tFireBeamEmitter.bIsOn = True;\n\t\tFireBeamEmitter.TurnOff();\n\t\tFireBeamEmitter.Destroy();\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltaTime"
                            ]
                        ],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\tif(FireBeamEmitter != None)\n\t{\n\t\tFireBeamEmitter.bIsOn = True;\n\t\tFireBeamEmitter.TurnOff();\n\t\tFireBeamEmitter.Destroy();\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 205,
                "replication": "",
                "states": [],
                "variables": [
                    "var LaserEmitter FireBeamEmitter; //== For firing effects"
                ]
            }
        },
        "WeaponSingularity.uc": {
            "body": "//=============================================================================\n// WeaponStealthPistol.\n//=============================================================================\nclass WeaponSingularity extends DeusExWeapon;\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t\tReloadCount = mpReloadCount;\n\t}\n}\n\nfunction string GetDisplayString(Actor P)\n{\n\tif(P.isA('DeusExPlayer'))\n\t\treturn DeusExPlayer(p).PlayerReplicationInfo.PlayerName;\n\telse if(P.isA('ScriptedPawn'))\n\t\treturn ScriptedPawn(P).FamiliarName;\n\telse if(P.isA('DeusExDecoration'))\n\t\treturn DeusExDecoration(P).ItemName;\n}\n\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\nfunction ProcessTraceHit(Actor Other, Vector HitLocation, Vector HitNormal, Vector X, Vector Y, Vector Z)\n{\n\tlocal float        mult;\n\tlocal name         damageType;\n\tlocal DeusExPlayer dxPlayer;\n\tlocal Pawn P;\n\tlocal PSSing PSF;\n\t\n\tif( Other.isA('Decoration') || Other.isA('Pawn') )\n\t{\n\t\tforeach AllActors(class'PSSing',PSF)\n\t\t{\n\t\t\tif(PSF.Fattener == Other)\n\t\t\t{\n\t\t\t\tDeusExPlayer(Owner).ClientMessage(\"Singularity already attached.\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif(DeusExPlayer(Other).ReducedDamageType == 'All')\n\t\t{\n\t\t\tDeusExPlayer(Owner).ClientMessage(\"God mode blocks the singularity.\");\n\t\t\treturn;\n\t\t}\n\t\tPSF = Spawn( class'PSSing',Owner,,Other.Location);\n\t\tPSF.Fattener = Other;\n\t\tDeusExPlayer(Owner).ClientMessage(\"Singularity attached to \"$GetDisplayString(Other)$\".\");\n\t\treturn;\n\t}\n\nsuper.ProcessTraceHit(other, hitlocation, hitnormal, x, y, z);\n}\n\ndefaultproperties\n{\n     GoverningSkill=Class'DeusEx.SkillWeaponPistol'\n     NoiseLevel=0.010000\n     ShotTime=0.150000\n     reloadTime=1.500000\n     HitDamage=0\n     maxRange=4800\n     AccurateRange=2400\n     BaseAccuracy=0.800000\n     bCanHaveScope=True\n     ScopeFOV=25\n     bCanHaveLaser=True\n     recoilStrength=0.100000\n     mpReloadTime=1.500000\n     mpBaseAccuracy=0.200000\n     mpAccurateRange=1200\n     mpMaxRange=1200\n     mpReloadCount=12\n     bCanHaveModBaseAccuracy=True\n     bCanHaveModReloadCount=True\n     bCanHaveModAccurateRange=True\n     bCanHaveModReloadTime=True\n     AmmoName=Class'DeusEx.Ammo10mm'\n     PickupAmmoCount=10\n     bInstantHit=True\n     FireOffset=(X=-24.000000,Y=10.000000,Z=14.000000)\n     shakemag=50.000000\n     FireSound=Sound'DeusExSounds.Weapons.StealthPistolFire'\n     AltFireSound=Sound'DeusExSounds.Weapons.StealthPistolReloadEnd'\n     CockingSound=Sound'DeusExSounds.Weapons.StealthPistolReload'\n     SelectSound=Sound'DeusExSounds.Weapons.StealthPistolSelect'\n     InventoryGroup=2\n     ItemName=\"Singularity Gun\"\n     PlayerViewOffset=(X=24.000000,Y=-10.000000,Z=-14.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.StealthPistol'\n     PickupViewMesh=LodMesh'DeusExItems.StealthPistolPickup'\n     ThirdPersonMesh=LodMesh'DeusExItems.StealthPistol3rd'\n     Icon=Texture'DeusExUI.Icons.BeltIconStealthPistol'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconStealthPistol'\n     largeIconWidth=47\n     largeIconHeight=37\n     Description=\"The stealth pistol is a variant of the standard 10mm pistol with a larger clip and integrated silencer designed for wet work at very close ranges.\"\n     beltDescription=\"SING\"\n     Mesh=LodMesh'DeusExItems.StealthPistolPickup'\n     CollisionRadius=8.000000\n     CollisionHeight=0.800000\n}\n",
            "name": "WeaponSingularity.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "GoverningSkill=Class'DeusEx.SkillWeaponPistol'",
                    "NoiseLevel=0.010000",
                    "ShotTime=0.150000",
                    "reloadTime=1.500000",
                    "HitDamage=0",
                    "maxRange=4800",
                    "AccurateRange=2400",
                    "BaseAccuracy=0.800000",
                    "bCanHaveScope=True",
                    "ScopeFOV=25",
                    "bCanHaveLaser=True",
                    "recoilStrength=0.100000",
                    "mpReloadTime=1.500000",
                    "mpBaseAccuracy=0.200000",
                    "mpAccurateRange=1200",
                    "mpMaxRange=1200",
                    "mpReloadCount=12",
                    "bCanHaveModBaseAccuracy=True",
                    "bCanHaveModReloadCount=True",
                    "bCanHaveModAccurateRange=True",
                    "bCanHaveModReloadTime=True",
                    "AmmoName=Class'DeusEx.Ammo10mm'",
                    "PickupAmmoCount=10",
                    "bInstantHit=True",
                    "FireOffset=(X=-24.000000,Y=10.000000,Z=14.000000)",
                    "shakemag=50.000000",
                    "FireSound=Sound'DeusExSounds.Weapons.StealthPistolFire'",
                    "AltFireSound=Sound'DeusExSounds.Weapons.StealthPistolReloadEnd'",
                    "CockingSound=Sound'DeusExSounds.Weapons.StealthPistolReload'",
                    "SelectSound=Sound'DeusExSounds.Weapons.StealthPistolSelect'",
                    "InventoryGroup=2",
                    "ItemName=\"Singularity Gun\"",
                    "PlayerViewOffset=(X=24.000000,Y=-10.000000,Z=-14.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.StealthPistol'",
                    "PickupViewMesh=LodMesh'DeusExItems.StealthPistolPickup'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.StealthPistol3rd'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconStealthPistol'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconStealthPistol'",
                    "largeIconWidth=47",
                    "largeIconHeight=37",
                    "Description=\"The stealth pistol is a variant of the standard 10mm pistol with a larger clip and integrated silencer designed for wet work at very close ranges.\"",
                    "beltDescription=\"SING\"",
                    "Mesh=LodMesh'DeusExItems.StealthPistolPickup'",
                    "CollisionRadius=8.000000",
                    "CollisionHeight=0.800000"
                ],
                "exec": [],
                "extends": "DeusExWeapon",
                "functions": {
                    "GetDisplayString": {
                        "body": "{\n\tif(P.isA('DeusExPlayer'))\n\t\treturn DeusExPlayer(p).PlayerReplicationInfo.PlayerName;\n\telse if(P.isA('ScriptedPawn'))\n\t\treturn ScriptedPawn(P).FamiliarName;\n\telse if(P.isA('DeusExDecoration'))\n\t\treturn DeusExDecoration(P).ItemName;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetDisplayString",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "P"
                            ]
                        ],
                        "return": "string"
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t\tReloadCount = mpReloadCount;\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ProcessTraceHit": {
                        "body": "{\n\t\n\tif( Other.isA('Decoration') || Other.isA('Pawn') )\n\t{\n\t\tforeach AllActors(class'PSSing',PSF)\n\t\t{\n\t\t\tif(PSF.Fattener == Other)\n\t\t\t{\n\t\t\t\tDeusExPlayer(Owner).ClientMessage(\"Singularity already attached.\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif(DeusExPlayer(Other).ReducedDamageType == 'All')\n\t\t{\n\t\t\tDeusExPlayer(Owner).ClientMessage(\"God mode blocks the singularity.\");\n\t\t\treturn;\n\t\t}\n\t\tPSF = Spawn( class'PSSing',Owner,,Other.Location);\n\t\tPSF.Fattener = Other;\n\t\tDeusExPlayer(Owner).ClientMessage(\"Singularity attached to \"$GetDisplayString(Other)$\".\");\n\t\treturn;\n\t}\n\nsuper.ProcessTraceHit(other, hitlocation, hitnormal, x, y, z);\n}",
                        "locals": [
                            "local float        mult;",
                            "local name         damageType;",
                            "local DeusExPlayer dxPlayer;",
                            "local Pawn P;",
                            "local PSSing PSF;"
                        ],
                        "modifiers": [],
                        "name": "ProcessTraceHit",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Other"
                            ],
                            [
                                "Vector",
                                "HitLocation"
                            ],
                            [
                                "Vector",
                                "HitNormal"
                            ],
                            [
                                "Vector",
                                "X"
                            ],
                            [
                                "Vector",
                                "Y"
                            ],
                            [
                                "Vector",
                                "Z"
                            ]
                        ],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 118,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "WeaponSkullGun.uc": {
            "body": "// SkullGun\n\nclass WeaponSkullGun extends DeusExWeapon;\n\nsimulated function PreBeginPlay() {\n\tSuper.PreBeginPlay();\n\tif ( Level.NetMode != NM_StandAlone ) {\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t\tReloadCount = mpReloadCount;\n\t}\n}\n\ndefaultproperties\n{\n     LowAmmoWaterMark=7\n     reloadTime=0.000000\n     HitDamage=35\n     maxRange=24000\n     AccurateRange=24400\n     BaseAccuracy=0.100000\n     bCanHaveScope=True\n     bHasScope=True\n     ScopeFOV=30\n     bCanHaveLaser=True\n     bHasLaser=True\n     mpHitDamage=10\n     mpBaseAccuracy=0.100000\n     mpAccurateRange=8000\n     mpMaxRange=8000\n     mpReloadCount=17\n     bCanHaveModBaseAccuracy=True\n     bCanHaveModReloadCount=True\n     bCanHaveModAccurateRange=True\n     bCanHaveModReloadTime=True\n     bCanHaveModRecoilStrength=True\n     AmmoName=Class'PartyStuff.AmmoSkull'\n     ReloadCount=17\n     PickupAmmoCount=17\n     ProjectileClass=Class'PartyStuff.SkullBolt'\n     shakemag=0.000000\n     FireSound=Sound'DeusExSounds.Weapons.PlasmaRifleFire'\n     AltFireSound=Sound'DeusExSounds.Weapons.PlasmaRifleReloadEnd'\n     CockingSound=Sound'DeusExSounds.Weapons.PlasmaRifleReload'\n     SelectSound=Sound'DeusExSounds.Weapons.PlasmaRifleSelect'\n     InventoryGroup=2\n     ItemName=\"Skullgun\"\n     PlayerViewOffset=(X=22.000000,Y=-10.000000,Z=-14.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.Glock'\n     PickupViewMesh=LodMesh'DeusExItems.GlockPickup'\n     ThirdPersonMesh=LodMesh'DeusExItems.Glock3rd'\n     LandSound=Sound'DeusExSounds.Generic.DropLargeWeapon'\n     Icon=Texture'DeusExUI.Icons.BeltIconPistol'\n     Description=\"A powerfull weapon that is currently being produced for terrorists such as you, the skull gun superheats skulls and accelerates the resulting armor-peircing-bone-mass. Extremely deadly.\"\n     beltDescription=\"SKULLGUN\"\n     Mesh=LodMesh'DeusExItems.Glock'\n     CollisionRadius=7.000000\n     CollisionHeight=1.000000\n     Mass=3.000000\n}\n",
            "name": "WeaponSkullGun.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "LowAmmoWaterMark=7",
                    "reloadTime=0.000000",
                    "HitDamage=35",
                    "maxRange=24000",
                    "AccurateRange=24400",
                    "BaseAccuracy=0.100000",
                    "bCanHaveScope=True",
                    "bHasScope=True",
                    "ScopeFOV=30",
                    "bCanHaveLaser=True",
                    "bHasLaser=True",
                    "mpHitDamage=10",
                    "mpBaseAccuracy=0.100000",
                    "mpAccurateRange=8000",
                    "mpMaxRange=8000",
                    "mpReloadCount=17",
                    "bCanHaveModBaseAccuracy=True",
                    "bCanHaveModReloadCount=True",
                    "bCanHaveModAccurateRange=True",
                    "bCanHaveModReloadTime=True",
                    "bCanHaveModRecoilStrength=True",
                    "AmmoName=Class'PartyStuff.AmmoSkull'",
                    "ReloadCount=17",
                    "PickupAmmoCount=17",
                    "ProjectileClass=Class'PartyStuff.SkullBolt'",
                    "shakemag=0.000000",
                    "FireSound=Sound'DeusExSounds.Weapons.PlasmaRifleFire'",
                    "AltFireSound=Sound'DeusExSounds.Weapons.PlasmaRifleReloadEnd'",
                    "CockingSound=Sound'DeusExSounds.Weapons.PlasmaRifleReload'",
                    "SelectSound=Sound'DeusExSounds.Weapons.PlasmaRifleSelect'",
                    "InventoryGroup=2",
                    "ItemName=\"Skullgun\"",
                    "PlayerViewOffset=(X=22.000000,Y=-10.000000,Z=-14.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.Glock'",
                    "PickupViewMesh=LodMesh'DeusExItems.GlockPickup'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.Glock3rd'",
                    "LandSound=Sound'DeusExSounds.Generic.DropLargeWeapon'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconPistol'",
                    "Description=\"A powerfull weapon that is currently being produced for terrorists such as you, the skull gun superheats skulls and accelerates the resulting armor-peircing-bone-mass. Extremely deadly.\"",
                    "beltDescription=\"SKULLGUN\"",
                    "Mesh=LodMesh'DeusExItems.Glock'",
                    "CollisionRadius=7.000000",
                    "CollisionHeight=1.000000",
                    "Mass=3.000000"
                ],
                "exec": [],
                "extends": "DeusExWeapon",
                "functions": {
                    "PreBeginPlay": {
                        "body": "Super.PreBeginPlay();",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 64,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "WeaponSmokeGrenade.uc": {
            "body": "//=============================================================================\n// WeaponSmokeGrenade - by Deadalus08.\n//=============================================================================\nclass WeaponSmokeGrenade extends WeaponGasGrenade;\n\ndefaultproperties\n{\n     AmmoName=Class'PartyStuff.AmmoSmokeGrenade'\n     ProjectileClass=Class'PartyStuff.SmokeGrenade'\n     InventoryGroup=223\n     ItemName=\"Smoke Grenade\"\n     Description=\"Upon detonation, this grenade releases a large amount of smoke which will cause irritation to all exposed mucous membranes leading to temporary blindness. Unlike the standard tear gas grenades, even agents outside its area of effect won't be able to see through the density of the cloud.\"\n     beltDescription=\"SMOKE GREN\"\n}\n",
            "name": "WeaponSmokeGrenade.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "AmmoName=Class'PartyStuff.AmmoSmokeGrenade'",
                    "ProjectileClass=Class'PartyStuff.SmokeGrenade'",
                    "InventoryGroup=223",
                    "ItemName=\"Smoke Grenade\"",
                    "Description=\"Upon detonation, this grenade releases a large amount of smoke which will cause irritation to all exposed mucous membranes leading to temporary blindness. Unlike the standard tear gas grenades, even agents outside its area of effect won't be able to see through the density of the cloud.\"",
                    "beltDescription=\"SMOKE GREN\""
                ],
                "exec": [],
                "extends": "WeaponGasGrenade",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 15,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "WeaponSpazmSpray.uc": {
            "body": "//=============================================================================\n// WeaponSpazmSpray.\n//=============================================================================\nclass WeaponSpazmSpray expands WeaponPepperGun;\n\nSimulated Function PreBeginPlay()\n{}\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ((BeltSpot <= 9) && (BeltSpot >= 1));\n}\n\ndefaultproperties\n{\n     LowAmmoWaterMark=100\n     reloadTime=2.000000\n     maxRange=200\n     AccurateRange=200\n     AmmoName=Class'PartyStuff.AmmoSpazmGas'\n     PickupAmmoCount=200\n     ProjectileClass=Class'PartyStuff.SpazmGas'\n     InventoryGroup=168\n     ItemName=\"Spazm Spray Gun\"\n     Description=\"This spazm spray gun shoots gas out, resulting in any pawns in the area having a seizure of some kind.\"\n     beltDescription=\"Spasm\"\n}\n",
            "name": "WeaponSpazmSpray.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "LowAmmoWaterMark=100",
                    "reloadTime=2.000000",
                    "maxRange=200",
                    "AccurateRange=200",
                    "AmmoName=Class'PartyStuff.AmmoSpazmGas'",
                    "PickupAmmoCount=200",
                    "ProjectileClass=Class'PartyStuff.SpazmGas'",
                    "InventoryGroup=168",
                    "ItemName=\"Spazm Spray Gun\"",
                    "Description=\"This spazm spray gun shoots gas out, resulting in any pawns in the area having a seizure of some kind.\"",
                    "beltDescription=\"Spasm\""
                ],
                "exec": [],
                "extends": "WeaponPepperGun",
                "functions": {
                    "PreBeginPlay": {
                        "body": "{}\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{",
                        "locals": [],
                        "modifiers": [],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 28,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "WeaponSpitRifle.uc": {
            "body": "class WeaponSpitRifle extends WeaponAssaultGun;\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\ndefaultproperties\n{\n     HitDamage=8\n     bInstantHit=False\n     ProjectileClass=Class'PartyStuff.GreaselShoot'\n     InventoryGroup=197\n     ItemName=\"|P2Bio Spitter Gun\"\n     beltDescription=\"SPIT\"\n     Mass=1.000000\n}\n",
            "name": "WeaponSpitRifle.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "HitDamage=8",
                    "bInstantHit=False",
                    "ProjectileClass=Class'PartyStuff.GreaselShoot'",
                    "InventoryGroup=197",
                    "ItemName=\"|P2Bio Spitter Gun\"",
                    "beltDescription=\"SPIT\"",
                    "Mass=1.000000"
                ],
                "exec": [],
                "extends": "WeaponAssaultGun",
                "functions": {
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 18,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "WeaponStealthShotgun.uc": {
            "body": "//=============================================================================\n// WeaponStealthPistol.\n//=============================================================================\nclass WeaponStealthShotgun extends DeusExWeapon;\n\nvar float\tmpRecoilStrength;\nvar MuzzleFlash flash;\nvar float mpNoScopeMult;\nvar() float Thick;\nvar() float PawnThick;\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t\tReloadCount = mpReloadCount;\n\t}\n}\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\ndefaultproperties\n{\n     Thick=64.000000\n     PawnThick=32.000000\n     GoverningSkill=Class'DeusEx.SkillWeaponPistol'\n     NoiseLevel=0.010000\n     ShotTime=0.150000\n     reloadTime=1.500000\n     HitDamage=8\n     maxRange=4800\n     AccurateRange=2400\n     BaseAccuracy=0.800000\n     bCanHaveScope=True\n     ScopeFOV=25\n     bCanHaveLaser=True\n     AreaOfEffect=AOE_Cone\n     recoilStrength=0.100000\n     mpReloadTime=1.500000\n     mpHitDamage=12\n     mpBaseAccuracy=0.200000\n     mpAccurateRange=1200\n     mpMaxRange=1200\n     mpReloadCount=12\n     bCanHaveModBaseAccuracy=True\n     bCanHaveModReloadCount=True\n     bCanHaveModAccurateRange=True\n     bCanHaveModReloadTime=True\n     AmmoName=Class'DeusEx.Ammo10mm'\n     PickupAmmoCount=10\n     bInstantHit=True\n     FireOffset=(X=-24.000000,Y=10.000000,Z=14.000000)\n     shakemag=50.000000\n     FireSound=Sound'DeusExSounds.Weapons.StealthPistolFire'\n     AltFireSound=Sound'DeusExSounds.Weapons.StealthPistolReloadEnd'\n     CockingSound=Sound'DeusExSounds.Weapons.StealthPistolReload'\n     SelectSound=Sound'DeusExSounds.Weapons.StealthPistolSelect'\n     InventoryGroup=186\n     ItemName=\"Stealth Shotgun\"\n     PlayerViewOffset=(X=24.000000,Y=-10.000000,Z=-14.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.StealthPistol'\n     PickupViewMesh=LodMesh'DeusExItems.StealthPistolPickup'\n     ThirdPersonMesh=LodMesh'DeusExItems.StealthPistol3rd'\n     Icon=Texture'DeusExUI.Icons.BeltIconStealthPistol'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconStealthPistol'\n     largeIconWidth=47\n     largeIconHeight=37\n     Description=\"The stealth pistol is a variant of the standard 10mm pistol with a larger clip and integrated silencer designed for wet work at very close ranges.\"\n     beltDescription=\"SSH\"\n     Mesh=LodMesh'DeusExItems.StealthPistolPickup'\n     CollisionRadius=8.000000\n     CollisionHeight=0.800000\n}\n",
            "name": "WeaponStealthShotgun.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "Thick=64.000000",
                    "PawnThick=32.000000",
                    "GoverningSkill=Class'DeusEx.SkillWeaponPistol'",
                    "NoiseLevel=0.010000",
                    "ShotTime=0.150000",
                    "reloadTime=1.500000",
                    "HitDamage=8",
                    "maxRange=4800",
                    "AccurateRange=2400",
                    "BaseAccuracy=0.800000",
                    "bCanHaveScope=True",
                    "ScopeFOV=25",
                    "bCanHaveLaser=True",
                    "AreaOfEffect=AOE_Cone",
                    "recoilStrength=0.100000",
                    "mpReloadTime=1.500000",
                    "mpHitDamage=12",
                    "mpBaseAccuracy=0.200000",
                    "mpAccurateRange=1200",
                    "mpMaxRange=1200",
                    "mpReloadCount=12",
                    "bCanHaveModBaseAccuracy=True",
                    "bCanHaveModReloadCount=True",
                    "bCanHaveModAccurateRange=True",
                    "bCanHaveModReloadTime=True",
                    "AmmoName=Class'DeusEx.Ammo10mm'",
                    "PickupAmmoCount=10",
                    "bInstantHit=True",
                    "FireOffset=(X=-24.000000,Y=10.000000,Z=14.000000)",
                    "shakemag=50.000000",
                    "FireSound=Sound'DeusExSounds.Weapons.StealthPistolFire'",
                    "AltFireSound=Sound'DeusExSounds.Weapons.StealthPistolReloadEnd'",
                    "CockingSound=Sound'DeusExSounds.Weapons.StealthPistolReload'",
                    "SelectSound=Sound'DeusExSounds.Weapons.StealthPistolSelect'",
                    "InventoryGroup=186",
                    "ItemName=\"Stealth Shotgun\"",
                    "PlayerViewOffset=(X=24.000000,Y=-10.000000,Z=-14.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.StealthPistol'",
                    "PickupViewMesh=LodMesh'DeusExItems.StealthPistolPickup'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.StealthPistol3rd'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconStealthPistol'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconStealthPistol'",
                    "largeIconWidth=47",
                    "largeIconHeight=37",
                    "Description=\"The stealth pistol is a variant of the standard 10mm pistol with a larger clip and integrated silencer designed for wet work at very close ranges.\"",
                    "beltDescription=\"SSH\"",
                    "Mesh=LodMesh'DeusExItems.StealthPistolPickup'",
                    "CollisionRadius=8.000000",
                    "CollisionHeight=0.800000"
                ],
                "exec": [],
                "extends": "DeusExWeapon",
                "functions": {
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t\tReloadCount = mpReloadCount;\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 85,
                "replication": "",
                "states": [],
                "variables": [
                    "var float\tmpRecoilStrength;",
                    "var MuzzleFlash flash;",
                    "var float mpNoScopeMult;",
                    "var() float Thick;",
                    "var() float PawnThick;"
                ]
            }
        },
        "WeaponSurf.uc": {
            "body": "//=============================================================================\n// WeaponTripBomb.\n//=============================================================================\nclass WeaponSurf extends DeusExWeapon;\n\nvar localized String shortName;\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t\tReloadCount = mpReloadCount;\n      PickupAmmoCount = mpReloadCount;\n\t}\n}\n\nfunction PostBeginPlay()\n{\n   Super.PostBeginPlay();\n   bWeaponStay=False;\n}\n\n// Become a pickup\n// Weapons that carry their ammo with them don't vanish when dropped\nfunction BecomePickup()\n{\n\tSuper.BecomePickup();\n   if (Level.NetMode != NM_Standalone)\n      if (bTossedOut)\n         Lifespan = 0.0;\n}\n\n// ----------------------------------------------------------------------\n// TestMPBeltSpot()\n// Returns true if the suggested belt location is ok for the object in mp.\n// ----------------------------------------------------------------------\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\nstate NormalFire //(Thanks to JimBowen for this Infinite ammo code) \n{ \n   Begin: \n      if ((ClipCount >= ReloadCount) && (ReloadCount != 0)) \n      { \n         if (!bAutomatic) \n         { \n            bFiring = False; \n            FinishAnim(); \n         } \n    \n         if (Owner != None) \n         { \n            if (Owner.IsA('DeusExPlayer')) \n            { \n               bFiring = False; \n            } \n            else if (Owner.IsA('ScriptedPawn')) \n            { \n               bFiring = False; \n               ReloadAmmo(); \n            } \n         } \n         else \n         { \n            if (bHasMuzzleFlash) \n               EraseMuzzleFlashTexture(); \n            GotoState('Idle'); \n         } \n      } \n      if ( bAutomatic && (( Level.NetMode == NM_DedicatedServer ) || ((Level.NetMode == NM_ListenServer) && Owner.IsA('DeusExPlayer') && !DeusExPlayer(Owner).PlayerIsListenClient()))) \n         GotoState('Idle'); \n    \n      Sleep(GetShotTime()); \n      if (bAutomatic) \n      { \n         GenerateBullet();       // In multiplayer bullets are generated by the client which will let the server know when \n         Goto('Begin'); \n      } \n      bFiring = False; \n      FinishAnim(); \n      ReadyToFire(); \n   Done: \n      bFiring = False; \n      Finish(); \n}\n\ndefaultproperties\n{\n     ShortName=\"Surf\"\n     LowAmmoWaterMark=2\n     GoverningSkill=Class'DeusEx.SkillDemolition'\n     Concealability=CONC_All\n     ShotTime=0.300000\n     reloadTime=0.100000\n     HitDamage=50\n     maxRange=4800\n     AccurateRange=2400\n     BaseAccuracy=1.000000\n     bHasMuzzleFlash=False\n     bHandToHand=True\n     bUseAsDrawnWeapon=False\n     bNeedToSetMPPickupAmmo=False\n     mpReloadTime=0.100000\n     mpHitDamage=50\n     mpBaseAccuracy=1.000000\n     mpAccurateRange=2400\n     mpMaxRange=2400\n     FireOffset=(Y=10.000000,Z=20.000000)\n     ProjectileClass=Class'PartyStuff.SurfRocket'\n     shakemag=50.000000\n     SelectSound=Sound'DeusExSounds.Weapons.LAMSelect'\n     InventoryGroup=32\n     ItemName=\"Suicide Bomber\"\n     PlayerViewOffset=(X=24.000000,Y=-15.000000,Z=-17.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.LAM'\n     PickupViewMesh=LodMesh'DeusExItems.LAMPickup'\n     ThirdPersonMesh=LodMesh'DeusExItems.LAM3rd'\n     Icon=Texture'DeusExUI.Icons.BeltIconLAM'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconLAM'\n     largeIconWidth=35\n     largeIconHeight=45\n     Description=\"Places a deadly laser wire that will instantly kill anything that touches it\"\n     beltDescription=\"ALLAH\"\n     Mesh=LodMesh'DeusExItems.LAMPickup'\n     CollisionRadius=3.800000\n     CollisionHeight=3.500000\n     Mass=5.000000\n     Buoyancy=2.000000\n}\n",
            "name": "WeaponSurf.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "ShortName=\"Surf\"",
                    "LowAmmoWaterMark=2",
                    "GoverningSkill=Class'DeusEx.SkillDemolition'",
                    "Concealability=CONC_All",
                    "ShotTime=0.300000",
                    "reloadTime=0.100000",
                    "HitDamage=50",
                    "maxRange=4800",
                    "AccurateRange=2400",
                    "BaseAccuracy=1.000000",
                    "bHasMuzzleFlash=False",
                    "bHandToHand=True",
                    "bUseAsDrawnWeapon=False",
                    "bNeedToSetMPPickupAmmo=False",
                    "mpReloadTime=0.100000",
                    "mpHitDamage=50",
                    "mpBaseAccuracy=1.000000",
                    "mpAccurateRange=2400",
                    "mpMaxRange=2400",
                    "FireOffset=(Y=10.000000,Z=20.000000)",
                    "ProjectileClass=Class'PartyStuff.SurfRocket'",
                    "shakemag=50.000000",
                    "SelectSound=Sound'DeusExSounds.Weapons.LAMSelect'",
                    "InventoryGroup=32",
                    "ItemName=\"Suicide Bomber\"",
                    "PlayerViewOffset=(X=24.000000,Y=-15.000000,Z=-17.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.LAM'",
                    "PickupViewMesh=LodMesh'DeusExItems.LAMPickup'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.LAM3rd'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconLAM'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconLAM'",
                    "largeIconWidth=35",
                    "largeIconHeight=45",
                    "Description=\"Places a deadly laser wire that will instantly kill anything that touches it\"",
                    "beltDescription=\"ALLAH\"",
                    "Mesh=LodMesh'DeusExItems.LAMPickup'",
                    "CollisionRadius=3.800000",
                    "CollisionHeight=3.500000",
                    "Mass=5.000000",
                    "Buoyancy=2.000000"
                ],
                "exec": [],
                "extends": "DeusExWeapon",
                "functions": {
                    "BecomePickup": {
                        "body": "{\n\tSuper.BecomePickup();\n   if (Level.NetMode != NM_Standalone)\n      if (bTossedOut)\n         Lifespan = 0.0;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "BecomePickup",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PostBeginPlay": {
                        "body": "{\n   Super.PostBeginPlay();\n   bWeaponStay=False;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t\tReloadCount = mpReloadCount;\n      PickupAmmoCount = mpReloadCount;\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 141,
                "replication": "",
                "states": [],
                "variables": [
                    "var localized String shortName;"
                ]
            }
        },
        "WeaponSurfKnife.uc": {
            "body": "//=============================================================================\n// WeaponTripBomb.\n//=============================================================================\nclass WeaponSurfKnife extends DeusExWeapon;\n\nvar localized String shortName;\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t\tReloadCount = mpReloadCount;\n      PickupAmmoCount = mpReloadCount;\n\t}\n}\n\nfunction PostBeginPlay()\n{\n   Super.PostBeginPlay();\n   bWeaponStay=False;\n}\n\n// Become a pickup\n// Weapons that carry their ammo with them don't vanish when dropped\nfunction BecomePickup()\n{\n\tSuper.BecomePickup();\n   if (Level.NetMode != NM_Standalone)\n      if (bTossedOut)\n         Lifespan = 0.0;\n}\n\n// ----------------------------------------------------------------------\n// TestMPBeltSpot()\n// Returns true if the suggested belt location is ok for the object in mp.\n// ----------------------------------------------------------------------\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\nstate NormalFire //(Thanks to JimBowen for this Infinite ammo code) \n{ \n   Begin: \n      if ((ClipCount >= ReloadCount) && (ReloadCount != 0)) \n      { \n         if (!bAutomatic) \n         { \n            bFiring = False; \n            FinishAnim(); \n         } \n    \n         if (Owner != None) \n         { \n            if (Owner.IsA('DeusExPlayer')) \n            { \n               bFiring = False; \n            } \n            else if (Owner.IsA('ScriptedPawn')) \n            { \n               bFiring = False; \n               ReloadAmmo(); \n            } \n         } \n         else \n         { \n            if (bHasMuzzleFlash) \n               EraseMuzzleFlashTexture(); \n            GotoState('Idle'); \n         } \n      } \n      if ( bAutomatic && (( Level.NetMode == NM_DedicatedServer ) || ((Level.NetMode == NM_ListenServer) && Owner.IsA('DeusExPlayer') && !DeusExPlayer(Owner).PlayerIsListenClient()))) \n         GotoState('Idle'); \n    \n      Sleep(GetShotTime()); \n      if (bAutomatic) \n      { \n         GenerateBullet();       // In multiplayer bullets are generated by the client which will let the server know when \n         Goto('Begin'); \n      } \n      bFiring = False; \n      FinishAnim(); \n      ReadyToFire(); \n   Done: \n      bFiring = False; \n      Finish(); \n}\n\ndefaultproperties\n{\n     LowAmmoWaterMark=5\n     GoverningSkill=Class'DeusEx.SkillWeaponLowTech'\n     NoiseLevel=0.050000\n     EnemyEffective=ENMEFF_Organic\n     EnviroEffective=ENVEFF_AirVacuum\n     Concealability=CONC_Visual\n     ShotTime=0.200000\n     reloadTime=0.200000\n     HitDamage=15\n     maxRange=1280\n     AccurateRange=640\n     BaseAccuracy=0.900000\n     bHasMuzzleFlash=False\n     bHandToHand=True\n     mpReloadTime=0.200000\n     mpHitDamage=35\n     mpBaseAccuracy=0.100000\n     mpAccurateRange=640\n     mpMaxRange=640\n     FireOffset=(X=-10.000000,Y=14.000000,Z=22.000000)\n     ProjectileClass=Class'PartyStuff.SurfKnives'\n     shakemag=5.000000\n     InventoryGroup=12\n     ItemName=\"Surfin' Knives\"\n     ItemArticle=\"some\"\n     PlayerViewOffset=(X=24.000000,Y=-12.000000,Z=-21.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.Shuriken'\n     PickupViewMesh=LodMesh'DeusExItems.ShurikenPickup'\n     ThirdPersonMesh=LodMesh'DeusExItems.Shuriken3rd'\n     Icon=Texture'DeusExUI.Icons.BeltIconShuriken'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconShuriken'\n     largeIconWidth=36\n     largeIconHeight=45\n     Description=\"A favorite weapon of assassins in the Far East for centuries, throwing knives can be deadly when wielded by a master but are more generally used when it becomes desirable to send a message. The message is usually 'Your death is coming on swift feet.'\"\n     beltDescription=\"SURF KNIFE\"\n     Texture=Texture'DeusExItems.Skins.ReflectionMapTex1'\n     Mesh=LodMesh'DeusExItems.ShurikenPickup'\n     CollisionRadius=7.500000\n     CollisionHeight=0.300000\n}\n",
            "name": "WeaponSurfKnife.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "LowAmmoWaterMark=5",
                    "GoverningSkill=Class'DeusEx.SkillWeaponLowTech'",
                    "NoiseLevel=0.050000",
                    "EnemyEffective=ENMEFF_Organic",
                    "EnviroEffective=ENVEFF_AirVacuum",
                    "Concealability=CONC_Visual",
                    "ShotTime=0.200000",
                    "reloadTime=0.200000",
                    "HitDamage=15",
                    "maxRange=1280",
                    "AccurateRange=640",
                    "BaseAccuracy=0.900000",
                    "bHasMuzzleFlash=False",
                    "bHandToHand=True",
                    "mpReloadTime=0.200000",
                    "mpHitDamage=35",
                    "mpBaseAccuracy=0.100000",
                    "mpAccurateRange=640",
                    "mpMaxRange=640",
                    "FireOffset=(X=-10.000000,Y=14.000000,Z=22.000000)",
                    "ProjectileClass=Class'PartyStuff.SurfKnives'",
                    "shakemag=5.000000",
                    "InventoryGroup=12",
                    "ItemName=\"Surfin' Knives\"",
                    "ItemArticle=\"some\"",
                    "PlayerViewOffset=(X=24.000000,Y=-12.000000,Z=-21.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.Shuriken'",
                    "PickupViewMesh=LodMesh'DeusExItems.ShurikenPickup'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.Shuriken3rd'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconShuriken'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconShuriken'",
                    "largeIconWidth=36",
                    "largeIconHeight=45",
                    "Description=\"A favorite weapon of assassins in the Far East for centuries, throwing knives can be deadly when wielded by a master but are more generally used when it becomes desirable to send a message. The message is usually 'Your death is coming on swift feet.'\"",
                    "beltDescription=\"SURF KNIFE\"",
                    "Texture=Texture'DeusExItems.Skins.ReflectionMapTex1'",
                    "Mesh=LodMesh'DeusExItems.ShurikenPickup'",
                    "CollisionRadius=7.500000",
                    "CollisionHeight=0.300000"
                ],
                "exec": [],
                "extends": "DeusExWeapon",
                "functions": {
                    "BecomePickup": {
                        "body": "{\n\tSuper.BecomePickup();\n   if (Level.NetMode != NM_Standalone)\n      if (bTossedOut)\n         Lifespan = 0.0;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "BecomePickup",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PostBeginPlay": {
                        "body": "{\n   Super.PostBeginPlay();\n   bWeaponStay=False;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t\tReloadCount = mpReloadCount;\n      PickupAmmoCount = mpReloadCount;\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 140,
                "replication": "",
                "states": [],
                "variables": [
                    "var localized String shortName;"
                ]
            }
        },
        "WeaponSword2.uc": {
            "body": "//=============================================================================\n// WeaponSword.\n//=============================================================================\nclass WeaponSword2 extends DeusExWeapon;\n\nenum EModeNum\n{\n\tMode_Normal,\n\tMode_Throw,\n};\n\nVar EModeNum Mode;\nvar DeusExPlayer DXPl;\n\nreplication\n{\n\tReliable if(Role==ROLE_AUTHORITY)\n\t\tMode;\n}\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t}\n}\n\nFunction Fire(Float value)\n{\n\tlocal ThrownSword S;\n\tDXPL=DeusExPlayer(Owner);\n\tIf(Mode==Mode_Throw)\n\t{\n\t\tS=Spawn(class'ThrownSword',Pawn(Owner),,Location+vect(0,0,-2),DXPL.ViewRotation);\n\t\tif(S!=None)\n\t\t{\n\t\t\tS.SetOwner(DXPL);\n\t\t\tS.Lifespan=15;\n\t\t}\n\t\tDestroy();\n\t}\n\telse\n\t{\n\t\tSuper.Fire(Value);\n\t}\n}\n\nFunction cycleammo()\n{\n\tswitch Mode\n\t\t{\n\t\tcase MODE_Normal:\n\t\t\tMode = MODE_Throw;\n\t\t\tif (Role == ROLE_Authority)\n\t\t\tPawn(Owner).Clientmessage(\"Throwing mode\");\n\t\t\tbreak;\n\n\t\tcase MODE_Throw:\n\t\t\tMode = MODE_Normal;\n\t\t\tif (Role == ROLE_Authority)\n\t\t\tPawn(Owner).Clientmessage(\"Normal mode\");\n\t\t\tbreak;\n\t\t\t\n\t\t}\n}\n\ndefaultproperties\n{\n     LowAmmoWaterMark=0\n     GoverningSkill=Class'DeusEx.SkillWeaponLowTech'\n     NoiseLevel=0.050000\n     EnemyEffective=ENMEFF_Organic\n     reloadTime=0.000000\n     maxRange=64\n     AccurateRange=64\n     BaseAccuracy=1.000000\n     bHasMuzzleFlash=False\n     bHandToHand=True\n     bFallbackWeapon=True\n     mpHitDamage=20\n     mpBaseAccuracy=1.000000\n     mpAccurateRange=100\n     mpMaxRange=100\n     AmmoName=Class'DeusEx.AmmoNone'\n     ReloadCount=0\n     bInstantHit=True\n     FireOffset=(X=-25.000000,Y=10.000000,Z=24.000000)\n     shakemag=20.000000\n     FireSound=Sound'DeusExSounds.Weapons.SwordFire'\n     SelectSound=Sound'DeusExSounds.Weapons.SwordSelect'\n     Misc1Sound=Sound'DeusExSounds.Weapons.SwordHitFlesh'\n     Misc2Sound=Sound'DeusExSounds.Weapons.SwordHitHard'\n     Misc3Sound=Sound'DeusExSounds.Weapons.SwordHitSoft'\n     InventoryGroup=13\n     ItemName=\"Sword\"\n     PlayerViewOffset=(X=25.000000,Y=-10.000000,Z=-24.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.Sword'\n     PickupViewMesh=LodMesh'DeusExItems.SwordPickup'\n     ThirdPersonMesh=LodMesh'DeusExItems.Sword3rd'\n     LandSound=Sound'DeusExSounds.Generic.DropLargeWeapon'\n     Icon=Texture'DeusExUI.Icons.BeltIconSword'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconSword'\n     largeIconWidth=130\n     largeIconHeight=40\n     invSlotsX=3\n     Description=\"A rather nasty-looking sword.\"\n     beltDescription=\"SWORD\"\n     Texture=Texture'DeusExItems.Skins.ReflectionMapTex1'\n     Mesh=LodMesh'DeusExItems.SwordPickup'\n     CollisionRadius=26.000000\n     CollisionHeight=0.500000\n     Mass=20.000000\n}\n",
            "name": "WeaponSword2.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "LowAmmoWaterMark=0",
                    "GoverningSkill=Class'DeusEx.SkillWeaponLowTech'",
                    "NoiseLevel=0.050000",
                    "EnemyEffective=ENMEFF_Organic",
                    "reloadTime=0.000000",
                    "maxRange=64",
                    "AccurateRange=64",
                    "BaseAccuracy=1.000000",
                    "bHasMuzzleFlash=False",
                    "bHandToHand=True",
                    "bFallbackWeapon=True",
                    "mpHitDamage=20",
                    "mpBaseAccuracy=1.000000",
                    "mpAccurateRange=100",
                    "mpMaxRange=100",
                    "AmmoName=Class'DeusEx.AmmoNone'",
                    "ReloadCount=0",
                    "bInstantHit=True",
                    "FireOffset=(X=-25.000000,Y=10.000000,Z=24.000000)",
                    "shakemag=20.000000",
                    "FireSound=Sound'DeusExSounds.Weapons.SwordFire'",
                    "SelectSound=Sound'DeusExSounds.Weapons.SwordSelect'",
                    "Misc1Sound=Sound'DeusExSounds.Weapons.SwordHitFlesh'",
                    "Misc2Sound=Sound'DeusExSounds.Weapons.SwordHitHard'",
                    "Misc3Sound=Sound'DeusExSounds.Weapons.SwordHitSoft'",
                    "InventoryGroup=13",
                    "ItemName=\"Sword\"",
                    "PlayerViewOffset=(X=25.000000,Y=-10.000000,Z=-24.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.Sword'",
                    "PickupViewMesh=LodMesh'DeusExItems.SwordPickup'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.Sword3rd'",
                    "LandSound=Sound'DeusExSounds.Generic.DropLargeWeapon'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconSword'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconSword'",
                    "largeIconWidth=130",
                    "largeIconHeight=40",
                    "invSlotsX=3",
                    "Description=\"A rather nasty-looking sword.\"",
                    "beltDescription=\"SWORD\"",
                    "Texture=Texture'DeusExItems.Skins.ReflectionMapTex1'",
                    "Mesh=LodMesh'DeusExItems.SwordPickup'",
                    "CollisionRadius=26.000000",
                    "CollisionHeight=0.500000",
                    "Mass=20.000000"
                ],
                "exec": [],
                "extends": "DeusExWeapon",
                "functions": {
                    "Fire": {
                        "body": "{\n\tDXPL=DeusExPlayer(Owner);\n\tIf(Mode==Mode_Throw)\n\t{\n\t\tS=Spawn(class'ThrownSword',Pawn(Owner),,Location+vect(0,0,-2),DXPL.ViewRotation);\n\t\tif(S!=None)\n\t\t{\n\t\t\tS.SetOwner(DXPL);\n\t\t\tS.Lifespan=15;\n\t\t}\n\t\tDestroy();\n\t}\n\telse\n\t{\n\t\tSuper.Fire(Value);\n\t}\n}",
                        "locals": [
                            "local ThrownSword S;"
                        ],
                        "modifiers": [],
                        "name": "Fire",
                        "native": false,
                        "param": [
                            [
                                "Float",
                                "value"
                            ]
                        ],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "cycleammo": {
                        "body": "{\n\tswitch Mode\n\t\t{\n\t\tcase MODE_Normal:\n\t\t\tMode = MODE_Throw;\n\t\t\tif (Role == ROLE_Authority)\n\t\t\tPawn(Owner).Clientmessage(\"Throwing mode\");\n\t\t\tbreak;\n\n\t\tcase MODE_Throw:\n\t\t\tMode = MODE_Normal;\n\t\t\tif (Role == ROLE_Authority)\n\t\t\tPawn(Owner).Clientmessage(\"Normal mode\");\n\t\t\tbreak;\n\t\t\t\n\t\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "cycleammo",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 122,
                "replication": "",
                "states": [],
                "variables": [
                    "Var EModeNum Mode;",
                    "var DeusExPlayer DXPl;"
                ]
            }
        },
        "WeaponTazer.uc": {
            "body": "//=============================================================================\n// WeaponTazer.\n//=============================================================================\nclass WeaponTazer expands WeaponProd;\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ((BeltSpot <= 9) && (BeltSpot >= 1));\n}\n\n\nfunction ProcessTraceHit(Actor Other, Vector HitLocation, Vector HitNormal, Vector X, Vector Y, Vector Z)\n{\nlocal int i;\nlocal DeusExPlayer PlayerOwner;\n\tPlayerOwner = DeusExPlayer(Owner);\n\n\tif (PlayerOwner != None && ScriptedPawn(Owner) == None)\n\t{\n\t\t\n\t\tOther.TakeDamage(HitDamage, Pawn(Owner), HitLocation, Vect(0,0,0), 'Shocked');\n\t\tOther.TakeDamage(HitDamage, Pawn(Owner), HitLocation, Vect(0,0,0), 'EMP');\n\t\tif(DeusExPlayer(Other) != None)\n\t\t{\n\t\t\tPlayerOwner.ClientInstantFlash(-0.4, vect(450, 190, 650));\n\t\t\tDeusExPlayer(Other).ConsoleCommand(\"feigndeath\");\n\t\t\tDeusExPlayer(Other).ClientFlash(1,Vect(20000,20000,20000));\n\t\t\tDeusExPlayer(Other).IncreaseClientFlashLength(12.0); //Drag that flash out for miles!!!\n\t\t}\n\t}\n}\n\ndefaultproperties\n{\n     ShotTime=1.500000\n     reloadTime=1.000000\n     HitDamage=20\n     maxRange=1920\n     AccurateRange=1280\n     BaseAccuracy=0.000000\n     bPenetrating=True\n     StunDuration=15.000000\n     ReloadCount=250\n     PickupAmmoCount=80\n     FireOffset=(X=-16.000000)\n     shakemag=0.000000\n     shaketime=0.000000\n     shakevert=0.000000\n     InventoryGroup=108\n     ItemName=\"Tazer\"\n     bToggleSteadyFlash=False\n     beltDescription=\"TAZER\"\n}\n",
            "name": "WeaponTazer.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "ShotTime=1.500000",
                    "reloadTime=1.000000",
                    "HitDamage=20",
                    "maxRange=1920",
                    "AccurateRange=1280",
                    "BaseAccuracy=0.000000",
                    "bPenetrating=True",
                    "StunDuration=15.000000",
                    "ReloadCount=250",
                    "PickupAmmoCount=80",
                    "FireOffset=(X=-16.000000)",
                    "shakemag=0.000000",
                    "shaketime=0.000000",
                    "shakevert=0.000000",
                    "InventoryGroup=108",
                    "ItemName=\"Tazer\"",
                    "bToggleSteadyFlash=False",
                    "beltDescription=\"TAZER\""
                ],
                "exec": [],
                "extends": "WeaponProd",
                "functions": {
                    "ProcessTraceHit": {
                        "body": "{\n\tPlayerOwner = DeusExPlayer(Owner);\n\n\tif (PlayerOwner != None && ScriptedPawn(Owner) == None)\n\t{\n\t\t\n\t\tOther.TakeDamage(HitDamage, Pawn(Owner), HitLocation, Vect(0,0,0), 'Shocked');\n\t\tOther.TakeDamage(HitDamage, Pawn(Owner), HitLocation, Vect(0,0,0), 'EMP');\n\t\tif(DeusExPlayer(Other) != None)\n\t\t{\n\t\t\tPlayerOwner.ClientInstantFlash(-0.4, vect(450, 190, 650));\n\t\t\tDeusExPlayer(Other).ConsoleCommand(\"feigndeath\");\n\t\t\tDeusExPlayer(Other).ClientFlash(1,Vect(20000,20000,20000));\n\t\t\tDeusExPlayer(Other).IncreaseClientFlashLength(12.0); //Drag that flash out for miles!!!\n\t\t}\n\t}\n}",
                        "locals": [
                            "local int i;",
                            "local DeusExPlayer PlayerOwner;"
                        ],
                        "modifiers": [],
                        "name": "ProcessTraceHit",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Other"
                            ],
                            [
                                "Vector",
                                "HitLocation"
                            ],
                            [
                                "Vector",
                                "HitNormal"
                            ],
                            [
                                "Vector",
                                "X"
                            ],
                            [
                                "Vector",
                                "Y"
                            ],
                            [
                                "Vector",
                                "Z"
                            ]
                        ],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ((BeltSpot <= 9) && (BeltSpot >= 1));\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 54,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "WeaponThinSword.uc": {
            "body": "//=============================================\n// PlasmaSword\n//=============================================\nClass WeaponThinSword extends WeaponSword;\n\ndefaultproperties\n{\n     mpHitDamage=45\n     mpAccurateRange=150\n     mpMaxRange=150\n     InventoryGroup=133\n     ItemName=\"Thin Sword\"\n     Description=\"A strange, ancient triad weapon. You would be hard pressed finding out anything else about it.\"\n     beltDescription=\"Thin\"\n     Fatness=105\n}\n",
            "name": "WeaponThinSword.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "mpHitDamage=45",
                    "mpAccurateRange=150",
                    "mpMaxRange=150",
                    "InventoryGroup=133",
                    "ItemName=\"Thin Sword\"",
                    "Description=\"A strange, ancient triad weapon. You would be hard pressed finding out anything else about it.\"",
                    "beltDescription=\"Thin\"",
                    "Fatness=105"
                ],
                "exec": [],
                "extends": "WeaponSword",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 17,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "WeaponToyAssault.uc": {
            "body": "class WeaponToyAssault extends WeaponAssaultGun;\n\ndefaultproperties\n{\n     DrawScale=0.100000\n}\n",
            "name": "WeaponToyAssault.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "DrawScale=0.100000"
                ],
                "exec": [],
                "extends": "WeaponAssaultGun",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 7,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "WeaponTrainingLam.uc": {
            "body": "//=============================================================================\n// WeaponLAM.\n//=============================================================================\nclass WeaponTrainingLAM extends DeusExWeapon;\n\nvar localized String shortName;\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t}\n}\n\nfunction PostBeginPlay()\n{\n   Super.PostBeginPlay();\n   bWeaponStay=False;\n}\n\nfunction Fire(float Value)\n{\n\t// if facing a wall, affix the LAM to the wall\n\tif (Pawn(Owner) != None)\n\t{\n\t\tif (bNearWall)\n\t\t{\n\t\t\tbReadyToFire = False;\n\t\t\tGotoState('NormalFire');\n\t\t\tbPointing = True;\n\t\t\tPlayAnim('Place',, 0.1);\n\t\t\treturn;\n\t\t}\n\t}\n\n\t// otherwise, throw as usual\n\tSuper.Fire(Value);\n}\n\n// Become a pickup\n// Weapons that carry their ammo with them don't vanish when dropped\nfunction BecomePickup()\n{\n\tSuper.BecomePickup();\n   if (Level.NetMode != NM_Standalone)\n      if (bTossedOut)\n         Lifespan = 0.0;\n}\n\n// ----------------------------------------------------------------------\n// TestMPBeltSpot()\n// Returns true if the suggested belt location is ok for the object in mp.\n// ----------------------------------------------------------------------\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return (BeltSpot == 6);\n}\n\ndefaultproperties\n{\n     ShortName=\"TLAM\"\n     LowAmmoWaterMark=2\n     GoverningSkill=Class'DeusEx.SkillDemolition'\n     ShotTime=0.300000\n     reloadTime=0.100000\n     HitDamage=50\n     maxRange=4800\n     AccurateRange=2400\n     BaseAccuracy=1.000000\n     bHasMuzzleFlash=False\n     bHandToHand=True\n     bUseAsDrawnWeapon=False\n     AITimeLimit=3.500000\n     AIFireDelay=5.000000\n     bNeedToSetMPPickupAmmo=False\n     mpReloadTime=0.100000\n     mpHitDamage=50\n     mpBaseAccuracy=1.000000\n     mpAccurateRange=2400\n     mpMaxRange=2400\n     AmmoName=Class'DeusEx.AmmoLAM'\n     ReloadCount=1\n     PickupAmmoCount=1\n     FireOffset=(Y=10.000000,Z=20.000000)\n     ProjectileClass=Class'PartyStuff.TrainingLam'\n     shakemag=50.000000\n     SelectSound=Sound'DeusExSounds.Weapons.LAMSelect'\n     InventoryGroup=20\n     ItemName=\"Training Lightweight Attack Munitions (TLAM)\"\n     PlayerViewOffset=(X=24.000000,Y=-15.000000,Z=-17.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.LAM'\n     PickupViewMesh=LodMesh'DeusExItems.LAMPickup'\n     ThirdPersonMesh=LodMesh'DeusExItems.LAM3rd'\n     Icon=Texture'DeusExUI.Icons.BeltIconLAM'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconLAM'\n     largeIconWidth=35\n     largeIconHeight=45\n     Description=\"A multi-functional explosive with electronic priming system that can either be thrown or attached to any surface with its polyhesive backing and used as a proximity mine.|n|n<UNATCO OPS FILE NOTE SC093-BLUE> Disarming a proximity device should only be attempted with the proper demolitions training. Trust me on this. -- Sam Carter <END NOTE>\"\n     beltDescription=\"TLAM\"\n     Mesh=LodMesh'DeusExItems.LAMPickup'\n     CollisionRadius=3.800000\n     CollisionHeight=3.500000\n     Mass=5.000000\n     Buoyancy=2.000000\n}\n",
            "name": "WeaponTrainingLam.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "ShortName=\"TLAM\"",
                    "LowAmmoWaterMark=2",
                    "GoverningSkill=Class'DeusEx.SkillDemolition'",
                    "ShotTime=0.300000",
                    "reloadTime=0.100000",
                    "HitDamage=50",
                    "maxRange=4800",
                    "AccurateRange=2400",
                    "BaseAccuracy=1.000000",
                    "bHasMuzzleFlash=False",
                    "bHandToHand=True",
                    "bUseAsDrawnWeapon=False",
                    "AITimeLimit=3.500000",
                    "AIFireDelay=5.000000",
                    "bNeedToSetMPPickupAmmo=False",
                    "mpReloadTime=0.100000",
                    "mpHitDamage=50",
                    "mpBaseAccuracy=1.000000",
                    "mpAccurateRange=2400",
                    "mpMaxRange=2400",
                    "AmmoName=Class'DeusEx.AmmoLAM'",
                    "ReloadCount=1",
                    "PickupAmmoCount=1",
                    "FireOffset=(Y=10.000000,Z=20.000000)",
                    "ProjectileClass=Class'PartyStuff.TrainingLam'",
                    "shakemag=50.000000",
                    "SelectSound=Sound'DeusExSounds.Weapons.LAMSelect'",
                    "InventoryGroup=20",
                    "ItemName=\"Training Lightweight Attack Munitions (TLAM)\"",
                    "PlayerViewOffset=(X=24.000000,Y=-15.000000,Z=-17.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.LAM'",
                    "PickupViewMesh=LodMesh'DeusExItems.LAMPickup'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.LAM3rd'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconLAM'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconLAM'",
                    "largeIconWidth=35",
                    "largeIconHeight=45",
                    "Description=\"A multi-functional explosive with electronic priming system that can either be thrown or attached to any surface with its polyhesive backing and used as a proximity mine.|n|n<UNATCO OPS FILE NOTE SC093-BLUE> Disarming a proximity device should only be attempted with the proper demolitions training. Trust me on this. -- Sam Carter <END NOTE>\"",
                    "beltDescription=\"TLAM\"",
                    "Mesh=LodMesh'DeusExItems.LAMPickup'",
                    "CollisionRadius=3.800000",
                    "CollisionHeight=3.500000",
                    "Mass=5.000000",
                    "Buoyancy=2.000000"
                ],
                "exec": [],
                "extends": "DeusExWeapon",
                "functions": {
                    "BecomePickup": {
                        "body": "{\n\tSuper.BecomePickup();\n   if (Level.NetMode != NM_Standalone)\n      if (bTossedOut)\n         Lifespan = 0.0;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "BecomePickup",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Fire": {
                        "body": "{\n\t// if facing a wall, affix the LAM to the wall\n\tif (Pawn(Owner) != None)\n\t{\n\t\tif (bNearWall)\n\t\t{\n\t\t\tbReadyToFire = False;\n\t\t\tGotoState('NormalFire');\n\t\t\tbPointing = True;\n\t\t\tPlayAnim('Place',, 0.1);\n\t\t\treturn;\n\t\t}\n\t}\n\n\t// otherwise, throw as usual\n\tSuper.Fire(Value);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Fire",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "Value"
                            ]
                        ],
                        "return": ""
                    },
                    "PostBeginPlay": {
                        "body": "{\n   Super.PostBeginPlay();\n   bWeaponStay=False;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return (BeltSpot == 6);\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 115,
                "replication": "",
                "states": [],
                "variables": [
                    "var localized String shortName;"
                ]
            }
        },
        "WeaponTrainingPistol.uc": {
            "body": "//=============================================================================\n// WeaponAssaultGun.\n//=============================================================================\nclass WeaponTrainingPistol extends WeaponPistol;\n\nvar bool bSafety;\n\nfunction string GetDisplayString(Actor P)\n{\n\tif(P.isA('DeusExPlayer'))\n\t\treturn DeusExPlayer(p).PlayerReplicationInfo.PlayerName;\n\telse if(P.isA('ScriptedPawn'))\n\t\treturn ScriptedPawn(P).FamiliarName;\n\telse if(P.isA('DeusExDecoration'))\n\t\treturn DeusExDecoration(P).ItemName;\n}\n\nfunction GiveTo( pawn Other )\n{\n    super.Giveto(Other);\n\tbSafety=True;\n\tOther.ClientMessage(\"Training Weapon: Laser Toggle to turn safety off.\");\n}\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\nfunction string CalcHitLoc(int HitPart)\n{\n\tif(HitPart == 1)\n\t\treturn \"Head\";\n\n\tif(HitPart == 2)\n\t\treturn \"Torso\";\n\t\t\n\tif(HitPart == 3)\n\t\treturn \"Legs\";\n\n\tif(HitPart == 4)\n\t\treturn \"Legs\";\n\t\n\tif(HitPart == 5)\n\t\treturn \"Torso\";\n\n\tif(HitPart == 6)\n\t\treturn \"Torso\";\n}\n\nfunction ProcessTraceHit(Actor Other, Vector HitLocation, Vector HitNormal, Vector X, Vector Y, Vector Z)\n{\n\tlocal float        mult;\n\tlocal name         damageType;\n\tlocal DeusExPlayer dxPlayer;\n\tlocal Pawn P;\n\tlocal PSSing PSF;\n\n\t\tif(!bSafety)\n\t\t{\n\t\t\tsuper.ProcessTraceHit(other, hitlocation, hitnormal, x, y, z);\n\t\t}\n\t\t\n\tif( Other.isA('PlayerPawn') )\n\t{\n\t\tif ( CalcHitLoc(DeusExPlayer(Other).GetMPHitLocation(HitLocation)) == \"Head\" ) \n\t\t{\n\t\t\tBroadcastmessage(DeusExPlayer(Owner).PlayerReplicationInfo.PlayerName$\" got a headshot!\");\t\t\t\n\t\t}\n\t\tDeusExPlayer(Owner).ClientMessage(GetDisplayString(Other)$\" hit: \"$CalcHitLoc(DeusExPlayer(Other).GetMPHitLocation(HitLocation)));\n\t\t\n\t}\n\t\n\tif(Other.isA('LAM') || Other.isA('TrainingLAM'))\n\t{\n\t\t\tsuper.ProcessTraceHit(other, hitlocation, hitnormal, x, y, z);\n\t\t\tBroadcastmessage(DeusExPlayer(Owner).PlayerReplicationInfo.PlayerName$\" hit a training LAM!\");\n\t\t\tDeusExPlayer(Owner).PlayerReplicationInfo.Score += 1;\n\t}\n}\n\nsimulated function float CalculateAccuracy()\n{\n\treturn 0.000000; //Dirty hack to always return dead on accuracy.\n}\n\nsimulated function lasertoggle()\n{\n\tbSafety = !bSafety;\n\tDeusExPlayer(Owner).ClientMessage(\"Player Safety:\"@bSafety);\n}\n\ndefaultproperties\n{\n     bHasScope=True\n     bHasSilencer=True\n     InventoryGroup=147\n     ItemName=\"Training Pistol\"\n     beltDescription=\"T-PISTOL\"\n}\n",
            "name": "WeaponTrainingPistol.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bHasScope=True",
                    "bHasSilencer=True",
                    "InventoryGroup=147",
                    "ItemName=\"Training Pistol\"",
                    "beltDescription=\"T-PISTOL\""
                ],
                "exec": [],
                "extends": "WeaponPistol",
                "functions": {
                    "CalcHitLoc": {
                        "body": "{\n\tif(HitPart == 1)\n\t\treturn \"Head\";\n\n\tif(HitPart == 2)\n\t\treturn \"Torso\";\n\t\t\n\tif(HitPart == 3)\n\t\treturn \"Legs\";\n\n\tif(HitPart == 4)\n\t\treturn \"Legs\";\n\t\n\tif(HitPart == 5)\n\t\treturn \"Torso\";\n\n\tif(HitPart == 6)\n\t\treturn \"Torso\";\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "CalcHitLoc",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "HitPart"
                            ]
                        ],
                        "return": "string"
                    },
                    "CalculateAccuracy": {
                        "body": "{\n\treturn 0.000000; //Dirty hack to always return dead on accuracy.\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "CalculateAccuracy",
                        "native": false,
                        "param": [],
                        "return": "float"
                    },
                    "GetDisplayString": {
                        "body": "{\n\tif(P.isA('DeusExPlayer'))\n\t\treturn DeusExPlayer(p).PlayerReplicationInfo.PlayerName;\n\telse if(P.isA('ScriptedPawn'))\n\t\treturn ScriptedPawn(P).FamiliarName;\n\telse if(P.isA('DeusExDecoration'))\n\t\treturn DeusExDecoration(P).ItemName;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetDisplayString",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "P"
                            ]
                        ],
                        "return": "string"
                    },
                    "GiveTo": {
                        "body": "{\n    super.Giveto(Other);\n\tbSafety=True;\n\tOther.ClientMessage(\"Training Weapon: Laser Toggle to turn safety off.\");\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "GiveTo",
                        "native": false,
                        "param": [
                            [
                                "pawn",
                                "Other"
                            ]
                        ],
                        "return": ""
                    },
                    "ProcessTraceHit": {
                        "body": "{\n\n\t\tif(!bSafety)\n\t\t{\n\t\t\tsuper.ProcessTraceHit(other, hitlocation, hitnormal, x, y, z);\n\t\t}\n\t\t\n\tif( Other.isA('PlayerPawn') )\n\t{\n\t\tif ( CalcHitLoc(DeusExPlayer(Other).GetMPHitLocation(HitLocation)) == \"Head\" ) \n\t\t{\n\t\t\tBroadcastmessage(DeusExPlayer(Owner).PlayerReplicationInfo.PlayerName$\" got a headshot!\");\t\t\t\n\t\t}\n\t\tDeusExPlayer(Owner).ClientMessage(GetDisplayString(Other)$\" hit: \"$CalcHitLoc(DeusExPlayer(Other).GetMPHitLocation(HitLocation)));\n\t\t\n\t}\n\t\n\tif(Other.isA('LAM') || Other.isA('TrainingLAM'))\n\t{\n\t\t\tsuper.ProcessTraceHit(other, hitlocation, hitnormal, x, y, z);\n\t\t\tBroadcastmessage(DeusExPlayer(Owner).PlayerReplicationInfo.PlayerName$\" hit a training LAM!\");\n\t\t\tDeusExPlayer(Owner).PlayerReplicationInfo.Score += 1;\n\t}\n}",
                        "locals": [
                            "local float        mult;",
                            "local name         damageType;",
                            "local DeusExPlayer dxPlayer;",
                            "local Pawn P;",
                            "local PSSing PSF;"
                        ],
                        "modifiers": [],
                        "name": "ProcessTraceHit",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Other"
                            ],
                            [
                                "Vector",
                                "HitLocation"
                            ],
                            [
                                "Vector",
                                "HitNormal"
                            ],
                            [
                                "Vector",
                                "X"
                            ],
                            [
                                "Vector",
                                "Y"
                            ],
                            [
                                "Vector",
                                "Z"
                            ]
                        ],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    },
                    "lasertoggle": {
                        "body": "{\n\tbSafety = !bSafety;\n\tDeusExPlayer(Owner).ClientMessage(\"Player Safety:\"@bSafety);\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "lasertoggle",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 101,
                "replication": "",
                "states": [],
                "variables": [
                    "var bool bSafety;"
                ]
            }
        },
        "WeaponTrainingRifle.uc": {
            "body": "//=============================================================================\n// WeaponAssaultGun.\n//=============================================================================\nclass WeaponTrainingRifle extends WeaponRifle;\n\nvar bool bSafety;\n\nfunction string GetDisplayString(Actor P)\n{\n\tif(P.isA('DeusExPlayer'))\n\t\treturn DeusExPlayer(p).PlayerReplicationInfo.PlayerName;\n\telse if(P.isA('ScriptedPawn'))\n\t\treturn ScriptedPawn(P).FamiliarName;\n\telse if(P.isA('DeusExDecoration'))\n\t\treturn DeusExDecoration(P).ItemName;\n}\n\nfunction GiveTo( pawn Other )\n{\n    super.Giveto(Other);\n\tbSafety=True;\n\tOther.ClientMessage(\"Training Weapon: Laser Toggle to turn safety off.\");\n}\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\nfunction string CalcHitLoc(int HitPart)\n{\n\tif(HitPart == 1)\n\t\treturn \"Head\";\n\n\tif(HitPart == 2)\n\t\treturn \"Torso\";\n\t\t\n\tif(HitPart == 3)\n\t\treturn \"Legs\";\n\n\tif(HitPart == 4)\n\t\treturn \"Legs\";\n\t\n\tif(HitPart == 5)\n\t\treturn \"Torso\";\n\n\tif(HitPart == 6)\n\t\treturn \"Torso\";\n}\n\nfunction ProcessTraceHit(Actor Other, Vector HitLocation, Vector HitNormal, Vector X, Vector Y, Vector Z)\n{\n\tlocal float        mult;\n\tlocal name         damageType;\n\tlocal DeusExPlayer dxPlayer;\n\tlocal Pawn P;\n\tlocal PSSing PSF;\n\n\t\tif(!bSafety)\n\t\t{\n\t\t\tsuper.ProcessTraceHit(other, hitlocation, hitnormal, x, y, z);\n\t\t}\n\t\t\n\tif( Other.isA('PlayerPawn') )\n\t{\n\t\tif ( CalcHitLoc(DeusExPlayer(Other).GetMPHitLocation(HitLocation)) == \"Head\" ) \n\t\t{\n\t\t\tBroadcastmessage(DeusExPlayer(Owner).PlayerReplicationInfo.PlayerName$\" got a headshot!\");\t\t\t\n\t\t}\n\t\tDeusExPlayer(Owner).ClientMessage(GetDisplayString(Other)$\" hit: \"$CalcHitLoc(DeusExPlayer(Other).GetMPHitLocation(HitLocation)));\n\t\t\n\t}\n\t\n\tif(Other.isA('LAM') || Other.isA('TrainingLAM'))\n\t{\n\t\t\tsuper.ProcessTraceHit(other, hitlocation, hitnormal, x, y, z);\n\t\t\tBroadcastmessage(DeusExPlayer(Owner).PlayerReplicationInfo.PlayerName$\" hit a training LAM!\");\n\t\t\tDeusExPlayer(Owner).PlayerReplicationInfo.Score += 1;\n\t}\n}\n\nsimulated function lasertoggle()\n{\n\tbSafety = !bSafety;\n\tDeusExPlayer(Owner).ClientMessage(\"Player Safety:\"@bSafety);\n}\n\ndefaultproperties\n{\n     bHasSilencer=True\n     InventoryGroup=148\n     ItemName=\"Training Sniper Rifle\"\n     beltDescription=\"T-RIFLE\"\n}\n",
            "name": "WeaponTrainingRifle.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bHasSilencer=True",
                    "InventoryGroup=148",
                    "ItemName=\"Training Sniper Rifle\"",
                    "beltDescription=\"T-RIFLE\""
                ],
                "exec": [],
                "extends": "WeaponRifle",
                "functions": {
                    "CalcHitLoc": {
                        "body": "{\n\tif(HitPart == 1)\n\t\treturn \"Head\";\n\n\tif(HitPart == 2)\n\t\treturn \"Torso\";\n\t\t\n\tif(HitPart == 3)\n\t\treturn \"Legs\";\n\n\tif(HitPart == 4)\n\t\treturn \"Legs\";\n\t\n\tif(HitPart == 5)\n\t\treturn \"Torso\";\n\n\tif(HitPart == 6)\n\t\treturn \"Torso\";\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "CalcHitLoc",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "HitPart"
                            ]
                        ],
                        "return": "string"
                    },
                    "GetDisplayString": {
                        "body": "{\n\tif(P.isA('DeusExPlayer'))\n\t\treturn DeusExPlayer(p).PlayerReplicationInfo.PlayerName;\n\telse if(P.isA('ScriptedPawn'))\n\t\treturn ScriptedPawn(P).FamiliarName;\n\telse if(P.isA('DeusExDecoration'))\n\t\treturn DeusExDecoration(P).ItemName;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "GetDisplayString",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "P"
                            ]
                        ],
                        "return": "string"
                    },
                    "GiveTo": {
                        "body": "{\n    super.Giveto(Other);\n\tbSafety=True;\n\tOther.ClientMessage(\"Training Weapon: Laser Toggle to turn safety off.\");\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "GiveTo",
                        "native": false,
                        "param": [
                            [
                                "pawn",
                                "Other"
                            ]
                        ],
                        "return": ""
                    },
                    "ProcessTraceHit": {
                        "body": "{\n\n\t\tif(!bSafety)\n\t\t{\n\t\t\tsuper.ProcessTraceHit(other, hitlocation, hitnormal, x, y, z);\n\t\t}\n\t\t\n\tif( Other.isA('PlayerPawn') )\n\t{\n\t\tif ( CalcHitLoc(DeusExPlayer(Other).GetMPHitLocation(HitLocation)) == \"Head\" ) \n\t\t{\n\t\t\tBroadcastmessage(DeusExPlayer(Owner).PlayerReplicationInfo.PlayerName$\" got a headshot!\");\t\t\t\n\t\t}\n\t\tDeusExPlayer(Owner).ClientMessage(GetDisplayString(Other)$\" hit: \"$CalcHitLoc(DeusExPlayer(Other).GetMPHitLocation(HitLocation)));\n\t\t\n\t}\n\t\n\tif(Other.isA('LAM') || Other.isA('TrainingLAM'))\n\t{\n\t\t\tsuper.ProcessTraceHit(other, hitlocation, hitnormal, x, y, z);\n\t\t\tBroadcastmessage(DeusExPlayer(Owner).PlayerReplicationInfo.PlayerName$\" hit a training LAM!\");\n\t\t\tDeusExPlayer(Owner).PlayerReplicationInfo.Score += 1;\n\t}\n}",
                        "locals": [
                            "local float        mult;",
                            "local name         damageType;",
                            "local DeusExPlayer dxPlayer;",
                            "local Pawn P;",
                            "local PSSing PSF;"
                        ],
                        "modifiers": [],
                        "name": "ProcessTraceHit",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Other"
                            ],
                            [
                                "Vector",
                                "HitLocation"
                            ],
                            [
                                "Vector",
                                "HitNormal"
                            ],
                            [
                                "Vector",
                                "X"
                            ],
                            [
                                "Vector",
                                "Y"
                            ],
                            [
                                "Vector",
                                "Z"
                            ]
                        ],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    },
                    "lasertoggle": {
                        "body": "{\n\tbSafety = !bSafety;\n\tDeusExPlayer(Owner).ClientMessage(\"Player Safety:\"@bSafety);\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "lasertoggle",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 95,
                "replication": "",
                "states": [],
                "variables": [
                    "var bool bSafety;"
                ]
            }
        },
        "WeaponTravelGun.uc": {
            "body": "//=============================================================================\n// WeaponHostageGun.\n//=============================================================================\nclass WeaponTravelGun extends WeaponGEPGun;\n\ndefaultproperties\n{\n     ProjectileClass=Class'PartyStuff.TRocket'\n     InventoryGroup=182\n     ItemName=\"Travel Weapon\"\n     Description=\"Blablabla takes people to places blablabla.\"\n     beltDescription=\"TRAVEL\"\n}\n",
            "name": "WeaponTravelGun.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "ProjectileClass=Class'PartyStuff.TRocket'",
                    "InventoryGroup=182",
                    "ItemName=\"Travel Weapon\"",
                    "Description=\"Blablabla takes people to places blablabla.\"",
                    "beltDescription=\"TRAVEL\""
                ],
                "exec": [],
                "extends": "WeaponGEPGun",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 14,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "WeaponTripBomb.uc": {
            "body": "//=============================================================================\n// WeaponTripBomb.\n//=============================================================================\nclass WeaponTripBomb extends DeusExWeapon;\n\nvar localized String shortName;\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t}\n}\n\nfunction PostBeginPlay()\n{\n   Super.PostBeginPlay();\n   bWeaponStay=False;\n}\n\nfunction Fire(float Value)\n{\n\t// if facing a wall, affix the LAM to the wall\n\tif (Pawn(Owner) != None)\n\t{\n\t\tif (!NearWallCheck())\n\t\t{\n\t\t\tDeusExPlayer(Owner).bJustFired = False;\n\t\t\tbReadyToFire = True;\n\t\t\tbPointing = False;\n\t\t\tbFiring = False;\n\t\t\tGotoState('Idle');\n\t\t\tDeusExPlayer(Owner).ConsoleCommand(\"ThrowWeapon\");\n\t\t\treturn;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbReadyToFire = False;\n\t\t\tGotoState('NormalFire');\n\t\t\tbPointing = True;\n\t\t\tPlayAnim('Place',, 0.0);\n\t\t\treturn;\n\t\t}\n\t}\n}\n\n// Become a pickup\n// Weapons that carry their ammo with them don't vanish when dropped\nfunction BecomePickup()\n{\n\tSuper.BecomePickup();\n   if (Level.NetMode != NM_Standalone)\n      if (bTossedOut)\n         Lifespan = 0.0;\n}\n\n// ----------------------------------------------------------------------\n// TestMPBeltSpot()\n// Returns true if the suggested belt location is ok for the object in mp.\n// ----------------------------------------------------------------------\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return (BeltSpot == 6);\n}\n\ndefaultproperties\n{\n     ShortName=\"Laser\"\n     LowAmmoWaterMark=1\n     GoverningSkill=Class'DeusEx.SkillDemolition'\n     Concealability=CONC_All\n     ShotTime=0.300000\n     reloadTime=0.100000\n     HitDamage=50\n     maxRange=4800\n     AccurateRange=2400\n     BaseAccuracy=1.000000\n     bHasMuzzleFlash=False\n     bHandToHand=True\n     bUseAsDrawnWeapon=False\n     bNeedToSetMPPickupAmmo=False\n     mpReloadTime=0.100000\n     mpHitDamage=50\n     mpBaseAccuracy=1.000000\n     mpAccurateRange=2400\n     mpMaxRange=2400\n     mpPickupAmmoCount=6\n     AmmoName=Class'PartyStuff.AmmoTripB'\n     ReloadCount=1\n     PickupAmmoCount=6\n     FireOffset=(Y=10.000000,Z=20.000000)\n     ProjectileClass=Class'PartyStuff.TripProj'\n     shakemag=50.000000\n     SelectSound=Sound'DeusExSounds.Weapons.LAMSelect'\n     InventoryGroup=128\n     ItemName=\"Laser Wire\"\n     PlayerViewOffset=(X=24.000000,Y=-15.000000,Z=-17.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.LAM'\n     PickupViewMesh=LodMesh'DeusExItems.LAMPickup'\n     ThirdPersonMesh=LodMesh'DeusExItems.LAM3rd'\n     Icon=Texture'DeusExUI.Icons.BeltIconLAM'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconLAM'\n     largeIconWidth=35\n     largeIconHeight=45\n     Description=\"Places a deadly laser wire that will instantly kill anything that touches it\"\n     beltDescription=\"LASMINE\"\n     Mesh=LodMesh'DeusExItems.LAMPickup'\n     CollisionRadius=3.800000\n     CollisionHeight=3.500000\n     Mass=5.000000\n     Buoyancy=2.000000\n}\n",
            "name": "WeaponTripBomb.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "ShortName=\"Laser\"",
                    "LowAmmoWaterMark=1",
                    "GoverningSkill=Class'DeusEx.SkillDemolition'",
                    "Concealability=CONC_All",
                    "ShotTime=0.300000",
                    "reloadTime=0.100000",
                    "HitDamage=50",
                    "maxRange=4800",
                    "AccurateRange=2400",
                    "BaseAccuracy=1.000000",
                    "bHasMuzzleFlash=False",
                    "bHandToHand=True",
                    "bUseAsDrawnWeapon=False",
                    "bNeedToSetMPPickupAmmo=False",
                    "mpReloadTime=0.100000",
                    "mpHitDamage=50",
                    "mpBaseAccuracy=1.000000",
                    "mpAccurateRange=2400",
                    "mpMaxRange=2400",
                    "mpPickupAmmoCount=6",
                    "AmmoName=Class'PartyStuff.AmmoTripB'",
                    "ReloadCount=1",
                    "PickupAmmoCount=6",
                    "FireOffset=(Y=10.000000,Z=20.000000)",
                    "ProjectileClass=Class'PartyStuff.TripProj'",
                    "shakemag=50.000000",
                    "SelectSound=Sound'DeusExSounds.Weapons.LAMSelect'",
                    "InventoryGroup=128",
                    "ItemName=\"Laser Wire\"",
                    "PlayerViewOffset=(X=24.000000,Y=-15.000000,Z=-17.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.LAM'",
                    "PickupViewMesh=LodMesh'DeusExItems.LAMPickup'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.LAM3rd'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconLAM'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconLAM'",
                    "largeIconWidth=35",
                    "largeIconHeight=45",
                    "Description=\"Places a deadly laser wire that will instantly kill anything that touches it\"",
                    "beltDescription=\"LASMINE\"",
                    "Mesh=LodMesh'DeusExItems.LAMPickup'",
                    "CollisionRadius=3.800000",
                    "CollisionHeight=3.500000",
                    "Mass=5.000000",
                    "Buoyancy=2.000000"
                ],
                "exec": [],
                "extends": "DeusExWeapon",
                "functions": {
                    "BecomePickup": {
                        "body": "{\n\tSuper.BecomePickup();\n   if (Level.NetMode != NM_Standalone)\n      if (bTossedOut)\n         Lifespan = 0.0;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "BecomePickup",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Fire": {
                        "body": "{\n\t// if facing a wall, affix the LAM to the wall\n\tif (Pawn(Owner) != None)\n\t{\n\t\tif (!NearWallCheck())\n\t\t{\n\t\t\tDeusExPlayer(Owner).bJustFired = False;\n\t\t\tbReadyToFire = True;\n\t\t\tbPointing = False;\n\t\t\tbFiring = False;\n\t\t\tGotoState('Idle');\n\t\t\tDeusExPlayer(Owner).ConsoleCommand(\"ThrowWeapon\");\n\t\t\treturn;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbReadyToFire = False;\n\t\t\tGotoState('NormalFire');\n\t\t\tbPointing = True;\n\t\t\tPlayAnim('Place',, 0.0);\n\t\t\treturn;\n\t\t}\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Fire",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "Value"
                            ]
                        ],
                        "return": ""
                    },
                    "PostBeginPlay": {
                        "body": "{\n   Super.PostBeginPlay();\n   bWeaponStay=False;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return (BeltSpot == 6);\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 122,
                "replication": "",
                "states": [],
                "variables": [
                    "var localized String shortName;"
                ]
            }
        },
        "WeaponTripBombEMP.uc": {
            "body": "//=============================================================================\n// WeaponTripBomb.\n//=============================================================================\nclass WeaponTripBombEMP extends DeusExWeapon;\n\nvar localized String shortName;\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t}\n}\n\nfunction PostBeginPlay()\n{\n   Super.PostBeginPlay();\n   bWeaponStay=False;\n}\n\nfunction Fire(float Value)\n{\n\t// if facing a wall, affix the LAM to the wall\n\tif (Pawn(Owner) != None)\n\t{\n\t\tif (!NearWallCheck())\n\t\t{\n\t\t\tDeusExPlayer(Owner).bJustFired = False;\n\t\t\tbReadyToFire = True;\n\t\t\tbPointing = False;\n\t\t\tbFiring = False;\n\t\t\tGotoState('Idle');\n\t\t\tDeusExPlayer(Owner).ConsoleCommand(\"ThrowWeapon\");\n\t\t\treturn;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbReadyToFire = False;\n\t\t\tGotoState('NormalFire');\n\t\t\tbPointing = True;\n\t\t\tPlayAnim('Place',, 0.0);\n\t\t\treturn;\n\t\t}\n\t}\n}\n\n// Become a pickup\n// Weapons that carry their ammo with them don't vanish when dropped\nfunction BecomePickup()\n{\n\tSuper.BecomePickup();\n   if (Level.NetMode != NM_Standalone)\n      if (bTossedOut)\n         Lifespan = 0.0;\n}\n\n// ----------------------------------------------------------------------\n// TestMPBeltSpot()\n// Returns true if the suggested belt location is ok for the object in mp.\n// ----------------------------------------------------------------------\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return (BeltSpot == 6);\n}\n\ndefaultproperties\n{\n     ShortName=\"EMP\"\n     LowAmmoWaterMark=1\n     GoverningSkill=Class'DeusEx.SkillDemolition'\n     Concealability=CONC_All\n     ShotTime=0.300000\n     reloadTime=0.100000\n     HitDamage=50\n     maxRange=4800\n     AccurateRange=2400\n     BaseAccuracy=1.000000\n     bHasMuzzleFlash=False\n     bHandToHand=True\n     bUseAsDrawnWeapon=False\n     bNeedToSetMPPickupAmmo=False\n     mpReloadTime=0.100000\n     mpHitDamage=50\n     mpBaseAccuracy=1.000000\n     mpAccurateRange=2400\n     mpMaxRange=2400\n     mpPickupAmmoCount=6\n     AmmoName=Class'PartyStuff.AmmoTripBEMP'\n     ReloadCount=1\n     PickupAmmoCount=6\n     FireOffset=(Y=10.000000,Z=20.000000)\n     ProjectileClass=Class'PartyStuff.TripProjEMP'\n     shakemag=50.000000\n     SelectSound=Sound'DeusExSounds.Weapons.LAMSelect'\n     InventoryGroup=128\n     ItemName=\"EMP Laser Wire\"\n     PlayerViewOffset=(X=24.000000,Y=-15.000000,Z=-17.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.LAM'\n     PickupViewMesh=LodMesh'DeusExItems.LAMPickup'\n     ThirdPersonMesh=LodMesh'DeusExItems.LAM3rd'\n     Icon=Texture'DeusExUI.Icons.BeltIconLAM'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconLAM'\n     largeIconWidth=35\n     largeIconHeight=45\n     Description=\"EMP Laser\"\n     beltDescription=\"EMPLAS\"\n     Mesh=LodMesh'DeusExItems.LAMPickup'\n     CollisionRadius=3.800000\n     CollisionHeight=3.500000\n     Mass=5.000000\n     Buoyancy=2.000000\n}\n",
            "name": "WeaponTripBombEMP.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "ShortName=\"EMP\"",
                    "LowAmmoWaterMark=1",
                    "GoverningSkill=Class'DeusEx.SkillDemolition'",
                    "Concealability=CONC_All",
                    "ShotTime=0.300000",
                    "reloadTime=0.100000",
                    "HitDamage=50",
                    "maxRange=4800",
                    "AccurateRange=2400",
                    "BaseAccuracy=1.000000",
                    "bHasMuzzleFlash=False",
                    "bHandToHand=True",
                    "bUseAsDrawnWeapon=False",
                    "bNeedToSetMPPickupAmmo=False",
                    "mpReloadTime=0.100000",
                    "mpHitDamage=50",
                    "mpBaseAccuracy=1.000000",
                    "mpAccurateRange=2400",
                    "mpMaxRange=2400",
                    "mpPickupAmmoCount=6",
                    "AmmoName=Class'PartyStuff.AmmoTripBEMP'",
                    "ReloadCount=1",
                    "PickupAmmoCount=6",
                    "FireOffset=(Y=10.000000,Z=20.000000)",
                    "ProjectileClass=Class'PartyStuff.TripProjEMP'",
                    "shakemag=50.000000",
                    "SelectSound=Sound'DeusExSounds.Weapons.LAMSelect'",
                    "InventoryGroup=128",
                    "ItemName=\"EMP Laser Wire\"",
                    "PlayerViewOffset=(X=24.000000,Y=-15.000000,Z=-17.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.LAM'",
                    "PickupViewMesh=LodMesh'DeusExItems.LAMPickup'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.LAM3rd'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconLAM'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconLAM'",
                    "largeIconWidth=35",
                    "largeIconHeight=45",
                    "Description=\"EMP Laser\"",
                    "beltDescription=\"EMPLAS\"",
                    "Mesh=LodMesh'DeusExItems.LAMPickup'",
                    "CollisionRadius=3.800000",
                    "CollisionHeight=3.500000",
                    "Mass=5.000000",
                    "Buoyancy=2.000000"
                ],
                "exec": [],
                "extends": "DeusExWeapon",
                "functions": {
                    "BecomePickup": {
                        "body": "{\n\tSuper.BecomePickup();\n   if (Level.NetMode != NM_Standalone)\n      if (bTossedOut)\n         Lifespan = 0.0;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "BecomePickup",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Fire": {
                        "body": "{\n\t// if facing a wall, affix the LAM to the wall\n\tif (Pawn(Owner) != None)\n\t{\n\t\tif (!NearWallCheck())\n\t\t{\n\t\t\tDeusExPlayer(Owner).bJustFired = False;\n\t\t\tbReadyToFire = True;\n\t\t\tbPointing = False;\n\t\t\tbFiring = False;\n\t\t\tGotoState('Idle');\n\t\t\tDeusExPlayer(Owner).ConsoleCommand(\"ThrowWeapon\");\n\t\t\treturn;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbReadyToFire = False;\n\t\t\tGotoState('NormalFire');\n\t\t\tbPointing = True;\n\t\t\tPlayAnim('Place',, 0.0);\n\t\t\treturn;\n\t\t}\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Fire",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "Value"
                            ]
                        ],
                        "return": ""
                    },
                    "PostBeginPlay": {
                        "body": "{\n   Super.PostBeginPlay();\n   bWeaponStay=False;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return (BeltSpot == 6);\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 122,
                "replication": "",
                "states": [],
                "variables": [
                    "var localized String shortName;"
                ]
            }
        },
        "WeaponTripBombFire.uc": {
            "body": "//=============================================================================\n// WeaponTripBomb.\n//=============================================================================\nclass WeaponTripBombFire extends DeusExWeapon;\n\nvar localized String shortName;\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t}\n}\n\nfunction PostBeginPlay()\n{\n   Super.PostBeginPlay();\n   bWeaponStay=False;\n}\n\nfunction Fire(float Value)\n{\n\t// if facing a wall, affix the LAM to the wall\n\tif (Pawn(Owner) != None)\n\t{\n\t\tif (!NearWallCheck())\n\t\t{\n\t\t\tDeusExPlayer(Owner).bJustFired = False;\n\t\t\tbReadyToFire = True;\n\t\t\tbPointing = False;\n\t\t\tbFiring = False;\n\t\t\tGotoState('Idle');\n\t\t\tDeusExPlayer(Owner).ConsoleCommand(\"ThrowWeapon\");\n\t\t\treturn;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbReadyToFire = False;\n\t\t\tGotoState('NormalFire');\n\t\t\tbPointing = True;\n\t\t\tPlayAnim('Place',, 0.0);\n\t\t\treturn;\n\t\t}\n\t}\n}\n\n// Become a pickup\n// Weapons that carry their ammo with them don't vanish when dropped\nfunction BecomePickup()\n{\n\tSuper.BecomePickup();\n   if (Level.NetMode != NM_Standalone)\n      if (bTossedOut)\n         Lifespan = 0.0;\n}\n\n// ----------------------------------------------------------------------\n// TestMPBeltSpot()\n// Returns true if the suggested belt location is ok for the object in mp.\n// ----------------------------------------------------------------------\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return (BeltSpot == 6);\n}\n\ndefaultproperties\n{\n     ShortName=\"Laser\"\n     LowAmmoWaterMark=1\n     GoverningSkill=Class'DeusEx.SkillDemolition'\n     Concealability=CONC_All\n     ShotTime=0.300000\n     reloadTime=0.100000\n     HitDamage=50\n     maxRange=4800\n     AccurateRange=2400\n     BaseAccuracy=1.000000\n     bHasMuzzleFlash=False\n     bHandToHand=True\n     bUseAsDrawnWeapon=False\n     bNeedToSetMPPickupAmmo=False\n     mpReloadTime=0.100000\n     mpHitDamage=50\n     mpBaseAccuracy=1.000000\n     mpAccurateRange=2400\n     mpMaxRange=2400\n     mpPickupAmmoCount=6\n     AmmoName=Class'PartyStuff.AmmoTripBFire'\n     ReloadCount=1\n     PickupAmmoCount=6\n     FireOffset=(Y=10.000000,Z=20.000000)\n     ProjectileClass=Class'PartyStuff.TripProjFire'\n     shakemag=50.000000\n     SelectSound=Sound'DeusExSounds.Weapons.LAMSelect'\n     InventoryGroup=128\n     ItemName=\"Fire Laser\"\n     PlayerViewOffset=(X=24.000000,Y=-15.000000,Z=-17.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.LAM'\n     PickupViewMesh=LodMesh'DeusExItems.LAMPickup'\n     ThirdPersonMesh=LodMesh'DeusExItems.LAM3rd'\n     Icon=Texture'DeusExUI.Icons.BeltIconLAM'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconLAM'\n     largeIconWidth=35\n     largeIconHeight=45\n     Description=\"Places a deadly laser wire that will instantly kill anything that touches it\"\n     beltDescription=\"LASFIRE\"\n     Mesh=LodMesh'DeusExItems.LAMPickup'\n     CollisionRadius=3.800000\n     CollisionHeight=3.500000\n     Mass=5.000000\n     Buoyancy=2.000000\n}\n",
            "name": "WeaponTripBombFire.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "ShortName=\"Laser\"",
                    "LowAmmoWaterMark=1",
                    "GoverningSkill=Class'DeusEx.SkillDemolition'",
                    "Concealability=CONC_All",
                    "ShotTime=0.300000",
                    "reloadTime=0.100000",
                    "HitDamage=50",
                    "maxRange=4800",
                    "AccurateRange=2400",
                    "BaseAccuracy=1.000000",
                    "bHasMuzzleFlash=False",
                    "bHandToHand=True",
                    "bUseAsDrawnWeapon=False",
                    "bNeedToSetMPPickupAmmo=False",
                    "mpReloadTime=0.100000",
                    "mpHitDamage=50",
                    "mpBaseAccuracy=1.000000",
                    "mpAccurateRange=2400",
                    "mpMaxRange=2400",
                    "mpPickupAmmoCount=6",
                    "AmmoName=Class'PartyStuff.AmmoTripBFire'",
                    "ReloadCount=1",
                    "PickupAmmoCount=6",
                    "FireOffset=(Y=10.000000,Z=20.000000)",
                    "ProjectileClass=Class'PartyStuff.TripProjFire'",
                    "shakemag=50.000000",
                    "SelectSound=Sound'DeusExSounds.Weapons.LAMSelect'",
                    "InventoryGroup=128",
                    "ItemName=\"Fire Laser\"",
                    "PlayerViewOffset=(X=24.000000,Y=-15.000000,Z=-17.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.LAM'",
                    "PickupViewMesh=LodMesh'DeusExItems.LAMPickup'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.LAM3rd'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconLAM'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconLAM'",
                    "largeIconWidth=35",
                    "largeIconHeight=45",
                    "Description=\"Places a deadly laser wire that will instantly kill anything that touches it\"",
                    "beltDescription=\"LASFIRE\"",
                    "Mesh=LodMesh'DeusExItems.LAMPickup'",
                    "CollisionRadius=3.800000",
                    "CollisionHeight=3.500000",
                    "Mass=5.000000",
                    "Buoyancy=2.000000"
                ],
                "exec": [],
                "extends": "DeusExWeapon",
                "functions": {
                    "BecomePickup": {
                        "body": "{\n\tSuper.BecomePickup();\n   if (Level.NetMode != NM_Standalone)\n      if (bTossedOut)\n         Lifespan = 0.0;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "BecomePickup",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Fire": {
                        "body": "{\n\t// if facing a wall, affix the LAM to the wall\n\tif (Pawn(Owner) != None)\n\t{\n\t\tif (!NearWallCheck())\n\t\t{\n\t\t\tDeusExPlayer(Owner).bJustFired = False;\n\t\t\tbReadyToFire = True;\n\t\t\tbPointing = False;\n\t\t\tbFiring = False;\n\t\t\tGotoState('Idle');\n\t\t\tDeusExPlayer(Owner).ConsoleCommand(\"ThrowWeapon\");\n\t\t\treturn;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbReadyToFire = False;\n\t\t\tGotoState('NormalFire');\n\t\t\tbPointing = True;\n\t\t\tPlayAnim('Place',, 0.0);\n\t\t\treturn;\n\t\t}\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Fire",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "Value"
                            ]
                        ],
                        "return": ""
                    },
                    "PostBeginPlay": {
                        "body": "{\n   Super.PostBeginPlay();\n   bWeaponStay=False;\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return (BeltSpot == 6);\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 122,
                "replication": "",
                "states": [],
                "variables": [
                    "var localized String shortName;"
                ]
            }
        },
        "WeaponUtilBow.uc": {
            "body": "//=============================================================================\n// WeaponMiniCrossbow.\n//=============================================================================\nclass WeaponUtilBow extends DeusExWeapon;\n\nvar int Mode;\nvar int Grapvel, JumpVel;\nvar int rMode;\nvar int rGrapvel, rJumpVel;\nreplication\n{\nreliable if (bNetOwner && Role==ROLE_Authority)\nrMode, rGrapvel, rJumpVel;\n}\n\nfunction GiveTo( pawn Other )\n{\n    super.Giveto(Other);\n        Mode = 3;\n        rMode = 3;\n\tOther.ClientMessage(\"Cycle ammo to change modes.\");\n}\n\nsimulated function PreBeginPlay()\n{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t\tReloadCount = mpReloadCount;\n      PickupAmmoCount = mpReloadCount;\n\t}\n}\n\n/*\n0 - Trigger\n1 - Climber\n2 - JumpPad\n3 - Grapple\n*/\n\nfunction CycleAmmo()\n{\n\tif(DeusExPlayer(Owner).bAdmin)\n\t{\n\tMode++;\n\tif(Mode == 4)\n\t\tMode = 0;\n\t}\n\telse\n\t{\n\tMode++;\n\tif(Mode == 4)\n\t\tMode = 1;\n\t}\n\t\n\trmode=mode;\n\t/*if(Mode == 0)\n\t\tOwnerMsg(\"Trigger mode.\");\n\telse if(Mode == 1)\n\t\tOwnerMsg(\"Ladder mode.\");\n\telse if(Mode == 2)\n\t\tOwnerMsg(\"Jump Pad mode.\");\n\telse if(Mode == 3)\n\t\tOwnerMsg(\"Grapple mode.\");*/\n}\n\nfunction LaserToggle()\n{\n\tif(Mode == 3)\n\t{\n\tGrapvel += 500;\n\trGrapvel = Grapvel;\n//\tOwnerMsg(\"Grapple force\"@Grapvel);\n\t}\n\tif(Mode == 2)\n\t{\n\tJumpvel += 10;\n\trJumpvel = Jumpvel;\n//\tOwnerMsg(\"Jump force\"@Jumpvel);\n\t}\n}\n\nfunction ScopeToggle()\n{\n\tif(Mode == 3)\n\t{\n\tGrapvel -= 500;\n\t\trGrapvel = Grapvel;\n\t//\tOwnerMsg(\"Grapple force\"@Grapvel);\n\t}\n\tif(Mode == 2)\n\t{\n\tJumpvel -= 10;\n\trJumpvel = Jumpvel;\n\t//OwnerMsg(\"Jump force\"@Jumpvel);\n\t}\n}\n\nfunction OwnerMsg(string str)\n{\n\tDeusExPlayer(Owner).ClientMessage(str,'TeamSay');\n}\n\nsimulated event RenderOverlays(canvas Canvas)\n{\n\tlocal DeusExPlayer P;\n\tlocal int i;\n\tlocal Pawn CrosshairTarget;\n\tlocal float Scale, Accuracy, Dist;\n\tlocal vector HitLocation, HitNormal, StartTrace, EndTrace, X,Y,Z;\nlocal String KeyNamescope, Aliasscope, curKeyNamescope;\nlocal String KeyNamelaser, Aliaslaser, curKeyNamelaser;\nlocal String KeyNameammo, Aliasammo, curKeyNameammo;\n\tSuper.RenderOverlays(Canvas);\n\tP = DeusExPlayer(Owner);\n\tif ( P != None ) \n\t{\t\n\t\t\t\t/*curKeyNamescope = \"\";\n\t\t\t\tfor ( i=0; i<255; i++ )\n\t\t\t\t{\n\t\t\t\t\tKeyNamescope = Owner.ConsoleCommand ( \"KEYNAME \"$i );\n\t\t\t\t\tif ( KeyNamescope != \"\" )\n\t\t\t\t\t{\n\t\t\t\t\t\tAliasscope = Owner.ConsoleCommand( \"KEYBINDING \"$KeyNamescope );\n\t\t\t\t\t\tif ( Aliasscope ~= \"Togglescope\" )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurKeyNamescope = KeyNamescope;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ( curKeyNamescope ~= \"\" )\n\t\t\t\t\tcurKeyNamescope = \"NONE\";\n\t\t\t\t\t\n\t\t\t\tcurKeyNamelaser = \"\";\n\t\t\t\tfor ( i=0; i<255; i++ )\n\t\t\t\t{\n\t\t\t\t\tKeyNamelaser = Owner.ConsoleCommand ( \"KEYNAME \"$i );\n\t\t\t\t\tif ( KeyNamelaser != \"\" )\n\t\t\t\t\t{\n\t\t\t\t\t\tAliaslaser = Owner.ConsoleCommand( \"KEYBINDING \"$KeyNamelaser );\n\t\t\t\t\t\tif ( Aliaslaser ~= \"ToggleLaser\" )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurKeyNamelaser = KeyNamelaser;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ( curKeyNamelaser ~= \"\" )\n\t\t\t\t\tcurKeyNamelaser = \"NONE\";\n\t\t\t\t\t\n\t\t\t\tcurKeyNameammo = \"\";\n\t\t\t\tfor ( i=0; i<255; i++ )\n\t\t\t\t{\n\t\t\t\t\tKeyNameammo = Owner.ConsoleCommand ( \"KEYNAME \"$i );\n\t\t\t\t\tif ( KeyNameammo != \"\" )\n\t\t\t\t\t{\n\t\t\t\t\t\tAliasammo = Owner.ConsoleCommand( \"KEYBINDING \"$KeyNameammo );\n\t\t\t\t\t\tif ( Aliasammo ~= \"SwitchAmmo\" )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurKeyNameammo = KeyNameammo;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ( curKeyNameammo ~= \"\" )\n\t\t\t\t\tcurKeyNameammo = \"NONE\";*/\n\t\tGetAxes(Pawn(Owner).ViewRotation,X,Y,Z);\t\n\t\tStartTrace = ComputeProjectileStart(X, Y, Z);\n\t\tAdjustedAim = P.AdjustAim(1000000, StartTrace, 2*AimError, False, False);\n\t\tEndTrace = StartTrace + Accuracy * (FRand()-0.5)*Y*1000 + Accuracy * (FRand()-0.5)*Z*1000 ;\t\n\t\tEndTrace += (FMax(1024.0, MaxRange) * Vector(AdjustedAim));\n\t\t\t\tbOwnsCrossHair = True; \n\t\t\t\tScale = Canvas.ClipX/640;\n\t\t\t\tCanvas.SetPos(0.5 * Canvas.ClipX - 16 * Scale, 0.5 * Canvas.ClipY - 16 * Scale );\n\t\t\t\t//Canvas.Style = ERenderStyle.STY_Translucent;\n\t\t\t\tCanvas.DrawColor.R = 0;\n\t\t\t\tCanvas.DrawColor.G = Rand(128);\n\t\t\t\tCanvas.DrawColor.B = Rand(128);\n\t\t\t\tCanvas.Font = Canvas.SmallFont;\n\t\t\t\t//Canvas.DrawIcon(Texture'DeusExUI.UserInterface.AugIcontarget_Small', Scale);\n\t\t\t\t//Canvas.bCenter=True;\n\t\t\t\tif(rMode == 0)\n\t\t\t\t\tCanvas.DrawText(\"     (Next Mode = Ammo Change) Trigger\");\n\t\t\t\telse if(rMode == 1)\n\t\t\t\t\tCanvas.DrawText(\"     (Next Mode = Ammo Change) Ladder creation\");\n\t\t\t\telse if(rMode == 2)\n\t\t\t\t\tCanvas.DrawText(\"     (Next Mode = Ammo Change) Jump Pad - [ <- SCOPE] \"$rJumpVel$\" [LASER -> ]\");\n\t\t\t\telse if(rMode == 3)\n\t\t\t\t\tCanvas.DrawText(\"     (Next Mode = Ammo Change) Grapple - [ <- SCOPE] \"$rGrapVel$\" [LASER -> ]\");\n\t\t\t\t//Canvas.DrawPortal(0.5 * Canvas.ClipX - 16 * Scale, 0.5 * Canvas.ClipY - 16 * Scale , 30, 30, CrosshairTarget, CrosshairTarget.Location, CrosshairTarget.Rotation);\n\t\t\t}\n\t\t\telse\n\t\t\t\tbOwnsCrossHair = False; // Only for compatibility with HDX50\t\t\t\n}\n\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\nstate NormalFire //(Thanks to JimBowen for this Infinite ammo code) \n{ \n   Begin: \n      if ((ClipCount >= ReloadCount) && (ReloadCount != 0)) \n      { \n         if (!bAutomatic) \n         { \n            bFiring = False; \n            FinishAnim(); \n         } \n    \n         if (Owner != None) \n         { \n            if (Owner.IsA('DeusExPlayer')) \n            { \n               bFiring = False; \n            } \n            else if (Owner.IsA('ScriptedPawn')) \n            { \n               bFiring = False; \n               ReloadAmmo(); \n            } \n         } \n         else \n         { \n            if (bHasMuzzleFlash) \n               EraseMuzzleFlashTexture(); \n            GotoState('Idle'); \n         } \n      } \n      if ( bAutomatic && (( Level.NetMode == NM_DedicatedServer ) || ((Level.NetMode == NM_ListenServer) && Owner.IsA('DeusExPlayer') && !DeusExPlayer(Owner).PlayerIsListenClient()))) \n         GotoState('Idle'); \n    \n      Sleep(GetShotTime()); \n      if (bAutomatic) \n      { \n         GenerateBullet();       // In multiplayer bullets are generated by the client which will let the server know when \n         Goto('Begin'); \n      } \n      bFiring = False; \n      FinishAnim(); \n      ReadyToFire(); \n   Done: \n      bFiring = False; \n      Finish(); \n}\n\ndefaultproperties\n{\n     Grapvel=1500\n     JumpVel=-950\n     rGrapvel=1500\n     rJumpVel=-950\n     LowAmmoWaterMark=4\n     GoverningSkill=Class'DeusEx.SkillWeaponPistol'\n     NoiseLevel=0.050000\n     EnemyEffective=ENMEFF_Organic\n     Concealability=CONC_All\n     ShotTime=0.800000\n     reloadTime=2.000000\n     HitDamage=25\n     maxRange=1600\n     AccurateRange=800\n     BaseAccuracy=0.800000\n     bCanHaveScope=True\n     ScopeFOV=15\n     bCanHaveLaser=True\n     bHasSilencer=True\n     StunDuration=10.000000\n     bHasMuzzleFlash=False\n     mpReloadTime=0.500000\n     mpHitDamage=30\n     mpBaseAccuracy=0.100000\n     mpAccurateRange=2000\n     mpMaxRange=2000\n     bCanHaveModBaseAccuracy=True\n     bCanHaveModAccurateRange=True\n     bCanHaveModReloadTime=True\n     FireOffset=(X=-25.000000,Y=8.000000,Z=14.000000)\n     ProjectileClass=Class'PartyStuff.DartUtil'\n     shakemag=30.000000\n     FireSound=Sound'DeusExSounds.Weapons.MiniCrossbowFire'\n     AltFireSound=Sound'DeusExSounds.Weapons.MiniCrossbowReloadEnd'\n     CockingSound=Sound'DeusExSounds.Weapons.MiniCrossbowReload'\n     SelectSound=Sound'DeusExSounds.Weapons.MiniCrossbowSelect'\n     InventoryGroup=253\n     ItemName=\"Utility-Crossbow\"\n     PlayerViewOffset=(X=25.000000,Y=-8.000000,Z=-14.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.MiniCrossbow'\n     PickupViewMesh=LodMesh'DeusExItems.MiniCrossbowPickup'\n     ThirdPersonMesh=LodMesh'DeusExItems.MiniCrossbow3rd'\n     Icon=Texture'DeusExUI.Icons.BeltIconCrossbow'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconCrossbow'\n     largeIconWidth=47\n     largeIconHeight=46\n     Description=\"The mini-crossbow was specifically developed for espionage work, and accepts a range of dart types (normal, tranquilizer, or flare) that can be changed depending upon the mission requirements.\"\n     beltDescription=\"UTIL\"\n     Mesh=LodMesh'DeusExItems.MiniCrossbowPickup'\n     CollisionRadius=8.000000\n     CollisionHeight=1.000000\n     Mass=15.000000\n}\n",
            "name": "WeaponUtilBow.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "Grapvel=1500",
                    "JumpVel=-950",
                    "rGrapvel=1500",
                    "rJumpVel=-950",
                    "LowAmmoWaterMark=4",
                    "GoverningSkill=Class'DeusEx.SkillWeaponPistol'",
                    "NoiseLevel=0.050000",
                    "EnemyEffective=ENMEFF_Organic",
                    "Concealability=CONC_All",
                    "ShotTime=0.800000",
                    "reloadTime=2.000000",
                    "HitDamage=25",
                    "maxRange=1600",
                    "AccurateRange=800",
                    "BaseAccuracy=0.800000",
                    "bCanHaveScope=True",
                    "ScopeFOV=15",
                    "bCanHaveLaser=True",
                    "bHasSilencer=True",
                    "StunDuration=10.000000",
                    "bHasMuzzleFlash=False",
                    "mpReloadTime=0.500000",
                    "mpHitDamage=30",
                    "mpBaseAccuracy=0.100000",
                    "mpAccurateRange=2000",
                    "mpMaxRange=2000",
                    "bCanHaveModBaseAccuracy=True",
                    "bCanHaveModAccurateRange=True",
                    "bCanHaveModReloadTime=True",
                    "FireOffset=(X=-25.000000,Y=8.000000,Z=14.000000)",
                    "ProjectileClass=Class'PartyStuff.DartUtil'",
                    "shakemag=30.000000",
                    "FireSound=Sound'DeusExSounds.Weapons.MiniCrossbowFire'",
                    "AltFireSound=Sound'DeusExSounds.Weapons.MiniCrossbowReloadEnd'",
                    "CockingSound=Sound'DeusExSounds.Weapons.MiniCrossbowReload'",
                    "SelectSound=Sound'DeusExSounds.Weapons.MiniCrossbowSelect'",
                    "InventoryGroup=253",
                    "ItemName=\"Utility-Crossbow\"",
                    "PlayerViewOffset=(X=25.000000,Y=-8.000000,Z=-14.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.MiniCrossbow'",
                    "PickupViewMesh=LodMesh'DeusExItems.MiniCrossbowPickup'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.MiniCrossbow3rd'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconCrossbow'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconCrossbow'",
                    "largeIconWidth=47",
                    "largeIconHeight=46",
                    "Description=\"The mini-crossbow was specifically developed for espionage work, and accepts a range of dart types (normal, tranquilizer, or flare) that can be changed depending upon the mission requirements.\"",
                    "beltDescription=\"UTIL\"",
                    "Mesh=LodMesh'DeusExItems.MiniCrossbowPickup'",
                    "CollisionRadius=8.000000",
                    "CollisionHeight=1.000000",
                    "Mass=15.000000"
                ],
                "exec": [],
                "extends": "DeusExWeapon",
                "functions": {
                    "CycleAmmo": {
                        "body": "{\n\tif(DeusExPlayer(Owner).bAdmin)\n\t{\n\tMode++;\n\tif(Mode == 4)\n\t\tMode = 0;\n\t}\n\telse\n\t{\n\tMode++;\n\tif(Mode == 4)\n\t\tMode = 1;\n\t}\n\t\n\trmode=mode;\n\t/*if(Mode == 0)\n\t\tOwnerMsg(\"Trigger mode.\");\n\telse if(Mode == 1)\n\t\tOwnerMsg(\"Ladder mode.\");\n\telse if(Mode == 2)\n\t\tOwnerMsg(\"Jump Pad mode.\");\n\telse if(Mode == 3)\n\t\tOwnerMsg(\"Grapple mode.\");*/\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "CycleAmmo",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "GiveTo": {
                        "body": "{\n    super.Giveto(Other);\n        Mode = 3;\n        rMode = 3;\n\tOther.ClientMessage(\"Cycle ammo to change modes.\");\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "GiveTo",
                        "native": false,
                        "param": [
                            [
                                "pawn",
                                "Other"
                            ]
                        ],
                        "return": ""
                    },
                    "LaserToggle": {
                        "body": "{\n\tif(Mode == 3)\n\t{\n\tGrapvel += 500;\n\trGrapvel = Grapvel;\n//\tOwnerMsg(\"Grapple force\"@Grapvel);\n\t}\n\tif(Mode == 2)\n\t{\n\tJumpvel += 10;\n\trJumpvel = Jumpvel;\n//\tOwnerMsg(\"Jump force\"@Jumpvel);\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "LaserToggle",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "OwnerMsg": {
                        "body": "{\n\tDeusExPlayer(Owner).ClientMessage(str,'TeamSay');\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "OwnerMsg",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "str"
                            ]
                        ],
                        "return": ""
                    },
                    "PreBeginPlay": {
                        "body": "{\n\tSuper.PreBeginPlay();\n\n\t// If this is a netgame, then override defaults\n\tif ( Level.NetMode != NM_StandAlone )\n\t{\n\t\tHitDamage = mpHitDamage;\n\t\tBaseAccuracy = mpBaseAccuracy;\n\t\tReloadTime = mpReloadTime;\n\t\tAccurateRange = mpAccurateRange;\n\t\tMaxRange = mpMaxRange;\n\t\tReloadCount = mpReloadCount;\n      PickupAmmoCount = mpReloadCount;\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "PreBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "RenderOverlays": {
                        "body": "{\n\tSuper.RenderOverlays(Canvas);\n\tP = DeusExPlayer(Owner);\n\tif ( P != None ) \n\t{\t\n\t\t\t\t/*curKeyNamescope = \"\";\n\t\t\t\tfor ( i=0; i<255; i++ )\n\t\t\t\t{\n\t\t\t\t\tKeyNamescope = Owner.ConsoleCommand ( \"KEYNAME \"$i );\n\t\t\t\t\tif ( KeyNamescope != \"\" )\n\t\t\t\t\t{\n\t\t\t\t\t\tAliasscope = Owner.ConsoleCommand( \"KEYBINDING \"$KeyNamescope );\n\t\t\t\t\t\tif ( Aliasscope ~= \"Togglescope\" )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurKeyNamescope = KeyNamescope;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ( curKeyNamescope ~= \"\" )\n\t\t\t\t\tcurKeyNamescope = \"NONE\";\n\t\t\t\t\t\n\t\t\t\tcurKeyNamelaser = \"\";\n\t\t\t\tfor ( i=0; i<255; i++ )\n\t\t\t\t{\n\t\t\t\t\tKeyNamelaser = Owner.ConsoleCommand ( \"KEYNAME \"$i );\n\t\t\t\t\tif ( KeyNamelaser != \"\" )\n\t\t\t\t\t{\n\t\t\t\t\t\tAliaslaser = Owner.ConsoleCommand( \"KEYBINDING \"$KeyNamelaser );\n\t\t\t\t\t\tif ( Aliaslaser ~= \"ToggleLaser\" )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurKeyNamelaser = KeyNamelaser;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ( curKeyNamelaser ~= \"\" )\n\t\t\t\t\tcurKeyNamelaser = \"NONE\";\n\t\t\t\t\t\n\t\t\t\tcurKeyNameammo = \"\";\n\t\t\t\tfor ( i=0; i<255; i++ )\n\t\t\t\t{\n\t\t\t\t\tKeyNameammo = Owner.ConsoleCommand ( \"KEYNAME \"$i );\n\t\t\t\t\tif ( KeyNameammo != \"\" )\n\t\t\t\t\t{\n\t\t\t\t\t\tAliasammo = Owner.ConsoleCommand( \"KEYBINDING \"$KeyNameammo );\n\t\t\t\t\t\tif ( Aliasammo ~= \"SwitchAmmo\" )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurKeyNameammo = KeyNameammo;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ( curKeyNameammo ~= \"\" )\n\t\t\t\t\tcurKeyNameammo = \"NONE\";*/\n\t\tGetAxes(Pawn(Owner).ViewRotation,X,Y,Z);\t\n\t\tStartTrace = ComputeProjectileStart(X, Y, Z);\n\t\tAdjustedAim = P.AdjustAim(1000000, StartTrace, 2*AimError, False, False);\n\t\tEndTrace = StartTrace + Accuracy * (FRand()-0.5)*Y*1000 + Accuracy * (FRand()-0.5)*Z*1000 ;\t\n\t\tEndTrace += (FMax(1024.0, MaxRange) * Vector(AdjustedAim));\n\t\t\t\tbOwnsCrossHair = True; \n\t\t\t\tScale = Canvas.ClipX/640;\n\t\t\t\tCanvas.SetPos(0.5 * Canvas.ClipX - 16 * Scale, 0.5 * Canvas.ClipY - 16 * Scale );\n\t\t\t\t//Canvas.Style = ERenderStyle.STY_Translucent;\n\t\t\t\tCanvas.DrawColor.R = 0;\n\t\t\t\tCanvas.DrawColor.G = Rand(128);\n\t\t\t\tCanvas.DrawColor.B = Rand(128);\n\t\t\t\tCanvas.Font = Canvas.SmallFont;\n\t\t\t\t//Canvas.DrawIcon(Texture'DeusExUI.UserInterface.AugIcontarget_Small', Scale);\n\t\t\t\t//Canvas.bCenter=True;\n\t\t\t\tif(rMode == 0)\n\t\t\t\t\tCanvas.DrawText(\"     (Next Mode = Ammo Change) Trigger\");\n\t\t\t\telse if(rMode == 1)\n\t\t\t\t\tCanvas.DrawText(\"     (Next Mode = Ammo Change) Ladder creation\");\n\t\t\t\telse if(rMode == 2)\n\t\t\t\t\tCanvas.DrawText(\"     (Next Mode = Ammo Change) Jump Pad - [ <- SCOPE] \"$rJumpVel$\" [LASER -> ]\");\n\t\t\t\telse if(rMode == 3)\n\t\t\t\t\tCanvas.DrawText(\"     (Next Mode = Ammo Change) Grapple - [ <- SCOPE] \"$rGrapVel$\" [LASER -> ]\");\n\t\t\t\t//Canvas.DrawPortal(0.5 * Canvas.ClipX - 16 * Scale, 0.5 * Canvas.ClipY - 16 * Scale , 30, 30, CrosshairTarget, CrosshairTarget.Location, CrosshairTarget.Rotation);\n\t\t\t}\n\t\t\telse\n\t\t\t\tbOwnsCrossHair = False; // Only for compatibility with HDX50\t\t\t\n}",
                        "locals": [
                            "local DeusExPlayer P;",
                            "local int i;",
                            "local Pawn CrosshairTarget;",
                            "local float Scale, Accuracy, Dist;",
                            "local vector HitLocation, HitNormal, StartTrace, EndTrace, X,Y,Z;",
                            "local String KeyNamescope, Aliasscope, curKeyNamescope;",
                            "local String KeyNamelaser, Aliaslaser, curKeyNamelaser;",
                            "local String KeyNameammo, Aliasammo, curKeyNameammo;"
                        ],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "RenderOverlays",
                        "native": false,
                        "param": [
                            [
                                "canvas",
                                "Canvas"
                            ]
                        ],
                        "return": ""
                    },
                    "ScopeToggle": {
                        "body": "{\n\tif(Mode == 3)\n\t{\n\tGrapvel -= 500;\n\t\trGrapvel = Grapvel;\n\t//\tOwnerMsg(\"Grapple force\"@Grapvel);\n\t}\n\tif(Mode == 2)\n\t{\n\tJumpvel -= 10;\n\trJumpvel = Jumpvel;\n\t//OwnerMsg(\"Jump force\"@Jumpvel);\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "ScopeToggle",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 312,
                "replication": "",
                "states": [],
                "variables": [
                    "var int Mode;",
                    "var int Grapvel, JumpVel;",
                    "var int rMode;",
                    "var int rGrapvel, rJumpVel;"
                ]
            }
        },
        "WeaponWPGrenade.uc": {
            "body": "class weaponWPGrenade extends WeaponGasGrenade;\n\ndefaultproperties\n{\n     AIFireDelay=5.000000\n     AmmoName=Class'PartyStuff.AmmoWPGrenade'\n     ProjectileClass=Class'PartyStuff.WPGrenade'\n     ItemName=\"WP Grenade\"\n     Description=\"Upon detonation, the WP grenade will spread a cloud of particularized white phosphorus that ignites immediately upon contact with the air.\"\n     beltDescription=\"WP GREN\"\n}\n",
            "name": "WeaponWPGrenade.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "AIFireDelay=5.000000",
                    "AmmoName=Class'PartyStuff.AmmoWPGrenade'",
                    "ProjectileClass=Class'PartyStuff.WPGrenade'",
                    "ItemName=\"WP Grenade\"",
                    "Description=\"Upon detonation, the WP grenade will spread a cloud of particularized white phosphorus that ignites immediately upon contact with the air.\"",
                    "beltDescription=\"WP GREN\""
                ],
                "exec": [],
                "extends": "WeaponGasGrenade",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 12,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "WeaponZoomSniper.uc": {
            "body": "class WeaponZoomSniper extends DeusExWeapon;\n\nvar float ZoomScale,ZoomInc,\n          MaxScale,MinScale;\n\nreplication\n{\nunreliable if(Role==ROLE_Authority)\n\tZoomIn,ZoomOut;\nreliable if(Role==ROLE_Authority)\n\tZoomOff,ZoomScale;\nreliable if(Role<ROLE_Authority)\n\tUpdateScope;\n}\n\nsimulated function UpdateScope(float FOV,bool bShow)\n{\nbZoomed=bShow;\nScopeFOV=FOV;\n\nRefreshScopeDisplay(DeusExPlayer(Owner), False, bZoomed);\n}\n\nsimulated exec function DisableScope()\n{\nScopeOff();\n}\n\nsimulated function ScopeOff()\n{\nZoomOff();\nUpdateScope(ScopeFOV,False);\n}\n\nsimulated function ZoomOff()\n{\nif(bHasScope && bZoomed && (Owner != None) && Owner.IsA('DeusExPlayer'))\n\t{\n\tbZoomed = False;\n\tZoomScale=MaxScale;\n\tScopeFOV=80*ZoomScale;\n\tBaseAccuracy=0.12/ZoomScale;\n\tUpdateScope(ScopeFOV,False);\n\t}\n}\n\nFunction AltFire(float Value)\n{\n\tif(bHasSilencer)\n\t{\n\tDeusExPlayer(Owner).ClientMessage(\"Silencer off\");\n\tbHasSilencer = False;\n\tBaseAccuracy=Default.BaseAccuracy;\n\tHitDamage = Default.HitDamage;\n\t}\n\t\telse\n\t{\n\tDeusExPlayer(Owner).ClientMessage(\"Silencer on\");\n\tbHasSilencer = True;\n\tBaseAccuracy=0.000001;\n\tHitDamage = 100;\n\t}\n}\n\nsimulated function CycleAmmo()\n{\n\tZoomOff();\n\tScopeOff();\n\tDisableScope();\n\tZoomScale=MaxScale;\n\tbZoomed=False;\n\tUpdateScope(ScopeFOV,bZoomed);\n}\n\nsimulated function LaserToggle()\n{\nZoomOut();\n}\n\nsimulated function ScopeToggle()\n{\nZoomIn();\n}\n\nsimulated function bool ZoomOut()\n{\nif(bZoomed)\n\t{\n\tZoomScale+=ZoomInc;\n\tif(ZoomScale>MaxScale)\n\t\t{\n\t\tZoomScale=MaxScale;\n\t\tbZoomed=False;\n\t\t}\n\tScopeFOV=80*ZoomScale;\n\tBaseAccuracy=0.12/ZoomScale;\n\tUpdateScope(ScopeFOV,bZoomed);\n\t}\n\nreturn bZoomed;\n}\n\nsimulated function bool ZoomIn()\n{\nbZoomed=True;\n\nZoomScale-=ZoomInc;\n\nif(ZoomScale<MinScale)\n\tZoomScale=MinScale;\nScopeFOV=80*ZoomScale;\nBaseAccuracy=0.12/ZoomScale;\nUpdateScope(ScopeFOV,True);\n\nreturn bZoomed;\n}\n\ndefaultproperties\n{\n     ZoomScale=1.000000\n     ZoomInc=0.100000\n     MaxScale=1.000000\n     MinScale=0.100000\n     LowAmmoWaterMark=6\n     GoverningSkill=Class'DeusEx.SkillWeaponRifle'\n     NoiseLevel=2.000000\n     ShotTime=1.500000\n     reloadTime=2.000000\n     HitDamage=25\n     maxRange=48000\n     AccurateRange=28800\n     bCanHaveScope=True\n     bHasScope=True\n     ScopeFOV=80\n     bCanHaveLaser=True\n     bCanHaveSilencer=True\n     bHasMuzzleFlash=False\n     recoilStrength=0.400000\n     bUseWhileCrouched=False\n     mpReloadTime=2.000000\n     mpHitDamage=25\n     mpAccurateRange=28800\n     mpMaxRange=28800\n     mpReloadCount=6\n     bCanHaveModBaseAccuracy=True\n     bCanHaveModReloadCount=True\n     bCanHaveModAccurateRange=True\n     bCanHaveModReloadTime=True\n     bCanHaveModRecoilStrength=True\n     AmmoName=Class'DeusEx.Ammo3006'\n     ReloadCount=6\n     PickupAmmoCount=6\n     bInstantHit=True\n     FireOffset=(X=-20.000000,Y=2.000000,Z=30.000000)\n     shakemag=50.000000\n     FireSound=Sound'DeusExSounds.Weapons.RifleFire'\n     AltFireSound=Sound'DeusExSounds.Weapons.RifleReloadEnd'\n     CockingSound=Sound'DeusExSounds.Weapons.RifleReload'\n     SelectSound=Sound'DeusExSounds.Weapons.RifleSelect'\n     InventoryGroup=5\n     ItemName=\"Sniper Rifle [+Zoomable Scope & Attached Silencer]\"\n     PlayerViewOffset=(X=20.000000,Y=-2.000000,Z=-30.000000)\n     PlayerViewMesh=LodMesh'DeusExItems.SniperRifle'\n     PickupViewMesh=LodMesh'DeusExItems.SniperRiflePickup'\n     ThirdPersonMesh=LodMesh'DeusExItems.SniperRifle3rd'\n     LandSound=Sound'DeusExSounds.Generic.DropMediumWeapon'\n     Icon=Texture'DeusExUI.Icons.BeltIconRifle'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconRifle'\n     largeIconWidth=159\n     largeIconHeight=47\n     invSlotsX=2\n     Description=\"The military sniper rifle is the superior tool for the interdiction of long-range targets. When coupled with the proven 30.06 round, a marksman can achieve tight groupings at better than 1 MOA (minute of angle) depending on environmental conditions.\"\n     beltDescription=\"(Z)SNIPER\"\n     Mesh=LodMesh'DeusExItems.SniperRiflePickup'\n     CollisionRadius=26.000000\n     CollisionHeight=2.000000\n     Mass=30.000000\n}\n",
            "name": "WeaponZoomSniper.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "ZoomScale=1.000000",
                    "ZoomInc=0.100000",
                    "MaxScale=1.000000",
                    "MinScale=0.100000",
                    "LowAmmoWaterMark=6",
                    "GoverningSkill=Class'DeusEx.SkillWeaponRifle'",
                    "NoiseLevel=2.000000",
                    "ShotTime=1.500000",
                    "reloadTime=2.000000",
                    "HitDamage=25",
                    "maxRange=48000",
                    "AccurateRange=28800",
                    "bCanHaveScope=True",
                    "bHasScope=True",
                    "ScopeFOV=80",
                    "bCanHaveLaser=True",
                    "bCanHaveSilencer=True",
                    "bHasMuzzleFlash=False",
                    "recoilStrength=0.400000",
                    "bUseWhileCrouched=False",
                    "mpReloadTime=2.000000",
                    "mpHitDamage=25",
                    "mpAccurateRange=28800",
                    "mpMaxRange=28800",
                    "mpReloadCount=6",
                    "bCanHaveModBaseAccuracy=True",
                    "bCanHaveModReloadCount=True",
                    "bCanHaveModAccurateRange=True",
                    "bCanHaveModReloadTime=True",
                    "bCanHaveModRecoilStrength=True",
                    "AmmoName=Class'DeusEx.Ammo3006'",
                    "ReloadCount=6",
                    "PickupAmmoCount=6",
                    "bInstantHit=True",
                    "FireOffset=(X=-20.000000,Y=2.000000,Z=30.000000)",
                    "shakemag=50.000000",
                    "FireSound=Sound'DeusExSounds.Weapons.RifleFire'",
                    "AltFireSound=Sound'DeusExSounds.Weapons.RifleReloadEnd'",
                    "CockingSound=Sound'DeusExSounds.Weapons.RifleReload'",
                    "SelectSound=Sound'DeusExSounds.Weapons.RifleSelect'",
                    "InventoryGroup=5",
                    "ItemName=\"Sniper Rifle [+Zoomable Scope & Attached Silencer]\"",
                    "PlayerViewOffset=(X=20.000000,Y=-2.000000,Z=-30.000000)",
                    "PlayerViewMesh=LodMesh'DeusExItems.SniperRifle'",
                    "PickupViewMesh=LodMesh'DeusExItems.SniperRiflePickup'",
                    "ThirdPersonMesh=LodMesh'DeusExItems.SniperRifle3rd'",
                    "LandSound=Sound'DeusExSounds.Generic.DropMediumWeapon'",
                    "Icon=Texture'DeusExUI.Icons.BeltIconRifle'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconRifle'",
                    "largeIconWidth=159",
                    "largeIconHeight=47",
                    "invSlotsX=2",
                    "Description=\"The military sniper rifle is the superior tool for the interdiction of long-range targets. When coupled with the proven 30.06 round, a marksman can achieve tight groupings at better than 1 MOA (minute of angle) depending on environmental conditions.\"",
                    "beltDescription=\"(Z)SNIPER\"",
                    "Mesh=LodMesh'DeusExItems.SniperRiflePickup'",
                    "CollisionRadius=26.000000",
                    "CollisionHeight=2.000000",
                    "Mass=30.000000"
                ],
                "exec": [],
                "extends": "DeusExWeapon",
                "functions": {
                    "AltFire": {
                        "body": "{\n\tif(bHasSilencer)\n\t{\n\tDeusExPlayer(Owner).ClientMessage(\"Silencer off\");\n\tbHasSilencer = False;\n\tBaseAccuracy=Default.BaseAccuracy;\n\tHitDamage = Default.HitDamage;\n\t}\n\t\telse\n\t{\n\tDeusExPlayer(Owner).ClientMessage(\"Silencer on\");\n\tbHasSilencer = True;\n\tBaseAccuracy=0.000001;\n\tHitDamage = 100;\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "AltFire",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "Value"
                            ]
                        ],
                        "return": ""
                    },
                    "CycleAmmo": {
                        "body": "{\n\tZoomOff();\n\tScopeOff();\n\tDisableScope();\n\tZoomScale=MaxScale;\n\tbZoomed=False;\n\tUpdateScope(ScopeFOV,bZoomed);\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "CycleAmmo",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "DisableScope": {
                        "body": "{\nScopeOff();\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated",
                            "exec"
                        ],
                        "name": "DisableScope",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "LaserToggle": {
                        "body": "{\nZoomOut();\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "LaserToggle",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ScopeOff": {
                        "body": "{\nZoomOff();\nUpdateScope(ScopeFOV,False);\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "ScopeOff",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ScopeToggle": {
                        "body": "{\nZoomIn();\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "ScopeToggle",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "UpdateScope": {
                        "body": "{\nbZoomed=bShow;\nScopeFOV=FOV;\n\nRefreshScopeDisplay(DeusExPlayer(Owner), False, bZoomed);\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "UpdateScope",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "FOV"
                            ],
                            [
                                "bool",
                                "bShow"
                            ]
                        ],
                        "return": ""
                    },
                    "ZoomIn": {
                        "body": "{\nbZoomed=True;\n\nZoomScale-=ZoomInc;\n\nif(ZoomScale<MinScale)\n\tZoomScale=MinScale;\nScopeFOV=80*ZoomScale;\nBaseAccuracy=0.12/ZoomScale;\nUpdateScope(ScopeFOV,True);\n\nreturn bZoomed;\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "ZoomIn",
                        "native": false,
                        "param": [],
                        "return": "bool"
                    },
                    "ZoomOff": {
                        "body": "{\nif(bHasScope && bZoomed && (Owner != None) && Owner.IsA('DeusExPlayer'))\n\t{\n\tbZoomed = False;\n\tZoomScale=MaxScale;\n\tScopeFOV=80*ZoomScale;\n\tBaseAccuracy=0.12/ZoomScale;\n\tUpdateScope(ScopeFOV,False);\n\t}\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "ZoomOff",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ZoomOut": {
                        "body": "{\nif(bZoomed)\n\t{\n\tZoomScale+=ZoomInc;\n\tif(ZoomScale>MaxScale)\n\t\t{\n\t\tZoomScale=MaxScale;\n\t\tbZoomed=False;\n\t\t}\n\tScopeFOV=80*ZoomScale;\n\tBaseAccuracy=0.12/ZoomScale;\n\tUpdateScope(ScopeFOV,bZoomed);\n\t}\n\nreturn bZoomed;\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "ZoomOut",
                        "native": false,
                        "param": [],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 179,
                "replication": "",
                "states": [],
                "variables": [
                    "var float ZoomScale,ZoomInc,"
                ]
            }
        },
        "WoodenBird.uc": {
            "body": "//=============================================================================\n// FlagPole.\n//=============================================================================\nclass WoodenBird extends DeusExDecoration;\n#exec obj load file=CoreTexWood.utx\n\ndefaultproperties\n{\n     bInvincible=True\n     FragType=Class'DeusEx.WoodFragment'\n     ItemName=\"Wooden Bird\"\n     Mesh=LodMesh'DeusExCharacters.Seagull'\n     DrawScale=0.600000\n     MultiSkins(0)=Texture'CoreTexWood.Wood.ClenBrwnWood_A'\n     CollisionRadius=10.000000\n     CollisionHeight=3.600000\n     Mass=5.000000\n     Buoyancy=30.000000\n}\n",
            "name": "WoodenBird.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bInvincible=True",
                    "FragType=Class'DeusEx.WoodFragment'",
                    "ItemName=\"Wooden Bird\"",
                    "Mesh=LodMesh'DeusExCharacters.Seagull'",
                    "DrawScale=0.600000",
                    "MultiSkins(0)=Texture'CoreTexWood.Wood.ClenBrwnWood_A'",
                    "CollisionRadius=10.000000",
                    "CollisionHeight=3.600000",
                    "Mass=5.000000",
                    "Buoyancy=30.000000"
                ],
                "exec": [
                    "#exec obj load file=CoreTexWood.utx"
                ],
                "extends": "DeusExDecoration",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 20,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "WoodenBuddha.uc": {
            "body": "//=============================================================================\n// HKBuddha.\n//=============================================================================\nclass WoodenBuddha extends HongKongDecoration;\n\ndefaultproperties\n{\n     bInvincible=True\n     FragType=Class'DeusEx.WoodFragment'\n     ItemName=\"Wooden Buddha\"\n     Mesh=LodMesh'DeusExDeco.HKBuddha'\n     DrawScale=0.150000\n     MultiSkins(0)=Texture'CoreTexWood.Wood.ClenBrwnWood_A'\n     CollisionRadius=5.000000\n     CollisionHeight=8.000000\n     Mass=25.000000\n     Buoyancy=5.000000\n}\n",
            "name": "WoodenBuddha.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bInvincible=True",
                    "FragType=Class'DeusEx.WoodFragment'",
                    "ItemName=\"Wooden Buddha\"",
                    "Mesh=LodMesh'DeusExDeco.HKBuddha'",
                    "DrawScale=0.150000",
                    "MultiSkins(0)=Texture'CoreTexWood.Wood.ClenBrwnWood_A'",
                    "CollisionRadius=5.000000",
                    "CollisionHeight=8.000000",
                    "Mass=25.000000",
                    "Buoyancy=5.000000"
                ],
                "exec": [],
                "extends": "HongKongDecoration",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 19,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "WoodenCat.uc": {
            "body": "//=============================================================================\n// FlagPole.\n//=============================================================================\nclass WoodenCat extends DeusExDecoration;\n#exec obj load file=CoreTexWood.utx\n\ndefaultproperties\n{\n     bInvincible=True\n     FragType=Class'DeusEx.WoodFragment'\n     ItemName=\"Wooden Cat\"\n     Mesh=LodMesh'DeusExCharacters.Cat'\n     DrawScale=0.500000\n     MultiSkins(0)=Texture'CoreTexWood.Wood.ClenBrwnWood_A'\n     CollisionRadius=5.500000\n     CollisionHeight=4.200000\n     Mass=5.000000\n     Buoyancy=30.000000\n}\n",
            "name": "WoodenCat.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bInvincible=True",
                    "FragType=Class'DeusEx.WoodFragment'",
                    "ItemName=\"Wooden Cat\"",
                    "Mesh=LodMesh'DeusExCharacters.Cat'",
                    "DrawScale=0.500000",
                    "MultiSkins(0)=Texture'CoreTexWood.Wood.ClenBrwnWood_A'",
                    "CollisionRadius=5.500000",
                    "CollisionHeight=4.200000",
                    "Mass=5.000000",
                    "Buoyancy=30.000000"
                ],
                "exec": [
                    "#exec obj load file=CoreTexWood.utx"
                ],
                "extends": "DeusExDecoration",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 20,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "WoodenGreasel.uc": {
            "body": "//=============================================================================\n// FlagPole.\n//=============================================================================\nclass WoodenGreasel extends DeusExDecoration;\n#exec obj load file=CoreTexWood.utx\n\ndefaultproperties\n{\n     bInvincible=True\n     FragType=Class'DeusEx.WoodFragment'\n     ItemName=\"Wooden Greasel\"\n     Mesh=LodMesh'DeusExCharacters.Greasel'\n     DrawScale=0.300000\n     MultiSkins(0)=Texture'CoreTexWood.Wood.ClenBrwnWood_A'\n     CollisionRadius=10.000000\n     CollisionHeight=5.000000\n     Mass=5.000000\n     Buoyancy=30.000000\n}\n",
            "name": "WoodenGreasel.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bInvincible=True",
                    "FragType=Class'DeusEx.WoodFragment'",
                    "ItemName=\"Wooden Greasel\"",
                    "Mesh=LodMesh'DeusExCharacters.Greasel'",
                    "DrawScale=0.300000",
                    "MultiSkins(0)=Texture'CoreTexWood.Wood.ClenBrwnWood_A'",
                    "CollisionRadius=10.000000",
                    "CollisionHeight=5.000000",
                    "Mass=5.000000",
                    "Buoyancy=30.000000"
                ],
                "exec": [
                    "#exec obj load file=CoreTexWood.utx"
                ],
                "extends": "DeusExDecoration",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 20,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "WoodenKarkian.uc": {
            "body": "//=============================================================================\n// FlagPole.\n//=============================================================================\nclass WoodenKarkian extends DeusExDecoration;\n#exec obj load file=CoreTexWood.utx\n\ndefaultproperties\n{\n     bInvincible=True\n     FragType=Class'DeusEx.WoodFragment'\n     ItemName=\"Wooden Karkian\"\n     Mesh=LodMesh'DeusExCharacters.Karkian'\n     DrawScale=0.100000\n     MultiSkins(0)=Texture'CoreTexWood.Wood.ClenBrwnWood_A'\n     CollisionRadius=6.000000\n     CollisionHeight=3.500000\n     Mass=5.000000\n     Buoyancy=30.000000\n}\n",
            "name": "WoodenKarkian.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bInvincible=True",
                    "FragType=Class'DeusEx.WoodFragment'",
                    "ItemName=\"Wooden Karkian\"",
                    "Mesh=LodMesh'DeusExCharacters.Karkian'",
                    "DrawScale=0.100000",
                    "MultiSkins(0)=Texture'CoreTexWood.Wood.ClenBrwnWood_A'",
                    "CollisionRadius=6.000000",
                    "CollisionHeight=3.500000",
                    "Mass=5.000000",
                    "Buoyancy=30.000000"
                ],
                "exec": [
                    "#exec obj load file=CoreTexWood.utx"
                ],
                "extends": "DeusExDecoration",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 20,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "WoodenMutt.uc": {
            "body": "//=============================================================================\n// FlagPole.\n//=============================================================================\nclass WoodenMutt extends DeusExDecoration;\n#exec obj load file=CoreTexWood.utx\n\ndefaultproperties\n{\n     bInvincible=True\n     FragType=Class'DeusEx.WoodFragment'\n     ItemName=\"Wooden Mutt\"\n     Mesh=LodMesh'DeusExCharacters.Mutt'\n     DrawScale=0.300000\n     MultiSkins(0)=Texture'CoreTexWood.Wood.ClenBrwnWood_A'\n     CollisionRadius=10.000000\n     CollisionHeight=8.000000\n     Mass=5.000000\n     Buoyancy=30.000000\n}\n",
            "name": "WoodenMutt.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bInvincible=True",
                    "FragType=Class'DeusEx.WoodFragment'",
                    "ItemName=\"Wooden Mutt\"",
                    "Mesh=LodMesh'DeusExCharacters.Mutt'",
                    "DrawScale=0.300000",
                    "MultiSkins(0)=Texture'CoreTexWood.Wood.ClenBrwnWood_A'",
                    "CollisionRadius=10.000000",
                    "CollisionHeight=8.000000",
                    "Mass=5.000000",
                    "Buoyancy=30.000000"
                ],
                "exec": [
                    "#exec obj load file=CoreTexWood.utx"
                ],
                "extends": "DeusExDecoration",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 20,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "acrate.uc": {
            "body": "class ACrate extends Containers;\n\nvar localized String AmmoReceived;\n\n// ----------------------------------------------------------------------\n// Frob()\n//\n// If we are frobbed, trigger our event\n// ----------------------------------------------------------------------\nfunction Frob(Actor Frobber, Inventory frobWith)\n{\n\tlocal Actor A;\n\tlocal Pawn P;\n\tlocal DeusExPlayer Player;\n   local Inventory CurInventory;\n\tlocal RadarDrone RD;\n\tlocal WeaponAirget air;\n\tlocal ToolRadarD TD;\n\tlocal Estus es;\n\t\n   //Don't call superclass frob.\n\n   P = Pawn(Frobber);\n\tPlayer = DeusExPlayer(Frobber);\n\n   if (Player != None)\n   {\n      CurInventory = Player.Inventory;\n      while (CurInventory != None)\n      {\n         if (CurInventory.IsA('DeusExWeapon'))\n            RestockWeapon(Player,DeusExWeapon(CurInventory));\n         CurInventory = CurInventory.Inventory;\n      }\n      Player.ClientMessage(AmmoReceived);\n\t\tPlaySound(sound'WeaponPickup', SLOT_None, 0.5+FRand()*0.25, , 256, 0.95+FRand()*0.1);\n   }\n   \n   Foreach AllActors(class'RadarDrone',RD)\n   {\n\tif(RD.myOwner == Player)\n\t{\n\t\tif(RD.RocketsRemain < 30)\n\t\t{\n\t\t\tRD.RocketsRemain = 30;\n\t\t\tRD.rRocketsRemain = RD.rocketsRemain;\n\t\t\tPlayer.ClientMessage(\"Drone rockets restocked.\");\n\t\t\t    Foreach AllActors(class'ToolRadarD',TD)\n\t\t\t\t\tif(TD.Owner == Player)\n\t\t\t\t\t\tTD.DroneAmmo = RD.RocketsRemain;\n\t\t}\n\t}\n   }\n\n           \n   Foreach AllActors(class'Weaponairget',air)\n   {\n\tif(air.Owner == Player)\n\t{\n\t\tif(air.Airammo < 10)\n\t\t{\n\t\t\tair.AirAmmo = 10;\n\t\t\tair.rAirAmmo = air.Airammo;\n\t\t\tPlayer.ClientMessage(\"Airget rockets restocked.\");\n\t\t}\n\t}\n   }\n    Foreach AllActors(class'Estus',es)\n   {\n\tif(es.Owner == Player)\n\t{\n\t\tif(es.eUses < es.eMaxUses)\n\t\t{\n\t\t\tes.eUses = es.eMaxUses;\n\t\t\tPlayer.ClientMessage(\"Estus refilled.\");\n\t\t}\n\t}\n   }\n}\n\nfunction RestockWeapon(DeusExPlayer Player, DeusExWeapon WeaponToStock)\n{\n   local Ammo AmmoType;\n   if (WeaponToStock.AmmoType != None)\n   {\n      if (WeaponToStock.AmmoNames[0] == None)\n         AmmoType = Ammo(Player.FindInventoryType(WeaponToStock.AmmoName));\n      else\n         AmmoType = Ammo(Player.FindInventoryType(WeaponToStock.AmmoNames[0]));\n      \n      if ((AmmoType != None) && (AmmoType.AmmoAmount < WeaponToStock.PickupAmmoCount))\n      {\n         AmmoType.AddAmmo(WeaponToStock.PickupAmmoCount - AmmoType.AmmoAmount);\n      }\n   }   \n}\n\ndefaultproperties\n{\n     AmmoReceived=\"Ammo restocked\"\n     HitPoints=4000\n     bFlammable=False\n     ItemName=\"Ammo Crate\"\n     bPushable=False\n     bBlockSight=True\n     Mesh=LodMesh'DeusExItems.GEPAmmo'\n     bAlwaysRelevant=True\n     CollisionRadius=18.000000\n     CollisionHeight=7.800000\n     Mass=3000.000000\n     Buoyancy=40.000000\n}\n",
            "name": "acrate.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "AmmoReceived=\"Ammo restocked\"",
                    "HitPoints=4000",
                    "bFlammable=False",
                    "ItemName=\"Ammo Crate\"",
                    "bPushable=False",
                    "bBlockSight=True",
                    "Mesh=LodMesh'DeusExItems.GEPAmmo'",
                    "bAlwaysRelevant=True",
                    "CollisionRadius=18.000000",
                    "CollisionHeight=7.800000",
                    "Mass=3000.000000",
                    "Buoyancy=40.000000"
                ],
                "exec": [],
                "extends": "Containers",
                "functions": {
                    "Frob": {
                        "body": "{\n\t\n   //Don't call superclass frob.\n\n   P = Pawn(Frobber);\n\tPlayer = DeusExPlayer(Frobber);\n\n   if (Player != None)\n   {\n      CurInventory = Player.Inventory;\n      while (CurInventory != None)\n      {\n         if (CurInventory.IsA('DeusExWeapon'))\n            RestockWeapon(Player,DeusExWeapon(CurInventory));\n         CurInventory = CurInventory.Inventory;\n      }\n      Player.ClientMessage(AmmoReceived);\n\t\tPlaySound(sound'WeaponPickup', SLOT_None, 0.5+FRand()*0.25, , 256, 0.95+FRand()*0.1);\n   }\n   \n   Foreach AllActors(class'RadarDrone',RD)\n   {\n\tif(RD.myOwner == Player)\n\t{\n\t\tif(RD.RocketsRemain < 30)\n\t\t{\n\t\t\tRD.RocketsRemain = 30;\n\t\t\tRD.rRocketsRemain = RD.rocketsRemain;\n\t\t\tPlayer.ClientMessage(\"Drone rockets restocked.\");\n\t\t\t    Foreach AllActors(class'ToolRadarD',TD)\n\t\t\t\t\tif(TD.Owner == Player)\n\t\t\t\t\t\tTD.DroneAmmo = RD.RocketsRemain;\n\t\t}\n\t}\n   }\n\n           \n   Foreach AllActors(class'Weaponairget',air)\n   {\n\tif(air.Owner == Player)\n\t{\n\t\tif(air.Airammo < 10)\n\t\t{\n\t\t\tair.AirAmmo = 10;\n\t\t\tair.rAirAmmo = air.Airammo;\n\t\t\tPlayer.ClientMessage(\"Airget rockets restocked.\");\n\t\t}\n\t}\n   }\n    Foreach AllActors(class'Estus',es)\n   {\n\tif(es.Owner == Player)\n\t{\n\t\tif(es.eUses < es.eMaxUses)\n\t\t{\n\t\t\tes.eUses = es.eMaxUses;\n\t\t\tPlayer.ClientMessage(\"Estus refilled.\");\n\t\t}\n\t}\n   }\n}",
                        "locals": [
                            "local Actor A;",
                            "local Pawn P;",
                            "local DeusExPlayer Player;",
                            "local Inventory CurInventory;",
                            "local RadarDrone RD;",
                            "local WeaponAirget air;",
                            "local ToolRadarD TD;",
                            "local Estus es;"
                        ],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    },
                    "RestockWeapon": {
                        "body": "{\n   if (WeaponToStock.AmmoType != None)\n   {\n      if (WeaponToStock.AmmoNames[0] == None)\n         AmmoType = Ammo(Player.FindInventoryType(WeaponToStock.AmmoName));\n      else\n         AmmoType = Ammo(Player.FindInventoryType(WeaponToStock.AmmoNames[0]));\n      \n      if ((AmmoType != None) && (AmmoType.AmmoAmount < WeaponToStock.PickupAmmoCount))\n      {\n         AmmoType.AddAmmo(WeaponToStock.PickupAmmoCount - AmmoType.AmmoAmount);\n      }\n   }   \n}",
                        "locals": [
                            "local Ammo AmmoType;"
                        ],
                        "modifiers": [],
                        "name": "RestockWeapon",
                        "native": false,
                        "param": [
                            [
                                "DeusExPlayer",
                                "Player"
                            ],
                            [
                                "DeusExWeapon",
                                "WeaponToStock"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 113,
                "replication": "",
                "states": [],
                "variables": [
                    "var localized String AmmoReceived;"
                ]
            }
        },
        "bed2.uc": {
            "body": "class bed2 extends DeusExDecoration;\n\nvar DeusExPlayer Player;\nvar bool bBusy;\nvar(Bed2) int WaitTime;\nvar(Special) string DisString;\nvar() bool bTeleport;\nvar() name TeleportTag;\n#exec obj load file=..\\Textures\\CoreTexTextile.utx package=CoreTexTextile\n#exec obj load file=..\\Textures\\CoreTexWood.utx package=CoreTexWood\n#exec obj load file=..\\Textures\\CoreTexPaper.utx package=CoreTexPaper\n\nFunction Frob(Actor Frobber, Inventory Frobwith)\n{\n\tif(DisString != \"\")\n\t{\n\t\tDeusExPlayer(Frobber).ClientMessage(DisString);\n\t\treturn;\n\t}\n\t\n\t\tif(DeusExPlayer(Frobber) != None)\n\t\t{\n\t\t\tDisString = \"The bed is in use!\";\n\t\t\tPlayer = DeusExPlayer(Frobber);\n\t\t\tPlayer.ClientMessage(\"You begin to rest...\");\n\t\t\tplayer.ClientFlash(1,Vect(20000,20000,20000));\n\t\t\tplayer.IncreaseClientFlashLength(5.0);\n\t\t\tSetTimer(WaitTime,False);\n\t\t\tPlayer.SetPhysics(Phys_None);\n\t\t}\n}\n\nfunction Timer()\n{\n\tlocal Teleporter tp;\n\t\n\tif(bTeleport)\n\t\tforeach AllActors(class'Teleporter', TP)\n\t\t\tif(TP.Tag == TeleportTag)\n\t\t\t\tplayer.SetLocation(TP.Location);\n\tplayer.HealPlayer(9999, True);\n\tDisString = \"\";\n\tPlayer.SetPhysics(Phys_Falling);\n}\n\ndefaultproperties\n{\n     WaitTime=2\n     bInvincible=True\n     bCanBeBase=True\n     ItemName=\"Bed\"\n     bPushable=False\n     Mesh=LodMesh'PGAssets.bedsmall'\n     MultiSkins(0)=Texture'CoreTexTextile.Textile.ClenBlueGrey_A'\n     MultiSkins(1)=Texture'CoreTexWood.Wood.ClenMedmWalnt_A'\n     MultiSkins(2)=Texture'CoreTexPaper.Paper.ClenWhitPaint_A'\n     CollisionRadius=60.000000\n     CollisionHeight=24.000000\n}\n",
            "name": "bed2.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "WaitTime=2",
                    "bInvincible=True",
                    "bCanBeBase=True",
                    "ItemName=\"Bed\"",
                    "bPushable=False",
                    "Mesh=LodMesh'PGAssets.bedsmall'",
                    "MultiSkins(0)=Texture'CoreTexTextile.Textile.ClenBlueGrey_A'",
                    "MultiSkins(1)=Texture'CoreTexWood.Wood.ClenMedmWalnt_A'",
                    "MultiSkins(2)=Texture'CoreTexPaper.Paper.ClenWhitPaint_A'",
                    "CollisionRadius=60.000000",
                    "CollisionHeight=24.000000"
                ],
                "exec": [
                    "#exec obj load file=..\\Textures\\CoreTexTextile.utx package=CoreTexTextile",
                    "#exec obj load file=..\\Textures\\CoreTexWood.utx package=CoreTexWood",
                    "#exec obj load file=..\\Textures\\CoreTexPaper.utx package=CoreTexPaper"
                ],
                "extends": "DeusExDecoration",
                "functions": {
                    "Frob": {
                        "body": "{\n\tif(DisString != \"\")\n\t{\n\t\tDeusExPlayer(Frobber).ClientMessage(DisString);\n\t\treturn;\n\t}\n\t\n\t\tif(DeusExPlayer(Frobber) != None)\n\t\t{\n\t\t\tDisString = \"The bed is in use!\";\n\t\t\tPlayer = DeusExPlayer(Frobber);\n\t\t\tPlayer.ClientMessage(\"You begin to rest...\");\n\t\t\tplayer.ClientFlash(1,Vect(20000,20000,20000));\n\t\t\tplayer.IncreaseClientFlashLength(5.0);\n\t\t\tSetTimer(WaitTime,False);\n\t\t\tPlayer.SetPhysics(Phys_None);\n\t\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "Frobwith"
                            ]
                        ],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\t\n\tif(bTeleport)\n\t\tforeach AllActors(class'Teleporter', TP)\n\t\t\tif(TP.Tag == TeleportTag)\n\t\t\t\tplayer.SetLocation(TP.Location);\n\tplayer.HealPlayer(9999, True);\n\tDisString = \"\";\n\tPlayer.SetPhysics(Phys_Falling);\n}",
                        "locals": [
                            "local Teleporter tp;"
                        ],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 60,
                "replication": "",
                "states": [],
                "variables": [
                    "var DeusExPlayer Player;",
                    "var bool bBusy;",
                    "var(Bed2) int WaitTime;",
                    "var(Special) string DisString;",
                    "var() bool bTeleport;",
                    "var() name TeleportTag;"
                ]
            }
        },
        "cheesesandwich.uc": {
            "body": "class cheesesandwich extends sandwich;\n\ndefaultproperties\n{\n     ItemName=\"Cheese Sandwich\"\n     beltDescription=\"CHSE.SDWCH\"\n     MultiSkins(1)=Texture'PGAssets.Skins.CheeseTex1'\n}\n",
            "name": "cheesesandwich.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "ItemName=\"Cheese Sandwich\"",
                    "beltDescription=\"CHSE.SDWCH\"",
                    "MultiSkins(1)=Texture'PGAssets.Skins.CheeseTex1'"
                ],
                "exec": [],
                "extends": "sandwich",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 9,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "coopMode.uc": {
            "body": "class coopMode extends mutator;\n\nfunction PostBeginPlay ()\n{\n\tSuper.PostBeginPlay ();\n\tLevel.Game.BaseMutator.AddMutator (Self);\n}\n\nfunction ModifyPlayer(Pawn Other)\n{\n   local DeusExPickup DXP;\n   local Augmentation Augz;\n   \n\tsuper.ModifyPlayer(Other);\n\t\n   foreach AllActors(Class'DeusExPickup', DXP)\n   {\n      if(DXP.Owner == DeusExPlayer(Other))\n      {\n         DXP.Destroy();\n      }\n   }\n    DeusExPlayer(Other).AugmentationSystem.ResetAugmentations();\n\tConsoleCommand(\"Admin KillAll AugLight\");\n\tConsoleCommand(\"Set AugLight Lifespan 0.1\");\n\t    DeusExPlayer(Other).AugmentationSystem.ResetAugmentations();\n}\n\ndefaultproperties\n{\n}\n",
            "name": "coopMode.uc",
            "uc": {
                "comments": [],
                "default_properties": [],
                "exec": [],
                "extends": "mutator",
                "functions": {
                    "ModifyPlayer": {
                        "body": "{\n   \n\tsuper.ModifyPlayer(Other);\n\t\n   foreach AllActors(Class'DeusExPickup', DXP)\n   {\n      if(DXP.Owner == DeusExPlayer(Other))\n      {\n         DXP.Destroy();\n      }\n   }\n    DeusExPlayer(Other).AugmentationSystem.ResetAugmentations();\n\tConsoleCommand(\"Admin KillAll AugLight\");\n\tConsoleCommand(\"Set AugLight Lifespan 0.1\");\n\t    DeusExPlayer(Other).AugmentationSystem.ResetAugmentations();\n}",
                        "locals": [
                            "local DeusExPickup DXP;",
                            "local Augmentation Augz;"
                        ],
                        "modifiers": [],
                        "name": "ModifyPlayer",
                        "native": false,
                        "param": [
                            [
                                "Pawn",
                                "Other"
                            ]
                        ],
                        "return": ""
                    },
                    "PostBeginPlay": {
                        "body": "{\n\tSuper.PostBeginPlay ();\n\tLevel.Game.BaseMutator.AddMutator (Self);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 32,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "coopWeaponCombatKnife.uc": {
            "body": "//=============================================================================\n// WeaponAssaultGun.\n//=============================================================================\nclass coopWeaponCombatKnife extends WeaponCombatKnife;\n\nfunction GiveTo( pawn Other )\n{\n    super.Giveto(Other);\n\tOther.ClientMessage(\"Special Weapon: Can't be used on Players.\");\n}\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\nfunction ProcessTraceHit(Actor Other, Vector HitLocation, Vector HitNormal, Vector X, Vector Y, Vector Z)\n{\n\t\tif(Other.isa('DeusExPlayer'))\n\t\t{\n\t\t\tDeusExPlayer(Owner).ClientMessage(\"Weapon can not be used on players.\");\n\t\t\treturn;\n\t\t}\n\t\t\tsuper.ProcessTraceHit(other, hitlocation, hitnormal, x, y, z);\n\t\n}\n\ndefaultproperties\n{\n     InventoryGroup=153\n     ItemName=\"Rusty Knife\"\n}\n",
            "name": "coopWeaponCombatKnife.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "InventoryGroup=153",
                    "ItemName=\"Rusty Knife\""
                ],
                "exec": [],
                "extends": "WeaponCombatKnife",
                "functions": {
                    "GiveTo": {
                        "body": "{\n    super.Giveto(Other);\n\tOther.ClientMessage(\"Special Weapon: Can't be used on Players.\");\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "GiveTo",
                        "native": false,
                        "param": [
                            [
                                "pawn",
                                "Other"
                            ]
                        ],
                        "return": ""
                    },
                    "ProcessTraceHit": {
                        "body": "{\n\t\tif(Other.isa('DeusExPlayer'))\n\t\t{\n\t\t\tDeusExPlayer(Owner).ClientMessage(\"Weapon can not be used on players.\");\n\t\t\treturn;\n\t\t}\n\t\t\tsuper.ProcessTraceHit(other, hitlocation, hitnormal, x, y, z);\n\t\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "ProcessTraceHit",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Other"
                            ],
                            [
                                "Vector",
                                "HitLocation"
                            ],
                            [
                                "Vector",
                                "HitNormal"
                            ],
                            [
                                "Vector",
                                "X"
                            ],
                            [
                                "Vector",
                                "Y"
                            ],
                            [
                                "Vector",
                                "Z"
                            ]
                        ],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 33,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "coopWeaponMiniCrossbow.uc": {
            "body": "//=============================================================================\n// WeaponMiniCrossbow.\n//=============================================================================\nclass coopWeaponMiniCrossbow extends WeaponMiniCrossbow;\n\nfunction GiveTo( pawn Other )\n{\n    super.Giveto(Other);\n\tOther.ClientMessage(\"Special Weapon: Can't be used on Players.\");\n}\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\n\nfunction Fire(float Value)\n{\n\tlocal vector loc, line, HitLocation, hitNormal;\n\tlocal Actor Hitactor;\n\t\n\tloc = DeusExPlayer(Owner).Location;\n\tloc.Z += DeusExPlayer(Owner).BaseEyeHeight;\n\tline = Vector(DeusExPlayer(Owner).ViewRotation) * 10000;\n\tHitActor = Trace(hitLocation, hitNormal, loc+line, loc, true);\n\t\t\t\t\n\t\tif(!HitActor.isA('DeusExPlayer'))\n\t\t{\n\t\t\tsuper.Fire(Value);\n\t\t}\n}\n\ndefaultproperties\n{\n     InventoryGroup=212\n     ItemName=\"Rusted Mini-Crossbow\"\n     beltDescription=\"RUSTED CRSSBW\"\n}\n",
            "name": "coopWeaponMiniCrossbow.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "InventoryGroup=212",
                    "ItemName=\"Rusted Mini-Crossbow\"",
                    "beltDescription=\"RUSTED CRSSBW\""
                ],
                "exec": [],
                "extends": "WeaponMiniCrossbow",
                "functions": {
                    "Fire": {
                        "body": "{\n\t\n\tloc = DeusExPlayer(Owner).Location;\n\tloc.Z += DeusExPlayer(Owner).BaseEyeHeight;\n\tline = Vector(DeusExPlayer(Owner).ViewRotation) * 10000;\n\tHitActor = Trace(hitLocation, hitNormal, loc+line, loc, true);\n\t\t\t\t\n\t\tif(!HitActor.isA('DeusExPlayer'))\n\t\t{\n\t\t\tsuper.Fire(Value);\n\t\t}\n}",
                        "locals": [
                            "local vector loc, line, HitLocation, hitNormal;",
                            "local Actor Hitactor;"
                        ],
                        "modifiers": [],
                        "name": "Fire",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "Value"
                            ]
                        ],
                        "return": ""
                    },
                    "GiveTo": {
                        "body": "{\n    super.Giveto(Other);\n\tOther.ClientMessage(\"Special Weapon: Can't be used on Players.\");\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "GiveTo",
                        "native": false,
                        "param": [
                            [
                                "pawn",
                                "Other"
                            ]
                        ],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 40,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "coopWeaponPistol.uc": {
            "body": "//=============================================================================\n// WeaponAssaultGun.\n//=============================================================================\nclass coopWeaponPistol extends WeaponPistol;\n\nfunction GiveTo( pawn Other )\n{\n    super.Giveto(Other);\n\tOther.ClientMessage(\"Special Weapon: Can't be used on Players.\");\n}\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\nfunction ProcessTraceHit(Actor Other, Vector HitLocation, Vector HitNormal, Vector X, Vector Y, Vector Z)\n{\n\n\t\tif(Other.isa('DeusExPlayer'))\n\t\t{\n\t\t\tDeusExPlayer(Owner).ClientMessage(\"Weapon can not be used on players.\");\n\t\t\treturn;\n\t\t}\n\t\t\tsuper.ProcessTraceHit(other, hitlocation, hitnormal, x, y, z);\n\t\n}\n\ndefaultproperties\n{\n     InventoryGroup=163\n     ItemName=\"Glock\"\n     beltDescription=\"GLOCK\"\n}\n",
            "name": "coopWeaponPistol.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "InventoryGroup=163",
                    "ItemName=\"Glock\"",
                    "beltDescription=\"GLOCK\""
                ],
                "exec": [],
                "extends": "WeaponPistol",
                "functions": {
                    "GiveTo": {
                        "body": "{\n    super.Giveto(Other);\n\tOther.ClientMessage(\"Special Weapon: Can't be used on Players.\");\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "GiveTo",
                        "native": false,
                        "param": [
                            [
                                "pawn",
                                "Other"
                            ]
                        ],
                        "return": ""
                    },
                    "ProcessTraceHit": {
                        "body": "{\n\n\t\tif(Other.isa('DeusExPlayer'))\n\t\t{\n\t\t\tDeusExPlayer(Owner).ClientMessage(\"Weapon can not be used on players.\");\n\t\t\treturn;\n\t\t}\n\t\t\tsuper.ProcessTraceHit(other, hitlocation, hitnormal, x, y, z);\n\t\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "ProcessTraceHit",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Other"
                            ],
                            [
                                "Vector",
                                "HitLocation"
                            ],
                            [
                                "Vector",
                                "HitNormal"
                            ],
                            [
                                "Vector",
                                "X"
                            ],
                            [
                                "Vector",
                                "Y"
                            ],
                            [
                                "Vector",
                                "Z"
                            ]
                        ],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 35,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "coopWeaponPistolLight.uc": {
            "body": "//=============================================================================\n// WeaponAssaultGun.\n//=============================================================================\nclass coopWeaponPistolLight extends WeaponPistol;\n\nvar bool bTorchOn;\nvar Beam s;\nvar float TimeChange;\nvar() float TorchRadius, TorchBrightness;\n\nfunction LaserToggle()\n{\n\tTorchToggle();\n}\n\nfunction LaserOff()\n{\n\tif(bTorchOn)\n\t\tTorchToggle();\n}\n\nfunction TorchToggle()\n{\n\tif (bTorchOn)\n\t{\n\t\tbTorchOn=False;\n\t\tOffTorch();\n\t}\n\telse\n\t{\n\t\tbTorchOn=True;\n\t\tOnTorch();\n\t}\n}\n\nfunction OnTorch()\n{\n\tlocal Vector HitNormal,HitLocation,EndTrace,StartTrace,X,Y,Z,NewHitLocation;\n\t\n\tDeusExPlayer(Owner).PlaySound(sound'Switch1Click', SLOT_Talk,2,,1024,);\n\tif(s == None)\n\t{\n\t\ts = Spawn(class'Beam',Owner,, HitLocation+HitNormal*40);\n\t\ts.LightRadius = TorchRadius;\n\t\ts.LightBrightness = TorchBrightness;\n\t\tGetAxes(Pawn(Owner).ViewRotation,X,Y,Z);\t\n\t\tEndTrace = Pawn(Owner).Location + 10000* Vector(Pawn(Owner).ViewRotation);\n\t\tTrace(HitLocation,HitNormal,EndTrace,Pawn(Owner).Location, True);\n\t\ts.SetLocation(HitLocation-vector(Pawn(Owner).ViewRotation)*64);\n\t}\n}\n\nfunction OffTorch()\n{\nDeusExPlayer(Owner).PlaySound(sound'Switch1Click', SLOT_Talk,2,,1024,);\n\ts.Destroy();\n}\n\nfunction GiveTo( pawn Other )\n{\n    super.Giveto(Other);\n\tOther.ClientMessage(\"Special Weapon: Can't be used on Players.\");\n\tOther.ClientMessage(\"Special Weapon: Weapon has a Torch function.\");\n}\n\nfunction Tick(Float Deltatime)\n{\n\tlocal Vector HitNormal,HitLocation,EndTrace,StartTrace,X,Y,Z,NewHitLocation;\n\tsuper.Tick(Deltatime);\n\tif(Owner == None)\n\t\tOffTorch();\n\t\t\n\tif(bTorchOn && Owner != None && s != None)\n\t{\n\t\tGetAxes(Pawn(Owner).ViewRotation,X,Y,Z);\t\n\t\tEndTrace = Pawn(Owner).Location + 10000* Vector(Pawn(Owner).ViewRotation);\n\t\tTrace(HitLocation,HitNormal,EndTrace,Pawn(Owner).Location, True);\n\t\ts.SetLocation(HitLocation-vector(Pawn(Owner).ViewRotation)*64);\n\t}\n}\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\nfunction ProcessTraceHit(Actor Other, Vector HitLocation, Vector HitNormal, Vector X, Vector Y, Vector Z)\n{\n\n\t\tif(Other.isa('DeusExPlayer'))\n\t\t{\n\t\t\tDeusExPlayer(Owner).ClientMessage(\"Weapon can not be used on players.\");\n\t\t\treturn;\n\t\t}\n\t\t\tsuper.ProcessTraceHit(other, hitlocation, hitnormal, x, y, z);\n\t\n}\n\nfunction Destroyed()\n{\n\tOffTorch();\n\tSuper.destroyed();\n}\n\ndefaultproperties\n{\n     TorchRadius=7.000000\n     TorchBrightness=70.000000\n     bHasLaser=True\n     InventoryGroup=164\n     ItemName=\"Glock w/ Torch\"\n     beltDescription=\"GLOCK+\"\n}\n",
            "name": "coopWeaponPistolLight.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "TorchRadius=7.000000",
                    "TorchBrightness=70.000000",
                    "bHasLaser=True",
                    "InventoryGroup=164",
                    "ItemName=\"Glock w/ Torch\"",
                    "beltDescription=\"GLOCK+\""
                ],
                "exec": [],
                "extends": "WeaponPistol",
                "functions": {
                    "Destroyed": {
                        "body": "{\n\tOffTorch();\n\tSuper.destroyed();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Destroyed",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "GiveTo": {
                        "body": "{\n    super.Giveto(Other);\n\tOther.ClientMessage(\"Special Weapon: Can't be used on Players.\");\n\tOther.ClientMessage(\"Special Weapon: Weapon has a Torch function.\");\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "GiveTo",
                        "native": false,
                        "param": [
                            [
                                "pawn",
                                "Other"
                            ]
                        ],
                        "return": ""
                    },
                    "LaserOff": {
                        "body": "{\n\tif(bTorchOn)\n\t\tTorchToggle();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "LaserOff",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "LaserToggle": {
                        "body": "{\n\tTorchToggle();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "LaserToggle",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "OffTorch": {
                        "body": "{\nDeusExPlayer(Owner).PlaySound(sound'Switch1Click', SLOT_Talk,2,,1024,);\n\ts.Destroy();\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "OffTorch",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "OnTorch": {
                        "body": "{\n\t\n\tDeusExPlayer(Owner).PlaySound(sound'Switch1Click', SLOT_Talk,2,,1024,);\n\tif(s == None)\n\t{\n\t\ts = Spawn(class'Beam',Owner,, HitLocation+HitNormal*40);\n\t\ts.LightRadius = TorchRadius;\n\t\ts.LightBrightness = TorchBrightness;\n\t\tGetAxes(Pawn(Owner).ViewRotation,X,Y,Z);\t\n\t\tEndTrace = Pawn(Owner).Location + 10000* Vector(Pawn(Owner).ViewRotation);\n\t\tTrace(HitLocation,HitNormal,EndTrace,Pawn(Owner).Location, True);\n\t\ts.SetLocation(HitLocation-vector(Pawn(Owner).ViewRotation)*64);\n\t}\n}",
                        "locals": [
                            "local Vector HitNormal,HitLocation,EndTrace,StartTrace,X,Y,Z,NewHitLocation;"
                        ],
                        "modifiers": [],
                        "name": "OnTorch",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "ProcessTraceHit": {
                        "body": "{\n\n\t\tif(Other.isa('DeusExPlayer'))\n\t\t{\n\t\t\tDeusExPlayer(Owner).ClientMessage(\"Weapon can not be used on players.\");\n\t\t\treturn;\n\t\t}\n\t\t\tsuper.ProcessTraceHit(other, hitlocation, hitnormal, x, y, z);\n\t\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "ProcessTraceHit",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Other"
                            ],
                            [
                                "Vector",
                                "HitLocation"
                            ],
                            [
                                "Vector",
                                "HitNormal"
                            ],
                            [
                                "Vector",
                                "X"
                            ],
                            [
                                "Vector",
                                "Y"
                            ],
                            [
                                "Vector",
                                "Z"
                            ]
                        ],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    },
                    "Tick": {
                        "body": "{\n\tsuper.Tick(Deltatime);\n\tif(Owner == None)\n\t\tOffTorch();\n\t\t\n\tif(bTorchOn && Owner != None && s != None)\n\t{\n\t\tGetAxes(Pawn(Owner).ViewRotation,X,Y,Z);\t\n\t\tEndTrace = Pawn(Owner).Location + 10000* Vector(Pawn(Owner).ViewRotation);\n\t\tTrace(HitLocation,HitNormal,EndTrace,Pawn(Owner).Location, True);\n\t\ts.SetLocation(HitLocation-vector(Pawn(Owner).ViewRotation)*64);\n\t}\n}",
                        "locals": [
                            "local Vector HitNormal,HitLocation,EndTrace,StartTrace,X,Y,Z,NewHitLocation;"
                        ],
                        "modifiers": [],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "Float",
                                "Deltatime"
                            ]
                        ],
                        "return": ""
                    },
                    "TorchToggle": {
                        "body": "{\n\tif (bTorchOn)\n\t{\n\t\tbTorchOn=False;\n\t\tOffTorch();\n\t}\n\telse\n\t{\n\t\tbTorchOn=True;\n\t\tOnTorch();\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "TorchToggle",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 114,
                "replication": "",
                "states": [],
                "variables": [
                    "var bool bTorchOn;",
                    "var Beam s;",
                    "var float TimeChange;",
                    "var() float TorchRadius, TorchBrightness;"
                ]
            }
        },
        "coopWeaponRifle.uc": {
            "body": "//=============================================================================\n// WeaponAssaultGun.\n//=============================================================================\nclass coopWeaponRifle extends WeaponRifle;\n\nfunction GiveTo( pawn Other )\n{\n    super.Giveto(Other);\n\tOther.ClientMessage(\"Special Weapon: Can't be used on Players.\");\n}\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\nfunction ProcessTraceHit(Actor Other, Vector HitLocation, Vector HitNormal, Vector X, Vector Y, Vector Z)\n{\n\n\t\tif(Other.isa('DeusExPlayer'))\n\t\t{\n\t\t\tDeusExPlayer(Owner).ClientMessage(\"Weapon can not be used on players.\");\n\t\t\treturn;\n\t\t}\n\t\t\tsuper.ProcessTraceHit(other, hitlocation, hitnormal, x, y, z);\n\t\n}\n\ndefaultproperties\n{\n     InventoryGroup=100\n     ItemName=\"Rifle\"\n     beltDescription=\"RIFLE\"\n}\n",
            "name": "coopWeaponRifle.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "InventoryGroup=100",
                    "ItemName=\"Rifle\"",
                    "beltDescription=\"RIFLE\""
                ],
                "exec": [],
                "extends": "WeaponRifle",
                "functions": {
                    "GiveTo": {
                        "body": "{\n    super.Giveto(Other);\n\tOther.ClientMessage(\"Special Weapon: Can't be used on Players.\");\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "GiveTo",
                        "native": false,
                        "param": [
                            [
                                "pawn",
                                "Other"
                            ]
                        ],
                        "return": ""
                    },
                    "ProcessTraceHit": {
                        "body": "{\n\n\t\tif(Other.isa('DeusExPlayer'))\n\t\t{\n\t\t\tDeusExPlayer(Owner).ClientMessage(\"Weapon can not be used on players.\");\n\t\t\treturn;\n\t\t}\n\t\t\tsuper.ProcessTraceHit(other, hitlocation, hitnormal, x, y, z);\n\t\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "ProcessTraceHit",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Other"
                            ],
                            [
                                "Vector",
                                "HitLocation"
                            ],
                            [
                                "Vector",
                                "HitNormal"
                            ],
                            [
                                "Vector",
                                "X"
                            ],
                            [
                                "Vector",
                                "Y"
                            ],
                            [
                                "Vector",
                                "Z"
                            ]
                        ],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 35,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "coopWeaponShotgun.uc": {
            "body": "//=============================================================================\n// WeaponAssaultGun.\n//=============================================================================\nclass coopWeaponShotgun extends WeaponSawedOffShotgun;\n\nfunction GiveTo( pawn Other )\n{\n    super.Giveto(Other);\n\tOther.ClientMessage(\"Special Weapon: Can't be used on Players.\");\n}\n\nsimulated function bool TestMPBeltSpot(int BeltSpot)\n{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}\n\nfunction ProcessTraceHit(Actor Other, Vector HitLocation, Vector HitNormal, Vector X, Vector Y, Vector Z)\n{\n\n\t\tif(Other.isa('DeusExPlayer'))\n\t\t{\n\t\t\tDeusExPlayer(Owner).ClientMessage(\"Weapon can not be used on players.\");\n\t\t\treturn;\n\t\t}\n\t\t\tsuper.ProcessTraceHit(other, hitlocation, hitnormal, x, y, z);\n\t\n}\n\ndefaultproperties\n{\n     InventoryGroup=96\n     ItemName=\"Shotgun\"\n     beltDescription=\"SHOT\"\n}\n",
            "name": "coopWeaponShotgun.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "InventoryGroup=96",
                    "ItemName=\"Shotgun\"",
                    "beltDescription=\"SHOT\""
                ],
                "exec": [],
                "extends": "WeaponSawedOffShotgun",
                "functions": {
                    "GiveTo": {
                        "body": "{\n    super.Giveto(Other);\n\tOther.ClientMessage(\"Special Weapon: Can't be used on Players.\");\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "GiveTo",
                        "native": false,
                        "param": [
                            [
                                "pawn",
                                "Other"
                            ]
                        ],
                        "return": ""
                    },
                    "ProcessTraceHit": {
                        "body": "{\n\n\t\tif(Other.isa('DeusExPlayer'))\n\t\t{\n\t\t\tDeusExPlayer(Owner).ClientMessage(\"Weapon can not be used on players.\");\n\t\t\treturn;\n\t\t}\n\t\t\tsuper.ProcessTraceHit(other, hitlocation, hitnormal, x, y, z);\n\t\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "ProcessTraceHit",
                        "native": false,
                        "param": [
                            [
                                "Actor",
                                "Other"
                            ],
                            [
                                "Vector",
                                "HitLocation"
                            ],
                            [
                                "Vector",
                                "HitNormal"
                            ],
                            [
                                "Vector",
                                "X"
                            ],
                            [
                                "Vector",
                                "Y"
                            ],
                            [
                                "Vector",
                                "Z"
                            ]
                        ],
                        "return": ""
                    },
                    "TestMPBeltSpot": {
                        "body": "{\n   return ( (BeltSpot >= 1) && (BeltSpot <=9) );\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "TestMPBeltSpot",
                        "native": false,
                        "param": [
                            [
                                "int",
                                "BeltSpot"
                            ]
                        ],
                        "return": "bool"
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 35,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "kebab.uc": {
            "body": "//=============================================================================\n// SoyFood.\n//=============================================================================\nclass kebab extends FoodMMRPG;\n\ndefaultproperties\n{\n     ItemName=\"Kebab\"\n     PlayerViewMesh=LodMesh'PGAssets.kebab'\n     PlayerViewScale=0.150000\n     PickupViewMesh=LodMesh'PGAssets.kebab'\n     PickupViewScale=0.150000\n     ThirdPersonMesh=LodMesh'PGAssets.kebab'\n     ThirdPersonScale=0.150000\n     Icon=Texture'PGAssets.Skins.KebabBelt'\n     largeIcon=Texture'PGAssets.Skins.KebabBelt'\n     largeIconWidth=42\n     largeIconHeight=46\n     beltDescription=\"KEBAB\"\n     Mesh=LodMesh'PGAssets.kebab'\n     DrawScale=0.150000\n     MultiSkins(0)=Texture'CoreTexEarth.Earth.LakeBed_A'\n     MultiSkins(1)=Texture'CoreTexMetal.Metal.Galvanzd'\n     CollisionRadius=7.000000\n     CollisionHeight=2.000000\n     Mass=3.000000\n}\n",
            "name": "kebab.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "ItemName=\"Kebab\"",
                    "PlayerViewMesh=LodMesh'PGAssets.kebab'",
                    "PlayerViewScale=0.150000",
                    "PickupViewMesh=LodMesh'PGAssets.kebab'",
                    "PickupViewScale=0.150000",
                    "ThirdPersonMesh=LodMesh'PGAssets.kebab'",
                    "ThirdPersonScale=0.150000",
                    "Icon=Texture'PGAssets.Skins.KebabBelt'",
                    "largeIcon=Texture'PGAssets.Skins.KebabBelt'",
                    "largeIconWidth=42",
                    "largeIconHeight=46",
                    "beltDescription=\"KEBAB\"",
                    "Mesh=LodMesh'PGAssets.kebab'",
                    "DrawScale=0.150000",
                    "MultiSkins(0)=Texture'CoreTexEarth.Earth.LakeBed_A'",
                    "MultiSkins(1)=Texture'CoreTexMetal.Metal.Galvanzd'",
                    "CollisionRadius=7.000000",
                    "CollisionHeight=2.000000",
                    "Mass=3.000000"
                ],
                "exec": [],
                "extends": "FoodMMRPG",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 28,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "mpCigaretteMachine.uc": {
            "body": "//=============================================================================\n// CigaretteMachine.\n//=============================================================================\nclass mpCigaretteMachine extends ElectronicDevices;\n//Add check for if dispensing Estus SPECIAL CASE\n//Make it Armed False\n#exec OBJ LOAD FILE=Ambient\n\nvar() class<Inventory> ItemSale;\nvar() int Price;\n\nfunction BeginPlay()\n{\n\tSuper.BeginPlay();\n\t\n\tif(ItemSale == None)\n\t\tItemSale = class'DeusEx.Cigarettes';  \n}\n\nfunction Frob(actor Frobber, Inventory frobWith)\n{\n\tlocal DeusExPlayer player;\n\tlocal Vector loc;\n\tlocal Inventory product;\n\n\tSuper.Frob(Frobber, frobWith);\n\t\n\tplayer = DeusExPlayer(Frobber);\n\n\tif (player != None)\n\t{\n\t\tif (player.Credits >= price)\n\t\t{\n\t\t\tPlaySound(sound'VendingCoin', SLOT_None);\n\t\t\tloc = Vector(Rotation) * CollisionRadius * 0.8;\n\t\t\tloc.Z -= CollisionHeight * 0.6; \n\t\t\tloc += Location;\n\n\t\t\tproduct = Spawn(ItemSale, None,, loc);\n\n\t\t\tif (product != None)\n\t\t\t{\n\t\t\t\tPlaySound(sound'VendingSmokes', SLOT_None);\n\t\t\t\tif(product.isA('Estus'))\n\t\t\t\t\tEstus(product).bEstusArmed=False;\n\t\t\t\tif(product.isA('PoisonEstus'))\n\t\t\t\t\tPoisonEstus(product).bEstusArmed=False;\n\t\t\t\tproduct.Velocity = Vector(Rotation) * 100;\n\t\t\t\tproduct.bFixedRotationDir = True;\n\t\t\t\tproduct.Lifespan = 6;\n\t\t\t\tproduct.RotationRate.Pitch = (32768 - Rand(65536)) * 4.0;\n\t\t\t\tproduct.RotationRate.Yaw = (32768 - Rand(65536)) * 4.0;\n\t\t\t}\n\n\t\t\tplayer.Credits -= price;\n\t\t\tplayer.ClientMessage(\"Bought \"$Product.itemname$\" for \"$Price$\" credits.\");\n\t\t}\n\t\telse\n\t\t\tplayer.ClientMessage(\"Needs\"@Price@\"credits.\");\n\t}\n}\n\ndefaultproperties\n{\n     ItemName=\"Cigarette Machine\"\n     Physics=PHYS_None\n     Mesh=LodMesh'DeusExDeco.CigaretteMachine'\n     SoundRadius=8\n     SoundVolume=96\n     AmbientSound=Sound'Ambient.Ambient.HumLight3'\n     CollisionRadius=27.000000\n     CollisionHeight=26.320000\n     Mass=150.000000\n     Buoyancy=100.000000\n}\n",
            "name": "mpCigaretteMachine.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "ItemName=\"Cigarette Machine\"",
                    "Physics=PHYS_None",
                    "Mesh=LodMesh'DeusExDeco.CigaretteMachine'",
                    "SoundRadius=8",
                    "SoundVolume=96",
                    "AmbientSound=Sound'Ambient.Ambient.HumLight3'",
                    "CollisionRadius=27.000000",
                    "CollisionHeight=26.320000",
                    "Mass=150.000000",
                    "Buoyancy=100.000000"
                ],
                "exec": [
                    "#exec OBJ LOAD FILE=Ambient"
                ],
                "extends": "ElectronicDevices",
                "functions": {
                    "BeginPlay": {
                        "body": "{\n\tSuper.BeginPlay();\n\t\n\tif(ItemSale == None)\n\t\tItemSale = class'DeusEx.Cigarettes';  \n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "BeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Frob": {
                        "body": "{\n\n\tSuper.Frob(Frobber, frobWith);\n\t\n\tplayer = DeusExPlayer(Frobber);\n\n\tif (player != None)\n\t{\n\t\tif (player.Credits >= price)\n\t\t{\n\t\t\tPlaySound(sound'VendingCoin', SLOT_None);\n\t\t\tloc = Vector(Rotation) * CollisionRadius * 0.8;\n\t\t\tloc.Z -= CollisionHeight * 0.6; \n\t\t\tloc += Location;\n\n\t\t\tproduct = Spawn(ItemSale, None,, loc);\n\n\t\t\tif (product != None)\n\t\t\t{\n\t\t\t\tPlaySound(sound'VendingSmokes', SLOT_None);\n\t\t\t\tif(product.isA('Estus'))\n\t\t\t\t\tEstus(product).bEstusArmed=False;\n\t\t\t\tif(product.isA('PoisonEstus'))\n\t\t\t\t\tPoisonEstus(product).bEstusArmed=False;\n\t\t\t\tproduct.Velocity = Vector(Rotation) * 100;\n\t\t\t\tproduct.bFixedRotationDir = True;\n\t\t\t\tproduct.Lifespan = 6;\n\t\t\t\tproduct.RotationRate.Pitch = (32768 - Rand(65536)) * 4.0;\n\t\t\t\tproduct.RotationRate.Yaw = (32768 - Rand(65536)) * 4.0;\n\t\t\t}\n\n\t\t\tplayer.Credits -= price;\n\t\t\tplayer.ClientMessage(\"Bought \"$Product.itemname$\" for \"$Price$\" credits.\");\n\t\t}\n\t\telse\n\t\t\tplayer.ClientMessage(\"Needs\"@Price@\"credits.\");\n\t}\n}",
                        "locals": [
                            "local DeusExPlayer player;",
                            "local Vector loc;",
                            "local Inventory product;"
                        ],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 76,
                "replication": "",
                "states": [],
                "variables": [
                    "var() class<Inventory> ItemSale;",
                    "var() int Price;"
                ]
            }
        },
        "mpVendingMachine.uc": {
            "body": "//=============================================================================\n// VendingMachine.\n//=============================================================================\nclass mpVendingMachine extends ElectronicDevices;\n\n#exec OBJ LOAD FILE=Ambient\n\nenum ESkinColor\n{\n\tSC_Drink,\n\tSC_Snack\n};\n\nvar() ESkinColor SkinColor;\nvar() class<Inventory> ItemSale;\nvar() int Price;\n\nfunction BeginPlay()\n{\n\tSuper.BeginPlay();\n\n\tswitch (SkinColor)\n\t{\n\t\tcase SC_Drink:\tSkin = Texture'VendingMachineTex1'; ItemSale = class'DeusEx.Sodacan'; break;\n\t\tcase SC_Snack:\tSkin = Texture'VendingMachineTex2'; break;\n\t}\n\t\n\tif(ItemSale == None)\n\t\tItemSale = class'DeusEx.Candybar';  \n}\n\nfunction Frob(actor Frobber, Inventory frobWith)\n{\n\tlocal DeusExPlayer player;\n\tlocal Vector loc;\n\tlocal Inventory product;\n\n\tSuper.Frob(Frobber, frobWith);\n\t\n\tplayer = DeusExPlayer(Frobber);\n\n\tif (player != None)\n\t{\n\t\tif (player.Credits >= Price)\n\t\t{\n\t\t\tPlaySound(sound'VendingCoin', SLOT_None);\n\t\t\tloc = Vector(Rotation) * CollisionRadius * 0.8;\n\t\t\tloc.Z -= CollisionHeight * 0.7; \n\t\t\tloc += Location;\n\n\t\t\tproduct = Spawn(ItemSale, None,, loc);\n\n\t\t\tif (product != None)\n\t\t\t{\n\t\t\t\tif (product.IsA('Sodacan'))\n\t\t\t\t\tPlaySound(sound'VendingCan', SLOT_None);\n\t\t\t\telse\n\t\t\t\t\tPlaySound(sound'VendingSmokes', SLOT_None);\n\t\t\t\t\t\n\t\t\t\tif(product.isA('Estus'))\n\t\t\t\t\tEstus(product).bEstusArmed=False;\n\t\t\t\tif(product.isA('PoisonEstus'))\n\t\t\t\t\tPoisonEstus(product).bEstusArmed=False;\n\t\t\t\t\t\n\t\t\t\tproduct.Velocity = Vector(Rotation) * 100;\n\t\t\t\tproduct.bFixedRotationDir = True;\n\t\t\t\tproduct.Lifespan = 6;\n\t\t\t\tproduct.RotationRate.Pitch = (32768 - Rand(65536)) * 4.0;\n\t\t\t\tproduct.RotationRate.Yaw = (32768 - Rand(65536)) * 4.0;\n\t\t\t}\n\n\t\t\tplayer.Credits -= Price;\n\t\t\tplayer.ClientMessage(\"Bought \"$Product.itemname$\" for \"$Price$\" credits.\");\n\t\t}\n\t\telse\n\t\t\tplayer.ClientMessage(\"Needs\"@Price@\"credits.\");\n\t}\n}\n\ndefaultproperties\n{\n     bCanBeBase=True\n     ItemName=\"Vending Machine\"\n     Mesh=LodMesh'DeusExDeco.VendingMachine'\n     SoundRadius=8\n     SoundVolume=96\n     AmbientSound=Sound'Ambient.Ambient.HumLow3'\n     CollisionRadius=34.000000\n     CollisionHeight=50.000000\n     Mass=150.000000\n     Buoyancy=100.000000\n}\n",
            "name": "mpVendingMachine.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "bCanBeBase=True",
                    "ItemName=\"Vending Machine\"",
                    "Mesh=LodMesh'DeusExDeco.VendingMachine'",
                    "SoundRadius=8",
                    "SoundVolume=96",
                    "AmbientSound=Sound'Ambient.Ambient.HumLow3'",
                    "CollisionRadius=34.000000",
                    "CollisionHeight=50.000000",
                    "Mass=150.000000",
                    "Buoyancy=100.000000"
                ],
                "exec": [
                    "#exec OBJ LOAD FILE=Ambient"
                ],
                "extends": "ElectronicDevices",
                "functions": {
                    "BeginPlay": {
                        "body": "{\n\tSuper.BeginPlay();\n\n\tswitch (SkinColor)\n\t{\n\t\tcase SC_Drink:\tSkin = Texture'VendingMachineTex1'; ItemSale = class'DeusEx.Sodacan'; break;\n\t\tcase SC_Snack:\tSkin = Texture'VendingMachineTex2'; break;\n\t}\n\t\n\tif(ItemSale == None)\n\t\tItemSale = class'DeusEx.Candybar';  \n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "BeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Frob": {
                        "body": "{\n\n\tSuper.Frob(Frobber, frobWith);\n\t\n\tplayer = DeusExPlayer(Frobber);\n\n\tif (player != None)\n\t{\n\t\tif (player.Credits >= Price)\n\t\t{\n\t\t\tPlaySound(sound'VendingCoin', SLOT_None);\n\t\t\tloc = Vector(Rotation) * CollisionRadius * 0.8;\n\t\t\tloc.Z -= CollisionHeight * 0.7; \n\t\t\tloc += Location;\n\n\t\t\tproduct = Spawn(ItemSale, None,, loc);\n\n\t\t\tif (product != None)\n\t\t\t{\n\t\t\t\tif (product.IsA('Sodacan'))\n\t\t\t\t\tPlaySound(sound'VendingCan', SLOT_None);\n\t\t\t\telse\n\t\t\t\t\tPlaySound(sound'VendingSmokes', SLOT_None);\n\t\t\t\t\t\n\t\t\t\tif(product.isA('Estus'))\n\t\t\t\t\tEstus(product).bEstusArmed=False;\n\t\t\t\tif(product.isA('PoisonEstus'))\n\t\t\t\t\tPoisonEstus(product).bEstusArmed=False;\n\t\t\t\t\t\n\t\t\t\tproduct.Velocity = Vector(Rotation) * 100;\n\t\t\t\tproduct.bFixedRotationDir = True;\n\t\t\t\tproduct.Lifespan = 6;\n\t\t\t\tproduct.RotationRate.Pitch = (32768 - Rand(65536)) * 4.0;\n\t\t\t\tproduct.RotationRate.Yaw = (32768 - Rand(65536)) * 4.0;\n\t\t\t}\n\n\t\t\tplayer.Credits -= Price;\n\t\t\tplayer.ClientMessage(\"Bought \"$Product.itemname$\" for \"$Price$\" credits.\");\n\t\t}\n\t\telse\n\t\t\tplayer.ClientMessage(\"Needs\"@Price@\"credits.\");\n\t}\n}",
                        "locals": [
                            "local DeusExPlayer player;",
                            "local Vector loc;",
                            "local Inventory product;"
                        ],
                        "modifiers": [],
                        "name": "Frob",
                        "native": false,
                        "param": [
                            [
                                "actor",
                                "Frobber"
                            ],
                            [
                                "Inventory",
                                "frobWith"
                            ]
                        ],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 93,
                "replication": "",
                "states": [],
                "variables": [
                    "var() ESkinColor SkinColor;",
                    "var() class<Inventory> ItemSale;",
                    "var() int Price;"
                ]
            }
        },
        "psRepeater.uc": {
            "body": "//String repeater.\nclass psRepeater extends PGActors;\n\nvar() string RepeaterString;\nvar() int RepeaterTimes;\nvar int TimesRun;\nvar() string psRef;\n\nfunction Engage(string Stringz, int Timerz, int Repeatz)\n{\n\tSetTimer(float(Timerz),False);\n}\n\nfunction BeepToAll(string str)\n{\n\tlocal DeusExPlayer DXP;\n\t\n\tforeach allactors(class'DeusExPlayer',DXP)\n\t{\n\t\tDXP.ClientMessage(str,'Say');\n\t}\n}\n\nfunction Timer()\n{\n\tif(TimesRun != RepeaterTimes)\n\t{\n\t\tBeepToAll(RepeaterString);\n\t\tTimesRun++;\n\t}\n\telse\n\t{\n\t\tBeepToAll(RepeaterString);\n\t\tDestroy();\n\t}\n}\n\ndefaultproperties\n{\n     RepeaterTimes=5\n}\n",
            "name": "psRepeater.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "RepeaterTimes=5"
                ],
                "exec": [],
                "extends": "PGActors",
                "functions": {
                    "BeepToAll": {
                        "body": "{\n\t\n\tforeach allactors(class'DeusExPlayer',DXP)\n\t{\n\t\tDXP.ClientMessage(str,'Say');\n\t}\n}",
                        "locals": [
                            "local DeusExPlayer DXP;"
                        ],
                        "modifiers": [],
                        "name": "BeepToAll",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "str"
                            ]
                        ],
                        "return": ""
                    },
                    "Engage": {
                        "body": "{\n\tSetTimer(float(Timerz),False);\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Engage",
                        "native": false,
                        "param": [
                            [
                                "string",
                                "Stringz"
                            ],
                            [
                                "int",
                                "Timerz"
                            ],
                            [
                                "int",
                                "Repeatz"
                            ]
                        ],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\tif(TimesRun != RepeaterTimes)\n\t{\n\t\tBeepToAll(RepeaterString);\n\t\tTimesRun++;\n\t}\n\telse\n\t{\n\t\tBeepToAll(RepeaterString);\n\t\tDestroy();\n\t}\n}",
                        "locals": [],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 42,
                "replication": "",
                "states": [],
                "variables": [
                    "var() string RepeaterString;",
                    "var() int RepeaterTimes;",
                    "var int TimesRun;",
                    "var() string psRef;"
                ]
            }
        },
        "psTeleRing1.uc": {
            "body": "//=============================================================================\n// WaterRing.\n//=============================================================================\nclass psTeleRing1 extends Actor;\n\nvar DeusExPlayer Target;\nvar int QT;\nvar vector OriginLoc, TPLoc;\nvar float size;\n\nsimulated function Tick(float deltaTime)\n{\n\tDrawScale = size * (Default.LifeSpan - LifeSpan) / Default.LifeSpan;\n\tScaleGlow = LifeSpan / Default.LifeSpan;\n}\n\n/*- Q 0 = Spawns 2, Q1 and Q2, +- 25\n *a Q 1 = Spawns 1, Q3 +50\n *a Q 2 = Spawns 1, Q4 -50\n *b Q 3 = Spawns 1, Q5 +75\n *b Q 4 = Spawns 1, Q6 -75 +Teleport\n */\n \nfunction Timer()\n{\n\tlocal psTeleRing1 pn1, pn2;\n\tlocal vector finLoc;\n\tlocal PSAfterEffect PSAE;\n\t\n\tif(QT==0)\n\t{\n\t\tif(Target != None)\n\t\t\tfinLoc = Target.Location;\t\t\n\t\telse\n\t\t\tfinLoc = OriginLoc;\n\t\t\t\n\t\tfinloc.Z += 25;\n\t\t\n\t\tpn1 = Spawn(class'psTeleRing1',,,finLoc);\n\t\tpn1.QT = 1;\n\t\tpn1.Target = Target;\n\t\tpn1.TPLoc = TPLoc;\n\t\t\n\t\tif(Target != None)\n\t\t\tfinLoc = Target.Location;\t\t\n\t\telse\n\t\t\tfinLoc = OriginLoc;\n\t\t\t\n\t\tfinloc.Z -= 25;\n\t\t\n\t\tpn2 = Spawn(class'psTeleRing1',,,finLoc);\n\t\tpn2.QT = 2;\n\t\tpn2.Target = Target;\n\t\tpn2.TPLoc = TPLoc;\n\t}\n\t\n\tif(QT==1)\n\t{\n\t\tif(Target != None)\n\t\t\tfinLoc = Target.Location;\t\t\n\t\telse\n\t\t\tfinLoc = OriginLoc;\n\t\t\t\n\t\tfinloc.Z += 50;\n\t\t\n\t\tpn1 = Spawn(class'psTeleRing1',,,finLoc);\n\t\tpn1.QT = 3;\n\t\tpn1.Target = Target;\n\t\tpn1.TPLoc = TPLoc;\n\t}\n\t\n\tif(QT==2)\n\t{\n\t\tif(Target != None)\n\t\t\tfinLoc = Target.Location;\t\t\n\t\telse\n\t\t\tfinLoc = OriginLoc;\n\t\t\t\n\t\tfinloc.Z -= 50;\n\t\t\n\t\tpn1 = Spawn(class'psTeleRing1',,,finLoc);\n\t\tpn1.QT = 4;\n\t\tpn1.Target = Target;\n\t\tpn1.TPLoc = TPLoc;\n\t}\n\t\n\tif(QT==3)\n\t{\n\t\tif(Target != None)\n\t\t\tfinLoc = Target.Location;\t\t\n\t\telse\n\t\t\tfinLoc = OriginLoc;\n\t\t\t\n\t\tfinloc.Z += 75;\n\t\t\n\t\tpn1 = Spawn(class'psTeleRing1',,,finLoc);\n\t\tpn1.QT = 5;\n\t\tpn1.Target = Target;\n\t\tpn1.TPLoc = TPLoc;\n\t}\n\t\n\tif(QT==4)\n\t{\n\t\tif(Target != None)\n\t\t\tfinLoc = Target.Location;\t\t\n\t\telse\n\t\t\tfinLoc = OriginLoc;\n\t\t\t\n\t\tfinloc.Z -= 75;\n\t\t\n\t\tpn1 = Spawn(class'psTeleRing1',,,finLoc);\n\t\tpn1.QT = 6;\n\t\tpn1.Target = Target;\n\t\tpn1.TPLoc = TPLoc;\n\t}\n\t\n\tif(QT==6)\n\t{\n\t\tPSAE = Spawn(class'PSAfterEffect');\n\t\tPSAE.AttachToPlayer(Target);\n\t\tTarget.bMovable=True;\n\t\tTarget.SetCollision(false, false, false);\n\t\tTarget.bCollideWorld = true;\n\t\tTarget.GotoState('PlayerWalking');\n\t\tTarget.SetLocation(TPLoc);\n\t\tTarget.SetCollision(true, true , true);\n\t\tTarget.SetPhysics(PHYS_Walking);\n\t\tTarget.bCollideWorld = true;\n\t\tTarget.GotoState('PlayerWalking');\n\t\tTarget.ClientReStart();\n\t\t\n\t}\n}\n\nfunction PostBeginPlay()\n{\n\tlocal Rotator rot;\n\n\tSuper.PostBeginPlay();\n\t\n\trot.Pitch = 16384;\n\trot.Roll = 0;\n\trot.Yaw = Rand(65535);\n\tSetRotation(rot);\n\t\n\tif (size > 5)\n\t\tSkin = Texture'FlatFXTex43';\n\t\n\tSetTimer(0.7,False);\n}\n\ndefaultproperties\n{\n     size=5.000000\n     LifeSpan=0.500000\n     DrawType=DT_Mesh\n     Style=STY_Translucent\n     Skin=Texture'DeusExItems.Skins.FlatFXTex41'\n     Mesh=LodMesh'DeusExItems.FlatFX'\n     bUnlit=True\n}\n",
            "name": "psTeleRing1.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "size=5.000000",
                    "LifeSpan=0.500000",
                    "DrawType=DT_Mesh",
                    "Style=STY_Translucent",
                    "Skin=Texture'DeusExItems.Skins.FlatFXTex41'",
                    "Mesh=LodMesh'DeusExItems.FlatFX'",
                    "bUnlit=True"
                ],
                "exec": [],
                "extends": "Actor",
                "functions": {
                    "PostBeginPlay": {
                        "body": "{\n\n\tSuper.PostBeginPlay();\n\t\n\trot.Pitch = 16384;\n\trot.Roll = 0;\n\trot.Yaw = Rand(65535);\n\tSetRotation(rot);\n\t\n\tif (size > 5)\n\t\tSkin = Texture'FlatFXTex43';\n\t\n\tSetTimer(0.7,False);\n}",
                        "locals": [
                            "local Rotator rot;"
                        ],
                        "modifiers": [],
                        "name": "PostBeginPlay",
                        "native": false,
                        "param": [],
                        "return": ""
                    },
                    "Tick": {
                        "body": "{\n\tDrawScale = size * (Default.LifeSpan - LifeSpan) / Default.LifeSpan;\n\tScaleGlow = LifeSpan / Default.LifeSpan;\n}",
                        "locals": [],
                        "modifiers": [
                            "simulated"
                        ],
                        "name": "Tick",
                        "native": false,
                        "param": [
                            [
                                "float",
                                "deltaTime"
                            ]
                        ],
                        "return": ""
                    },
                    "Timer": {
                        "body": "{\n\t\n\tif(QT==0)\n\t{\n\t\tif(Target != None)\n\t\t\tfinLoc = Target.Location;\t\t\n\t\telse\n\t\t\tfinLoc = OriginLoc;\n\t\t\t\n\t\tfinloc.Z += 25;\n\t\t\n\t\tpn1 = Spawn(class'psTeleRing1',,,finLoc);\n\t\tpn1.QT = 1;\n\t\tpn1.Target = Target;\n\t\tpn1.TPLoc = TPLoc;\n\t\t\n\t\tif(Target != None)\n\t\t\tfinLoc = Target.Location;\t\t\n\t\telse\n\t\t\tfinLoc = OriginLoc;\n\t\t\t\n\t\tfinloc.Z -= 25;\n\t\t\n\t\tpn2 = Spawn(class'psTeleRing1',,,finLoc);\n\t\tpn2.QT = 2;\n\t\tpn2.Target = Target;\n\t\tpn2.TPLoc = TPLoc;\n\t}\n\t\n\tif(QT==1)\n\t{\n\t\tif(Target != None)\n\t\t\tfinLoc = Target.Location;\t\t\n\t\telse\n\t\t\tfinLoc = OriginLoc;\n\t\t\t\n\t\tfinloc.Z += 50;\n\t\t\n\t\tpn1 = Spawn(class'psTeleRing1',,,finLoc);\n\t\tpn1.QT = 3;\n\t\tpn1.Target = Target;\n\t\tpn1.TPLoc = TPLoc;\n\t}\n\t\n\tif(QT==2)\n\t{\n\t\tif(Target != None)\n\t\t\tfinLoc = Target.Location;\t\t\n\t\telse\n\t\t\tfinLoc = OriginLoc;\n\t\t\t\n\t\tfinloc.Z -= 50;\n\t\t\n\t\tpn1 = Spawn(class'psTeleRing1',,,finLoc);\n\t\tpn1.QT = 4;\n\t\tpn1.Target = Target;\n\t\tpn1.TPLoc = TPLoc;\n\t}\n\t\n\tif(QT==3)\n\t{\n\t\tif(Target != None)\n\t\t\tfinLoc = Target.Location;\t\t\n\t\telse\n\t\t\tfinLoc = OriginLoc;\n\t\t\t\n\t\tfinloc.Z += 75;\n\t\t\n\t\tpn1 = Spawn(class'psTeleRing1',,,finLoc);\n\t\tpn1.QT = 5;\n\t\tpn1.Target = Target;\n\t\tpn1.TPLoc = TPLoc;\n\t}\n\t\n\tif(QT==4)\n\t{\n\t\tif(Target != None)\n\t\t\tfinLoc = Target.Location;\t\t\n\t\telse\n\t\t\tfinLoc = OriginLoc;\n\t\t\t\n\t\tfinloc.Z -= 75;\n\t\t\n\t\tpn1 = Spawn(class'psTeleRing1',,,finLoc);\n\t\tpn1.QT = 6;\n\t\tpn1.Target = Target;\n\t\tpn1.TPLoc = TPLoc;\n\t}\n\t\n\tif(QT==6)\n\t{\n\t\tPSAE = Spawn(class'PSAfterEffect');\n\t\tPSAE.AttachToPlayer(Target);\n\t\tTarget.bMovable=True;\n\t\tTarget.SetCollision(false, false, false);\n\t\tTarget.bCollideWorld = true;\n\t\tTarget.GotoState('PlayerWalking');\n\t\tTarget.SetLocation(TPLoc);\n\t\tTarget.SetCollision(true, true , true);\n\t\tTarget.SetPhysics(PHYS_Walking);\n\t\tTarget.bCollideWorld = true;\n\t\tTarget.GotoState('PlayerWalking');\n\t\tTarget.ClientReStart();\n\t\t\n\t}\n}",
                        "locals": [
                            "local psTeleRing1 pn1, pn2;",
                            "local vector finLoc;",
                            "local PSAfterEffect PSAE;"
                        ],
                        "modifiers": [],
                        "name": "Timer",
                        "native": false,
                        "param": [],
                        "return": ""
                    }
                },
                "header": [],
                "instructions": [],
                "loc": 162,
                "replication": "",
                "states": [],
                "variables": [
                    "var DeusExPlayer Target;",
                    "var int QT;",
                    "var vector OriginLoc, TPLoc;",
                    "var float size;"
                ]
            }
        },
        "redbull.uc": {
            "body": "class redbull extends FoodMMRPG;\n\ndefaultproperties\n{\n     rechargeAmount=100\n     ItemName=\"Red Bull\"\n     ItemArticle=\"a can of\"\n     PlayerViewMesh=LodMesh'DeusExItems.Sodacan'\n     PlayerViewScale=1.200000\n     PickupViewMesh=LodMesh'DeusExItems.Sodacan'\n     PickupViewScale=1.200000\n     ThirdPersonMesh=LodMesh'DeusExItems.Sodacan'\n     ThirdPersonScale=1.200000\n     Icon=Texture'DeusExUI.Icons.BeltIconSoyFood'\n     largeIcon=Texture'DeusExUI.Icons.LargeIconSoyFood'\n     largeIconWidth=42\n     largeIconHeight=46\n     beltDescription=\"REDBULL\"\n     Skin=Texture'PGAssets.Skins.RedBullTex1'\n     Mesh=LodMesh'DeusExItems.Sodacan'\n     DrawScale=1.200000\n     MultiSkins(0)=Texture'PGAssets.Skins.RedBullTex1'\n     CollisionRadius=3.000000\n     CollisionHeight=4.500000\n     Mass=3.000000\n}\n",
            "name": "redbull.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "rechargeAmount=100",
                    "ItemName=\"Red Bull\"",
                    "ItemArticle=\"a can of\"",
                    "PlayerViewMesh=LodMesh'DeusExItems.Sodacan'",
                    "PlayerViewScale=1.200000",
                    "PickupViewMesh=LodMesh'DeusExItems.Sodacan'",
                    "PickupViewScale=1.200000",
                    "ThirdPersonMesh=LodMesh'DeusExItems.Sodacan'",
                    "ThirdPersonScale=1.200000",
                    "Icon=Texture'DeusExUI.Icons.BeltIconSoyFood'",
                    "largeIcon=Texture'DeusExUI.Icons.LargeIconSoyFood'",
                    "largeIconWidth=42",
                    "largeIconHeight=46",
                    "beltDescription=\"REDBULL\"",
                    "Skin=Texture'PGAssets.Skins.RedBullTex1'",
                    "Mesh=LodMesh'DeusExItems.Sodacan'",
                    "DrawScale=1.200000",
                    "MultiSkins(0)=Texture'PGAssets.Skins.RedBullTex1'",
                    "CollisionRadius=3.000000",
                    "CollisionHeight=4.500000",
                    "Mass=3.000000"
                ],
                "exec": [],
                "extends": "FoodMMRPG",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 27,
                "replication": "",
                "states": [],
                "variables": []
            }
        },
        "sandwich.uc": {
            "body": "class sandwich extends FoodMMRPG;\n\ndefaultproperties\n{\n     rechargeAmount=30\n     ItemName=\"Chicken Salad Sandwich\"\n     PlayerViewMesh=LodMesh'PGAssets.sandwich'\n     PickupViewMesh=LodMesh'PGAssets.sandwich'\n     ThirdPersonMesh=LodMesh'PGAssets.sandwich'\n     Icon=Texture'PGAssets.Skins.SandwichBelt'\n     largeIcon=Texture'PGAssets.Skins.SandwichBelt'\n     largeIconWidth=42\n     largeIconHeight=46\n     beltDescription=\"CHK.SNDWCH\"\n     Mesh=LodMesh'PGAssets.sandwich'\n     MultiSkins(0)=Texture'PGAssets.Skins.SandwichTex2'\n     MultiSkins(1)=Texture'PGAssets.Skins.SandwichTex1'\n     CollisionRadius=8.000000\n     CollisionHeight=4.000000\n     Mass=3.000000\n}\n",
            "name": "sandwich.uc",
            "uc": {
                "comments": [],
                "default_properties": [
                    "rechargeAmount=30",
                    "ItemName=\"Chicken Salad Sandwich\"",
                    "PlayerViewMesh=LodMesh'PGAssets.sandwich'",
                    "PickupViewMesh=LodMesh'PGAssets.sandwich'",
                    "ThirdPersonMesh=LodMesh'PGAssets.sandwich'",
                    "Icon=Texture'PGAssets.Skins.SandwichBelt'",
                    "largeIcon=Texture'PGAssets.Skins.SandwichBelt'",
                    "largeIconWidth=42",
                    "largeIconHeight=46",
                    "beltDescription=\"CHK.SNDWCH\"",
                    "Mesh=LodMesh'PGAssets.sandwich'",
                    "MultiSkins(0)=Texture'PGAssets.Skins.SandwichTex2'",
                    "MultiSkins(1)=Texture'PGAssets.Skins.SandwichTex1'",
                    "CollisionRadius=8.000000",
                    "CollisionHeight=4.000000",
                    "Mass=3.000000"
                ],
                "exec": [],
                "extends": "FoodMMRPG",
                "functions": {},
                "header": [],
                "instructions": [],
                "loc": 22,
                "replication": "",
                "states": [],
                "variables": []
            }
        }
    },
    "models": {},
    "sounds": {},
    "textures": {}
}