:: Start {"position":"100,0"}
<<nobr>>
<<if visited() == 1>>
    <<run setupRPG()>>
    <<newcharacter JC Denton>> <<focus JC Denton>><<newcharacter Trooper>>
    <<addfocus JC Denton>> <<addfocus Trooper>>
    <<forcetrainskill 'all'>>
    <<givesp 6575>>
<</if>><</nobr>>
Your infolink beeps. You hear a message.

<<say 'Unknown'>><<type 25ms>>Hello, JC. Let's get started.

Before we begin, how would you like your <<link 'skill points'>><<skills>><</link>> distributed? Choose carefully, it may be important.
(Click or tap highlighted text to interact with that object, or move to that zone. Skills screen is also available in the sidebar to the left.)


Once you have finished, we can [[begin the story|Liberty Island: South Dock]], or if you need some help, there is the [[training|Training]] simulation.
<</type>><</say>>


:: Battle {"position":"100,600"} Test {"position":"100,700"}

battle system has all characters in an array, with a cooldown timer
each turn, all cooldown timers go down 1, when at 0, its that characters turn to act


defencounter macro creates a new battle state object in memory
<<defencounter>>

Create a new character in the encounter object, with their ID and name
<<espawn 'nsf001' 'Terrorist'>>
<<espawn 'unatco001' 'UNATCO Trooper'>>

add encounter character from name in tales' character array, takes their health values etc
<<espawnfromchar 'Scott'>>

alliances decide which side the character is on, can be arbitrary group, any character != alliance is an enemy
default is 0 for player, 1 for spawned characters
<<esetalliance 'unatco001' 0>>

Add some text to that characters actions array that is randomly chosen
<<eaddaction 'nsf001'>>
Terrorist does nothing.
<</eaddaction>>

:: Battle

:: You Died {"position":"0,1000"}
You died.


:: PassageReady {"position":"100,900"}
<<if !inConversation()>>\
<</if>>

:: StoryMenu {"position":"0,1100"}
<<link 'Goals'>><<goals>><</link>>
<<link 'Notes'>><<notes>><</link>>
<<if !inConversation()>>\
<<link 'Wait'>><<reload>><</link>>
<<link 'Inventory'>><<inventory>><</link>>
<<link 'Augs'>><<qdiag 'Alpha Notice' 'Feature not yet implemented.'>><</link>>
<<link 'Skills'>><<skills>><</link>>
/*<<link 'Characters'>><<focusmenu>><</link>>*/
<<if inPuzzle()>><<link 'Command'>><<cli>><</link>><<else>><<link "''Command''">><<cli>><</link>><</if>>
<</if>>


:: StoryInit {"position":"100,800"}
<<character 'alex' 'img/AlexJacobson_infolink.webp'>>

<<defskill 'Computer' '1125'>>
<<defskill 'Electronics' '1800'>>
<<defskill 'Environmental' '675'>>
<<defskill 'Lockpicking' '1800'>>
<<defskill 'Medicine' '900'>>
<<defskill 'Swimming' '675'>>
<<defskill 'Demolitions' '900'>>
<<defskill 'Heavy' '1350'>>
<<defskill 'Low-Tech' '1350'>>
<<defskill 'Pistol' '1575'>>
<<defskill 'Rifle' '1575'>>

<<definfo 'Pistol'>>A standard-issue PIS MSK4600-A 10mm pistol.<</definfo>>

<<definfo 'Riot Prod'>>A standard-issue SIS RSW20 Riot Prod, which can temporarily paralyze targets. The riot prod has been extensively used by security forces who wish to keep what remains of the crumbling peace and have found the prod to be an valuable tool. Its short range tetanizing effect is most effective when applied to the torso or when the subject is taken by surprise.<</definfo>>

<<definfo 'Sniper'>>The military PIS LRW350 sniper rifle is the superior tool for the interdiction of long-range targets. When coupled with the proven 30.06 round, a marksman can achieve tight groupings at better than 1 MOA (minute of angle) depending on environmental conditions.<</definfo>>

<<definfo 'GEP Gun'>>The GEP (Guided Explosive Projectile) gun is a relatively recent invention in the field of armaments: a portable, shoulder-mounted launcher that can fire rockets and laser guide them to their target with pinpoint accuracy. While suitable for high-threat combat situations, it can be bulky for those agents who have not grown familiar with it.<</definfo>>

<<definfo 'Mini-Crossbow'>>The mini-crossbow was specifically developed for espionage work, and accepts a range of dart types (normal, tranquilizer, or flare) that can be changed depending upon the mission requirements. This particular model is codenamed Night Sleeper, due to its effectiveness as rendering most opponents unconcious within moments.<</definfo>>

<<definfo 'Nano-Keyring'>>A nanokey ring can read and store the two-dimensional molecular patterns from different nanokeys, and then recreate those patterns on demand.
'When you collect keys in the world, they are automatically stored in the keyring.'<</definfo>>

<<definfo 'Ammo Box'>>A storage system for ammunition.
'When you collect ammo in the world, they are sorted here.'<</definfo>>

<<defhook 'Medkit' 'inventory'>>
<<run giveHealth(null, 25)>><<reload>><<qdiag 'Healed' 'You healed 25 health, curently at <<gethealth>>'>><<takeitem 'Medkit'>>
<</defhook>>

<<defhook 'Ammo Box' 'inventory'>><<ammo true>><</defhook>>

<<defhook 'Nano-Keyring' 'inventory'>><<keyring true>><</defhook>>

<<defhook 'Medkit' 'give' 'inv_limiter' '10'>><</defhook>>
<<defhook 'Lockpick' 'give' 'inv_limiter' '10'>><</defhook>>
<<defhook 'Multitool' 'give' 'inv_limiter' '10'>><</defhook>>
<<defhook 'Pistol' 'give'>><<if playerHasItem("Pistol")>><<addammo "Pistol">><<else>><<setflag "give_event_pass" "true">><</if>><</defhook>>
<<defhook 'Riot Prod' 'give'>><<if playerHasItem("Riot Prod")>><<addammo "Riot Prod">><<else>><<setflag "give_event_pass" "true">><</if>><</defhook>>
<<defhook 'Sniper' 'give'>><<if playerHasItem("Sniper")>><<addammo "Sniper" 1>><<else>><<setflag "give_event_pass" "true">><</if>><</defhook>>
<<defhook 'GEP Gun' 'give'>><<if playerHasItem("GEP Gun")>><<addammo "GEP Gun" 1>><<else>><<setflag "give_event_pass" "true">><</if>><</defhook>>
<<defhook 'Mini-Crossbow' 'give'>><<if playerHasItem("Mini-Crossbow")>><<addammo "Mini-Crossbow" 1>><<else>><<setflag "give_event_pass" "true">><</if>><</defhook>>

<<defgroup 'weapon' 'Crowbar' 'Pistol' 'Riot Prod' 'Mini-Crossbow' 'GEP Gun' 'Sniper' 'Baton'>>
<<defgroup 'nonlethal' 'Riot Prod' 'Baton'>>
<<defgroup 'melee' 'Crowbar' 'Baton'>>
<<defgroup 'ranged' 'Pistol' 'Mini-Crossbow' 'GEP Gun' 'Sniper'>>

<<set $tutorials to false>>
<<set $alert_level to 0>>
<<set $cli_log to null>>
<<set $cli_cwd to "/">>

:: StoryCaption {"position":"0,800"}
<<if tags().includes("underwater")>>\
<<if getOxygen() > 0>>''You are underwater and losing oxygen.'' <<run takeOxygen(null, 20)>><<getoxygen>><<else>>''You need air! Taking health damage.''\
<<run takeDamage(null, 10)>><</if>>\
<<else>><<if getOxygen() < 100>> Catching your breath. <<run giveOxygen(null, 10)>><<getoxygen>><</if>><</if>>
<<showhealth>>
<<showenergy>>
<<showoxygen>>
<<if !inConversation()>><<print State.passage>><</if>>
<<print $varcaption>>\
<<if zoneHasItems('here')>>\
There are items here:
<<zoneitems>>
<</if>>

:: PassageHeader {"position":"0,125"}
<<parsecli>>

:: PassageFooter {"position":"0,200"}
<<set $cli_input to "">>

:: w [widget] {"position":"0,900"}
<<widget "container">>\
<<if getFlag($args[0]) isnot "true" and hasItemOf('melee')>> <<link '$args[1] container'>><<addtozone 'here' $args[2]>><<setflag $args[0] "true">><<reload>><<qdiag 'Contents' 'It contains a $args[2].'>><</link>> (Use ''<<print hasItemOf('melee')>>'' to break open)\
<</if>><</widget>>



:: StoryTitle {"position":"100,1000"}
Deus Ex: Machina Memorias Alpha/Demo

:: StoryData {"position":"0,300"}
{
	"ifid": "7A858D87-DE11-4B1B-A54A-0B48BEB01366",
	"format": "SugarCube",
	"format-version": "2.35.0"
}
